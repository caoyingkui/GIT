{
    "id": "SOLR-256",
    "title": "Stats via JMX",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "search",
            "update"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This patch adds JMX capability to get statistics from all the SolrInfoMBean.\n\nThe implementation is done such a way to minimize code changes. \nIn SolrInfoRegistry, I have overloaded Map's  put and remove methods to register and unregister SolrInfoMBean in MBeanServer. \n\nLater on, I am planning to use register and unregister methods in SolrInfoRegistry and removing getRegistry() method (Hiding the map instance to other classes)",
    "attachments": {
        "jmx.patch": "https://issues.apache.org/jira/secure/attachment/12359154/jmx.patch",
        "SOLR-256.patch": "https://issues.apache.org/jira/secure/attachment/12380269/SOLR-256.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Sharad Agarwal",
            "id": "comment-12502258",
            "date": "2007-06-07T08:06:38+0000",
            "content": "It uses Dynamic MBean to expose all SolrInfoMBean getStatistics() NameList keys as String getters. "
        },
        {
            "author": "Sharad Agarwal",
            "id": "comment-12503723",
            "date": "2007-06-12T04:40:34+0000",
            "content": "-Corrected line wrap to 80 columns\n-Used the original LinkedHashMap (when jmx monitoring in not enabled) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12507659",
            "date": "2007-06-24T06:06:17+0000",
            "content": "update of previous patch that works against trunk (r550170) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12507660",
            "date": "2007-06-24T06:21:23+0000",
            "content": "Sharad: JMX is one of those things i don't really understand very well, but i tried out the patch and played around with jconsole and it's really cool.\n\none thing i'm not clear on (forgive my jmx ignorance) when trying to figure out how jconsole worked, i found some info saying that to enable JMX in a java app, you use \"-Dcom.sun.management.jmxremote\" option on the java command line ... doing that even without this patch allowed jconsole to \"autodetect\" that the \"start.jar\" process on my local machine supported JMX and gave me some interesting stats on things like memory and thread usage info from the jetty instance (including MBeans for the java.util.Logger's SOlr creates).\n\nWith the patch, it doesn't seem to matter wether i use that commandline option or not i can only get access to the new solr specific stats if i tell jconsole to explicitly connect to the service:jmx:... url that shows up in the log.  but in this case it can't get access to the other interesting stats from before (memory, thread, etc...) ... it seems like i can make two seperates \"sessions\" (forgive me if my terminology is wrong) to get this info, but not in the same session\n\nIs there a way to \"register\" the SOlr MBeans with the JVMs main JMX instance so all of hte info is available together?\n\nalso: if we're going to have options for specifying the port for remove JMX connections, shoudl we also have options for the user/pass to connect with?\n "
        },
        {
            "author": "Sharad Agarwal",
            "id": "comment-12507777",
            "date": "2007-06-25T06:09:59+0000",
            "content": "Hoss, thanks for having given a look at the patch.\n\nVia -Dcom.sun.management.jmxremote jvm \"local\" platform monitoring gets enabled; and you get to see all jvm statistics.\n\nThis patch actually starts its own mbean registry (called MBeanServer).  \n    mbeanServer = MBeanServerFactory.createMBeanServer();\n        java.lang.String serviceUrl = \"service:jmx:rmi:///jndi/rmi://\"\n            + InetAddress.getLocalHost().getHostAddress().toString() + \":\"\n            + jmxPort + \"/solr\";\n        JMXConnectorServer cs = JMXConnectorServerFactory\n            .newJMXConnectorServer(new JMXServiceURL(serviceUrl), null,\n                mbeanServer);\n        cs.start();\n\nInstead of starting its own, other alternative (as you have pointed out) could be to use platform registry itself. In that case:\nMBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\nRegister all solr mbean into platform mbeanserver itself. In this case all info would be available together. \n\nRemote monitoring and access control could be set up using appropriate com.sun.management.jmxremote.port, com.sun.management.jmxremote.password.file, com.sun.management.jmxremote.ssl options. I found http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html#properties pretty handy.\n\nI agree with you that having solr stats along with jvm stats makes more sense as it will require just one registry to manage.(setting up ports and access control). I can work on the patch to have that in place.\n\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12507998",
            "date": "2007-06-25T21:17:19+0000",
            "content": "> Instead of starting its own, other alternative (as you have pointed out) could be to use platform registry itself. In that > case:\n> MBeanServer mbs = ManagementFactory.getPlatformMBeanServer(); \n\nthat seems like the way to go.\n\n the one thing i'm not clear on is if there is simple  programmaticly way to tell when JMX monitoring is already enabled so we can still do the check you have in the static block and only use the JMXified impls if we need them (i'm assuming you put that in because there is some overhead we want to avoid if JMX is not needed)\n\nthe javadocs for ManagementFactory.getPlatformMBeanServer() indicate that it creates on first use ... so testing that won't work ... we could test for the system properties ourselves, but i think servlet containers like jetty and tomcat have their own config file syntax for enabling JMX and then call the neccessary underlying methods , so just becuase those properties aren't set doesn't neccessarily mean anything right?\n\ndo you know if my guess about servlet containers programmaticly turning JMX on even without the standard system properties being set is true? do you have any suggestions on how to deal with this?   "
        },
        {
            "author": "Sharad Agarwal",
            "id": "comment-12508053",
            "date": "2007-06-26T04:43:55+0000",
            "content": "ArrayList list = MBeanServerFactory.findMBeanServer(null);\ngives all registered mbeanserver. It could be used to figure out programitically whether jmx is enabled or not.\n\n "
        },
        {
            "author": "Sharad Agarwal",
            "id": "comment-12511983",
            "date": "2007-07-12T06:26:49+0000",
            "content": "Update of patch to work on standard JAVA_OPTS to enable JMX. \n\nNow standard JMX properties (refer http://java.sun.com/j2se/1.5.0/docs/guide/management/agent.html#properties) are used to configure JMX.\n\nTo test the patch \nset -Dcom.sun.management.jmxremote in JAVA_OPTS environment variable\nthen try using jconsole.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12514115",
            "date": "2007-07-20T06:32:59+0000",
            "content": "Sharad: my concern with your most recent patch is that if a servlet container uses it's own config to drive programmatic JMX Server creation (jetty plus appears to do this past on the example jetty-jmx.xml config file, but i haven't actually confirmed this), then Solr won't detect it  because it's looking explicitly for the system properties.\n\nbased on the javadocs your findMBeanServer(null) idea seems right on the money ... i'm attaching a tweak to your patch that uses this appraoch, and it seems to work great, what do you think?\n\n(was there a reason you decided to look for the properties explicitly instead of try this appraoch?)\n\nAny JMX experts want to chime in whether we should be doing something differently?  "
        },
        {
            "author": "Sharad Agarwal",
            "id": "comment-12514588",
            "date": "2007-07-23T08:40:27+0000",
            "content": "I earlier tried with findMBeanServer(null) with tomcat; and it always return me non-empty list of mbeanservers irrespective of JMX enabled or not. In tomcat it gets enabled via system properties.\nSo to me it seems that having mbean server instance may not really confirm that JMX is enabled or not. \n\nSaying that, i think it may be OK to have the MonitoredMap even when JMX is not enabled. (dont think any overhead in using MonitoredMap); whenever JMX is enabled by either of the ways (standard system properties or via jetty config), both would work fine.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12514884",
            "date": "2007-07-24T07:09:06+0000",
            "content": "Hmmm... some quick poking around makes it seem that tomcat always uses MBeanServers to manage things \u2013 regardless of whether you explicitly turn on JMX monitoring or not (there seems to be an assumption that of course you want to monitor you server \u2013 i can't really argue with that)\n\ni don't really know enough about JMX to know if there really is any sort of overhead here \u2013 i suppose it wouldn't hurt to only use the MOnitoredMap if an explicit option is set (but we shouldn't startup our own MBeanServer like hte orriginal patch \u2013 just use the main one)  but i'm also fine committing the patch as is. \n\nany tomcat/jmx experts want to chime in here? "
        },
        {
            "author": "Sami Dalouche",
            "id": "comment-12528595",
            "date": "2007-09-18T22:33:56+0000",
            "content": "Hoss: It would probably be interesting to look at how Spring Framework solved the problem.\n\nhttp://static.springframework.org/spring/docs/2.0.x/reference/jmx.html\n\nSpring JMX allows to export beans using JMX, and has an autodetection of the MBeanServer..  (\"locateExistingServerIfPossible\"). So, their code should probably either be linked, or reused to achieve similar effect...\n\nRegards,\nSami Dalouche "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12528615",
            "date": "2007-09-19T00:23:52+0000",
            "content": "Sami: thanks for the pointer to the spring docs ... both because it's informative and because it made me realize this issue is still open, i thought i'd committed this a long time ago ... doh!\n\nSpring's approach to figuring out if there is an MBeanServer is basically the same as what we've been looking at doing: call MBeanServerFactory.findMBeanServer and see what we get ... they just put some more bells and whistles on it to warn you if more then one is found and you haven't configured the agentId of the one you want (which is a good idea)\n\nthe general approach spring takes to JMX as a whole however is subtly different then what we've been talking about:  so far we've discussed:\n\n\n\thaving Solr specific configs for creating a Solr specific MBeanServer and if those are set, then wrap all of our info registry stuff so they are MBean aware.\n...OR...\n\thaving no Solr specific config options and wrapping the info registry stuff in MBeans if we detect an MBeanServer already running.\n\n\n\nSpring's appraoch:\n\n\thave spring specific configs that specify things should be wraped in MBeans\n\thave spring specific configs that specify if a spring specific MBeanServer should be created, and if not which existing MBeanServer to try and use by agentId.\n\tif the first config option is set, but not the second, then register those MBeans with whatever MBeanServer you can find.\n\n\n\n...this seems like the right way to go.  people that don't want any JMX at all won't get it.  people who want JMX if-and-only-if they've activate an MBeanServer via the servlet container can configure the MBean wrapping option.  people that want Solr to do it all can configure solr with that info as well.\n\nbasically it's a merge of both styles of patches so far.\n\nUnfortunately most of the existing patches are now unusable because of the Multi-core refactoring ... but i will try to work on a new patch (not sure when though, so if anyone else is gung ho don't let me stop you)\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12528851",
            "date": "2007-09-19T18:30:09+0000",
            "content": "proposed solrconfig.xml syntax...\n\n<jmx />\n\n...wraps the solr registry stuff in MBeans, adds them to the first MBeanSearver it finds (if any) but will not create one.\n\n<jmx agentId=\"foo\" />\n\n...wraps the solr registry stuff in MBeans, adds them to the first MBeanServer it finds matching that agentId, error if MBeanServer can't be found.\n\n<jmx serviceurl=\"service:jmx:rmi:///jndi/rmi://localhost:9999/solr\" />\n\n...wraps the solr registry stuff in MBeans, foracbly spins up a new MBeanServer exposed for remote monitoring at the specific service url, if the JMXConnectorServer can't be started (probably because the serviceurl is bad) then error.\n\n(we can punt on the issue of security \u2013 if users want Solr to manage their JMX remote debuging then it's wide open; if you want password files or ssl, then configure that with the JVM system properties for remote debugging and just tell solr \"<jmx />\")\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12589504",
            "date": "2008-04-16T11:34:50+0000",
            "content": "A new patch which incorporates Hoss's proposed syntax. All three syntax such as jmx, jmx with agentId and jmx with serviceUrl are supported.\n\nSolrConfig is modified to load JMX configuration. A new class called JmxManager is introduced which intializes JMX support and registers all SolrInfoMBeans (using core.getInfoRegistry). JmxManager is created per core in the SolrCore constructor. It is destroyed in the SolrCore.close() method. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12589545",
            "date": "2008-04-16T13:20:09+0000",
            "content": "Fixed SOLR-256.patch to avoid NullPointerException during core shutdown when JMX is not enabled. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12589836",
            "date": "2008-04-17T06:18:57+0000",
            "content": "Changes\n\n\tChanged the type of the SolrInfoMBeans to the key specified in registry. Previously, I had used the SolrInfoMBean class's simple name which lead to duplicate registration of LRUCache (which is used as filterCache, queryResultCache and documentCache).\n\tFixed the parent name of the MBeans to solr (if using single cores). With multicores, the parent name is solr/core-name\n\tThrows an exception if no server is found with the given agentId\n\tRemoved code I had added for debugging\n\n\n\nAlso, I've added <jmx /> in the example solrconfig.xml to turn on JMX by default. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12590025",
            "date": "2008-04-17T13:30:34+0000",
            "content": "No changes, just synchronizing with the changes in SolrCore made by SOLR-509 commit "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12596288",
            "date": "2008-05-13T05:56:39+0000",
            "content": "No changes. Just synchronizing the patch with the latest trunk code. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12596369",
            "date": "2008-05-13T12:04:20+0000",
            "content": "Is it possible to write JUnit tests for this?  I don't know much about JMX, but was thinking it still makes sense to have tests.\n\nIf not, what is the best way to test?  \n\nFWIW, the latest patch applies cleanly and all current tests pass. "
        },
        {
            "author": "Marshall Weir",
            "id": "comment-12596494",
            "date": "2008-05-13T18:55:40+0000",
            "content": "Tested the latest patch against the trunk. Almost everything works great. I get one warning:\n\nWARNING: Could not getStatistics on info bean org.apache.solr.handler.admin.AdminHandlers\n\nIt seems to work fine, but I'm new to both Solr and JMX.\n\nThanks for the updated patch Shalin\nMarshall "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12596677",
            "date": "2008-05-14T09:04:12+0000",
            "content": "Marshall - Thank you for trying the patch. I've noticed those warnings too. I'll take a look into it.\n\nGrant - Yes, I believe we can write JUnit tests for this (or at least a part of the functionality). I'll try to submit a new patch with tests by the end of this week. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12598843",
            "date": "2008-05-21T22:54:59+0000",
            "content": "skimming the patch, i think it's worth trying to get this in 1.3 assuming Shalin is able to ad some unit tests.\n\nShalin: the three things that jumped out at me when reading the patch (unfortunately didn't have time to try testing it) is...\n\n\tnot sure why the separate init method is needed in the JmxManager class ... particularly since hte rest of hte constructor should be skipped if the init method doesn't set server ... seems simpler to just put lal of that in the constructor.\n\twe should think about the situation when new \"stuff\" is dynamical registered after the SolrCore starts up ... SolrCore.registerRequestHandler for example can be called at any time.  We may need to sprinkle some more hooks in SolrCore to call JmxManager.register (and to make JmxManager.register more resilient in case it gets called on an already register object, or when JMX is disabled anyway)\n\twe should be careful about documenting what <jmx /> does ... i think in the example config you said it turns JMX monitoring on by default, but that's not true \u2013 it turns it on if and only if an existing MBeanServer is found ... we should be clear about that.\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12599207",
            "date": "2008-05-22T21:57:22+0000",
            "content": "Hoss \u2013 I agree on all three points. I would like to see it in 1.3 too. I can take this up after I'm finished with SOLR-572. If someone else wants to work on this, please go ahead. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12607189",
            "date": "2008-06-23T11:33:42+0000",
            "content": "I'm taking a look again at this feature. Hope to have a patch ready soon.\n\nA few issues I found was that apart from SolrCore.registerRequestHandler, the SolrIndexSearcher is also dynamic and needs to be handled. I also found other issues like SolrIndexSearcher puts the cache objects into the InfoRegistry map but that they are never removed from the map. The SolrCore#closeSearcher calls:\n\ninfoRegistry.remove(\"currentSearcher\");\n\n but the SolrIndexSearcher adds/removes itself using its name. I think we should use \"currentSearcher\" itself as the key instead of name because the name changes after commits and that would make it very difficult to setup monitoring for SolrIndexSearcher using JMX.\n\nTo handle dynamic registration and unregistration, I think we should use the approach that Sharad used in his original patch which was to create a class which extends Map and overrides the put and remove methods. That will make sure that SolrInfoMBeans are automatically registered and unregistered and will keep the JMX related code in one place. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12607480",
            "date": "2008-06-24T05:57:28+0000",
            "content": "Changes\n\n\n\tUpdated the documentation in example solrconfig.xml as per Hoss's suggestion\n\tRenamed JmxManager to JmxMonitoredMap which extends a ConcurrentHashMap and overrides put, remove and clear methods\n\tThe JmxMonitoredMap is used to hold the infoRegistry (String->SolrInfoMBean) so that registration and unregistration is done automatically (which takes care of dynamic registration of request handlers, lazy loading, new SolrIndexSearchers etc.)\n\tThe SolrIndexSearcher is added with the name \"searcher\" to the map so that the name of the MBean doesn't change which helps setup monitoring\n\tInstead of removing SolrIndexSearcher from the registry, it is simply replaced when SolrIndexSearcher#register method is called. This makes sure that the searcher registered with JMX is the current searcher (with a small margin of error)\n\tAdded two tests\n\t\n\t\tTestJmxMonitoredMap passes a service url syntax to JmxMonitoredMap and uses a mocked SolrInfoMBean to test the put, remove and clear methods. Note that this test uses a hard-coded port number \u2013 unavailability of this port will fail the test.\n\t\tTestJmxIntegration uses the AbstractSolrTestCase with the platform MBeanServer to test availability of Solr MBeans and tests for its updation by adding a document.\n\t\n\t\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12610272",
            "date": "2008-07-03T16:28:39+0000",
            "content": "Syncing the patch with trunk. No other changes in the code base.\n\nI've created a wiki page to document the configuration, functionality and usage of this feature at http://wiki.apache.org/solr/SolrJmx (work in progress) "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12615609",
            "date": "2008-07-22T12:39:57+0000",
            "content": "Syncing the patch with the trunk code.\n\nIt seems that the Query.instanceOf method that I was using in TestJmxIntegration was added only in Java 6. Strangely, eclipse did not complain about it even though the compiler in eclipse was set to 5.0. The test has been changed and uses an alternate 5.0 compatible way. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12617205",
            "date": "2008-07-26T18:51:34+0000",
            "content": "Syncronizing with the trunk code. No other changes.\n\nHoss \u2013 Is there anything else we need to do to commit this? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12617632",
            "date": "2008-07-29T01:07:04+0000",
            "content": "Shalin:\n\nI'm really sorry, I'm way behind schedule on my \"patch review\" responsibilities.\n\nskimming the patch, I see no red flags.\n\nSome minor misc nitpicks... \n\n\n\tI'd prefer if we removed the hard coded port number in TestJmxMonitoredMap (hard coded stuff like that has caused us nothing but problems in the past).  If i'm understanding the JMXServiceURL javadocs correctly, let's hardcode port=0 for the url constructed by the test ... then add a getJMXServiceURL() to JmxMonitoredMap that the test can then call and pass to to the JMXConnectorFactory ... that should give us either a random port that isn't in use by anyone else, right?\n\tit seems like it would be a little cleaner if SolrIndexSearcher.register() registered itself before it registered it's subcomponents .. not sure that it really matters, but it certain reads a little weird.\n\tSolrIndexSearcher.register() is logging '\"Registering new searcher: \" + System.currentTimeMillis()' for every cache it registers ... that seems like a cut/paste mistake.\n\tis there any reason not to have the searcher's add/remove themselves using their true name on register()/close() and have register() call  put(\"searcher\", this) like you have it now? ... that way you'd get the benefits you mentioned before (continuous monitoring of the current searcher) but you could also get information about how many \"live\" searchers there currently are, and what their stats look like (so you could, for example, notice when there is a really old Searcher hanging around for some inexplicable reason, probably a bug.)\n\tcouldn't we completely eliminate any overhead of JMX for people who haven't enabled it by adding an \"isEnabled()\" method to JmxMonitoredMap that returns true if server!=null and then make the SolrCore changes look like...\n\n     //Initialize Registry w/JMX if enabled\n     JmxMonitoredMap<String,SolrInfoMBean> tmp = new JmxMonitoredMap<String,SolrInfoMBean>(name, config.jmxConfig);\n     infoRegistry = (tmp.isEnabled() ? tmp : new HashMap<String,SolrInfoMBean>() );\n\n\n\n\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12617635",
            "date": "2008-07-29T01:08:49+0000",
            "content": "Shalin's been doing all the work on this puppy, no reason for it to be assigned to me anymore.\n\nCommit whenever you're ready dude. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12617771",
            "date": "2008-07-29T11:57:12+0000",
            "content": "Hoss, thanks for the comments.\n\n\n\tSpecifying port=0 to ServiceUrl does not work, it blindly tries to connect to localhost on port 0 and fails with a java.rmi.ConnectException. We can try to do something like this:\n\nServerSocket server = new ServerSocket(0);\nint port = server.getLocalPort();\nserver.close();\n// Use the port\n\n\nHowever it will not be reliable on every environment. I can put this into a loop and retry a fixed number of times before failing. That should be good enough.\n\n\n\n\n\tAgreed\n\tCopy/paste error \n\tThat's a very good idea.\n\tNot sure if it really matters but that's very easy to do.\n\n\n\nI shall give a patch shortly. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12617884",
            "date": "2008-07-29T18:00:00+0000",
            "content": "Incorporates Hoss's suggestions as per comment above.\n\nAnother change is that the UpdateHandler constructor adds itself to the infoRegistry. This leads to an NullPointerException in DirectUpdateHandler2#getStatistics because when JmxMonitoredMap tries to read the statistics, the instance variables of DUH2 haven't been initialized yet. The call to infoRegistry.put has now been moved to SolrCore constructor right after it creates the UpdateHandler.\n\nI shall commit this shortly. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12617892",
            "date": "2008-07-29T18:15:22+0000",
            "content": "Committed revision 680795. "
        }
    ]
}