{
    "id": "SOLR-11712",
    "title": "Streaming throws IndexOutOfBoundsException against an alias when a shard is down",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I have an alias against multiple collections. If any one of the shards the underlying collection is down then the stream handler throws an IndexOutOfBoundsException\n\n\n{\"result-set\":{\"docs\":[{\"EXCEPTION\":\"java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\",\"EOF\":true,\"RESPONSE_TIME\":11}]}}\n\n\n\nFrom the Solr logs:\n\n2017-12-01 01:42:07.573 ERROR (qtp736709391-29) [c:collection s:shard1 r:core_node13 x:collection_shard1_replica1] o.a.s.c.s.i.s.ExceptionStream java.io.IOException: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n        at org.apache.solr.client.solrj.io.stream.CloudSolrStream.constructStreams(CloudSolrStream.java:414)\n        at org.apache.solr.client.solrj.io.stream.CloudSolrStream.open(CloudSolrStream.java:305)\n        at org.apache.solr.client.solrj.io.stream.ExceptionStream.open(ExceptionStream.java:51)\n        at org.apache.solr.handler.StreamHandler$TimerStream.open(StreamHandler.java:535)\n        at org.apache.solr.client.solrj.io.stream.TupleStream.writeMap(TupleStream.java:83)\n        at org.apache.solr.response.JSONWriter.writeMap(JSONResponseWriter.java:547)\n        at org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:193)\n        at org.apache.solr.response.JSONWriter.writeNamedListAsMapWithDups(JSONResponseWriter.java:209)\n        at org.apache.solr.response.JSONWriter.writeNamedList(JSONResponseWriter.java:325)\n        at org.apache.solr.response.JSONWriter.writeResponse(JSONResponseWriter.java:120)\n        at org.apache.solr.response.JSONResponseWriter.write(JSONResponseWriter.java:71)\n        at org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:65)\n        at org.apache.solr.servlet.HttpSolrCall.writeResponse(HttpSolrCall.java:809)\n        at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:538)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:361)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:305)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1691)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:582)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n        at org.eclipse.jetty.rewrite.handler.RewriteHandler.handle(RewriteHandler.java:335)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n        at org.eclipse.jetty.server.Server.handle(Server.java:534)\n        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320)\n        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)\n        at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)\n        at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)\n        at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\n        at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)\n        at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)\n        at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)\n        at java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n        at java.util.ArrayList.rangeCheck(ArrayList.java:653)\n        at java.util.ArrayList.get(ArrayList.java:429)\n        at org.apache.solr.client.solrj.io.stream.TupleStream.getShards(TupleStream.java:152)\n        at org.apache.solr.client.solrj.io.stream.CloudSolrStream.constructStreams(CloudSolrStream.java:399)\n        ... 42 more\n\n\n\n\nThe stack trace is from Solr 6.6.1 so the lines might be slightly off from master",
    "attachments": {
        "SOLR-11712-with-fix.patch": "https://issues.apache.org/jira/secure/attachment/12906143/SOLR-11712-with-fix.patch",
        "SOLR-11712-without-fix.patch": "https://issues.apache.org/jira/secure/attachment/12906144/SOLR-11712-without-fix.patch",
        "SOLR-11712.patch": "https://issues.apache.org/jira/secure/attachment/12905475/SOLR-11712.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-01-10T15:06:29+0000",
            "content": "Attached patch with improved exception log line. Let me know if we need to write test for this, we may need to create a new test class. ",
            "author": "Amrit Sarkar",
            "id": "comment-16320397"
        },
        {
            "date": "2018-01-10T19:05:39+0000",
            "content": "Yes we should add a test for this.  ",
            "author": "Varun Thacker",
            "id": "comment-16320870"
        },
        {
            "date": "2018-01-12T05:36:16+0000",
            "content": "Varun Thacker, as per your feedback. Test added. Beasts of 100 rounds passed. ",
            "author": "Amrit Sarkar",
            "id": "comment-16323568"
        },
        {
            "date": "2018-01-15T19:22:21+0000",
            "content": "\u00a0Hi Amrit,\n\n\u00a0\n\nWhen I run StreamingTest#testStreamWithNoActiveNodes\u00a0 without the fix in\u00a0TupleStream\u00a0 I don't hit the \"IndexOutOfBoundsException: Index: 0, Size: 0\" reported in the stack trace of the Jira.\u00a0\n\n\u00a0\n\nPerhaps we should write a test which first create 2 collections on two different nodes, create an alias to reference both collections. Then stop one node and issue a stream query? We should see IndexOutOfBoundsException and then we can find the fix for it? ",
            "author": "Varun Thacker",
            "id": "comment-16326531"
        },
        {
            "date": "2018-01-15T21:35:17+0000",
            "content": "Varun Thacker, right. I wrote tests for once case and copied over to StreamingTests and never validated it fails without the patch or not. Sorry about that.\n\nAttached two patches: with-fix and without-fix which validate IndexOutOfBoundException and its corresponding fix, with new test class: StreamingAliasColTest ",
            "author": "Amrit Sarkar",
            "id": "comment-16326585"
        },
        {
            "date": "2018-01-15T23:38:34+0000",
            "content": "Hi Amrit,\n\n\u00a0\n\nWhen I run\u00a0StreamingAliasColTest even without the fix in TupleStream I still don't see the Solr server throwing\u00a0IndexOutOfBoundException . Am I missing something ?\n\n\u00a0\n\nAlso if you look at the stack trace closely the error is not coming from TupleStream.\n\n\u00a0\n\njava.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n        at org.apache.solr.client.solrj.io.stream.CloudSolrStream.constructStreams(CloudSolrStream.java:414)\n ",
            "author": "Varun Thacker",
            "id": "comment-16326636"
        },
        {
            "date": "2018-01-15T23:56:24+0000",
            "content": "Varun Thacker: please note the StreamingAliasColTest is Nightly test and the with-fix patch successfully failed for me when changes in TupleStream was removed. Regarding the stack trace, please see the entire stack trace below:\n\n\n   [junit4]   2> java.io.IOException: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n   [junit4]   2> \tat org.apache.solr.client.solrj.io.stream.ParallelStream.constructStreams(ParallelStream.java:276)\n   [junit4]   2> \tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.open(CloudSolrStream.java:274)\n   [junit4]   2> \tat org.apache.solr.client.solrj.io.stream.eval.StreamingAliasColTest.getTuples(StreamingAliasColTest.java:216)\n   [junit4]   2> \tat org.apache.solr.client.solrj.io.stream.eval.StreamingAliasColTest.testParallelUniqueStreamWithNoShards(StreamingAliasColTest.java:177)\n   [junit4]   2> \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]   2> \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [junit4]   2> \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]   2> \tat java.lang.reflect.Method.invoke(Method.java:498)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1737)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:934)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:970)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:984)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:57)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\n   [junit4]   2> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:368)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:817)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:468)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:943)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:829)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:879)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:890)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:57)\n   [junit4]   2> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\n   [junit4]   2> \tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:368)\n   [junit4]   2> \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]   2> Caused by: java.lang.IndexOutOfBoundsException: Index: 0, Size: 0\n   [junit4]   2> \tat java.util.ArrayList.rangeCheck(ArrayList.java:657)\n   [junit4]   2> \tat java.util.ArrayList.get(ArrayList.java:433)\n   [junit4]   2> \tat org.apache.solr.client.solrj.io.stream.TupleStream.getShards(TupleStream.java:152)\n   [junit4]   2> \tat org.apache.solr.client.solrj.io.stream.ParallelStream.constructStreams(ParallelStream.java:256)\n   [junit4]   2> \t... 42 more\n\n ",
            "author": "Amrit Sarkar",
            "id": "comment-16326642"
        },
        {
            "date": "2018-01-16T21:05:01+0000",
            "content": "Hi Amrit,\n\n\u00a0\n\nLet's backup for a second. I applied\u00a0SOLR-11712-without-fix.patch against master . Then I ran\u00a0\n\nStreamingAliasColTest commenting out the nightly annotation. The test passes ( which I'm guessing it shouldn't since it's the no fix patch ) . Also I don't see any\u00a0IndexOutOfBoundsException error in the log\n\n\u00a0\n\nAlso do we really need to annotate it as nightly? The test locally doesn't take more than 5-10s to run\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16327802"
        },
        {
            "date": "2018-01-16T21:28:01+0000",
            "content": "Varun Thacker,\n\nI should have been clear. Sorry about the confusion. with-fix and without-fix are two different tests which are suppose to pass every time.\n\nwith-fix, test class validates, it receives SolrException and the updated log error.\nwithout-fix, test class validates, itr receives IndexOutOfBoundException and old error. Since I am catching the error and not throwing again, there is no mark of error on logs.\n\nwith-fix patch: 176-182\n\n\n      try {\n        getTuples(pstream);\n      } catch (Exception e) {\n        e.printStackTrace();\n        assertTrue(e.getCause() instanceof SolrException);\n        assertTrue(e.getMessage().contains(\"No active nodes for shard:\"));\n      }\n\n\n\nwithout-fix patch: 181-187\n\n\n      try {\n        getTuples(pstream);\n      } catch (Exception e) {\n        assertFalse(e.getCause() instanceof SolrException); // TODO - important assertions\n        assertFalse(e.getMessage().contains(\"No active nodes for shard:\"));\n        assertTrue(e.getCause() instanceof IndexOutOfBoundsException);\n      }\n\n\n\nalso, this tests executed for round about 100 seconds on my system, but if it is executing within second on yours. I will upload fresh patch with no nightly. ",
            "author": "Amrit Sarkar",
            "id": "comment-16327848"
        },
        {
            "date": "2018-01-17T11:04:28+0000",
            "content": "Varun Thacker,\n\nAs per our offline discussion, I tried optimising the tests as much I could have, moved helper functions into utils class. Since TestStreamErrorHandling needs more than one collection, configureCluster method is overridden. Let me know if I OVERDID the optimisation. ",
            "author": "Amrit Sarkar",
            "id": "comment-16328620"
        }
    ]
}