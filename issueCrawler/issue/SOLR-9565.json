{
    "id": "SOLR-9565",
    "title": "Make every UpdateRequestProcessor available implicitly",
    "details": {
        "components": [
            "UpdateRequestProcessors"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Now that we can 'construct' the URP chains through request parameters, we should make all the URPs available automatically. The next challenge is to make them read the configuration from request parameters as well\n\nto access HTMLStripFieldUpdateProcessorFactory the parameter could be processor=HTMLStripField (The UpdateProcessorFactory part is automatically appended )\n\nThe next step is to make the URPs accept request parameters instead of just configuration parameters e.g: processor=HTMLStripField&HTMLStripField.fieldName=<some-field>",
    "attachments": {
        "SOLR-9565.patch": "https://issues.apache.org/jira/secure/attachment/12873069/SOLR-9565.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-13T02:10:10+0000",
            "author": "David Smiley",
            "content": "+1 to the idea\n\nJust curious; is there any code enabling this already in a common spot (if so where)?  Perhaps some other issue that escaped my attention made some of this possible already?\n ",
            "id": "comment-16047334"
        },
        {
            "date": "2017-06-13T04:24:06+0000",
            "author": "Noble Paul",
            "content": "look at SolrCore.getUpdateProcessorChain(SolrParams params) for relevant changes\n\nThis was added as part of SOLR-9657 ",
            "id": "comment-16047399"
        },
        {
            "date": "2017-06-13T22:12:25+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Great with added flexibility. Few comments:\n\n\tRemember that there is a difference between an URP class and an (named) URP instance. It must be possible to instantiate the same URP several times with different params (e.g. CloneFieldUpdateProcessorFactory).\n\tInstead of the magic -UpdateProcessorFactory suffix magic, can we perhaps let all URPs be named SPIs like tokenfilters and codecs, and use the short-name as key, e.g. processor=htmlstripfield?\n\tWhy continue inventing dot-separated config options for complex stuff like this when we are moving towards JSON elsewhere? &HTMLStripField.fieldName=<some-field>&HTMLStripField.otherParam=<some-value>... could instead be \n\n/solr/update?processor={\"name\": \"htmlstripfield\", \"fieldName\": \"foo\"}&processor={...}\n\n or more complex example:\n \n/solr/update?processor={\"name\": \"clonefield\", \"source\": {\"fieldRegex\": \".*_price$\", \"exclude\": [\"list_price\", \"other\"]}, \"dest\": \"all_prices\"}\n\n\n ",
            "id": "comment-16048472"
        },
        {
            "date": "2017-06-14T03:26:15+0000",
            "author": "Noble Paul",
            "content": "Instead of the magic -UpdateProcessorFactory suffix magic, can we perhaps let all URPs be named SPIs like \n\nGoing forward, people will write their own URPs and how do you add these names \n\nWhy continue inventing dot-separated config options for complex stuff like this when we are moving towards JSON elsewhere? \n\nI like json , but using a full json in request parameter is a big problem. Users have to be careful about how to escape each character.\u00a0Normal tools such as postman support typing json in payload , but not in parameters\n\nUntil we come up with a better format we can use the dot separated syntax. Whatever format we come up with has to be well thought out and should be a common syntax for all, no just URPs ",
            "id": "comment-16048661"
        },
        {
            "date": "2017-06-14T07:24:27+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Going forward, people will write their own URPs and how do you add these names\nThis is also the case for analysis plugins. After you have installed a new 3rd party token filter, you can address it in Lucene using its well-known SPI name\n\nusing a full json in request parameter is a big problem\nYea, was thinking about json.facet, but as you say, that is typically sent in request body, and for updates the request body is reserved for content... But it's not strange to require clients to URL-encode a request parameter either, they need to do that already, just that you need to do it more often with json.\nThe example from CloneFieldURP above was taken from the ref-guide and illustrates what kind of config complexity we need to support, how do you do that with simple dots? There is no point in supporting some config for some URPs, and inventing a new parsing method for each seems sub optimal. The JSON above could be converted to NamedList or whatever in a generalized way and piggy-back on the existing config parser. ",
            "id": "comment-16048786"
        },
        {
            "date": "2017-06-14T08:48:06+0000",
            "author": "Noble Paul",
            "content": "This is also the case for analysis plugins. After you have installed a new 3rd party token filter, you can address it in Lucene using its well-known SPI name\n\nBut how do we do it in Solr? There is no such plugin registration mechanism\n\nThere is no point in supporting some config for some URPs, and inventing a new parsing method for each seems sub optimal. \n\nIn general I'm concerned about the ugliness/inconvenience of passing json in request parameters. IMHO The dot separated convention is much better than sending a full json \n\nI would rather want to create a more generic json payload to be created using the params API and reference it in a given request.  ",
            "id": "comment-16048884"
        },
        {
            "date": "2017-06-14T10:20:28+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "But how do we do it in Solr? There is no such plugin registration mechanism\nSPI is a Java feature, and I guess we could do the same as Analysis has done with org.apache.lucene.analysis.util.AnalysisSPILoader i.e. URProcessorSPILoader?\n\nOn a side note I would also very much like for Solr's schema to switch to configuring tokenizers, filters and charfilters using their SPI name instead of full class name, e.g. <filter name=\"synonym\"> instead of <filter class=solr.SynonymFilterFactory\">, see also discussion in SOLR-5287\n\nI would rather want to create a more generic json payload to be created using the params API and reference it in a given request.\nIf the whole point is that it should be possible to issue a one-off query with URP processing without prior configuration, then all needs to go in the same request. ",
            "id": "comment-16049014"
        },
        {
            "date": "2017-06-14T12:30:24+0000",
            "author": "David Smiley",
            "content": "Perhaps we simply need to accept that implicit registered URPs will sometimes have limitations that aren't present when you configure the chain explicitly.  I think accepting that is better than a JSON based parameter for URPs \u2013 I don't think it's worth it.  At least this is what I think.\n\nBTW I suspect it will be uncommon for users to actually pass all these params to Solr in an /update request.  Perhaps for a quick prototype but for the client to send them all each time under normal/production scenarios, I think I would rather want to use initParams for the same reason initParams is available for search.  I'm a fan of parameters being defined Solr-side so that request to Solr (be it for search and now for updates) have the essentials unique to the request and not things that are constant.  It's too bad there doesn't seem to be an API to configure a chain; I have to modify solrconfig.xml.  I often find myself needing to edit the config files because there are Solr config API gaps, so I often give up on the API altogether because I keep finding the gaps so what's the point.  Shrug; maybe that's just me?\n\n+1 to the SPI registration mechanism. ",
            "id": "comment-16049121"
        },
        {
            "date": "2017-06-14T12:39:05+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "You can already call Config API with add-updateprocessor, see http://lucene.apache.org/solr/guide/6_6/config-api.html#ConfigAPI-Whatabout_updateRequestProcessorChain_ and then use the name you selected in &processor=myName, so perhaps this is good enough even if it requires two steps?\n\nAbout making all URPs available implicitly I think that SPI can do much of the heavy-lifting here and then the add-updateprocessor can accept \"id\":\"urp-spi-name\" as alternative to \"class\":\"solr.MyURPFactory\" ",
            "id": "comment-16049126"
        },
        {
            "date": "2017-06-14T13:23:45+0000",
            "author": "Noble Paul",
            "content": "The URP chain is a huge ball and chain when all that you need to do is modify an input document. Just think of it as a feature of /update and things become much simpler.\n\nIf you wish to configure more complex URPs , please use the request params feature to create the param set and reuse it over multiple requests. ",
            "id": "comment-16049172"
        },
        {
            "date": "2017-06-15T07:18:32+0000",
            "author": "Noble Paul",
            "content": "this patch introduces a set of predefined set of URPs only (template and atomic). User defined URPs wil have to be explicitly registered his config API ",
            "id": "comment-16050089"
        },
        {
            "date": "2017-06-15T07:19:49+0000",
            "author": "Noble Paul",
            "content": "So we will have simpler well defined names for each URP. New ones will be added to the list as and when we add support for them ",
            "id": "comment-16050091"
        },
        {
            "date": "2017-06-15T08:54:26+0000",
            "author": "Amrit Sarkar",
            "content": "\nthis patch introduces a set of predefined set of URPs only (template and atomic). User defined URPs wil have to be explicitly registered his config API\nOnce this patch is committed, we will try to add the the remaining URPs to the simpler well defined names list one by one starting with UUID-URPF: SOLR-10858. ",
            "id": "comment-16050184"
        },
        {
            "date": "2017-06-15T09:01:12+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "\n+  public static final Map<String, Class> implicits = new ImmutableMap.Builder()\n+      .put(TemplateUpdateProcessorFactory.NAME, TemplateUpdateProcessorFactory.class)\n+      .put(AtomicUpdateProcessorFactory.NAME, AtomicUpdateProcessorFactory.class)\n+      .build();\n\n\n-1 on hard-coding certain plugins this way. it is an anti pattern that prohibits equal handling of 3rd party URP plugins. Please use SPI or similar. ",
            "id": "comment-16050191"
        },
        {
            "date": "2017-06-15T09:23:46+0000",
            "author": "Amrit Sarkar",
            "content": "just skimming;\n\nShouldn't support for processor=X, X in XURPFactory, continue? AtomicURP can be invoked both via processor=atomic, simplified and processor=Atomic, already supported. I saw complaints on StatelessScriptURP where stateless is needless, processor=script can be handy there, along with existing URPs shipped.\n\nThis will mean 3rd party URPs need not to do anything special out of order and can use the prefix to invoke their respective processor. ",
            "id": "comment-16050219"
        },
        {
            "date": "2017-06-15T11:18:25+0000",
            "author": "Noble Paul",
            "content": "shouldn't support for processor=X, X in XURPFactory, continue?\nThe problem is this leads to unexpected errors when XURPFactory expects some initialization params. In this case only the ones which are migrated to the new format can be used. The only problem is when u wish to use a URP which is loaded from blob store. Users can always issue a config api command to add it ",
            "id": "comment-16050350"
        },
        {
            "date": "2017-06-16T06:39:43+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e1d4ec798732b30a3bd87f72beb98465a8735376 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e1d4ec7 ]\n\nSOLR-9565: The name of TemplateUpdateRequestProcessorFactory' is changed to 'template' from 'Template' and the\n  name of 'AtomicUpdateProcessorFactory' is changed to 'atomic' from 'Atomic' ",
            "id": "comment-16051464"
        },
        {
            "date": "2017-06-16T09:31:45+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "-1 on hard-coding certain plugins this way. it is an anti pattern that prohibits equal handling of 3rd party URP plugins. Please use SPI or similar.\nLet me reiterate my veto against the centrally hardcoded list of short names, which creates an unnecessary tight coupling. ",
            "id": "comment-16051671"
        },
        {
            "date": "2017-06-16T09:45:39+0000",
            "author": "Noble Paul",
            "content": "What do you mean by hard coding? Nothing is hard coded. You can configure these URPs in anyway you want. This is one extra option\n\nfor instance, you wish to configure the TemplateUpdateProcessorFactory in your solrconfig.xml or using config API with a different name called foo , you can do it ",
            "id": "comment-16051688"
        },
        {
            "date": "2017-06-16T09:57:32+0000",
            "author": "Noble Paul",
            "content": "BTW, are you aware of the fact that names of responseWriter, qparserPlugin, valueSourceParser, transformerFactory and requestHandler are hard coded in Solr. But, we also allow them to be configured with another name ",
            "id": "comment-16051706"
        },
        {
            "date": "2017-06-16T11:57:08+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "What do you mean by hard coding? Nothing is hard coded\nSee code fragment in my comment above. Making UpdateRequestProcessorChain compile time dependent on a few select URP plugins creates one way to implicitly register plugins made by committers and no way at all to make 3rd party URP plugins implicitly available. That makes some plugins \"more alike\" than others...\n\nBTW, are you aware of the fact that names of responseWriter, qparserPlugin, valueSourceParser, transformerFactory and requestHandler are hard coded in Solr. But, we also allow them to be configured with another name\n\nI sure am. And I think we should change those as well to be auto discovered instead of explicitly listed in a Java file. AnalysisSPILoader does a good job with analysis plugins, and Solr could take advantage of that in allowing short-name references to filters in <analysis> in schema. We can do the same for all these others. Just drop your jar file into lib folder, start Solr and start referring to the classes by well known name. ",
            "id": "comment-16051806"
        },
        {
            "date": "2017-06-16T12:23:01+0000",
            "author": "Noble Paul",
            "content": "If you are suggesting that there should be a new and better way for automatically discovering plugins, I'm all for it. But if you are suggesting that we shouldn't make our prepackaged plugins more easily available like the other dozens of plugins, I don't understand it ",
            "id": "comment-16051827"
        },
        {
            "date": "2017-06-16T12:56:34+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "My point is that adding something new like implicit URP, we should at least make an attempt at the correct way first, and if that fails, fall back to hard coding. I'll also withdraw the veto if the consensus is, for some good reason (time, complexity?), that the discovery stuff is added in a followup issue aiming at 7.x. ",
            "id": "comment-16051855"
        },
        {
            "date": "2017-06-16T14:31:33+0000",
            "author": "Steve Rowe",
            "content": "Policeman Jenkins found a reproducing master seed for a failure that appears to be caused by this issue https://jenkins.thetaphi.de/job/Lucene-Solr-master-Linux/19880:\n\n\nChecking out Revision 1744fa254af4ac11fd98e237df6e2e048bf89b1d (refs/remotes/origin/master)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=UpdateRequestProcessorFactoryTest -Dtests.method=testRequestTimeUrp -Dtests.seed=D275AF948D9CA93A -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=ii-CN -Dtests.timezone=GB-Eire -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.00s J1 | UpdateRequestProcessorFactoryTest.testRequestTimeUrp <<<\n   [junit4]    > Throwable #1: org.apache.solr.common.SolrException: No such processor Template\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([D275AF948D9CA93A:77C7EF5C2BD260CE]:0)\n   [junit4]    > \tat org.apache.solr.update.processor.UpdateRequestProcessorChain.getReqProcessors(UpdateRequestProcessorChain.java:284)\n   [junit4]    > \tat org.apache.solr.update.processor.UpdateRequestProcessorChain.constructChain(UpdateRequestProcessorChain.java:236)\n   [junit4]    > \tat org.apache.solr.core.SolrCore.getUpdateProcessorChain(SolrCore.java:1446)\n   [junit4]    > \tat org.apache.solr.update.processor.UpdateRequestProcessorFactoryTest.testRequestTimeUrp(UpdateRequestProcessorFactoryTest.java:54)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [junit4]    > \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]    > \tat java.base/java.lang.reflect.Method.invoke(Method.java:564)\n   [junit4]    > \tat java.base/java.lang.Thread.run(Thread.java:844)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70), sim=RandomSimilarity(queryNorm=true): {}, locale=ii-CN, timezone=GB-Eire\n   [junit4]   2> NOTE: Linux 4.10.0-21-generic i386/Oracle Corporation 9-ea (32-bit)/cpus=8,threads=1,free=220664384,total=379584512\n\n ",
            "id": "comment-16051975"
        },
        {
            "date": "2017-06-16T14:36:52+0000",
            "author": "Steve Rowe",
            "content": "In fact UpdateRequestProcessorFactoryTest.testRequestTimeUrp() fails 100% of the time for me without supplying a seed. ",
            "id": "comment-16051979"
        },
        {
            "date": "2017-06-16T15:25:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e2d8f941e174a8d0e8db1fa3d580342e17bca734 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e2d8f94 ]\n\nSOLR-9565: missed updating the testcase ",
            "id": "comment-16052027"
        },
        {
            "date": "2017-06-16T15:25:38+0000",
            "author": "Noble Paul",
            "content": "fixed ",
            "id": "comment-16052028"
        },
        {
            "date": "2017-09-06T09:32:09+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "This is part of 7.0 and should be resolved and tagged with fix-version. ",
            "id": "comment-16155080"
        }
    ]
}