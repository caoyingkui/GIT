{
    "id": "LUCENE-7700",
    "title": "Move throughput control and merge aborting out of IndexWriter's core?",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "6.5",
            "7.0"
        ]
    },
    "description": "Here is a bit of a background:\n\n\tI wanted to implement a custom merging strategy that would have a custom i/o flow control (global),\n\tcurrently, the CMS is tightly coupled with a few classes \u2013 MergeRateLimiter, OneMerge, IndexWriter.\n\n\n\nLooking at the code it seems to me that everything with respect to I/O control could be nicely pulled out into classes that explicitly control the merging process, that is only MergePolicy and MergeScheduler. By default, one could even run without any additional I/O accounting overhead (which is currently in there, even if one doesn't use the CMS's throughput control).\n\nSuch refactoring would also give a chance to nicely move things where they belong \u2013 job aborting into OneMerge (currently in RateLimiter), rate limiter lifecycle bound to OneMerge (MergeScheduler could then use per-merge or global accounting, as it pleases).\n\nJust a thought and some initial refactorings for discussion.",
    "attachments": {
        "LUCENE-7700.patch": "https://issues.apache.org/jira/secure/attachment/12853726/LUCENE-7700.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15875826",
            "date": "2017-02-21T11:27:24+0000",
            "content": "A tentative first patch as a proof of feasibility. test-core passes for me without a problem.\n ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15875838",
            "date": "2017-02-21T11:37:47+0000",
            "content": "I created a fork here with up-to-date patch here:\nhttps://github.com/dweiss/lucene-solr/tree/LUCENE-7700\n\nOverview:\nhttps://github.com/apache/lucene-solr/compare/master...dweiss:LUCENE-7700?expand=1 ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15875883",
            "date": "2017-02-21T12:04:01+0000",
            "content": "Thank you Dawid Weiss for giving this some attention ... this intertwining is horribly messy today!  Your patch is a nice step forward.\n\nOne difference with your patch is we would now wrap the Directory for merge on every merge, instead of once up front, but that's fine (the cost is tiny vs. cost of the merge), and, possibly powerful, since each merge can now decide what to do about IO throttling / Directory wrapping.\n\nAnd it's nice that we can remove IW's ThreadLocal tracking the rate limiters.\n\n// TODO: no throughput control after changes; should we comply with merge scheduler/ policy here?\n\nI do think this it's important that the IO throttling applies when building the CFS file?  For a large merge, this is a big burst of IO in the end ... too bad we can't use an API like Linux's splice to efficiently copy bytes (though we'd likely still want throttling there too anyway...). ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15875888",
            "date": "2017-02-21T12:13:41+0000",
            "content": "One difference with your patch is we would now wrap the Directory for merge on every merge, instead of once up front, but that's fine (the cost is tiny vs. cost of the merge)\n\nI admit I do have a very specific scenario at hand and you're infinitely more experienced with merging, so if this is a problem we can always change it! The \"get-directory-wrapped-for-merging\" part is a bit clumsy, but I didn't figure out how to do it better.\n\nAnd it's nice that we can remove IW's ThreadLocal tracking the rate limiters.\n\nI think so too.\n\nI do think this it's important that the IO throttling applies when building the CFS file? For a large merge, this is a big burst of IO in the end\n\nThat part I didn't look too closely at, I agree. It should definitely be consistent with the rest of the throughput-control code, but there's no OneMerge instance there to work with... I'll take another look, maybe I'll come up with something. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15875907",
            "date": "2017-02-21T12:27:09+0000",
            "content": "Mike, even in current master the merge in addIndexes isn't going through mergeDirectory, but through the original directory, suppressing any bandwidth control?\n\n      // TODO: somehow we should fix this merge so it's\n      // abortable so that IW.close(false) is able to stop it\n      TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n\n\nSo it'd make sense to fix both of these, right? ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15882587",
            "date": "2017-02-24T12:39:22+0000",
            "content": "Here's another iteration. It came out quite cleanly I think. In short: I moved wrapForMerge to be a method of MergeScheduler. Aborting, pausing and timings on OneMerge are now part of a dedicated class (OneMergeProgress) and are entirely abstracted away from throughput control. In fact, now only ConcurrentMergeScheduler has access to bandwidth control (although it can be fairly easily added to any other scheduler).\n\nIndexWriter.addIndexec(Codec) doesn't respect merge scheduler's policies (and it wasn't before, so this isn't a breaking change).\n\nThe APIs have changed in a few places (didn't do a thorough check yet). Seems like a nice cleanup that untangles different concerns to different places.\n\nEverything would have to be triple-checked for correctness. I dropped synchronized blocks in a few places where a simple volatile variable was more adequate (and very likely much faster). ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15883563",
            "date": "2017-02-24T21:39:09+0000",
            "content": "Thanks Dawid Weiss; I'll have a look... ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15884313",
            "date": "2017-02-25T17:22:24+0000",
            "content": "No rush. I've corrected a few javadocs (github branch) and the tests and precommit pass for me. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15894216",
            "date": "2017-03-03T12:02:43+0000",
            "content": "Nice job fixing a few ancient typos \n\nLooks like javadocs for the private MergeRateLimiter.maybePause method are stale?\n\nWhy are we creating MergeRateLimiter on init of MergeThread and then again in CMS.wrapForMerge?  Seems like we could cast the current thread to MergeThread and get its already-created instance?\n\nWhy not updateIOThrottle in the main CMS thread, not the merge thread?  Else, I think we have an added delay, from when a backlog'd merge shows up, to when the already running merge threads kick up their IO throttle?\n\nMaybe add a comment to OneMergeProgress.owner and .setMergeThread that it's only used for catching misuse?\n\nCan we rename OneMergeProgress.pauseTimes -> pauseTimesNanos or NS?\n\nYou can just remove the //private final Directory mergeDirectory from IW.\n\nHmm it looks like CFS building is still unthrottled? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15894758",
            "date": "2017-03-03T17:50:54+0000",
            "content": "I'm on short holidays, Mike. Will reply on Tuesday in full. But the CFS thing \u2013 I don't think I changed anything there; that part in addIndexes was never really throttled properly... I think it should just run as fast as possible. Either this, or we should make it comply with mergescheduler's throttling strategy (although this would require creating onemerge, which is odd). ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15896183",
            "date": "2017-03-05T11:10:13+0000",
            "content": "But the CFS thing \u2013 I don't think I changed anything there; \n\nAha!  You are correct!  I was mis-reading the patch; I didn't realize the CFS change was just for addIndexes, but you're right.  Building CFS for a merged segment is in fact going through the wrapped Directory, so it can be throttled ... good.  I agree we should not change addIndexes behavior here. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15901091",
            "date": "2017-03-08T11:05:34+0000",
            "content": "Thanks for comments Mike!\n\nLooks like javadocs for the private MergeRateLimiter.maybePause method are stale?\n\nCorrected. I also changed some internal comments concerning waits < 1ms. (these are\npossible with the new locks API, but we still don't bother) and introduced some \nmore informative constants where appropriate.\n\nWhy are we creating MergeRateLimiter on init of MergeThread and then again in CMS.wrapForMerge? Seems like we could cast the current thread to MergeThread and get its already-created instance?\n\nGood catch, corrected.\n\nWhy not updateIOThrottle in the main CMS thread, not the merge thread? Else, I think we have an added delay, from when a backlog'd merge shows up, to when the already running merge threads kick up their IO throttle?\n\nI admit I didn't try to understand all of the CMS's rate-limit logic as it was quite complex, so\nI don't understand you exactly here. Start of the merge thread seemed like a sensible place to run the update IO throttle update, but I moved it back \u2013 doesn't seem to hurt anything.\n\nMaybe add a comment to OneMergeProgress.owner and .setMergeThread that it's only used for catching misuse?\n\nDone.\n\nCan we rename OneMergeProgress.pauseTimes -> pauseTimesNanos or NS?\n\nHehe... sure, sure. \n\nYou can just remove the //private final Directory mergeDirectory from IW.\n\nDone.\n\nHmm it looks like CFS building is still unthrottled?\n\nAlready discussed. \n\nRunning tests now. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15901244",
            "date": "2017-03-08T13:29:57+0000",
            "content": "I screwed up something in the latest patch because I'm getting assertion errors, will fix. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15901248",
            "date": "2017-03-08T13:31:39+0000",
            "content": "Ok, that was a trivial regression:\n\n--- a/lucene/core/src/java/org/apache/lucene/index/MergePolicy.java\n+++ b/lucene/core/src/java/org/apache/lucene/index/MergePolicy.java\n@@ -177,7 +177,7 @@ public abstract class MergePolicy {\n     }\n\n     final void setMergeThread(Thread owner) {\n-      assert owner == null;\n+      assert this.owner == null;\n       this.owner = owner;\n     }\n   }\n\n ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15902896",
            "date": "2017-03-09T11:14:59+0000",
            "content": "Thanks Dawid Weiss the new patch looks great!  +1 to push, and thank you for cleaning this up! ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15902900",
            "date": "2017-03-09T11:17:52+0000",
            "content": "Thanks for reviewing, Mike. I'm guessing this should go to 7.x only, right? Or can we backport it to 6.x as well, risking some minor API incompatibilities (these are internal APIs anyway, but who knows). ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15903178",
            "date": "2017-03-09T15:14:16+0000",
            "content": "I think it's fine to backport to 6.x. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15903223",
            "date": "2017-03-09T15:31:45+0000",
            "content": "Final patch. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15904774",
            "date": "2017-03-10T09:24:10+0000",
            "content": "Commit 9540bc37583dfd4e995b893154039fcf031dc3c3 in lucene-solr's branch refs/heads/master from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9540bc3 ]\n\nLUCENE-7700: Move throughput control and merge aborting out of IndexWriter's core. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15904776",
            "date": "2017-03-10T09:25:48+0000",
            "content": "Commit 8c5ea32bb9f2d9d8af98162e1e19c9559c8c602d in lucene-solr's branch refs/heads/branch_6x from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8c5ea32 ]\n\nLUCENE-7700: Move throughput control and merge aborting out of IndexWriter's core. ",
            "author": "ASF subversion and git services"
        }
    ]
}