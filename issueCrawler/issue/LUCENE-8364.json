{
    "id": "LUCENE-8364",
    "title": "Refactor and clean up core geo api",
    "details": {
        "components": [],
        "status": "Patch Available",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Improvement"
    },
    "description": "The core geo API is quite disorganized and confusing. For example there is Polygon for creating an instance of polygon vertices and holes and Polygon2D for computing relations between points and polygons. There is also a PolygonPredicate and DistancePredicate in GeoUtils for computing point in polygon and point distance relations, respectively, and a GeoRelationUtils utility class which is no longer used for anything. This disorganization is due to the organic improvements of simple LatLonPoint indexing and search features and a little TLC is needed to clean up api to make it more approachable and easy to understand.",
    "attachments": {
        "LUCENE-8364.patch": "https://issues.apache.org/jira/secure/attachment/12928500/LUCENE-8364.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16518292",
            "author": "Nicholas Knize",
            "content": "Initial patch provides:\n\n\n\tRefactor Polygon2D into a more descriptive GeoEdgeTree class (the end objective will be to make this package private and limit to computing relations between shapes)\n\tNew Circle class for encapsulating point distance computations.\n\tRefactor Predicate out of GeoEncodingUtils into its own standalone package private base class\n\tRefactor DistancePredicate out of GeoEncodingUtils into new Circle class\n\tRefactor PolygonPredicate out of GeoEncodingUtils into Polygon class\n\tNew Geometry interface and Shape class for providing a .relate method for computing relation between derived shapes with bounding boxes\n\tRemoved unused GeoRelationUtils utility class\n\tUpdated and added testing for new and existing geometries along with relations with bounding boxes\n\n ",
            "date": "2018-06-20T15:39:04+0000"
        },
        {
            "id": "comment-16518317",
            "author": "Nicholas Knize",
            "content": "The initial patch was dirty so I removed it... this is the correct one. ",
            "date": "2018-06-20T16:01:15+0000"
        },
        {
            "id": "comment-16518326",
            "author": "David Smiley",
            "content": "Thanks for the cleanup Nick; the cleanup is needed!\n\nBefore moving forward, lets see what becomes of the thread \"DISCUSS] Geo/spatial organization in Lucene\" I sent to the dev list today. ",
            "date": "2018-06-20T16:10:32+0000"
        },
        {
            "id": "comment-16518740",
            "author": "Nicholas Knize",
            "content": "Thanks David Smiley  No worries. And thanks for opening the discussion. In the meantime I'm hoping this provides the next natural step to making the existing API's more approachable, manageable, and extendable. ",
            "date": "2018-06-21T00:13:19+0000"
        },
        {
            "id": "comment-16518757",
            "author": "Robert Muir",
            "content": "Just looking, I have a few concerns:\n\n\twhat is the goal of all the new abstractions? Abstractions have a significant cost, and I don't think we should be building a geo library here. We should just make the searches and stuff work.\n\twhy does Polygon have new methods such as relate(), relatePoint() that are not used anywhere. We shouldn't add unnecessary stuff like that, we should keep this stuff minimal.\n\tthe hashcode/equals on Polygon2d is unnecessary. It is an implementation detail and such methods should not be used. For example all queries just use equals() with the Polygon.\n\tmethods like maxLon() on Polygon are unnecessary. These are already final variables so we don't need to wrap them in methods. Additionally such method names don't follow standard java notation: it seems to just add noise.\n\tsome of the checks e.g. in Polygon are unnecessary. We don't need checkVertexIndex when the user already gets a correct exception (IndexOutOfBounds).\n\n\n\nMaybe, it would be easier to split up the proposed changes so its easier to review. Especially for proposing any new abstract classes as I want to make sure that we really get value out of any abstractions, due to their high cost. ",
            "date": "2018-06-21T00:43:54+0000"
        },
        {
            "id": "comment-16518764",
            "author": "Robert Muir",
            "content": "Also the relate/relatePoint changes to Polygon are a big performance trap: this class exists solely as a thing to pass to queries. we shouldnt dynamically build large data structures and stuff here, and add complexity such as the caching and stuff it has, I really think this doesn't belong. ",
            "date": "2018-06-21T00:51:10+0000"
        },
        {
            "id": "comment-16519467",
            "author": "Nicholas Knize",
            "content": "Thanks Robert Muir for taking the time to review the first iteration patch. And for highlighting potential performance implications.\n\nwhat is the goal of all the new abstractions? \nAt this point, its nothing more than organization, approachability, maintainability of the existing code.\nI don't think we should be building a geo library here\nThat's fine. If that's the general consensus I'll update the patch to remove the abstractions and lock as much of this down as possible.\nMaybe, it would be easier to split up the proposed changes so its easier to review.\nI think removing the abstractions for this first cut will achieve that?\n\n\n\n ",
            "date": "2018-06-21T15:02:56+0000"
        },
        {
            "id": "comment-16519478",
            "author": "Robert Muir",
            "content": "Also there is another problem with having Polygon create Polygon2D datastructures, there is not a one-to-one relationship between the two.\n\nAnything using this should create Polygon2D explicitly itself because it has many-to-one relationship:\n\n\n  /** Builds a Polygon2D from multipolygon */\npublic static Polygon2D create(Polygon... polygons) {\n\n\n\nThis is really important: since for multipolygons it builds a 2-stage tree. We don't want to encourage users creating these things for individual polygons and using booleanquery or something like that, it will result in stuff that runs in linear time. ",
            "date": "2018-06-21T15:10:43+0000"
        },
        {
            "id": "comment-16519517",
            "author": "Nicholas Knize",
            "content": "I agree with that. That's why I left LatLonPointInPolygonQuery using Polygon2D but refactored the name to GeoEdgeTree. (hoping to make it a little more clear to what the class actually is). I'd like to make Polygon2D package private to the same package as LatLonPointInPolygonQuery (since that's the only place it should be used) but all LatLonPoint* still lives in sandbox. So perhaps the first step should be to graduate LatLonPoint to either core or spatial module as discussed in LUCENE-7314 ",
            "date": "2018-06-21T15:35:51+0000"
        },
        {
            "id": "comment-16519823",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 8 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   2m  0s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 43s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 43s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 49s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 19s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 19s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n  29m 40s \n  core in the patch failed.  \n\n\n +1 \n  unit  \n   2m 55s \n  sandbox in the patch passed.  \n\n\n +1 \n  unit  \n   0m 26s \n  spatial in the patch passed.  \n\n\n +1 \n  unit  \n   5m 36s \n  test-framework in the patch passed.  \n\n\n  \n   \n  46m 19s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n lucene.geo.TestRectangle \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8364 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12928500/LUCENE-8364.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 629081f \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 8 2015 \n\n\n Default Java \n 1.8.0_172 \n\n\n unit \n https://builds.apache.org/job/PreCommit-LUCENE-Build/36/artifact/out/patch-unit-lucene_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/36/testReport/ \n\n\n modules \n C: lucene lucene/core lucene/sandbox lucene/spatial lucene/test-framework U: lucene \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/36/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-06-21T22:44:20+0000"
        }
    ]
}