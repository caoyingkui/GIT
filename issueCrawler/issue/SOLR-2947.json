{
    "id": "SOLR-2947",
    "title": "DIH caching bug - EntityRunner destroys child entity processor",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "My intention is fix multithread import with SQL cache. Here is the 2nd stage. If I enable DocBuilder.EntityRunner flow even for single thread, it breaks the pretty basic functionality: parent-child join.\nthe reason is line 473 entityProcessor.destroy(); breaks children entityProcessor.\n\nsee attachement comments for more details.",
    "attachments": {
        "dih-cache-threads-enabling-bug.patch": "https://issues.apache.org/jira/secure/attachment/12506054/dih-cache-threads-enabling-bug.patch",
        "dih-cache-destroy-on-threads-fix.patch": "https://issues.apache.org/jira/secure/attachment/12506055/dih-cache-destroy-on-threads-fix.patch",
        "SOLR-2947.patch": "https://issues.apache.org/jira/secure/attachment/12506501/SOLR-2947.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13162452",
            "date": "2011-12-04T19:56:52+0000",
            "content": "To reproduce the issue just insert single line in test config by applying dih-cache-threads-enabling-bug.patch. It curiously breaks TestEphemeralCache. \n\nDocBuilder.doFullDump() considers request as dataImporter.getConfig().isMultiThreaded even the single thread is specified (DataImporter.initEntity() too straightforward). But it forces DocBuilder to choose EntityRunner branch instead of  buildDocument(). \n\nEntityRunner destroys entity processor (and cleanups the cache) per every run() call, but for child entity the run() is called many times - once per parent. As result the only first child is indexed, and it fails the test.\nYou can fix it by commenting entityProcessor destroying in EntityRunner.run() at the finally section. But you lose cache releasing at all.\ndih-cache-destroy-on-threads-fix.patch fixes entityProcessors destroying and cover it by slightly amended TestEphemeralCache "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13162466",
            "date": "2011-12-04T20:21:20+0000",
            "content": "a few thoughts\n\n\tformally DataImporter.initEntity() shouldn't consider config as multithread if the only single thread is specified\n\tI'm concerning for overall test coverage for EntityRunners. You see switching to them breaks the essential feature. Are they tested enough? is it worth to check the actual coverage? You see there is not tests, where child adds anything into parent. and\n\tbtw, can't we remove DocBuilder.buildDocument() and switch onto EntityRunners to avoid \"second system\" issue?\n\tin TestEphemeralCache I'd like to declare parent as cacheable entity too. Just for check how it works.\n\n\n\nafter this, the next fight is true multi-threading. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13164647",
            "date": "2011-12-07T19:38:04+0000",
            "content": "Clean up comment. Rename patch to conform to HowToContribute "
        },
        {
            "author": "James Dyer",
            "id": "comment-13167740",
            "date": "2011-12-12T20:02:56+0000",
            "content": "Mikhail,\n\nI appreciate your finding this bug and providing a fix.  Indeed I wasn't sure I was handling \"destroy()\" correctly for the multi-threaded case in SOLR-2382 but then again all tests were passing.\n\nI think you're absolutely correct we don't have enough threaded tests.  To help with this, I expanded \"TestEphemeralCache\" (see updated patch) to run it 3 times: first single-threaded, second single-threaded with 'threads=1', and third as truly multi-threaded (2-6 threads randomly chosen).\n\nObviously the third case still fails but you indicate you plan on fixing that one next?    That would be great if you could.  Let me know if there is any way I can help although I admit I'm a bit unsure of myself in the DIH multi-threaded code.  Is it your impression that DIH caching ever worked threaded, or do you think SOLR-2382 might have broken it?\n\nI also agree that it shouldn't use the \"threaded\" code if \"threads=1\"  For now, it provides us with a nice testing scenario to fix the 'destroy()' semantics without having to tackle the multi-threaded cacheing beast.\n\nAlthough I'm with you that it would be great if we could just combine the single-threaded and multi-threaded cases into the same code.  But I would think before that can happen all of these threaded bugs need to be worked through.\n\nI apologize for taking so long to look at this.  On the other hand, I'm not going to be much help to you in getting this committed.  But if I can help in any other way let me know. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13167755",
            "date": "2011-12-12T20:16:33+0000",
            "content": "Is it your impression that DIH caching ever worked threaded, or do you think SOLR-2382 might have broken it? \nNo. It didn't. Multiple threads don't work with CachedSqlEntityProcessor at 3.4 too.  \nBut I would think before that can happen all of these threaded bugs need to be worked through.\nok. I'm going to address it. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13176840",
            "date": "2011-12-28T22:09:21+0000",
            "content": "Ok. here is the patch, which fixes issue with destroy() and problem with multiple threads and CachedSqlEntityProcessor.\n\nCode\n\nContext.java, ContextImpl.java \n\n\n\tremoved SCOPE_DOC constant. I can't find any usages. Old impl isn't thread safe. We can implement it thread safe if you want. Let me know if it's necessary.\n\tPay attention that ContextImpl.putVal() ignores the scope provided. It should be tracked separately let me know if you like me to raise it.\n\n\n\nDataImporter.java \n\nI added DocBuilder.destroy() to stop thread pool after all work is done. I'm bothered by testCase's warns about \"thread leaks\"\n\nDIHCacheSupport.java\n\nit just introduces a getter. But I generated diff against uncommitted SOLR-2961, so line numbers can be wrong, let me know I re-diff it.\n\nDocBuilder.java \n\n\n\tEntityRunner stops create EntityProcessors and obtains it from constructor args\n\tproper destroying EntityProcessors\n\tEntityRunner.docWrapper is removed as not-thread-safe. it's passed explicitly by method arguments\n\tEntityRunner.entityEnded was't thread-safe too. moved into ThreadedEntityProcessorWrapper\n\tobject instantiating was drastically amended to be threadsafe\n\t\n\t\tsingle EntityRunner per Entity\n\t\tsingle EntityProcessor per EntityRunner\n\t\tN ThreadedEntityProcessorWrapper per EntityRunner uses its' EntityProcessor as delegate\n\t\twhere N is number of threads specified at root entity (threads attr is prohibited for child entities)\n\t\tThreadedEntityProcessorWrapper are numbered by their positions in EntityRunner's tepw list\n\t\tparent entity's ThreadedEntityProcessorWrapper always hits children's tepw with the same number as its' own\n\t\n\t\n\tparent entity's ThreadedEntityProcessorWrapper always hits children's tepw by plain Java synchronous call (w/o thread pool)\n\n\n\nEntityProcessor.java,EntityProcessorBase.java \nisPaged() property has been introduced\n\nEntityProcessorWrapper.java\nprotected transformRow() has been extracted from applyTransformer(). I need to reuse transformers logic for the paged flow but applyTransformer() has side-effect on rowcache field.\n\nThreadedEntityProcessorWrapper.java \nin addition to all refactorings above (instantiating and field move). it contains the core idea of multithred cached entity processor:\n\n\tafter tepw obtains access to thread-unaware delegate entityProcessor it need to pull whole page - all children records belong to the current parent,\n\twhole page is transformed and put into tepw.rowcahce, where they will be pulled later by the parent entity tepw\n\n\n\nTests\n\nTestThreaded.java \nadded full space test for CachedSqlEP for no, 1, 2, 10 (keep in mind 1 thread don't equal to no-threads)\n\nTestEphemeralCache.java \nadd double destroy() check EntityProcessors\n\ndataimport-cache-ephemeral.xml\nspecifies 10 threads and add double destroy() EntityProcessors\n\n\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13181908",
            "date": "2012-01-07T11:12:53+0000",
            "content": "Hello,\n\nI decided that my 32K patch from 28/Dec is to huge. I'm attaching the shorter version. It's quite close to the James's one, but I put @Ignore for threads=\"10\" to keep build green after apply; and I also assert that EntityProcessors are properly destroyed.\nI'm going to create sibling issue for DIH multi-threading and put most of my prev patch there.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13186000",
            "date": "2012-01-13T23:56:58+0000",
            "content": "I decided that my 32K patch from 28/Dec is to huge. I'm attaching the shorter version.\n\nMikhail: as someone who wants to help get DIH improvements/bug fixes commited, but probably understands less about DIH internals then you and James, i thank you for splitting out these issues and explaining what's going on, and pressing forward with patches that include tests.\n\nThe latest \"SOLR-2947.patch\" looks fairly good to me, and all tests pass (with the caveat that the @Ignored test depends on SOLR-3011 - although that should really be noted in the @Ignore msg) the one thing that really confuses me is the implementation of children(), it smells extremely fishy...\n\n\n+    Collection<EntityRunner> children(){\n+        return entityProcessorWrapper.iterator().next().children.values();\n+    } \n\n\n\n...why is it sufficient to get the children from only the first element of that iterator?  are there any situations where the iterator may not return any elements?\n\nI'm guessing the answer to the later is \"no\" because that would mean 0 threads, correct? (in which case, let's toss a java assert in there for good measure).\n\nAs for the first question: at first i thought this was because all of the  ThreadedEntityProcessorWrapper instances were initialized with identical EntityProcessors so any one would due (in which why not just use the entityProcessor handing directly off the parent EntityRunning) \u2013 but poking around ThreadedEntityProcessorWrapper i see that they seem to always create new EntityRunner instance, so i'm at a loss to understand how that \"children()\" method makes sense.\n\nIs this something that's just a hack that only works with 1 thread until/unless SOLR-3011 is resolved?  will this break things for people using multithreaded DIH without nested entities? (i don't think so \u2013 because that would contradict the premise of there being any child entities that need their entityProcessor to be desctoryed \u2013 but i wanted to sanity check the question).  Either way: a comment clarifying that monstrosity would be a good idea. \n\nJames: are you comfortable with the latest patch? "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13186263",
            "date": "2012-01-14T17:20:35+0000",
            "content": "...why is it sufficient to get the children from only the first element of that iterator? \n\n\n\tyes it is. just because DIH code works only with threads=1. assert entityProcessorWrapper.size()==1. but if we set threads to 2 or more, every TEPW will have own collection of children' entity runners (and every ER will have own EP). I address it in SOLR-3011 see my explanation above \"DocBuilder.java/object instantiating\".\n\n\n\nare there any situations where the iterator may not return any elements?\n\n\n\tEntityRunner.<init> declares size of this list 1 by default. if user configured it to 0 EntityRunner.run() method will fail due to entityProcessorWrapper.get(0).\n\n\n\nat first i thought this was because all of the ThreadedEntityProcessorWrapper instances were initialized with identical EntityProcessors\n\ndone in SOLR-3011 patch. \n\nfor (int i = 0; i < threads; i++) {\n        thepw = new ThreadedEntityProcessorWrapper(       ...\n                childrenRunners, i);           <-- identical EntityProcessors\n        entityProcessorWrapper.add(thepw);\n}\n\n\n\nIs this something that's just a hack that only works with 1 thread until/unless SOLR-3011 is resolved?\n\nin according to subj it's a fix for a bug introduced by SOLR-2384. threads=2 didn't work before, but now threads=1 doesn't work too. I removed wrong EP destroying, and implement destroying which works now for threads=1, and will work for threads=10 after SOLR-3011.\n\nwill this break things for people using multithreaded DIH without nested entities?\n\ntest passed, you know. it even will destroy root EP properly because the collecting of ERs in doFullDump() starts from placing root ER into result. \n\nEither way: a comment clarifying that monstrosity would be a good idea.\n\nI can't distinguish which monstrosity you refer to. \n\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13186264",
            "date": "2012-01-14T17:22:12+0000",
            "content": "add comments, assert, and root entity only test. though not really significant update. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13187889",
            "date": "2012-01-17T19:03:25+0000",
            "content": "I think this patch does the right thing here, calling \"destroy()\" down the hierarchy of EntityProcessors, but waiting until after doc-building is complete.  While I had it this way for the single-threaded code, I punted on the multi-threaded case simply hoping that because the unit tests were passing then everything would be alright  .  I appreciate the effort to improve the DIH multithreaded code.  We really need to get rid of bugs like this and long-term it would pay if we could try and make the code more maintainable, get better test coverage, etc.  \n\nAn example is the new \"children()\" method...using just the first ThreadedEntityProcessorWrapper from the list I think is valid because the \"children\" will be same on all the threads.  But then again, looking at how this all gets populated in the ThreadedEntityProcessorWrapper constructor, the answer (to me) isn't obvious.  Best I can say is this is probably correct and certainly a vast improvement than what is currently in Trunk.  \n\nSmall point here but I prefer the TestEphemeralCache changes I made in the Dec 11, 2011 patch version.  I switched to building the config file on-the-fly and testMultiThreaded() uses a random number of threads instead of always using 10.  Of course, if we go with this then we'd need to add \"@Ignore\" for testMultiThreaded() until SOLR-3011 can be commited. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13190650",
            "date": "2012-01-22T11:25:55+0000",
            "content": "Small point here but I prefer the TestEphemeralCache changes I made in the Dec 11, 2011 patch version.\n\nJames, \n\n\tmy test reads base config from xml file and patches number of thread for every run, as well as your test does. So, there is no much difference here.\n\tI agree that the random number of threads can be much reasonable than the constant one. Anyway it should be @Ignore ed until you know.\n\tThe really significant advantage of my test is DestroyCountCache which assert once-and-only-once destroy() call for caches.\n\n\n\nRegards "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13205615",
            "date": "2012-02-10T18:38:42+0000",
            "content": "James, \nMy congratulations for becoming a committer!\n\nCan't you push forward this one and small SOLR-2933 too to unlock brutal SOLR-3011?\n\nRegards "
        },
        {
            "author": "James Dyer",
            "id": "comment-13205644",
            "date": "2012-02-10T19:03:55+0000",
            "content": "I not set up yet and not sure how long it'll be.  But I do want to get the DIH bugs taken care of asap. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13208798",
            "date": "2012-02-15T21:08:16+0000",
            "content": "I will commit this shortly. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13209442",
            "date": "2012-02-16T15:42:45+0000",
            "content": "Trunk Only:  r1245014 & r1245018.  Thank you Mikhail (now to the next one  ). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13209477",
            "date": "2012-02-16T16:19:26+0000",
            "content": "Hi James: I think we should add a CHANGES.txt entry for this fix? "
        },
        {
            "author": "James Dyer",
            "id": "comment-13209489",
            "date": "2012-02-16T16:47:16+0000",
            "content": "This bug was caused by SOLR-2382 which is trunk-only.  Do we need a CHANGES.txt entry for that? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13209495",
            "date": "2012-02-16T16:53:30+0000",
            "content": "Sorry James, my mistake, I didn't realize that!  "
        }
    ]
}