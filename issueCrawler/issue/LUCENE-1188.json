{
    "id": "LUCENE-1188",
    "title": "equals and hashCode implementation in org.apache.lucene.search.* package",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.2,                                            2.3,                                            2.3.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I would like to talk about the implementation of equals and hashCode method  in org.apache.lucene.search.* package. \n\nExample One:\n\norg.apache.lucene.search.spans.SpanTermQuery (Super Class)\n\t<- org.apache.lucene.search.payloads.BoostingTermQuery (Sub Class)\n\nObservation:\n\n\n\tBoostingTermQuery defines equals but inherits hashCode from SpanTermQuery. Definition of equals is a code clone of SpanTermQuery with a change in class name.\n\n\n\nIntention:\n\nI believe the intention of equals redefinition in BoostingTermQuery is not to make the objects of SpanTermQuery and BoostingTermQuery comparable. ie. spanTermQuery.equals(boostingTermQuery) == false && boostingTermQuery.equals(spanTermQuery) == false.\n\n\nProblem:\n\nWith current implementation, the intention might not be respected as a result of symmetric property violation of equals contract i.e.\nspanTermQuery.equals(boostingTermQuery) == true (can be) && boostingTermQuery.equals(spanTermQuery) == false. (always)\n(Note: Provided their state variables are equal)\n\nSolution:\n\nChange implementation of equals in SpanTermQuery from:\n\nSpanTermQuery.java\n  public boolean equals(Object o) {\n    if (!(o instanceof SpanTermQuery))\n      return false;\n    SpanTermQuery other = (SpanTermQuery)o;\n    return (this.getBoost() == other.getBoost())\n      && this.term.equals(other.term);\n  }\n\n\n\nTo:\nSpanTermQuery.java\n  public boolean equals(Object o) {\n  \tif(o == this) return true;\n  \tif(o == null || o.getClass() != this.getClass()) return false;\n//    if (!(o instanceof SpanTermQuery))\n//      return false;\n    SpanTermQuery other = (SpanTermQuery)o;\n    return (this.getBoost() == other.getBoost())\n      && this.term.equals(other.term);\n  }\n\n\n\nAdvantage:\n\n\n\tBoostingTermQuery.equals and BoostingTermQuery.hashCode is not needed while still preserving the same intention as before.\n\n\n\n\n\tAny further subclassing that does not add new state variables in the extended classes of SpanTermQuery, does not have to redefine equals and hashCode.\n\n\n\n\n\tEven if a new state variable is added in a subclass, the symmetric property of equals contract will still be respected irrespective of implementation (i.e. instanceof / getClass) of equals and hashCode in the subclasses.\n\n\n\n\nExample Two:\n\n\norg.apache.lucene.search.CachingWrapperFilter (Super Class)\n\t<- org.apache.lucene.search.CachingWrapperFilterHelper (Sub Class)\n\nObservation:\nSame as Example One.\n\nProblem:\nSame as Example one.\n\nSolution:\nChange equals in CachingWrapperFilter from:\nCachingWrapperFilter.java\n  public boolean equals(Object o) {\n    if (!(o instanceof CachingWrapperFilter)) return false;\n    return this.filter.equals(((CachingWrapperFilter)o).filter);\n  }\n\n\n\nTo:\nCachingWrapperFilter.java\n  public boolean equals(Object o) {\n//    if (!(o instanceof CachingWrapperFilter)) return false;\n    if(o == this) return true;\n    if(o == null || o.getClass() != this.getClass()) return false;\n    return this.filter.equals(((CachingWrapperFilter)o).filter);\n  }\n\n\n\nAdvantage:\nSame as Example One. Here, CachingWrapperFilterHelper.equals and CachingWrapperFilterHelper.hashCode is not needed.\n\n\nExample Three:\n\norg.apache.lucene.search.MultiTermQuery (Abstract Parent)\n\t<- org.apache.lucene.search.FuzzyQuery (Concrete Sub)\n\t<- org.apache.lucene.search.WildcardQuery (Concrete Sub)\n\nObservation (Not a problem):\n\n\n\tWildcardQuery defines equals but inherits hashCode from MultiTermQuery.\nDefinition of equals contains just super.equals invocation. \n\n\n\n\n\tFuzzyQuery has few state variables added that are referenced in its equals and hashCode.\nIntention:\n\n\n\nI believe the intention here is not to make objects of FuzzyQuery and WildcardQuery comparable. ie. fuzzyQuery.equals(wildCardQuery) == false && wildCardQuery.equals(fuzzyQuery) == false.\n\nProposed Implementation:\nHow about changing the implementation of equals in MultiTermQuery from:\n\nMultiTermQuery.java\n    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (!(o instanceof MultiTermQuery)) return false;\n\n      final MultiTermQuery multiTermQuery = (MultiTermQuery) o;\n\n      if (!term.equals(multiTermQuery.term)) return false;\n\n      return getBoost() == multiTermQuery.getBoost();\n    }\n\n\n\nTo:\nMultiTermQuery.java\n    public boolean equals(Object o) {\n      if (this == o) return true;\n//      if (!(o instanceof MultiTermQuery)) return false;\n      if(o == null || o.getClass() != this.getClass()) return false;\n\n      final MultiTermQuery multiTermQuery = (MultiTermQuery) o;\n\n      if (!term.equals(multiTermQuery.term)) return false;\n\n      return getBoost() == multiTermQuery.getBoost();\n    }\n\n\n\nAdvantage:\n\nSame as above. Here, WildcardQuery.equals is not needed as it does not define any new state. (FuzzyQuery.equals is still needed because FuzzyQuery defines new state.)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2008-02-25T14:26:01+0000",
            "content": "Updated the advantage of the proposed solution to make it more clear. ",
            "author": "Chandan Raj Rupakheti",
            "id": "comment-12572091"
        },
        {
            "date": "2011-01-25T16:31:41+0000",
            "content": "The equals and hashCode implementations in Query subclasses were already fixed to use getClass() and not instanceof in 2.9 by various other issues. Also the boost comparison was mostly removed by calling super. ",
            "author": "Uwe Schindler",
            "id": "comment-12986503"
        }
    ]
}