{
    "id": "LUCENE-2598",
    "title": "allow tests to use different Directory impls",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/build"
        ],
        "type": "Test",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.1,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Now that all tests use MockRAMDirectory instead of RAMDirectory, they are all picky like windows and force our tests to\nclose readers etc before closing the directory.\n\nI think we should do the following:\n\n\tchange new MockRAMDIrectory() in tests to .newDirectory(random)\n\tLuceneTestCase[J4] tracks if all dirs are closed at tearDown and also cleans up temp dirs like solr.\n\tfactor out the Mockish stuff from MockRAMDirectory into MockDirectoryWrapper\n\tallow a -Dtests.directoryImpl or simpler to specify the default Directory to use for tests: default being \"random\"\n\n\n\ni think theres a chance we might find some bugs that havent yet surfaced because they are easier to trigger with FSDir\nFurthermore, this would be beneficial to Directory-implementors as they could run the entire testsuite against their Directory impl, just like codec-implementors can do now.",
    "attachments": {
        "LUCENE-2598.patch": "https://issues.apache.org/jira/secure/attachment/12451943/LUCENE-2598.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-08-12T05:31:05+0000",
            "content": "Robert, how about if we use JUnit's TemporaryFolder (http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/TemporaryFolder.html)? We can put it in LTC(J4) and have tests that wish to create on-disk resources use it. JUnit guarantees the contents of this folder will be removed when the test is finished, and if the test did not close its resources properly, it will fail. It will save us some code, nothing we cannot develop on our own, as you suggest. ",
            "author": "Shai Erera",
            "id": "comment-12897583"
        },
        {
            "date": "2010-08-12T11:24:14+0000",
            "content": "Robert, how about if we use JUnit's TemporaryFolder (http://kentbeck.github.com/junit/javadoc/latest/org/junit/rules/TemporaryFolder.html)? \n\nHi Shai, I looked at this, but I don't think we should use it. I think we should keep a consistent API between LuceneTestCase and LuceneTestCase4J.\n\nBut this TemporaryFolder is too basic for our needs and does not support our usage of LuceneTestCase4J (where the index is created in @beforeClass and destroyed in @afterClass),\nit only supports removing the directory after each test METHOD.\n\nFurthermore, there is no way to tell junit where to put this TemporaryFolder. Right now ensure that tests don't stomp on each others feet by giving\nthem unique temp directories per-jvm, i would like to continue ensuring that any temporary data is placed there, not somewhere randomly on the users system.\nThis way all data created by 'ant test' is guaranteed to be removed in 'ant clean'.\n ",
            "author": "Robert Muir",
            "id": "comment-12897699"
        },
        {
            "date": "2010-08-12T12:41:00+0000",
            "content": "Ok, that makes sense. I forgot that we create different dir per test JVM. I read about it and thought it's neat - apparently it's too basic. ",
            "author": "Shai Erera",
            "id": "comment-12897724"
        },
        {
            "date": "2010-08-12T12:46:40+0000",
            "content": "Yeah i think its neat too, but i guess really we abuse junit \n\nthe first thing I am working (#1 and #2) is to add newDirectory(Random), and for LuceneTestCase[j4] to ensure all MockRAMDirectories are actually closed in tests.\nThis is good because MockRAM checks in its close if readers etc are closed: and its pickiness is os-independent (will fail on unix too) ",
            "author": "Robert Muir",
            "id": "comment-12897727"
        },
        {
            "date": "2010-08-12T19:56:13+0000",
            "content": "Here's the first step, that adds newDirectory() and LuceneTestCase[J4] track if these are closed correctly by the tests.\n\ni fixed places where it wasn't, but since we use MockRAMDirectory everywhere, it tracks if files are left open against it, and so I fixed all the unclosed Readers etc too in the tests.\n\nThere was only one non-test bug, PersistentSnapshotDeletionPolicy makes its own IndexWriter but if it throws an exception in the ctor, never closes it.  ",
            "author": "Robert Muir",
            "id": "comment-12897926"
        },
        {
            "date": "2010-08-12T21:09:42+0000",
            "content": "Committed revision 984968 to trunk. I'll backport to 3x and then look at making MockDirectoryWrapper from MockRAM so we can support other directories in tests. ",
            "author": "Robert Muir",
            "id": "comment-12897950"
        },
        {
            "date": "2010-08-22T23:54:06+0000",
            "content": "attached is a patch (currently has a few problems) to switch the functionality of MockRAMDirectory into MockDirectoryWrapper.\n\nbefore applying i did the following svn moves (renames) under test/o.a.l.store/\nMockRAMDirectory -> MockDirectoryWrapper\nMockRAMInputStream -> MockIndexInputWrapper\nMockRAMOutputStream -> MockIndexOutputWrapper\n\ni think somehow i screwed up the disk full stuff or similar, as most tests pass but just the ones that simulate crashes dont work correctly with newDirectory implemented as new MockDIrectoryWrapper(new RAMDirectory()) \n\nif we can fix this stuff, we can switch in other impls too.\n ",
            "author": "Robert Muir",
            "id": "comment-12901223"
        },
        {
            "date": "2010-08-23T16:58:16+0000",
            "content": "Here's the updated patch, with all tests passing on trunk with the default impl (RAMDirectory).\n\nMike helped with some of the disk full/crash stuff and I think it might sorta-kinda work for Linux etc with FSDirectory. There are definitely problems simulating a crash on windows currently with anything but RAMDir, but we can improve this later.\n\nfor now, using -Dtests.directory with anything other than the default (RAMDirectory) is expert and experimental  ",
            "author": "Robert Muir",
            "id": "comment-12901480"
        },
        {
            "date": "2010-08-23T17:06:45+0000",
            "content": "Committed to r988206 (trunk). ",
            "author": "Robert Muir",
            "id": "comment-12901486"
        },
        {
            "date": "2010-08-23T18:15:02+0000",
            "content": "Committed revision 988238 to 3x.\n\nI will mark this resolved for now, I think we are mostly there. in general we can shake out bugs in tests until its feasible to run -Dtests.directory=somethingelse perhaps on hudson. ",
            "author": "Robert Muir",
            "id": "comment-12901519"
        },
        {
            "date": "2010-08-23T21:34:10+0000",
            "content": "Small patch to fix a few test failures on Linux if you do -Dtests.directory=SimpleFSDirectory ",
            "author": "Michael McCandless",
            "id": "comment-12901597"
        },
        {
            "date": "2010-08-23T22:19:08+0000",
            "content": "Mike, looks great. I applied the patch and less tests fail on windows for me, too.\n\nMost remaining problems with FSDir look windows specific, like not being able to overwrite open files on crash() ",
            "author": "Robert Muir",
            "id": "comment-12901626"
        },
        {
            "date": "2010-08-24T13:20:59+0000",
            "content": "Some more fixes to try to make tests run faster w/ -Dtests.directory=SimpleFSDir.\n\nAlso, I changed FSDir.length \u2013 previously it first checked if the file exists and then checks the size.  I reversed this check, since presumably it's far more common that this method is called w/ a real (existing) file.  Only if length comes back as 0 do I then check if it exists. ",
            "author": "Michael McCandless",
            "id": "comment-12901871"
        },
        {
            "date": "2010-08-24T13:46:48+0000",
            "content": "Wow, some tests still fail (not any new ones with the patch though), but previously test-core -Dtests.directory=SimpleFSDirectory took 20 minutes. For example TestIW took 1000seconds alone.\n\nWith the patch, test-core is significantly faster with fsdir (3 minutes, 16 seconds), and for examples TestIW takes only 93 seconds. ",
            "author": "Robert Muir",
            "id": "comment-12901881"
        },
        {
            "date": "2010-08-24T15:36:08+0000",
            "content": "mike and i are both working this still, i didnt think we would get this far honestly. \n\nso im reopening the issue  ",
            "author": "Robert Muir",
            "id": "comment-12901925"
        },
        {
            "date": "2010-08-24T15:42:54+0000",
            "content": "patch to enable crash() on windows with fsdir.\n\nwe track all indexii/io's, for two reasons.\n\n\tclose them all before crashing (as windows wont let us overwrite/truncate/delete open files)\n\tin close() when we refuse to close because files are still open, we can provide a stacktrace to find the unclosed reader, etc.\n\n ",
            "author": "Robert Muir",
            "id": "comment-12901927"
        },
        {
            "date": "2010-08-24T16:00:33+0000",
            "content": "heres the patch improved: the i/o wrappers remove themselves from the map, and the exception message is nicer. so if you forget to close files, you get:\n\njunit-sequential:\n    [junit] Testsuite: org.apache.lucene.TestDemo\n    [junit] Testcase: testDemo(org.apache.lucene.TestDemo):     Caused an ERROR\n    [junit] MockRAMDirectory: cannot close: there are still open files: {_0.cfs=1}\n    [junit] java.lang.RuntimeException: MockRAMDirectory: cannot close: there are still open files: {_0.cfs=1}\n    [junit]     at org.apache.lucene.store.MockDirectoryWrapper.close(MockDirectoryWrapper.java:342)\n    [junit]     at org.apache.lucene.TestDemo.testDemo(TestDemo.java:81)\n    [junit]     at org.apache.lucene.util.LuceneTestCase.runBare(LuceneTestCase.java:380)\n    [junit]     at org.apache.lucene.util.LuceneTestCase.run(LuceneTestCase.java:372)\n    [junit] Caused by: java.lang.RuntimeException: unclosed IndexInput\n    [junit]     at org.apache.lucene.store.MockDirectoryWrapper.openInput(MockDirectoryWrapper.java:299)\n    [junit]     at org.apache.lucene.store.Directory.openInput(Directory.java:138)\n    [junit]     at org.apache.lucene.index.CompoundFileReader.<init>(CompoundFileReader.java:67)\n    [junit]     at org.apache.lucene.index.SegmentReader$CoreReaders.<init>(SegmentReader.java:126)\n    [junit]     at org.apache.lucene.index.SegmentReader.get(SegmentReader.java:536)\n    [junit]     at org.apache.lucene.index.SegmentReader.get(SegmentReader.java:509)\n    [junit]     at org.apache.lucene.index.DirectoryReader.<init>(DirectoryReader.java:129)\n    [junit]     at org.apache.lucene.index.DirectoryReader$1.doBody(DirectoryReader.java:96)\n    [junit]     at org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:630)\n    [junit]     at org.apache.lucene.index.DirectoryReader.open(DirectoryReader.java:91)\n    [junit]     at org.apache.lucene.index.IndexReader.open(IndexReader.java:415)\n    [junit]     at org.apache.lucene.index.IndexReader.open(IndexReader.java:234)\n    [junit]     at org.apache.lucene.search.IndexSearcher.<init>(IndexSearcher.java:78)\n    [junit]     at org.apache.lucene.TestDemo.testDemo(TestDemo.java:67)\n\n ",
            "author": "Robert Muir",
            "id": "comment-12901939"
        },
        {
            "date": "2010-08-24T17:07:05+0000",
            "content": "Not sure if it's interesting and/or related to this issue, but we've run into a bug in our code (not Lucene's that is) when the index was located on read-only file system. To simulate the bug in a JUnit test we wrote a ReadOnlyDirectory which throws exceptions on its 'write' methods.\n\nDo you think there are tests that are worth running w/ such a Directory impl? It might be that it's meaningful in the context of our tests only ... ",
            "author": "Shai Erera",
            "id": "comment-12901966"
        },
        {
            "date": "2010-08-24T17:59:48+0000",
            "content": "Shai, not sure Lucene's tests will be helpful there (they would just all fail with exceptions), because most of them create a new directory for writing in setUp() etc. ",
            "author": "Robert Muir",
            "id": "comment-12901990"
        },
        {
            "date": "2010-08-24T18:06:30+0000",
            "content": "Yeah I figured this is sort of 'out of Lucene' case, but thought that I'd better mention it, in case you know of a Lucene test that might benefit from it (to simulate a crash or something). ",
            "author": "Shai Erera",
            "id": "comment-12901995"
        },
        {
            "date": "2010-08-24T18:40:12+0000",
            "content": "because most of them create a new directory for writing in setUp() etc. \n\nbut it does seem like it would be useful for tests where only the setUp method is expected to create the index, and the rest of the code tested is expected to be \"read only\" .. at a naive level the setUp method of tests for \"read only\" functionality could unconditionally wrap the underlying Directory in a ReadOnlyDirectory once it's all finished ... but that seems like it could be done (for the tests that want it) independently of this. (new Jira?) ",
            "author": "Hoss Man",
            "id": "comment-12902007"
        },
        {
            "date": "2010-08-24T18:50:56+0000",
            "content": "but it does seem like it would be useful for tests where only the setUp method is expected to create the index,\n\nI'm not against the proposal, but i'm curious just how it would be useful?\n\n(new Jira?)\n\nI agree [i don't really understand the suggestion and how it would help improve tests yet], as this issue is really about improving test coverage (and as a side effect, providing some way to do basic tests against an arbitrary directory impl). but this is no substitute for real unit tests against any directory impl someone has written.\n\nfirst i'd really like to see the tests actually work with -Dtests.directory=FSDirectory (on windows too), this is proving to be challenging enough  ",
            "author": "Robert Muir",
            "id": "comment-12902012"
        },
        {
            "date": "2010-08-24T21:55:39+0000",
            "content": "at the moment, all tests are passing on windows now with -Dtests.directory=FSDirectory.\n\nSo I think the next step would be to default to 'random'. \nand we will need a thing to force certain tests like the one triggered by LUCENE-2239 to not use directories that will always make it fail: it will always fail from NIOFS or Mmap. ",
            "author": "Robert Muir",
            "id": "comment-12902093"
        },
        {
            "date": "2010-08-24T22:31:57+0000",
            "content": "Of the top of my head...\n\nWhat if we add some marker interfaces with no methods that the various directories would implement, along the lines of \"InMemoryBasedDirectory\", \"NTFSFriendlyDirectory\", etc....  Then change the \"newDirectory(Random)\" method to \"newDirectory(Random,Class...)\"\n\nTests would specify a list of valid Directory \"Classes\" (either concrete or interfaces) or nothing if they expect to work with any impl.\n\nnewDirectory would use reflection to expand the class/interface list from the params to all known concrete types, and then likewise for the \"tests.directory\" system property, and then intersect those lists of concrete directory implementations, and pick randomly from it \u2013 if the intersection is an empty set (ie: the test said it's only valid for \"FSDiskDirectory\" but the user specified -Dtests.directory=RAMDirectory) then newDirectory returns null and signals that the test should skip (or fail).  (most tests would just keep calling newDirectory(random) and the default run prop becomes -Dtests.directory=Directory)\n\nThere are simplifications that can be made \u2013 eliminating the marker interfaces and just having the tests pick concrete classes for example \u2013 but ultimately a decision still has to be made about what to do if \"tests.directory\" conflicts with the impl the actual test says it can/can't work with.\n\n(personally; i think marker interfaces would be useful outside of the tests, as a documentation hint to users about what a given Directory subclass is capable of - and having the test take advantage of them would help verify that they are accurate, assuming we get the tests running on various platforms/filesystems) ",
            "author": "Hoss Man",
            "id": "comment-12902115"
        },
        {
            "date": "2010-08-24T22:39:44+0000",
            "content": "Hoss, I honestly think what you describe is too complex. we need to keep the tests simple.\n\nThere are simplifications that can be made - eliminating the marker interfaces and just having the tests pick concrete classes for example - but ultimately a decision still has to be made about what to do if \"tests.directory\" conflicts with the impl the actual test says it can/can't work with.\n\nDude not all tests respect tests.directory as-is: they dont all use newDirectory(), some instantiate RAMDirectories themselves still. I only converted the ones that would be easy (and some i should have left alone, so i hardwired them back to ramdir)\n\nhonestly i think if i hardwire TestIndexWriter.testThreadInterruptDeadlock to RAMDirectory, then all tests will pass with NIOFS and MMAP too, and we can randomly choose whichever we want.\n\nand we are no worse off than before, last week all these tests ran with RAMDirectory no matter what. the crazy picky ones can stay that way. ",
            "author": "Robert Muir",
            "id": "comment-12902121"
        },
        {
            "date": "2010-08-24T23:14:17+0000",
            "content": "attached is a patch for testThreadInterruptDeadlock.\nNow all tests pass with NIOFSDirectory.\n\nMMapDirectory isn't ready yet though. ",
            "author": "Robert Muir",
            "id": "comment-12902143"
        },
        {
            "date": "2010-08-24T23:50:34+0000",
            "content": "heres an updated patch, with this both NIOFS and MMapdirectory pass all tests.\n\nI found an oddity though, exposed from TestTermVectorsReader (see the patch)\nMMapDirectory blindly calls buffer.position(pos) for seek(), so wrong seeks give IllegalArgumentException (not the IOException this test expects).\n\nIn the patch i changed the test to also allow IllegalArgumentException, but I figure\nit was worth mentioning: alternatively we could check bounds on MMapDir's seek() and throw\na more expected IOException when its < 0 || > length... personally i'm not eager to add these checks though. ",
            "author": "Robert Muir",
            "id": "comment-12902168"
        },
        {
            "date": "2010-08-25T11:05:08+0000",
            "content": "ok, here is the previous patch, except \"random\" is now enabled by default. (but most of the time uses ramdirectory so the tests are still generally quick) ",
            "author": "Robert Muir",
            "id": "comment-12902376"
        },
        {
            "date": "2010-08-25T13:19:57+0000",
            "content": "the fixes to NIOFS and MMap are committed in revision 989030.\n\nOn windows all tests pass with all directory impls, but the default is still RAMDirectory until at least we verify macos and linux are ok with \"random\". ",
            "author": "Robert Muir",
            "id": "comment-12902433"
        },
        {
            "date": "2011-03-30T15:50:05+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013361"
        }
    ]
}