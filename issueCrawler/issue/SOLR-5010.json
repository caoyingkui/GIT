{
    "id": "SOLR-5010",
    "title": "Add REST support for Copy Fields",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Per SOLR-4898, adding copy field support.  Should be simply a new parameter to the PUT/POST with the name of the target to copy to.",
    "attachments": {
        "json_regex.patch": "https://issues.apache.org/jira/secure/attachment/12591683/json_regex.patch",
        "SOLR-5010.patch": "https://issues.apache.org/jira/secure/attachment/12591080/SOLR-5010.patch",
        "SOLR-5010-copyFields.patch": "https://issues.apache.org/jira/secure/attachment/12591254/SOLR-5010-copyFields.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Grant Ingersoll",
            "id": "comment-13701326",
            "date": "2013-07-06T12:10:53+0000",
            "content": "First start at this, pretty straightforward, but needs more tests.\n\nAdds an option called copyFields, which can take a comma separated list of targets to copy the source to.  See the TestManagedSchemaFieldResource for an example. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13701330",
            "date": "2013-07-06T12:46:32+0000",
            "content": "Fix PUT option and add a test for it.\n\nI think this is ready to go, but going to wait for others to double check, as I am not sure on how the hand off of the old schema to the new schema is managed and if adding the registerCopyField where I did is the right thing to do. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13701560",
            "date": "2013-07-07T12:19:36+0000",
            "content": "Looking at this more, I'm not sure this patch is right in terms of synchronization and persistence of the schema, so I'm going to keep working on it. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13701567",
            "date": "2013-07-07T13:05:44+0000",
            "content": "Moves work into the ManagedIndexSchema.addFields, so that it is properly sync'd and persisted "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13701743",
            "date": "2013-07-08T02:59:50+0000",
            "content": "I plan on committing this in the AM (Monday, 7/8) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13702011",
            "date": "2013-07-08T14:00:25+0000",
            "content": "Commit 1500737 from Grant Ingersoll\n[ https://svn.apache.org/r1500737 ]\n\nSOLR-5010: add copy field support to the REST API "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13702014",
            "date": "2013-07-08T14:05:34+0000",
            "content": "Commit 1500744 from Grant Ingersoll\n[ https://svn.apache.org/r1500744 ]\n\nSOLR-5010: merge from trunk "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13702055",
            "date": "2013-07-08T15:19:17+0000",
            "content": "Grant Ingersoll, I think your copyFields implementation is missing an important piece of functionality: copying one existing field to another, without adding any new fields, i.e. PUT to /schema/copyFields\n\nIn fact, I'm not convinced that tacking copyFields directives onto /schema/fields is the right way to go, since we have to have the ability to PUT to /schema/copyFields for the not-adding-fields case anyway: it needlessly complicates the API and the code.\n\nI'll work on a patch. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13702064",
            "date": "2013-07-08T15:30:39+0000",
            "content": "First part of this is in: can setup copy fields when creating new fields.  Next would be to add new copy fields for existing fields. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13702067",
            "date": "2013-07-08T15:33:48+0000",
            "content": "In fact, I'm not convinced that tacking copyFields directives onto /schema/fields is the right way to go, since we have to have the ability to PUT to /schema/copyFields for the not-adding-fields case anyway: it needlessly complicates the API and the code.\n\nWe can refactor it to be shared (although it is pretty minimal amount of code) across fields and /copyFields.  I do think being able to specify it when adding is useful, as it can all be done as part of that single call and is very straightforward to do. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13702276",
            "date": "2013-07-08T18:50:48+0000",
            "content": "Adds a post to /schema/copyfields to support adding fields directly.\n\nDidn't do any refactoring of shared code yet, as it feels like we should do this after 4.4 as there are multiple places to do this that go beyond this patch "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13702380",
            "date": "2013-07-08T20:28:38+0000",
            "content": "Grant, a few comments about your most recent patch:\n\n1. This comment in ManagedIndexSchema.addCopyFields() should be changed to reflect its context:\n\n// even though fields is volatile, we need to synchronize to avoid two addFields\n// happening concurrently (and ending up missing one of them)\n\n\nto something like \"we need to synchronize to avoid two addCopyFields happening concurrently (and ending up missing one of them)\"\n\n2. In CopyFieldsCollectionResource.post(), the loop over the copy field directives will throw away all but the last directive, because the directives are each added to oldSchema, which is never updated:\n\n\nManagedIndexSchema oldSchema = (ManagedIndexSchema) getSchema();\nfor (Map<String,Object> map : list) {\n[...]\n  if (splits != null && splits.length > 0){\n    for (int i = 0; i < splits.length; i++) {\n      destinationSet.add(splits[i].trim());\n    }\n    IndexSchema newSchema = oldSchema.addCopyFields(fieldName, destinationSet);\n    if (newSchema != null) {\n      getSolrCore().setLatestSchema(newSchema);\n    }\n  }\n\n\n\nMaybe ManagedIndexSchema.addCopyFields() could accept a Map<String,Set<String>>, containing all copyField directives, instead of the current one at a time?  That would mirror behavior of ManagedIndexSchema.addFields(), and would make it so that the schema would only need to be modified/persisted once; the above-described problem would then disappear.\n\n3. There is no else after the above if block to handle the case when splits is null or empty.  It's not an impossible condition - for example, \"dest\":\",,,\" would trigger this case.\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13702476",
            "date": "2013-07-08T21:40:13+0000",
            "content": "Grant, \n\nI'm reviewing the commit you did for the first part, that added copyFields destinations to the addField(s) Java methods and the /schema/fields REST API methods.\n\n1. There's an issue in FieldCollectionResource.post() with persisting the schema after calling registerCopyFields() - you don't call the version of ManagedIndexSchema.addFields() you added that takes a source->dest+ copyField map param, and as a result the copyField directives won't be persisted with the other schema changes:\n\n\n  IndexSchema newSchema = oldSchema.addFields(newFields);\n  for (Map.Entry<String, String> entry : copyFields.entrySet()) {\n    //key is the source, value is a comma separated list of targets\n    String [] splits = entry.getValue().split(\",\");\n    if (splits != null && splits.length > 0){\n      for (int i = 0; i < splits.length; i++) {\n        newSchema.registerCopyField(entry.getKey(), splits[i].trim());\n      }\n    }\n  }\n\n\n\nBy contrast, FieldResource.put() calls the version of the ManagedIndexSchema.addField() method you added that takes in a collection of copyField destinations, so it's fine.\n\n2. Ditto of my above comment #3: there is no else after the above if block to handle the case when splits is null or empty.\n\n3. You changed the return type of ManagedIndexSchema.addFields from ManagedIndexSchema to IndexSchema see the change here - why did you do this?  I intentionally narrowed the return type when overriding this method.  (There may be other instances of this kind of thing, I didn't check for others.) \n\n4. You changed a shitload of whitespace stuff, most of which I don't care about but find annoying when evaluating patches.  There is one in particular, though, that bugs me: if ( ! boolean) ... -> if (!boolean) ... - I intentionally add whitespace there to make the negation stand out, and it doesn't anymore now that you've removed the whitespace.  I'd like to put those back. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13702477",
            "date": "2013-07-08T21:40:48+0000",
            "content": "2. In CopyFieldsCollectionResource.post(), the loop\n\nGood catch!  Patch shortly.\n\n3. There is no else after the above if block to handle the case when splits is null or empty. It's not an impossible condition - for example, \"dest\":\",,,\" would trigger this case.\n\nBut what should it do?  Do you want an error? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13702492",
            "date": "2013-07-08T21:49:07+0000",
            "content": "\n3. There is no else after the above if block to handle the case when splits is null or empty. It's not an impossible condition - for example, \"dest\":\",,,\" would trigger this case.\n\nBut what should it do? Do you want an error?\n\nWell, if there is no exception thrown, then the method will succeed, but nothing will change, which seems wrong to me: the app should tell the user about an input problem. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13702495",
            "date": "2013-07-08T21:54:07+0000",
            "content": "4. You changed a shitload of whitespace stuff, most of which I don't care about but find annoying when evaluating patches. There is one in particular, though, that bugs me: if ( ! boolean) ... }} -> {{if (!boolean) ... - I intentionally add whitespace there to make the negation stand out, and it doesn't anymore now that you've removed the whitespace. I'd like to put those back\n\nWhat file is that in? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13702507",
            "date": "2013-07-08T22:00:14+0000",
            "content": "Fixes most of Steve's issues, I believe "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13702542",
            "date": "2013-07-08T22:33:50+0000",
            "content": "\n4. You changed a shitload of whitespace stuff, most of which I don't care about but find annoying when evaluating patches. There is one in particular, though, that bugs me: if ( ! boolean) ... }} -> {{if (!boolean) ... - I intentionally add whitespace there to make the negation stand out, and it doesn't anymore now that you've removed the whitespace. I'd like to put those back\n\nWhat file is that in?\n\nIn FieldResource.java, mostly in the put() method, and ... hmm, I thought it was several files, but it was only that one. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13702576",
            "date": "2013-07-08T22:54:36+0000",
            "content": "Fixes most of Steve's issues, I believe\n\nAha, now I know why I thought the whitespace issue was in several files - I was lumping together code in your patch with code you had already committed.  In your patch, class javadocs have whitespace rearrangements in CopyFieldCollectionResource.java and FieldCollectionResource.java, and FieldCollectionResource.java has a bunch of other whitespace changes.\n\nAll other changes look good, except that you didn't add an exception for zero copyField destinations after splitting, and in fact you added this test, which says that such a request should succeed???:\n\n\n   assertJPost(\"/schema/copyfields\", \"[{\\\"source\\\":\\\"fieldD\\\", \\\"dest\\\":\\\",,,\\\"}]\", \"/responseHeader/status==0\");\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13702695",
            "date": "2013-07-09T00:43:32+0000",
            "content": "Fixes the empty fields issue "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13702801",
            "date": "2013-07-09T02:24:01+0000",
            "content": "More tests and error handling "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13702802",
            "date": "2013-07-09T02:24:39+0000",
            "content": "Commit 1501047 from Grant Ingersoll\n[ https://svn.apache.org/r1501047 ]\n\nSOLR-5010: clean up plus POST support on schema/copyfields "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13702826",
            "date": "2013-07-09T03:10:13+0000",
            "content": "Commit 1501051 from Grant Ingersoll\n[ https://svn.apache.org/r1501051 ]\n\nSOLR-5010: merge from trunk "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13702849",
            "date": "2013-07-09T03:43:14+0000",
            "content": "+1, looks good "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13702854",
            "date": "2013-07-09T03:46:13+0000",
            "content": "Commit 1501054 from Steve Rowe\n[ https://svn.apache.org/r1501054 ]\n\nSOLR-5010: tweak CHANGES.txt entry to refer to full copyFields creation capabilities "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13702856",
            "date": "2013-07-09T03:47:01+0000",
            "content": "Commit 1501056 from Steve Rowe\n[ https://svn.apache.org/r1501056 ]\n\nSOLR-5010: tweak CHANGES.txt entry to refer to full copyFields creation capabilities "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13703343",
            "date": "2013-07-09T14:51:41+0000",
            "content": "For a more JSONish API, perhaps we should optionally accept an array in place of a comma separated list?\n\n\"dest\" : [\"myfield1\", \"myfield2\"]\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13703415",
            "date": "2013-07-09T15:57:01+0000",
            "content": "For a more JSONish API, perhaps\n\nD'oh, that is a good idea.  I'll correct it, but can't get to it until Thursday. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13703746",
            "date": "2013-07-09T20:26:19+0000",
            "content": "Floks, remember when writing new tests that generate expected exceptions - you can instruct the test framework to ignore (not log) the exception explicitly with ignoreException(regex).  This makes tests much more debuggable when they do fail. \n\nBy default there is ignoreException(\"ignore_exception\"), so sometimes the easiest way is to just make sure the exception has that string (this is what I did here: http://svn.apache.org/viewvc?view=revision&revision=r1501498 "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13704424",
            "date": "2013-07-10T10:54:48+0000",
            "content": "explicitly with ignoreException(regex\n\nCool\n\nFor a more JSONish API,\n\nI've got a fix for this about to be committed.  One of the takeaways is that a user can pass in an empty list.  I changed this to not be an error condition, whereas before passing in something like \",,,\" was an error condition.\n\nAny thoughts on what is the preferred approach for a list of 1?  Should I handle a plain ol' String, or require [\"field\"]?\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13704425",
            "date": "2013-07-10T10:55:39+0000",
            "content": "Commit 1501715 from Grant Ingersoll\n[ https://svn.apache.org/r1501715 ]\n\nSOLR-5010: switch to lists for copy fields "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13704433",
            "date": "2013-07-10T11:11:06+0000",
            "content": "Commit 1501718 from Grant Ingersoll\n[ https://svn.apache.org/r1501718 ]\n\nSOLR-5010: merge from trunk "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13704438",
            "date": "2013-07-10T11:15:41+0000",
            "content": "Commit 1501721 from Grant Ingersoll\n[ https://svn.apache.org/r1501721 ]\n\nSOLR-5010: merge from branch 4_x "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13704483",
            "date": "2013-07-10T12:02:35+0000",
            "content": "\nI've got a fix for this about to be committed. One of the takeaways is that a user can pass in an empty list. I changed this to not be an error condition, whereas before passing in something like \",,,\" was an error condition.\n\nAs written, an empty list will return success, but no action will be taken.  Why do you treat this differently from a missing 'dest' param?  Seems to me like the same problem: malformed input.   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13704789",
            "date": "2013-07-10T17:30:43+0000",
            "content": "Any thoughts on what is the preferred approach for a list of 1? Should I handle a plain ol' String\n\n+1\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13704796",
            "date": "2013-07-10T17:36:10+0000",
            "content": "The current tests sometimes check for exact error messages, which gives me a little heartburn around maintainability of the tests...\n\nOf course, there wasn't an easy way to do anything else besides check for an exact match, so I whipped up this patch: json_regex.patch\n\nA special expected string of ///regex:my_regex/// will match the encountered value string with the regex.\n\nThoughts? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13705685",
            "date": "2013-07-11T10:54:54+0000",
            "content": "The current tests sometimes check for exact error messages, which gives me a little heartburn around maintainability of the tests...\n\nYeah, I didn't like doing that either, but wasn't sure how else.\n\nAs written, an empty list will return success, but no action will be taken.\n\nI don't see an empty list as malformed input, I guess.  The client is saying don't take any action.  The case of \",,,\" is different in that they clearly are sending in something bad, IMO.\n\nHandle a plain ol' String\n\nWill try to crank it out today. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13705916",
            "date": "2013-07-11T15:31:59+0000",
            "content": "Commit 1502247 from Grant Ingersoll\n[ https://svn.apache.org/r1502247 ]\n\nSOLR-5010: single field handling "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13705930",
            "date": "2013-07-11T15:40:42+0000",
            "content": "Commit 1502250 from Grant Ingersoll\n[ https://svn.apache.org/r1502250 ]\n\nSOLR-5010: merge from trunk "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13705931",
            "date": "2013-07-11T15:44:04+0000",
            "content": "Commit 1502252 from Grant Ingersoll\n[ https://svn.apache.org/r1502252 ]\n\nSOLR-5010: merge from branch 4_x "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13716891",
            "date": "2013-07-23T18:38:53+0000",
            "content": "Bulk close resolved 4.4 issues "
        }
    ]
}