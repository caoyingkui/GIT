{
    "id": "LUCENE-1193",
    "title": "OOM exception while sorting on more than 1 field",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.3",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "Lucene Index contains 2.1 Million records (indexed from 2.1 million records from sqlserver DB). \nLucene Index file Size 256MB\nLucene version: 2.3\nSearching works fine when we sort the results on a single field. However, if the search results is sorted on more than one field we get Out of Memory exception. \nWe restrict the number of search results to 250\n\nOut of Memory exception is quite consistent in 2.3.  We recently moved from 2.0 to 2.3.  \nVersion 2.0 also used to give the OOM but not this frequent.\n\n\nCode Snippet:\n\n\tfinal QueryParser parser;\n        \tStandardAnalyzer analyzer = new StandardAnalyzer();\n        \tString sSearchQuery = \"MUSIC\";\n        \tSort oSort = null;\n\tpublic static final String G2KEYFIELDS = \"G2KEYFIELDS\";\n            oSort =  new Sort(new SortField[]{\n                                  new SortField\t\t\t\t(GroupsConstants.LAST_MODIFIED,SortField.INT,true),\n                                  new SortField(GroupsConstants.GROUPNAME)\n                                });\n            \n \tparser = new QueryParser(G2KEYFIELDS, analyzer);\n        \tfinal Vector ids = new Vector();\n        \tFSDirectory dir = null;\n        \tIndexSearcher searcher = null;\n        \ttry {\n            \tdir = FSDirectory.getDirectory(index);\n            \tsearcher = new IndexSearcher(dir);\n            \tQuery query = parser.parse(sSearchQuery);\n            \tHits hits = searcher.search(query, oSort);\n           \t \tfor (int i = 0; i != hits.length() && i != 250; ++i) {\n                \t\tfinal Document doc = hits.doc;\n                \t\tInteger oiGroupId=new Integer(doc.getField\t\t(GroupsConstants.IDENTITY).stringValue());\n                \tif(!ids.contains(oiGroupId)){\n                   \t ids.addElement(oiGroupId);\n                \t}\n            }\n            searcher.close();\n            dir.close();",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2008-02-29T07:13:03+0000",
            "content": "Sounds like your JVM heap is too small for sorting by 2 fields (causes more data to be rad from Lucene index into memory), that's all.  You can bring this up on java-user@lucene list. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12573620"
        }
    ]
}