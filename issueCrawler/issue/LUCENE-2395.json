{
    "id": "LUCENE-2395",
    "title": "Add a scoring DistanceQuery that does not need caches and separate filters",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/spatial"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "In a chat with Chris Male and my own ideas when implementing for PANGAEA, I thought about the broken distance query in contrib. It lacks the following features:\n\n\tIt needs a query/filter for the enclosing bbox (which is constant score)\n\tIt needs a separate filter for filtering out hits to far away (inside bbox but outside distance limit)\n\tIt has no scoring, so if somebody wants to sort by distance, he needs to use the custom sort. For that to work, spatial caches distance calculation (which is broken for multi-segment search)\n\n\n\nThe idea is now to combine all three things into one query, but customizeable:\n\nWe first thought about extending CustomScoreQuery and calculate the distance from FieldCache in the customScore method and return a score of 1 for distance=0, score=0 on the max distance and score<0 for farer hits, that are in the bounding box but not in the distance circle. To filter out such negative scores, we would need to override the scorer in CustomScoreQuery which is priate.\n\nMy proposal is now to use a very stripped down CustomScoreQuery (but not extend it) that does call a method getDistance(docId) in its scorer's advance and nextDoc that calculates the distance for the current doc. It stores this distance also in the scorer. If the distance > maxDistance it throws away the hit and calls nextDoc() again. The score() method will reurn per default weight.value*(maxDistance - distance)/maxDistance and uses the precalculated distance. So the distance is only calculated one time in nextDoc()/advance().\n\nTo be able to plug in custom scoring, the following methods in the query can be overridden:\n\n\tfloat getDistanceScore(double distance) - returns per default: (maxDistance - distance)/maxDistance; allows score customization\n\tDocIdSet getBoundingBoxDocIdSet(Reader, LatLng sw, LatLng ne) - returns an DocIdSet for the bounding box. Per default it returns e.g. the docIdSet of a NRF or a cartesian tier filter. You can even plug in any other DocIdSet, e.g. wrap a Query with QueryWrapperFilter\n\tsupport a setter for the GeoDistanceCalculator that is used by the scorer to get the distance.\n\ta LatLng provider (similar to CustomScoreProvider/ValueSource) that returns for a given doc id the lat/lng. This method is called per IndexReader one time in scorer creation and will retrieve the coordinates. By that we support FieldCache or whatever.\n\n\n\nThis query is almost finished in my head, it just needs coding",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--DistanceQuery.java": "https://issues.apache.org/jira/secure/attachment/12441887/ASF.LICENSE.NOT.GRANTED--DistanceQuery.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-04-15T11:13:31+0000",
            "content": "+1\n\nThis will replace the work I was doing on improving the DistanceFilter and the DistanceSortSource.  Instead we will have a proper DistanceQuery where the sorting is done through the existing sorting by score functionality in Lucene.  The CartesianShapeFilter will then be able to be used as a Filter with the new Query.\n\nThis also addresses the current problems with caching calculated distances and means that Spatial will work with per segment. ",
            "author": "Chris Male",
            "id": "comment-12857278"
        },
        {
            "date": "2010-04-15T11:26:53+0000",
            "content": "Linked issue for GeoDistanceCalculator which abstracts away the algorithm for calculating the distance. ",
            "author": "Chris Male",
            "id": "comment-12857282"
        },
        {
            "date": "2010-04-15T11:31:27+0000",
            "content": "Linked issue which contains LocationDataSet.  Need to extract the exact code out of the patch, but the LocationDataSet can then be built by the Query per segment to retrieve the lat/lng Points for documents, independent of whether they are distinct fields or geohashes.\n\nThis might depend on the change to Point that I did in another patch, I'll hunt for that now. ",
            "author": "Chris Male",
            "id": "comment-12857283"
        },
        {
            "date": "2010-04-15T11:32:29+0000",
            "content": "Linked issue which improves the Point class. ",
            "author": "Chris Male",
            "id": "comment-12857284"
        },
        {
            "date": "2010-04-15T16:00:30+0000",
            "content": "A first idea of the Query, it does not even compile as some classes are missing (coming with Chris' later patches), but it shows how it should work and how its customizeable. ",
            "author": "Uwe Schindler",
            "id": "comment-12857367"
        },
        {
            "date": "2010-04-15T23:29:55+0000",
            "content": "small updates to Chris' patches. ",
            "author": "Uwe Schindler",
            "id": "comment-12857593"
        },
        {
            "date": "2010-04-16T00:16:27+0000",
            "content": "Added Weight.explain() and fixed a missing replacement. ",
            "author": "Uwe Schindler",
            "id": "comment-12857611"
        },
        {
            "date": "2013-07-23T18:44:41+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717028"
        },
        {
            "date": "2013-12-02T06:15:47+0000",
            "content": "Closing because the old spatial contrib module referenced here no longer exists as of Solr 4.\n\nBTW the idea of having a spatial Query that returns the score as the distance and doesn't need a point cache to do it, is very doable with Lucene 4's spatial module & the RecursivePrefixTree strategy.  It would basically be a variation of the existing Intersects filter that fully-traverses to all max-precision grid cells in the query shape so that it can then calculate the distance to cache them temporarily (during query execution only).  Then somehow it would return it as the score, maybe using CustomScoreQuery. ",
            "author": "David Smiley",
            "id": "comment-13836277"
        },
        {
            "date": "2013-12-02T12:50:46+0000",
            "content": "BTW the idea of having a spatial Query that returns the score as the distance and doesn't need a point cache to do it, is very doable with Lucene 4's spatial module & the RecursivePrefixTree strategy.\n\nCan't you just use the expressions module for this?  (LUCENE-5258) ",
            "author": "Michael McCandless",
            "id": "comment-13836476"
        },
        {
            "date": "2013-12-02T13:22:15+0000",
            "content": "Currently the expressions module does not yet allow to modify the score of a query. This is on my todo list. I discussed that with Shai remotely and Robert personally the last time I was at his house \n\nBut yes, this would be cool! ",
            "author": "Uwe Schindler",
            "id": "comment-13836499"
        },
        {
            "date": "2013-12-02T15:13:24+0000",
            "content": "These issues are unrelated.  The expressions module, I believe, allows convenient ways to reference numbers in DocValues/FieldCache together with various functions (usually mathematical) for Sorting or relevancy.  But that is expressly excluded from the issue title \"does not need caches\".  That's a worthwhile goal for some use-cases \u2013 no cache means more NRT friendly.  Furthermore, AFAIK the Lucene expressions module is limited to single-valued fields whereas an approach along the lines described in this issue, such as in my last comment specifically, would support multi-valued spatial fields because it decodes the actual terms during its execution and can thus reference the same doc from multiple terms/points. ",
            "author": "David Smiley",
            "id": "comment-13836593"
        }
    ]
}