{
    "id": "LUCENE-4736",
    "title": "Some tests fail with IBM J9 due to strange TimerThread zombies that cannot be killed",
    "details": {
        "components": [],
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "EG:\n\n\nant test -Dtestcase=TestIndexWriterDelete -Dtests.seed=A22BC3E06CEC0036\n\n\n\nTakes a while and then fails with this:\n\n\n[junit4:junit4] ERROR   0.00s J2 | TestIndexWriterDelete (suite) <<<\n[junit4:junit4]    > Throwable #1:\ncom.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked\nfrom SUITE scope at org.apache.lucene.index.TestIndexWriterDelete:\n[junit4:junit4]    >    1) Thread[id=102, name=Thread-44,\nstate=TIMED_WAITING, group=TGRP-TestIndexWriterDelete]\n[junit4:junit4]    >         at java.lang.Object.wait(Native Method)\n[junit4:junit4]    >         at java.lang.Object.wait(Object.java:196)\n[junit4:junit4]    >         at java.util.Timer$TimerImpl.run(Timer.java:247)\n[junit4:junit4]    >    at __randomizedtesting.SeedInfo.seed([C9014BCB129899BF]:0)\n[junit4:junit4]    > Throwable #2:\ncom.carrotsearch.randomizedtesting.ThreadLeakError: There are still\nzombie threads that couldn't be terminated:\n[junit4:junit4]    >    1) Thread[id=102, name=Thread-44,\nstate=TIMED_WAITING, group=TGRP-TestIndexWriterDelete]\n[junit4:junit4]    >         at java.lang.Object.wait(Native Method)\n[junit4:junit4]    >         at java.lang.Object.wait(Object.java:196)\n[junit4:junit4]    >         at java.util.Timer$TimerImpl.run(Timer.java:247)\n[junit4:junit4]    >    at __randomizedtesting.SeedInfo.seed([C9014BCB129899BF]:0)\n\n\n\nJava version is:\n\njava version \"1.6.0\"\nJava(TM) SE Runtime Environment (build pxa6460sr9fp2ifix-20111111_05(SR9 FP2+IV03622+IV02378+IZ99243+IZ97310+IV00707))\nIBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460sr9-20111111_94827 (JIT enabled, AOT enabled)\nJ9VM - 20111111_094827\nJIT  - r9_20101028_17488ifx45\nGC   - 20101027_AA)\nJCL  - 20110727_04\n\n\n\n\nCuriously, I think it tends to happen on a test that fails an assumption?  Or maybe I'm just imagining that ...",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-01-30T15:41:39+0000",
            "content": "This is what Dawid said on the dev list:\n\n> [junit4:junit4]    >    1) Thread[id=102, name=Thread-44,\n> state=TIMED_WAITING, group=TGRP-TestIndexWriterDelete]\n> [junit4:junit4]    >         at java.lang.Object.wait(Native Method)\n> [junit4:junit4]    >         at java.lang.Object.wait(Object.java:196)\n> [junit4:junit4]    >         at java.util.Timer$TimerImpl.run(Timer.java:247)\n\nThe question is what starts these Timer threads? I mean: we can\nexclude such threads but I'd do some digging first to see if it's not\nan error. The thread's name looks suspiciously un-VM-like to me (it's\ntoo generic).\n\n> It looks like this is a JVM thread ... is there an \"exceptions list\"\n> somewhere to ignore this thread?  Or some other solution?\n\nThere are several ways to ignore threads. You can annotate a method\n(or class) so that it ignores thread-checking entirely, you can add\nthe known offenders to ignored filters. Take a look at\nSolrIgnoredThreadsFilter for real-life examples; Lucene uses\nQuickPatchThreadsFilter (it's currently empty).\n\nIf you can name the J9 version and test/seed that causes this I'll\ntake a look at the root of the problem first.\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13566548"
        },
        {
            "date": "2013-01-30T18:19:42+0000",
            "content": "Indeed, if I run:\n\n\nant test -Dtestcase=TestIndexWriterDelete -Dtests.seed=A22BC3E06CEC0036 -Dtests.nightly=true\n\n\n\n(ie, add -Dtests.nightly=true), then it succeeds (no zombie threads).  So somehow the assumption violation seems to lead to these zombie threads ... ",
            "author": "Michael McCandless",
            "id": "comment-13566717"
        },
        {
            "date": "2013-01-31T08:32:52+0000",
            "content": "I have tried on two different machines with the latest J9 distributions but I couldn't reproduce this.\n\n\njava version \"1.6.0\"\nJava(TM) SE Runtime Environment (build pxa6460sr12-20121025_01(SR12))\nIBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460sr12-20121024_126067 (JIT enabled, AOT enabled)\nJ9VM - 20121024_126067\nJIT  - r9_20120914_26057\nGC   - 20120928_AA)\nJCL  - 20121014_01\n\n\n\n\njava version \"1.7.0\"\nJava(TM) SE Runtime Environment (build pxa6470sr2-20120901_01(SR2))\nIBM J9 VM (build 2.6, JRE 1.7.0 Linux amd64-64 20120809_118929 (JIT enabled, AOT enabled)\nJ9VM - R26_Java726_SR2_20120809_0948_B118929\nJIT  - r11.b01_20120808_24925\nGC   - R26_Java726_SR2_20120809_0948_B118929\nJ9CL - 20120809_118929)\nJCL - 20120831_02 based on Oracle 7u3-b05\n\n\n\nYour JVM ID looks kind of spooky \u2013 perhaps it's something related to the particular distro that you have? ",
            "author": "Dawid Weiss",
            "id": "comment-13567460"
        },
        {
            "date": "2013-01-31T13:25:34+0000",
            "content": "It's one of those things that you just cannot predict. Ever.\n\n[14:16:48.627] OK      0.10s | TestIndexWriterDelete.testDeleteAll\n  1> Timer created by: Thread[SUITE-TestIndexWriterDelete-seed#[A22BC3E06CEC0036]-worker,5,TGRP-TestIndexWriterDelete]\n  2> java.lang.Exception\n  2>    at java.util.Timer$TimerImpl.<init>(Timer.java:189)\n  2>    at java.util.Timer.<init>(Timer.java:355)\n  2>    at java.util.prefs.FileSystemPreferences.<clinit>(FileSystemPreferences.java:424)\n  2>    at java.lang.J9VMInternals.initializeImpl(Native Method)\n  2>    at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)\n  2>    at java.util.prefs.FileSystemPreferencesFactory.userRoot(FileSystemPreferencesFactory.java:35)\n  2>    at java.util.prefs.Preferences.userRoot(Preferences.java:445)\n  2>    at java.util.prefs.Preferences.userNodeForPackage(Preferences.java:359)\n  2>    at com.ibm.crypto.pkcs11impl.provider.IBMPKCS11Impl.<init>(IBMPKCS11Impl.java:612)\n  2>    at java.lang.J9VMInternals.newInstanceImpl(Native Method)\n  2>    at java.lang.Class.newInstance(Class.java:1345)\n  2>    at org.apache.harmony.security.fortress.Services$1.run(Services.java:1116)\n  2>    at org.apache.harmony.security.fortress.Services$1.run(Services.java:1113)\n  2>    at java.security.AccessController.doPrivileged(AccessController.java:202)\n  2>    at org.apache.harmony.security.fortress.Services.newInstance(Services.java:1113)\n  2>    at org.apache.harmony.security.fortress.Services.access$800(Services.java:56)\n  2>    at org.apache.harmony.security.fortress.Services$NormalServices.createProviderInstance(Services.java:342)\n  2>    at org.apache.harmony.security.fortress.Services$NormalServices.createExtProviderInstance(Services.java:320)\n  2>    at org.apache.harmony.security.fortress.Services$NormalServices.access$1200(Services.java:160)\n  2>    at org.apache.harmony.security.fortress.Services$NormalServices$3.run(Services.java:595)\n  2>    at java.security.AccessController.doPrivileged(AccessController.java:202)\n  2>    at org.apache.harmony.security.fortress.Services$NormalServices.loadExtProviders(Services.java:571)\n  2>    at org.apache.harmony.security.fortress.Services$NormalServices.access$300(Services.java:160)\n  2>    at org.apache.harmony.security.fortress.Services$NormalServices$1.run(Services.java:203)\n  2>    at java.security.AccessController.doPrivileged(AccessController.java:202)\n  2>    at org.apache.harmony.security.fortress.Services$NormalServices.<clinit>(Services.java:198)\n  2>    at java.lang.J9VMInternals.initializeImpl(Native Method)\n  2>    at java.lang.J9VMInternals.initialize(J9VMInternals.java:200)\n  2>    at org.apache.harmony.security.fortress.Services.refresh(Services.java:1074)\n  2>    at org.apache.harmony.security.fortress.Engine.getInstance(Engine.java:127)\n  2>    at java.security.MessageDigest.getInstance(MessageDigest.java:75)\n  2>    at java.io.ObjectStreamClass.computeDefaultSUID(ObjectStreamClass.java:1829)\n  2>    at java.io.ObjectStreamClass.access$100(ObjectStreamClass.java:64)\n  2>    at java.io.ObjectStreamClass$1.run(ObjectStreamClass.java:220)\n  2>    at java.security.AccessController.doPrivileged(AccessController.java:202)\n  2>    at java.io.ObjectStreamClass.getSerialVersionUID(ObjectStreamClass.java:217)\n  2>    at java.io.ObjectStreamClass.writeNonProxy(ObjectStreamClass.java:737)\n  2>    at java.io.ObjectOutputStream.writeClassDescriptor(ObjectOutputStream.java:665)\n  2>    at java.io.ObjectOutputStream.writeNonProxyDesc(ObjectOutputStream.java:1273)\n  2>    at java.io.ObjectOutputStream.writeClassDesc(ObjectOutputStream.java:1231)\n  2>    at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1310)\n  2>    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1174)\n  2>    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1537)\n  2>    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1502)\n  2>    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1420)\n  2>    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)\n  2>    at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1537)\n  2>    at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1502)\n  2>    at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1420)\n  2>    at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)\n  2>    at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:347)\n  2>    at com.carrotsearch.ant.tasks.junit4.events.mirrors.SerializableMirror.tryToSerialize(SerializableMirror.java:41)\n  2>    at com.carrotsearch.ant.tasks.junit4.events.mirrors.SerializableMirror.<init>(SerializableMirror.java:16)\n  2>    at com.carrotsearch.ant.tasks.junit4.events.mirrors.SerializableMirror.of(SerializableMirror.java:52)\n  2>    at com.carrotsearch.ant.tasks.junit4.events.mirrors.FailureMirror.<init>(FailureMirror.java:29)\n  2>    at com.carrotsearch.ant.tasks.junit4.events.FailureEvent.setFailure(FailureEvent.java:23)\n  2>    at com.carrotsearch.ant.tasks.junit4.events.TestIgnoredAssumptionEvent.<init>(TestIgnoredAssumptionEvent.java:12)\n  2>    at com.carrotsearch.ant.tasks.junit4.slave.RunListenerEmitter.testAssumptionFailure(RunListenerEmitter.java:68)\n...\n\n\n\nObject serialization attempt triggers UID calculation which creates a MessageDigest. This goes deeply further into user prefs which then spawns a timer thread, presumably to refresh the prefs periodically.\n\nYour J9 is quite old and still contains Harmony's code. I checked with a newer version and I can't reproduce this so I'm guessing they either changed the impl. or rely on system events to refresh user prefs \n\nWe can probably filter out timer threads if running under J9? ",
            "author": "Dawid Weiss",
            "id": "comment-13567618"
        },
        {
            "date": "2013-01-31T14:04:15+0000",
            "content": "[trunk commit] Dawid Weiss\nhttp://svn.apache.org/viewvc?view=revision&revision=1440961\n\nLUCENE-4736: ignore TimerThread zombies on J9. ",
            "author": "Commit Tag Bot",
            "id": "comment-13567648"
        },
        {
            "date": "2013-01-31T14:10:49+0000",
            "content": "I've hacked around a filter for J9. It's the simplest solution I guess. Mike, could you check? It went fine for me. If it's ok we need to backport to 4.x probably. ",
            "author": "Dawid Weiss",
            "id": "comment-13567656"
        },
        {
            "date": "2013-01-31T14:27:28+0000",
            "content": "Thanks Dawid, tests were successful after that commit!\n\nI'll upgrade the JVM and re-test. ",
            "author": "Michael McCandless",
            "id": "comment-13567666"
        },
        {
            "date": "2013-01-31T15:35:04+0000",
            "content": "All tests passed after I upgraded the JVM to:\n\n\nJava(TM) SE Runtime Environment (build pxa6460sr12-20121025_01(SR12))\nIBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460sr12-20121024_126067 (JIT enabled, AOT enabled)\nJ9VM - 20121024_126067\nJIT  - r9_20120914_26057\nGC   - 20120928_AA)\nJCL  - 20121014_01\n\n\n\nThanks Dawid! ",
            "author": "Michael McCandless",
            "id": "comment-13567723"
        },
        {
            "date": "2013-01-31T16:44:03+0000",
            "content": "No problem, thanks for reporting. ",
            "author": "Dawid Weiss",
            "id": "comment-13567787"
        },
        {
            "date": "2013-01-31T22:28:18+0000",
            "content": "[branch_4x commit] Dawid Weiss\nhttp://svn.apache.org/viewvc?view=revision&revision=1441226\n\nLUCENE-4736: ignore TimerThread zombies on J9.\nMerging 1440961 from trunk.\n\n\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13568190"
        },
        {
            "date": "2013-05-10T10:34:07+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654129"
        }
    ]
}