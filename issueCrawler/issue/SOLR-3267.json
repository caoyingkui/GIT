{
    "id": "SOLR-3267",
    "title": "TestSort failures (reproducible)",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Over 0.2% oddities in test: 14/6386 have func/query parsing semenatics gotten broader?\n\n\n\nHuh? Steps to reproduce:\n\nant test -Dtestcase=TestSort -Dtestmethod=testRandomFieldNameSorts -Dtests.seed=-3e789c8564f08cbd:515c61b079794ea7:-6347ac0df7ad45c0 -Dargs=\"-Dfile.encoding=UTF-8\"\n\n    [junit] Testcase: testRandomFieldNameSorts(org.apache.solr.search.TestSort):        FAILED\n    [junit] Over 0.2% oddities in test: 14/6386 have func/query parsing semenatics gotten broader?\n    [junit] junit.framework.AssertionFailedError: Over 0.2% oddities in test: 14/6386 have func/query parsing semenatics gotten broader?\n    [junit]     at org.junit.Assert.fail(Assert.java:93)\n    [junit]     at org.junit.Assert.assertTrue(Assert.java:43)\n    [junit]     at org.apache.solr.search.TestSort.testRandomFieldNameSorts(TestSort.java:145)\n    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    [junit]     at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    [junit]     at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    [junit]     at java.lang.reflect.Method.invoke(Method.java:597)\n    [junit]     at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n    [junit]     at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    [junit]     at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n    [junit]     at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n    [junit]     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    [junit]     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\n    [junit]     at org.apache.lucene.util.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:63)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$SubclassSetupTeardownRule$1.evaluate(LuceneTestCase.java:739)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$InternalSetupTeardownRule$1.evaluate(LuceneTestCase.java:655)\n    [junit]     at org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:69)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$TestResultInterceptorRule$1.evaluate(LuceneTestCase.java:566)\n    [junit]     at org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:75)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$RememberThreadRule$1.evaluate(LuceneTestCase.java:628)\n    [junit]     at org.junit.rules.RunRules.evaluate(RunRules.java:18)\n    [junit]     at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\n    [junit]     at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n    [junit]     at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:164)\n    [junit]     at org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:57)\n    [junit]     at org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n    [junit]     at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n    [junit]     at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n    [junit]     at org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n    [junit]     at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n    [junit]     at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    [junit]     at org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\n    [junit]     at org.apache.lucene.util.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:63)\n    [junit]     at org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:75)\n    [junit]     at org.apache.lucene.util.StoreClassNameRule$1.evaluate(StoreClassNameRule.java:38)\n    [junit]     at org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:69)\n    [junit]     at org.junit.rules.RunRules.evaluate(RunRules.java:18)\n    [junit]     at org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n    [junit]     at junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:39)\n    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:518)\n    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052)\n    [junit]     at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:906)\n    [junit] \n    [junit] \n    [junit] Test org.apache.solr.search.TestSort FAILED",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13236460",
            "date": "2012-03-23T08:50:25+0000",
            "content": "I think the test should be removed, its broken by design: \nmathematically this will always have sporatic fails. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13295401",
            "date": "2012-06-15T00:18:55+0000",
            "content": "I'm responsible for this mess, i'll clean it up. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13295425",
            "date": "2012-06-15T02:05:55+0000",
            "content": "I think my thought process when putting the \"numberOfOddities\" check in that test was that we shouldn't fail if a randomly generated string just happened to wind up being a valid function, or all control/blank characters, (or \"score\", or \"docid) ... but that if it happened more then a non-trivial number of times, that was odd and should cause a failure so someone would look at the test.\n\nLooking at some of hte problematic seeds, i realized that the common situation with oddities was:\n\n\trandomly generated strings that were all whitespace and/or control characters\n\trandomly generated strings that were valid quote sequences (which means they can be treated as a (literal) function.\n\n\n\nso i changed it as follows...\n\n\n\tremoved all the \"oddity\" checking\n\tadded loop in the event that a random string is all whitespace, but made it fail hard if 37 attempts all produce strings that are entirely whitespace (rather then an \"infinite\" loop)\n\timproved the \"munging\" of the random strings to ensure they aren't valid functions (or literal quoted strings)\n\tmade the test fail hard if any string produced parses as a function or query instead of a field name.\n\n\n\nCommitted revision 1350444. - trunk\nCommitted revision 1350445. - 4x\n\n\n "
        }
    ]
}