{
    "id": "SOLR-11132",
    "title": "Refactor common getSortField logic in various FieldTypes",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.1",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This pattern exists a lot w/ some minor fluxuations in copy/paste variation...\n\n\n  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    field.checkSortability();\n\n    Object missingValue = null;\n    boolean sortMissingLast = field.sortMissingLast();\n    boolean sortMissingFirst = field.sortMissingFirst();\n\n    if (sortMissingLast) {\n      missingValue = top ? SOMECLASS.MIN_VALUE : SOMECLASS.MAX_VALUE;\n    } else if (sortMissingFirst) {\n      missingValue = top ? SOMECLASS.MAX_VALUE : SOMECLASS.MIN_VALUE;\n    }\n    SortField sf = new SortField(field.getName(), SortField.Type.SOMETYPE, top);\n    sf.setMissingValue(missingValue);\n    return sf;\n  }\n\n\n\nWe should refactor it into a helper method along the lines of...\n\n\n  @Override\n  public static SortField getSortField(SchemaField field, boolean top, SortField.Type sortType, \n                                       Object missingLow, Object missingHigh) {\n\n    field.checkSortability();\n\n    Object missingValue = null;\n    boolean sortMissingLast = field.sortMissingLast();\n    boolean sortMissingFirst = field.sortMissingFirst();\n\n    if (sortMissingLast) {\n      missingValue = top ? missingLow : missingHigh;\n    } else if (sortMissingFirst) {\n      missingValue = top ? missingHigh : missingLow;\n    }\n    SortField sf = new SortField(field.getName(), sortType, top);\n    sf.setMissingValue(missingValue);\n    return sf;\n  }\n\n\n\nSo it can be re-used via...\n\n\n\n  @Override\n  public SortField getSortField(SchemaField field, boolean top) {\n    return getSortField(field, top, SortField.Type.SOMETIME, \n                        SOMECLASS.MIN_VALUE, SOMECLASS.MAX_VALUE);\n  }",
    "attachments": {
        "SOLR-11132.patch": "https://issues.apache.org/jira/secure/attachment/12878556/SOLR-11132.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-23T19:50:52+0000",
            "content": "The change worked out pretty much just as you suggested.  Was able to kill a lot of duplication.\n\nTests and precommit pass. ",
            "author": "Jason Gerlowski",
            "id": "comment-16097782"
        },
        {
            "date": "2017-09-06T21:19:30+0000",
            "content": "Thanks Jason, your patch is great!\n\nWhile reviewing, and looking for any other places that should use this method I noticed...\n\n\n\tAbstractEnumField didn't follow this pattern and in fact had a bug in it when dealing with sortMissingFirst or sortMissingLast\n\t\n\t\tSo I beefed up the enum tests and fixed that bug by leveraging your new method\n\t\n\t\n\tthe \"Sorting\" class had some very old, and very similar (but less \"schema aware\") helper methods similar to what we're dealing with here specifically for Strings and Text (using SortedSetSortField).\n\t\n\t\tI've marked that class deprecated, and refactored the new method we've added here so existing usages of the \"Sorting\" helper methods can use the simpler API we're adding here.\n\t\tThe only other usage that couldn't easily be refactored is some very old/crufty code in \"TestSort\" which doesn't pay any attention to the schema at all \u2013 so I created a minimal helper method in that test class to keep it functionaly w/o depending on the deprecated code.\n\t\n\t\n\tI also added javadocs for the new FieldType methods, and tweaked the param ordering/names (to try and be consistent with the param ordering/names in the SortField constructor).\n\n\n\nI think this is good to go?  Anybody have concerns?\n\n(NOTE: Once this is backported to 7x, we should be able to immedaitely delete Sorting.java from master) ",
            "author": "Hoss Man",
            "id": "comment-16156050"
        },
        {
            "date": "2017-09-11T18:28:44+0000",
            "content": "Commit 69c8bbcb51481d9759eef10490b87d89de90e98d in lucene-solr's branch refs/heads/branch_7x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=69c8bbc ]\n\nSOLR-11332, SOLR-11132: Fix sorting on 'enum' fieldTypes that use sortMissingFirst or sortMissingLast and Refactor common getSortField logic in various FieldTypes\n\n(cherry picked from commit 31eab319f4b2632f1be488be3c1008b3567c6142) ",
            "author": "ASF subversion and git services",
            "id": "comment-16161732"
        },
        {
            "date": "2017-09-11T18:28:51+0000",
            "content": "Commit 31eab319f4b2632f1be488be3c1008b3567c6142 in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=31eab31 ]\n\nSOLR-11332, SOLR-11132: Fix sorting on 'enum' fieldTypes that use sortMissingFirst or sortMissingLast and Refactor common getSortField logic in various FieldTypes ",
            "author": "ASF subversion and git services",
            "id": "comment-16161734"
        },
        {
            "date": "2017-09-11T20:59:02+0000",
            "content": "thanks Jason! ",
            "author": "Hoss Man",
            "id": "comment-16161984"
        },
        {
            "date": "2017-10-17T11:03:48+0000",
            "content": "Bulk close after 7.1.0 release ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16207375"
        }
    ]
}