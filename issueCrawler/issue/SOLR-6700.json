{
    "id": "SOLR-6700",
    "title": "ChildDocTransformer doesn't return correct children after updating and optimising solr index",
    "details": {
        "components": [
            "update"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "4.10.5"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Not A Bug",
        "priority": "Critical"
    },
    "description": "I have an index with nested documents. \nschema.xml snippet\n <field name=\"id\" type=\"string\" indexed=\"true\" stored=\"true\" required=\"true\" multiValued=\"false\" />\n<field name=\"entityType\" type=\"int\" indexed=\"true\" stored=\"true\" required=\"true\"/>\n<field name=\"pName\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n<field name=\"cAlbum\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n<field name=\"cSong\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n<field name=\"_root_\" type=\"string\" indexed=\"true\" stored=\"true\"/>\n<field name=\"_version_\" type=\"long\" indexed=\"true\" stored=\"true\"/>\n\n\n\nAfterwards I add the following documents:\n\n<add>\n  <doc>\n    <field name=\"id\">1</field>\n    <field name=\"pName\">Test Artist 1</field>\n    <field name=\"entityType\">1</field>\n    <doc>\n        <field name=\"id\">11</field>\n        <field name=\"cAlbum\">Test Album 1</field>\n\t    <field name=\"cSong\">Test Song 1</field>\n        <field name=\"entityType\">2</field>\n    </doc>\n  </doc>\n  <doc>\n    <field name=\"id\">2</field>\n    <field name=\"pName\">Test Artist 2</field>\n    <field name=\"entityType\">1</field>\n    <doc>\n        <field name=\"id\">22</field>\n        <field name=\"cAlbum\">Test Album 2</field>\n\t    <field name=\"cSong\">Test Song 2</field>\n        <field name=\"entityType\">2</field>\n    </doc>\n  </doc>\n</add>\n\n\n\nAfter performing the following query \n\nhttp://localhost:8983/solr/collection1/select?q=%7B!parent+which%3DentityType%3A1%7D&fl=*%2Cscore%2C%5Bchild+parentFilter%3DentityType%3A1%5D&wt=json&indent=true\nI get a correct answer (child matches parent, check root field)\nadd docs\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":1,\n    \"params\":{\n      \"fl\":\"*,score,[child parentFilter=entityType:1]\",\n      \"indent\":\"true\",\n      \"q\":\"{!parent which=entityType:1}\",\n      \"wt\":\"json\"}},\n  \"response\":{\"numFound\":2,\"start\":0,\"maxScore\":1.0,\"docs\":[\n      {\n        \"id\":\"1\",\n        \"pName\":\"Test Artist 1\",\n        \"entityType\":1,\n        \"_version_\":1483832661048819712,\n        \"_root_\":\"1\",\n        \"score\":1.0,\n        \"_childDocuments_\":[\n        {\n          \"id\":\"11\",\n          \"cAlbum\":\"Test Album 1\",\n          \"cSong\":\"Test Song 1\",\n          \"entityType\":2,\n          \"_root_\":\"1\"}]},\n      {\n        \"id\":\"2\",\n        \"pName\":\"Test Artist 2\",\n        \"entityType\":1,\n        \"_version_\":1483832661050916864,\n        \"_root_\":\"2\",\n        \"score\":1.0,\n        \"_childDocuments_\":[\n        {\n          \"id\":\"22\",\n          \"cAlbum\":\"Test Album 2\",\n          \"cSong\":\"Test Song 2\",\n          \"entityType\":2,\n          \"_root_\":\"2\"}]}]\n  }}\n\n\n\nAfterwards I try to update one document:\nupdate doc\n<add>\n<doc>\n<field name=\"id\">1</field>\n<field name=\"pName\" update=\"set\">INIT</field>\n</doc>\n</add>\n\n\n\nAfter performing the previous query I get the right result (like the previous one but with the pName field updated).\n\nThe problem only comes after performing an optimize. \nNow, the same query yields the following result:\n\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":1,\n    \"params\":{\n      \"fl\":\"*,score,[child parentFilter=entityType:1]\",\n      \"indent\":\"true\",\n      \"q\":\"{!parent which=entityType:1}\",\n      \"wt\":\"json\"}},\n  \"response\":{\"numFound\":2,\"start\":0,\"maxScore\":1.0,\"docs\":[\n      {\n        \"id\":\"2\",\n        \"pName\":\"Test Artist 2\",\n        \"entityType\":1,\n        \"_version_\":1483832661050916864,\n        \"_root_\":\"2\",\n        \"score\":1.0,\n        \"_childDocuments_\":[\n        {\n          \"id\":\"11\",\n          \"cAlbum\":\"Test Album 1\",\n          \"cSong\":\"Test Song 1\",\n          \"entityType\":2,\n          \"_root_\":\"1\"},\n        {\n          \"id\":\"22\",\n          \"cAlbum\":\"Test Album 2\",\n          \"cSong\":\"Test Song 2\",\n          \"entityType\":2,\n          \"_root_\":\"2\"}]},\n      {\n        \"id\":\"1\",\n        \"pName\":\"INIT\",\n        \"entityType\":1,\n        \"_root_\":\"1\",\n        \"_version_\":1483832916867809280,\n        \"score\":1.0}]\n  }}\n\n\n\nAs can be seen, the document with id:2 now contains the child with id:11 that belongs to the document with id:1. \n\nI haven't found any references on the web about this except http://blog.griddynamics.com/2013/09/solr-block-join-support.html\nSimilar issue: SOLR-6096\n\nIs this problem known? Is there a workaround for this?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2014-11-05T06:49:01+0000",
            "author": "Mikhail Khludnev",
            "content": "as it's stated in SOLR-5211 it's \"by design\" issue. You ought to completely reindex whole block every time you update any doc, otherwise behavior is undetermined.   ",
            "id": "comment-14197689"
        },
        {
            "date": "2014-11-05T07:58:32+0000",
            "author": "Bogdan Marinescu",
            "content": "How do I reindex whole block ? (eventually with solrj?) ",
            "id": "comment-14197809"
        },
        {
            "date": "2014-11-05T20:13:31+0000",
            "author": "Mikhail Khludnev",
            "content": "send a parent and all their children, they override the existing ones. So, far there is a issue when you try to make a parent childless, it's not supported.     ",
            "id": "comment-14198988"
        },
        {
            "date": "2014-11-06T07:52:08+0000",
            "author": "Bogdan Marinescu",
            "content": "That's exactly what I've been doing. \nupdate_parent.xml\n<add>\n<doc>\n<field name=\"id\">1</field>\n<field name=\"pName\" update=\"set\">INIT</field>\n<field name=\"entityType\">1</field>\n<doc>\n        <field name=\"id\">11</field>\n        <field name=\"cAlbum\">Test Album 1</field>\n\t    <field name=\"cSong\">Test Song 1</field>\n        <field name=\"entityType\">2</field>\n    </doc>\n</doc>\n</add>\n\n\n\nThis yields the same result. If instead I use this but without the 'update=\"set\"' part, it replaces the parent and everything works,  and best of all, no optimisation is required, probably because the index is not fragmented. \n\n<add>\n<doc>\n<field name=\"id\">1</field>\n<field name=\"pName\">INIT</field>\n<field name=\"entityType\">1</field>\n<doc>\n        <field name=\"id\">11</field>\n        <field name=\"cAlbum\">Test Album 1</field>\n\t    <field name=\"cSong\">Test Song 1</field>\n        <field name=\"entityType\">2</field>\n    </doc>\n</doc>\n</add>\n\n\n\nQuestion remains though, why doesn't it work with the update=\"set\" flag ? The problem with replacing the document is that instead of just setting the field/fields to be updated, you have to submit the whole document and their children. \nAs I've said before, the data gets \"scrambled\" only after the optimise is performed. \n\nAm I to understand that this bug won't be solved anytime soon ?  ",
            "id": "comment-14199964"
        },
        {
            "date": "2014-11-06T14:16:48+0000",
            "author": "Mikhail Khludnev",
            "content": "in fact update=\"set\" is handled by complete reindexing single document underneath. but these atomic updates isn't implemented for blocks  SOLR-6596 ",
            "id": "comment-14200194"
        },
        {
            "date": "2014-11-07T12:48:53+0000",
            "author": "Bogdan Marinescu",
            "content": "I have some follow-up questions:\n\n1. Can you tell me what exactly the optimiser is doing ? Because everything works well until I call optimise. Afterwards, the ChildDocTransformer returns the wrong children, including other \"parents\". \nI've seen that it reduces the segment count (default to 1), and that the \"Deleted Docs\" are back to 0. Is it really worth it ? Can not using the optimiser lead to performance problems? \n\n2. Is there any other possibility other than ChildDocTransformer to get the children documents for a parent ? (expand query?) How exactly does the [child] transformer work ? Apparently it's not using the root field, because if it were using it, it would group the parent-children correctly.\n\nThanks ",
            "id": "comment-14202006"
        },
        {
            "date": "2014-11-07T21:22:26+0000",
            "author": "Mikhail Khludnev",
            "content": "what exactly the optimiser is doing\nit merges segment till the given number that completely rewrites segments, omitting deleted docs.\n\nIs it really worth it ? Can not using the optimiser lead to performance problems\nobviously it's suggested to don't trigger it, especially users don't really understand the consequences. It's even were renamed to forceMerge() in Lucene, just to make it less attractive to users.\nHowever, even if you don't call it, merge can happen on your index, causing the issue.\n\n2. Is there any other possibility other than ChildDocTransformer to get the children document\nsure. check \n{!child}\n query \n\nHow exactly does the [child] transformer work\ncheck it https://github.com/apache/lucene-solr/blob/trunk/solr/core/src/java/org/apache/solr/response/transform/ChildDocTransformerFactory.java#L124\nit should search for ToChildBJQ i suppose.\n\nApparently it's not using the root field, because \nDude, No way. There is no code which can deal incorrectly updated block. Forget about it. Nuke it whole and write from scratch!\n\n ",
            "id": "comment-14202704"
        },
        {
            "date": "2014-11-10T14:45:22+0000",
            "author": "Bogdan Marinescu",
            "content": "The \n{!child}\n only brings the children, without the parents. - no good\n\nThe expand query/component (https://cwiki.apache.org/confluence/display/solr/Collapse+and+Expand+Results) brings the \"parents\" and afterwards what seems to be a group called 'expanded' which contains all children. \n\nI think this is more reliable than the ChildDocTransformer as you can specify exactly what field should be used for \"expanding\" (namely root). Problem here is you have to match parent and children which takes a little bit of processing.\n\nI haven't tested yet performance-wise if it's a lot worse than the ChildDocTransformer.\n\nI don't think anything else exists that will bring parents and children in the same query. (especially in solrj which has a list of child documents, filled apparently only when using the ChildDocTransformer). \n\nWhat would you recommend ?  ",
            "id": "comment-14204837"
        },
        {
            "date": "2014-11-15T15:49:48+0000",
            "author": "Erik Hatcher",
            "content": "What's the course of action here?   Is there something that can be done here for a possible 4.10.3 release?  Looks like this is about known constraints when using Lucene block-join, so maybe this is \"won't fix\" or \"not a problem\"? ",
            "id": "comment-14213667"
        },
        {
            "date": "2014-11-16T14:33:44+0000",
            "author": "Mikhail Khludnev",
            "content": "'won't fix' as a dupe of SOLR-6096 ",
            "id": "comment-14213933"
        },
        {
            "date": "2014-11-17T07:58:45+0000",
            "author": "Bogdan Marinescu",
            "content": "Too bad because this issue doesn't allow us to use block-join queries anymore. \nA rather \"simple\" solution for the [child] transformer is to write a doc transformer that uses the root field in order to get the children for one parent. \n\nIt would be good if the block-join issue will be fixed.\n ",
            "id": "comment-14214396"
        },
        {
            "date": "2015-01-12T18:00:33+0000",
            "author": "Erik Hatcher",
            "content": "I'm changing this from being a Blocker for 5.0 - there's no patch or assigned developer, but we'll keep this open for the future. ",
            "id": "comment-14273859"
        },
        {
            "date": "2015-01-21T09:54:24+0000",
            "author": "Lucian Curelaru",
            "content": "Hi\n\nI have the same problem as described here. Seeing that there seems to be no intentions to be fixed soon, I've start digging into the code hoping that I might find any kind of temporary solution ( workaround ,maybe rewriting some functions/classes ) until an official fix will be available. But as expected the stuff is quite complex and the digging is taking a lot of time. I wonder if you could help at least with some suggestions in this direction. \n\nThank you ",
            "id": "comment-14285429"
        },
        {
            "date": "2015-01-21T10:07:13+0000",
            "author": "Mikhail Khludnev",
            "content": "nuke old block every time you update it.  ",
            "id": "comment-14285446"
        },
        {
            "date": "2015-01-21T14:01:46+0000",
            "author": "Lucian.Curelaru",
            "content": "First thanks for the fast answer.\nYap.. this works indeed but is not a really feasible long term solution, at least not in our case. We need to update frequently just one field of some child docs which contains a lot of fields. Deleting them with their parents and brothers and reinserting each time means a lot of performance loss \n\nThanks ",
            "id": "comment-14285644"
        },
        {
            "date": "2015-01-22T10:36:02+0000",
            "author": "Lucian.Curelaru",
            "content": "Hi again,\n\nOne more question. I noticed today that the fix version field for this bug is set to 4.10.4 which I presume will came quite soon but from the discussions in this thread I deduced (yesterday) that it will not be fixed soon. So is there a chance to have this issue solved in the 4.10.4 ? If yes can you tell when this version will be released?\n\nThank you ",
            "id": "comment-14287219"
        },
        {
            "date": "2015-03-05T15:38:28+0000",
            "author": "Michael McCandless",
            "content": "Push out to 4.10.5 release ",
            "id": "comment-14348935"
        },
        {
            "date": "2015-04-01T13:19:57+0000",
            "author": "Bogdan Marinescu",
            "content": "Any idea when the 4.10.5 will be released? As I understand it, 5.1 is about to come out and we're already playing with 5.0.0. Where exactly does 4.10.5 fit in ?  ",
            "id": "comment-14390527"
        },
        {
            "date": "2015-04-01T21:21:36+0000",
            "author": "Shawn Heisey",
            "content": "Releases in the major version prior to what's current are done on an as-needed basis.  If there's no compelling reason for a new release (something that causes problems for a large number of users, or fixes a severe bug), there won't be one.  You can always check out the lucene_solr_4_10 branch and build it yourself. ",
            "id": "comment-14391487"
        },
        {
            "date": "2015-04-06T08:33:06+0000",
            "author": "Bogdan Marinescu",
            "content": "Any ideas if this will be fixed or should I just investigate why this is happening.  ",
            "id": "comment-14481043"
        },
        {
            "date": "2018-03-30T19:58:36+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "The problem here is not optimize, but wrong usage of block-join. The docs clearly state that you MUST update the whole block for every change, even if you just want to change one field of one child. So this is not a bug and will not be \u201cfixed\u201d.\n\nIf possible it would be great to throw an error when attempting to update part of a block. But that would probably mean storing more metadata in the index and doing an extra query up front for every add...? ",
            "id": "comment-16420878"
        },
        {
            "date": "2018-03-31T09:52:09+0000",
            "author": "Mikhail Khludnev",
            "content": "If possible it would be great to throw an error when attempting to update part of a block. But that would probably mean storing more metadata in the index and doing an extra query up front for every add...?\n\nJan H\u00f8ydahl, as it was discussed at Vegas, it make sense to create a subclass of DUH2 which always adds _root_ field even if a doc is a childfree. It's considered as affordable tradeoff to make the scenarios like this (atomic update of parent's field) much easier to implement. ",
            "id": "comment-16421262"
        },
        {
            "date": "2018-08-21T15:51:35+0000",
            "author": "David Smiley",
            "content": "Jan's right; this isn't a bug. \u00a0I'm closing this issue. \u00a0Solr's has limitations on nested documents and they are documented. \u00a0But take heart, there is work underway under the umbrella issue SOLR-12298, like subtask\u00a0SOLR-12638.\u00a0 ",
            "id": "comment-16587626"
        }
    ]
}