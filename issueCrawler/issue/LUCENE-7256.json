{
    "id": "LUCENE-7256",
    "title": "PatternReplaceCharFilter can make Lucene hang",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "5.4.1",
        "components": [
            "modules/analysis"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "I'm using ElasticSearch (v2.2.0 , Lucene v5.4.1) and it's Pattern Replace Char Filter (Lucenes PatternReplaceCharFilter) . I need to filter out urls from my query text before it is tokenised. But I found that some input strings cause ElasticSearch to \"hang\" (slowly eating more CPU and memory) until the system crashes.\n\n\n\nExample\n\n\n// Character filters are used to \"tidy up\" a string *before* it is tokenized.\n'char_filter' => [\n    'url_removal_pattern' => [\n        'type'        => 'pattern_replace',\n        'pattern'     => '(?mi)\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\".,<>?\u00ab\u00bb\"\"'']))',\n        'replacement' => '',\n    ],\n\n\n\nThis filter was working fine for some weeks until suddenly ElasticSearch started crashing. We found someone was trying to do a javascript injection attack in our search box.\n\nI pasted the regex and the attack string into https://regex101.com \n\n\n\tRegexp:\n\t\n(?mi)\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s!()\\[\\]{};:\\'\".,<>?\u00ab\u00bb\"\"'']))\n\n\tTest string:\n\t\ntwitter.com/widgets.js\\\";fjs.parentNode.insertBefore(js,fjs);}}(document,\\\"script\\\",\\\"twitter-wjs\\\"\n\n\n\n\nhttps://regex101.com shows the problem to be \"Catastrophic backtracking\"\n\nCatastrophic backtracking has been detected and the execution of your expression has been halted. To find out more what this is, please read the following article: Runaway Regular Expressions.\n\nIt would be great if Lucene could detect \"Catastrophic backtracking\" and throw a error or return null.\n\n\n\nAs an aside, I created a unit test for our PHP application that uses the same regexp and test string. (PHP can understand the same regexp, even though it's obviously for Java in the ElasticSearch case) . Interestingly in php, the regex results in `null` which is the documented response of preg_replace when a error occurs. If PHP can return a error rather than crashing - surely Lucene / Java can too :trollface: ?\n\n\nnamespace app\\tests\\unit;\nuse \\yii\\codeception\\TestCase;\n\nclass TagsControllerTest extends TestCase\n{\n    public function testRegexForURLDetection()\n    {\n        $regex = '(?mi)\\b((?:[a-z][\\w-]+:(?:\\/{1,3}|[a-z0-9%])|www\\d{0,3}[.]|[a-z0-9.\\-]+[.][a-z]{2,4}\\/)(?:[^\\s()<>]+|\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\))+(?:\\(([^\\s()<>]+|(\\([^\\s()<>]+\\)))*\\)|[^\\s`!()\\[\\]{};:\\'\".,<>?\u00ab\u00bb\"\"'']))';\n        // Test the Catastrophic backtracking problem\n        $testString = \"twitter.com/widgets.js\\\";fjs.parentNode.insertBefore(js,fjs);}}(document,\\\"script\\\",\\\"twitter-wjs\\\"\";\n        // This shows the regex is not working for our test string - it gives null but should give 'hello '\n        $this->assertEquals(null, preg_replace(\"/$regex/\", '', \"hello $testString\"));\n    }\n}\n\n\n\n\n\n(I originally opened a ticket to the ElasticSearch project but got told opening it here would be more appropriate - sorry if I'm wrong)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15322481",
            "author": "Adrien Grand",
            "date": "2016-06-09T13:19:12+0000",
            "content": "Maybe one idea would be to wrap the char sequence in order to periodically check how much time has been spent evaluating the regexp, similarly to ExitableDirectoryReader. "
        },
        {
            "id": "comment-15322492",
            "author": "Robert Muir",
            "date": "2016-06-09T13:27:37+0000",
            "content": "I don't think we should do that, it won't help. Nor should we offer apis in lucene that pretend to take timeouts (like ExitableDirectoryReader). Especially in this case where it will not work. I hate that its tests are time-based and fail sporatically.\n\nThere is nothing we can do to fix things like this with java's regex stuff. We can't protect against the user being stupid: http://mail.openjdk.java.net/pipermail/core-libs-dev/2016-March/039269.html "
        },
        {
            "id": "comment-15322836",
            "author": "Adrien Grand",
            "date": "2016-06-09T16:41:16+0000",
            "content": "Closing then. "
        },
        {
            "id": "comment-15376756",
            "author": "Tom Fotherby",
            "date": "2016-07-14T10:49:40+0000",
            "content": "> We can't protect against the user being stupid.\n\nOoooh Burn!  Thanks for the link (http://mail.openjdk.java.net/pipermail/core-libs-dev/2016-March/039269.html) - that's helpful. I'll try to re-write the Regexp to be less \"stupid\", lol. "
        }
    ]
}