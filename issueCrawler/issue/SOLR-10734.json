{
    "id": "SOLR-10734",
    "title": "Multithreaded test/support for AtomicURP broken",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.4",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The multithreaded test doesn't actually start the threads, but only invokes the run directly. The join afterwards doesn't do anything, hence.\n\n\ndiff --git a/solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest.java b/solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest.java\nindex f3f833d..10b7770 100644\n--- a/solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest.java\n+++ b/solr/core/src/test/org/apache/solr/update/processor/AtomicUpdateProcessorFactoryTest.java\n@@ -238,7 +238,7 @@ public class AtomicUpdateProcessorFactoryTest extends SolrTestCaseJ4 {\n           }\n         }\n       };\n-      t.run();\n+      t.run(); // red flag, shouldn't this be t.start?\n       threads.add(t);\n       finalCount += index; //int_i\n     }",
    "attachments": {
        "Screen Shot 2017-05-31 at 4.50.23 PM.png": "https://issues.apache.org/jira/secure/attachment/12870565/Screen%20Shot%202017-05-31%20at%204.50.23%20PM.png",
        "SOLR-10734-fix2.patch": "https://issues.apache.org/jira/secure/attachment/12916458/SOLR-10734-fix2.patch",
        "testResults7_10": "https://issues.apache.org/jira/secure/attachment/12880349/testResults7_10",
        "SOLR-10734.patch": "https://issues.apache.org/jira/secure/attachment/12872662/SOLR-10734.patch",
        "log-snippet": "https://issues.apache.org/jira/secure/attachment/12869599/log-snippet",
        "testResultsMaster_10": "https://issues.apache.org/jira/secure/attachment/12880348/testResultsMaster_10",
        "testMaster_2500": "https://issues.apache.org/jira/secure/attachment/12880350/testMaster_2500"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-24T08:17:09+0000",
            "content": "Ishan, thank you for sharing the concern,\n\nI replaced the t.run() with t.start(), and the test failed for me once for this seed:\n\nant test  -Dtestcase=AtomicUpdateProcessorFactoryTest -Dtests.method=testMultipleThreads -Dtests.seed=C2A82A0AA119D39F -Dtests.slow=true -Dtests.locale=ar-KW -Dtests.timezone=Etc/GMT+11 -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\nIt failed multiple retires and eventually fails for version conflict but I am not able to replicate the same ever since for any seed and the test is getting passed successfully.\n\nI am sure the test is not full proofed. ",
            "author": "Amrit Sarkar",
            "id": "comment-16022500"
        },
        {
            "date": "2017-05-31T11:31:28+0000",
            "content": "The testmethod::testMultipleThreads() is faulty, the multithreaded support is intact until a certain limit.\n\nIf I bring down the number of threads spawned b/w range 10-20, it works swiftly. As I debugged through the threads, there are multiple threads executing at the same time and some threads (10-20%) are not able to catch up ever with the version_id for maximum number of attempts.\n\nexpected_is: X, actual_is: Y and when it fetches the current version from vinfo, it becomes Z (updated by some other thread), always behind. PF screenshot.\n\nFor MAX_ATTEMPTS=100, out of total 1000 threads, if I spawn, around 200-350 threads are failing to execute resulting in failure of poorly written test scenarios. But some threads do get indexed after multiple retries and populates the document successfully.\n\ne.g. \n\n<response>\n<lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">3</int></lst><result name=\"response\" numFound=\"1\" start=\"0\"><doc><int name=\"id\">10</int><arr name=\"range_facet_l\"><long>10</long></arr><arr name=\"range_facet_l_dv\"><long>10</long></arr><arr name=\"range_facet_i_dv\"><int>10</int></arr><arr name=\"cat\"><str>b0iuxlwrlloc7408ialh</str><str>b0iuxlwrlloc7408ialh</str><str>l5z00axtj727yv2dsz38</str><str>uwho9ivymrn3ewkrncgs</str><str>l5z00axtj727yv2dsz38</str><str>uwho9ivymrn3ewkrncgs</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>b0iuxlwrlloc7408ialh</str><str>rcj1nr5whgo6bw31e4qa</str><str>l5z00axtj727yv2dsz38</str><str>rcj1nr5whgo6bw31e4qa</str><str>gy3vfjzqbn41ir5tljdq</str><str>b0iuxlwrlloc7408ialh</str><str>b0iuxlwrlloc7408ialh</str><str>rcj1nr5whgo6bw31e4qa</str><str>gy3vfjzqbn41ir5tljdq</str><str>gy3vfjzqbn41ir5tljdq</str><str>gy3vfjzqbn41ir5tljdq</str><str>b0iuxlwrlloc7408ialh</str><str>gy3vfjzqbn41ir5tljdq</str><str>uwho9ivymrn3ewkrncgs</str><str>l5z00axtj727yv2dsz38</str><str>gy3vfjzqbn41ir5tljdq</str><str>uwho9ivymrn3ewkrncgs</str><str>uwho9ivymrn3ewkrncgs</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>b0iuxlwrlloc7408ialh</str><str>gy3vfjzqbn41ir5tljdq</str><str>gy3vfjzqbn41ir5tljdq</str><str>b0iuxlwrlloc7408ialh</str><str>b0iuxlwrlloc7408ialh</str><str>gy3vfjzqbn41ir5tljdq</str><str>rcj1nr5whgo6bw31e4qa</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>b0iuxlwrlloc7408ialh</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>uwho9ivymrn3ewkrncgs</str><str>b0iuxlwrlloc7408ialh</str><str>rcj1nr5whgo6bw31e4qa</str><str>rcj1nr5whgo6bw31e4qa</str><str>l5z00axtj727yv2dsz38</str><str>rcj1nr5whgo6bw31e4qa</str><str>gy3vfjzqbn41ir5tljdq</str><str>gy3vfjzqbn41ir5tljdq</str><str>l5z00axtj727yv2dsz38</str><str>uwho9ivymrn3ewkrncgs</str><str>gy3vfjzqbn41ir5tljdq</str><str>b0iuxlwrlloc7408ialh</str><str>l5z00axtj727yv2dsz38</str><str>l5z00axtj727yv2dsz38</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>l5z00axtj727yv2dsz38</str><str>l5z00axtj727yv2dsz38</str><str>l5z00axtj727yv2dsz38</str><str>b0iuxlwrlloc7408ialh</str><str>l5z00axtj727yv2dsz38</str><str>gy3vfjzqbn41ir5tljdq</str><str>l5z00axtj727yv2dsz38</str><str>uwho9ivymrn3ewkrncgs</str><str>l5z00axtj727yv2dsz38</str><str>gy3vfjzqbn41ir5tljdq</str><str>gy3vfjzqbn41ir5tljdq</str><str>b0iuxlwrlloc7408ialh</str><str>b0iuxlwrlloc7408ialh</str><str>gy3vfjzqbn41ir5tljdq</str><str>l5z00axtj727yv2dsz38</str><str>l5z00axtj727yv2dsz38</str><str>gy3vfjzqbn41ir5tljdq</str><str>gy3vfjzqbn41ir5tljdq</str><str>uwho9ivymrn3ewkrncgs</str><str>b0iuxlwrlloc7408ialh</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>gy3vfjzqbn41ir5tljdq</str><str>l5z00axtj727yv2dsz38</str><str>l5z00axtj727yv2dsz38</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>gy3vfjzqbn41ir5tljdq</str><str>gy3vfjzqbn41ir5tljdq</str><str>b0iuxlwrlloc7408ialh</str><str>b0iuxlwrlloc7408ialh</str><str>uwho9ivymrn3ewkrncgs</str><str>l5z00axtj727yv2dsz38</str><str>uwho9ivymrn3ewkrncgs</str><str>gy3vfjzqbn41ir5tljdq</str><str>l5z00axtj727yv2dsz38</str><str>gy3vfjzqbn41ir5tljdq</str><str>l5z00axtj727yv2dsz38</str><str>rcj1nr5whgo6bw31e4qa</str><str>l5z00axtj727yv2dsz38</str><str>gy3vfjzqbn41ir5tljdq</str><str>gy3vfjzqbn41ir5tljdq</str><str>rcj1nr5whgo6bw31e4qa</str><str>rcj1nr5whgo6bw31e4qa</str><str>l5z00axtj727yv2dsz38</str><str>rcj1nr5whgo6bw31e4qa</str><str>rcj1nr5whgo6bw31e4qa</str><str>b0iuxlwrlloc7408ialh</str><str>l5z00axtj727yv2dsz38</str><str>rcj1nr5whgo6bw31e4qa</str><str>rcj1nr5whgo6bw31e4qa</str><str>b0iuxlwrlloc7408ialh</str><str>rcj1nr5whgo6bw31e4qa</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>l5z00axtj727yv2dsz38</str><str>rcj1nr5whgo6bw31e4qa</str><str>l5z00axtj727yv2dsz38</str><str>b0iuxlwrlloc7408ialh</str><str>uwho9ivymrn3ewkrncgs</str><str>uwho9ivymrn3ewkrncgs</str><str>gy3vfjzqbn41ir5tljdq</str><str>b0iuxlwrlloc7408ialh</str><str>gy3vfjzqbn41ir5tljdq</str><str>uwho9ivymrn3ewkrncgs</str><str>b0iuxlwrlloc7408ialh</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>uwho9ivymrn3ewkrncgs</str><str>uwho9ivymrn3ewkrncgs</str><str>gy3vfjzqbn41ir5tljdq</str><str>l5z00axtj727yv2dsz38</str><str>l5z00axtj727yv2dsz38</str><str>gy3vfjzqbn41ir5tljdq</str><str>rcj1nr5whgo6bw31e4qa</str><str>b0iuxlwrlloc7408ialh</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>rcj1nr5whgo6bw31e4qa</str><str>rcj1nr5whgo6bw31e4qa</str><str>l5z00axtj727yv2dsz38</str><str>l5z00axtj727yv2dsz38</str><str>b0iuxlwrlloc7408ialh</str><str>b0iuxlwrlloc7408ialh</str><str>l5z00axtj727yv2dsz38</str><str>uwho9ivymrn3ewkrncgs</str><str>b0iuxlwrlloc7408ialh</str><str>rcj1nr5whgo6bw31e4qa</str><str>l5z00axtj727yv2dsz38</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>gy3vfjzqbn41ir5tljdq</str><str>uwho9ivymrn3ewkrncgs</str><str>l5z00axtj727yv2dsz38</str><str>rcj1nr5whgo6bw31e4qa</str><str>gy3vfjzqbn41ir5tljdq</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>b0iuxlwrlloc7408ialh</str><str>gy3vfjzqbn41ir5tljdq</str><str>rcj1nr5whgo6bw31e4qa</str><str>rcj1nr5whgo6bw31e4qa</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>b0iuxlwrlloc7408ialh</str><str>rcj1nr5whgo6bw31e4qa</str><str>gy3vfjzqbn41ir5tljdq</str><str>gy3vfjzqbn41ir5tljdq</str><str>b0iuxlwrlloc7408ialh</str><str>gy3vfjzqbn41ir5tljdq</str><str>l5z00axtj727yv2dsz38</str><str>l5z00axtj727yv2dsz38</str><str>l5z00axtj727yv2dsz38</str><str>uwho9ivymrn3ewkrncgs</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>l5z00axtj727yv2dsz38</str><str>l5z00axtj727yv2dsz38</str><str>rcj1nr5whgo6bw31e4qa</str><str>gy3vfjzqbn41ir5tljdq</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>b0iuxlwrlloc7408ialh</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>rcj1nr5whgo6bw31e4qa</str><str>uwho9ivymrn3ewkrncgs</str><str>gy3vfjzqbn41ir5tljdq</str><str>gy3vfjzqbn41ir5tljdq</str><str>l5z00axtj727yv2dsz38</str><str>uwho9ivymrn3ewkrncgs</str><str>l5z00axtj727yv2dsz38</str><str>gy3vfjzqbn41ir5tljdq</str><str>uwho9ivymrn3ewkrncgs</str><str>gy3vfjzqbn41ir5tljdq</str><str>uwho9ivymrn3ewkrncgs</str><str>b0iuxlwrlloc7408ialh</str><str>l5z00axtj727yv2dsz38</str><str>rcj1nr5whgo6bw31e4qa</str><str>b0iuxlwrlloc7408ialh</str><str>rcj1nr5whgo6bw31e4qa</str><str>b0iuxlwrlloc7408ialh</str><str>rcj1nr5whgo6bw31e4qa</str><str>rcj1nr5whgo6bw31e4qa</str></arr><arr name=\"int_i\"><int>432</int></arr><arr name=\"multiDefault\"><str>muLti-Default</str></arr><int name=\"intDefault\">42</int><date name=\"timestamp\">2017-05-31T10:53:41.564Z</date><long name=\"_version_\">1568908793938444289</long><int name=\"intDvoDefault\">42</int></doc></result>\n</response>\n\n\n\nLike the below scenario, I am expecting all the threads will be executed and and the field int_i will be populated correctly. If some of the threads fail, which is a valid scenario in real world, it can happen if the number of threads are many (here 1000), the test scenario fails. \n\ne.g error:\n\nCaused by: java.lang.RuntimeException: REQUEST FAILED: xpath=//result[@numFound=1]\n\txml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n<lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">0</int></lst><result name=\"response\" numFound=\"0\" start=\"0\"></result>\n</response>\n\n\trequest was:q=int_i:2089&wt=xml\n\tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:891)\n\t... 40 more\n\n\n\nI believe the multithreading support is not broken but it has its breakpoint. Seeking suggestions on how to write test cases for AUP multithreading scenario as the current one is faulty, I can bring the number of threads down to 10-20 or even if some of the threads fail to execute and index atomic updates, we write test such that atleast document is present in index, with updates from successfully executed threads.\n\nThank you. ",
            "author": "Amrit Sarkar",
            "id": "comment-16031011"
        },
        {
            "date": "2017-06-12T08:06:48+0000",
            "content": "Patch attached with following changes:\n\n\n\tMax Attempts bumped up from 5 to 25.\n\tThreads lowered to 10 from 100.\n\n\n\nAs the above theory posted above stands out, the following changes will make the tests work. ",
            "author": "Amrit Sarkar",
            "id": "comment-16046304"
        },
        {
            "date": "2017-07-26T19:32:10+0000",
            "content": "Noble Paul Ishan Chattopadhyaya, \n\nLet me know if we need to do anything else apart from the above to rectify the test class. ",
            "author": "Amrit Sarkar",
            "id": "comment-16102167"
        },
        {
            "date": "2017-07-27T05:58:13+0000",
            "content": "Commit edff113e13f2a108d2f4177da3e88cf6f3402b23 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=edff113 ]\n\nSOLR-10734: AtomicUpdateProcessorFactoryTest was not truly multithreaded ",
            "author": "ASF subversion and git services",
            "id": "comment-16102756"
        },
        {
            "date": "2017-07-27T05:59:06+0000",
            "content": "Commit afcd96cf405b065a59b800bda3e88771574e3263 in lucene-solr's branch refs/heads/branch_7x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=afcd96c ]\n\nSOLR-10734: AtomicUpdateProcessorFactoryTest was not truly multithreaded ",
            "author": "ASF subversion and git services",
            "id": "comment-16102757"
        },
        {
            "date": "2017-07-27T13:20:14+0000",
            "content": "I got a non-reproducing master failure on my Jenkins:\n\n\nChecking out Revision edff113e13f2a108d2f4177da3e88cf6f3402b23 (refs/remotes/origin/master)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=AtomicUpdateProcessorFactoryTest -Dtests.method=testMultipleThreads -Dtests.seed=76152225D862F0E0 -Dtests.slow=true -Dtests.locale=sr-ME -Dtests.timezone=Australia/Eucla -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.06s J3  | AtomicUpdateProcessorFactoryTest.testMultipleThreads <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([76152225D862F0E0:5A2755A854A68664]:0)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:886)\n   [junit4]    > \tat org.apache.solr.update.processor.AtomicUpdateProcessorFactoryTest.testMultipleThreads(AtomicUpdateProcessorFactoryTest.java:264)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]    > Caused by: java.lang.RuntimeException: REQUEST FAILED: xpath=//result[@numFound=1]\n   [junit4]    > \txml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   [junit4]    > <response>\n   [junit4]    > <lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">0</int></lst><result name=\"response\" numFound=\"0\" start=\"0\"></result>\n   [junit4]    > </response>\n   [junit4]    > \trequest was:q=int_i:18&wt=xml\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:879)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {name_s=BlockTreeOrds(blocksize=128), int_i=BlockTreeOrds(blocksize=128), range_facet_l_dv=PostingsFormat(name=Memory), multiDefault=PostingsFormat(name=LuceneVarGapDocFreqInterval), intDefault=PostingsFormat(name=LuceneFixedGap), title=PostingsFormat(name=LuceneVarGapDocFreqInterval), title_lettertok=PostingsFormat(name=Memory), count_i=BlockTreeOrds(blocksize=128), range_facet_l=PostingsFormat(name=LuceneFixedGap), title_stringNoNorms=PostingsFormat(name=LuceneFixedGap), title_stemmed=PostingsFormat(name=LuceneVarGapDocFreqInterval), cat=PostingsFormat(name=LuceneFixedGap), id_i1=PostingsFormat(name=LuceneVarGapDocFreqInterval), id=PostingsFormat(name=Memory), range_facet_i_dv=PostingsFormat(name=LuceneFixedGap), text=BlockTreeOrds(blocksize=128), timestamp=PostingsFormat(name=LuceneFixedGap)}, docValues:{range_facet_l_dv=DocValuesFormat(name=Direct), _version_=DocValuesFormat(name=Lucene70), range_facet_i_dv=DocValuesFormat(name=Lucene70), intDvoDefault=DocValuesFormat(name=Lucene70), timestamp=DocValuesFormat(name=Lucene70)}, maxPointsInLeafNode=798, maxMBSortInHeap=6.2618227715292365, sim=RandomSimilarity(queryNorm=false): {}, locale=sr-ME, timezone=Australia/Eucla\n   [junit4]   2> NOTE: Linux 4.1.0-custom2-amd64 amd64/Oracle Corporation 1.8.0_77 (64-bit)/cpus=16,threads=1,free=81956456,total=525860864\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16103195"
        },
        {
            "date": "2017-07-27T13:40:43+0000",
            "content": "Two more Jenkins failures, both on branch_7x: https://builds.apache.org/job/Lucene-Solr-Tests-7.x/106/ (reproduces for me): \n\n\nChecking out Revision 494a25480e8c14e500cf543a9ff4a7d37c3656d0 (refs/remotes/origin/branch_7x)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=AtomicUpdateProcessorFactoryTest -Dtests.method=testMultipleThreads -Dtests.seed=2689BFDD1C91E35C -Dtests.multiplier=2 -Dtests.slow=true -Dtests.locale=ar-SD -Dtests.timezone=Europe/Rome -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.45s J0 | AtomicUpdateProcessorFactoryTest.testMultipleThreads <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([2689BFDD1C91E35C:ABBC850905595D8]:0)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:886)\n   [junit4]    > \tat org.apache.solr.update.processor.AtomicUpdateProcessorFactoryTest.testMultipleThreads(AtomicUpdateProcessorFactoryTest.java:260)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: java.lang.RuntimeException: REQUEST FAILED: xpath=//result[@numFound=1]\n   [junit4]    > \txml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   [junit4]    > <response>\n   [junit4]    > <lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">0</int></lst><result name=\"response\" numFound=\"0\" start=\"0\"></result>\n   [junit4]    > </response>\n   [junit4]    > \trequest was:q=cat:mt238i51nawrz3syjfe9+vs98scypq841oc1u5it8+rzzee3zd6k0umdhoi4i0+ah7738oua03w9uilheht+mvsxg9bkniih36bu0efy&wt=xml\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:879)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {name_s=Lucene50(blocksize=128), title_stringNoNorms=PostingsFormat(name=Direct), title_stemmed=BlockTreeOrds(blocksize=128), multiDefault=BlockTreeOrds(blocksize=128), cat=PostingsFormat(name=Direct), id=Lucene50(blocksize=128), text=Lucene50(blocksize=128), title=BlockTreeOrds(blocksize=128), title_lettertok=Lucene50(blocksize=128)}, docValues:{int_i=DocValuesFormat(name=Asserting), range_facet_l_dv=DocValuesFormat(name=Lucene70), _version_=DocValuesFormat(name=Memory), intDefault=DocValuesFormat(name=Memory), id_i1=DocValuesFormat(name=Lucene70), range_facet_i_dv=DocValuesFormat(name=Memory), intDvoDefault=DocValuesFormat(name=Asserting), count_i=DocValuesFormat(name=Asserting), range_facet_l=DocValuesFormat(name=Memory), timestamp=DocValuesFormat(name=Memory)}, maxPointsInLeafNode=666, maxMBSortInHeap=7.609559823042625, sim=RandomSimilarity(queryNorm=true): {}, locale=ar-SD, timezone=Europe/Rome\n   [junit4]   2> NOTE: Linux 4.4.0-83-generic amd64/Oracle Corporation 1.8.0_144 (64-bit)/cpus=4,threads=1,free=141278480,total=466092032\n\n\n\nand https://jenkins.thetaphi.de/job/Lucene-Solr-7.x-MacOSX/77/ (doesn't reproduce for me):\n\n\nChecking out Revision 494a25480e8c14e500cf543a9ff4a7d37c3656d0 (refs/remotes/origin/branch_7x)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=AtomicUpdateProcessorFactoryTest -Dtests.method=testMultipleThreads -Dtests.seed=F91EF2B939555DA -Dtests.slow=true -Dtests.locale=es-SV -Dtests.timezone=Atlantic/Cape_Verde -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] ERROR   0.05s J1 | AtomicUpdateProcessorFactoryTest.testMultipleThreads <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([F91EF2B939555DA:23A398A61F51235E]:0)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:886)\n   [junit4]    > \tat org.apache.solr.update.processor.AtomicUpdateProcessorFactoryTest.testMultipleThreads(AtomicUpdateProcessorFactoryTest.java:264)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: java.lang.RuntimeException: REQUEST FAILED: xpath=//result[@numFound=1]\n   [junit4]    > \txml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   [junit4]    > <response>\n   [junit4]    > <lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">0</int></lst><result name=\"response\" numFound=\"0\" start=\"0\"></result>\n   [junit4]    > </response>\n   [junit4]    > \trequest was:q=int_i:21&wt=xml\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:879)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Lucene70, sim=RandomSimilarity(queryNorm=false): {}, locale=es-SV, timezone=Atlantic/Cape_Verde\n   [junit4]   2> NOTE: Mac OS X 10.11.6 x86_64/Oracle Corporation 1.8.0_141 (64-bit)/cpus=3,threads=1,free=301576032,total=536870912\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16103214"
        },
        {
            "date": "2017-07-27T13:46:32+0000",
            "content": "The race around condition still prevails for even 10 threads and 25 attempts. Phew  \n\nI converted the exact match query to range so that the test will pass even if one threads gets executed, rightfully:\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:[* TO \" + finalCount+\"]\")\n        , \"//result[@numFound=1]\");\n\n\n\nand put proper parentheses on string field exact match. Not sure whether this is enough for all the scenarios. ",
            "author": "Amrit Sarkar",
            "id": "comment-16103220"
        },
        {
            "date": "2017-07-28T15:36:24+0000",
            "content": "Noble Paul: AtomicUpdateProcessorFactoryTest.testMultipleThreads() is failing extremely regularly.  Please fix or disable. ",
            "author": "Steve Rowe",
            "id": "comment-16105118"
        },
        {
            "date": "2017-07-29T23:53:23+0000",
            "content": "Not sure whether this is enough for all the scenarios.\nGiven that the tests or the implementation itself is broken, should we add an experimental annotation to the URP? ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16106270"
        },
        {
            "date": "2017-07-29T23:53:35+0000",
            "content": "Not sure whether this is enough for all the scenarios.\nGiven that the tests or the implementation itself is broken, should we add an experimental annotation to the URP? ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16106272"
        },
        {
            "date": "2017-07-29T23:56:53+0000",
            "content": "I can confirm that this test fails almost 9 out of 10 times on my box (when running with -Dtests.jvms=12). ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16106273"
        },
        {
            "date": "2017-07-30T00:28:30+0000",
            "content": "Ishan,\n\n\nGiven that the tests or the implementation itself is broken, should we add an experimental annotation to the URP?\nI firmly believe the implementation is still intact, i.e. not all the threads will get successfully executed, there's no guarantee for it. The tests, testMultipleThreads still doesn't take that into perspective, which increasing the attempts and lowering the test wouldn't fix either. \n\n\nI can confirm that this test fails almost 9 out of 10 times on my box (when running with -Dtests.jvms=12).\nAfter the patch recently uploaded, where exact match is changed to range. if I run ant -Dtestcase=AtomicUpdateProcessorFactoryTest -Dtests.jvms=12 test on 8GB RAM, 256GB storage SSD Mac, it ran fine for me multiple times. I am not sure how else to cope this. ",
            "author": "Amrit Sarkar",
            "id": "comment-16106277"
        },
        {
            "date": "2017-07-30T02:28:09+0000",
            "content": "Commit 8b32d6beb5a2a3addb00901a0317167228fce520 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8b32d6b ]\n\nSOLR-10734: Awaitsfix ",
            "author": "ASF subversion and git services",
            "id": "comment-16106289"
        },
        {
            "date": "2017-07-30T02:28:35+0000",
            "content": "tests failing too often. moved to AwaitsFix() ",
            "author": "Noble Paul",
            "id": "comment-16106290"
        },
        {
            "date": "2017-07-30T02:29:26+0000",
            "content": "Commit 44473e21f9ee39c6d30060ac2182613c1a09f329 in lucene-solr's branch refs/heads/branch_7x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=44473e2 ]\n\nSOLR-10734: Awaitsfix ",
            "author": "ASF subversion and git services",
            "id": "comment-16106291"
        },
        {
            "date": "2017-08-04T04:46:08+0000",
            "content": "I ran local beasts on system for master: 10 and 2500 rounds and branch_7x: 100 for the patch uploaded recently in JIRA and it ran successfully. I am attaching the beast results too.\n\nChanges done as explained above:\n\n  // there is no gurantee of all the threads getting executed, even if one passes, concurrency works.\n  public void testMultipleThreads() throws Exception {\n    clearIndex();\n    String[] strings = new String[5];\n    for (int i=0; i<5; i++) {\n      strings[i] = generateRandomString();\n    }\n\n    List<Thread> threads = new ArrayList<>(100);\n    int finalCount = 0; //int_i\n\n    AtomicUpdateProcessorFactory factory = new AtomicUpdateProcessorFactory();\n    factory.inform(h.getCore());\n\n    for (int i = 0; i < 10; i++) {\n      int index = random().nextInt(5);\n      Thread t = new Thread() {\n        @Override\n        public void run() {\n          AddUpdateCommand cmd = new AddUpdateCommand(new LocalSolrQueryRequest(h.getCore(),\n              new ModifiableSolrParams()\n                  .add(\"processor\", \"atomic\")\n                  .add(\"atomic.cat\", \"add\")\n                  .add(\"atomic.int_i\", \"inc\")\n                  .add(\"commit\",\"true\")\n\n          ));\n\n          cmd.solrDoc = new SolrInputDocument();\n          cmd.solrDoc.addField(\"id\", 10); //hardcoded id=2\n          cmd.solrDoc.addField(\"cat\", strings[index]);\n          cmd.solrDoc.addField(\"int_i\", index);\n\n          try {\n            factory.getInstance(cmd.getReq(), new SolrQueryResponse(),\n                new DistributedUpdateProcessor(cmd.getReq(), new SolrQueryResponse(),\n                    new RunUpdateProcessor(cmd.getReq(), null))).processAdd(cmd);\n          } catch (IOException e) {\n          }\n        }\n      };\n      threads.add(t);\n      t.start();\n      finalCount += index; //int_i\n    }\n\n    for (Thread thread: threads) thread.join();\n\n    assertU(commit());\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"id:10\"), \"//result[@numFound=1]\");\n\n\n    StringJoiner queryString = new StringJoiner(\" OR \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString()+\")\")\n        , \"//result[@numFound=1]\");\n\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:[* TO \" + finalCount+\"]\")\n        , \"//result[@numFound=1]\");\n\n  }\n\n\n\nsignificant changes:\n\ncat:(A OR B OR C OR D) // proper parenthesized OR seperated query terms\nint_i:[* to max_possible_sum] // range query for int_i, practically 0 to max_possible_sum\n\n\n    StringJoiner queryString = new StringJoiner(\" OR \");\n    for(String string: strings) {\n      queryString.add(string);\n    }\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"cat:(\" + queryString.toString()+\")\")\n        , \"//result[@numFound=1]\");\n    assertQ(\"Check the total number of docs\",\n        req(\"q\", \"int_i:[* TO \" + finalCount+\"]\")\n        , \"//result[@numFound=1]\");\n\n\n\nthe thought process for the above is atleast one of the threads should execute for multiple seeds and multiple test configurations, heavy or light. This is the best I got, please let me know if anything else can be done in this regard. I understand we are approaching 7.0 release and we have this fixed in later version. ",
            "author": "Amrit Sarkar",
            "id": "comment-16113948"
        },
        {
            "date": "2018-01-16T08:35:38+0000",
            "content": "Improvements listed in SOLR-11311. ",
            "author": "Amrit Sarkar",
            "id": "comment-16326871"
        },
        {
            "date": "2018-03-21T16:35:43+0000",
            "content": "Commit eb8a5a882f879a51389b5d43f74f3aceac9e68c9 in lucene-solr's branch refs/heads/branch_7_3 from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=eb8a5a8 ]\n\nSOLR-10734: Make this test an AwaitsFix again, it fails nearly all the time ",
            "author": "ASF subversion and git services",
            "id": "comment-16408196"
        },
        {
            "date": "2018-03-27T09:30:47+0000",
            "content": "This patch fixes the test failures. The problem was that the assert in question tried to query for multiple terms on the \"cat\" field but the terms were not inside a parenthesis. So only the first term was queried against the \"cat\" field and the rest were queried against the default search field. Sometimes, the random term selection for the atomic updates would skip the first term entirely and then the query would not match any docs thereby failing the assert.\n\nEdit \u2013 I see that Amrit had already spotted the problem and provided a fix. Serves me right for not reading all the comments in this issue before debugging  ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16415319"
        },
        {
            "date": "2018-03-27T09:35:30+0000",
            "content": "Commit 64c110c58d04663d4aa5d3b1dfa54e9104a2e625 in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=64c110c ]\n\nSOLR-10734: Fix Multithreaded test/support for AtomicURP ",
            "author": "ASF subversion and git services",
            "id": "comment-16415326"
        },
        {
            "date": "2018-03-27T09:37:25+0000",
            "content": "Commit bbf48c9440facd43d42c5ca738302b1e68f96f4b in lucene-solr's branch refs/heads/branch_7x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bbf48c9 ]\n\nSOLR-10734: Fix Multithreaded test/support for AtomicURP\n\n(cherry picked from commit 64c110c) ",
            "author": "ASF subversion and git services",
            "id": "comment-16415327"
        },
        {
            "date": "2018-03-27T13:33:21+0000",
            "content": "Re-opening because there are new test failures.\n\nhttps://jenkins.thetaphi.de/job/Lucene-Solr-7.x-MacOSX/539/ ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16415616"
        },
        {
            "date": "2018-03-27T14:23:16+0000",
            "content": "Commit 89e337ed3d760d07ceab690dde05f47200ea0ff9 in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=89e337e ]\n\nSOLR-10734: Marking test with BadApple once again until the new failures can be fixed ",
            "author": "ASF subversion and git services",
            "id": "comment-16415706"
        },
        {
            "date": "2018-03-27T14:23:43+0000",
            "content": "Commit f8971f9a0d24a58f4c32f77ab6d34dd4406b649f in lucene-solr's branch refs/heads/branch_7x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f8971f9 ]\n\nSOLR-10734: Marking test with BadApple once again until the new failures can be fixed\n\n(cherry picked from commit 89e337e) ",
            "author": "ASF subversion and git services",
            "id": "comment-16415707"
        },
        {
            "date": "2018-03-27T19:29:23+0000",
            "content": "The latest test failure indicates that there is a genuine bug here. After adding some debug logging, I see that the test fails because the value of int_i in the document is different from what the test expects if and only if there is a version conflict reported in the logs. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16416130"
        },
        {
            "date": "2018-03-27T20:21:56+0000",
            "content": "Attached: SOLR-10734-fix2.patch\n\nThere were two separate bugs here, one rare and the other more common:\n\n\tCommon: By the time a version conflict is reported, the SolrInputDocument inside the AddUpdateCommand is already modified to be a full document i.e. it has no atomic update command anymore. So when we try to update the same AddUpdateCommand with the new version, it ends up overwriting the older document in the index. The fix was to keep a reference to the atomic updates and re-apply them on a version conflict.\n\tRare: The processor sets the version on the document only if a version is returned by VersionInfo,lookupVersion. Since the default version is 0 i.e. no constraints, two different updates can race and get a null version thereby overwriting each other. The fix is to set version to -1 if VersionInfo,lookupVersion returns null.\n\n\n\nI beasted this test 100 times and it passes consistently where as earlier it used to fail 1/5 times with the right seed. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16416180"
        },
        {
            "date": "2018-03-28T07:02:11+0000",
            "content": "Attached: SOLR-10734-fix2.patch\n\nThe last patch had a bug. It was not sufficient to only re-apply the atomic updates because the full document will have other fields that may also be out-of-date. So this patch clones the original document and retries adding with the new version. I'll commit this shortly. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16416924"
        },
        {
            "date": "2018-03-28T07:11:07+0000",
            "content": "Commit ab325062435726f31cce6176bf5ed881f44973bb in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ab32506 ]\n\nSOLR-10734: AtomicUpdateRequestProcessor can cause wrong/old values to be set under concurrent updates for the same document. Multithreaded test for AtomicUpdateRequestProcessor was also beefed up and fixed. ",
            "author": "ASF subversion and git services",
            "id": "comment-16416929"
        },
        {
            "date": "2018-03-28T07:14:43+0000",
            "content": "Commit 8e06decceb4444dd302396614cc6f6582384780b in lucene-solr's branch refs/heads/branch_7x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8e06dec ]\n\nSOLR-10734: AtomicUpdateRequestProcessor can cause wrong/old values to be set under concurrent updates for the same document. Multithreaded test for AtomicUpdateRequestProcessor was also beefed up and fixed.\n\n(cherry picked from commit ab32506) ",
            "author": "ASF subversion and git services",
            "id": "comment-16416937"
        },
        {
            "date": "2018-03-28T07:19:45+0000",
            "content": "Oops, my fix is still not right. We need to deep copy the original solr document each time we retry or else we'll end up with the same overwriting bug on subsequent attempts. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16416946"
        },
        {
            "date": "2018-03-28T07:26:42+0000",
            "content": "Commit 3be8cfb356acef9bd5673a16d94938d13a2f27f9 in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3be8cfb ]\n\nSOLR-10734: Clone the original solr document each time we retry ",
            "author": "ASF subversion and git services",
            "id": "comment-16416953"
        },
        {
            "date": "2018-03-28T07:27:25+0000",
            "content": "Commit 3123218c30960bbb8b44bc408bdef3111cb8c048 in lucene-solr's branch refs/heads/branch_7x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3123218 ]\n\nSOLR-10734: Clone the original solr document each time we retry\n\n(cherry picked from commit 3be8cfb) ",
            "author": "ASF subversion and git services",
            "id": "comment-16416955"
        }
    ]
}