{
    "id": "LUCENE-8015",
    "title": "TestBasicModelIne.testRandomScoring failure",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Task",
        "components": [],
        "fix_versions": [
            "master (8.0)"
        ]
    },
    "description": "reproduce with: ant test  -Dtestcase=TestBasicModelIne -Dtests.method=testRandomScoring -Dtests.seed=86E85958B1183E93 -Dtests.slow=true -Dtests.locale=vi-VN -Dtests.timezone=Pacific/Tongatapu -Dtests.asserts=true -Dtests.file.encoding=UTF8",
    "attachments": {
        "LUCENE-8015_test_fangs.patch": "https://issues.apache.org/jira/secure/attachment/12895119/LUCENE-8015_test_fangs.patch",
        "LUCENE-8015.patch": "https://issues.apache.org/jira/secure/attachment/12900891/LUCENE-8015.patch",
        "LUCENE-8015-test.patch": "https://issues.apache.org/jira/secure/attachment/12900638/LUCENE-8015-test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16220198",
            "date": "2017-10-26T09:23:14+0000",
            "content": "I looked into it, this similarity ends up doing something like that:\n\n\ndouble tfn = // non-decreasing function of tf\nreturn (tfn * C1) * (C2 / (tfn + 1)); // C1 and C2 are some constants\n\n\n\nThe issue is that even if tfn increases, the result might decrease if tfn * C1 is rounded down and/or C2/(tfn + 1) is rounded up. One way to fix it that I can think of is to make the value of tfn more discrete by doing eg.\n\n\ndiff --git a/lucene/core/src/java/org/apache/lucene/search/similarities/DFRSimilarity.java b/lucene/core/src/java/org/apache/lucene/search/similarities/DFRSimilarity.java\nindex aacd246..554d12f 100644\n--- a/lucene/core/src/java/org/apache/lucene/search/similarities/DFRSimilarity.java\n+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/DFRSimilarity.java\n@@ -108,7 +108,7 @@ public class DFRSimilarity extends SimilarityBase {\n \n   @Override\n   protected double score(BasicStats stats, double freq, double docLen) {\n-    double tfn = normalization.tfn(stats, freq, docLen);\n+    double tfn = (float) normalization.tfn(stats, freq, docLen); // cast to float on purpose to introduce gaps between consecutive values and prevent double rounding errors to make the score decrease when tfn increases\n     return stats.getBoost() *\n         basicModel.score(stats, tfn) * afterEffect.score(stats, tfn);\n   }\n\n\n\n\nOpinions? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16220375",
            "date": "2017-10-26T12:23:14+0000",
            "content": "lets take a step back first. which 3 DFR components are involved? Can you include the test output? ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16220422",
            "date": "2017-10-26T13:24:32+0000",
            "content": "\n   [junit4] <JUnit4> says \u4f60\u597d! Master seed: 86E85958B1183E93\n   [junit4] Executing 1 suite with 1 JVM.\n   [junit4] \n   [junit4] Started J0 PID(22203@localhost).\n   [junit4] Suite: org.apache.lucene.search.similarities.TestBasicModelIne\n   [junit4]   1> 7.0E-45 = score(DFRSimilarity, doc=0, freq=0.99999994), computed from:\n   [junit4]   1>   1.4E-45 = boost\n   [junit4]   1>   3.46341352E16 = NormalizationH1, computed from: \n   [junit4]   1>     0.99999994 = tf\n   [junit4]   1>     2.09433728E9 = avgFieldLength\n   [junit4]   1>     26.0 = len\n   [junit4]   1>   1.03902406E17 = BasicModelIne, computed from: \n   [junit4]   1>     11.0 = numberOfDocuments\n   [junit4]   1>     1.0 = totalTermFreq\n   [junit4]   1>   4.3309873E-17 = AfterEffectB, computed from: \n   [junit4]   1>     3.46341352E16 = tfn\n   [junit4]   1>     1.0 = totalTermFreq\n   [junit4]   1>     1.0 = docFreq\n   [junit4]   1> \n   [junit4]   1> 5.6E-45 = score(DFRSimilarity, doc=0, freq=1.0), computed from:\n   [junit4]   1>   1.4E-45 = boost\n   [junit4]   1>   3.46341374E16 = NormalizationH1, computed from: \n   [junit4]   1>     1.0 = tf\n   [junit4]   1>     2.09433728E9 = avgFieldLength\n   [junit4]   1>     26.0 = len\n   [junit4]   1>   1.03902414E17 = BasicModelIne, computed from: \n   [junit4]   1>     11.0 = numberOfDocuments\n   [junit4]   1>     1.0 = totalTermFreq\n   [junit4]   1>   4.330987E-17 = AfterEffectB, computed from: \n   [junit4]   1>     3.46341374E16 = tfn\n   [junit4]   1>     1.0 = totalTermFreq\n   [junit4]   1>     1.0 = docFreq\n   [junit4]   1> \n   [junit4]   1> DFR I(ne)B1\n   [junit4]   1> field=\"field\",maxDoc=16,docCount=11,sumTotalTermFreq=23037710092,sumDocFreq=1421016222\n   [junit4]   1> term=\"term\",docFreq=1,totalTermFreq=1\n   [junit4]   1> norm=26 (doc length ~ 26)\n   [junit4]   1> freq=1.0\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBasicModelIne -Dtests.method=testRandomScoring -Dtests.seed=86E85958B1183E93 -Dtests.slow=true -Dtests.locale=vi-VN -Dtests.timezone=Pacific/Tongatapu -Dtests.asserts=true -Dtests.file.encoding=UTF8\n   [junit4] FAILURE 3.13s | TestBasicModelIne.testRandomScoring <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: score(0.99999994)=7.0E-45 > score(1.0)=5.6E-45\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([86E85958B1183E93:D7700EAAB6FD899]:0)\n   [junit4]    > \tat org.apache.lucene.search.similarities.BaseSimilarityTestCase.doTestScoring(BaseSimilarityTestCase.java:405)\n   [junit4]    > \tat org.apache.lucene.search.similarities.BaseSimilarityTestCase.testRandomScoring(BaseSimilarityTestCase.java:357)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {field=PostingsFormat(name=Memory)}, docValues:{}, maxPointsInLeafNode=285, maxMBSortInHeap=6.307483399953041, sim=RandomSimilarity(queryNorm=false): {field=IB LL-DZ(0.3)}, locale=vi-VN, timezone=Pacific/Tongatapu\n   [junit4]   2> NOTE: Linux 4.4.0-97-generic amd64/Oracle Corporation 1.8.0_102 (64-bit)/cpus=8,threads=1,free=241459528,total=344457216\n   [junit4]   2> NOTE: All tests run in this JVM: [TestBasicModelIne]\n   [junit4] Completed [1/1 (1!)] in 3.79s, 1 test, 1 failure <<< FAILURES!\n   [junit4] \n   [junit4] \n   [junit4] Tests with failures [seed: 86E85958B1183E93]:\n   [junit4]   - org.apache.lucene.search.similarities.TestBasicModelIne.testRandomScoring\n   [junit4] \n   [junit4] \n   [junit4] JVM J0:     0.40 ..     4.74 =     4.34s\n   [junit4] Execution time total: 4.75 sec.\n   [junit4] Tests summary: 1 suite, 1 test, 1 failure\n\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16220498",
            "date": "2017-10-26T14:19:35+0000",
            "content": "Thanks I will look in. Its hard to debug it specifically without fixing explains first (we really need to do that, then you can \"see\" what goes wrong from test fails like this). Separately the test is inefficient in that this only comes out with beasting many iterations. We should improve the test to more often enumerate edges (e.g. min/max values) that look like this so that its more efficient.\n\nat a glance it looks like small collection with mostly super-huge docs but then one tiny doc. So it may stress some extremes in computations like dl/avgdl type stuff, and expose a hazard in one of the components here. I have to look more... ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16223553",
            "date": "2017-10-28T14:49:13+0000",
            "content": "Maybe the issue is better fixed in after-effect B? Instead of (F+1)/(n * (tf + 1)) we can do (F+1)/n * 1/(tf+1). Keep in mind F and n are presumably large, as they are the term's totalTermFreq and docFreq although not in this particular failure. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16227811",
            "date": "2017-11-01T00:12:36+0000",
            "content": "Two reproducing Jenkins failures, of a different test suite (*In vs. *Ine): first, from https://jenkins.thetaphi.de/job/Lucene-Solr-master-Linux/20789/:\n\n\nChecking out Revision 39376cd8b5ef03b3338c2e8fa31dce732749bcd7 (refs/remotes/origin/master)\n[...]\n   [junit4] Suite: org.apache.lucene.search.similarities.TestBasicModelIn\n   [junit4]   1> 1.27634828E18 = score(DFRSimilarity, doc=0, freq=1.18869171E9), computed from:\n   [junit4]   1>   2.14748365E9 = boost\n   [junit4]   1>   1.18869171E9 = NormalizationZ, computed from: \n   [junit4]   1>     1.18869171E9 = tf\n   [junit4]   1>     6.0234362E8 = avgFieldLength\n   [junit4]   1>     76.0 = len\n   [junit4]   1>   1.18869171E9 = BasicModelIn, computed from: \n   [junit4]   1>     2.0 = numberOfDocuments\n   [junit4]   1>     1.0 = docFreq\n   [junit4]   1>   0.50000006 = AfterEffectB, computed from: \n   [junit4]   1>     1.18869171E9 = tfn\n   [junit4]   1>     1.18869184E9 = totalTermFreq\n   [junit4]   1>     1.0 = docFreq\n   [junit4]   1> \n   [junit4]   1> 1.27634814E18 = score(DFRSimilarity, doc=0, freq=1.18869184E9), computed from:\n   [junit4]   1>   2.14748365E9 = boost\n   [junit4]   1>   1.18869184E9 = NormalizationZ, computed from: \n   [junit4]   1>     1.18869184E9 = tf\n   [junit4]   1>     6.0234362E8 = avgFieldLength\n   [junit4]   1>     76.0 = len\n   [junit4]   1>   1.18869184E9 = BasicModelIn, computed from: \n   [junit4]   1>     2.0 = numberOfDocuments\n   [junit4]   1>     1.0 = docFreq\n   [junit4]   1>   0.5 = AfterEffectB, computed from: \n   [junit4]   1>     1.18869184E9 = tfn\n   [junit4]   1>     1.18869184E9 = totalTermFreq\n   [junit4]   1>     1.0 = docFreq\n   [junit4]   1> \n   [junit4]   1> DFR I(n)BZ(1.4E-45)\n   [junit4]   1> field=\"field\",maxDoc=2,docCount=2,sumTotalTermFreq=1204687257,sumDocFreq=2\n   [junit4]   1> term=\"term\",docFreq=1,totalTermFreq=1188691903\n   [junit4]   1> norm=53 (doc length ~ 76)\n   [junit4]   1> freq=1.18869184E9\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBasicModelIn -Dtests.method=testRandomScoring -Dtests.seed=4210BC5FDD9E3841 -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=pt -Dtests.timezone=AET -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 6.16s J1 | TestBasicModelIn.testRandomScoring <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: score(1.18869171E9)=1.27634828E18 > score(1.18869184E9)=1.27634814E18\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([4210BC5FDD9E3841:C98FE5EDC7E9DE4B]:0)\n   [junit4]    > \tat org.apache.lucene.search.similarities.BaseSimilarityTestCase.doTestScoring(BaseSimilarityTestCase.java:405)\n   [junit4]    > \tat org.apache.lucene.search.similarities.BaseSimilarityTestCase.testRandomScoring(BaseSimilarityTestCase.java:357)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {field=PostingsFormat(name=LuceneVarGapDocFreqInterval)}, docValues:{}, maxPointsInLeafNode=839, maxMBSortInHeap=6.659456353481144, sim=Asserting(org.apache.lucene.search.similarities.AssertingSimilarity@19821e9), locale=pt, timezone=AET\n   [junit4]   2> NOTE: Linux 4.10.0-37-generic i386/Oracle Corporation 1.8.0_144 (32-bit)/cpus=8,threads=1,free=227959720,total=316669952\n\n\n\nAnd from https://jenkins.thetaphi.de/job/Lucene-Solr-master-Linux/20744/ (output below is from my reproduction, since the job output is no longer accessible - git sha is 95d287e):\n\n\n   [junit4] Suite: org.apache.lucene.search.similarities.TestBasicModelIn\n   [junit4]   1> 8.0517238E9 = score(DFRSimilarity, doc=0, freq=1.86950656E9), computed from:\n   [junit4]   1>   1.6103447E9 = boost\n   [junit4]   1>   2.6727952E22 = NormalizationH1, computed from: \n   [junit4]   1>     1.86950656E9 = tf\n   [junit4]   1>     1.4181463E9 = avgFieldLength\n   [junit4]   1>     213016.0 = len\n   [junit4]   1>   1.3363976E23 = BasicModelIn, computed from: \n   [junit4]   1>     79.0 = numberOfDocuments\n   [junit4]   1>     2.0 = docFreq\n   [junit4]   1>   3.7414016E-23 = AfterEffectL, computed from: \n   [junit4]   1>     2.6727952E22 = tfn\n   [junit4]   1> \n   [junit4]   1> 8.0517233E9 = score(DFRSimilarity, doc=0, freq=1.86950669E9), computed from:\n   [junit4]   1>   1.6103447E9 = boost\n   [junit4]   1>   2.6727954E22 = NormalizationH1, computed from: \n   [junit4]   1>     1.86950669E9 = tf\n   [junit4]   1>     1.4181463E9 = avgFieldLength\n   [junit4]   1>     213016.0 = len\n   [junit4]   1>   1.3363977E23 = BasicModelIn, computed from: \n   [junit4]   1>     79.0 = numberOfDocuments\n   [junit4]   1>     2.0 = docFreq\n   [junit4]   1>   3.7414013E-23 = AfterEffectL, computed from: \n   [junit4]   1>     2.6727954E22 = tfn\n   [junit4]   1> \n   [junit4]   1> DFR I(n)L1\n   [junit4]   1> field=\"field\",maxDoc=852,docCount=79,sumTotalTermFreq=112033561766,sumDocFreq=79\n   [junit4]   1> term=\"term\",docFreq=2,totalTermFreq=2487761701\n   [junit4]   1> norm=149 (doc length ~ 213016)\n   [junit4]   1> freq=1.86950669E9\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBasicModelIn -Dtests.method=testRandomScoring -Dtests.seed=56DDF2F2BA9390E3 -Dtests.slow=true -Dtests.locale=cs -Dtests.timezone=Mexico/BajaNorte -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 3.91s | TestBasicModelIn.testRandomScoring <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: score(1.86950656E9)=8.0517238E9 > score(1.86950669E9)=8.0517233E9\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([56DDF2F2BA9390E3:DD42AB40A0E476E9]:0)\n   [junit4]    >        at org.apache.lucene.search.similarities.BaseSimilarityTestCase.doTestScoring(BaseSimilarityTestCase.java:405)\n   [junit4]    >        at org.apache.lucene.search.similarities.BaseSimilarityTestCase.testRandomScoring(BaseSimilarityTestCase.java:357)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n   [junit4]   2> NOTE: test params are: codec=DummyCompressingStoredFields(storedFieldsFormat=CompressingStoredFieldsFormat(compressionMode=DUMMY, chunkSize=4442, maxDocsPerChunk=146, blockSize=5), termVectorsFormat=CompressingTermVectorsFormat(compressionMode=DUMMY, chunkSize=4442, blockSize=5)), sim=Asserting(org.apache.lucene.search.similarities.AssertingSimilarity@146b4f40), locale=cs, timezone=Mexico/BajaNorte\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16230656",
            "date": "2017-11-01T00:29:53+0000",
            "content": "Another reproducing failure, from my Jenkins; it's a different test suite, but looks similar enough to me to comment on this issue:\n\n\nChecking out Revision b44497fdb721fb67c3c8f20dd0a781f6beaaa8a6 (refs/remotes/origin/master)\n[...]\n   [junit4] Suite: org.apache.lucene.search.similarities.TestBasicModelG\n   [junit4]   1> 5.9448525E9 = score(DFRSimilarity, doc=0, freq=0.99999994), computed from:\n   [junit4]   1>   1.98161741E9 = boost\n   [junit4]   1>   1.49336593E16 = NormalizationH1, computed from: \n   [junit4]   1>     0.99999994 = tf\n   [junit4]   1>     1.05701216E9 = avgFieldLength\n   [junit4]   1>     152.0 = len\n   [junit4]   1>   4.4800976E16 = BasicModelG, computed from: \n   [junit4]   1>     12.0 = numberOfDocuments\n   [junit4]   1>     1.0 = totalTermFreq\n   [junit4]   1>   6.6962825E-17 = AfterEffectL, computed from: \n   [junit4]   1>     1.49336593E16 = tfn\n   [junit4]   1> \n   [junit4]   1> 5.944852E9 = score(DFRSimilarity, doc=0, freq=1.0), computed from:\n   [junit4]   1>   1.98161741E9 = boost\n   [junit4]   1>   1.49336603E16 = NormalizationH1, computed from: \n   [junit4]   1>     1.0 = tf\n   [junit4]   1>     1.05701216E9 = avgFieldLength\n   [junit4]   1>     152.0 = len\n   [junit4]   1>   4.480098E16 = BasicModelG, computed from: \n   [junit4]   1>     12.0 = numberOfDocuments\n   [junit4]   1>     1.0 = totalTermFreq\n   [junit4]   1>   6.696282E-17 = AfterEffectL, computed from: \n   [junit4]   1>     1.49336603E16 = tfn\n   [junit4]   1> \n   [junit4]   1> DFR GL1\n   [junit4]   1> field=\"field\",maxDoc=50,docCount=12,sumTotalTermFreq=12684145308,sumDocFreq=12\n   [junit4]   1> term=\"term\",docFreq=1,totalTermFreq=1\n   [junit4]   1> norm=64 (doc length ~ 152)\n   [junit4]   1> freq=1.0\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBasicModelG -Dtests.method=testRandomScoring -Dtests.seed=4B5C3926B202A201 -Dtests.slow=true -Dtests.locale=en-IE -Dtests.timezone=Pacific/Bougainville -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 7.31s J0 | TestBasicModelG.testRandomScoring <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: score(0.99999994)=5.9448525E9 > score(1.0)=5.944852E9\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([4B5C3926B202A201:C0C36094A875440B]:0)\n   [junit4]    > \tat org.apache.lucene.search.similarities.BaseSimilarityTestCase.doTestScoring(BaseSimilarityTestCase.java:405)\n   [junit4]    > \tat org.apache.lucene.search.similarities.BaseSimilarityTestCase.testRandomScoring(BaseSimilarityTestCase.java:357)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {field=PostingsFormat(name=LuceneFixedGap)}, docValues:{}, maxPointsInLeafNode=68, maxMBSortInHeap=6.052983739984725, sim=RandomSimilarity(queryNorm=false): {field=DFR I(ne)B3(800.0)}, locale=en-IE, timezone=Pacific/Bougainville\n   [junit4]   2> NOTE: Linux 4.1.0-custom2-amd64 amd64/Oracle Corporation 1.8.0_77 (64-bit)/cpus=16,threads=1,free=293394976,total=351797248\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16233522",
            "date": "2017-11-01T00:50:26+0000",
            "content": "Thanks Steve: I am not sure if the 3 failures represent just one bug, but its very relevant.\n\nAdrien's suggested fix alone will fix #1 and #3 but not #2. #2 is very clearly the hazard in AfterEffectB that I described (you can see it from the explain). If you combine both of our suggested fixes, all 3 cases will pass.\n\nWe should first maybe make the test more efficient. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16233529",
            "date": "2017-11-01T00:58:09+0000",
            "content": "I tested your last failure of GL2 (#4) and its also covered by adrien's fix. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16233552",
            "date": "2017-11-01T01:28:01+0000",
            "content": "Here is a patch improving the test. It just tries to hit the edge cases with more probability.\n\nIt now seems to generally fail with only 1 or 2 rounds of\n\nant beast -Dbeast.iters=10 -Dtests.class=\"org.apache.lucene.search.similarities.Test*\"\n\n\n\nI'd rather it fail every time of course, but I think its still an improvement. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16233648",
            "date": "2017-11-01T04:45:03+0000",
            "content": "I dug into the I(n) and I(ne) failures here via the new test, their biggest problem is in the BasicModel itself.\n\nThese idf-like functions have the \"log1p\" trap due to the formulas in use. Note their formula is log2((maxDoc + 1) / (x + 0.5)) where x is docFreq for I(n), expected docFreq for I(ne), and totalTermFreq for I(F). So the worst case (e.g. term in every doc) gets even worse as collection size increases, because we take log of values increasingly closer to 1.\n\nBasicModel I(F) never fails because we added a floor in its log: we had to, since it would otherwise go negative when totalTermFreq exceeds maxDoc, which can easily happen. But we should fix the other two in the same way, I think. It does not change retrieval quality in my tests.\n\nIf I floor them to avoid this issue like this, it fixes all their fails here and they survive hundred rounds of beasting by my new test:\n\n--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIn.java\n+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIn.java\n@@ -33,7 +33,7 @@ public class BasicModelIn extends BasicModel {\n   public final double score(BasicStats stats, double tfn) {\n     long N = stats.getNumberOfDocuments();\n     long n = stats.getDocFreq();\n-    return tfn * log2((N + 1) / (n + 0.5));\n+    return tfn * log2(1 + (N + 1) / (n + 0.5));\n   }\n   \n   @Override\n--- a/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIne.java\n+++ b/lucene/core/src/java/org/apache/lucene/search/similarities/BasicModelIne.java\n@@ -34,7 +34,7 @@ public class BasicModelIne extends BasicModel {\n     long N = stats.getNumberOfDocuments();\n     long F = stats.getTotalTermFreq();\n     double ne = N * (1 - Math.pow((N - 1) / (double)N, F));\n-    return tfn * log2((N + 1) / (ne + 0.5));\n+    return tfn * log2(1 + (N + 1) / (ne + 0.5));\n   }\n\n\n\nModel G failures are separate, I have not looked into it yet. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16235668",
            "date": "2017-11-02T12:43:43+0000",
            "content": "+1 to giving it a try ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16277214",
            "date": "2017-12-04T18:34:42+0000",
            "content": "I have been looking into the following model G failure.\n\n\n7.0E-45 = score(DFRSimilarity, doc=0, freq=0.99999994), computed from:\n  1.4E-45 = boost\n  3.09640771E16 = NormalizationH1, computed from: \n    0.99999994 = tf\n    1.61490253E9 = avgFieldLength\n    112.0 = len\n  9.2892231E16 = BasicModelG, computed from: \n    12.0 = numberOfDocuments\n    1.0 = totalTermFreq\n  4.8443234E-17 = AfterEffectB, computed from: \n    3.09640771E16 = tfn\n    1.0 = totalTermFreq\n    1.0 = docFreq\n\n5.6E-45 = score(DFRSimilarity, doc=0, freq=1.0), computed from:\n  1.4E-45 = boost\n  3.09640792E16 = NormalizationH1, computed from: \n    1.0 = tf\n    1.61490253E9 = avgFieldLength\n    112.0 = len\n  9.289224E16 = BasicModelG, computed from: \n    12.0 = numberOfDocuments\n    1.0 = totalTermFreq\n  4.844323E-17 = AfterEffectB, computed from: \n    3.09640792E16 = tfn\n    1.0 = totalTermFreq\n    1.0 = docFreq\n\nDFR GB1\nfield=\"field\",maxDoc=46519,docCount=12,sumTotalTermFreq=19378830951,sumDocFreq=19378830951\nterm=\"term\",docFreq=1,totalTermFreq=1\nnorm=59 (doc length ~ 112)\nfreq=1.0\nNOTE: reproduce with: ant test  -Dtestcase=TestBasicModelG -Dtests.method=testRandomScoring -Dtests.seed=3C22B051C61EEC84 -Dtests.locale=cs-CZ -Dtests.timezone=Atlantic/Madeira -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n\n\nIn short, the scoring formula here looks like (A + B * tfn) * (C / (tfn + 1)) where A, B and C are constants. This function increases when tfn increases when B > A, which is always the case. The problem is that tfn is so large (ulp(tfn) = 4) , that tfn+1 always returns tfn and A + B * tfn always returns the same as B * tfn. So when tfn gets high, the formula is effectively (B * tfn) * (C / tfn). This is a constant, but since we compute the left and right parts independently, this might decrease when tfn increases about half the time.\n\nEven though I triggered it with BasicModelG, I suspect it affects almost all DFRSimilarity impls. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16277325",
            "date": "2017-12-04T19:29:03+0000",
            "content": "thanks for the analysis! I still don't even really want to commit the \"floor\" modifications for In and Ine because i dont like it: really a scoring formula should be able to return a tiny tiny value for a stopword, that should be ok. It shouldnt have to be a number between 1 and 43 or whatever to work with lucene.\n\nFor model IF its justifiable, just like its justifiable in the BM25 case, because the formula is fundamentally broken you know, i mean we dont want negative scores for stopwords.\n\nBut your analysis suggests maybe we can look at a more surgical fix, like a nextUp/nextDown somewhere? ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16277651",
            "date": "2017-12-04T22:27:27+0000",
            "content": "I don't think we can fix this with a nextUp/nextDown? One way we could fix it for sure would be by implementing the basic model and the after effect in a single method. For instance (A + B * tfn) * (C / (tfn + 1)) could be rewritten as (A - B + B * (1 + tfn))) * C / (tfn + 1) = (A - B) * C / (tfn + 1) + B * C. Since there is only one occurrence of tfn in the latter, it would be guaranteed to be non-decreasing when tfn increases. Fixing it in the general case looks challenging however?\n\nMaybe one reasonable way to avoid this issue would be to bound the values that tfn may take? This isn't nice but it wouldn't affect the general case, only when freq, avgdl, or some other stats have extreme values? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16278233",
            "date": "2017-12-05T09:02:17+0000",
            "content": "Given that this bug is not easy to reproduce due to how we finally cast double scores to floats, which often returns the same value for consecutive values of freq, I tried to hack the test framework to compare the produced doubles (see attached patch - note this is for testing purpose only, I don't plan/want to merge it). My assumption is that if we can reproduce the issue with doubles, it means it can happen after a float cast as well, the scorer just needs to produce a value that is close enough from the boundary between two floats so that both values would round to different floats. And indeed tests fail systematically with this patch. The bad news is that I can't think of a way to fix the formula. Even if I put quite severe restrictions on the values that tfn may take, there are still some special freq values that manage to prove the score is not monotonic. Good news is that it doesn't make some other SimilarityBase impls fail like the axiomatic ones. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16278354",
            "date": "2017-12-05T10:29:37+0000",
            "content": "I think our best option is to specialize some combinations. We should be able to specialize basic models G, IF, I and I(ne) with after effects B, L and NoAfterEffect and make them pass tests. For instance, I tested out this specialization of model G and after effect L to make sure it actually passes the tests:\n\n\n/** BasicModel G + AfterEffect L */\npublic class DFRSimilarityGL extends SimilarityBase {\n\n  private final Normalization normalization;\n\n  public DFRSimilarityGL(Normalization normalization) {\n    this.normalization = Objects.requireNonNull(normalization);\n  }\n\n  @Override\n  protected double score(BasicStats stats, double freq, double docLen) {\n    double tfn = normalization.tfn(stats, freq, docLen);\n\n    // approximation only holds true when F << N, so we use lambda = F / (N + F)\n    double F = stats.getTotalTermFreq() + 1;\n    double N = stats.getNumberOfDocuments();\n    double lambda = F / (N + F);\n\n    // -log(1 / (lambda + 1)) -> log(lambda + 1)\n    double A = log2(lambda + 1);\n    double B = log2((1 + lambda) / lambda);\n\n    // basic model G uses (A + B * tfn)\n    // after effect L takes the result and divides it by (1 + tfn)\n    // so in the end we have (A + B * tfn) / (1 + tfn)\n    // which we change to B - (B - A) / (1 + tfn) to reduce floating-point accuracy issues\n    // (since tfn appears only once it is guaranteed to be non decreasing with tfn\n    return B - (B - A) / (1 + tfn);\n  }\n\n  @Override\n  public String toString() {\n    return \"DFR GL\" + normalization.toString();\n  }\n\n}\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16278646",
            "date": "2017-12-05T14:46:16+0000",
            "content": "Adrien it should reproduce every time with the test changes i made on this issue? Its just a bug in the test that it doesn't explicitly test the extremes but instead relies on randomness. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16278667",
            "date": "2017-12-05T14:54:51+0000",
            "content": "I think I like the proposed solution. Lets drop NoAfterEffect though, i'm not sure its even theoretical: I don't see it in the DFR paper (http://theses.gla.ac.uk/1570/1/2003amatiphd.pdf). That would yield 8 solid combinations which seems manageable. There are also some \"+1\"'s that maybe are no longer necessary (I don't know if it makes this task easier, just mentioning it: LUCENE-8023)  ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16278722",
            "date": "2017-12-05T15:24:40+0000",
            "content": "Adrien it should reproduce every time with the test changes i made on this issue?\n\nIt doesn't because the fact we always compute scores as doubles then cast to a float hides the issue: even if score the score of Math.nextDown(freq) is more than the score of freq, the float cast rounds both values to the same float almost all the time. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16280427",
            "date": "2017-12-06T16:27:37+0000",
            "content": "If we are fine with removing support for NoAfterEffect, maybe we could change the contract of AfterEffect to return the product of the after effect with (1+tfn), which has the nice property of not depending on tfn for both B and L. It makes the internal API less nice but has the benefit of keeping the basic model and after effect plugged in separately, similarly to the Terrier API.\n\nThe attached patch implements this idea and removes after effects BE, D and P, which I couldn't fix to produce scores that do not decrease when tfn increases. Tests pass for all combinations of the DFRSimilarity with this patch. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16280508",
            "date": "2017-12-06T17:01:48+0000",
            "content": "Took a glance, I am good with this approach, thank you! I would like to combine your patch with my test patch (attached to this issue) though, because it makes the test much better for all sims not just this particular case by exercising the extremes explicitly. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16280590",
            "date": "2017-12-06T18:01:25+0000",
            "content": "Commit 63b63c573487fe6b054afb6073c057a88a15288f in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=63b63c5 ]\n\nLUCENE-8015: Fixed DFR similarities' scores to not decrease when tfn increases. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16280612",
            "date": "2017-12-06T18:18:35+0000",
            "content": "Done, I combined both patches and beasting didn't find any failures so I merged. Thank you! ",
            "author": "Adrien Grand"
        }
    ]
}