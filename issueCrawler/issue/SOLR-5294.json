{
    "id": "SOLR-5294",
    "title": "Pluggable Dictionary Implementation for Suggester",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "SearchComponents - other"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "It would be nice to have the option of plugging in Dictionary implementations for the suggester to consume, like that of the lookup implementation that allows users to specify which lucene suggesters to use. \n\nThis would allow easy addition of new dictionary implementations that the lucene suggesters can consume. New implementations of dictionary like (https://issues.apache.org/jira/browse/LUCENE-5251) could be easily added. I believe this would give the users more control on what they what their lucene suggesters to consume.\n\nFor the implementation, the user can add a new setting in the spellcomponent in the solrconfig. The new setting would be a string identifying the class path of the dictionary implementation to be used (very similar to the existing lookupImpl). This setting would be used to call the relevant DictionaryFactory.\n\nA sample solrconfig file would look as follows (note the new \"dictionaryImpl\" setting):\n\n  <searchComponent class=\"solr.SpellCheckComponent\" name=\"fuzzy_suggest_analyzing_with_lucene_dict\">\n    <lst name=\"spellchecker\">\n      <str name=\"name\">fuzzy_suggest_analyzing_with_lucene_dict</str>\n      <str name=\"classname\">org.apache.solr.spelling.suggest.Suggester</str>\n      <str name=\"lookupImpl\">org.apache.solr.spelling.suggest.fst.FuzzyLookupFactory</str>\n      <str name=\"dictionaryImpl\">org.apache.solr.spelling.suggest.LuceneDictionaryFactory</str> <!-- new setting -->\n      <str name=\"storeDir\">fuzzy_suggest_analyzing</str>\n      <str name=\"buildOnCommit\">false</str>\n\n      <!-- Suggester properties -->\n      <bool name=\"exactMatchFirst\">true</bool>\n      <str name=\"suggestAnalyzerFieldType\">text</str>\n      <bool name=\"preserveSep\">false</bool>\n      <str name=\"field\">stext</str>\n    </lst>",
    "attachments": {
        "SOLR-5294.patch": "https://issues.apache.org/jira/secure/attachment/12606221/SOLR-5294.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Areek Zillur",
            "id": "comment-13783473",
            "date": "2013-10-01T23:29:25+0000",
            "content": "Initial patch with tests.\n\n\tadded DictionaryFactories for existing Dictionary Implementations (FileDictionary, LuceneDictionary and HighFrequencyDictionary)\n\tif no dictionaryImpl is provided, fall back to the defaults like before\n\tminor refactoring of the Suggester\n\n "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13787960",
            "date": "2013-10-07T07:01:29+0000",
            "content": "Updated patch (diff instead of git commits) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13789003",
            "date": "2013-10-08T07:15:08+0000",
            "content": "Thanks Areek, a few ideas:\n\n\tShould we name the DictionaryFactoryBase something better (SuggestDictionary? SpellingDictionary?)\n\tShould we think about fixing the spellchecker stuff too (which seems to have totally separate implementations like FileBased and so on to just change the dictionary, thoguh I am not sure if we want to keep spell and suggest entangled?)\n\tMaybe we can simplify the base plugin class to suit more use cases, like remove the setCore() and just check if it implements CoreAware interface? I think it would be ideal if we could eliminate the additional hierarchy of FileBased* and IndexBased*: couldnt the FileBased impl just take its filename in via a parameter in params, and IndexBased take its fieldname in params the same way, and we push up create(IndexSearcher) to the base plugin class (the file-based just wouldnt use the indexsearcher argument).\n\n "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13790105",
            "date": "2013-10-09T07:06:12+0000",
            "content": "Thanks for reviewing this, Robert!\n\n\nShould we think about fixing the spellchecker stuff too (which seems to have totally separate implementations like FileBased and so on to just change the dictionary\nThis is an interesting point! After looking through the AbstractLuceneSpellChecker and all its implementations, it seems like it would be better to refactor those out too. I feel like that should be considered for the dictionaryImpl setting to work as expected. \n\n\nI am not sure if we want to keep spell and suggest entangled?\nIt does make sense to untangle them, but I think that by itself is a bigger issue (I will open up an issue about that and will be happy to work on that)\n\n\nShould we name the DictionaryFactoryBase something better (SuggestDictionary? SpellingDictionary?)\nGiven the situation, it seems like the dictionary plugin will be shared among both suggest and spelling; maybe call it DictionaryFactory?\n\n\nMaybe we can simplify the base plugin class to suit more use cases, like remove the setCore() and just check if it implements CoreAware interface?\nThat sounds good to me.\n\n\nI think it would be ideal if we could eliminate the additional hierarchy of FileBased* and IndexBased*: couldnt the FileBased impl just take its filename in via a parameter in params, and IndexBased take its fieldname in params the same way, and we push up create(IndexSearcher) to the base plugin class (the file-based just wouldnt use the indexsearcher argument).\nThe reason for having the hierarchy was to separate out the two major types of dictionaries (index and file-based). I can change that but at the cost of reduced enforcement.\n\nI will upload another patch, incorporating your feedback! "
        },
        {
            "author": "Areek Zillur",
            "id": "comment-13831162",
            "date": "2013-11-25T03:38:51+0000",
            "content": "See SOLR-5378 for using pluggable dictionary in (new) SolrSuggester "
        }
    ]
}