{
    "id": "LUCENE-7920",
    "title": "Make it easier to create ip prefix queries",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Won't Fix",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [],
        "fix_versions": []
    },
    "description": "InetAddress.getByAddress automatically transforms ipv6-mapped ipv4 addresses to ipv4 addresses. While this is usually desirable, it can make ip prefix query a bit trappy. For instance the following code:\n\n\nInetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"::ffff:0:0\"), 96);\n\n\n\nthrows an IAE complaining that the prefix length is invalid: illegal prefixLength '96'. Must be 0-32 for IPv4 ranges, 0-128 for IPv6 ranges.",
    "attachments": {
        "LUCENE-7920.patch": "https://issues.apache.org/jira/secure/attachment/12880615/LUCENE-7920.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16116315",
            "date": "2017-08-07T09:22:43+0000",
            "content": "Here is a proposal that adds an expert factory method that directly takes the binary representation of the address rather than an InetAddress instance. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16117325",
            "date": "2017-08-07T21:20:43+0000",
            "content": "I'm concerned this is really the right thing to do: because these are in fact ipv4 addresses (just with a different representation).\n\nthe spirit of the RFC is kind of against it here: https://www.ietf.org/rfc/rfc4038.txt\n\n\n   However, IPv6 applications must not be required to distinguish\n   \"normal\" and \"NAT-PT translated\" addresses (or any other kind of\n   special addresses, including the IPv4-mapped IPv6 addresses): This\n   would be completely impractical, and if the distinction must be made,\n   it must be done elsewhere (e.g., kernel, system libraries).\n\nAlso, taking raw byte[] here looks very error prone. at the very least it would need checks that the byte[] is of the correct length (32 or 128 bits only), etc etc. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16117586",
            "date": "2017-08-08T00:01:33+0000",
            "content": "If we decide to do this we should think about the method signature too, because newPrefixQuery(String,byte[],int) is not much different than newPrefixQuery(String,InetAddress,int), just some overloading with the same name. Null is not allowed so its not too bad, but we should still avoid if there is an easy way, e.g. different method name or something. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16117588",
            "date": "2017-08-08T00:03:09+0000",
            "content": "And i would duplicate the null checks so that exception messages are still good, e.g. IAE(\"InetAddress must not be null\") vs IAE(\"addressBytes must not be null\"). It would just be an impl detail that one method calls the other one. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16118385",
            "date": "2017-08-08T14:26:32+0000",
            "content": "I think there are multiple ways that we could address the problem:\n 1. Reject prefix queries on ipv6-mapped ipv4 addresses since they introduce a corner case. However we can't do it in Lucene since the ip address is already parsed, so we cannot distinguish ipv4 addresses from ipv6-mapped ipv4 addresses, so we have to assume that applications take care of this special case.\n 2. Add a new method to query the binary representation of ip addresses directly (what the patch does for now, your suggestions would make it better).\n 3. Change all methods to take a String instead of an InetAddress object as an ip address. This way we could know whether the prefix length assumes a length of 32 or 128 bits.\n\nSomething I like about 3 is that it moves some complexity from the user end to our end: even with option 2 users may still use the InetAddress-based prefix query factory method without knowing about its potential corner cases. I'm wondering what you think about it? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16118483",
            "date": "2017-08-08T15:37:38+0000",
            "content": "I agree its an interesting idea, but i am worried about accepting strings for #3 because its impossible to prevent someone from passing in hostnames unless you write your own IP parsing and validation.\n\nI am 100% sure that we should not be doing DNS here. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16118486",
            "date": "2017-08-08T15:38:36+0000",
            "content": "And again, i think this is all a lot of complexity that goes against the spirit of the RFC. E.g. a non-feature. I would prefer we keep things simple. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16118497",
            "date": "2017-08-08T15:47:29+0000",
            "content": "I agree its an interesting idea, but i am worried about accepting strings for #3 because its impossible to prevent someone from passing in hostnames unless you write your own IP parsing and validation.\n\nFYI, UAX29URLEmailTokenizerImpl.jflex does IP parsing. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16118506",
            "date": "2017-08-08T15:51:24+0000",
            "content": "I am all for keeping things simple but I'd like to remove the trappiness that running InetAddressPoint.newPrefixQuery(\"a\", InetAddress.getByName(\"::ffff:0:0\"), 24); might not do what you think it does? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16118507",
            "date": "2017-08-08T15:52:05+0000",
            "content": "True, but I think it only does recognition, correct? To \"parse\" in this case means going to a byte[] and involves ipv6 address decompression and other complexity.\n\nI just still argue its a non-feature to do an ipv6 prefix query on an ipv4 address  ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16118515",
            "date": "2017-08-08T15:57:08+0000",
            "content": "\nFYI, UAX29URLEmailTokenizerImpl.jflex does IP parsing.\nTrue, but I think it only does recognition, correct? To \"parse\" in this case means going to a byte[] and involves ipv6 address decompression and other complexity.\n\nRight. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16130107",
            "date": "2017-08-17T08:46:47+0000",
            "content": "OK let's not do anything then. ",
            "author": "Adrien Grand"
        }
    ]
}