{
    "id": "SOLR-2014",
    "title": "Allow BF parameter to accept complex nested expressions with whitespace sprinkled throughout",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Modify the parsing of the boost function parameter (BF) to allow for whitespace throughout.  This is useful for a couple of reasons.  The first is more intuitive configuration, but the larger is to allow nested boost functions.  By allowing for nesting of the boost function various forms of caching, normalizing and other modification are possible.",
    "attachments": {
        "SOLR-2014.patch": "https://issues.apache.org/jira/secure/attachment/12450376/SOLR-2014.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ivan Small",
            "id": "comment-12891888",
            "date": "2010-07-24T00:36:40+0000",
            "content": "Modifies the boost function parsing to utilize use the QueryParsing.StrParser class.  This class has been modified slightly to parse nested expressions.  The boost functions use this for extracting general parenthetical expressions that also allow for inner quote expressions.  The unit tests have also been expanded to test for general and as many corner cases as I could think of. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12970894",
            "date": "2010-12-13T16:54:23+0000",
            "content": "Ivan: thanks for your patch.\n\nas noted in, SOLR-2267, In my option, now that we have LocalParams the \"bf\" param should be deprecated and removed in place of just using the \"boost\" or \"bq\" param - \"bf=...\" is functionally equivalent to \"bq=\n{!func}\n...\"\n\nThe only reason i can think of why you might explicitly want bf is if you have been using solr since the stone ages, and have really old clients with hardcoded queries and you want the legacy semantics of splitting on whitespace to get multiple function boosts.\n\nCan you think of any major advantages \"bf\" has over \"bq\" moving forward? "
        },
        {
            "author": "Ivan Small",
            "id": "comment-12971502",
            "date": "2010-12-15T00:47:51+0000",
            "content": "I wrote this patch for Zvents, a local search company.  The purpose behind cleaning up the parsing was to allow for more complex nested expressions.  These were used in a couple of ways, but the most important was to simply cache the document boost in much the same was as a Lucene Field cache.  \n\nAbout 80% of the queries for local search do not incorporate text.  It's mostly based on the 3-tuple [location, time, popularity].  This makes the boosting function very complicated and expensive, subsequently making caching absolutely required.  There are almost certainly other ways of doing this, but simply adding a nested function was the easiest and least invasive for me.  It did require that we improve the parsing.  Once in place, we found other uses for this nesting.  We used it for auditioning of new content.  This in essence boils down to modifying the document boost by some random element to give strong candidates a chance to generate popularity for themselves.  It's easy to implement by applying a function to the combined document boost score.\n\nI'm not sure how this functionality would be supported by bq and LocalParams.  An additional comment suggesting possible mechanisms would be great appreciated.    "
        },
        {
            "author": "Tri Cao",
            "id": "comment-13407749",
            "date": "2012-07-06T07:07:21+0000",
            "content": "Any update on this issue? Note that this will help with edismax handler configuration. "
        }
    ]
}