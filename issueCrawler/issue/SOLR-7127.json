{
    "id": "SOLR-7127",
    "title": "Add method to CloudSolrClient to create per-collection clients",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Won't Fix",
        "priority": "Minor"
    },
    "description": "CloudSolrClient isn't thread-safe if you're making requests to multiple collections, because defaultCollection is mutable.  This can be a pain if you're trying to index into multiple collections from a single queue of documents.\n\nThis issue adds a .getCollectionClient(String) method to CloudSolrClient that returns a child client directed at that collection.  Under the hood it's another CloudSolrClient sharing it's resources with the parent client, but with a separate default collection set.  The method returns a SolrClient, however, so you can't then change the collection unless you explicitly cast it.\n\nSort of related to what I wanted to do on SOLR-6894, but this is more focussed.",
    "attachments": {
        "SOLR-7127.patch": "https://issues.apache.org/jira/secure/attachment/12699656/SOLR-7127.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-19T12:39:42+0000",
            "author": "Alan Woodward",
            "content": "Patch. ",
            "id": "comment-14327352"
        },
        {
            "date": "2015-02-19T20:17:28+0000",
            "author": "Shawn Heisey",
            "content": "This is a really interesting idea, especially if the child clients have very low overhead.  I will review the patch when I have a few moments of personal time ... I hope it's something I can understand.\n\nIt actually is currently possible to have fully thread-safe CloudSolrClient usage with multiple collections, but the responsibility of choosing a collection is on the request instead of the client.  This is reasonably straightforward for queries (just add a collection parameter to the query object), but the incantations required for updates and other types of requests are not at all intuitive. ",
            "id": "comment-14328056"
        },
        {
            "date": "2015-02-20T10:24:01+0000",
            "author": "Alan Woodward",
            "content": "Improved the test to check that closing child clients doesn't affect any of their siblings or the parent client.  This caught that the executor service wasn't being shared, so I fixed that as well.\n\nThe child clients should be very lightweight - all objects that take up resources (thread pool, httpclient, etc) are shared with the parent.\n\n... possible to have fully thread-safe CloudSolrClient usage ...\n\nI'd disagree with this.  \"Thread-safe as long as you do X\" means \"not thread-safe\" IMHO... ",
            "id": "comment-14328784"
        },
        {
            "date": "2015-02-20T15:58:57+0000",
            "author": "Mark Miller",
            "content": "CloudSolrClient isn't thread-safe if you're making requests to multiple collections, because defaultCollection is mutable.\n\ndefaultCollection is of course not meant to be changed - it would be called just collection if it was - it's just meant to be set and then you override what collection to use per request. It's only not a constructor arg to avoid constructor hell. We make this simple tradeoff in many places - it's often preferable to constructors with tons of params and alternate versions or over complicated builder patterns. You see the same thing on most of the SolrClient impls.\n\nAnyway, are we sure this whole parent / child / juggle lots of clients is really better than adding some new methods that allow passing the collection to use? ",
            "id": "comment-14329088"
        },
        {
            "date": "2015-02-20T16:30:53+0000",
            "author": "Steve Molloy",
            "content": "Anyway, are we sure this whole parent / child / juggle lots of clients is really better than adding some new methods that allow passing the collection to use?\n\nI agree, having a single instance on which to call request(req, collection) which would set collection param in request before sending to normal request(req) sound much more simple and reduces the number of actual live objects at the same time. ",
            "id": "comment-14329128"
        },
        {
            "date": "2015-02-20T16:59:13+0000",
            "author": "Alan Woodward",
            "content": "I did look at adding a 'collection' parameter to request, but the problem there is that you'd end up having to add an optional 'collection' parameter to the 25 or so sugar methods on SolrClient that eventually delegate through to request().\n\nI don't think this impl is that complicated though? ",
            "id": "comment-14329161"
        },
        {
            "date": "2015-02-20T17:23:07+0000",
            "author": "Shawn Heisey",
            "content": "It's been a long time and I don't remember many details, but I did once look at extending everything in CloudSolrServer so that the user could easily indicate which collection they wanted to work on.  I abandoned that idea because it would have led to an explosion in the API that would have simply been unacceptable.\n\nStill haven't had that time to review the patch, but the IDEA expressed here is a whole lot cleaner than anything I have thought of.  I really like it. ",
            "id": "comment-14329210"
        },
        {
            "date": "2015-02-20T17:43:16+0000",
            "author": "Shawn Heisey",
            "content": "After a quick glance, paying particular attention to the newly added methods, I have a couple of questions/comments:\n\n\n\tAlthough it's private, I think the new constructor should have javadoc explaining what it does and why it exists.  The parameter named \"parent\" is a REALLY big clue, but this is going to very likely be around for years, and time makes everything fuzzy.  A code review will make the reason apparent, but comments always make that go faster.\n\tShould the getCollectionClient method verify that the named collection exists and throw a runtime error if it doesn't?  I can foresee a possible situation where somebody might initialize code that creates a client for a collection that won't exist until later (through some kind of \"disable\" feature that won't actually try to use that client right away), but I think there's a lot of value to the idea of failing fast & hard when you have the capability (via the zookeeper connection) of verifying the input immediately.\n\n ",
            "id": "comment-14329241"
        },
        {
            "date": "2015-02-20T22:42:31+0000",
            "author": "Alan Woodward",
            "content": "\n\tjavadoc is a good idea, will add some\n\tI'm not sure it's worth checking that a collection exists before creating the client.  After all, somebody might come in and delete it between the client being created and it being used anyway.\n\n ",
            "id": "comment-14329693"
        },
        {
            "date": "2015-02-20T23:00:42+0000",
            "author": "Shawn Heisey",
            "content": "I'm not sure it's worth checking that a collection exists before creating the client. After all, somebody might come in and delete it between the client being created and it being used anyway.\n\nIf a valid collection gets deleted that way, then the requests would fail after the deletion.\n\nAt the risk of complicating the API, perhaps a boolean value could be added to the constructor signature, indicating whether or not the existence of the collection should be checked?  I understand completely if you don't want to do this, it just seems like a good idea to this peanut gallery of one.  ",
            "id": "comment-14329717"
        },
        {
            "date": "2015-02-20T23:09:46+0000",
            "author": "Shawn Heisey",
            "content": "Thinking out loud:  If defaultCollection were changed to final, would that get around the original visibility problem that required making it volatile?  It would make it impossible to change it after setting it once, which would give the programmer a clue that they are trying to use it in a way that's inconsistent with the intent. ",
            "id": "comment-14329726"
        },
        {
            "date": "2015-02-21T00:55:12+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "I like this idea, two comments:\n\n\tShouldn't public SolrClient getCollectionClient(String collection) return a CloudSolrClient instead? will the user need CloudSolrClient-specific methods (like public void setIdField(String idField) )\n\tShould we try to deal with actions on the child clients that affect the parents (and all other created childs), like public void setParser(ResponseParser processor)\n\n ",
            "id": "comment-14329870"
        },
        {
            "date": "2015-02-21T01:36:28+0000",
            "author": "Shawn Heisey",
            "content": "Should we try to deal with actions on the child clients that affect the parents (and all other created childs)\n\nCalling methods in the child object that affect the parent is something that should be discouraged, even when it would work properly.  It might be a good idea to set a flag in the new constructor to indicate 'this' is a child client, and then for each method in CloudSolrClient, think about whether a child client should be able to use that method.  If not, throw an exception when the method is called and the child flag is set.  This is actually an argument in favor of returning SolrClient, because the abstract class won't have access to any of the implementation-specific methods without casting.\n\nShouldn't public SolrClient getCollectionClient(String collection) return a CloudSolrClient instead?\n\nFor the reason just mentioned, as well as user code that is trying to be as generic as possible, I think that returning the abstract class is correct.  If we determine that any cloud-specific methods are safe to call on a child, and the dev is absolutely sure what they're dealing with, their code can cast the object to CloudSolrClient before calling those methods.\n\nA quick glance says that there probably are some setter methods that should be allowed on child clients. ",
            "id": "comment-14329903"
        },
        {
            "date": "2015-02-21T05:52:24+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Calling methods in the child object that affect the parent is something that should be discouraged\nYes, that's what I meant. There are some dangerous calls that can affect \"sibling\" clients. \nFor the reason just mentioned, as well as user code that is trying to be as generic as possible\nYes, both of my comments are kind of related and pulling in opposite directions. I do see people trying to use methods like setIdField(String idField), which don't necessary need to be restricted (it's local to the client ,even for a child), and for that they'll cast the responded client.  ",
            "id": "comment-14330013"
        },
        {
            "date": "2015-02-21T21:24:45+0000",
            "author": "Alan Woodward",
            "content": "I'd missed get/setIdField(), which I guess is something that you might want to change (although that really ought to be part of the Router config, but hey - one issue at a time...)\n\nHow about instead of returning a vanilla SolrClient, we return a CollectionSolrClient, which is an extension of CloudSolrClient with all the setters overridden to throw UnsupportedOperationException.  That also makes it easier to track whether or not we should close resources, etc. ",
            "id": "comment-14330441"
        },
        {
            "date": "2015-02-22T01:16:40+0000",
            "author": "Shawn Heisey",
            "content": "How about instead of returning a vanilla SolrClient, we return a CollectionSolrClient, which is an extension of CloudSolrClient with all the setters overridden to throw UnsupportedOperationException.\n\nThis sounds like a good idea.  Rather than complicate CloudSolrClient, use inheritance to wrangle whatever needs to behave differently into its own class, keeping the parent clean. Should the new class name include \"Cloud\"?  It is a cloud client, so maybe the name should reflect that.  I'm not going to be insistent on this ... the shorter name that you came up with is very good, I just thought I'd mention it for discussion. ",
            "id": "comment-14331980"
        },
        {
            "date": "2015-02-23T13:44:45+0000",
            "author": "Steve Molloy",
            "content": "How about instead of returning a vanilla SolrClient, we return a CollectionSolrClient, which is an extension of CloudSolrClient with all the setters overridden to throw UnsupportedOperationException. That also makes it easier to track whether or not we should close resources, etc.\nI think it would be better to extend SolrClient and expose methods that make sense instead of CloudSolrClient and having a bunch of methods that simply throw exceptions. I like the idea of having a CollectionSolrClient (or whatever other name that makes sense), but exposing a bunch of methods simply throwing exceptions is counter-intuitive for people using the API. ",
            "id": "comment-14333316"
        },
        {
            "date": "2015-02-23T16:01:49+0000",
            "author": "Mark Miller",
            "content": "I did look at adding a 'collection' parameter to request, but the problem there is that you'd end up having to add an optional 'collection' parameter to the 25 or so sugar methods on SolrClient that eventually delegate through to request().\n\nIt's a bunch more simple sugar methods, but from a user point of view, things are very simple.\n\nI don't think this impl is that complicated though?\n\nSeems a bit complicated to me that you have to spawn off special child objects to talk to multiple collections. \n\nAs a user, rather than learning a peculiar new API or thinking about and juggling parent / child resource objects and lifecycles and separate API's, you really want to be able to just say, when you are adding an individual doc, doing an individual optimize, or sending an individual delete, use this collection instead of the default. ",
            "id": "comment-14333425"
        },
        {
            "date": "2015-02-23T16:45:15+0000",
            "author": "Shawn Heisey",
            "content": "As a user, rather than learning a peculiar new API or thinking about and juggling parent / child resource objects and lifecycles and separate API's, you really want to be able to just say, when you are adding an individual doc, doing an individual optimize, or sending an individual delete, use this collection instead of the default.\n\nThat is indeed what I would like to do, but adding dozens of methods to the API seemed like something that would immediately get a -1 ... or I would have already put forth a patch. ",
            "id": "comment-14333487"
        },
        {
            "date": "2015-02-23T17:05:13+0000",
            "author": "Shawn Heisey",
            "content": "The alternate idea \u2013 simply modify the existing methods with an additional parameter, seemed like it would be even less welcome.  Such a change might have been OK in 5.0.0 ... but now that we are back to minor releases, I'm not sure we could get it done. ",
            "id": "comment-14333517"
        },
        {
            "date": "2015-02-23T19:28:11+0000",
            "author": "Alan Woodward",
            "content": "There's sufficient pushback here that I'm going to mark this as Won't Fix.  I'll open another issue to look at adding collection parameters to the SolrClient API. ",
            "id": "comment-14333694"
        },
        {
            "date": "2015-02-23T23:17:49+0000",
            "author": "Mark Miller",
            "content": "I'm not really pushing back myself - if others agree this is the right approach, I'm not looking to block it - just inject my opinion. ",
            "id": "comment-14334065"
        },
        {
            "date": "2015-02-23T23:38:37+0000",
            "author": "Alan Woodward",
            "content": "I think there's sufficient disagreement that it's worth looking at another approach.  And if that doesn't work, well, we can just reopen this one. ",
            "id": "comment-14334089"
        },
        {
            "date": "2015-02-25T13:46:38+0000",
            "author": "Alan Woodward",
            "content": "I opened SOLR-7155 to try adding collection parameters to the SolrClient API ",
            "id": "comment-14336484"
        }
    ]
}