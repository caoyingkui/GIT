{
    "id": "LUCENE-6578",
    "title": "Geo3d: arcDistanceToShape() method may be useful",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/spatial"
        ],
        "labels": "",
        "fix_versions": [
            "5.3"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "I've got an application that seems like it may need the ability to compute a new kind of arc distance, from a GeoPoint to the nearest edge/point of a GeoShape.  Adding this method to the interface, and corresponding implementations, would increase the utility of the package for ranking purposes.",
    "attachments": {
        "LUCENE-6578-dws.patch": "https://issues.apache.org/jira/secure/attachment/12742868/LUCENE-6578-dws.patch",
        "LUCENE-6578.patch": "https://issues.apache.org/jira/secure/attachment/12742001/LUCENE-6578.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14592135",
            "author": "Karl Wright",
            "date": "2015-06-18T17:19:26+0000",
            "content": "Preliminary patch with the code changes desired, but no tests yet.\n\nTests will be included in an updated patch.\n "
        },
        {
            "id": "comment-14592316",
            "author": "Karl Wright",
            "date": "2015-06-18T18:55:34+0000",
            "content": "Patch against updated trunk, with tests added. "
        },
        {
            "id": "comment-14592318",
            "author": "Karl Wright",
            "date": "2015-06-18T18:57:05+0000",
            "content": "The patch also fixes a place where we did not take the planet model into account, but should have, during the computation of linear distances. "
        },
        {
            "id": "comment-14593258",
            "author": "Karl Wright",
            "date": "2015-06-19T09:29:06+0000",
            "content": "David Smiley: I am done with this patch. It should apply against the trunk version of geo3d.\n\nFWIW, this feature is not one that I believe spatial4j currently supports, but it's one that we find very useful for post-search ranking. "
        },
        {
            "id": "comment-14594187",
            "author": "David Smiley",
            "date": "2015-06-20T00:29:03+0000",
            "content": "Sounds cool, Karl.  It's kinda crunch time for me right now to get some work done but I'll get to this eventually but not soon. "
        },
        {
            "id": "comment-14600687",
            "author": "David Smiley",
            "date": "2015-06-25T04:51:33+0000",
            "content": "I took a brief look.  Wow this patch is big.  But it contains a lot of repetition, that will make maintenance harder.  One type of repetition is the Javadocs.  If a superclass/interface defines a method, then put javadocs only there and don't copy-paste to each implementing class (unless there's truly something unique to say).  The other type of repetition is the distance algorithm between several added methods of most instances of any particular shape instance.  For example I see the same method with method calls changed from \"normalDistance\" to \"normalDistanceSquared\" but otherwise appears identical.  Can you please think of a way to approach this with less repetition and thus more maintainability?  Also, a few of these added methods might have suitable default implementations in a superclass, like computeOutsideSquaredNormalDistance(Geopoint pt) to simply call by x,y,z. "
        },
        {
            "id": "comment-14600831",
            "author": "Karl Wright",
            "date": "2015-06-25T07:51:26+0000",
            "content": "For example I see the same method with method calls changed from \"normalDistance\" to \"normalDistanceSquared\" but otherwise appears identical. Can you please think of a way to approach this with less repetition and thus more maintainability?\n\nThe whole purpose of having multiple distance metrics is performance.  These computations are expected to be used at document scoring time.  Saving even a single expensive sqrt is important in that context, which is why the implementations look as they do.\n\nObject creation for the purposes of reducing code \"duplication according to pattern\" is also a bad idea for the same reason.  Object creation would be required for any kind of more complete code-sharing approach.\n\nMapping the xxx(GeoPoint pt) to xxx(x,y,z), though, is something doable and I will look into it.  I will also remove the javadoc, although I find it odd that that would be considered important for Lucene.\n "
        },
        {
            "id": "comment-14601015",
            "author": "Karl Wright",
            "date": "2015-06-25T11:15:13+0000",
            "content": "Michael McCandless: I'd also like your opinion as to whether I should remove javadoc from methods that implement an interface; this seems questionable to me.  Does lucene have a best practice for this kind of thing? "
        },
        {
            "id": "comment-14601103",
            "author": "Karl Wright",
            "date": "2015-06-25T12:38:01+0000",
            "content": "Revised patch cutting back on the size of the diff. "
        },
        {
            "id": "comment-14601109",
            "author": "Michael McCandless",
            "date": "2015-06-25T12:50:41+0000",
            "content": "Karl Wright we generally don't repeat the javadocs if it's just the same thing that the interface had in the javadocs for that method ... "
        },
        {
            "id": "comment-14601110",
            "author": "Michael McCandless",
            "date": "2015-06-25T12:51:11+0000",
            "content": "But I don't think that should block committing this!  Such improvements can be made later ... "
        },
        {
            "id": "comment-14601112",
            "author": "Karl Wright",
            "date": "2015-06-25T12:53:29+0000",
            "content": "Thanks, I will keep that in mind for the future. "
        },
        {
            "id": "comment-14601115",
            "author": "Karl Wright",
            "date": "2015-06-25T12:55:53+0000",
            "content": "I stripped the comments out and introduced a full abstract base class hierarchy so we could do at least minimal code sharing. There are downsides but they aren't severe.  Let's see what David says. "
        },
        {
            "id": "comment-14601154",
            "author": "David Smiley",
            "date": "2015-06-25T13:26:53+0000",
            "content": "I'm not in a hurry to commit anything that has this amount of code redundancy \u2013 sorry.  Now is the time to address it; not in an inevitable future issue.  Apparently Mike feels differently.  It's great seeing reduced redundant javadocs in the latest patch \u2013 thanks.  By the way, new patches should generally be named the same in JIRA.   \n\nKarl, a specific idea that would reduce the code here a ton is a simple interface like:\n\ninterface DistCalculator {\n  double calcDistance(x, y, z);\n}\n\n\nThen each shape needs... perhaps just a single method taking this?  There would be no extra object allocation per distance run. "
        },
        {
            "id": "comment-14601197",
            "author": "Karl Wright",
            "date": "2015-06-25T13:37:08+0000",
            "content": "So, I don't understand how introduction of a single interface can somehow create six distance methods in every object?  Without any additional object creation?  Can you please be more specific?\n "
        },
        {
            "id": "comment-14601207",
            "author": "Karl Wright",
            "date": "2015-06-25T13:44:56+0000",
            "content": "Also, FWIW, it's rather timeconsuming to make multiple iterative little tweaky changes to every single shape class.  It's much much better to arrive at a solution that is acceptable before I go off and code anything else.  So please, let us do that rather than waste my time any further. "
        },
        {
            "id": "comment-14601243",
            "author": "Karl Wright",
            "date": "2015-06-25T14:09:35+0000",
            "content": "Ok, the nearest thing I can think of to what you may be suggesting is as follows:\n\n\n\ta distance calculator interface, with methods for computing plane distance and point distance\n\tsix implementations of that interface, one for linear, normal, linear squared, normal squared, and arc\n\tGeoOutsideDistance then has two methods: one for GeoPoint + distcalcinterface and one for (x,y,z) + distcalcinterface\n\n\n\nDavid Smiley Is that what you were talking about? "
        },
        {
            "id": "comment-14601276",
            "author": "Karl Wright",
            "date": "2015-06-25T14:35:12+0000",
            "content": "The distance calculator interface would look then like this:\n\n\npublic interface DistanceStyle {\n  \n  /** Compute the distance from a point to another point.\n   * @param point1 Starting point\n   * @param point2 Final point\n   * @return the distance\n   */\n  public double computeDistance(final GeoPoint point1, final GeoPoint point2);\n  \n  /** Compute the distance from a point to another point.\n   * @param point1 Starting point\n   * @param x2 Final point x\n   * @param y2 Final point y\n   * @param z2 Final point z\n   * @return the distance\n   */\n  public double computeDistance(final GeoPoint point1, final double x2, final double y2, final double z2);\n\n  /** Compute the distance from a plane to a point.\n   * @param planetModel The planet model\n   * @param plane The plane\n   * @param point The point\n   * @return the distance\n   */\n  public double computeDistance(final PlanetModel planetModel, final Plane plane, final GeoPoint point);\n  \n  /** Compute the distance from a plane to a point.\n   * @param planetModel The planet model\n   * @param plane The plane\n   * @param x The point x\n   * @param y The point y\n   * @param z The point z\n   * @return the distance\n   */\n  public double computeDistance(final PlanetModel planetModel, final Plane plane, final double x, final double y, final double z);\n\n}\n\n\n "
        },
        {
            "id": "comment-14601535",
            "author": "David Smiley",
            "date": "2015-06-25T16:58:58+0000",
            "content": "Also, FWIW, it's rather timeconsuming to make multiple iterative little tweaky changes to every single shape class. It's much much better to arrive at a solution that is acceptable before I go off and code anything else. So please, let us do that rather than waste my time any further.\n\nYes definitely.  I hope I'm not wasting your time.  I like that you've posted some code here to discuss rather than fully integrating it which would take more time and may need to be done again if there's feedback.\n\nOk, the nearest thing I can think of to what you may be suggesting is as follows:\n\nYes, this is basically what I had in mind.  I'm curious why the GeoPoint & x/y/z methods are duplicated; is it because some distance algorithms could leverage lat/lon being pre-calculated on GeoPoint?  If so, that makes sense.  Might you consider another interface name that doesn't have \"Style\"... DistanceType perhaps?  When I think \"Style\" I think formatting.  But it's not important (obviously). "
        },
        {
            "id": "comment-14601552",
            "author": "Michael McCandless",
            "date": "2015-06-25T17:13:24+0000",
            "content": "I'm not in a hurry to commit anything that has this amount of code redundancy \u2013 sorry. Now is the time to address it; not in an inevitable future issue. Apparently Mike feels differently.\n\nPlease don't over-read into my comments. I haven't looked at this patch at all yet.\n\nI was simply responding directly to Karl's question \"should @Override of an interface method have its own javadocs\": generally they should not, unless the impl has something different to document, but that this should not block committing an otherwise good change. "
        },
        {
            "id": "comment-14601577",
            "author": "Michael McCandless",
            "date": "2015-06-25T17:27:07+0000",
            "content": "I've only glanced at the patch so far, but abstractions are hard to get right until a given API has seen a lot of usage, and I feel like spatial module already has too many levels of abstraction now, so I think the disagreement here is good evidence that geo3d should live in sandbox for starters, where it's free to be more \"sandy\", it can more freely iterate / change its abstractions, etc. "
        },
        {
            "id": "comment-14601618",
            "author": "Karl Wright",
            "date": "2015-06-25T17:46:42+0000",
            "content": "I'm curious why the GeoPoint & x/y/z methods are duplicated\n\nIt's because I want to avoid creating a GeoPoint object simply to compute a distance.  We could have just the x,y,z versions of the methods, but having the GeoPoint variant is convenient to have as well. "
        },
        {
            "id": "comment-14601620",
            "author": "Michael McCandless",
            "date": "2015-06-25T17:47:54+0000",
            "content": "I've looked at the patch a bit more and it already adds an interface (GeoOutsideDistance) for these new methods?\n\nWhy should we make the abstractions even deeper (adding DistanceStyle/DistanceType)?  I think all the abstractions the spatial module already has (even in its test cases) make it very hard to approach for newcomers ... I don't think we should pollute geo3d in the same way?  Abstractions are costly, and we should err towards \"too few abstractions\" when unsure.\n\nI'll open an issue to move geo3d to sandbox ... I think this is a better home for it for now, letting users know it's very new and APIs are subject to change, and letting Karl Wright make faster iterations to it.  It would also un-block issues like LUCENE-6480 ... I think a postings and BKD tree integration based on geo3d would be very powerful. "
        },
        {
            "id": "comment-14601621",
            "author": "Karl Wright",
            "date": "2015-06-25T17:48:07+0000",
            "content": "I'm open to this, as soon as this patch is done and committed.\nI hope to have something late today or early tomorrow that should address David's current concerns, except perhaps his concern about choice of interface name. "
        },
        {
            "id": "comment-14601638",
            "author": "Michael McCandless",
            "date": "2015-06-25T18:01:15+0000",
            "content": "I'll open an issue to move geo3d to sandbox \n\nI opened LUCENE-6607. "
        },
        {
            "id": "comment-14601662",
            "author": "Karl Wright",
            "date": "2015-06-25T18:16:23+0000",
            "content": "Attaching revision (yes, I know I should just replace the patch, but people seem to want to compare patches as well as examine the patch itself) "
        },
        {
            "id": "comment-14601736",
            "author": "David Smiley",
            "date": "2015-06-25T18:57:40+0000",
            "content": "Aha; makes sense.  I guess I'm just wondering if the GeoPoint convenience method need only be on the shape then? "
        },
        {
            "id": "comment-14601748",
            "author": "David Smiley",
            "date": "2015-06-25T19:03:31+0000",
            "content": "Please don't over-read into my comments. I haven't looked at this patch at all yet.\n\nOkay sorry. "
        },
        {
            "id": "comment-14601780",
            "author": "David Smiley",
            "date": "2015-06-25T19:25:31+0000",
            "content": "I sympathize with Michael McCandless's point on GeoOutsideDistance; perhaps instead the methods could go on GeoShape, and then a shape that doesn't support them could throw UnsupportedOperationException.  I have no strong opinion either way.  Any way, it's \"Progress not perfection\", ehh Mike?\n\nOne thing abstractions can do, is reduce code duplication.  The interface \"DistanceStyle\" does exactly that \u2013 there are many ways to compute a distance spatially.  This change reduced the patch file by ~40%.  Does anyone argue this specific change was anything less than an improvement?\n\nAttaching revision (yes, I know I should just replace the patch, but people seem to want to compare patches as well as examine the patch itself)\n\nI'll look at your patch tonight.  FYI JIRA does not overwrite patches by the same name; each one is available.  See LUCENE-6191 for an example. "
        },
        {
            "id": "comment-14602184",
            "author": "Karl Wright",
            "date": "2015-06-26T00:34:07+0000",
            "content": "This patch revamps GeoDistance as well as GeoOutsideDistance methods. "
        },
        {
            "id": "comment-14602549",
            "author": "Karl Wright",
            "date": "2015-06-26T08:16:14+0000",
            "content": "Less expensive GeoPath distance computation. "
        },
        {
            "id": "comment-14602943",
            "author": "Michael McCandless",
            "date": "2015-06-26T14:30:34+0000",
            "content": "One thing abstractions can do, is reduce code duplication. The interface \"DistanceStyle\" does exactly that \u2013 there are many ways to compute a distance spatially. This change reduced the patch file by ~40%. Does anyone argue this specific change was anything less than an improvement?\n\nCode duplication is not the only metric that matters, and 40% reduction LOC is a fluffed up metric ... how much smaller is it if we just remove the duplicate javadocs?\n\nIn this particular case, I'm not sure I like the new abstraction, but I really do not understand enough to make an informed decision.  Can someone succinctly explain what DistanceStyle abstraction represents?  This is a burden every newcomer to the geo3d APIs must grapple with / overcome.\n\nIt seems like Karl Wright and David Smiley are happy with this change so I won't block it but I don't really like it.  I think there should be a higher bar for inventing new abstractions in the absence of actual usage of a new API. "
        },
        {
            "id": "comment-14603156",
            "author": "David Smiley",
            "date": "2015-06-26T16:41:06+0000",
            "content": "This patch is definitely improved; nice job Karl!  I'd like to improve it further and get your opinion \u2013 I'll post your patch as the base and then a revised one on ReviewBoard so you can easily see the delta and comment on specifics if you choose to.  It's a fair amount of code to examine so I won't get to it until tonight starting 11pm.  If you post further updates today before 11pm then I'll use that.\n\nA couple things I want to mention now:\n\n(1) the choice of \"ArcDistance.INSTANCE\" as a means of referring to the a distance.  It's fine but I prefer the approach in Lucene's FilteredQuery in which the choices are referred via named constants, like FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY.  This avoids seeing \"INSTANCE\".  Taking that approach here would mean having a DistanceStyle.ARC_DISTANCE or perhaps just \"DistanceStyle.ARC\".  What do you think?\n\n(2) GeoPath.distance() has an implementation that confused me until I realized what it was doing... and I realized that wasn't what came to mind when I saw the distance method.  Perhaps this method should be named distanceAlongPath and further document that it's from the beginning? "
        },
        {
            "id": "comment-14603190",
            "author": "Karl Wright",
            "date": "2015-06-26T17:00:09+0000",
            "content": "the choice of \"ArcDistance.INSTANCE\" as a means of referring to the a distance. It's fine but I prefer the approach in Lucene's FilteredQuery in which the choices are referred via named constants, like FilteredQuery.RANDOM_ACCESS_FILTER_STRATEGY. This avoids seeing \"INSTANCE\". Taking that approach here would mean having a DistanceStyle.ARC_DISTANCE or perhaps just \"DistanceStyle.ARC\". What do you think?\n\nWhy not support both?  The current strategy is eminently extensible, which is what I like about it.\n\nGeoPath.distance() has an implementation that confused me until I realized what it was doing... and I realized that wasn't what came to mind when I saw the distance method. Perhaps this method should be named distanceAlongPath and further document that it's from the beginning?\n\nI construed this as a generic \"internal distance\" method, which is how it's used in my employer's application.  Removing the genericism would bust that application.  So I prefer to leave this the way it is, thanks. "
        },
        {
            "id": "comment-14603203",
            "author": "Karl Wright",
            "date": "2015-06-26T17:04:29+0000",
            "content": "Can someone succinctly explain what DistanceStyle abstraction represents?\n\nThere are various different ways of compute a distance metric.  Each DistanceStyle implementation is one such way.  We support:\n\n\tArcDistance (accurate angular distance)\n\tNormalDistance (perpendicular to a plane/line through the center of the earth)\n\tLinearDistance (straight chord distance)\n\tNormalSquaredDistance (the square of the normal distance)\n\tLinearSquaredDistance (the square of the linear distance)\n\n\n\nThe latter two methods are helpful because they require no square roots, so if you need a fast distance estimate, that's what you'd use.  I can also imagine adding new distance types in the future, for example SurfaceDistance (which is the expensive ellipsoidal surface distance metric).\n\nHope this helps. "
        },
        {
            "id": "comment-14604002",
            "author": "David Smiley",
            "date": "2015-06-27T06:04:49+0000",
            "content": "Why not support both? The current strategy is eminently extensible, which is what I like about it.\n\nSure; +1.\n\nI construed this as a generic \"internal distance\" method, which is how it's used in my employer's application. Removing the genericism would bust that application. So I prefer to leave this the way it is, thanks.\n\nOkay; this can be handled with javadocs that explain how this shape implements computeDistance.\n\nI went to apply your patch but ran into some issues in doing so:\n\n\tThe patch shows a class was renamed (GeoBaseShape to BasePlanetObject), yet the patch's reference to the file does so in a way that doesn't seem right.  The \"Index:\" line should show the old name, the \"---\" line should also show the old name, and the \"+++\" line should show the new name.  In your patch, all 3 have the old name.  This definitely confused IntelliJ, and I expect it would confuse ReviewBoard too. I hand-edited the patch to change the first two to the old name and that worked.  How are you generating the patch?\n\tThe patch shows GeoBaseMembershipShape (newly added) as extending GeoBaseShape, yet that can\u2019t be since GeoBaseShape should now be named BasePlanetObject.  I hand edited it to be BasePlanetObject; but this didn't give me a warm and fuzzy that this patch file is ready for me to work with. ...\n\tGeoCircle.getBounds couldn't figure out how to call super.getBounds because there is no superclass implementing that method, just the interface.\n\n\n\nCan you provide a better patch Karl?  Was your code compiling at the time you generated the patch? "
        },
        {
            "id": "comment-14604091",
            "author": "Karl Wright",
            "date": "2015-06-27T10:06:40+0000",
            "content": "Code compiles fine and was produced by svn diff.\n\nNot sure how I can fix this.\n\nSent from my Windows Phone\nFrom: David Smiley (JIRA)\nSent: 6/27/2015 2:05 AM\nTo: dev@lucene.apache.org\nSubject: [jira] [Commented] (LUCENE-6578) Geo3d: arcDistanceToShape()\nmethod may be useful\n\n    [ https://issues.apache.org/jira/browse/LUCENE-6578?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=14604002#comment-14604002\n]\n\nDavid Smiley commented on LUCENE-6578:\n--------------------------------------\n\nWhy not support both? The current strategy is eminently\nextensible, which is what I like about it.\n\nSure; +1.\n\nI construed this as a generic \"internal distance\" method, which is\nhow it's used in my employer's application. Removing the genericism\nwould bust that application. So I prefer to leave this the way it is,\nthanks.\n\nOkay; this can be handled with javadocs that explain how this shape\nimplements computeDistance.\n\nI went to apply your patch but ran into some issues in doing so:\n\n\tThe patch shows a class was renamed (GeoBaseShape to\nBasePlanetObject), yet the patch's reference to the file does so in a\nway that doesn't seem right.  The \"Index:\" line should show the old\nname, the \"---\" line should also show the old name, and the \"+++\" line\nshould show the new name.  In your patch, all 3 have the old name.\nThis definitely confused IntelliJ, and I expect it would confuse\nReviewBoard too. I hand-edited the patch to change the first two to\nthe old name and that worked.  How are you generating the patch?\n\tThe patch shows GeoBaseMembershipShape (newly added) as extending\nGeoBaseShape, yet that can\u2019t be since GeoBaseShape should now be named\nBasePlanetObject.  I hand edited it to be BasePlanetObject; but this\ndidn't give me a warm and fuzzy that this patch file is ready for me\nto work with. ...\n\tGeoCircle.getBounds couldn't figure out how to call super.getBounds\nbecause there is no superclass implementing that method, just the\ninterface.\n\n\n\nCan you provide a better patch Karl?  Was your code compiling at the\ntime you generated the patch?\n\n\n\n\n\u2013\nThis message was sent by Atlassian JIRA\n(v6.3.4#6332)\n\n---------------------------------------------------------------------\nTo unsubscribe, e-mail: dev-unsubscribe@lucene.apache.org\nFor additional commands, e-mail: dev-help@lucene.apache.org "
        },
        {
            "id": "comment-14604092",
            "author": "Karl Wright",
            "date": "2015-06-27T10:06:40+0000",
            "content": "Perhaps try applying the patch with svn patch??\n\nSent from my Windows Phone\nFrom: David Smiley (JIRA)\nSent: 6/27/2015 2:05 AM\nTo: dev@lucene.apache.org\nSubject: [jira] [Commented] (LUCENE-6578) Geo3d: arcDistanceToShape()\nmethod may be useful\n\n    [ https://issues.apache.org/jira/browse/LUCENE-6578?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=14604002#comment-14604002\n]\n\nDavid Smiley commented on LUCENE-6578:\n--------------------------------------\n\nWhy not support both? The current strategy is eminently\nextensible, which is what I like about it.\n\nSure; +1.\n\nI construed this as a generic \"internal distance\" method, which is\nhow it's used in my employer's application. Removing the genericism\nwould bust that application. So I prefer to leave this the way it is,\nthanks.\n\nOkay; this can be handled with javadocs that explain how this shape\nimplements computeDistance.\n\nI went to apply your patch but ran into some issues in doing so:\n\n\tThe patch shows a class was renamed (GeoBaseShape to\nBasePlanetObject), yet the patch's reference to the file does so in a\nway that doesn't seem right.  The \"Index:\" line should show the old\nname, the \"---\" line should also show the old name, and the \"+++\" line\nshould show the new name.  In your patch, all 3 have the old name.\nThis definitely confused IntelliJ, and I expect it would confuse\nReviewBoard too. I hand-edited the patch to change the first two to\nthe old name and that worked.  How are you generating the patch?\n\tThe patch shows GeoBaseMembershipShape (newly added) as extending\nGeoBaseShape, yet that can\u2019t be since GeoBaseShape should now be named\nBasePlanetObject.  I hand edited it to be BasePlanetObject; but this\ndidn't give me a warm and fuzzy that this patch file is ready for me\nto work with. ...\n\tGeoCircle.getBounds couldn't figure out how to call super.getBounds\nbecause there is no superclass implementing that method, just the\ninterface.\n\n\n\nCan you provide a better patch Karl?  Was your code compiling at the\ntime you generated the patch?\n\n\n\n\n\u2013\nThis message was sent by Atlassian JIRA\n(v6.3.4#6332)\n\n---------------------------------------------------------------------\nTo unsubscribe, e-mail: dev-unsubscribe@lucene.apache.org\nFor additional commands, e-mail: dev-help@lucene.apache.org "
        },
        {
            "id": "comment-14604102",
            "author": "Karl Wright",
            "date": "2015-06-27T10:34:42+0000",
            "content": "I applied my own patch to a fresh checkout of trunk, and had to add BasePlanetObject by hand afterwards.  So then I regenerated this patch; hopefully it works this time. "
        },
        {
            "id": "comment-14604208",
            "author": "Michael McCandless",
            "date": "2015-06-27T15:43:26+0000",
            "content": "Maybe you just need to add the --show-copies-as-adds command-line option when running svn diff? "
        },
        {
            "id": "comment-14604402",
            "author": "Michael McCandless",
            "date": "2015-06-27T22:28:00+0000",
            "content": "bq, There are various different ways of compute a distance metric. \n\nThanks for the explanation Karl Wright ... it sounds like the added abstraction is indeed warranted. "
        },
        {
            "id": "comment-14604538",
            "author": "David Smiley",
            "date": "2015-06-28T05:20:31+0000",
            "content": "This is good now; thanks.  GeoBaseShape actually stays (it wasn't renamed), so that clarifies my confusion when I tried to fix the patch. "
        },
        {
            "id": "comment-14604664",
            "author": "Karl Wright",
            "date": "2015-06-28T12:49:45+0000",
            "content": "So no need to submit another patch? "
        },
        {
            "id": "comment-14604668",
            "author": "David Smiley",
            "date": "2015-06-28T13:00:58+0000",
            "content": "Right. I'll post an update tonight hopefully. I worked on it last night some.  "
        },
        {
            "id": "comment-14607558",
            "author": "David Smiley",
            "date": "2015-06-30T06:03:55+0000",
            "content": "FYI I posted to ReviewBoard so that my edits can be seen clearly: https://reviews.apache.org/r/36035/\n\nOne observation I had, perhaps not introduced in this issue, is that GeoPoint.magnitude() should always be 1.0 when using the sphere planet model yet the GeoPoint itself doesn't \"know\" that.  So it goes and computes the Math.sqrt and it's cached.  I'm not sure if it's worthwhile, in some issue other than this of course, exploring if GeoPoint should have a unit-sphere subclass different from the non-unit sphere subclass.  Just a thought. "
        },
        {
            "id": "comment-14608617",
            "author": "David Smiley",
            "date": "2015-06-30T16:29:58+0000",
            "content": "This is the patch I posted to ReviewBoard, and Karl accepted it.  It's mostly about reducing code duplication around duplicate isWithin or some other methods that are overloaded with GeoPoint or Vector.  I moved common implementations to base classes, and I added a Java 8 default method.  To make back-porting easier I don't leverage the existence of that method; we might change that at a later point.  I also eliminated redundant javadocs where I saw them.  I also found/fixed some equals/hashcode problems \u2013 notably SidedPlane was missing them.\n\nSuggested CHANGES.txt:\n\n* LUCENE-6578: Geo3D can now compute the distance from a point to a shape, both\n  inner distance and to an outside edge. Multiple distance algorithms are\n  available.  (Karl Wright, David Smiley)\n\n\n\nI'll commit this later today unless there are objections. "
        },
        {
            "id": "comment-14609447",
            "author": "ASF subversion and git services",
            "date": "2015-07-01T02:03:44+0000",
            "content": "Commit 1688545 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1688545 ]\n\nLUCENE-6578: Geo3D: compute the distance from a point to a shape. "
        },
        {
            "id": "comment-14609456",
            "author": "ASF subversion and git services",
            "date": "2015-07-01T02:16:57+0000",
            "content": "Commit 1688546 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1688546 ]\n\nLUCENE-6578: Geo3D: compute the distance from a point to a shape. "
        },
        {
            "id": "comment-14609460",
            "author": "David Smiley",
            "date": "2015-07-01T02:19:53+0000",
            "content": "FYI during the 5x backport I had to add the isWithin(Vector) implementation to a couple of the classes which had depended on the Java 8 default method.  No big deal.\n\nThanks for this feature Karl! "
        },
        {
            "id": "comment-14713187",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:01+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}