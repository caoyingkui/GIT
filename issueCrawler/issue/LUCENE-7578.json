{
    "id": "LUCENE-7578",
    "title": "UnifiedHighlighter: Convert PhraseHelper to use SpanCollector API",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": []
    },
    "description": "The PhraseHelper of the UnifiedHighlighter currently collects position-spans per SpanQuery (and it knows which terms are in which SpanQuery), and then it filters PostingsEnum based on that.  It's similar to how the original Highlighter WSTE works.  The main problem with this approach is that it can be inaccurate for some nested span queries \u2013 LUCENE-2287, LUCENE-5455 (has the clearest example), LUCENE-6796.  Non-nested SpanQueries (e.g. that which is converted from a PhraseQuery or MultiPhraseQuery) are not a problem.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15709615",
            "date": "2016-11-30T20:01:50+0000",
            "content": "disclaimer: I'm merely filing this issue at this time; no time to do it.\n\nPerhaps a separate issue or do here as well if it would be overall less work than separate: Instead of PhraseHelper filtering a provided PostingsEnum, I think it should produce one OffsetsEnum per top level SpanQuery.  A redesigned half rewritten PhraseHelper that uses the SpanCollector API could do this in the same amount of code whereas trying to change the current design to do this would add a lot of complexity, I think.  The outcome would improve passage relevancy for position-sensitive clauses, I think.  It could be further tweaked such that some SpanQueries (namely those converted from PhraseQuery) yield one virtual position (with earliest startOffset and last endOffset) instead of exposing each word position separately.  That would eliminate intra-phrase highlight delimiters, and it would probably indirectly improve passage relevancy too.  The reported freq() would be the smallest freq of the provided terms.  Also, the move to this design would eliminate the position span caching going on in PhraseHelper. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15709795",
            "date": "2016-11-30T21:14:42+0000",
            "content": "Some care would have to be taken with spans, especially with significant slop.  It's arguably worse to have a single highlight across it.  But otherwise, this definitely is a desired improvement. ",
            "author": "Timothy M. Rodriguez"
        },
        {
            "id": "comment-15709804",
            "date": "2016-11-30T21:19:54+0000",
            "content": "Yes definitely; I didn't mention slop but we should only expose a virtual single position if slop is 0; perhaps configurable. Exposing a single virtual position seems like a separate issue too. ",
            "author": "David Smiley"
        }
    ]
}