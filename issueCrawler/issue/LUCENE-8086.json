{
    "id": "LUCENE-8086",
    "title": "G3d wrapper: Improve circles for non spherical planets",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [
            "modules/spatial-extras"
        ],
        "fix_versions": [
            "7.3"
        ]
    },
    "description": "Hi David Smiley,\n\nThe purpose of this ticket is to add a new circle shape (GeoExactCircle) for non-spherical planets and therefore remove the method relate from Geo3dCircleShape. The patch will include some simplifications on the wrapper and some refactoring of the tests.\n\nI will open shortly a pull request.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16283735",
            "date": "2017-12-08T15:39:04+0000",
            "content": "GitHub user iverase opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/288\n\n    LUCENE-8086\n\n    Here are the changes, in particular:\n\n\n\tGeo3dFactory: Use GeoExactCircle for non-spherical planets.\n\tGeo3dCircleShape: Remove method relate.\n\tGeo3DShape: Use new factory method for building GeoBbox from bounds object.\n\tGeo3dDistanceCalculator: use pointonbearing from planet model.\n\tTest refactoring\n\n\n\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/iverase/lucene-solr master\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/288.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #288\n\n\ncommit 73d9ce324b217c633ae72b24233099dd2afc43d5\nAuthor: iverase <ivera@eso.org>\nDate:   2017-12-08T15:33:22Z\n\n    LUCENE-8086\n\n ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16283848",
            "date": "2017-12-08T17:09:02+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155821440\n\n    \u2014 Diff: lucene/spatial-extras/src/java/org/apache/lucene/spatial/spatial4j/Geo3dShapeFactory.java \u2014\n    @@ -55,6 +55,13 @@\n       private SpatialContext context;\n       private PlanetModel planetModel;\n\n    +  /**\n    +   * Default accuracy for circles when not using the unit sphere.\n    +   * It is equivalent to 10m on the surface of the earth.\n    +   */\n    +  private static double DEFAULT_CIRCLE_ACCURACY = 1.6e-6;\n    \u2014 End diff \u2013\n\n    should be final ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16283849",
            "date": "2017-12-08T17:09:02+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155826399\n\n    \u2014 Diff: lucene/spatial-extras/src/java/org/apache/lucene/spatial/spatial4j/Geo3dCircleShape.java \u2014\n    @@ -67,16 +64,4 @@ public Point getCenter() {\n         }\n         return center;\n       }\n    -\n    \u2014 End diff \u2013\n\n    Yay ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16283850",
            "date": "2017-12-08T17:09:02+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155822689\n\n    \u2014 Diff: lucene/spatial-extras/src/java/org/apache/lucene/spatial/spatial4j/Geo3dShapeFactory.java \u2014\n    @@ -150,10 +176,21 @@ public Rectangle rect(double minX, double maxX, double minY, double maxY) {\n\n       @Override\n       public Circle circle(double x, double y, double distance) {\n\n\tGeoCircle circle = GeoCircleFactory.makeGeoCircle(planetModel,\n\ty * DistanceUtils.DEGREES_TO_RADIANS,\n\tx * DistanceUtils.DEGREES_TO_RADIANS,\n\tdistance * DistanceUtils.DEGREES_TO_RADIANS);\n    +    GeoCircle circle;\n    +    if (planetModel.ab == planetModel.c) {\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    Should there be a method on planetModel that more descriptively characterizes the condition?  (e.g. isSpherical?)  Just a suggestion; perhaps not if it's too hard to give an appropriate name.  If not then maybe add a comment here so we know what \"ab\" being equal to \"c\" means. ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16283851",
            "date": "2017-12-08T17:09:03+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155824604\n\n    \u2014 Diff: lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase.java \u2014\n    @@ -155,16 +107,12 @@ protected Geo3dShape generateRandomShape(Point nearP) \n{\n               ulhcPoint = lrhcPoint;\n               lrhcPoint = temp;\n             }\n\n\tfinal GeoBBox shape = GeoBBoxFactory.makeGeoBBox(planetModel, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n\tlrhcPoint.getY() * DEGREES_TO_RADIANS,\n\tulhcPoint.getX() * DEGREES_TO_RADIANS,\n\tlrhcPoint.getX() * DEGREES_TO_RADIANS);\n\treturn new Geo3dShape(shape, ctx);\n    +        return (Geo3dShape<?>) ctx.getShapeFactory().rect(lrhcPoint, ulhcPoint);\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    change is good but the variable names are wrong.  `rect(lowerLeft, upperRight)` ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16283852",
            "date": "2017-12-08T17:09:03+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155826444\n\n    \u2014 Diff: lucene/spatial-extras/src/java/org/apache/lucene/spatial/spatial4j/Geo3dDistanceCalculator.java \u2014\n    @@ -73,62 +74,20 @@ public boolean within(Point from, double toX, double toY, double distance) {\n\n       @Override\n       public Point pointOnBearing(Point from, double distDEG, double bearingDEG, SpatialContext ctx, Point reuse) {\n\n\t// Algorithm using Vincenty's formulae (https://en.wikipedia.org/wiki/Vincenty%27s_formulae)\n\t// which takes into account that planets may not be spherical.\n\t//Code adaptation from http://www.movable-type.co.uk/scripts/latlong-vincenty.html\n         Geo3dPointShape geoFrom = (Geo3dPointShape) from;\n         GeoPoint point = (GeoPoint) geoFrom.shape;\n\tdouble lat = point.getLatitude();\n\tdouble lon = point.getLongitude();\n         double dist = DistanceUtils.DEGREES_TO_RADIANS * distDEG;\n         double bearing = DistanceUtils.DEGREES_TO_RADIANS * bearingDEG;\n    -\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    Yay ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16283853",
            "date": "2017-12-08T17:09:03+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155825386\n\n    \u2014 Diff: lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase.java \u2014\n    @@ -16,29 +16,15 @@\n      */\n     package org.apache.lucene.spatial.spatial4j;\n\n    -import java.util.ArrayList;\n    -import java.util.List;\n    -\n    -import org.apache.lucene.spatial3d.geom.GeoPath;\n    -import org.apache.lucene.spatial3d.geom.GeoPolygon;\n    +import org.junit.Rule;\n    +import org.junit.Test;\n     import org.locationtech.spatial4j.TestLog;\n     import org.locationtech.spatial4j.context.SpatialContext;\n    -import org.locationtech.spatial4j.distance.DistanceUtils;\n     import org.locationtech.spatial4j.shape.Circle;\n     import org.locationtech.spatial4j.shape.Point;\n     import org.locationtech.spatial4j.shape.RectIntersectionTestHelper;\n    -import org.apache.lucene.spatial3d.geom.LatLonBounds;\n    \u2014 End diff \u2013\n\n    If I get this right, you've removed the Geo3D dependencies of this test.  Yet it's still named to be Geo3d? ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16283854",
            "date": "2017-12-08T17:09:03+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155822251\n\n    \u2014 Diff: lucene/spatial-extras/src/java/org/apache/lucene/spatial/spatial4j/Geo3dShapeFactory.java \u2014\n    @@ -67,6 +74,25 @@ public SpatialContext getSpatialContext() \n{\n         return context;\n       }\n\n    +  /**\n    +   * Set the accuracy for circles.\n    +   *\n    +   * \"Accuracy\" is defined as the maximum linear distance between any point on the\n    +   * surface circle and planes that describe the circle. Therefore on WSG84, since the\n    +   * radius of earth is 6,371,000 meters, an accuracy of 1e-6 corresponds to 6.3 meters.\n    +   * For an accuracy of 1.0 meters, the value of 1.6e-7.\n    +   *\n    +   * The default value is set to 10m (1.6e-6).\n    +   *\n    +   * Note that accuracy has no effect when the planet model is a sphere. In that case circles\n    +   * are always fully precise.\n    +   *\n    +   * @param circleAccuracy the provided accuracy as a linear distance.\n    \u2014 End diff \u2013\n\n    by \"linear distance\" do you mean decimal degrees as is used in other parts of the Spatial4j API? If so please say \"decimal degrees\".  If not, perhaps it should be in that unit? ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16283985",
            "date": "2017-12-08T18:32:32+0000",
            "content": "Github user iverase commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155843390\n\n    \u2014 Diff: lucene/spatial-extras/src/java/org/apache/lucene/spatial/spatial4j/Geo3dShapeFactory.java \u2014\n    @@ -67,6 +74,25 @@ public SpatialContext getSpatialContext() \n{\n         return context;\n       }\n\n    +  /**\n    +   * Set the accuracy for circles.\n    +   *\n    +   * \"Accuracy\" is defined as the maximum linear distance between any point on the\n    +   * surface circle and planes that describe the circle. Therefore on WSG84, since the\n    +   * radius of earth is 6,371,000 meters, an accuracy of 1e-6 corresponds to 6.3 meters.\n    +   * For an accuracy of 1.0 meters, the value of 1.6e-7.\n    +   *\n    +   * The default value is set to 10m (1.6e-6).\n    +   *\n    +   * Note that accuracy has no effect when the planet model is a sphere. In that case circles\n    +   * are always fully precise.\n    +   *\n    +   * @param circleAccuracy the provided accuracy as a linear distance.\n    \u2014 End diff \u2013\n\n    I need to ask Karl Wright if that is what it means, but I guess so. I will update accordingly. ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16283991",
            "date": "2017-12-08T18:35:02+0000",
            "content": "Github user iverase commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155843938\n\n    \u2014 Diff: lucene/spatial-extras/src/java/org/apache/lucene/spatial/spatial4j/Geo3dShapeFactory.java \u2014\n    @@ -150,10 +176,21 @@ public Rectangle rect(double minX, double maxX, double minY, double maxY) {\n\n       @Override\n       public Circle circle(double x, double y, double distance) {\n\n\tGeoCircle circle = GeoCircleFactory.makeGeoCircle(planetModel,\n\ty * DistanceUtils.DEGREES_TO_RADIANS,\n\tx * DistanceUtils.DEGREES_TO_RADIANS,\n\tdistance * DistanceUtils.DEGREES_TO_RADIANS);\n    +    GeoCircle circle;\n    +    if (planetModel.ab == planetModel.c) {\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    I think spatial3d is a low level library in that respect, so it shouldn't have such a method. Karl Wright has the last word, comment would be fine    ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16283993",
            "date": "2017-12-08T18:35:39+0000",
            "content": "Github user iverase commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155844074\n\n    \u2014 Diff: lucene/spatial-extras/src/java/org/apache/lucene/spatial/spatial4j/Geo3dShapeFactory.java \u2014\n    @@ -55,6 +55,13 @@\n       private SpatialContext context;\n       private PlanetModel planetModel;\n\n    +  /**\n    +   * Default accuracy for circles when not using the unit sphere.\n    +   * It is equivalent to 10m on the surface of the earth.\n    +   */\n    +  private static double DEFAULT_CIRCLE_ACCURACY = 1.6e-6;\n    \u2014 End diff \u2013\n\n    Indeed! ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16283996",
            "date": "2017-12-08T18:36:23+0000",
            "content": "Github user iverase commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155844229\n\n    \u2014 Diff: lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase.java \u2014\n    @@ -155,16 +107,12 @@ protected Geo3dShape generateRandomShape(Point nearP) \n{\n               ulhcPoint = lrhcPoint;\n               lrhcPoint = temp;\n             }\n\n\tfinal GeoBBox shape = GeoBBoxFactory.makeGeoBBox(planetModel, ulhcPoint.getY() * DEGREES_TO_RADIANS,\n\tlrhcPoint.getY() * DEGREES_TO_RADIANS,\n\tulhcPoint.getX() * DEGREES_TO_RADIANS,\n\tlrhcPoint.getX() * DEGREES_TO_RADIANS);\n\treturn new Geo3dShape(shape, ctx);\n    +        return (Geo3dShape<?>) ctx.getShapeFactory().rect(lrhcPoint, ulhcPoint);\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    Indeed! ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16284004",
            "date": "2017-12-08T18:39:41+0000",
            "content": "Github user iverase commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155844958\n\n    \u2014 Diff: lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/Geo3dShapeRectRelationTestCase.java \u2014\n    @@ -16,29 +16,15 @@\n      */\n     package org.apache.lucene.spatial.spatial4j;\n\n    -import java.util.ArrayList;\n    -import java.util.List;\n    -\n    -import org.apache.lucene.spatial3d.geom.GeoPath;\n    -import org.apache.lucene.spatial3d.geom.GeoPolygon;\n    +import org.junit.Rule;\n    +import org.junit.Test;\n     import org.locationtech.spatial4j.TestLog;\n     import org.locationtech.spatial4j.context.SpatialContext;\n    -import org.locationtech.spatial4j.distance.DistanceUtils;\n     import org.locationtech.spatial4j.shape.Circle;\n     import org.locationtech.spatial4j.shape.Point;\n     import org.locationtech.spatial4j.shape.RectIntersectionTestHelper;\n    -import org.apache.lucene.spatial3d.geom.LatLonBounds;\n    \u2014 End diff \u2013\n\n    I didn't dear to change it but that was the idea of the effort, I will remove Geo3d.  ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16284008",
            "date": "2017-12-08T18:42:22+0000",
            "content": "Thanks for the quick review, I don't think I will manage to do the changes during the weekend so early next week.\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16285077",
            "date": "2017-12-10T04:43:31+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155938309\n\n    \u2014 Diff: lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/ShapeRectRelationTestCase.java \u2014\n    @@ -75,9 +75,9 @@ public void testGeoCircleRect() {\n         new Geo3dRectIntersectionTestHelper(ctx) {\n    \u2014 End diff \u2013\n\n    Should be renamed as this class is no longer Geo3d specific ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16285697",
            "date": "2017-12-11T09:59:44+0000",
            "content": "Hi [~karl wright],\n\nCan you review the following supositions:\n\n1) Accuracy in GeoExactCircle is defined as a linear distance, still I guess is a distance in radians, is that correct?\n\n2) Is correct to represent that error in decimal degrees by using transformation between radians and degrees? \n\nI checked the value provided in here:\n\nhttps://en.wikipedia.org/wiki/Decimal_degrees\n\n1m correspond to around 9e-6 decimal degrees with is more or less 1.6e-7 radians. So it looks consistent.\n\nThanks! ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16285727",
            "date": "2017-12-11T10:22:55+0000",
            "content": "Ignacio Vera, the error distance is the linear (perpendicular) distance from a plane to a point that is supposedly on that plane but which is not quite.\n\nThe units we're using here are not radians \u2013 those are an angular unit.  Instead we're talking about the unit ellipsoid, where x^2/ab^2 + y^2/ab^2 + z^2/c^2 = 1.  (It is possible, as you noted before, to construct a non-unit planetmodel, but I don't know what effects that might have, and maybe we should put in a check to prevent it.)  The error is therefore relative to 1.0, so it's best described as a fraction of the circle or ellipsoid.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16285910",
            "date": "2017-12-11T13:37:27+0000",
            "content": "I guess we do not want to expose this complexity on this interface and it would be nice if accuracy could be expressed in decimal degrees to follow spatial4j convention. \n\nWe are dealing at the moment with unit planet models so better don't worry about that now.\n\nWhat comes to my mind is that we can approximate linear distance to surface distance (in radians) at this level as distances are very tiny. Then the problem is easy as we just need to transform between degrees and radians to set accuracy.  I think we are overstimating the accuracy so everything should be ok.\n\nDoes it make sense?\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16287650",
            "date": "2017-12-12T14:09:37+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155938315\n\n    \u2014 Diff: lucene/spatial-extras/src/test/org/apache/lucene/spatial/spatial4j/ShapeRectRelationTestCase.java \u2014\n    @@ -28,15 +28,15 @@\n\n     import static org.locationtech.spatial4j.distance.DistanceUtils.DEGREES_TO_RADIANS;\n\n    -public abstract class Geo3dShapeRectRelationTestCase extends RandomizedShapeTestCase {\n    +public abstract class ShapeRectRelationTestCase extends RandomizedShapeTestCase {\n       protected final static double RADIANS_PER_DEGREE = Math.PI/180.0;\n\n       @Rule\n       public final TestLog testLog = TestLog.instance;\n\n       protected int maxRadius = 180;\n\n\n\tpublic Geo3dShapeRectRelationTestCase() {\n    +  public ShapeRectRelationTestCase() {\n         super(SpatialContext.GEO);\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    I think the subclass should pass in the context. ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16287651",
            "date": "2017-12-12T14:09:40+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/288#discussion_r155938328\n\n    \u2014 Diff: lucene/spatial-extras/src/java/org/apache/lucene/spatial/spatial4j/Geo3dShapeFactory.java \u2014\n    @@ -150,10 +176,21 @@ public Rectangle rect(double minX, double maxX, double minY, double maxY) {\n\n       @Override\n       public Circle circle(double x, double y, double distance) {\n\n\tGeoCircle circle = GeoCircleFactory.makeGeoCircle(planetModel,\n\ty * DistanceUtils.DEGREES_TO_RADIANS,\n\tx * DistanceUtils.DEGREES_TO_RADIANS,\n\tdistance * DistanceUtils.DEGREES_TO_RADIANS);\n    +    GeoCircle circle;\n    +    if (planetModel.ab == planetModel.c) {\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    @DaddyWri comments? ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16288706",
            "date": "2017-12-13T04:42:09+0000",
            "content": "Karl Wright and Ignacio Vera I'm looking at GeoCircleFactory and GeoStandardCircle and GeoExactCircle.  Try to put yourself into a user's shoes who has no idea which to choose.  Note that both circles have the same class javadocs (albeit not \"public\").  Also note that both factory methods on GeoCircleFactory look similar.  So I've been following these issues loosely and have some vague idea of what's going on.  I think it's weird that GeoExactCircle is named as such which, by it's name, might suggest (to me) that any other circle isn't \"exact\".  Yet AFAICT this isn't true and in fact is the opposite!  GeoStandardCircle is accurate in spherical, and GeoExactCircle, despite it's name, is an approximation with configurable error for non-spherical.\n\nSure some more/better javadocs would help but I have to wonder if we need to express the distinction publicly.  That is... if the PlanetModel passed is a sphere, then use GeoStandardCircle, and if it isn't, use GeoExactCircle.  Essentially with this I'm suggesting moving the change in this patch in Geo3dShapeFactory (Spatial4j abstraction) to GeoCircleFactory (down a layer of abstraction).  WDYT? ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16288713",
            "date": "2017-12-13T04:46:28+0000",
            "content": "BTW Ignacio Vera my tentative CHANGES.txt note for this issue is this:\n\n* LUCENE-8086: spatial-extras Geo3dFactory: Use GeoExactCircle with\n  configurable precision for non-spherical planet models.\n  (Ignacio Vera via David Smiley)\n\n\nYeah I know there's more going on but I think that's essentially it from a user perspective.  It's common for issues to include various internal refactorings but need not mention in CHANGES.txt. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16289094",
            "date": "2017-12-13T10:58:09+0000",
            "content": "Hi David Smiley,\n\nHere are my comments:\n\n1) The javadocs can indeed be improved. I open a JIRA ticket and added a patch with my suggestions. \n\n2) Both shapes should be exposed and it should be the user that decides which one fits his/her use case. It is perfectly fine to use GeoStandardCircle in non-spherical planets if you are not so worried about accuracy as it is the fastest shape. I can even imagine applications that use this type of circles for big radius and then use GeoExactCircle where radius become small. The implementation I have provided is maybe the more generic approach but it is a decision I made and I think it belongs there .... maybe one day it is decided to do it in a different way e.g. depending on radio size.\n\n3) The CHANGES.txt note is fine. The other changes on the patch are just cosmetic.\n\nThanks! ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16289948",
            "date": "2017-12-13T21:33:01+0000",
            "content": "Commit d66d9549d7c4fe50eb599a2960c555d06d335a2a in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d66d954 ]\n\nLUCENE-8086: spatial-extras Geo3dFactory: Use GeoExactCircle with configurable precision for non-spherical planet models.\nSome internal refactorings as well. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16289991",
            "date": "2017-12-13T21:55:21+0000",
            "content": "Commit caf401c43bbe40771ae633c1a62732823930f35f in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=caf401c ]\n\nLUCENE-8086: spatial-extras Geo3dFactory: Use GeoExactCircle with configurable precision for non-spherical planet models.\nSome internal refactorings as well.\n\n(cherry picked from commit d66d954) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16320139",
            "date": "2018-01-10T12:02:11+0000",
            "content": "Github user iverase closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/288 ",
            "author": "ASF GitHub Bot"
        }
    ]
}