{
    "id": "SOLR-6188",
    "title": "solr.ICUFoldingFilterFactory causes NoClassDefFoundError: o/a/l/a/icu/ICUFoldingFilter",
    "details": {
        "affect_versions": "4.8.1",
        "status": "Closed",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "When fully qualified class name is used in schema.xml \n\norg.apache.lucene.analysis.icu.ICUFoldingFilterFactory\n\nit works. However as documented in confluence and wiki, when solr.ICUFoldingFilterFactory is used it throws following exception.\n\nThis is true for both released 4.8.1 version and trunk r1604168\nfollowing type works :\n\n\n    \n     <fieldType name=\"folded2\" class=\"solr.TextField\">\n      <analyzer>\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"org.apache.lucene.analysis.icu.ICUFoldingFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\n\n\n\nthis does not : \n\n <fieldType name=\"folded\" class=\"solr.TextField\">\n      <analyzer>\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.ICUFoldingFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\n\n\n\n\n257 [main] ERROR org.apache.solr.core.SolrCore  \u2013 Error loading core:java.util.concurrent.ExecutionException: java.lang.NoClassDefFoundError: org/apache/lucene/analysis/icu/ICUFoldingFilter\n\tat java.util.concurrent.FutureTask.report(FutureTask.java:122)\n\tat java.util.concurrent.FutureTask.get(FutureTask.java:188)\n\tat org.apache.solr.core.CoreContainer.load(CoreContainer.java:301)\n\tat org.apache.solr.servlet.SolrDispatchFilter.createCoreContainer(SolrDispatchFilter.java:190)\n\tat org.apache.solr.servlet.SolrDispatchFilter.init(SolrDispatchFilter.java:137)\n\tat org.eclipse.jetty.servlet.FilterHolder.doStart(FilterHolder.java:119)\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n\tat org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:719)\n\tat org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:265)\n\tat org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1252)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:710)\n\tat org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:494)\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n\tat org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:39)\n\tat org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:186)\n\tat org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:494)\n\tat org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:141)\n\tat org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:145)\n\tat org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:56)\n\tat org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:609)\n\tat org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:540)\n\tat org.eclipse.jetty.util.Scanner.scan(Scanner.java:403)\n\tat org.eclipse.jetty.util.Scanner.doStart(Scanner.java:337)\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n\tat org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:121)\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n\tat org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:555)\n\tat org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:230)\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n\tat org.eclipse.jetty.util.component.AggregateLifeCycle.doStart(AggregateLifeCycle.java:81)\n\tat org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:58)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.doStart(HandlerWrapper.java:96)\n\tat org.eclipse.jetty.server.Server.doStart(Server.java:280)\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:64)\n\tat org.eclipse.jetty.xml.XmlConfiguration$1.run(XmlConfiguration.java:1259)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1182)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.eclipse.jetty.start.Main.invokeMain(Main.java:473)\n\tat org.eclipse.jetty.start.Main.start(Main.java:615)\n\tat org.eclipse.jetty.start.Main.main(Main.java:96)\nCaused by: java.lang.NoClassDefFoundError: org/apache/lucene/analysis/icu/ICUFoldingFilter\n\tat java.lang.Class.getDeclaredConstructors0(Native Method)\n\tat java.lang.Class.privateGetDeclaredConstructors(Class.java:2493)\n\tat java.lang.Class.getConstructor0(Class.java:2803)\n\tat java.lang.Class.getConstructor(Class.java:1718)\n\tat org.apache.solr.core.SolrResourceLoader.newInstance(SolrResourceLoader.java:602)\n\tat org.apache.solr.schema.FieldTypePluginLoader$3.create(FieldTypePluginLoader.java:382)\n\tat org.apache.solr.schema.FieldTypePluginLoader$3.create(FieldTypePluginLoader.java:376)\n\tat org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:151)\n\tat org.apache.solr.schema.FieldTypePluginLoader.readAnalyzer(FieldTypePluginLoader.java:400)\n\tat org.apache.solr.schema.FieldTypePluginLoader.create(FieldTypePluginLoader.java:95)\n\tat org.apache.solr.schema.FieldTypePluginLoader.create(FieldTypePluginLoader.java:43)\n\tat org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:151)\n\tat org.apache.solr.schema.IndexSchema.readSchema(IndexSchema.java:492)\n\tat org.apache.solr.schema.IndexSchema.<init>(IndexSchema.java:172)\n\tat org.apache.solr.schema.IndexSchemaFactory.create(IndexSchemaFactory.java:55)\n\tat org.apache.solr.schema.IndexSchemaFactory.buildIndexSchema(IndexSchemaFactory.java:69)\n\tat org.apache.solr.core.ConfigSetService.createIndexSchema(ConfigSetService.java:89)\n\tat org.apache.solr.core.ConfigSetService.getConfig(ConfigSetService.java:62)\n\tat org.apache.solr.core.CoreContainer.create(CoreContainer.java:554)\n\tat org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:261)\n\tat org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:253)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.ClassNotFoundException: org.apache.lucene.analysis.icu.ICUFoldingFilter\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:366)\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:355)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:354)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:425)\n\tat java.net.FactoryURLClassLoader.loadClass(URLClassLoader.java:789)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:358)\n\t... 27 more",
    "attachments": {
        "SOLR-6188.patch": "https://issues.apache.org/jira/secure/attachment/12754406/SOLR-6188.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-14038783",
            "date": "2014-06-20T13:30:13+0000",
            "content": "Usually this is because you have not configured the correct classpath. "
        },
        {
            "author": "Ahmet Arslan",
            "id": "comment-14038790",
            "date": "2014-06-20T13:38:00+0000",
            "content": "Hi Robert, I thought the same at first, but I have these two jars : icu4j-53.1.jar and lucene-analyzers-icu-5.0-SNAPSHOT.jar inside\nsolr-trunk/solr/example/solr/collection1/lib directory. Besides it shouldn't work when org.apache.lucene.analysis.icu.ICUFoldingFilterFactory is used.\n\nI am downloading your 4.9 release candidate, i will test it with that too. "
        },
        {
            "author": "Ahmet Arslan",
            "id": "comment-14039280",
            "date": "2014-06-20T20:25:03+0000",
            "content": "Same symptom. solr.ICU*Factory in schema.xml causes not found exception for org.apache.lucene.* class.  "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14039350",
            "date": "2014-06-20T20:57:45+0000",
            "content": "Hi the reason for this issue is indeed caused by SOLR-4852: The reason why it works with absolute classname is the following:\n\n\tIf you use the absolute class name, the class is loaded by Class.forName from SolrResourceLoader\n\tIf you use the shortcut, the Solr 3.x backwards layer for finding factory classes is used. The solr.XXXFactory name is rewritten to a call to TokenFilterFactory.forName(). This forName call uses the classpath it was initialized with. TokenFilterFactory is a static class and doe snot really know classloaders (because there is only one single instance). Every SolrResourceLoader calls an update process, that scans the own classpath and adds all new factory instances to the forName() lookup map.\n\n\n\nWhat happens here: In an earlier stage, it looks like SolrResourceLoader has seen a Factory instance loaded by SPI and cached its factory class for forName(). But later the classpath and classloader was replaced and the scanner was called again. This onescanned classpath again, and found a new instance of the FactoryClass (the new one that should be used). Because this one was already in the forName cache, it did not replace that one. In the meantime, the old classloader was closed with Java 7's URLClassLoacer.close() method. Because of this a call to forName returned the factory class, but the dependend classes it was referring to are no longer loadable (classloader closed). This causes the bug.\n\nThe fix is not easily possible, I will think about it. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14652607",
            "date": "2015-08-03T21:48:03+0000",
            "content": "I closed SOLR-7771 as a duplicate of this issue.\n\nI'm attempting to get Solr 5.2.1 installed into my dev environment with the config from my Solr 4.9 install.  I have all the extra jars in the lib directory under my solr home.\n\nBy updating schema.xml to replace the solr.ICU* class names with the fully qualified versions, I was able to get Solr to start properly.\n\nI'm using another custom analysis component recompiled with 5.2.1 jars:\n\nhttps://github.com/solrmarc/CJKFoldingFilter/releases\n\nThis component works just fine with \"solr.CJKFoldingFilter\" in the class parameter. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14693516",
            "date": "2015-08-12T14:00:53+0000",
            "content": "Usually when there's a strange problem related to the classloader, it's Lucene's ICU analysis jars that show the problem.  Perhaps there's something strange going on in the ICU jars and this should be moved to the LUCENE project? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14718537",
            "date": "2015-08-28T13:11:00+0000",
            "content": "On 4.2.1, 4.3.0, 4.6.1, 4.7.2, and 4.9.1 (the only 4.x versions I have tested), the workaround I mentioned in SOLR-4852 (putting all jars in solr_home/lib) works with the \"solr.\" prefix on ICU analysis components.  On 5.2.1, it doesn't, and full class names are required.  All other typical classes are working with the \"solr.\" prefix except the ICU components. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14732423",
            "date": "2015-09-06T15:29:25+0000",
            "content": "I was helping someone with a class cast exception problem on the mailing list, and noticed that the log for 5.3.0 also says that it is loading jars in solrhome/lib twice, just like I noticed in the 5.2.1 log.  SOLR-4852 appeared to be triggered by Solr loading twice from that location.  At that time I never tried using the fully qualified ICU class names in schema.xml, but I suspect that it would have worked then.\n\nI think that the root of this problem is that Solr is loading jars from that lib directory twice.  In SOLR-7771 (specifically in 5.2.1) I noticed that this doesn't cause problems with other jars in that directory, just ICU analysis.  This may indicate that this is a bug that specifically affects ICU jars.  The way that Solr's classloader and/or the \"solr.\" prefix mechanism works is apparently not with the way that the ICU jars work when they register themselves, unless the classloader only loads them once.  I do not know if the fault is in Solr or the ICU jars, but because other jars work correctly even when loaded twice, I am suspecting that it is the latter. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14732426",
            "date": "2015-09-06T15:42:09+0000",
            "content": "Even though I am suspecting a problem in the ICU jars, there is a problem in Solr.  It should only be loading solrhome/lib contents once.  IMHO fixing that so it only happens once should be the focus of this issue.  I am considering opening a LUCENE issue to investigate whether the ICU jars have something that needs to be fixed, but I will only do that after some discussion.\n\nI had created a patch for SOLR-4852 which adds duplicate resource URL checking to the classloader, and also refused to replace the classloader if nothing new was loaded.  I think I may have done it wrong, but the idea seems sound. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14732432",
            "date": "2015-09-06T15:52:24+0000",
            "content": "One final update:  I wonder if the class cast exception in the dataimport jar might be caused by loading it twice.  I did not have this problem with 5.2.1, and it did load those jars twice, but the user with that problem is running 5.3.0. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14732490",
            "date": "2015-09-06T18:20:59+0000",
            "content": "I figured out why it loads solrhome/lib twice.\n\nLooking at current branch_5x code, line 143 in SolrResourceLoader.java does this:\n\n\n    addToClassLoader(\"./lib/\", null, true);\n\n\n\nAt the same time, the sharedLibDirectory field in the NodeConfig class defaults to \"lib\" (set in the NodeConfigBuilder class), and CoreContainer#load() looks like this:\n\n\n  /**\n   * Load the cores defined for this CoreContainer\n   */\n  public void load()  {\n    log.info(\"Loading cores into CoreContainer [instanceDir={}]\", loader.getInstanceDir());\n\n    // add the sharedLib to the shared resource loader before initializing cfg based plugins\n    String libDir = cfg.getSharedLibDirectory();\n    if (libDir != null) {\n      File f = FileUtils.resolvePath(new File(solrHome), libDir);\n      log.info(\"loading shared library: \" + f.getAbsolutePath());\n      loader.addToClassLoader(libDir, null, false);\n      loader.reloadLuceneSPI();\n    }\n\n\n\nWhich of these should we keep?  My bias (chosen without really thinking about any possible deeper implications) is to remove the one line from SolrResourceLoader.java.  This would cause it to only use sharedLib, which the user should be able to override in solr.xml. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14732523",
            "date": "2015-09-06T19:46:14+0000",
            "content": "The patch I just attached fixes the problem.  A Solr 5.2.1 install was throwing errors for ICU jars, then I removed those two lines from the 5.2.1 source, built the server, and replaced the solr.war with the one I just built.  Everything worked perfectly. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14736817",
            "date": "2015-09-09T13:15:23+0000",
            "content": "Commit 1701999 from Shawn Heisey in branch 'dev/trunk'\n[ https://svn.apache.org/r1701999 ]\n\nSOLR-6188: Only load jars in default sharedLib once. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14736854",
            "date": "2015-09-09T13:40:40+0000",
            "content": "Commit 1702006 from Shawn Heisey in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1702006 ]\n\nSOLR-6188: Only load jars in default sharedLib once. (backport trunk r1701999) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14736860",
            "date": "2015-09-09T13:43:31+0000",
            "content": "Commit 1702007 from Shawn Heisey in branch 'dev/branches/lucene_solr_5_3'\n[ https://svn.apache.org/r1702007 ]\n\nSOLR-6188: Only load jars in default sharedLib once. (backport trunk r1701999) "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14736865",
            "date": "2015-09-09T13:46:09+0000",
            "content": "Precommit passed on trunk and 5x. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14737127",
            "date": "2015-09-09T16:22:43+0000",
            "content": "There are jenkins failures.  Looking at them, I am not sure how removing an extra load of \"./lib\" (the default sharedLib) can cause a failure to find a file in the core lib directory. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14737167",
            "date": "2015-09-09T16:45:42+0000",
            "content": "I will revert the commit and figure out what to do about the failures, try again for 5.4 when I've got it. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14737173",
            "date": "2015-09-09T16:48:45+0000",
            "content": "I tracked down what's happening with the first failure, in ResourceLoaderTest, line 200.  This test relies on the SolrResourceLoader explicitly loading the lib directory inside any directory given, which is what I just removed.\n\nI think the removed lines are probably also how Solr loads core-level lib directories, which explains the other failure. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14737183",
            "date": "2015-09-09T16:52:36+0000",
            "content": "Commit 1702054 from Shawn Heisey in branch 'dev/branches/lucene_solr_5_3'\n[ https://svn.apache.org/r1702054 ]\n\nSOLR-6188: Revert r1702007 (backport of r1701999) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14737189",
            "date": "2015-09-09T16:54:24+0000",
            "content": "Commit 1702056 from Shawn Heisey in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1702056 ]\n\nSOLR-6188: Revert 1702006 (backport of r1701999) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14737192",
            "date": "2015-09-09T16:55:34+0000",
            "content": "Commit 1702057 from Shawn Heisey in branch 'dev/trunk'\n[ https://svn.apache.org/r1702057 ]\n\nSOLR-6188: Revert r1701999 "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14791608",
            "date": "2015-09-17T05:44:23+0000",
            "content": "I've concocted a new patch which I am attaching.  I've been seeing a lot of test failures, but it's a different test failing every time, and the failures do not seem to be due to this patch, but I can't be 100% certain. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14791713",
            "date": "2015-09-17T07:32:10+0000",
            "content": "When I was getting the test failures, I was on a Windows 7 machine.  I tried running on Linux and they all passed.\n\nAfter that, I built the server and copied the DIH jar to server/solr/lib and started it.  This produces the following log snippet:\n\n\n2015-09-17 07:27:47.392 INFO  (main) [   ] o.a.s.c.SolrResourceLoader using system property solr.solr.home: /home/elyograg/asf/branch_5x/solr/server/solr\n2015-09-17 07:27:47.392 INFO  (main) [   ] o.a.s.c.SolrResourceLoader Skipping resource load from lib directory in /home/elyograg/asf/branch_5x/solr/server/solr/.  It is either null or the solr home.  The lib directory in the solr home i\ns handled via the default sharedLib.\n2015-09-17 07:27:47.399 INFO  (main) [   ] o.a.s.c.SolrXmlConfig Loading container configuration from /home/elyograg/asf/branch_5x/solr/server/solr/solr.xml\n2015-09-17 07:27:47.496 INFO  (main) [   ] o.a.s.c.CoresLocator Config-defined core root directory: /home/elyograg/asf/branch_5x/solr/server/solr\n2015-09-17 07:27:47.523 INFO  (main) [   ] o.a.s.c.CoreContainer New CoreContainer 1634132079\n2015-09-17 07:27:47.523 INFO  (main) [   ] o.a.s.c.CoreContainer Loading cores into CoreContainer [instanceDir=/home/elyograg/asf/branch_5x/solr/server/solr/]\n2015-09-17 07:27:47.524 INFO  (main) [   ] o.a.s.c.CoreContainer loading shared library: /home/elyograg/asf/branch_5x/solr/server/solr/lib\n2015-09-17 07:27:47.524 INFO  (main) [   ] o.a.s.c.SolrResourceLoader Adding 'file:/home/elyograg/asf/branch_5x/solr/server/solr/lib/solr-dataimporthandler-5.4.0-SNAPSHOT.jar' to classloader\n\n\n\nIt skips the initial load and then picks up the jar I added via sharedLib.\n\nWould anyone like to sanity-check the patch?  There might be a better solution, but this one does work. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14802887",
            "date": "2015-09-17T13:13:33+0000",
            "content": "New patch with CHANGES.txt update.\n\nThe logged message is better, and the code now takes advantage of the null check that's already present, instead of doing it again. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14802892",
            "date": "2015-09-17T13:16:20+0000",
            "content": "Miniscule change to the patch.  Removes one space from the logged message. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14802896",
            "date": "2015-09-17T13:20:03+0000",
            "content": "Found a more serious problem in the patch this time.  The logged message was missing required spaces in the concatenated strings. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14802907",
            "date": "2015-09-17T13:26:37+0000",
            "content": "The only thing to say about this log message is that it will be logged every time Solr starts up.  I wonder if it's too verbose. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14803023",
            "date": "2015-09-17T14:50:10+0000",
            "content": "Having thought about this while driving to work, I wonder if a message even needs to be logged.  It will only skip when the requested directory is the solr home, and then it will use whatever is in sharedLib, which defaults to \"lib\". "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14949153",
            "date": "2015-10-08T18:53:44+0000",
            "content": "New patch with a shorter message.  Will still be logged on every startup.  If consensus is that we don't need a message, I can remove it. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14949188",
            "date": "2015-10-08T19:13:39+0000",
            "content": "Another new patch.  This time, I removed the log message and added a verbose comment.  Also explicitly included the class name on my usage of locateSolrHome().  After consideration, that seemed like the right way to go. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14949465",
            "date": "2015-10-08T21:56:25+0000",
            "content": "Precommit passed on trunk.  I am getting solr test failures, so I'm running the tests multiple times to try and determine whether the failures are due to this patch. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14949541",
            "date": "2015-10-08T22:38:51+0000",
            "content": "The only test that repeatedly failed was this:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=SolrCloudExampleTest -Dtests.method=testLoadDocsIntoGettingStartedCollection -Dtests.seed=3F1C68B923D2CA4C -Dtests.slow=true -Dtests.locale=ar_KW -Dtests.timezone=CET -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 45.1s J0 | SolrCloudExampleTest.testLoadDocsIntoGettingStartedCollection <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: Delete action failed!\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([3F1C68B923D2CA4C:2C7F5AD612BD73EA]:0)\n   [junit4]    >        at org.apache.solr.cloud.SolrCloudExampleTest.doTestDeleteAction(SolrCloudExampleTest.java:169)\n   [junit4]    >        at org.apache.solr.cloud.SolrCloudExampleTest.testLoadDocsIntoGettingStartedCollection(SolrCloudExampleTest.java:145)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsFixedStatement.callStatement(BaseDistributedSearchTestCase.java:963)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsStatement.evaluate(BaseDistributedSearchTestCase.java:938)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)\n\n\n\nLooking at this test, I do not think it can be affected by my patch.  I will commit this to trunk and let Jenkins pound on it for a little while. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14949547",
            "date": "2015-10-08T22:40:55+0000",
            "content": "Commit 1707630 from Shawn Heisey in branch 'dev/trunk'\n[ https://svn.apache.org/r1707630 ]\n\nSOLR-6188: Only load resources in SOLRHOME/lib once. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14950386",
            "date": "2015-10-09T13:32:28+0000",
            "content": "I was sent four direct messages from Policeman Jenkins.  The failures did not look like they were caused by my commit, and one of them was the failure that I described above.  I would appreciate a review before I backport to 5x. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14950678",
            "date": "2015-10-09T16:43:38+0000",
            "content": "+1, LGTM, I don't know a lot about classloaders, but AFAICT this works around the bug Uwe describes above. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14951060",
            "date": "2015-10-09T19:28:13+0000",
            "content": "Commit 1707800 from Shawn Heisey in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1707800 ]\n\nSOLR-6188: Only load resources in SOLRHOME/lib once. (backport trunk r1707630)\nAlso indirectly incorporates r1707771 - fixing my error in CHANGES.txt. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14951064",
            "date": "2015-10-09T19:29:25+0000",
            "content": "Precommit passed on 5x.  The only solr test failure (which repeated through two runs) did not look related to the patch. "
        }
    ]
}