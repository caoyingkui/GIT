{
    "id": "SOLR-1365",
    "title": "Add configurable Sweetspot Similarity factory",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This is some code that I wrote a while back.\n\nNormally, if you use SweetSpotSimilarity, you are going to make it do something useful by extending SweetSpotSimilarity. So, instead, I made a factory class and an configurable SweetSpotSimilarty. There are two classes. SweetSpotSimilarityFactory reads the parameters from schema.xml. It then creates an instance of VariableSweetSpotSimilarity, which is my custom SweetSpotSimilarity class. In addition to the standard functions, it also handles dynamic fields.\n\nSo, in schema.xml, you could have something like this:\n\n<similarity class=\"org.apache.solr.schema.SweetSpotSimilarityFactory\">\n    <bool name=\"useHyperbolicTf\">true</bool>\n\n\t<float name=\"hyperbolicTfFactorsMin\">1.0</float>\n\t<float name=\"hyperbolicTfFactorsMax\">1.5</float>\n\t<float name=\"hyperbolicTfFactorsBase\">1.3</float>\n\t<float name=\"hyperbolicTfFactorsXOffset\">2.0</float>\n\n\t<int name=\"lengthNormFactorsMin\">1</int>\n\t<int name=\"lengthNormFactorsMax\">1</int>\n\t<float name=\"lengthNormFactorsSteepness\">0.5</float>\n\n\t<int name=\"lengthNormFactorsMin_description\">2</int>\n\t<int name=\"lengthNormFactorsMax_description\">9</int>\n\t<float name=\"lengthNormFactorsSteepness_description\">0.2</float>\n\n\t<int name=\"lengthNormFactorsMin_supplierDescription_*\">2</int>\n\t<int name=\"lengthNormFactorsMax_supplierDescription_*\">7</int>\n\t<float name=\"lengthNormFactorsSteepness_supplierDescription_*\">0.4</float>\n </similarity>\n\nSo, now everything is in a config file instead of having to create your own subclass.",
    "attachments": {
        "SOLR-1365.patch": "https://issues.apache.org/jira/secure/attachment/12416819/SOLR-1365.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-12744306",
            "date": "2009-08-18T00:41:15+0000",
            "content": "Sweet!  \n\nVery nice use of the SimilarityFactory capability.  \n\nI took a brief look at the patch, the only feedback I have is that I believe that the dynamic field handling might be able to leverage some of Solr's built-in logic in IndexSchema.  But how can a SimilarityFactory get access to that?   Hmmm....? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12744309",
            "date": "2009-08-18T00:46:43+0000",
            "content": "I took a brief look at the patch, the only feedback I have is that I believe that the dynamic field handling might be able to leverage some of Solr's built-in logic in IndexSchema. But how can a SimilarityFactory get access to that? Hmmm....?\n\nWhy by implementing SolrCoreAware, of course. "
        },
        {
            "author": "Kevin Osborn",
            "id": "comment-12744376",
            "date": "2009-08-18T05:52:33+0000",
            "content": "Thanks for the feedback. I looked at IndexSchema. It seems like the only useful function in my case is using isDynamicField vs. seeing if the field name ends with a \"*\".\n\nBut also is SimilarityFactory allowed to implement SolrCoreAware? I'm not too familiar with this interface, but my initial research shows that only SolrRequestHandler, QueryResponseWriter, SearchComponent, or UpdateRequestProcessorFactory may implement SolrCoreAware. Is this correct? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12744434",
            "date": "2009-08-18T09:31:37+0000",
            "content": "Any class loaded by SolrResourceLoader (any custom plugin, basically) can implement SolrCoreAware. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12744639",
            "date": "2009-08-18T18:36:47+0000",
            "content": "Needs tests.  Not sure this will make 1.4, as we are trying to not add new features at this point. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12744643",
            "date": "2009-08-18T18:44:11+0000",
            "content": "FWIW: if a new feature doesn't have any impact on existing users, and has good tests, then i say we might as well commit it for 1.4\n\n (If we were talking about a new feature on an existing component, then i'd be hesitant because of how that feature might impact existing users of that component \u2013 but in this case even if it has bad performance or some small bug that slips through tests, people have to go out of their way to use it)\n\nBut grant's right: needs tests before it's really a subject for debate. "
        },
        {
            "author": "Kevin Osborn",
            "id": "comment-12744682",
            "date": "2009-08-18T20:08:33+0000",
            "content": "Thanks for the comments. I'll make the changes for Erik's suggestions and come up with some tests. If it gets into 1.4, great. If not, then it is not a huge deal since this is already production code for us. But, if it could be put into the main code base, then even better. "
        },
        {
            "author": "Kevin Osborn",
            "id": "comment-12832711",
            "date": "2010-02-11T22:38:39+0000",
            "content": "I am finally getting back around to this. And I am having trouble implementing SolrCoreAware. As The SolrResourceLoader has a method called assertAwareCompatibility which throws an exception my class does not extend SolrRequestHandler, QueryResponseWriter, SearchComponent, or UpdateRequestProcessorFactory. Am I missing anything? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12832973",
            "date": "2010-02-12T12:13:08+0000",
            "content": "I'm not really sure why we have that constraint in SolrResourceLoader, and why any class we load can't simply implement SolrCoreAware.  But at the very least, we can update this to support a SimilarityFactory for the sake of this issue.  +1 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12834938",
            "date": "2010-02-17T19:15:24+0000",
            "content": "The constraints on what can be SolrCoreAware exist for two main reasons:\n\n\n\tto ensure some sanity in initialization .. one of the main reasons the SolrCoreAware interface was needed in the first place was because some plugins wanted to use the SolrCore to get access to other plugins during their initialization \u2013 but those other components weren't necessarily initialized yet.  with the inform(SolrCore) method SolrCoreAware plugins know that all other components have been initialized, but they haven't necessarily been informed about the SolrCore, so they might not be \"ready\" to deal with other plugins yet ... it's generally just a big initialization-cluster-fuck, so the fewer classes involved the better\n\tprevent too much pollution of the SolrCore API.  having direct access to the SolrCore is \"a big deal\" \u2013 once you have a reference to the core, you can get to pretty much anything, which opens us (ie: Solr maintainers) up to a lot of crazy code paths to worry about \u2013 so the fewer plugin types that we need to consider when making changes to SolrCore the better.\n\n\n\nIn the case of SimilarityFactor, i'm not entirely sure how i feel about making it SolrCoreAware(able) ... we have tried really, REALLY hard to make sure nothing initialized as part of the IndexSchema can be SolrCore aware because it opens up the possibility of plugin behavior being affected by SolrCore configuration which might be differnet between master and slave machines \u2013 which could provide disastrous results.  a schema.xml needs to be internally consistent regardless of what solrconfig.xml might refrence it.\n\nIn this case the real issue isn't that we have a use case where SImilarityFactory needs access to SolrCore \u2013 what it wants access to is the IndexSchema, so it might make sense to just provide access to that in some way w/o having to expos the entire SolrCore.\n\nPractically speaking, after re-skimming the patch: I'm not even convinced that would eally add anything.  refactoring/reusing some of the code that IndexSchema uses to manage dynamicFIelds might be handy for the SweetSpotSimilarityFactory, but i don't actual see how being able to inspect the IndexSchema to get the list of dynamicFields (or find out if a field is dynamic) would make it any better or easier to use.  We'd still want people to configure it with field names and field name globs directly because there won't necessarily be a one to one correspondence between what fields are dynamic in the schema and how you want the sweetspots defined ... you might have a generic \"en_\" dynamicField in your schema for english text, and an \"fr_\" dynamicField for french text, but that doesn't mean the sweetspot for all \"fr_\" fields will be the same ... you are just as likely to want some very specific field names to have their own sweetspot, or to have the sweetspot be suffix based (ie: \"_title\" could have one sweetspot even the resulting field names are fr_title and en_title.\n\nI think the patch could be improved, and i think there is definitely some code reuse possibility for parsing the field name globs, but i don't know that it really needs run time access to the IndexSchema (and it definitely doesn't need access to the SolrCore) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872599",
            "date": "2010-05-27T22:08:35+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-12999486",
            "date": "2011-02-25T19:23:33+0000",
            "content": "Just pinging this issue to see if anyone picks it up again  Looks useful! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12999495",
            "date": "2011-02-25T19:34:32+0000",
            "content": "In my opinion the issue should be much simpler to solve in trunk now, as all the per-field stuff is now removed from SweetSpotSimilarity.\n\nInstead, you would just have the configurable sweetspot similarity, and assign different configurations to different fields via SOLR-2338, which will be responsible for the indexschema integration. "
        },
        {
            "author": "Kevin Osborn",
            "id": "comment-12999577",
            "date": "2011-02-25T21:26:12+0000",
            "content": "I had almost forgotten about this issue. I should be able to wrap this up soon. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043629",
            "date": "2011-06-03T16:46:11+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106410",
            "date": "2011-09-16T14:50:57+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234710",
            "date": "2012-03-21T18:08:58+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13587784",
            "date": "2013-02-27T00:27:37+0000",
            "content": "Ok, here's an all new patch for the post SOLR-2338 world order.\n\nExample syntax...\n\n\n    <!-- using baseline TF -->\n    <fieldType name=\"text_baseline\" class=\"solr.TextField\"\n               indexed=\"true\" stored=\"false\">\n      <analyzer class=\"org.apache.lucene.analysis.standard.StandardAnalyzer\"/>\n      <similarity class=\"solr.SweetSpotSimilarityFactory\">\n        <!-- TF -->\n        <float name=\"baselineTfMin\">6.0</float>\n        <float name=\"baselineTfBase\">1.5</float>\n        <!-- plateau norm -->\n        <int name=\"lengthNormMin\">3</int>\n        <int name=\"lengthNormMax\">5</int>\n        <float name=\"lengthNormSteepness\">0.5</float>\n      </similarity>\n    </fieldType>\n   \n    <!-- using hyperbolic TF -->\n    <fieldType name=\"text_hyperbolic\" class=\"solr.TextField\"\n               indexed=\"true\" stored=\"false\" >\n      <analyzer class=\"org.apache.lucene.analysis.standard.StandardAnalyzer\"/>\n      <similarity class=\"solr.SweetSpotSimilarityFactory\">\n        <float name=\"hyperbolicTfMin\">3.3</float>\n        <float name=\"hyperbolicTfMax\">7.7</float>\n        <double name=\"hyperbolicTfBase\">2.718281828459045</double> <!-- e -->\n        <float name=\"hyperbolicTfOffset\">5.0</float>\n        <!-- plateau norm, shallower slope -->\n        <int name=\"lengthNormMin\">1</int>\n        <int name=\"lengthNormMax\">5</int>\n        <float name=\"lengthNormSteepness\">0.2</float>\n      </similarity>\n    </fieldType>\n\n\n\n(it automatically detects wether to use hyperbolic or baseline tf depending on which settings are used)\n\nAnyone have any concerns? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13587809",
            "date": "2013-02-27T00:51:15+0000",
            "content": "Updated patch (Forgot to include some \"bad\" config tests) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13587863",
            "date": "2013-02-27T01:47:05+0000",
            "content": "+1 "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13587876",
            "date": "2013-02-27T02:00:12+0000",
            "content": "[trunk commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1450577\n\nSOLR-1365: New SweetSpotSimilarityFactory allows customizable TF/IDF based Similarity when you know the optimal \"Sweet Spot\" of values for the field length and TF scoring factors "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13587886",
            "date": "2013-02-27T02:10:36+0000",
            "content": "Committed revision 1450577.\nCommitted revision 1450579. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13587912",
            "date": "2013-02-27T02:18:37+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1450579\n\nSOLR-1365: New SweetSpotSimilarityFactory allows customizable TF/IDF based Similarity when you know the optimal \"Sweet Spot\" of values for the field length and TF scoring factors (merge r1450577) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13653824",
            "date": "2013-05-10T10:33:05+0000",
            "content": "Closed after release. "
        }
    ]
}