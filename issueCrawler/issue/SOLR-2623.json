{
    "id": "SOLR-2623",
    "title": "Solr JMX MBeans do not survive core reloads",
    "details": {
        "affect_versions": "1.4,                                            1.4.1,                                            3.1,                                            3.2",
        "status": "Closed",
        "fix_versions": [
            "3.4",
            "4.0-ALPHA"
        ],
        "components": [
            "multicore"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Solr JMX MBeans do not survive core reloads\n\n\"Steps to reproduce\"\nsh> cd example\nsh> vi multicore/core0/conf/solrconfig.xml # enable jmx\nsh> java -Dcom.sun.management.jmxremote -Dsolr.solr.home=multicore -jar start.jar\nsh> echo 'open 8842 # 8842 is java pid\n> domain solr/core0\n> beans\n> ' | java -jar jmxterm-1.0-alpha-4-uber.jar\n....\nsolr/core0:id=core0,type=core\nsolr/core0:id=org.apache.solr.handler.StandardRequestHandler,type=org.apache.solr.handler.StandardRequestHandler\nsolr/core0:id=org.apache.solr.handler.StandardRequestHandler,type=standard\nsolr/core0:id=org.apache.solr.handler.XmlUpdateRequestHandler,type=/update\nsolr/core0:id=org.apache.solr.handler.XmlUpdateRequestHandler,type=org.apache.solr.handler.XmlUpdateRequestHandler\n...\nsolr/core0:id=org.apache.solr.search.SolrIndexSearcher,type=searcher\nsolr/core0:id=org.apache.solr.update.DirectUpdateHandler2,type=updateHandler\nsh> curl 'http://localhost:8983/solr/admin/cores?action=RELOAD&core=core0'\nsh> echo 'open 8842 # 8842 is java pid\n> domain solr/core0\n> beans\n> ' | java -jar jmxterm-1.0-alpha-4-uber.jar\n# there's only one bean left after Solr core reload\nsolr/core0:id=org.apache.solr.search.SolrIndexSearcher,type=Searcher@2e831a91 main\n\n\n\nThe root cause of this is Solr core reload behavior:\n\n\tcreate new core (which overwrites existing registered MBeans)\n\tregister new core and close old one (we remove/un-register MBeans on oldCore.close)\n\n\n\nThe correct sequence is:\n\n\tunregister MBeans from old core\n\tcreate and register new core\n\tclose old core without touching MBeans",
    "attachments": {
        "SOLR-2623.patch": "https://issues.apache.org/jira/secure/attachment/12484384/SOLR-2623.patch",
        "SOLR-2623-fixtest-branch_3x.patch": "https://issues.apache.org/jira/secure/attachment/12487128/SOLR-2623-fixtest-branch_3x.patch",
        "SOLR-2623-testfix-trunk.patch": "https://issues.apache.org/jira/secure/attachment/12487130/SOLR-2623-testfix-trunk.patch",
        "SOLR-2623-branch3x.patch": "https://issues.apache.org/jira/secure/attachment/12486164/SOLR-2623-branch3x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Alexey Serba",
            "id": "comment-13056281",
            "date": "2011-06-28T04:14:17+0000",
            "content": "Related bug report in solr mailing list - http://www.lucidimagination.com/search/document/f109d695b7e5d2ae/weird_issue_with_solr_and_jconsole_jmx "
        },
        {
            "author": "Alexey Serba",
            "id": "comment-13056295",
            "date": "2011-06-28T04:49:22+0000",
            "content": "Added test "
        },
        {
            "author": "Alexey Serba",
            "id": "comment-13056299",
            "date": "2011-06-28T04:50:42+0000",
            "content": "Test + fix "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13057169",
            "date": "2011-06-29T11:25:11+0000",
            "content": "Thanks for reporting this Alexey. I think the right way to fix it would be to modify the JmxMonitoredMap. Right now, the unregister method checks if a given key is registered with the server and if so, unregisters it. On a core reload, the key is same but the bean instance is different so all keys are unregistered.\n\nWe can modify the SolrDynamicMBean and put the parent core's hashCode as an extra attribute. Then in the unregister method, remove the mbean from the server after checking if the mbean's hashCode attribute has the same value. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13058112",
            "date": "2011-06-30T22:32:25+0000",
            "content": "Alexey: at first glance, i think i would prefer Shalin's suggestion over your patch.  \n\nMy main hesitation about your approach is the parameterized close method \u2013 If we really go that route i'd much rather see something like a \"SolrCore.preCloseToReleaesResources()\" method.  But more fundementally, if we unregister the MBeans before creating the new core, there is a window of time when the old core is responding to requests, but can't be monitored (and if anything goes wrong with creating the new core, the old one will continue to handle requests indefinitely but be totally unmonitorable.\n\nThat said: i suspect the fix might even be easier then what Shalin proposed (which would require making SolrCore passing itself into the JmxMonitoredMap) ... can't we essentially change JmxMonitoredMap.unregsiter(String,SolrInfoMBean) to have psuedo code like this..\n\n\nif (server.isRegistered(name)) {\n  MBean existing = server.getMBean(name)\n  if (existing intsanceof SolrDynamicMBean && \n      existing.getSolrInfoMBean() == this.get(name)) {\n    server.unregisterMBean(name);\n  } else {\n     // :NOOP: MBean is not ours\n  }\n}\n\n\n\n...adding a package protected SolrDynamicMBean.getSolrInfoMBean() seems less invasive then passing the SolrCore to another class "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13058461",
            "date": "2011-07-01T09:58:26+0000",
            "content": "Hoss, I wish there was a way to do just that. I looked and looked but couldn't find it. The JMX API is really screwed up. Once you send in a MBean, apparently you can't get it out again. I'd be interested if anyone knew of a way to do that. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13058626",
            "date": "2011-07-01T16:29:34+0000",
            "content": "Grr... right, right.   ObjectInstance != MBean. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13061190",
            "date": "2011-07-07T10:28:22+0000",
            "content": "There's another bug with core reload that I found while running Alexey's test. Suppose there's only one core with name \"X\" and you reload \"X\", it then becomes registered with \"\" as the core name. So all your jmx monitoring is now useless because the key names have changed. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13061233",
            "date": "2011-07-07T11:58:09+0000",
            "content": "Here's a patch which fixes the issue. I've reused Alexey's tests with the solution I proposed earlier.\n\nThe problem with the core name changing across reloads is something we can address in another issue. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13063798",
            "date": "2011-07-12T10:02:29+0000",
            "content": "Patch updated to trunk.\n\nI was mistaken about the core name changing on reload.\n\nI'll commit this shortly.\n\nHowever, regardless of what name you specify in the solr.xml, the default core's name is always an empty string. Is this intentional? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13063803",
            "date": "2011-07-12T10:24:45+0000",
            "content": "Patch for branch 3x "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13063805",
            "date": "2011-07-12T10:28:28+0000",
            "content": "Committed revision 1145518 on trunk and 1145527 on branch_3x "
        },
        {
            "author": "Alexey Serba",
            "id": "comment-13063810",
            "date": "2011-07-12T10:40:41+0000",
            "content": "However, regardless of what name you specify in the solr.xml, the default core's name is always an empty string. Is this intentional?\nYes, I guess this is part of default core name normalization. I've noticed the same problem with JMX domain \"solr/\" (empty collection name) after core reload, but I believe I fixed that problem in my patch. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13063816",
            "date": "2011-07-12T11:00:05+0000",
            "content": "I've noticed the same problem with JMX domain \"solr/\" (empty collection name) after core reload, but I believe I fixed that problem in my patch.\n\nI removed that part from your patch because I was not sure of its consequences. Also on reload, it was going back to an empty string. I used to think that in 4.0, the default core would be registered with both the original name as well as empty string but it is not so. We should fix it but that belongs to a separate issue. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13063829",
            "date": "2011-07-12T11:36:04+0000",
            "content": "Is this intentional?\n\nIts how noble and I first set things up if I remember right - I've wanted to address it since as it has a few not nice side affects - have never gotten around to it though. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13065915",
            "date": "2011-07-15T13:23:15+0000",
            "content": "Hi Shalin,\n\nThe new test you added has never succeeded under Maven - here's the first failure:\n\nhttps://builds.apache.org/job/Lucene-Solr-Maven-3.x/178/testReport/junit/org.apache.solr.core/TestJmxIntegration/testJmxOnCoreReload/\n\nUnlike the Ant build, the Maven build copies resources over to solr/build/, and for the Solr core+solrj tests (they run together under Maven), this includes core/src/test-files/, test-framework/src/test-files/, and solrj/src/test-files/, so the environment is somewhat different than under Ant.\n\nI took a quick look at the code and I don't understand what's happening - do you?  The file that can't be found solr/solr/conf/solrconfig.xml is instead located at solr/conf/solrconfig.xml, so it looks like an extra solr/ is being prepended for some reason? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13065917",
            "date": "2011-07-15T13:26:20+0000",
            "content": "The new test you added has never succeeded under Maven \n\nThat's incorrect - the new test has never succeeded under Maven on branch_3x.  On trunk, it succeeds.  Which makes this failure even stranger... "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13066532",
            "date": "2011-07-16T20:57:40+0000",
            "content": "the new test has never succeeded under Maven on branch_3x. On trunk, it succeeds. \n\nIt failed today on the Jenkins trunk Maven build, so I guess it's not so strange: https://builds.apache.org/job/Lucene-Solr-Maven-trunk/189/testReport/junit/org.apache.solr.core/TestJmxIntegration/testJmxOnCoreReload/\n\nI can cause this to fail under IntelliJ if I set the working directory to the location where all the resources are copied to.  That is, if SolrTestCaseJ4.getFile() finds solr/conf/ in the current directory, solr home is set to ./solr/solr/. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13066549",
            "date": "2011-07-16T22:41:47+0000",
            "content": "The Maven build problem should be fixed now: LUCENE-3323. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13068226",
            "date": "2011-07-20T08:42:24+0000",
            "content": "The test has problems when run in parallel.\nAlso, the code was not merged correctly in branch_3x. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13068243",
            "date": "2011-07-20T09:43:34+0000",
            "content": "Fixed SolrDynamicMBean.getAttribute to support reading coreHashCode.\n\nFixed (and simplified) test to compare registered mbeans with info registry size. Comparing number of mbeans between core reloads is flawed because when tests run in parallel, mbeans from multiple tests can be registered in the same mbean server. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13068247",
            "date": "2011-07-20T09:47:56+0000",
            "content": "Fixed tests for trunk "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13068262",
            "date": "2011-07-20T10:20:53+0000",
            "content": "Committed revision 1148681 on trunk and 1148683 on branch_3x. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106224",
            "date": "2011-09-16T14:48:53+0000",
            "content": "bulk close for 3.4 "
        }
    ]
}