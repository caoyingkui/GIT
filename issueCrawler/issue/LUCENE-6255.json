{
    "id": "LUCENE-6255",
    "title": "PhraseQuery inconsistencies",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.1"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "PhraseQuery behaves quite inconsistently when the position of the first term is greater than 0. Here is an example:\n\n\n    Directory dir = newDirectory();\n    RandomIndexWriter iw = new RandomIndexWriter(random(), dir);\n    FieldType customType = new FieldType(TextField.TYPE_NOT_STORED);\n    customType.setOmitNorms(true);\n    Field f = new Field(\"body\", \"\", customType);\n    Document doc = new Document();\n    doc.add(f);\n    f.setStringValue(\"one quick fox\");\n    iw.addDocument(doc);\n    IndexReader ir = iw.getReader();\n    iw.close();\n    IndexSearcher is = newSearcher(ir);\n    \n    PhraseQuery pq = new PhraseQuery();\n    pq.add(new Term(\"body\", \"quick\"), 0);\n    pq.add(new Term(\"body\", \"fox\"), 1);\n    System.out.println(is.search(pq, 1).totalHits); // 1\n\n    pq = new PhraseQuery();\n    pq.add(new Term(\"body\", \"quick\"), 10);\n    pq.add(new Term(\"body\", \"fox\"), 11);\n    System.out.println(is.search(pq, 1).totalHits); // 0\n    \n    pq = new PhraseQuery();\n    pq.add(new Term(\"body\", \"quick\"), 10);\n    System.out.println(is.search(pq, 1).totalHits); // 1\n    \n    pq = new PhraseQuery();\n    pq.add(new Term(\"body\", \"quick\"), 10);\n    pq.add(new Term(\"body\", \"fox\"), 11);\n    pq.setSlop(1);\n    System.out.println(is.search(pq, 1).totalHits); // 1\n    \n    ir.close();\n    dir.close();\n\n\n\nThe reason is that when you add a term with position P on a PhraseQuery, ExactPhraseScorer ignores all positions for this term which are less than P.\n\nBut this is inconsistent:\n\n\tif you have a single term, it does not work anymore since we rewrite to a term query regardless of the position of the term (3rd query)\n\tif you increase the slop, we will use SloppyPhraseScorer which does not have this behaviour. (4th query)\n\n\n\nSo I think we have two options:\n\n\teither remove this behaviour and make the positions that are provided to PhraseQuery only relative (ie. fix ExactPhraseScorer)\n\tor make it work this way across the board (which means not rewriting to a term query when the position is not 0 and fixing SloppyPhraseScorer).",
    "attachments": {
        "LUCENE-6255.patch": "https://issues.apache.org/jira/secure/attachment/12699631/LUCENE-6255.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14326371",
            "author": "Adrien Grand",
            "date": "2015-02-18T18:49:48+0000",
            "content": "I am not even sure what the behaviour should be for sloppy phrases if we decide on the second option. And I'm concerned it might make the implementation more complicated and/or slower. "
        },
        {
            "id": "comment-14326382",
            "author": "Michael McCandless",
            "date": "2015-02-18T18:58:25+0000",
            "content": "I think exact PhraseQuery shouldn't support this 'leading wildcards' case?  Throw an exc if the user tries to do that? "
        },
        {
            "id": "comment-14326876",
            "author": "Robert Muir",
            "date": "2015-02-19T01:50:44+0000",
            "content": "Can we avoid throwing an exception to the user?\n\nI don't think its their fault if they type \"the query\", and the search engine has a stopword filter in the chain. It will confuse them, they dont get an error with \"query the\". \nI mean, its still possible to throw it if we really want from the query side, but it just makes queryparsers more complicated, because any sane parser will want to avoid this explicitly. i really don't think its the right response, and I think its rare enough that people will see that response as a bug. "
        },
        {
            "id": "comment-14327132",
            "author": "Adrien Grand",
            "date": "2015-02-19T08:55:45+0000",
            "content": "Here is a middle ground proposal:\n\n\tenforce that terms are added in order of positions\n\tenforce that positions are all positive\n\tPhraseQuery still accepts that the first position is greater than 0 but PhraseWeight does not\n\tPhraseQuery.rewrite takes care of rebasing positions if the first one is not 0\n\n\n\nThis way, PhraseQuery would still be friendly to query parsers that create phrase queries from a token stream. "
        },
        {
            "id": "comment-14327369",
            "author": "Robert Muir",
            "date": "2015-02-19T13:03:43+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14327633",
            "author": "ASF subversion and git services",
            "date": "2015-02-19T15:30:02+0000",
            "content": "Commit 1660910 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1660910 ]\n\nLUCENE-6255: Fix PhraseQuery inconsistencies. "
        },
        {
            "id": "comment-14327640",
            "author": "ASF subversion and git services",
            "date": "2015-02-19T15:41:53+0000",
            "content": "Commit 1660915 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1660915 ]\n\nLUCENE-6255: Fix PhraseQuery inconsistencies. "
        },
        {
            "id": "comment-14495293",
            "author": "Timothy Potter",
            "date": "2015-04-15T00:30:27+0000",
            "content": "Bulk close after 5.1 release "
        }
    ]
}