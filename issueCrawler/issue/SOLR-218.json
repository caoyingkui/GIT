{
    "id": "SOLR-218",
    "title": "Support for Lucene QueryParser properties via solrconfig.xml file",
    "details": {
        "affect_versions": "1.1.0",
        "status": "Closed",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Workaround"
    },
    "description": "The SolrQueryParser class, which extends Lucene's QueryParser class, does not provide any way of setting the various QueryParser properties via the solr config file (solrconfig.xml). These properties include:\n\nallowLeadingWildcard (Set to true to allow * and ? as the first character of a PrefixQuery and WildcardQuery)\ndateResolution: Sets the default date resolution used by RangeQueries for fields for which no specific date resolutions has been set.\ndefaultOperator: Sets the boolean operator of the QueryParser.\nfuzzyMinSim: Set the minimum similarity for fuzzy queries.\nlocale: Set locale used by date range parsing.\nlowercaseExpandedTerms: Whether terms of wildcard, prefix, fuzzy and range queries are to be automatically lower-cased or not.\nphraseSlop: Sets the default slop for phrases.\nuseOldRangeQuery: By default QueryParser uses new ConstantScoreRangeQuery in preference to RangeQuery for range queries.\n\nThis can be achieved by calling the setter methods for these properties in the SolrQueryParser constructor,\n\n  public SolrQueryParser(IndexSchema schema, String defaultField) \n{\n    super(defaultField == null ? schema.getDefaultSearchFieldName() : defaultField, schema.getQueryAnalyzer());\n    this.schema = schema;\n    setAllowLeadingWildcard(SolrConfig.config.getBool(\"query/setAllowLeadingWildcard\"));\n    setLowercaseExpandedTerms(SolrConfig.config.getBool(\"query/lowerCaseExpandedTerms\"));\n  }\n\nIn addition, solr should not modify these values from the defaults provided by Lucene, as it currently does by calling setLowercaseExpandedTerms(false) in this method.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12492418",
            "date": "2007-04-27T23:13:38+0000",
            "content": "1) these options shouldn't be specified in the solrconfig.xml, they should come from the schema.xml (since knowing whether you want these options tends to depends on how you have configured the fields) ... the <solrQueryParser .. /> directive already exists for this purpose, and defaultOperator is already supported.\n\n2) these settings shouldn't be applied in the constructor for SolrQueryParser per the contract described in it's comment...\n  /**\n\n\tConstructs a SolrQueryParser using the schema to understand the\n\tformats and datatypes of each field.  Only the defaultSearchField\n\twill be used from the IndexSchema (unless overridden),\n\t<solrQueryParser> will not be used.\n...changing that makes it very hard for plugin writers to subclass SolrQueryParser to get a schema aware parser with no other changes.  This is what QueryParsing.parseQuery is for (although i fully support a new factory method for returning an instance of a SolrQueryParser with these options set on it.\n\n\n\n3) options like dateResolution assume use of DateTools which is not what DateField uses ... it's possible some users might be using StrField and using DateTools to format it on the client side, but we should think carefully before adding this option.\n\n4) do we want another option to enable/disable the use of PrefixFilter for prefix queries that is currently in SolrQueryParser?  it does cause problems with highlighting prefix queries.\n\n5) regarding this comment...\n\n> In addition, solr should not modify these values from the defaults provided by Lucene, as it currently does by \n> calling setLowercaseExpandedTerms(false) in this method.\n\n...while i fully agree with this sentiment, changing now to align ourselves with the Lucene default would break backwards compatibility for existing Solr users.  if the option is not used i the schema.xml, we need to assume setLowercaseExpandedTerms(false). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12492427",
            "date": "2007-04-28T00:34:45+0000",
            "content": "With regards to doing something like lowercasing wildcard queries, that should be a per-field setting for Solr.\nBut as I stated here: http://www.nabble.com/case-sensitivity-tf3654523.html\nI think Solr should figure out the right thing to do automatically.\nThe implementation should probably be a method on FieldType that handles lowercasing (or otherwise manipulating) the wildcard query if necessary, or perhaps throwing an exception if it's just not supported for that field type. "
        },
        {
            "author": "Michael Pelz-Sherman",
            "id": "comment-12492429",
            "date": "2007-04-28T01:12:26+0000",
            "content": "I just don't see how it's possible for Solr to \"figure out the right thing to do automatically\" in every case.\n\nEven if this were possible, I don't see how it harms Solr to offer access to these configuration parameters. Whether this is done through the solrconfig.xml or the schema.xml isn't really important to me; I would just like to have some way of adjusting these parameters without having to write a plugin. If it can be a per-field setting, great, but it's nice to have a global setting as well.\n\nAs for setLowercaseExpandedTerms(), it seems to me that Solr should not override the default settings provided by Lucene without a very solid reason. For such a young product, I question whether backward compatibility is a valid justification for doing so.\n\nAnyway, thanks very much for considering this. Meanwhile, I will look at writing a plugin so I can get the functionality I need without having to modify the Solr source.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12492433",
            "date": "2007-04-28T03:34:58+0000",
            "content": "> Meanwhile, I will look at writing a plugin so I can get the functionality I need without having to modify the Solr source.\n\nI'm confident this will be fixed, but in the meantime isn't the simplest solution to lowercase any prefix or wildcard query in the client? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12492438",
            "date": "2007-04-28T04:59:40+0000",
            "content": "> I just don't see how it's possible for Solr to \"figure out the right thing to do automatically\" in every case. \n\nHere's my shot at it: SOLR-219 "
        },
        {
            "author": "Michael Kimsal",
            "id": "comment-12493103",
            "date": "2007-05-02T13:37:45+0000",
            "content": "    setAllowLeadingWildcard(SolrConfig.config.getBool(\"query/setAllowLeadingWildcard\"));\n    setLowercaseExpandedTerms(SolrConfig.config.getBool(\"query/lowerCaseExpandedTerms\")); \n=============================================================================\n\nFrom what I understand, these sorts of things could likely be handled by custom query parsers.  However, \nI'm voting for this because I'd like to see the ability to configure these items globally first, as well as \nalready having the option to write custom query parsers if needed.  This provides an easier way to \nconfigure the behaviour without needing to write code or recompile anything. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12502020",
            "date": "2007-06-06T18:31:25+0000",
            "content": "reminder: when addressing this, we should make sure there is an option for turning of ConstantScorePrefixQuery as well .. some people may prefer the stock lucene behavior (particularly if no good solution is found for SOLR-195) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12555260",
            "date": "2008-01-02T07:23:05+0000",
            "content": "quick throught for anyone that may want to tackle a patch for this... given the \"recent\" addition of search components, it may make sense to completley deprecate the existing <solrQueryParser .. /> directive in the schema.xml and make all of these options for the \"QueryComponent\" class.\n\n(that way people can register multiple instances of the QueryComponent with different options, and hen use those alternate instances in different handler instances) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12605451",
            "date": "2008-06-16T23:06:52+0000",
            "content": "In response to a question on the mailing list about how best to tackle this...\n\nIt's not documented very well (or: at all) at the moment, but it's now possible to declare \"<queryParser>\" in your solrconfig.xml, just like <requestHandler>\" ... and those each correspond to a QParserPlugin.  The LuceneQParserPlugin could be modified to take in some init options and use them in it's \"createParser\" method to set options on the underlying\nSolrQueryParser.  people could declare multiple instances of the LuceneQParserPlugin with differnet names, and use them by specifying a defType in their request \u2013 or they could give one of those instance the name \"lucene\" and it will be used by default.\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12670784",
            "date": "2009-02-05T15:10:12+0000",
            "content": "Marking for 1.5 "
        },
        {
            "author": "Jonas Salk",
            "id": "comment-12700531",
            "date": "2009-04-18T20:17:28+0000",
            "content": "Not an expert at SOLR, currently using the default configurations which are shipped with it.   Taking suggestions above to update SolrQueryParser to allow for leading wildcard as allowed by Lucene, i modified the following 2 methods:\n\npublic SolrQueryParser(IndexSchema schema, String defaultField) \n{\n     ... \n    // added \n    setAllowLeadingWildcard(true); \n    setLowercaseExpandedTerms(true);\n    ... \n  }\n ...\n  public SolrQueryParser(QParser parser, String defaultField, Analyzer analyzer) \n{\n    ... \n    setAllowLeadingWildcard(true); \n    setLowercaseExpandedTerms(true);\n    ... \n  }\n\neverything compiled and 'ant' built a distro.   However, still throws an exception on a query request:\n\nTest query:  \"http://localhost:8983/solr/select/?indent=on&q=CommentText:Hello\"\n\nFinds two documents.   \n\nHowever, wildcard query:  \"http://localhost:8983/solr/select/?indent=on&q=CommentText:*ello\"\n\nthrows this exception:\norg.apache.lucene.queryParser.ParseException: Cannot parse 'CommentText:ello': '' or '?' not allowed as first character in WildcardQuery\n\nAny suggestions on how i can prevent this exception and get this to work?\n\nRegards,\nJonas "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12700588",
            "date": "2009-04-19T13:56:49+0000",
            "content": "Hey Jonas, I just did the same and it worked no problem.\n\nPerhaps try a clean and build the project again?\n\nI grabbed a fresh checkout of Solr, loaded the example docs, tried your search but with the 'name:*pod'  and it blew up as expected.\n\nI made the changes, ran example again, and the queries worked as expected.\n\nAnything of importance that you have going on different there? "
        },
        {
            "author": "Jonas Salk",
            "id": "comment-12700793",
            "date": "2009-04-20T13:52:22+0000",
            "content": "That is good to hear Mark.   Would you mind taking a few minutes and putting down exact code changes you made?    I want to backtrack everything i did to ensure, I've not made some mistakes.   I've basically updated only one Java file:  SolrQueryParser.java.  \n\nI'm using:  apache-solr-1.3.0 \nJonas\n\nSolrQueryParser.java\n------------------------------\npublic SolrQueryParser(IndexSchema schema, String defaultField) \n{\n ... \n// added \nsetAllowLeadingWildcard(true); \nsetLowercaseExpandedTerms(true);\n ...\n }\n...\npublic SolrQueryParser(QParser parser, String defaultField, Analyzer analyzer)\n { \n... \nsetAllowLeadingWildcard(true); \nsetLowercaseExpandedTerms(true); \n...\n } "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12700802",
            "date": "2009-04-20T14:26:45+0000",
            "content": "I made the same changes, but I was using trunk. I'll give it a shot with 1.3 in a bit and report back. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872487",
            "date": "2010-05-27T22:06:22+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043651",
            "date": "2011-06-03T16:46:20+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106373",
            "date": "2011-09-16T14:50:47+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234673",
            "date": "2012-03-21T18:08:49+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717146",
            "date": "2013-07-23T18:47:16+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13851637",
            "date": "2013-12-18T12:23:51+0000",
            "content": "Mark Miller This is an old issue and SolrQueryParser has changed since that time. There is an effort for leading wildcard at comments of current issue but https://issues.apache.org/jira/browse/SOLR-1321 has resolved the problem as like described here: http://lucene.472066.n3.nabble.com/hi-allowLeadingWildcard-is-it-possible-or-not-yet-td495457.html Is there anything to do for this issue? if not issue can be closed, if yes I can help and create a patch for it. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971204",
            "date": "2014-04-16T12:57:27+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15539939",
            "date": "2016-10-02T07:31:38+0000",
            "content": "An old issue that went into several different directions and JIRAs with original approach no longer applicable. This issue was suggested to be closed nearly 3 years ago and there were no objections. "
        }
    ]
}