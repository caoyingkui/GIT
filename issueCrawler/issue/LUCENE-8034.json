{
    "id": "LUCENE-8034",
    "title": "SpanNotWeight returns wrong results due to integer overflow",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "core/query/scoring",
            "core/search"
        ],
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ]
    },
    "description": "In SpanNotQuery, there is an acceptance condition:\n\nif (candidate.endPosition() + post <= excludeSpans.startPosition()) {\n    return AcceptStatus.YES;\n}\n\n\n\nThis overflows in case `candidate.endPosition() + post > Integer.MAX_VALUE`. I have a fix for this which I am working on. Basically I am flipping the add to a subtract.",
    "attachments": {
        "LUCENE-8034.patch": "https://issues.apache.org/jira/secure/attachment/12896273/LUCENE-8034.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16239791",
            "date": "2017-11-06T01:03:05+0000",
            "content": "Patch looks good; I'll commit soon.  Thanks Hari Menon!\n\nBut how/why are you creating such massive positions in your index in the first place? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16239792",
            "date": "2017-11-06T01:06:07+0000",
            "content": "It currently causes scores to go negative without the fix? good catch! ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16239836",
            "date": "2017-11-06T02:37:57+0000",
            "content": "Michael McCandless That's a good question, and actually something I could use help with. It would be awesome if you could let me know if there are any potential bottlenecks with the way I am trying to solve this problem. Let me know if I should instead post to the users@ mailing list. Here is the problem I am trying to solve:\n\nI have to index documents of type A, which internally have sub-documents of type B. e.g A1 might contain sub-documents B11, B12, B13 etc. A2 can contain B21, B22, B23, B24 and so on. My search use case is such that I might want to have matches where all the search terms are within a particular B-document, or it could be within a particular A-document. Besides, I need the B-document Ids that matched in both cases. I know that my B-documents have a fixed max. number of words (say 500). The way I am solving this right now is:\n\n\tUse A as the lucene document to be indexed, with a field \"text\" containing text from the B sub-documents.\n\tThe idea is to index B11 between position 0 and 499, B12 from 1000 to 1499, B13 from 2000 to 2499 and so on. I am using PositionIncrementTokenStream to fix the positions.\n\tThen use SpanQueries with slop of 500 if we want to search within B-documents, and slop of Int.MAX_VALUE if we want to search in the entire A-document. Using SpanQuery also gives me easy access to position, which I can then divide by 1000 to get the index of the actual B-document. This is where I was trying to use max span of Int.MAX_VALUE and ran into this issue.\n\n\n\nDoes this make sense? Let me know if you see any gaping holes or perf issues with this approach. I am still new to lucene and haven't done a full perf benchmark with this approach as I am still building a prototype.\n\nRobert Muir Will it affect scores? I think it will just not select the given record, right? ",
            "author": "Hari Menon"
        },
        {
            "id": "comment-16239839",
            "date": "2017-11-06T02:42:44+0000",
            "content": "I think you are right, I was just confused by the test. Maybe the test could be slightly tweaked to assertTrue(searcher.explain(query, 801).isMatch()) instead of asserting that the score is positive? ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16240759",
            "date": "2017-11-06T19:38:03+0000",
            "content": "Robert Muir That makes sense. I'll make that change. I'll actually remove the asserts, as all we need to verify that the hit was returned. So `checkHits()` should be enough. ",
            "author": "Hari Menon"
        },
        {
            "id": "comment-16240924",
            "date": "2017-11-06T21:19:11+0000",
            "content": "Updated to remove the asserts on score as it was misleading. We only need to verify that the results were picked. ",
            "author": "Hari Menon"
        },
        {
            "id": "comment-16263518",
            "date": "2017-11-22T23:01:35+0000",
            "content": "Commit 726ee05240a65badf6c3499dd1e29daf490a3e48 in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=726ee05 ]\n\nLUCENE-8034: use subtraction instead of addition to sidestep int overflow in SpanNotQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16263528",
            "date": "2017-11-22T23:08:30+0000",
            "content": "Commit 6b328dcd4f90f4b61961b1d3a16629b4ae0c3ece in lucene-solr's branch refs/heads/branch_7x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6b328dc ]\n\nLUCENE-8034: use subtraction instead of addition to sidestep int overflow in SpanNotQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16263529",
            "date": "2017-11-22T23:08:46+0000",
            "content": "Thank you Hari Menon! ",
            "author": "Michael McCandless"
        }
    ]
}