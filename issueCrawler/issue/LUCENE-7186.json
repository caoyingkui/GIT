{
    "id": "LUCENE-7186",
    "title": "Add numerically stable morton encoding to GeoEncodingUtils",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "This is the follow on to LUCENE-7184.  It adds a numerically stable morton encoding method to o.a.l.geo.GeoEncodingUtils that can be reused by GeoPointField and a new GeoPointField based on Point encoding.",
    "attachments": {
        "LUCENE-7186.patch": "https://issues.apache.org/jira/secure/attachment/12797392/LUCENE-7186.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15229173",
            "author": "Nicholas Knize",
            "date": "2016-04-06T21:34:24+0000",
            "content": "Patches will depend on patch from LUCENE-7184. "
        },
        {
            "id": "comment-15229178",
            "author": "Nicholas Knize",
            "date": "2016-04-06T21:36:24+0000",
            "content": "Attached patch:\n\n\n\tadds numerically stable mortonEncode method to o.a.l.geo.GeoEncodingUtils\n\tadds initial stability tests\n\n "
        },
        {
            "id": "comment-15232143",
            "author": "Nicholas Knize",
            "date": "2016-04-08T12:57:07+0000",
            "content": "Updated patch:\n\n\n\tadds mortonEncode and mortonEncodeCeil\n\tupdates stability testing to be consistent with other encoding tests\n\n "
        },
        {
            "id": "comment-15235185",
            "author": "Nicholas Knize",
            "date": "2016-04-11T14:38:37+0000",
            "content": "Updated patch includes the following cleanup:\n\n\n\tMoves 31 bit GeoPointField encoding methods from o.a.l.spatial.util.GeoEncodingUtils to GeoPointField in prep for deprecation\n\tCuts over to GeoEncodingUtils in core module\n\tRemoves duplicate GeoEncodingUtils from spatial module\n\n\n\nI think this is just about ready. "
        },
        {
            "id": "comment-15241588",
            "author": "Michael McCandless",
            "date": "2016-04-14T17:47:52+0000",
            "content": "Instead of:\n\n\nprivate static final long TRANSLATE = (0L | Integer.MAX_VALUE) + 1;\n\n\n\ncan we do:\n\nprivate static final long TRANSLATE = 1L << 31;\n\n\n\nIs that the same thing?  Also, why do we need TRANSLATE?  Can we maybe\nname it more descriptively, or put a comment, or something?  Maybe\nit's trying to accomplish the same thing as\nNumericUtils.intToSortableBytes, where it xors the sign bit, so negatives\nsort first?  Maybe we should also use xor here?\n\nInstead of:\n\n\n0L | lonEnc\n\n\n\ncan't we just do:\n\nlonEnc\n\n\n\n?\n\nInstead of:\n\n\n      // test within the range\n      if ((encoded ^ 0xFFFFFFFFFFFFFFFFL) != 0) {\n\n\n\ncan we do:\n\n\n      // test within the range\n      if (encoded != 0xFFFFFFFFFFFFFFFFL) {\n\n\n\n?\n\nCan we checkLatitude and checkLongitude in mortonEncode/Ceil? "
        },
        {
            "id": "comment-15241861",
            "author": "Nicholas Knize",
            "date": "2016-04-14T20:35:41+0000",
            "content": "Thanks for the feedback Michael McCandless! updated patch includes changes. "
        },
        {
            "id": "comment-15241866",
            "author": "Nicholas Knize",
            "date": "2016-04-14T20:38:10+0000",
            "content": "wrong patch... new one attached "
        },
        {
            "id": "comment-15243346",
            "author": "Michael McCandless",
            "date": "2016-04-15T18:15:21+0000",
            "content": "This comment confuses me   And I think because we are making core changes here, we really should spend the time to make things as understandable as we can:\n\n\n+  // translates quantized values from range starting at Integer.MIN_VALUE to 0\n+  // once interleaved this represents a quad tree space from  000 ... FFF such\n+  // that DFS traversal is achieved through bit masking\n+  private static final long TRANSLATE = 1L << 31;\n\n\n\nI'm asking again   Isn't this just doing the same thing as the xor of the sign bit that NumericUtils does?  If so, I think the xor (and the comment Uwe wrote above it!) is cleaner?\n\nStepping back ... why are we adding this API to Lucene's core APIs now?  If I understand correctly, it's only GeoPointField (with its 31 bit encoding that we want to move up to 32 bits, using the same encoding as LatLonPoint) that needs to use it, now?  Can this instead remain in the spatial module, and only later, once we have a 1D points based morton encoded geo field, can we then think about making these available in core?\n\nI think, if we see at least 3 of the 4 spatial modules needing a common API, it makes sense to have it in core ... this is why we e.g. added Rectangle and Polygon, and checkLatitude/Longitude, but if it's only 1 of the 4, I think that one module should keep that API package private? "
        },
        {
            "id": "comment-15243351",
            "author": "David Smiley",
            "date": "2016-04-15T18:17:35+0000",
            "content": "Stepping back ... why are we adding this API to Lucene's core APIs now? If I understand correctly, it's only GeoPointField (with its 31 bit encoding that we want to move up to 32 bits, using the same encoding as LatLonPoint) that needs to use it, now? Can this instead remain in the spatial module, and only later, once we have a 1D points based morton encoded geo field, can we then think about making these available in core?\n\n+1! "
        },
        {
            "id": "comment-15243505",
            "author": "Nicholas Knize",
            "date": "2016-04-15T20:03:56+0000",
            "content": "I'm asking again Isn't this just doing the same thing as the xor of the sign bit that NumericUtils does? If so, I think the xor (and the comment Uwe wrote above it!) is cleaner?\n\nBoth ways work. Translation seemed more natural to me but if the bit flip makes more sense for others I'll make the change.\n\n...only later, once we have a 1D points based morton encoded geo field, can we then think about making these available in core?\n\nSure. We can carry two GeoEncodingUtils classes for the time being and refactor this later. "
        },
        {
            "id": "comment-15243508",
            "author": "Nicholas Knize",
            "date": "2016-04-15T20:06:30+0000",
            "content": "Actually, to avoid confusion I'll just refactor GeoEncodingUtils in the spatial module to MortonEncoder. "
        },
        {
            "id": "comment-15243550",
            "author": "Nicholas Knize",
            "date": "2016-04-15T20:38:26+0000",
            "content": "Yet another patch:\n\n\n\tRefactors spatial module's GeoEncodingUtils to MortonEncoder\n\tAdds TestMortonEncoder\n\tIncludes feedback changes\n\n "
        },
        {
            "id": "comment-15244469",
            "author": "Michael McCandless",
            "date": "2016-04-16T23:35:40+0000",
            "content": "Thanks Nicholas Knize, I think this is close!\n\nHmm I see some tests being deleted, e.g. TestGeoEncodingUtils.testEncodeDecodeRoundsDown?\n\nCan you also fix GeoPointField.encodeLatLon:\n\n\n    if ((result ^ 0xFFFFFFFFFFFFFFFFL) == 0) {\n      return result & 0xC000000000000000L;\n    }\n\n\n\nto just use == 0xFFFFL instead? "
        },
        {
            "id": "comment-15247815",
            "author": "Nicholas Knize",
            "date": "2016-04-19T14:16:53+0000",
            "content": "Thanks for reviewing this Michael McCandless. Updated patch attached.\n\nHmm I see some tests being deleted\n\nIn the same spirit as TestGeoEncodingUtils those are now tested by TestMortonEncoder.testMortonEncoding "
        },
        {
            "id": "comment-15247838",
            "author": "Robert Muir",
            "date": "2016-04-19T14:26:14+0000",
            "content": "Yes +1 to nuke testEncodeDecodeRoundsDown. I wrote this test and it initially found some bugs but it turned out to be too wimpy for a number of reasons. It could no longer find the bugs we were encountering. It provides us no benefits, instead only the downside of being tested with epsilons. "
        },
        {
            "id": "comment-15252085",
            "author": "ASF subversion and git services",
            "date": "2016-04-21T15:52:10+0000",
            "content": "Commit 545a14000bf4c02f25d6a3a4a52d51326199965f in lucene-solr's branch refs/heads/master from nknize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=545a140 ]\n\nLUCENE-7186: add a numerically stable morton encoding method to GeoEncodingUtils "
        },
        {
            "id": "comment-15252130",
            "author": "ASF subversion and git services",
            "date": "2016-04-21T16:13:02+0000",
            "content": "Commit 8d655fbd4e630c65594231d2c35f1c0f643d490d in lucene-solr's branch refs/heads/branch_6x from nknize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8d655fb ]\n\nLUCENE-7186: add a numerically stable morton encoding method to GeoEncodingUtils "
        }
    ]
}