{
    "id": "LUCENE-4796",
    "title": "NamedSPILoader.reload needs to be synchronized",
    "details": {
        "components": [],
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spun off of SOLR-4373: as discsused with uwe on IRC, NamedSPILoader.reload is not thread safe: it reads from this.services at the beginging of hte method, makes additions based on the method input, and then overwrites this.services at the end of the method.  if the method is called by two threads concurrently, the entries added by threadB could be lost if threadA enters the method before threadB and exists the method after threadB",
    "attachments": {
        "LUCENE-4796.patch": "https://issues.apache.org/jira/secure/attachment/12570854/LUCENE-4796.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-02-25T19:05:16+0000",
            "content": "Hoss: I agree!\n\nThe concurrency issue in NamedSPILoader can indeed be solved by making the reload method synchonized. The services field is volatile, so readers will in any case see the correct value, otherwise all methods would need to be synchronized. By using a voltile, we only need to synchronize this single method. ",
            "author": "Uwe Schindler",
            "id": "comment-13586144"
        },
        {
            "date": "2013-02-25T20:24:05+0000",
            "content": "We have to fix the same issue in AnalysisSPILoader which is (unfortunately) a different class with some code duplication (in analysis/common module). ",
            "author": "Uwe Schindler",
            "id": "comment-13586257"
        },
        {
            "date": "2013-02-25T21:24:34+0000",
            "content": "We have to fix the same issue in AnalysisSPILoader which is (unfortunately) a different class with some code duplication\n\nAhhhh... that could totally explain why my naive attempt at fixing SOLR-4373 a while back didn't seem to work \u2013 i was only aware of NamedSPILoader but did ad hock testing using analyzer factories.\n\nUwe: looking at your patch, one thing that jumps out at me is that AnalysisSPILoader seems to have another exist bug that may also cause some similar problems, regardless of thread safety...\n\n\n  public synchronized void reload(ClassLoader classloader) {\n    final SPIClassIterator<S> loader = SPIClassIterator.get(clazz, classloader);\n    final LinkedHashMap<String,Class<? extends S>> services = new LinkedHashMap<String,Class<? extends S>>();\n\n\n\n...shouldn't that LinkedHashMap be initialized with a copy of this.services (just like in NamedSPILoader.reload) so successive calls to reload(...) don't \"forget\" services that have already been added?\n\n(if you only call reload on child classloaders, then i imagine this wouldn't cause any problems, but with independent sibling classloaders it seems like calls stacks along the lines of..\n\n\nanalysisloader = new AnalysisSPILoader(Foo.class, parentClassLoader);\nanalysisloader.reload(childAClassLoader); \nanalysisloader.reload(childBClassLoader);\n\n\n\n...would cause the loader to \"forget\" about any services it found in childAClassloader) ",
            "author": "Hoss Man",
            "id": "comment-13586301"
        },
        {
            "date": "2013-02-25T21:37:56+0000",
            "content": "Thanks Hoss,\nthis is indeed another bug. Too stupid! - copypaste error from the earlier days. In my opinion, thecode duplication is horrible, but AnalysisFactories unfortunately dont inplement NamedSPI, so have no name. ",
            "author": "Uwe Schindler",
            "id": "comment-13586315"
        },
        {
            "date": "2013-02-25T23:50:22+0000",
            "content": "+1 ... looks good to me. ",
            "author": "Hoss Man",
            "id": "comment-13586481"
        },
        {
            "date": "2013-02-26T16:56:29+0000",
            "content": "[trunk commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1450275\n\nLUCENE-4796, SOLR-4373: Fix concurrency issue in NamedSPILoader and AnalysisSPILoader when doing concurrent core loads in multicore Solr configs\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13587254"
        },
        {
            "date": "2013-02-26T16:56:59+0000",
            "content": "I committed the fix for the concurrency bug and the incorrect reload starting with empty map instead of old map ",
            "author": "Uwe Schindler",
            "id": "comment-13587256"
        },
        {
            "date": "2013-02-26T17:04:27+0000",
            "content": "[branch_4x commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1450276\n\nMerged revision(s) 1450275 from lucene/dev/trunk:\nLUCENE-4796, SOLR-4373: Fix concurrency issue in NamedSPILoader and AnalysisSPILoader when doing concurrent core loads in multicore Solr configs ",
            "author": "Commit Tag Bot",
            "id": "comment-13587263"
        },
        {
            "date": "2013-05-10T10:34:08+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654130"
        }
    ]
}