{
    "id": "SOLR-8389",
    "title": "Convert CDCR peer cluster and other configurations into collection properties modifiable via APIs",
    "details": {
        "components": [
            "CDCR",
            "SolrCloud"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "CDCR configuration is kept inside solrconfig.xml which makes it difficult to add or change peer cluster configuration.\n\nI propose to move all CDCR config to collection level properties in cluster state so that they can be modified using the existing modify collection API.",
    "attachments": {
        "Screen Shot 2017-12-21 at 5.44.36 PM.png": "https://issues.apache.org/jira/secure/attachment/12903224/Screen%20Shot%202017-12-21%20at%205.44.36%20PM.png",
        "SOLR-8389.patch": "https://issues.apache.org/jira/secure/attachment/12898078/SOLR-8389.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-09-20T00:54:04+0000",
            "author": "Amrit Sarkar",
            "content": "Shalin,\n\nI will give it a go to get this done. Will post patch and more information once I have something of substance. ",
            "id": "comment-16172562"
        },
        {
            "date": "2017-09-20T17:31:19+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Sounds great! Looking forward to it. ",
            "id": "comment-16173546"
        },
        {
            "date": "2017-09-28T11:01:04+0000",
            "author": "Amrit Sarkar",
            "content": "Proposed design:\n\nAs state.json for collections gets modified / overwritten every time there is a state change of the nodes, it is somehow risky to put the cdcr configurations in the same place, as it can trigger unnecessary bootstrap and other inconsistencies.\n\nOn an offline discussion with Shalin Shekhar Mangar, we plan to:\n\n1. have seperate config json for cdcr at root level dir in zookeeper: /cdcr.json\n2. they should be collection specific in following format:\n\n{\n    \"collection1\": {\n        \"replica\": {\n            \"zkHost\":\"target-zk-host:target-zk-port/chroot-to-solr\",\n            \"source\":\"collection1\",\n            \"target\":\"collection1\"\n            },\n        \"replicator\": {\n            \"threadPoolSize\":\"8\",\n            \"schedule\":\"1000\",\n            \"batchSize\":\"128\"\n            },\n        \"updateLogSynchronizer\": {\n            \"schedule\":\"1000\"\n            }\n    }\n}\n\n\n3. the cdcr config should be passed with CREATE collection command as the collection must use CdcrUpdateLog and not the conventional one, UpdateLog.\n4. expose collections api like SETCDCR to modify CDCR configuration. It will require collection reload, hence will be implicit. REMOVECDCR api should not be exposed, as it will be of no use since the collection is already created with CdcrUpdateLog.\n\nThe back-combat will be established, with cdcr json config overriding solrconfig ones.\n\nIf no objection with the design, will move forward with development. ",
            "id": "comment-16184000"
        },
        {
            "date": "2017-10-09T21:41:48+0000",
            "author": "Peter Rusko",
            "content": "Hi Amrit,\n\nI\u2019m working on something that would solve this problem. I already have a working prototype and can upload a patch soon.\n\nThe idea is to add the concept of collection properties. It\u2019s a key value map that would be stored in the collections/<coll>/collectionprops.json znode for each collection in json format. The properties can be changed via /solr/admin/collections?action=COLLECTIONPROP?name=<coll>&propertyName=<prop>&value=<val>.\n\nZkStateReader keeps a set of watchers for each of them (one per collection), in a similar way to state.json. But on top of caching the values, it provides a method where you can add listeners, that will be called each time the znode is changed.\n\nI think this pretty much aligns with your idea, but will be a more scalable approach for the watchers. It can accommodate the CDCR properties as well as any other properties that could be needed for the collection. Let me know if this could work for you or if you have any questions. ",
            "id": "comment-16197742"
        },
        {
            "date": "2017-10-11T09:07:43+0000",
            "author": "Amrit Sarkar",
            "content": "Hi Peter,\n\nAbsolutely, this serves and solves the purpose. I was about to go to down the lines of autoscaling, glad you already worked that out. Couple of points I want to lay out specific for CDCR:\n\n1. The CDCR configurations will be uploaded at the time of collection creation. Calling the api, collection-props, you are working on, implicitly can be called if cdcr is involved.\n2. The idea is to keep cdcr away from state.json, so that it doesn't get rewritten by any node status change. I think the motivation of creating collection properties is the same, if not wrong.\n\nLooking forward to your patch and ultimately in the code, so that I can extend the same to regulate cdcr configurations and actions. Thanks Peter. ",
            "id": "comment-16199993"
        },
        {
            "date": "2017-10-13T03:13:02+0000",
            "author": "Varun Thacker",
            "content": "ZkStateReader keeps a set of watchers for each of them (one per collection), in a similar way to state.json. But on top of caching the values, it provides a method where you can add listeners, that will be called each time the znode is changed.\n\nWill it suffer from the same problem as putting the configs in state.json? Unrelated updates in the collection properties api might trigger a bootstrap ? \n\n ",
            "id": "comment-16203007"
        },
        {
            "date": "2017-10-13T15:57:42+0000",
            "author": "Amrit Sarkar",
            "content": "Peter, how often the collection properties will change? Are these properties comprise of user-defined ones or subjected to machine / node level properties? If unrelated updates are too frequent., I think Varun is right; it won't be helpful in this case atleast. Let us know.\n ",
            "id": "comment-16203745"
        },
        {
            "date": "2017-10-13T16:51:44+0000",
            "author": "Peter Rusko",
            "content": "The main concern was exactly the update frequency, that's why I separated this from state.json, to clusterprops.json. It will have its own watcher and won't be affected by clusterstate changes. The intention was to put user-defined properties here, which can be changed without restarting solr.\n\nVarun, I'm not sure what you mean by that. Currently unrelated collection property changes still trigger all the listeners, but given that they are all supposed to be rare (though nothing prevents anyone from writing properties from the code I guess), I don't see this as a problem. ",
            "id": "comment-16203842"
        },
        {
            "date": "2017-11-16T23:18:27+0000",
            "author": "Peter Rusko",
            "content": "Hi Amrit,\n\nI didn't have as much time as I wanted, but finally, here's the patch. This doesn't let you set up the properties at the collection creation, but I can add that too if it's needed. Let me know what you think.\n\nThanks,\nPeter ",
            "id": "comment-16256127"
        },
        {
            "date": "2017-11-17T22:47:56+0000",
            "author": "Amrit Sarkar",
            "content": "Peter Rusko,\n\nThank you for coming up with the patch. Allow me sometime to go through the improvement and would definitely seek your help and collaboration.\n\nThanks\nAmrit Sarkar ",
            "id": "comment-16257705"
        },
        {
            "date": "2017-12-18T19:13:57+0000",
            "author": "Erick Erickson",
            "content": "Haven't looked at all, but a comment on the user's list \n\nWDYT about making the target collection optional? If omitted it would be the same as the source collection....\n ",
            "id": "comment-16295497"
        },
        {
            "date": "2017-12-18T23:20:45+0000",
            "author": "Peter Rusko",
            "content": "This patch above is just providing a way for properties to be assigned to collections. It is pretty generic at the moment, the value can be anything, so you can assign any JSON value you want, it won't require a target collection to be set. The interpretation of the value comes down to the code reading the value.\n\nIt looks like it's missing two things. None of those seem to be important for the first iteration to me. One is the ability to assign a value at the collection creation time and the other is a support of a property value validator, which could check that the assigned value has certain fields for instance.\n\nIs it okay if we merge this patch as it is so far, provided someone can review it? Then I, or someone else with better ideas can add the two missing pieces above later, if they are needed. ",
            "id": "comment-16295829"
        },
        {
            "date": "2017-12-21T12:20:07+0000",
            "author": "Amrit Sarkar",
            "content": "I started working on extending the patch and collaborated with CDCR module, but was pulled away to professional duties and was not able to work further. I wrote a very rough patch, cleaning it now and should be able to get it ready soon. PFA screenshot of how cdcr.json looks like and sample CREATE collection command:\n\nhttp://localhost:8983/solr/admin/collections?action=CREATE&name=source_col&numShards=1&replicationFactor=1&cdcr=true&cdcr.replica.source=source_col&cdcr.replica.target=target_col&cdcr.replica.zkHost=localhost:8574\n\n\n\nPeter Rusko, I have extended your code to support nested json formatted properties like below:\n\n{\n  \"replica\":[{\n      \"source\":\"source_col\",\n      \"zkHost\":\"localhost:8574\",\n      \"target\":\"target_col\"}],\n  \"replicator\":{\n    \"schedule\":1000,\n    \"threadPoolSize\":2,\n    \"batchSize\":128},\n  \"buffer\":{\"defaultState\":\"disabled\"},\n  \"updateLogSynchronizer\":{\"schedule\":60000}}\n\n\n\nIn this example, not a single cdcr property mention is required in solrconfig.xml and using default configuration, a very significant and long time improvement coming.\n\nErick Erickson, I think I will be able to incorporate the target collection being optional and use the same source collection name as target if not specified quite easily.\n\nPeter Rusko Erick Erickson Varun Thacker Shalin Shekhar Mangar, I will be posting the updated patch real soon, hopefully before the year end and will be looking forward to your feedback and comments. ",
            "id": "comment-16299924"
        },
        {
            "date": "2017-12-27T13:15:50+0000",
            "author": "Amrit Sarkar",
            "content": "I would need some advice on designing the new APIs for CDCR specially adding / modifying target configs.\n\nthis is sample API I have designed for now which is very ineffective:\n\n /cdcr/action=MODIFY&replica.zkhost=zkhost:zkpost/chroot&replica.target=targetColName\n\nand add them sequentially to add all the target collection information ONE BY ONE.\n\nShould I configure JSON payload as request or use V2 API to pass multiple target configs at once? I know this configuration will be passed just one, and wouldn't hurt if target configs be passed one by one.\n\nLooking forward to suggestions, I am still cleaning code to support this and then will start modifying tests around all components. ",
            "id": "comment-16304519"
        },
        {
            "date": "2018-01-11T09:32:58+0000",
            "author": "Amrit Sarkar",
            "content": "Looking forward to feedback on previous comment on designing Modify API. Attached patch, Modify API is incomplete, half of the tests are written. ",
            "id": "comment-16321943"
        },
        {
            "date": "2018-01-15T12:53:19+0000",
            "author": "Amrit Sarkar",
            "content": "Fresh patch uploaded with no tests and documentation to have clean code for review and feedback. ",
            "id": "comment-16326208"
        },
        {
            "date": "2018-01-18T19:37:41+0000",
            "author": "Amrit Sarkar",
            "content": "Fully working clean code. Entire CDCR is working perfectly with back-combat. I am finishing up documentation and tests for this. ",
            "id": "comment-16331057"
        },
        {
            "date": "2018-01-21T13:31:57+0000",
            "author": "Amrit Sarkar",
            "content": "Meanwhile while writing tests, CDCR API have to move outside CdcrRequestHandler to the collection api, where Collection Reload is imminent. Need some advice on this. ",
            "id": "comment-16333516"
        },
        {
            "date": "2018-01-24T18:22:16+0000",
            "author": "Amrit Sarkar",
            "content": "Took me a while to refractor APIs and write decent tests which are running 100% successfully. Patch uploaded, still lot of unfinished tests and documentation are due, but core code is in place. I have cleaned and moduled as much I could. ",
            "id": "comment-16338025"
        },
        {
            "date": "2018-02-09T22:44:21+0000",
            "author": "Peter Rusko",
            "content": "Hi Amrit,\n\nYou've completely removed all the collection properties code, which\u00a0could be useful not just for this patch, but some other use cases too. I've created\u00a0SOLR-11960 to track that\u00a0feature.\u00a0I still think storing the properties that way has a lot of value and you could use it for\u00a0CDCR properties too. It is more generic, and should be easily extendable, should you need to add validation of the property, or a way to set them at collection creation time. ",
            "id": "comment-16359068"
        },
        {
            "date": "2018-02-16T21:08:55+0000",
            "author": "Amrit Sarkar",
            "content": "Hi Peter Rusko,\n\nI apologise I should have put down the details on how we are approaching on this JIRA with your patch. We are leveraging the patch provided by you to improve the CDCR configuration but obviously it has other use-cases and I see Tomas is reviewing on SOLR-11960. Well if SOLR-11960 goes in, then yes, I believe too we don't need a seperate cdcr.json, hence I will wait for others in the community to weigh in on agreeing to the common properties having cdcr ones. ",
            "id": "comment-16367882"
        }
    ]
}