{
    "id": "SOLR-10904",
    "title": "Unnecessary waiting during failover in case of failed core creation",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.0",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Background failover thread checks for bad replicas. In case one is found it tries to create it on another node. Then it waits for the new replica to show up in the cluster state. It waits even if the core creation (initiated by itself) fails. \n\nThis situation does not occur on the happy path of the failover cases because the new node was marked as alive. But in case the cluster is in an instable state, or user is restarting the new node, or overseer is overloaded this extra wait will result in holding up this failover thread.\n\nProposed solution may be\n\n\twait for the result of the core creation\n\tonly if previous step is successful proceed to wait for cluster state change\n\n\n\nIn code:\n\ntry {\n  Future<Boolean> future = updateExecutor.submit(() -> createSolrCore(collection, createUrl, dataDir, ulogDir, coreNodeName, coreName, shardId));\n  future.get(30000L, TimeUnit.MILLISECONDS);\n} catch (InterruptedException | ExecutionException | TimeoutException e) {\n  log.error(\"Error creating core\", e);\n  return false;\n} finally {\n  MDC.remove(\"OverseerAutoReplicaFailoverThread.createUrl\");\n}\n\n\n\nIn such case we could consider moving core creation into the failover thread from the updateExecutor.\n\nI can post a patch with these changes if the solution seems appropriate.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-03T15:35:28+0000",
            "content": "Mihaly Toth, do you have a patch for this one? I'd like to get any custom changes we have to this externally back upstream so that I can get things back in shape and the nightly test passing again. I'd feel a lot more comfortable flipping to the upcoming implementation with the old one working properly again first and with all our latest test updates. ",
            "author": "Mark Miller",
            "id": "comment-16189863"
        },
        {
            "date": "2017-10-04T14:40:04+0000",
            "content": "Mark Miller, I will try to put up a patch for this tonight. ",
            "author": "Mihaly Toth",
            "id": "comment-16191347"
        },
        {
            "date": "2017-11-07T18:15:30+0000",
            "content": "Ping Mihaly Toth - do you have a patch for this? ",
            "author": "Mark Miller",
            "id": "comment-16242559"
        },
        {
            "date": "2017-11-07T18:20:14+0000",
            "content": "Actually, looks like the autoAddReplicas replacement implementation may have gone in. In that case we should make sure some of these issues no longer exist. ",
            "author": "Mark Miller",
            "id": "comment-16242566"
        }
    ]
}