{
    "id": "SOLR-3038",
    "title": "Solrj should use javabin wireformat by default with updaterequests",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "The javabin wire format is faster than xml when feeding Solr - it should become the default.",
    "attachments": {
        "SOLR-3038-abstract-writer.patch": "https://issues.apache.org/jira/secure/attachment/12582854/SOLR-3038-abstract-writer.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Sami Siren",
            "id": "comment-13258136",
            "date": "2012-04-20T10:30:01+0000",
            "content": "Perhaps we could drop off xml support from solrj completely after SOLR-1164 (and related issues) are solved. I do not see much benefit in supporting multiple serialization formats in the java client. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13258162",
            "date": "2012-04-20T11:52:33+0000",
            "content": "As long as we have the JavaBin back-compat broken situation (SOLR-2204) we need XML as a common format which can talk to both 1.4 and 3.x/4.x versions. Of course you can argue that from 4.x we do not need to stay back-compat with other than 3.x but that's an active choice we would need to make. I don't see a clear benefit in REMOVING support for XML as long as Javabin is default. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13258190",
            "date": "2012-04-20T12:43:49+0000",
            "content": "4.x cannot read any indexes older than 3.x "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13258252",
            "date": "2012-04-20T13:46:21+0000",
            "content": "Doesn't matter. One customer of ours use an ECM system with built-in Solr1.x for internal search. This ECM is a Java webapp, and the publications run in the same app, so that our JARs must live in harmony with theirs. We use SolrJ for searching an external 3.5 search cluster, but since we can have only one SolrJ on the classpath of the webapp, it must be one which can talk to both the 1.x internal solr instance and our 3.x external one. That excludes JavaBin because of incompat. We have first been using solr-solrj-1.4.1.jar in XML mode and now solr-solrj-3.5.0.jar in XML mode, which is still compatible. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13258259",
            "date": "2012-04-20T13:53:11+0000",
            "content": "\nbut since we can have only one SolrJ on the classpath of the webapp,\n\nyou can jarjar or something like that too, to talk to the ancient ones? "
        },
        {
            "author": "Eric Pugh",
            "id": "comment-13258317",
            "date": "2012-04-20T15:33:11+0000",
            "content": "I use the XML format all the time to be able to connect to indexes of various versions of Solr.  And while you can do jarjar etc, it's a pain, and one more chance to do things wrong.\n\n\n\nEric "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13258349",
            "date": "2012-04-20T16:14:25+0000",
            "content": "+1 to use javabin as the default\n\nbig -1 to remove XML from solrj in 4.x.  Forcing people to upgrade the index and client at the same time does not make any sense \u2013 we spend a lot of effort in solr making sure the client facing behavior does not change regardless of internal changes.\n\n4.x cannot read any indexes older than 3.x\n\nwith XML, it it can read pre 3.x \u2013 the compatibility problem is with javabin "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13258364",
            "date": "2012-04-20T16:42:59+0000",
            "content": "with XML, it it can read pre 3.x \u2013 the compatibility problem is with javabin\n\nNo, as any Solr 4.x server will throw IndexTooOldException when opening IndexReader/IndexWriter on top of a old index format. Lucene 4.x drops support for pre-3.0 indexes (and Solr 1.4 is Lucene 2.9).\n\nTo Upgrade from Solr 1.x to Solr 4.x, you have to transform your indexes using a Lucene 3.x JAR and calling IndexUpgrader, to bring a pre-3.0 Index to 3.x format so 4.0 can read it. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13258413",
            "date": "2012-04-20T17:49:56+0000",
            "content": "hymm \u2013 to make sure I am not crazy, i just:\n 1. downloaded solr 1.4.1\n 2. java -jar start.jar\n 3. added docs with post.sh\n 4. ran this quick test from /trunk\n\n  public static void main(String[] args) throws SolrServerException {\n    HttpSolrServer solr = new HttpSolrServer(\"http://localhost:8983/solr\");\n    solr.setParser(new XMLResponseParser());\n    SolrDocumentList docs = solr.query(new SolrQuery(\"*:*\")).getResults();\n    for( SolrDocument doc : docs ) {\n      System.out.println(doc);\n    }\n  }\n\n\n\nit prints out everything just fine\n\nThe lucene index format is unrelated to the XML format that solr uses\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13258421",
            "date": "2012-04-20T17:57:03+0000",
            "content": "Ryan, Robert and me are talking about 2 different things in response to the comment:\n\n\n4.x cannot read any indexes older than 3.x\n\nwith XML, it it can read pre 3.x \u2013 the compatibility problem is with javabin\n\nSolr 4 cannot read a Solr 1.4 index (this means you install Solr 1.4, index some documents, then upgrade this installation to 4.0 -> this will not work, try it out).\n\nThe way you are proposing are two different servers. And I see no reason to make the Solr 4 client talk to Solr 1.4 instances, sorry. But this is not an upgrade scenario. If you want to upgrade from 1.4 you have to go through 3.x and once you have done this, all your clients can be upgraded, too. And then in a second step you can upgrade to 4.0, and your clients, too.\n\nLike with any other software, client API libraries may not work with ancient server versions. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13258460",
            "date": "2012-04-20T18:48:29+0000",
            "content": "I don't see the motivation for dropping XML \u2013 what is the advantage?  Is the hope to drop XMLResponseParser?  If so I am strongly against dropping the only plain text way to read NamedList.  \n\nIdeally we would get out of the object serialization business and delegate to thrift/avero/msgpack/xstream/whatever but that is a long way off. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13258468",
            "date": "2012-04-20T18:56:44+0000",
            "content": "Having a java client that reads from an old server and writes to a new server does not seem like a crazy thing to support.\n\nThere needs to be a good reason to drop this basic functionality. "
        },
        {
            "author": "Sami Siren",
            "id": "comment-13259402",
            "date": "2012-04-23T05:58:30+0000",
            "content": "Having a java client that reads from an old server and writes to a new server does not seem like a crazy thing to support.\n\nCorrect. I missed this cross version ability completely... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13259575",
            "date": "2012-04-23T12:43:26+0000",
            "content": "+1 on changing the default, +1 on keeping XML. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13655325",
            "date": "2013-05-11T17:44:12+0000",
            "content": "I found this while poking around for a discussion on solr-user.  I completely agree with Mark Miller:\n\n+1 for defaulting to javabin, +1 for keeping XML. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13655340",
            "date": "2013-05-11T19:18:03+0000",
            "content": "I don't think it's a good idea to simply change the default wire format to javabin as things stand now, because SolrJ 4.x is incompatible with Solr 3.x servers.  One approach would be to detect the server version and fall back to XML if its javabin is known to be incompatible. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13655389",
            "date": "2013-05-11T22:59:12+0000",
            "content": "because SolrJ 4.x is incompatible with Solr 3.x servers. \n\nOn what do you base this statement? As far as I know, JavaBin in 4.x is compatible with JavaBin in 3.x, but not 1.x. But we don't need the defaults to be back compat with 1.x - if you need\n\n+1 to change the default to javabin "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13655398",
            "date": "2013-05-11T23:47:54+0000",
            "content": "There were two changes that broke things \u2013 one is that SolrJ (4.x) posts javabin update requests to /update rather than /update/javabin and relies on the server to determine the format from the mime type - but 3.x servers don't do that.  The other is that there was a new datatype added to the javabin format which 3.x servers don't recognize (SolrInputDocument? I think it's related to transaction log support in some way).  There are examples cited in this thread from the solr user mailing list: http://markmail.org/thread/dypg6pclpgsc2pka;  "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13655407",
            "date": "2013-05-12T00:27:07+0000",
            "content": "I don't think it's a good idea to simply change the default wire format to javabin as things stand now, because SolrJ 4.x is incompatible with Solr 3.x servers.\n\nThat incompatibility only exists when you try to use the javabin request writer.  If you stick with the current default of XML, they are perfectly compatible.\n\nIMHO, it's OK to require special work to enable cross-version compatibility.  Changing the response parser to XML is required when using 1.x with a later version.  I don't think it would be a bad thing if changing the request writer to XML were required when using 3.x with 4.4 and later. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13655429",
            "date": "2013-05-12T02:36:49+0000",
            "content": "I guess my position is that protocol changes should be backwards compatible in the same way that code changes are: deprecate the old usage, but maintain it, for one version back, and then be free to break with two versions ago.  But it's true that the workaround in this case is fairly painless, assuming you know you need to do it.  I think that documentation will help, but it would also be nice if an old server could be detected in SolrJ, either to alert the user, or to silently fall back to XML format. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13655580",
            "date": "2013-05-12T17:01:28+0000",
            "content": "The extremely simple fix for this is to simply change one line in HttpSolrServer, so it creates its request writer as BinaryRequestWriter.\n\nThis attached patch (missing CHANGES.txt) goes further.  In addition to the simple one-line fix, it turns RequestWriter into an abstract class and creates XMLRequestWriter as an implementation.\n\nI'm running tests now, if there are failures I will adjust it.  There could be code out there that will break with this change, so I'd like to know if this is a bad idea for 4.x. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13655615",
            "date": "2013-05-12T19:18:51+0000",
            "content": "Earlier patch was incomplete - forgot an svn add. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13655673",
            "date": "2013-05-12T23:09:33+0000",
            "content": "Updated patch to fix some test failures.  I am seeing some test failures that do not seem related to my patch - they are things that I have been seeing from Jenkins.\n\nI think BasicHttpSolrServerTest needs at least one more test that also tests XMLRequestWriter, I'll think about that.\n\nSolrExampleStreamingTest was explicitly setting the XML writer.  My patch continues to do that, but I'm wondering if it needs an additional test for Binary.\n\nThis patch is absolutely what I think we need for trunk.  I'd like to do the same to 4x, but I'm worried that it isn't OK to break code where RequestWriter is explicitly used.  Code that uses BinaryRequestWriter would not need adjustment.  If that breakage sounds too dangerous, we could do the one-line fix for 4x.\n\nAbstract classes are a somewhat new area for me.  Is my implementation acceptable? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13655758",
            "date": "2013-05-13T05:12:41+0000",
            "content": "I took a closer look at the tests and fiddled things around so no test coverage is lost. Another update to the patch. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13656468",
            "date": "2013-05-13T22:32:54+0000",
            "content": "Previous patch failed precommit - missing eol-style.  New patch, also updated to latest trunk revision. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13656517",
            "date": "2013-05-13T23:27:36+0000",
            "content": "One approach would be to detect the server version and fall back to XML if its javabin is known to be incompatible.\n\nMike Sokolov I have been thinking about this since you suggested it.  The idea itself is very good, I just think there are too many things that could go wrong.\n\nAt this moment, I think that detection really belongs in the user app code.  The particular way that you have found for detecting 3.x (looking for the old-style admin) would fail if the user has taken steps to block access to the admin interface - it would think it's dealing with a 4.x server, which wouldn't work.\n\nEven if we found a completely reliable way of detecting whether XML is required (that couldn't be blocked accidentally or intentionally) it would still involve making a request to the server that the app developer did not explicitly put in their code.  Also, creating the server object might be conditional on the server being up at that moment, a requirement that does not exist today.\n\nI'm the new kid on the Solr committer block.  The veterans may feel differently about your idea.  I'm willing to try coding the detection idea, look for an alternate patch soon. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13656531",
            "date": "2013-05-13T23:38:50+0000",
            "content": "Other thoughts:\n\nAutodetection should discussed and handled in a new issue.  I'm about to start my commute, if nobody else makes the issue by the time I get home, I will go ahead and do it.\n\nPerhaps it could be done explicitly by the app developer by calling a method named something like autoDetectTransport.  The javadoc for the method should say that is not 100% reliable, and highly dependent on server settings.  This method would attempt to detect the server requirements so it can set the request writer and parser accordingly. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13656570",
            "date": "2013-05-14T00:12:51+0000",
            "content": "Isn't that just a cop-out?  If we are serious about negotiating protocols, than some form of version identification needs to be supported as a first-class service.  Maybe the ping service could return a server version id? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13656925",
            "date": "2013-05-14T09:27:45+0000",
            "content": "Why don't we sipmly add support for a LuceneMatchVersion requirement to SolrJ that you must supply on the constructor. Then if you want to communicate with an older server then you would instansiate with that LuceneMatchVersion and the code would have support for whatever format changes for the various versions. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13656973",
            "date": "2013-05-14T11:23:14+0000",
            "content": "Why don't we simply add support for a LuceneMatchVersion requirement to SolrJ that you must supply on the constructor.\nYou could do that, and it would be a slight improvement over the current situation in that the user wouldn't need to know the details about what had changed, but it still wouldn't allow users to completely decouple the upgrade of their clients and servers, which they could do if the client could automatically choose, or negotiate, the proper behavior dynamically. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13657769",
            "date": "2013-05-15T00:50:49+0000",
            "content": "I was just taking a look at the two issues that block this issue.  I didn't notice them before.  Is this the same re-ordering problem I've heard of before when deletes and adds happen in the same request, or is this a problem with entirely separate requests? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-16331641",
            "date": "2018-01-19T02:30:07+0000",
            "content": "Closing as a duplicate of SOLR-8595. "
        }
    ]
}