{
    "id": "SOLR-4136",
    "title": "SolrCloud bugs when servlet context contains \"/\" or \"_\"",
    "details": {
        "affect_versions": "4.0",
        "status": "Closed",
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "SolrCloud does not work properly with non-trivial values for \"hostContext\" (ie: the servlet context path).  In particular...\n\n\n\tUsing a hostContext containing a  \"/\" (ie: a servlet context with a subdir path, semi-common among people who organize webapps hierarchically for lod blanacer rules) is explicitly forbidden in ZkController because of how the hostContext is used to build a ZK nodeName\n\tUsing a hostContext containing a \"_\" causes problems in OverseerCollectionProcessor where it assumes all \"_\" characters should be converted to \"/\" to reconstitute a URL from nodeName (NOTE: this code specifically has a TODO to fix this, and then has a subsequent TODO about assuming \"http://\" labeled \"this sucks\")",
    "attachments": {
        "SOLR-4136.patch": "https://issues.apache.org/jira/secure/attachment/12555693/SOLR-4136.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13508394",
            "date": "2012-12-02T23:04:50+0000",
            "content": "\nContext...\n\n\n\thttp://mail-archives.apache.org/mod_mbox/lucene-solr-user/201211.mbox/%3Calpine.DEB.2.02.1211292004430.2543@frisbee%3E\n\thttp://mail-archives.apache.org/mod_mbox/lucene-solr-user/201211.mbox/%3C551C5E62-0520-42A2-BF71-165FDA3608ED@gmail.com%3E\n\n\n\nMark's suggestion in that email regarding my original question (about prohibiting \"/\" in nodeNames) was that zkcontroller should replace them \"/\" with \"_\" \u2013 but that would cause potential collisions between contexts like \"/foo/solr\" and \"/foo_solr\", so i think using something like URLEncoding makes more sense (and shouldn't impact existing ZK cluster state data for most existing users)\n\nThe attached patch enhances the test base classes to allow for randomized hostContext values, and then uses this URLEncoding logic in ZKController to build nodeNames \u2013 and in most cases seems to work.  But thinking about \"_\" in paths got me paranoid about explicitly testing that which is how I discovered the crufty logic in OverseerCollectionProcessor.  (NOTE: you can see the obvious OverseerCollectionProcessor errors trying to talk to the wrong URL in the test logs, and they seem to explain the subsequent test failure message, but it's also possible there is a subsequent problem i haven't noticed yet)\n\nI haven't dug into this part of the code/problem very much yet, but i think the right fix here is to clean this up this code so that intead of making assumptions about the node name, is uses the clusterstate to lookup the base_url from the nodeName.\n\nLogged error (repeated for multiple shards)...\n\n\n[junit4:junit4]   2> 204647 T33 oasc.SolrException.log SEVERE Collection createcollection of awholynewcollection_1 failed\n[junit4:junit4]   2> 204686 T31 oasc.DistributedQueue$LatchChildWatcher.process Watcher fired on path: /overseer/collection-queue-work state: SyncConnected type NodeChildrenChanged\n[junit4:junit4]   2> 204688 T33 oasc.OverseerCollectionProcessor.createCollection Create collection awholynewcollection_2 on [127.0.0.1:57855_randctxmqvf%2F_ay, 127.0.0.1:37463_randctxmqvf%2F_ay]\n[junit4:junit4]   2> 204691 T33 oasc.OverseerCollectionProcessor.createCollection SEVERE Error talking to shard: 127.0.0.1:37463/randctxmqvf%2F/ay org.apache.solr.common.SolrException: Server at http://127.0.0.1:37463/randctxmqvf%2F/ay returned non ok status:404, message:Not Found\n[junit4:junit4]   2> \tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:372)\n[junit4:junit4]   2> \tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:181)\n[junit4:junit4]   2> \tat org.apache.solr.handler.component.HttpShardHandler$1.call(HttpShardHandler.java:166)\n[junit4:junit4]   2> \tat org.apache.solr.handler.component.HttpShardHandler$1.call(HttpShardHandler.java:133)\n[junit4:junit4]   2> \tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n\n\n\nFinal test failure message...\n\n\n   <testcase classname=\"org.apache.solr.cloud.BasicDistributedZkTest\" name=\"testDistribSearch\" time=\"268.833\">\n      <failure message=\"Could not find new 2 slice collection called awholynewcollection_0\" type=\"java.lang.AssertionError\">java.lang.AssertionError: Could not find new 2 slice collection called awholynewcollection_0\n        at __randomizedtesting.SeedInfo.seed([1BD856523B97C07C:9A3ED84A4CC8A040]:0)\n        at org.junit.Assert.fail(Assert.java:93)\n        at org.apache.solr.cloud.BasicDistributedZkTest.checkForCollection(BasicDistributedZkTest.java:1053)\n        at org.apache.solr.cloud.BasicDistributedZkTest.testCollectionsAPI(BasicDistributedZkTest.java:768)\n        at org.apache.solr.cloud.BasicDistributedZkTest.doTest(BasicDistributedZkTest.java:361)\n        at org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:712)\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13510698",
            "date": "2012-12-05T19:19:24+0000",
            "content": "\nBeen poking around the SolrCloud/zk code ... fun times.\n\nFrom what i can tell, we don't record anywhere in zookeeper the mapping of \"nodeName\" -> \"baseURL\" for the various solr nodes in a solr cloud cluster.  We do seem evidently record the baseUrl associated with a nodeName in the info about each replica \u2013 but that information is per collection & shard, so as is it doesn't really help in the general case of the bad code in OverseerCollectionProcessor.\n\nThree options occur to me...\n\n1) We could consider adding these mappins to ZK as 1st order info. possibly by adding some data to the ephemeral \"liveNodes\" path for each node, so code like OverseerCollectionProcessor could just ask for the data of each liveNode to know it's baseUrl ... but i'm not sure how far down that rabithole we want to go (i don't really know the performance characteristics of ZK enough to know if it's a good idea to have code doing lots of those kinds of lookups ad-hoc)\n\n2) we could cheat: we could add something like this to ClusterState...\n\nprivate final Map<String,String> baseUrls;\npublic String getBaseUrl(final String nodeName);\n\n\n...and populate the baseUrls Map in the constructor based on the properties found when looping over every collections->slice->replica.  The only question is what to do if/when two diff collections/slice/replica in the clusterstate disagree about the baseUrl?  (assertion failed?)\n\n3) We could improve the kludge to be a bit less kludgy: OverseerCollectionProcessor (and possibly other places) currently assume that a baseUrl can be computed from a nodeName by replacing all \"_\" with \"/\" \u2013 if we change that substitution to only apply to the first \"_\" in the nodeName, and combine it with some URL decoding on the \"hostContext\" portion of the nodeName (to match my suggested improvement in theprevious patch) i think we would have a fairly safe way of bi-directinally converting nodeName<->URL regardless of what's in the hostContext - because hostnames and ports can't ever have \"_\" in them.  (this wouldn't address the \"http://\" kludge, but that assumption seems to be more pervasive - we can fight that battle another day)\n\n\u2013\n\nOption #3 seems the invasive for now, so unless mark/yonik/sami/somebody chimes in with more encouragment to go down one of the other routes, i'll take a stab at #3 and see what other problems i encounter.\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13510710",
            "date": "2012-12-05T19:31:15+0000",
            "content": "Yeah, I've looked at this in the past because we have problems with _ in the url's the way things are now (there are comments to that affect). Never got to adding the right info to ZK yet though. I don't remember thinking of a silver bullet that seemed like the clear way to go.\n\nTake a stab, I'll try and catch up soon. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13511132",
            "date": "2012-12-06T05:40:42+0000",
            "content": "New patch...\n\n1) implements the \"less kludgy-kludge\" idea i mentioned above.  I put the new public method for getting the baseURL of a nodeName in SolrZkClient in case we want to change it to be a live lookup from ZK at some point (and marked it @lucene.experimental in case we want completely move/remove it at some point)\n\n2) improved ZkController to allow both leading and trailing \"/\" in the hostContext \u2013 both of which get striped off after the \"empty string defaults to 'solr'\" logic, and before the generation of the nodeName.  As as result, specifying hostContext=\"/\" in solr.xml is now a viable way to tell solr it's running in the root context.  (In general i think this makes things easier to use, but \n\n3) enhanced the hostContext randomization logic in BaseDistributedSearchTestCase so that it randomly uses: the root context (eg: \"/\"), one level paths (eg: \"/as\"), two level paths (eg: \"/s/bf\"), and, sometimes including an \"\" character in a path (eg: \"/as\", \"/s_d\", \"/_d/bf\", etc..)\n\n4) Changed BaseDistributedSearchTestCase to us the context path randomization logic by default.  This is something i had left out of my previous patch because i wa worried about users who might have their own tests extending BaseDistributedSearchTestCase that were then making assumptions about the context being \"/solr\" \u2013 but i decided having more test coverage using these random context paths was more important \u2013 we can include an upgrade note along the lines of...\n\n\nBaseDistributedSearchTestCase now randomizes the servlet context it uses when \ncreating Jetty instances.  Subclasses that assume a hard coded context of \n\"/solr\" should either be fixed to use the \"String context\" variable, or should \ntake advantage of the new BaseDistributedSearchTestCase(String) constructor\nto explicitly specify a fixed servlet context path.\n\n\n\n5) Fixed test bugs exposed by 3 & 4 above.\n\n\u2013\n\nMark: would really appreciate it if you could take this bad-boy for a spin and let me know what you think "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13528166",
            "date": "2012-12-10T18:48:33+0000",
            "content": "patch updated to trunk "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13528224",
            "date": "2012-12-10T19:58:29+0000",
            "content": "I'm going to take a closer look at this today. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13528266",
            "date": "2012-12-10T20:43:03+0000",
            "content": "patch updated to trunk (again) "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13528576",
            "date": "2012-12-11T01:30:57+0000",
            "content": "This looks great! +1 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13529246",
            "date": "2012-12-11T19:30:59+0000",
            "content": "Hmmm... running the lsat patch, CloudSolrServerTest just tickled a bug when \"/\" got selected as the hostContext...\n\n\n      <failure message=\"fail check for leader:http://127.0.0.1:54905//collection1 in [http://127.0.0.1:54905/collection1/, http://127.0.0.1:35690/collection1/]\" type=\"java.lang.AssertionError\">java.lang.AssertionError: fail check for leader:http://127.0.0.1:54905//collection1 in [http://127.0.0.1:54905/collection1/, http://127.0.0.1:35690/collection1/]\n\n\n\n...i just sanity checked, and the precendent is that baseUrl never ends in a trailing slash (something i had already noticed, but somehow overlooked after my change).  It seemed like an easy fix but in running the full tests again I've already seen several failures go by that i need to figure out. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13529262",
            "date": "2012-12-11T19:45:55+0000",
            "content": "ok, so it turns out the failure i was seeing scroll by all came from OverseerCollectionProcessorTest which is a new test added in SOLR-4114.\n\nThe assertion failure(s) are fairly obtuse...\n\n\n      <failure message=\"\n  Expectation failure on verify:\n    submit(capture(Nothing captured yet), capture(Nothing captured yet), capture(Nothing captured yet)): expected: 1, actual: 0\n    takeCompletedOrError(): expected: 7, actual: 0\n    submit(capture(Nothing captured yet), capture(Nothing captured yet), capture(Nothing captured yet)): expected: 1, actual: 0\n    submit(capture(Nothing captured yet), capture(Nothing captured yet), capture(Nothing captured yet)): expected: 1, actual: 0\n    submit(capture(Nothing captured yet), capture(Nothing captured yet), capture(Nothing captured yet)): expected: 1, actual: 0\n    submit(capture(Nothing captured yet), capture(Nothing captured yet), capture(Nothing captured yet)): expected: 1, actual: 0\n    submit(capture(Nothing captured yet), capture(Nothing captured yet), capture(Nothing captured yet)): expected: 1, actual: 0\" type=\"java.lang.AssertionError\"\n\n\n\n...but the root issue seems to be hidden in a log message i found: the easymock stuff is evidently freaking out because a new method is being called that it doesn't expect...\n\n\n[junit4:junit4]   2> 689 T1552 oasc.SolrException.log SEVERE Collection createcollection of mycollection failed:java.lang.AssertionError: \n[junit4:junit4]   2> \t  Unexpected method call getZkClient():\n[junit4:junit4]   2> \t\tat org.easymock.internal.MockInvocationHandler.invoke(MockInvocationHandler.java:45)\n[junit4:junit4]   2> \t\tat org.easymock.internal.ObjectMethodsFilter.invoke(ObjectMethodsFilter.java:73)\n[junit4:junit4]   2> \t\tat org.easymock.internal.ClassProxyFactory$MockMethodInterceptor.intercept(ClassProxyFactory.java:92)\n[junit4:junit4]   2> \t\tat org.apache.solr.common.cloud.ZkStateReader$$EnhancerByCGLIB$$a53a0cdb.getZkClient(<generated>)\n[junit4:junit4]   2> \t\tat org.apache.solr.cloud.OverseerCollectionProcessor.createCollection(OverseerCollectionProcessor.java:263)\n[junit4:junit4]   2> \t\tat org.apache.solr.cloud.OverseerCollectionProcessor.processMessage(OverseerCollectionProcessor.java:155)\n[junit4:junit4]   2> \t\tat org.apache.solr.cloud.OverseerCollectionProcessor.run(OverseerCollectionProcessor.java:102)\n[junit4:junit4]   2> \t\tat java.lang.Thread.run(Thread.java:679)\n[junit4:junit4]   2> \t\n\n\n\nThe new test also has some hardcoded assumptions about hte context being \"solr\" and being able to rebuild the URL by replacing \"_\" with \"/\" \u2013 but since it doesn't subclass the distrib base test, i think those will actualy be ok.  i just need help udnerstanding how to tell the easy mock stuff to expect this method call.\n\n\u2014\n\nThe updated attachment:\n\n1) brings things up to date with trunk\n2) incorporated my jetty context change suggestion from SOLR-4057 so it's really trivial now to run the example on any context you want\n3) fixes a small glitch in the generated the \"baseUrl\" for a node when context is \"/\" ... the trailing \"/\" was being left on the URL, which is inconsistent with past behavior, so i cleaned that up (this was triggering a failure in CloudSolrServerTest because it was finding that \"http://foo:8983//collection1\" wasn't equal to \"http://foo:8983/collection1\" when checking the leader URL)\n\n...but it still suffers from the easy mock failure.\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13529289",
            "date": "2012-12-11T20:08:21+0000",
            "content": "You need something along these lines:\n\n\nIndex: solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest.java\n===================================================================\n--- solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest.java\t(revision 1420361)\n+++ solr/core/src/test/org/apache/solr/cloud/OverseerCollectionProcessorTest.java\t(working copy)\n@@ -35,6 +35,7 @@\n \n import org.apache.solr.SolrTestCaseJ4;\n import org.apache.solr.common.cloud.ClusterState;\n+import org.apache.solr.common.cloud.SolrZkClient;\n import org.apache.solr.common.cloud.ZkNodeProps;\n import org.apache.solr.common.cloud.ZkStateReader;\n import org.apache.solr.common.params.CoreAdminParams;\n@@ -61,6 +62,7 @@\n   private ShardHandler shardHandlerMock;\n   private ZkStateReader zkStateReaderMock;\n   private ClusterState clusterStateMock;\n+  private SolrZkClient solrZkClientMock;\n   \n   private Thread thread;\n   private Queue<byte[]> queue = new BlockingArrayQueue<byte[]>();\n@@ -88,6 +90,7 @@\n     shardHandlerMock = createMock(ShardHandler.class);\n     zkStateReaderMock = createMock(ZkStateReader.class);\n     clusterStateMock = createMock(ClusterState.class);\n+    solrZkClientMock = createMock(SolrZkClient.class);\n     underTest = new OverseerCollectionProcessorToBeTested(zkStateReaderMock,\n         \"1234\", shardHandlerMock, ADMIN_PATH, workQueueMock);\n   }\n@@ -129,6 +132,15 @@\n       }\n     }).anyTimes();\n     \n+    zkStateReaderMock.getZkClient();\n+    expectLastCall().andAnswer(new IAnswer<Object>() {\n+      @Override\n+      public Object answer() throws Throwable {\n+        return solrZkClientMock;\n+      }\n+    }).anyTimes();\n+    \n+    \n     clusterStateMock.getCollections();\n     expectLastCall().andAnswer(new IAnswer<Object>() {\n       @Override\n@@ -138,7 +150,19 @@\n     }).anyTimes();\n     final Set<String> liveNodes = new HashSet<String>();\n     for (int i = 0; i < liveNodesCount; i++) {\n-      liveNodes.add(\"localhost:\" + (8963 + i) + \"_solr\");\n+      final String address = \"localhost:\" + (8963 + i) + \"_solr\";\n+      liveNodes.add(address);\n+      \n+      solrZkClientMock.getBaseUrlForNodeName(address);\n+      expectLastCall().andAnswer(new IAnswer<Object>() {\n+        @Override\n+        public Object answer() throws Throwable {\n+          // This works as long as this test does not use a \n+          // webapp context with an underscore in it\n+          return address.replaceAll(\"_\", \"/\");\n+        }\n+      }).anyTimes();\n+      \n     }\n     clusterStateMock.getLiveNodes();\n     expectLastCall().andAnswer(new IAnswer<Object>() {\n@@ -336,6 +360,7 @@\n     }\n     \n     replay(workQueueMock);\n+    replay(solrZkClientMock);\n     replay(zkStateReaderMock);\n     replay(clusterStateMock);\n     replay(shardHandlerMock);\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13529508",
            "date": "2012-12-12T00:26:47+0000",
            "content": "Mark: that's all greek to me, bu it seems to work, and saved me the trouble of learning greek!\n\nCommitted revision 1420497. - trunk\n\nbackporting and testing on 4x now. "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13529795",
            "date": "2012-12-12T10:13:59+0000",
            "content": "Can confirm that Marks patch for OverseerCollectionProcessorTest seems to be good. In a mocked test you mock components used by the \"class under test\" (OverseerCollectionProcessor in this case) and basically tells those mocks how to behave when used by the \"class under test\". This way you test only the logic in the \"class under test\" and at the same time you get to verify that it communicates (calles stuff on) the components in interacts with (the mocked ones) in exactly the way you expect. I guess you have changed createCollection so that it also calls zkStateReaderMock.getZkClient().getBaseUrlForNodeName() which it didnt before, so that call wasnt \"expected\" by the test and you didnt tell the mocked component (ZkStateReader) how to \"simulate\" correct behaviour. Mark added this and the test should be fine again. \n\nBasically since you changed createCollection in a way so that it did not anylonger behave exactly as verified by the OverseerCollectionProcessorTest you needed to tweak the test also. This is a nice thing! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13530239",
            "date": "2012-12-12T19:33:17+0000",
            "content": "FYI: staled on backporting due to other test instabilities on 4x at the moment ... i don't wnat to risk making the situation worse. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13530247",
            "date": "2012-12-12T19:43:51+0000",
            "content": "Good call. Looks like Yonik is merging back some critical work in 5x that will help with those fails.\n\nWhen doing the Directory first class issue, some of the changes actually introduced/exposed a bunch of fails that i fixed on 5x.\n\nSomehow, some similar issues seem to have been recently exposed on 4x - but the fixes (both test and core code) are not there yet.\n\nI'm holding off on back porting to 4x until this merge up is complete. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13530468",
            "date": "2012-12-12T23:06:25+0000",
            "content": "[trunk commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1421034\n\nSOLR-4136: fix hostContext randomization to never include double slashes "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13530480",
            "date": "2012-12-12T23:23:06+0000",
            "content": "Yonik merged the 1420497 changes to the 4x branch in r1420992...\n\nhttp://svn.apache.org/viewvc?view=revision&revision=1420992\n\nThere is a glitch however in the hostContext randomization code that resulted in contexts with multiple consecutive slashes (eg: \"//s\") which caused tests to complain about 404s when trying to talk to the jetty instances...\n\nCommitted revision 1421034. - trunk\nCommitted revision 1421036. - 4x.\n "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13530484",
            "date": "2012-12-12T23:28:25+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1421036\n\nSOLR-4136: fix hostContext randomization to never include double slashes (merge r1421034) "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13531958",
            "date": "2012-12-14T03:41:56+0000",
            "content": "I just got this one that seems suspicious - can you take a look hossman?\n\n\nError Message\n\nServer at http://127.0.0.1:44836//unloadcollection2 returned non ok status:404, message:Not Found\nStacktrace\n\norg.apache.solr.common.SolrException: Server at http://127.0.0.1:44836//unloadcollection2 returned non ok status:404, message:Not Found\n\tat __randomizedtesting.SeedInfo.seed([EB9D48266225215F:6A7BC63E157A4163]:0)\n\tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:372)\n\tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:181)\n\tat org.apache.solr.client.solrj.request.AbstractUpdateRequest.process(AbstractUpdateRequest.java:117)\n\tat org.apache.solr.client.solrj.SolrServer.add(SolrServer.java:116)\n\tat org.apache.solr.client.solrj.SolrServer.add(SolrServer.java:102)\n\tat org.apache.solr.cloud.BasicDistributedZkTest.testCoreUnloadAndLeaders(BasicDistributedZkTest.java:548)\n\tat org.apache.solr.cloud.BasicDistributedZkTest.doTest(BasicDistributedZkTest.java:352)\n\tat org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:793)\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13531959",
            "date": "2012-12-14T03:43:16+0000",
            "content": "Eg, it looks like perhaps an empty context? And some tests are not prepared to work with that if it is indeed running on the root? I dunno...first guess...pretty rare... "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13532564",
            "date": "2012-12-14T19:22:43+0000",
            "content": "Hmmm, mark: i tried testing on both trunk@1422017 and 4x@1422022...\n\n\n\tthat seed did in fact produce the root context \"/\" for me\n\tthat tests passed with that seed and the root context\n\tno where in the test log did get any mention of \"//unloadcollection2\" (which i would suspect if there was a bug building up a client url using the baseUrlWithTrailingSlash + \"/corename\" ... but there should never be a baseUrlWithTrailingSlash)\n\n\n\nI then modified my local working copy of trunk like so, in order to force every test to run with the root context, and even then i could not reproduce...\n\n\nIndex: solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java\n===================================================================\n--- solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java\t(revision 1422017)\n+++ solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java\t(working copy)\n@@ -110,7 +110,9 @@\n       }\n     }\n     // paranoia, we *really* don't want to ever get \"//\" in a path...\n-    final String hc = hostContext.toString().replaceAll(\"\\\\/+\",\"/\");\n+    // final String hc = hostContext.toString().replaceAll(\"\\\\/+\",\"/\");\n+    // :nocommit: ... test the shit out of the root context\n+    final String hc = \"/\";\n \n     log.info(\"Setting hostContext system property: \" + hc);\n     System.setProperty(\"hostContext\", hc);\n\n\n\n...this smells to me like it must have run against the code prior to my r1421034 commit (to get that \"//\" URL) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13532567",
            "date": "2012-12-14T19:25:26+0000",
            "content": "...this smells to me like it must have run against the code prior to my r1421034 commit (to get that \"//\" URL)\n\nHmmm, except if that were the case, this line number would be different...\n\n...testDistribSearch(BaseDistributedSearchTestCase.java:793)\n\nI really have no idea what caused that failure you got. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13532576",
            "date": "2012-12-14T19:32:42+0000",
            "content": "Thanks for looking - I'll keep an eye for a repeat - I have the logs somewhere too. I'll take it to another issue. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13537484",
            "date": "2012-12-20T23:30:00+0000",
            "content": "[trunk commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1424755\n\nSOLR-4136: followup: fix getBaseUrlForNodeName to never including trailing slash when using the root context, and harden generateNodeName to not trust the caller as far as leading/trailing slashes "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13537517",
            "date": "2012-12-20T23:51:15+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1424762\n\nSOLR-4136: followup: fix getBaseUrlForNodeName to never including trailing slash when using the root context, and harden generateNodeName to not trust the caller as far as leading/trailing slashes (merge r1424755) "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13537525",
            "date": "2012-12-21T00:02:14+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1424768\n\nSOLR-4136: revert unclean r1424762 "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13537543",
            "date": "2012-12-21T00:22:41+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1424771\n\nSOLR-4136: followup: fix getBaseUrlForNodeName to never including trailing slash when using the root context, and harden generateNodeName to not trust the caller as far as leading/trailing slashes (merge r1424755 - redo) "
        }
    ]
}