{
    "id": "SOLR-12415",
    "title": "Solr Loadbalancer client LBHttpSolrClient not working as expected, if a Solr node goes down, it is unable to detect when it become live again due to 404 error",
    "details": {
        "labels": "",
        "priority": "Critical",
        "components": [
            "SolrJ"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.2.1,                                            7.3.1,                                            7.4",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Context\n When LBHttpSolrClient has been constructed using base root urls, and when a slave goes down, and then back again, the client is unable to mark it as alive again due to 404 error.\n\nLogs\u00a0 below:\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 >> \"GET /solr/select?q=%3A&rows=0&sort=docid+asc&distrib=false&wt=javabin&version=2 HTTP/1.1[\\r][\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 >> \"User-Agent: Solr[org.apache.solr.client.solrj.impl.HttpSolrClient] 1.0[\\r][\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 >> \"Host: localhost:8984[\\r][\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 >> \"Connection: Keep-Alive[\\r][\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 >> \"[\\r][\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"HTTP/1.1 404 Not Found[\\r][\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"Cache-Control: must-revalidate,no-cache,no-store[\\r][\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"Content-Type: text/html;charset=iso-8859-1[\\r][\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"Content-Length: 243[\\r][\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"[\\r][\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"<html>[\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"<head>[\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>[\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"<title>Error 404 Not Found</title>[\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"</head>[\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"<body><h2>HTTP ERROR 404</h2>[\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"<p>Problem accessing /solr/select. Reason:[\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"<pre> Not Found</pre></p>[\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"</body>[\\n]\"\n\n\u00a0DEBUG [aliveCheckExecutor-1-thread-1] [wire] http-outgoing-83 << \"</html>[\\n]\"\n\nAnalysis\n when using only base root urls in a LBHttpSolrClient we need to pass a \"collection\" paramter when sending a request. It works fine except that in a method\u00a0\n\nprivate void checkAZombieServer(ServerWrapper zombieServer)\n\nit tries to query a solr without the collection parameter, to check if the server is alive. This causes a html content (apparently dashboard) to be returned, and as a result it will move to the exception clause in the method therefore even if the server is back it will never be marked as alive again.\n I debugged this and if we pass a collection name there as a second param it will respond in a right manner.\n\nSuggestion is either to somehow pass the collection name or to change the way zombie servers are pinged.\n\nSteps to reproduce\n\nRun 2 servers - master and slave. Create client using base urls. Index, test search etc.\n\nTurn off slave server and after couple of seconds turn it on again.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-29T16:36:27+0000",
            "content": "If I try to replicate this problem with only one Solr server, using SolrJ 7.3.0 talking at an example setup on a freshly built 8.0.0-SNAPSHOT, the client works after the server is started back up.  I'll have to do a more complete replication attempt. ",
            "author": "Shawn Heisey",
            "id": "comment-16493820"
        },
        {
            "date": "2018-05-29T16:55:49+0000",
            "content": "With this SolrJ code and two servers, I was able to replicate the problem.\n\n\n\tpublic static void main(String[] args) throws InterruptedException\n\t{\n\t\tLBHttpSolrClient lc = new LBHttpSolrClient.Builder()\n\t\t\t\t.withBaseSolrUrls(\"http://localhost:8983/solr\", \"http://localhost:8984/solr\").build();\n\t\tdoQ(lc);\n\t\tSystem.out.println(\"stop one solr.\");\n\t\tThread.sleep(30000);\n\t\tdoQ(lc);\n\t\tSystem.out.println(\"start solr back up.\");\n\t\tThread.sleep(30000);\n\t\tdoQ(lc);\n\t\tSystem.exit(0);\n\t}\n\n\tprivate static void doQ(LBHttpSolrClient lc) throws InterruptedException\n\t{\n\t\tQueryResponse r = null;\n\t\tfor (int i = 0; i < 5; i++)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tr = null;\n\t\t\t\tr = lc.query(\"foo\", new SolrQuery(\"*\"));\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tSystem.out.println(e.getClass().getName() + \":\" + e.getMessage());\n\t\t\t}\n\t\t\tThread.sleep(10);\n\t\t\tif (r != null)\n\t\t\t{\n\t\t\t\tSystem.out.println(r.getResults().getNumFound());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tSystem.out.println(\"null response\");\n\t\t\t}\n\t\t}\n\t}\n\n\n\nIt gave the following output, with 30 second pauses after the stop and start notes, during which I did the mentioned action.\n\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\nSLF4J: Defaulting to no-operation (NOP) logger implementation\nSLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.\n0\n1\n0\n1\n0\nstop one solr.\n1\n1\n1\n1\n1\nstart solr back up.\n1\n1\n1\n1\n1\n\n\n\nI added one document to the server running on port 8984 so there would be two different responses. ",
            "author": "Shawn Heisey",
            "id": "comment-16493840"
        },
        {
            "date": "2018-05-29T17:13:57+0000",
            "content": "I see these as possible solutions in situations where the base URLs do not include a core/collection name:\n\n\n\tChange the zombie server check query to a benign action on one of the admin handlers that responds quickly.\n\t\n\t\tThis would only be guaranteed to work on versions where the chosen handler is implicitly added, which might mean possible compatibility issues with older server versions.\n\t\tA different admin handler might be needed for checks on URLs that do include the core/collection name.\n\t\tThe Javadoc for the client would need to declare which handlers are used for zombie checks, what server version added those handlers implicitly, and indicate that there must be explicit config in older versions.\n\t\n\t\n\tMove 'setDefaultCollection' from CloudSolrClient to SolrClient, fix any problems that causes, and require setDefaultCollection for LBHttpSolrClient to work properly.\n\tHave LBHttpSolrClient make a CoreAdmin call to get a list of valid cores and choose one for the zombie server check - but only if setDefaultCollection was not used.\n\n\n\nIf CloudSolrClient relies on its internal LBHttpSolrClient to re-enable zombie servers, this might affect CloudSolrClient too.  I suspect that the cloud client relies more on info from zookeeper.\n\nI was a little surprised to learn that LBHttpSolrClient assumes all servers are good until a request fails.  I would have expected alive checks to happen before then. ",
            "author": "Shawn Heisey",
            "id": "comment-16493880"
        },
        {
            "date": "2018-05-29T17:47:53+0000",
            "content": "Other thoughts:\n\nDeprecate handling URLs whose path includes the collection name in 7.5 and remove that functionality in 8.0.\n\nStrongly recommend setDefaultCollection in 7.x, make it a requirement in 8.0.  (not sure if this is really needed)\n\nDeprecate the request/client methods in SolrJ that do NOT take a collection name in 8.0 and remove in 9.0.  I think setDefaultCollection would also disappear in 9.0.  I also think that this paragraph assumes that the zombie checks in LBHttpSolrClient use an admin handler.\n\nMaybe LBHttpSolrClient should be able to query each server periodically for a list of cores it can handle, so when a user requests core X, it won't be sent to a server unless that server is definitely able to handle the request.  This will require that /solr/admin/cores is implicitly or explicitly defined.  If no servers are found with the ability to handle the request, it could either be sent to one of them anyway (possibly failing), or the client could refresh the core list on all servers and fail fast if the core still isn't available.  When LBHttpSolrClient is used inside CloudSolrClient, it will require special handling because collection names are valid even though none of the servers has a core with that name.   ",
            "author": "Shawn Heisey",
            "id": "comment-16493945"
        },
        {
            "date": "2018-05-30T09:32:38+0000",
            "content": "Shawn Heisey\n\nthanks for picking this up so quickly. Let me just add my comments.\n\nMove 'setDefaultCollection' from CloudSolrClient to SolrClient, fix any problems that causes, and require setDefaultCollection for LBHttpSolrClient to work properly.\nThis may limit flexibility of the client that was created without any core information.\n\nHave LBHttpSolrClient make a CoreAdmin call to get a list of valid cores and choose one for the zombie server check - but only if setDefaultCollection was not used.\nMaybe this would work. But! Isn't a call to get list of valid cores enough to know that server is not a zombie? What if there is no core at all? ",
            "author": "Grzegorz Lebek",
            "id": "comment-16494932"
        },
        {
            "date": "2018-05-30T13:09:29+0000",
            "content": "This may limit flexibility of the client that was created without any core information.\n\nIf the zombie check remains a standard query (which is defined internally as the all docs query), it's going to need an index name, or it can't possibly succeed.  If the zombie check is changed to call a global admin handler instead, then setting a default collection would not be required.\n\nMaybe this would work. But! Isn't a call to get list of valid cores enough to know that server is not a zombie? What if there is no core at all?\n\nMy initial reaction was to say that if a server has no cores at all, it is not a very useful server.  After a little more thought, I realized that there might be situations where a server is set up with no cores, and then CoreAdmin is used to create them.\n\nThe thing about that situation is that you really wouldn't want to use LBHttpSolrClient.  You'd want to use HttpSolrClient to talk to one specific server.  Load balancing CoreAdmin requests doesn't make any sense \u2013 there would be no way to predict which server is going to receive them. ",
            "author": "Shawn Heisey",
            "id": "comment-16495126"
        },
        {
            "date": "2018-06-14T13:16:03+0000",
            "content": "Shawn Heisey\n\nThere is even more troubles there.\n\nIf anyone is using authentication with the user, which is a request parameter, the query in the method 'checkZombieServer' will always fail (as it is not passing auth params) and assume that the server is still down. It is one more reason why zombie server will never come back alive in the client. ",
            "author": "Grzegorz Lebek",
            "id": "comment-16512448"
        }
    ]
}