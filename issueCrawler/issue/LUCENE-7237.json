{
    "id": "LUCENE-7237",
    "title": "LRUQueryCache should rather not cache than wait on a lock",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "This is an idea Robert just mentioned to me: currently the cache is using a lock to keep various data-structures in sync. It is a pity that you might have contention because of caching. So something we could do would be to not cache when the lock is already taken.",
    "attachments": {
        "LUCENE-7237.patch": "https://issues.apache.org/jira/secure/attachment/12800018/LUCENE-7237.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15252379",
            "author": "Adrien Grand",
            "date": "2016-04-21T18:08:28+0000",
            "content": "I gave it a try. The patch is large, but the change is quite simple, most line changes are due to indentation since I replaced synchronized methods with calls to Lock.(un)lock() in try/finally blocks. The interesting part is in CachingWeightWrapper#scorer where we now do:\n\n\n      // Short-circuit: Check whether this segment is eligible for caching\n      // before we take a lock because of #get\n      if (shouldCache(context) == false) {\n        return in.scorer(context);\n      }\n\n      // If the lock is already busy, prefer using the uncached version than waiting\n      if (lock.tryLock() == false) {\n        return in.scorer(context);\n      }\n\n      DocIdSet docIdSet;\n      try {\n        docIdSet = get(in.getQuery(), context);\n      } finally {\n        lock.unlock();\n      }\n\n      if (docIdSet == null) {\n        if (policy.shouldCache(in.getQuery(), context)) {\n          docIdSet = cache(context);\n          putIfAbsent(in.getQuery(), context, docIdSet);\n        } else {\n          return in.scorer(context);\n        }\n      }\n\n      assert docIdSet != null;\n      if (docIdSet == DocIdSet.EMPTY) {\n        return null;\n      }\n      final DocIdSetIterator disi = docIdSet.iterator();\n      if (disi == null) {\n        return null;\n      }\n\n      return new ConstantScoreScorer(this, 0f, disi);\n\n\n\nBecause of the tryLock() call, if the lock is already held because another thread is using the cache, we just return a scorer produced by the original weight rather than wait. "
        },
        {
            "id": "comment-15252385",
            "author": "Adrien Grand",
            "date": "2016-04-21T18:10:33+0000",
            "content": "For the record, there is already a test for concurrency in TestLRUQueryCache. "
        },
        {
            "id": "comment-15253746",
            "author": "Robert Muir",
            "date": "2016-04-22T11:06:13+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15253813",
            "author": "ASF subversion and git services",
            "date": "2016-04-22T12:11:12+0000",
            "content": "Commit a123224d2efb07490a235569570c8f7b8fbd7c8f in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a123224 ]\n\nLUCENE-7237: LRUQueryCache now prefers returning an uncached Scorer than waiting on a lock. "
        },
        {
            "id": "comment-15253814",
            "author": "ASF subversion and git services",
            "date": "2016-04-22T12:11:13+0000",
            "content": "Commit bf232d7635e1686cd6f5624525fa3e0b7820430f in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bf232d7 ]\n\nLUCENE-7237: LRUQueryCache now prefers returning an uncached Scorer than waiting on a lock. "
        },
        {
            "id": "comment-15277218",
            "author": "Hoss Man",
            "date": "2016-05-09T22:40:48+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        }
    ]
}