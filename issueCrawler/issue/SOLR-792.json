{
    "id": "SOLR-792",
    "title": "Pivot (ie: Decision Tree) Faceting Component",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "A component to do multi-level faceting.",
    "attachments": {
        "SOLR-792-distributed.patch": "https://issues.apache.org/jira/secure/attachment/12498126/SOLR-792-distributed.patch",
        "SOLR-792.patch": "https://issues.apache.org/jira/secure/attachment/12391053/SOLR-792.patch",
        "SOLR-792-as-helper-class.patch": "https://issues.apache.org/jira/secure/attachment/12457581/SOLR-792-as-helper-class.patch",
        "SOLR-792-PivotFaceting.patch": "https://issues.apache.org/jira/secure/attachment/12454162/SOLR-792-PivotFaceting.patch",
        "SOLR-792-raw-type.patch": "https://issues.apache.org/jira/secure/attachment/12457567/SOLR-792-raw-type.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-12635005",
            "date": "2008-09-26T20:40:20+0000",
            "content": "This patch is a simple implementation to do a fixed two-level faceting, using the SimpleFacets functions.  This is just the start.  The idea is to make the actual faceting implementation pluggable, support arbitrary levels, perhaps also support nested facet queries, not just facet fields.\n\nWith this patch, this query, on Solr's example data set, returns the data below:\n\nhttp://localhost:8983/solr/select?q=*:*&rows=0&facet=on&facet.field=cat&facet.tree=cat,inStock&wt=json&indent=on\n\n\n \"facet_counts\":{\n  \"facet_queries\":{},\n  \"facet_fields\":{\n\t\"cat\":[\n\t \"electronics\",14,\n\t \"memory\",3,\n\t \"card\",2,\n\t \"connector\",2,\n\t \"drive\",2,\n\t \"graphics\",2,\n\t \"hard\",2,\n\t \"monitor\",2,\n\t \"search\",2,\n\t \"software\",2,\n\t \"camera\",1,\n\t \"copier\",1,\n\t \"multifunction\",1,\n\t \"music\",1,\n\t \"printer\",1,\n\t \"scanner\",1]},\n  \"facet_dates\":{},\n  \"trees\":[\n\t\"cat,inStock\",[\n\t \"electronics\",[\n\t  \"true\",10,\n\t  \"false\",4],\n\t \"memory\",[\n\t  \"true\",3,\n\t  \"false\",0],\n\t \"card\",[\n\t  \"false\",2,\n\t  \"true\",0],\n\t \"connector\",[\n\t  \"false\",2,\n\t  \"true\",0],\n\t \"drive\",[\n\t  \"true\",2,\n\t  \"false\",0],\n\t \"graphics\",[\n\t  \"false\",2,\n\t  \"true\",0],\n\t \"hard\",[\n\t  \"true\",2,\n\t  \"false\",0],\n\t \"monitor\",[\n\t  \"true\",2,\n\t  \"false\",0],\n\t \"search\",[\n\t  \"true\",2,\n\t  \"false\",0],\n\t \"software\",[\n\t  \"true\",2,\n\t  \"false\",0],\n\t \"camera\",[\n\t  \"true\",1,\n\t  \"false\",0],\n\t \"copier\",[\n\t  \"true\",1,\n\t  \"false\",0],\n\t \"multifunction\",[\n\t  \"true\",1,\n\t  \"false\",0],\n\t \"music\",[\n\t  \"true\",1,\n\t  \"false\",0],\n\t \"printer\",[\n\t  \"true\",1,\n\t  \"false\",0],\n\t \"scanner\",[\n\t  \"true\",1,\n\t  \"false\",0]]]}}\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12635010",
            "date": "2008-09-26T20:44:19+0000",
            "content": "Is it this related to (or same as) SOLR-64 ? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12635078",
            "date": "2008-09-27T00:44:46+0000",
            "content": "SOLR-64 is (in theory) about better faceting support for fields that represent a hierarchy.\n\nWhat Erik is addressing seems to me more like generating an \"N- dimensional matrix\" of facet counts "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12640447",
            "date": "2008-10-17T06:09:29+0000",
            "content": "fixes inner TermQuery to use actual internal indexed value "
        },
        {
            "author": "Jeremy Hinegardner",
            "id": "comment-12640874",
            "date": "2008-10-19T20:23:49+0000",
            "content": "I've attempted to update SOLR-792 to work distributed.  This works with my test setup.  \nIs adding a new field to ResponseBuilder the proper way to implement this?  Thats what FacetComponent does, so I followed its example.\n\nTo apply to HEAD, use \n\npatch -p1 < SOLR-792.patch\n\n\n\nI also changed to SimpleOrderedMap in a few places where it was NamedList.  It seemed more appropriate. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12733072",
            "date": "2009-07-19T21:27:56+0000",
            "content": "See http://wiki.apache.org/solr/HierarchicalFaceting for stats on this approach and comparing/contrasting to SOLR-64 "
        },
        {
            "author": "Jeremy Hinegardner",
            "id": "comment-12763757",
            "date": "2009-10-08T23:42:34+0000",
            "content": "Update to apply cleanly against trunk. "
        },
        {
            "author": "Thibaut Lassalle",
            "id": "comment-12798056",
            "date": "2010-01-08T16:32:55+0000",
            "content": "Update to apply cleanly against release 1.4  "
        },
        {
            "author": "SolrFan",
            "id": "comment-12891208",
            "date": "2010-07-22T15:12:34+0000",
            "content": "Hi, can this patch please be updated against the current 1.4 trunk? thanks. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12891586",
            "date": "2010-07-23T13:33:17+0000",
            "content": "Updated patch to trunk, very minor cosmetic differences. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12897403",
            "date": "2010-08-11T19:23:36+0000",
            "content": "From left field, the name \"Grouped Faceting\" or some variation of it comes to mind when I think of this functionality.  Would be nice to get this committed at some point. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12897434",
            "date": "2010-08-11T20:25:23+0000",
            "content": "How about \"nested faceting\"?   \"grid faceting\"?  \n\nShould be generalized for N levels of nested before committing?  Or are folks ok with it being limited to two levels at first and generalize it more after committing? "
        },
        {
            "author": "David Smiley",
            "id": "comment-12897462",
            "date": "2010-08-11T21:25:05+0000",
            "content": "I like \"nested faceting\" better than \"grid faceting\" but I prefer \"tree faceting\" most of all.\n\nI think N-levels is key. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12897472",
            "date": "2010-08-11T21:45:04+0000",
            "content": "I don't know, tree implies something different (a taxonomy) to me in that you need tools and capabilities for managing that are also a part of Solr, whereas this is grouping items together at just level 2 is useful in it's own right and doesn't require that other stuff to make it manageable.  Just my two cents. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12897513",
            "date": "2010-08-11T23:54:37+0000",
            "content": "i'm with grant ... i had an IRC conversation with erik a while back where i pointed out that there isn't anything intrinsicly \"tree\" oriented about this patch \u2013 it can be used in cases where you've got multiple fields expressing a tree structure, but it can also be useful for fields that are totally orthogincal to eachother (ie: the \"cat\" and \"inStock\" example)\n\nWhat this is essentially doing is treating each field as a vector containing the constraint counts for that field, and taking a \"cross product\" to produce an N-dimensional matrix showing the counts for each permutation.  Which led to my suggestion for \"matrix faceting\" or \"cross product faceting\"\n\nThe other way to look at it is that it's \"Decision Tree Faceting\" in that it tells you \"for facet A, the constraints/counts are X/N, Y/M, etc.... if you were to constrain A by X, then the constraint counts for B would be S/P, T/Q, etc...  ie: it tells you in advance what the \"next\" set of facet results would be for a field if you apply a constraint from the current facet results.\n\nbut calling it just \"Tree Faceting\" seems missleading to me.  that seems more applicable to something like SOLR-64 "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12897519",
            "date": "2010-08-12T00:09:54+0000",
            "content": "The reason I called it tree faceting was based on the same thing Hoss just said... decision tree.  One decision leads to these other values, and so on.  \n\nBut how it was used in the case I built it for was to show a two dimensional display of the data.\n\nI'm not tied to any particular name.  Would DecisionTreeFacetComponent be acceptable?   Any volunteers to step up and rename and implement the N-level stuff? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12899061",
            "date": "2010-08-16T19:59:53+0000",
            "content": "FWIW: there was an excel feature i remember using back in the day that this faceting reminded me of as well .. and i finally remembered that it was called \"Pivot Tables\" that was later renamed \"Cross Tabulation\"\n\nBoth of these terms are apparently meaningful outside of excel as generic data summarization concepts...\n\nhttp://en.wikipedia.org/wiki/Pivot_table\nhttp://en.wikipedia.org/wiki/Cross_tabulation\n\nMy current vote would be to call this the \"CrossTabulationFacetComponent\" ...but i'm also ok with DecisionTreeFacetComponent if people prefer. "
        },
        {
            "author": "David Smiley",
            "id": "comment-12899259",
            "date": "2010-08-17T03:11:46+0000",
            "content": "Nevermind my opinion favoring this be titled \"tree\".  I was confusing this issue with SOLR-64 thinking this was just a competing implementation of the concept, not something different.  FWIW, I prefer \"Pivot\" vs \"Cross tabulation\". "
        },
        {
            "author": "Jason Falk",
            "id": "comment-12906108",
            "date": "2010-09-03T21:25:06+0000",
            "content": "facet.tree currently seems to bark at exclusion tags, I wouldn't mind trying to take a crack at this (as I currently do need it), but not really sure where to begin looking. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12907448",
            "date": "2010-09-08T21:53:57+0000",
            "content": "This takes the existing patch and:\n\n\n\tRenames TreeFacetCompont to 'PivotFacetComponent' (i like that name best)\n\tMoves the parameter defines to FacetParams.java\n\tAdds pivot support to Solrj so the fields are used easily\n\tAdds tests using the solrj API\n\tAugments the results with the matching facet count \u2013 this is kind of hacky\n the name is is prefixed with its count, in the sample data, this is:\n\n<lst name=\"facet_pivot\">\n  <lst name=\"cat,popularity\">\n    <lst name=\"17:electronics\">\n      <int name=\"6\">5</int>\n      <int name=\"7\">5</int>\n      <int name=\"5\">3</int>\n       ...\n      </lst\n    <lst name=\"6:memory\">\n      <int name=\"5\">3</int>\n      <int name=\"7\">2</int>\n      ...\n    </lst>\n\n\nThis means that there are 17 things matching electronics and 6 matching memory.\n\n\n\nAnyone have better ideas how we could include this info?  I also considered:\n\n    <lst name=\"electronics\">\n      <int name=\"6\">5</int>\n      <int name=\"7\">5</int>\n      <int name=\"5\">3</int>\n       ...\n      <int name=\"__count__\">17</int>\n     </lst\n\n\n\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12907496",
            "date": "2010-09-09T00:50:38+0000",
            "content": "I'm messing with a new implementation that allows deeper nesting.  To get this to work, the output needs to be a bit more verbose.  Consider:\n\nhttp://localhost:8983/solr/select?q=*:*&facet.pivot=cat,popularity,inStock&facet.pivot=popularity,cat&facet=true&facet.field=cat&facet.limit=5&rows=0&wt=json&indent=true\n\n\n  \"facet_pivot\":{\n      \"cat,popularity,inStock\":[{\n          \"field\":\"cat\",\n          \"value\":\"electronics\",\n          \"count\":17,\n          \"pivot\":[{\n              \"field\":\"popularity\",\n              \"value\":\"6\",\n              \"count\":5,\n              \"pivot\":[{\n                  \"field\":\"inStock\",\n                  \"value\":\"true\",\n                  \"count\":5}]},\n            {\n              \"field\":\"popularity\",\n              \"value\":\"7\",\n              \"count\":5,\n              \"pivot\":[{\n                  \"field\":\"inStock\",\n                  \"value\":\"true\",\n                  \"count\":3},\n                {\n                  \"field\":\"inStock\",\n                  \"value\":\"false\",\n                  \"count\":2}]},\n            {\n...\n\n\n\nThis nested faceting will look great in:\nhttp://download.carrotsearch.com/circles/demo/\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12907505",
            "date": "2010-09-09T01:23:57+0000",
            "content": "1) ...\n\nMoves the parameter defines to FacetParams.java\n\ni'm not sure where they were in the original patch, but i really think they should be in their own PivotFacetParams class (just as having this be a distinct SearchComponent from the existing bloated FacetComponet is nice and keeps things manageable, having the params in a separate class is also nice ... i hope to get around to refactoring FacetComponent into oblivion someday)\n\n2) when i was working on Range Faceting (superset of DateFaceting) yonik pointed out that having the metadata mixed with the counts (like date faceting used) was a bad idea, and that we should really have a \"counts\" sub list for managing the actual counts, and keep the meta-data at the top level.  with that in mind, i think what you have in your latest example looks great \u2013 i would just suggest that we rename the \"pivot\" key to \"counts\" for consistency, and then rename the \"count\" key to something else (\"total\" or \"total-count\" perhaps?)\n\n3) the one thing that still kind of bugs me about this components param structure is the way it takes in a comma seperated list of field names and then uses that comma seperated list as the \"key\" in the response.  I'm wondering if a URL structure like this would be better...\n\nhttp://localhost:8983/solr/select?q=*:*&facet.pivot=my_name&facet.pivot.my_name=cat&facet.pivot.my_name=popularity&facet.pivot.my_name=inStock&facet=true\n\n...where \"my_name\" then becomes the response key under the \"facet_pivot\" list?\n\nthat way we don't add any more features that break if you have some special character in a field name "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12907521",
            "date": "2010-09-09T05:16:14+0000",
            "content": "Here is a patch that allows for deeper nesting and more info is stored.  This creates output that looks like:\n\nhttp://localhost:8983/solr/select?q=*:*&facet.pivot=cat,popularity,inStock&facet.pivot=popularity,cat&facet=true&facet.field=cat&facet.limit=5&rows=0&wt=json&indent=true&facet.pivot.mincount=0\n\n    \"facet_pivot\":{\n      \"cat,popularity,inStock\":[{\n          \"field\":\"cat\",\n          \"value\":\"electronics\",\n          \"count\":17,\n          \"pivot\":[{\n              \"field\":\"popularity\",\n              \"value\":\"6\",\n              \"count\":5,\n              \"pivot\":[{\n                  \"field\":\"inStock\",\n                  \"value\":\"true\",\n                  \"count\":5}]},\n            {\n              \"field\":\"popularity\",\n              \"value\":\"7\",\n              \"count\":5,\n              \"pivot\":[{\n                  \"field\":\"inStock\",\n                  \"value\":\"true\",\n                  \"count\":3},\n                {\n                  \"field\":\"inStock\",\n                  \"value\":\"false\",\n                  \"count\":2}]},\n            {\n...\n\n\n\nand:\n\n\n<lst name=\"facet_pivot\">\n    <arr name=\"cat,popularity,inStock\">\n      <lst>\n        <str name=\"field\">cat</str>\n        <str name=\"value\">electronics</str>\n        <int name=\"count\">17</int>\n\n        <arr name=\"pivot\">\n          <lst>\n            <str name=\"field\">popularity</str>\n            <str name=\"value\">6</str>\n            <int name=\"count\">5</int>\n            <arr name=\"pivot\">\n              <lst>\n\n                <str name=\"field\">inStock</str>\n                <str name=\"value\">true</str>\n                <int name=\"count\">5</int>\n              </lst>\n            </arr>\n          </lst>\n          <lst>\n\n            <str name=\"field\">popularity</str>\n            <str name=\"value\">7</str>\n            <int name=\"count\">5</int>\n            <arr name=\"pivot\">\n              <lst>\n                <str name=\"field\">inStock</str>\n                <str name=\"value\">true</str>\n\n                <int name=\"count\">3</int>\n              </lst>\n              <lst>\n                <str name=\"field\">inStock</str>\n                <str name=\"value\">false</str>\n                <int name=\"count\">2</int>\n              </lst>\n\n            </arr>\n          </lst>\n...\n\n\n\n\nThis patch still needs some work to make it work with distributed search "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12908589",
            "date": "2010-09-13T02:23:53+0000",
            "content": "Updated with (slightly) better javadocs and moved the Queue to a Dequeue.\n\nI think this (or something similar) should get committed to /trunk soon... when distributed search gets implemented, then we should look at porting to 3.x "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12909012",
            "date": "2010-09-13T21:48:31+0000",
            "content": "updated to trunk "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12909015",
            "date": "2010-09-13T21:55:59+0000",
            "content": "handing this one over to Ryan, as I don't have cycles to work on it anytime soon.   Rock on Ryan... "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12909019",
            "date": "2010-09-13T22:04:55+0000",
            "content": "Thanks Erik \u2013 i'll commit this to /trunk soon and we can patch against that for distributed support "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12910008",
            "date": "2010-09-16T04:44:32+0000",
            "content": "Can this be back-ported (easily) to Solr 1.4.1? Is it dependent on new features? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12910009",
            "date": "2010-09-16T04:50:02+0000",
            "content": "It can be back ported easily, I don't quite know the ropes on when and how stuff is backported.  Since this is a new API, I though it would be good to let it settle in trunk before porting it to 1.4.1...   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12910116",
            "date": "2010-09-16T12:07:15+0000",
            "content": "1.4.x is for bugfixes only. "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12914814",
            "date": "2010-09-25T13:05:45+0000",
            "content": "Default value (as seen in a code) is\nfacet.pivot.mincount=1\n\nIt confused me during simple tests (showing wrong results). Finally I found I need to add explicitly\n&facet.pivot.mincount=0\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12916897",
            "date": "2010-10-01T14:32:22+0000",
            "content": "Hey guys - I was planning on sticking this into my \"Lucene Revolution\" presentation... but I'm not seeing any docs on it.\nCould someone take a shot at adding a section on pivot faceting to http://wiki.apache.org/solr/SimpleFacetParameters "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12917144",
            "date": "2010-10-02T02:22:58+0000",
            "content": "One thing I noticed is that the \"value\" is always a string.  Example:  \"value\":\"6\" as opposed to \"value\":6 when pivoting by popularity.\n\nResult grouping on the other hand, does use the native value type:\nhttp://localhost:8983/solr/select?q=*:*&group=true&group.field=popularity\n\nOne way to think about it is that the labels for faceting normally use string values.  But that's because they must for something like JSON.  A different way of thinking about it is that whenever we have values (as opposed to keys) we should use \"native\" types boolean, int, float, etc.\n\nThoughts? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12917156",
            "date": "2010-10-02T04:14:07+0000",
            "content": "Jira summary update based on the consensus of what this type of functionality should be called "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12917204",
            "date": "2010-10-02T15:34:40+0000",
            "content": "Keeping the facet pivot code in it's own classes is good - but I'm just curious why this needs to be a full blown search component. It even puts it's output right where the facet component does (i.e. under facet_counts).\nAlthough I'm also happy that the addition of this component doesn't add yet-another empty \"facet_xxx\" to facet_counts when it's not being used. "
        },
        {
            "author": "Christian Kesselheim",
            "id": "comment-12917906",
            "date": "2010-10-05T08:57:08+0000",
            "content": "java.util.Deque has been introduced as part  of Java SE 6.0. As a result, applying this patch effectively renders SOLR 1.5 unusable on any earlier version of Java (e.g. 1.5) . \n\nIs that by design? What are the system requirements of SOLR 1.5 going to be?  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12920009",
            "date": "2010-10-11T22:02:36+0000",
            "content": "I'm just curious why this needs to be a full blown search component.\n\nYonik: I believe this was largely motivated by various discussions about the fact that FacetComponent is getting unweildy and should really be split up into discreet SearchComponents for each type of faceting.\n\nWhat are the system requirements of SOLR 1.5 going to be? \n\nChristian: Solr 1.5 will probably never exist. This patch was committed to trunk which will eventually be Solr 4.0 and will definitely require Java 1.6...\n\nhttp://wiki.apache.org/solr/Solr1.5\nhttp://wiki.apache.org/solr/Solr3.1\nhttp://wiki.apache.org/solr/Solr4.0\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12921148",
            "date": "2010-10-14T22:02:45+0000",
            "content": "yonik \u2013 I just added some simple docs... sorry for the delay.\n\nre native types  yes, it would be great to have the native type.  It is currently a string because that is the interface exposed by SimpleFacets\n\nNamedList<Integer> f = SimpleFacets.getTermCounts(field);\n\n\n\nfor a native list, we would want something like:\n\nList<KeyValuePair<Object,Integer>> f = = SimpleFacets.getNativeTermCounts(field);\n\n\nor convert the string back to a value as it is added to the result?  I'm not sure the best approach.\n\nre separate component  I think \"SimpleFacets\" are no longer \"Simple\" and we should make an effort to break that into more components rather then one massive one.  \n\nre mincount default=1 we could make the default 0 if people think that makes more sense\n\nre deque / java6  This could easily be changed to use a non java 6 interface.  patches welcome.  But as Hoss said 1.5 will not likely be released, though this should be applied to 3.x at some point.\n\n\n\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12922550",
            "date": "2010-10-19T13:16:46+0000",
            "content": "Shouldn't this be a part of the default SearchComponent chain?  I seem to recall our general guideline was that if it didn't require any extra setup (i.e. like spell checking) that it should just be a part of the chain. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12922570",
            "date": "2010-10-19T14:15:23+0000",
            "content": "Shouldn't this be a part of the default SearchComponent chain?\n\nI think so.\n\nRegarding separate components: I think it's enough to be separate classes.  But that's really more of an internal code organization thing.  The important part is that people be able to do \"facet=true&facet.pivot=...\"\nMost won't care about SimpleFacets.\n\nIf we keep it as a separate component, then it puts an additional burden on people to remember to configure it, and figure out where to put it - before or after the \"normal\" facet component.  And if we add it as a default component that is always there, then stuff like debugging output, etc, will list this separate component.\n\nI'm not sure I see a benefit to this being a \"user visible\" component. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12922575",
            "date": "2010-10-19T14:36:48+0000",
            "content": "Regarding separate components: I think it's enough to be separate classes. But that's really more of an internal code organization thing. The important part is that people be able to do \"facet=true&facet.pivot=...\"\nMost won't care about SimpleFacets.\n\n+1.  I don't see a need for a separate component, but do agree that a separate class makes sense. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12922606",
            "date": "2010-10-19T16:25:38+0000",
            "content": "This patch converts to the field value to an Object rather then just using the string value.\n\nString internal = ftype.toInternal( kv.getKey() );\n\nthen later:\n\npivot.add( \"value\", ftype.toObject( f ) );\n\nThis could obviously be optimized, but this is the easiest way to get the behavior we want "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12922609",
            "date": "2010-10-19T16:31:12+0000",
            "content": "Re separate component\n\nI'm fine merging the behavior into FacetComponent and keeping the logic in a different class (PivotFacetHelper?) \u2013 I'll take a crack at that, but will save any distributed stuff for someone else.   "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12922645",
            "date": "2010-10-19T18:04:50+0000",
            "content": "Here is a patch that moves the pivot functionality to a helper class for the FacetComponet.\n\nOne bug I found was that although SearchComponents implement NamedListInitalizedPlugin, the default components never have init called (so far this has been OK since the standard components don't use init)\n\nThis does not support distributed search, but I kept some stuff commented out that may be helpful for someone who understands it (and can easily test.\n\nI will commit shortly...  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12922719",
            "date": "2010-10-19T21:06:52+0000",
            "content": "\nIf we keep it as a separate component, then it puts an additional burden on people to remember to configure it, and figure out where to put it - before or after the \"normal\" facet component. And if we add it as a default component that is always there, then stuff like debugging output, etc, will list this separate component.\n\nI'm not sure I see a benefit to this being a \"user visible\" component.\n\nAs far as i'm concerned, all of the things you listed are valuable reasons why this should be a user visible component \u2013 they are also reasons why i think we should try to refactor the existing FacetComponent into separate components:\n\n\n\tAbility to discreetly enable/disable them by removing them from the \"components\" list (ie: maybe you need facet.query and facet.range but you don't want facet.field and facet.pivot to be available because of the performance impacts)\n\tability to see distinct timing data from each of them independently\n\n\n\n..refactoring the existing component should be a separate Jira, but since this work was already done to keep the pivot code isolated, combining it now seems like a bad idea (unless i'm the only person who things these should all be distinct, user visible, components) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12922743",
            "date": "2010-10-19T22:02:03+0000",
            "content": "Ability to discreetly enable/disable them by removing them from the \"components\" list (ie: maybe you need facet.query and facet.range but you don't want facet.field and facet.pivot to be available because of the performance impacts)\n\nThis use case doesn't make a lot of sense to me - requests given to solr should just work.  We're not handling security/authorization  at the Solr level for the most part. The exception to this is (e)dismax, which is explicitly meant for passing through a raw user query.\n\nI personally think that 10 different facet components would be ugly, and at the end of the day, doesn't really help solve anyone's real problems.\n\nability to see distinct timing data from each of them independently\n\nThis is just a debugging issue.  Even if you could separate facet.field from facet.query, if you had multiple facet.fields, you still wouldn't know which one is taking up all the time. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12922756",
            "date": "2010-10-19T22:27:12+0000",
            "content": "I think keeping a single FacetComponent, but making it easier to build custom ones is a good idea.  Right now SimpleFacets is rather complex and could be broken into many classes. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12928276",
            "date": "2010-11-04T16:54:59+0000",
            "content": "I can reproduce the error fuad is seeing with this:\nhttp://localhost:8983/solr/select?q=*:*&facet=true&facet.pivot=popularity,manu_exact\n\n\n        <str name=\"field\">popularity</str>\n        <str name=\"value\">ERROR:SCHEMA-INDEX-MISMATCH,stringValue=`#8;#0;#0;#0;#6;</str>\n\n "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-12928309",
            "date": "2010-11-04T19:02:15+0000",
            "content": "As I read the code, the implementation performs a faceting call for each tag that it encounters. I know the query is simple and that filters are used to speed up the calls, but is still sounds awfully expensive to me. I think it can be done without the recursive faceting calls by creating packed representations (using ordinals) of the tags in the pivot fields for all documents and doing faceting on those. However, if the current implementation works fine for larger data sets, there's no reason to reworking it.  Has anyone performed scalability testing on the current implementation? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12928313",
            "date": "2010-11-04T19:23:36+0000",
            "content": "I really only reviewed the output format, figuring any performance deficiencies could be addressed later.\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12928602",
            "date": "2010-11-05T14:23:14+0000",
            "content": "thanks yonik \u2013 i just got back from a conference... I can look at this later if you need.\n\nToke \u2013 re performance improvements?  Yes, there are lots of places this could be improved (patches always welcome!) \u2013 the goal in this first implementation was to get something working with an interface (HTTP) that we like.   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12928695",
            "date": "2010-11-05T17:35:14+0000",
            "content": "Here's a draft patch that adds FieldType.toObject(SchemaField sf, BytesRef indexedTerm)\nand then uses that in the facet pivot code. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12928826",
            "date": "2010-11-05T21:14:55+0000",
            "content": "I like: FieldType.toObject(SchemaField sf, BytesRef indexedTerm)\n\nDown the road, i think we want something similar for DocValues "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-12929401",
            "date": "2010-11-07T21:24:37+0000",
            "content": "The current interface does not allow for nested queries. It is my understanding that this limits the functionality to conventional hierarchical faceting with the slight twist that the counts are for the current level instead of current level + sub levels, but that should be attainable with conventional hierarchical faceting too. This makes current pivot faceting a sub-set of SOLR-64, provided that SOLR-64 is adjusted to accept a list of fields as building blocks instead of expressing the hierarchy in a single field with delimiters. This is a good thing. It means that it can be done fast and memory-efficient as well as sharing most of the interface and output format with SOLR-64.\n\nNow, if something like nested queries is introduced in the pivot faceting interface, this changes the requirements of the underlying code as a complete recount is needed for each level. One evil nested query could be \"Select the documents where field X contains the last letter of the current tag plus the first letter of the original query\". This makes it hard (I try and avoid using the word \"impossible\") to create an implementation without query-explosion.\n\nSo where am I going with all this? My point is that the interface (of course) dictates how responsive the implementation can be. Focusing on interfaces and using small-scale test data does carry a risk of ending up with something that is inherently slow. It might be unfeasible to attain high scalability with a given interface addition and that is okay - as long as that cost is known and accepted. Hence my questions about scale and my musings about how to do it faster. "
        },
        {
            "author": "Peter Karich",
            "id": "comment-12929590",
            "date": "2010-11-08T15:14:14+0000",
            "content": "Hi Toke and all,\n\nmaybe I am a bit evil or stupid but could someone enlight me why this patch is necessary?\n\nWhy can't you we the existing mechanisms in Solr (facets!) and a bit logic while indexing:\n\nhttp://markmail.org/message/2aza6nnsiw3l4bbb#query:+page:1+mid:3j3ttojacpjoyfg5+state:results\n\nThis has no performance problems when using tons of categories. We already using it with lots of categories. It works out of the box with a nearly infinity depth (either you need a DB -> \nunlimited or the URL length is the limit).\n\nThe only drawback of this approach is that you won't be able to display two or more 'branches' at the same time. Only one current branch with the current possible categories is possible, which is no limitation in our case. Because the UI would be unusable if too many items would be visible at the same time.\n\nOne could introduce a special update component for this feature which uses a category tree (in RAM) built from the json or xml definition. I could create such a component if someone is interested.\n\nRegards,\nPeter. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12929596",
            "date": "2010-11-08T15:28:49+0000",
            "content": "Hi Peter,\n\nI like to think of it as \"What if\" faceting and doesn't require the categories to be defined up front.  You can solve this through hierarchical faceting, too, but this (pivot) approach doesn't require a traditional relationship description like hierarchical faceting does. "
        },
        {
            "author": "Peter Karich",
            "id": "comment-12929601",
            "date": "2010-11-08T15:46:26+0000",
            "content": "Hi Grant,\n\nah, ok I see. Thanks for the explanation! "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-12929606",
            "date": "2010-11-08T16:10:20+0000",
            "content": "I'd be interested to hear what the focus of SOLR-792 is, as opposed to SOLR-64. Or to put it another way: If SOLR-64 was adapted to accept a list of fields for the hierarchy, what would the purpose of SOLR-792 be? "
        },
        {
            "author": "Adeel Qureshi",
            "id": "comment-12971799",
            "date": "2010-12-15T19:33:55+0000",
            "content": "is this pivot faceting supposed to work with date fields .. i tried it and with a date field and it didnt returned any pivot results for that date field .. I am assuming even if it works it still requires more information like start, end, gap field .. but there is no mention of how to pass that information to this new pivot stuff ..  "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-13015415",
            "date": "2011-04-04T13:56:06+0000",
            "content": "Hi,\n\nJason Folk posted:\nfacet.tree currently seems to bark at exclusion tags, I wouldn't mind trying to take a crack at this (as I currently do need it), but not really sure where to begin looking.\n\n\nIs it resolved? My client currently uses \"pivot\" in production, few mlns records\n\nIf it's not resolved yet I can dig into it... "
        },
        {
            "author": "Upayavira",
            "id": "comment-13043095",
            "date": "2011-06-02T22:10:19+0000",
            "content": "Is this supposed to support distributed search? I just tried it (using a recent trunk) - worked nicely across a single index but showed no entries across two shards. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13043097",
            "date": "2011-06-02T22:14:30+0000",
            "content": "I don't know the answer to that - I assume it doesn't yet? But I would consider this a bug myself in any case - the none distrib components should throw a nice error if used in distrib. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13043099",
            "date": "2011-06-02T22:16:45+0000",
            "content": "it does not (yet) support distributed.  An early patch did \u2013 but I don't have any experiece with making stuff distributed, so that part is waiting for contributions.... "
        },
        {
            "author": "Dan Cooper",
            "id": "comment-13122621",
            "date": "2011-10-07T08:37:01+0000",
            "content": "My project requires distributed facet pivot so I have written a patch to do this and attached it to the issue.\n\nThe patch affects only FacetComponent and I have tested it against Solr 4.0 trunk.  The latest revision number I have used is 1179956.\n\nIt seems to work fine from my limited testing, although I haven't written any unit tests to check the functionality.\n\nAs each shard already returns a pivot facet it's just a case of merging the pivots together as per the other facets.  \n\nI hope this patch is useful. "
        },
        {
            "author": "Li Fanxi",
            "id": "comment-13130461",
            "date": "2011-10-19T09:09:54+0000",
            "content": "I have a question about facet.pivot.mincount. Does this parameter defined as the limitation for \"minimum number of documents\" that should be included in the result? \n\nIn the current implementation, I found that this parameter also takes effect for the number of facets fields, caused by the following code in doPivots function: \n\n\n    NamedList<Integer> nl = sf.getTermCounts(subField);\n    if (nl.size() >= minMatch ) {\n        pivot.add( \"pivot\", doPivots( nl, subField, nextField, fnames, rb, subset, minMatch ) );\n        values.add( pivot ); // only add response if there are some counts\n    }\n\n \n\nI don't understand why we need to compare minMatch to nl.size().\n\nWith this code, if we do pivot faceting on the fields \"cat,manu_id_s\", when cat='electronics' and we have 50 documents distributed in 3 different \"manu_id_s\". If we limit the result with facet.pivot.mincount=5, no result will be returned, because there are only 3 different \"manu_id_s\". Is this the desired behavior for the \"facet.pivot.mincount\" parameter?\n\nIf this is not the desired behavior, what behavior it should be? My suggestion is to filter the results only based on document count, and return both the actual number and the number of document has been filtered by mincount parameter to the caller, and user can get the raw data and define the behavior by themselves.  "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13143982",
            "date": "2011-11-04T13:02:13+0000",
            "content": "Why isn't this resolved yet? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13144012",
            "date": "2011-11-04T13:39:44+0000",
            "content": "Why isn't this resolved yet?\n\nRyan said:\nit does not (yet) support distributed. An early patch did \u2013 but I don't have any experiece with making stuff distributed, so that part is waiting for contributions....\n\nPerhaps we should close this and open another issue for the implementation of distributed pivoting? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13144032",
            "date": "2011-11-04T14:00:31+0000",
            "content": "+1 to closing and opening a new jira for distributed support (as we have done with other features in the past) "
        },
        {
            "author": "Dan Cooper",
            "id": "comment-13146406",
            "date": "2011-11-08T17:13:05+0000",
            "content": "I have submitted a patch for distributed pivoting above, however I have since realised that while it works well on the small sample data it does not scale well.  This is due to the use of NamedList objects for storing and merging the pivoted data.\n\nI have since improved the code to use maps whilst merging the pivots and it runs well across our large indexes.  I will submit this again in a few days when I have had time to review and package up the code properly (there is some proprietary code I need to separate it from).\n\nMy company relies on this functionality and we have it working with Solr 4 so we would like to contribute it back to the community if possible. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13148501",
            "date": "2011-11-11T14:02:01+0000",
            "content": "Perhaps we should close this and open another issue for the implementation of distributed pivoting?\n\n+1 "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13149275",
            "date": "2011-11-13T11:20:05+0000",
            "content": "opening a new issue for distributed support "
        },
        {
            "author": "Antoine Le Floc'h",
            "id": "comment-13190809",
            "date": "2012-01-22T22:40:43+0000",
            "content": "distributed pivot faceting "
        }
    ]
}