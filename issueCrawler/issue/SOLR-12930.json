{
    "id": "SOLR-12930",
    "title": "Add great developer documentation for writing tests.",
    "details": {
        "type": "Sub-task",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [
            "Tests"
        ],
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "",
    "attachments": {
        "solr-dev-docs.zip": "https://issues.apache.org/jira/secure/attachment/12945844/solr-dev-docs.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16664306",
            "content": "Mark Miller - we'd do this once we've done or decided on how/what to do with most of the other stuff, right? i.e. decided and split the unit/integration tests, fix the framework etc. ",
            "author": "Anshum Gupta",
            "date": "2018-10-25T21:24:19+0000"
        },
        {
            "id": "comment-16664315",
            "content": "Yeah, the bulk of the good stuff will probably come down the road, but we could use really even just the basics for what we have now.\n\nWhen it's time to write a Solr or SolrCloud test as a new dev, it's really quite challenging to understand anything or get started. You just find something and copy and push off in some direction.\n\nEven now, those that know how to right good tests, what style of SolrCloud test to write, that you have to beast tests, how to beast them etc, have a lot to share in terms of best practices with less knowledgeable or newer devs I'd bet.\n\nWhat a unit and integration tests is, why we need both, how to write both etc (it's going to get easier, but you can still do some of this today)\n\nSo a lot to do later, but a ton we could do now. ",
            "author": "Mark Miller",
            "date": "2018-10-25T21:32:50+0000"
        },
        {
            "id": "comment-16664319",
            "content": "That sounds reasonable\u00a0 ",
            "author": "Anshum Gupta",
            "date": "2018-10-25T21:44:36+0000"
        },
        {
            "id": "comment-16664323",
            "content": "Cassandra Targett, Hoss Man - either of you know how to or have the power to get us a Solr Developer space in the cwiki? ",
            "author": "Mark Miller",
            "date": "2018-10-25T21:48:33+0000"
        },
        {
            "id": "comment-16665110",
            "content": "Mark Miller, I think it used to be that someone just filed an issue with INFRA with the request, but I looked it up and found this which is recently updated, so I assume it's the current approach: https://cwiki.apache.org/confluence/display/INFRA/Cwiki#Cwiki-HowdowerequestaCWIKISpace?. Apparently there is now a self-serve portal where a space can be requested: https://selfserve.apache.org/, but it looks like our PMC chair (Adrien Grand) needs to be the one who makes the request.\n\nThe space ID \"solr\" is still taken by the old Ref Guide - we have an automatic redirect in place for anyone who goes to the old Ref Guide URLs. I think we still want that, but maybe another ID like \"solr-dev\" is OK? ",
            "author": "Cassandra Targett",
            "date": "2018-10-26T12:25:59+0000"
        },
        {
            "id": "comment-16665127",
            "content": "Or we could aim for a new asciidoctor powered\u00a0solr-developerguide\u00a0in git, which over time could grow with topics like \"How to write a good patch\", \"How to work with Git\", \"How to develop av Solr plugin\".... The benefit of asciidoc is that everybody already use it for ref guide, and we have processes in place to push it as PDF or as part of the webpage. And of course, it is versioned, so if there is a big change for developers in a certain version the docs stay there right next to the code \u00a0 ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-10-26T12:47:23+0000"
        },
        {
            "id": "comment-16665177",
            "content": "+1 on the idea of asciidoc, especially since it allows to embed code segments straight from source, like in SolrJ example. ",
            "author": "Alexandre Rafalovitch",
            "date": "2018-10-26T13:36:06+0000"
        },
        {
            "id": "comment-16665207",
            "content": "Or we could aim for a new asciidoctor powered solr-developerguide in git...\n\nOh my god, how is it I didn't think of that?\n\nSeriously, though, this is an idea worth exploring - we already have docs on \"how to write the Ref Guide\" in asciidoc, and we can make a new area of our website to host it. If we don't try to put it in the Ref Guide or need to publish a PDF as the \"official\" doc, some of the strictness we have for the Ref Guide can be relaxed to make it easier.\n\nMy personal recommendation would be to write the content into separate files, but publish it in a single page format, similar to how HBase does it: https://hbase.apache.org/book.html#developer (they mix user docs & dev docs together, so ignore that part - what I mean is we could present it similarly as a single page, but with just dev doc content on a single page with a TOC on the left or right side). Doing that is incredibly simple with OOB Asciidoctor - we wouldn't even need Jekyll in this case - and it would be easy to set up a simple Ant target for it. ",
            "author": "Cassandra Targett",
            "date": "2018-10-26T13:55:50+0000"
        },
        {
            "id": "comment-16665282",
            "content": "docs stay there right next to the code \n\nThat sounds good to me. ",
            "author": "Mark Miller",
            "date": "2018-10-26T15:11:16+0000"
        },
        {
            "id": "comment-16665533",
            "content": "Actually it sounds great to me. It really does seem like the best idea is the same thing as the ref guide, but more relaxed, no releases.\n\nSo we would just set it up like the current working version of the ref guide, simplified as Cassandra suggests?\n\nAnd still would want a new cwiki space to publish to?\n\nIf anyone has time to help get that going, I will definitely start adding some content any time.\n\nIf we need the new cwiki space, I can herd that cat. ",
            "author": "Mark Miller",
            "date": "2018-10-26T18:43:59+0000"
        },
        {
            "id": "comment-16665659",
            "content": "I think we'd have to pick either use cwiki or use the slimmed-down Ref Guide (Asciidoctor) way. I'm not coming up with a way to have both (keep source with code & also publish to cwiki) off the top of my head, but I'll do a little bit of research to see what's out there. Maybe we can - we'd still have to have some kind of \"publish\" process, though.\n\nThe benefit of cwiki is instant publication as soon as you hit enter to save the page, but the con is your docs are in some other repo separate from the code it's trying to help you use. It's pretty much the exact opposite pro/con for the Asciidoctor way - your docs are in the same repo as your code, but you have to have a publication process of some kind to get it into a browser-readable form like HTML.\n\nI'll come up with a strawman of sorts for publication process so people get a feel for what that would be like so we can try to get this together quickly. ",
            "author": "Cassandra Targett",
            "date": "2018-10-26T20:49:25+0000"
        },
        {
            "id": "comment-16665666",
            "content": "Actually, GitHub renders Asciidoc right in the source browse, e.g.: https://github.com/apache/lucene-solr/blob/master/solr/solr-ref-guide/src/about-filters.adoc\n\nIt is not perfect (e.g. not resolving the imports) and does not help with built-output, but it may be ok as a public preview.\n\nThere is also an option of using something like Netlify which does support Jekyll and allows to build from a repo, but it needs to be setup/configured right. A separate project. ",
            "author": "Alexandre Rafalovitch",
            "date": "2018-10-26T20:56:41+0000"
        },
        {
            "id": "comment-16665795",
            "content": "Ah, okay, no problem. \n\nI'm not super familiar with how the ref guide works - I thought it must be Asciidoc and then publish a current working version to cwiki and you could just dupe that approach. Before assumed that was the case, I was going to mention publishing to cwiki would be cool but probably not necessary. \n\nEven if we can't publish to a site at all, it's docs for people really developing for Solr - it would not be the worst to be a local thing. Sounds like GitHub will offer something very lower barrier for online, so that sounds promising. ",
            "author": "Mark Miller",
            "date": "2018-10-27T00:31:33+0000"
        },
        {
            "id": "comment-16665801",
            "content": "bq, I thought it must be Asciidoc and then publish a current working version to cwiki\n\nOh god, no, we dropped cwiki entirely. It's all hosted on the Solr website now.\n\nI did look into pushing Asciidoc content to Confluence, and the main tools out there are kind of old, or only work with old versions. I don't know that's the best approach anyway - it's something that could break at any time if one version changes on either side.\n\nI've come up with a simple example project that uses Asciidoctor with an Ant target to generate an HTML file, if that's what we want. It's all kind of quick & dirty - a bunch of stuff would need to be done to fully integrate it with the project for real - but it shows the basic concepts if you aren't familiar with \"what's the basic Asciidoctor can do\" vs. \"what did we add to Asciidoctor for our needs\". Just unzip the solr-dev-docs.zip, run the ant build-devdocs target, and then look in the build/html directory for dev-docs.html.\n\nEven without generating an HTML we publish, one thing I was thinking is we could add a new directory at lucene-solr/solr/docs that includes the dev-docs content + the ref guide. But I'm not sure I care all that much about where the dev docs go; it just seemed they were docs and all docs-things could go together. ",
            "author": "Cassandra Targett",
            "date": "2018-10-27T00:49:59+0000"
        },
        {
            "id": "comment-16665831",
            "content": "To me, the main value of having the dev docs somewhere in the source tree is pretty much the same argument as having the ref guide: you can (ahem) encourage people to add dev guide stuff with the patch. Much more coherent than \"I'll get to the cwiki later\" \n\nAs for the details of whether it's a section of the standard ref guide or a sibling directory or... I'm perfectly happy to defer to the opinion of people who actually do the work. Whatever's easiest.... ",
            "author": "Erick Erickson",
            "date": "2018-10-27T02:10:43+0000"
        },
        {
            "id": "comment-16665977",
            "content": "As for the details of whether it's a section of the standard ref guide or a sibling directory or... \n\nI think the reference guide needs to be for end users and not include things being discussed here.  I've got no interest in hiding the information from users, but I think it would be out of place in the reference guide and be confusing to novices.\n\nSo my thought is a sibling dev guide.  It certainly wouldn't be as big or as complex as the ref guide, and although I don't think we necessarily need to have it all on one page, there probably shouldn't be very many total pages, at least in the early days.  Later, we might decide on some kind of organizational concept which changes that assumption.\n\nSomething else to think about:  Do we want to move the complex moving parts for building the guide so a dev guide could be built that includes things like ReleaseToDo and similar best practices for Lucene?  Would we want to have separate dev guides for both halves of the project?\n\nActually, GitHub renders Asciidoc right in the source browse\n\nThat's really awesome.\n\nTL;DR:  One of my past conversations with Infra yielded a tidbit which I did mention on dev@l.a.o at one point:  At some point in the relatively near future, all git repositories at Apache will be migrated from the git-wip system to gitbox.  I don't know the details, but apparently gitbox includes some deep integration with github.  I wonder if there might be something interesting to be done with github's asciidoc rendering. ",
            "author": "Shawn Heisey",
            "date": "2018-10-27T07:50:43+0000"
        },
        {
            "id": "comment-16666149",
            "content": "Sorry for the length of the comment, there\u00a0are a few things I wanted to make sure were clear, both in what I\u00a0have been suggesting and what I know about the realities of trying to publish some docs-something, no matter how casually we try to do it.\nI think the reference guide needs to be for end users and not include things being discussed here...\nI agree, it should not be part of the standard Ref Guide. Also there are release rules about VOTES to publish the Ref Guide (since it is an \"official\" artifact of the project) that would be obstructions if we applied them to developer documentation. A goal needs to be to remove as many obstructions as possible - or at least not put them up at the start.\n\nA sibling dev guide is exactly the proposal I made in my earlier comments and in the example project I created.\n\nThe basic infrastructure I created in my small example project is mostly only there if we want to publish an HTML version of a Dev Guide online, and not only rely on developers to either load pages in their IDEs (which most committers could be expected to do as a general rule) or have to go find the pages somewhere in the tree in Github to look at them (which new contributors may not know to do). A one-stop place for \"everything anyone needs to know about developing Solr\", linked from the Resources page of the website, would be quite helpful IMO to new potential contributors.\n\nI think they should be in asciidoc format, so all our docs are in the same file format; it reduces context switching which would encourage participation from everyone.\n\nI have not been\u00a0suggesting that we copy\u00a0everything we do today for the Ref Guide and do it for developer docs (or, I was attempting to specifically not suggest that). If you look at the strawman project I made, it's not nearly as complex as the Ref Guide. That comparison requires you to have a sense for how the Ref Guide works, but it's basically just an ant target that downloads a .jar and builds\u00a0an HTML page in about 3 seconds. It's a lot simpler than the Ref Guide process which includes a lot of page templates and nav building and validation for correctness that we could forego\u00a0for this case.\nI don't think we necessarily need to have it all on one page, there probably shouldn't be very many total pages...\nRegarding this point - just to make sure we're referring to the same thing, my point about a single page was not that all the content lives in some single huge file. That would be a pain to maintain and edit. The content should be in multiple files that each discuss a specific area of development (setting up your IDE, how to build, how to write tests, how to submit patches, etc.). The idea of a single file was about taking all those smaller files we write and publishing them as a single HTML page that is the thing make public. This is is done very easily with Asciidoctor (https://asciidoctor.org/docs/user-manual/#include-directive).\n\nBut, in case you meant having multiple HTML pages as the output - as soon as you have more than one page, you need navigation between those pages. You don't get navigation between pages without some work on our part to make it happen (perhaps a page hierarchy, then you need clues for the user about where they are in the hierarchy) and some of the complexity of the Ref Guide today is in building the page navigation and\u00a0you can only do that if you have a template for the page so they are all the same...essentially\u00a0the only way to get that is to do something like Jekyll, which is why we have to\u00a0use that today for the Ref Guide. A single HTML page allows us to forget all of those concerns because the nav - such as it is - is built into the side of the page during the build process. We only need to make sure all the pages are included in the mono-page using\u00a0the include directive functionality I mentioned ^^.\nAt some point in the relatively near future, all git repositories at Apache will be migrated from the git-wip system to gitbox\nThe Gitbox transition is interesting in this context. One of the things this change will do is make the Github repo the primary repository, which for us today is a mirror of the ASF Git repo (our current ASF Git repo becomes the\u00a0read-only mirror). So instead of pushing our commits to ASF Git, we push them to Github, and we pull new changes from Github. That opens up all of Github's features which today we cannot use (a primary one being the ability to interact with pull requests directly from Github).\n\nFor this discussion an interesting feature then would be\u00a0the ability\u00a0to use Github Pages (https://pages.github.com/), which has deep Asciidoctor integration and could be integrated into our project how we see fit. This gives us another place we could publish a Dev Guide, but\u00a0that publication can happen\u00a0as soon as changes are pushed to\u00a0the branch we would need to maintain specifically for this purpose (I believe it has to be called \"gh-pages\"; a workflow might be we make changes to master, then cherry-pick to this branch).\n\nThere's a little bit of complexity there in terms of changing our usual workflows, but maybe that's worth it, because as I said in an earlier comment, someone is going to have to push some sort of button somewhere to get any content published out to the world (unless we don't do that and instead just expect people find it in the source). Workflows are going to need to change in some way anyway. It's just a question of which change we like the most. ",
            "author": "Cassandra Targett",
            "date": "2018-10-27T15:54:40+0000"
        },
        {
            "id": "comment-16666199",
            "content": "The idea of a single file was about taking all those smaller files we write and publishing them as a single HTML page that is the thing make public\n\nIf the overall guide's size and organizational strategy will generate a useful document as a single published page, whether it's multiple source files or a single file, then I'm all for it.  I suspect that as the dev guide evolves and grows, eventually it will work better as a handful of pages ... but I could be completely wrong about that.  Your point about the need for navigation when there are multiple pages is spot on.\n\nThe basic infrastructure I created in my small example project \n\nSlightly ashamed to admit that I haven't actually looked at it.  A bit overwhelmed with real-world happenings, so I am skimming things that I should probably be studying in-depth.\n\nThere's a little bit of complexity there in terms of changing our usual workflows, but maybe that's worth it\n\nWhich if I'm not mistaken is the gist of the effort that Mark Miller is trying to spearhead.  I think everyone is more or less on the same page.  I am encouraged when discussions reveal a rough consensus for a reasonably clear path forward.\n\nThe Gitbox transition is interesting in this context.\n\nDigesting that and trying to think ahead to possible gotchas and benefits (challenging when my knowledge is incomplete), I had a slight worry that the \"issues\" section of github would become a distraction.  I found that the apache/lucene-solr mirror currently on github doesn't have that feature turned on, so the link isn't even there.  I have in mind a small change to README.md for clarification purposes on issue tracking \u2013 noting that the omission of \"issues\" in github is intentional because we use Apache Jira for that.  If I can find a moment to whip up a patch, I'll attach it here.  One thing I wonder is whether we can have github show the \"issues\" link, but instead of having the feature actually activated, have the link go to a page (markdown?) about Jira. ",
            "author": "Shawn Heisey",
            "date": "2018-10-27T19:19:09+0000"
        }
    ]
}