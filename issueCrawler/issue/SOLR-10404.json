{
    "id": "SOLR-10404",
    "title": "The \"fetch\" streaming expression should escape join values in generated query",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "6.5.1"
        ],
        "affect_versions": "6.5",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The \"fetch\" streaming expression joins data from another collection.  Example:\nexpr=fetch(collection,search(...), on=\"fieldA=fieldB\"\n  Internally, it does this by building a Solr query that looks like  fieldB:(value1 value2 value3).  But those values are not escaped; they should be.  See FetchStream.java line 233.  The ramification is that, for example, if a value contains a colon, then this isn't going to work.",
    "attachments": {
        "SOLR_10404.patch": "https://issues.apache.org/jira/secure/attachment/12861732/SOLR_10404.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-03T16:20:33+0000",
            "content": "Here's a patch that fixes the issue. It also sizes some lists & buffers better, and it generates a query that won't thrash the queryCache.  I also ensured even the first value has a space before it to avoid a sneaky bug/trick to avoid the equivalent of a Solr query injection in the value.  I've used that to \"hack\" known-Solr installations before \u2013 exercise to the reader    Granted in this case it would be exceptionally odd based on how I see the \"fetch\" feature being used.\n\nIt would be nice to use the \"terms\" QParser but unfortunately there is no escaping mechanism for the delimiter \n\nShould the generated query include a collapse on the field?  Without it if multiple records have the value then the user might get multiple records for some values and no records back for others because \"rows\" is set.  If we don't want a collapse (usually needless overhead?) then we ought to throw an exception if the numFound exceeds the rows.\n\nIMO, StreamExpressionTest is too big \u2013 it should be split up.  And add useful test utility methods to avoid mundane repetition... similar to Lucene's BaseTokenStreamTestCase utility which is conceptually similar. ",
            "author": "David Smiley",
            "id": "comment-15953730"
        },
        {
            "date": "2017-04-05T12:57:00+0000",
            "content": "Commit cb9f151db4b5ad5c5f581b6b8cf2e5916ddb0f35 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cb9f151 ]\n\nSOLR-10404: fetch() streaming expression: escape values in generated query. ",
            "author": "ASF subversion and git services",
            "id": "comment-15956798"
        },
        {
            "date": "2017-04-05T13:00:00+0000",
            "content": "Commit 048705e0e47ac04b6914e73c7ec3cc8daa12f2e0 in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=048705e ]\n\nSOLR-10404: fetch() streaming expression: escape values in generated query.\n\n(cherry picked from commit cb9f151) ",
            "author": "ASF subversion and git services",
            "id": "comment-15956804"
        },
        {
            "date": "2017-04-05T13:04:19+0000",
            "content": "Commit 55eb30cc9d77196227d8e9d86aae77a55545f869 in lucene-solr's branch refs/heads/branch_6_5 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=55eb30c ]\n\nSOLR-10404: fetch() streaming expression: escape values in generated query.\n\n(cherry picked from commit 048705e) ",
            "author": "ASF subversion and git services",
            "id": "comment-15956815"
        }
    ]
}