{
    "id": "SOLR-2848",
    "title": "DirectSolrSpellChecker fails in distributed environment",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "SolrCloud",
            "spellchecker"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "While working on SOLR-2585, it was brought to my attention that DirectSolrSpellChecker has no test coverage involving a distributed environment.  Here I am adding a random element to DistributedSpellCheckComponentTest to alternate between the \"IndexBased\" and \"Direct\" spell checkers.  Doing so revealed bugs in using DirectSolrSpellChecker in a distributed environment.  The fixes here roughly mirror those made to the \"IndexBased\" spell checker with SOLR-2083.",
    "attachments": {
        "SOLR-2848-refactoring.patch": "https://issues.apache.org/jira/secure/attachment/12501813/SOLR-2848-refactoring.patch",
        "SOLR-2848.patch": "https://issues.apache.org/jira/secure/attachment/12499886/SOLR-2848.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "James Dyer",
            "id": "comment-13131758",
            "date": "2011-10-20T16:53:29+0000",
            "content": "increase test coverage & fix bugs subsequently found. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13133044",
            "date": "2011-10-21T20:44:32+0000",
            "content": "thanks James! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13133350",
            "date": "2011-10-22T12:18:22+0000",
            "content": "Thanks for bringing this up James, a few questions:\n\n\tCan we instead fold these changes into the base spellchecking class or somewhere else in Solr? I don't think a spellchecking implementation should have to deal with this stuff, this is a plugin API and it should only have to implement spellcheck.\n\tIs there a way we can remove the instanceof checks in SpellCheckComponent completely? I think seeing these is a sign there is a serious problem in the spellchecking APIs.\n\twhat is the problem with the internal levenshtein implementation? I'm not sure we should silently change this here, i don't understand why we should use the slower one if the user asked for 'internal'.\n\n "
        },
        {
            "author": "James Dyer",
            "id": "comment-13134121",
            "date": "2011-10-24T14:52:23+0000",
            "content": "Robert,\n\nI think your first suggestion (moving configuration and response formatting out of the *SolrSpellCheck) is desirable and doable, but I wanted to keep this issue focused on increasing test coverage and to make DirectSolrSpellChecker mirror what AbstractLuceneSpellChecker already does so that it can pass.\n\nObviously, if every SpellChecker plug-in implemented or extended something that had a \"getStringDistance\" or \"getAccuracy\" method then we wouldn't need to do instanceof and cast.  Once again, a big structural change like this seems inappropriate in a bug fix, especially as we are not introducing these checks for the first time.  This is a long-standing problem.\n\nIt looks to me like \"internal levenshtein\" is just a dummy class designed to technically meet the api requirements while not actually doing anything.  But SpellCheckComponent.finishStage() needs to be able to get the StringDistance impl that was used to generate suggestions during the first stage, then re-compute distances using its getDistance() method.  This is how it can know how to order the varying suggestions from multiple shards after-the-fact.  I see from the notes in DirectSpellChecker that using the \"internal\" StringDistance yields performance improvements over using a pluggable s.d.  I did not look enough to determine if \"internal levenshtein\" could be modified to re-compute these internally-generated distance calculations and be usable externally, without sacrificing the performance gain.  If possible, this would probably be our best bet, eliminating the Exception hack and any possible discrepancies using 2 different s.d. classes would cause.  Do you agree? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13134123",
            "date": "2011-10-24T14:57:55+0000",
            "content": "\nBut SpellCheckComponent.finishStage() needs to be able to get the StringDistance impl that was used to generate suggestions during the first stage, then re-compute distances using its getDistance() method.\n\nThis is the part i dont understand... we already have the scores in the results, so why recompute? "
        },
        {
            "author": "James Dyer",
            "id": "comment-13134142",
            "date": "2011-10-24T15:27:49+0000",
            "content": "finishStage() is being run on the Master Shard.  It receives spelling results from all of the shards and then has to integrate them together.  Solr doesn't return the scores with spelling suggestions back to the client.  I suppose the authors of SOLR-785 could have modified the response Solr sends back to its clients.  However, it probably seemed inexpensive enough to just re-compute the string distance after-the-fact (indeed Lucene In Action 2nd ed sect 8.5.3 mentions doing the same thing, so I take it this is a common thing to do?).  The problem now we have is we've got a spellchecker that doesn't fully implement a StringDistance all the time.  I'd imagine the best bet is to try and change that.  Possibly, the slight discrepancies our current patch leave are not serious enough to fix?  If neither option is good, then we'd probably have to modify the solr response to include scores. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13134150",
            "date": "2011-10-24T15:37:21+0000",
            "content": "\nI'd imagine the best bet is to try and change that.\n\nOK, Lets do this, such that the distance impl is a \"real\" one computing levenshtein like Lucene does and not a fake one. Then its one less hack.\n\nWant to open a LUCENE issue for this? I can help if you want. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13134160",
            "date": "2011-10-24T15:43:08+0000",
            "content": "\nThe problem now we have is we've got a spellchecker that doesn't fully implement a StringDistance all the time.\n\nwe should fix that hack as i mentioned I think (its just a hack, caused by me, sorry!).\n\nBut then we should think about how to make sure that SpellChecker subclasses always work correctly distributed if we aren't going to change the wire format. Rather than instanceof/StringDistance maybe we could add a merge() method that would be more general? "
        },
        {
            "author": "James Dyer",
            "id": "comment-13134182",
            "date": "2011-10-24T15:59:12+0000",
            "content": "\nOK, Lets do this, such that the distance impl is a \"real\" one computing levenshtein like Lucene does\nI opened LUCENE-3527.\n\n\nRather than instanceof/StringDistance maybe we could add a merge() method that would be more general?\nAre you thinking each *SolrSpellChecker should have a merge() that finishStage() calls?  This sounds reasonable to me. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13134187",
            "date": "2011-10-24T16:02:48+0000",
            "content": "Yeah, this way a spellchecker can decide how it merges results (since we arent going to put any 'score' in the wire format or require it).\n\nSo for example, the default impl of AbstractLuceneSpellChecker's merge() would use getComparator and such (we can just put this in the abstract class)\n "
        },
        {
            "author": "James Dyer",
            "id": "comment-13141442",
            "date": "2011-11-01T18:31:38+0000",
            "content": "sync w/trunk & modified in light on completion of LUCENE-3527.  This version doesn't have any refactorings. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13141480",
            "date": "2011-11-01T19:20:57+0000",
            "content": "This version also contains refactorings to SpellCheckComponent.finishStage(), and moves the final merge to the SolrSpellChecker abstract class.\n\nAn alternative to doing this would be to keep the \"mergeSuggestions()\" method in SpellCheckComponent and simply implement \"getStringDistance()\" and \"getAccuracy()\" in SolrSpellChecker.  "
        },
        {
            "author": "James Dyer",
            "id": "comment-13147083",
            "date": "2011-11-09T15:06:00+0000",
            "content": "I would really like to get this issue resolved if possible.  Here are 3 possible solutions:\n\n1. The Nov 1 patch \"SOLR-2848.patch\" increases test coverage and makes the minimal changes to fix the distributed bug with DirectSolrSpellChecker.\n\n2. The Nov 1 patch \"SOLR-2848-refactoring.patch\" also refactors the code, breaking the finishStage() method up and also moving the final merge into SolrSpellChecker.  This allows us to theoretically have different spell checkers choose to merge differently.  In practice, all of our spell checkers currently would use the same default version of \"merge()\"\n\n3. We could dial back the changes in \"SOLR-2848-refactoring.patch\" to keep merge() as a method in SpellCheckComponent as all spell checkers use the same algorithm anyhow.  But we could keep the changes to make finishStage() more readable and, more importantly, keep the \"getStringDistance()\" and \"getAccuracy()\" methods in SolrSpellChecker.  This at least eliminates the need for \"instanceof\" checks, making Distributed Spell Check less brittle as new spell checkers are added.\n\nPlease advise how we should move forward.  (I like option #3 the best.  I can create a patch for this if desired.)  Thanks.\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13147094",
            "date": "2011-11-09T15:20:35+0000",
            "content": "Personally I really like your 2nd patch. I think its nice to open up merge() like this.\n\nSome ideas:\n\n\tI also think for now getStringDistance/getAccuracy need not return null? If you don't support these methods, throw UOE instead and override merge(). we document that this is how the default merge implementation works.\n\tCan we make getStringDistance/getAccuracy protected instead of public? We don't want them to be suddenly get used by lots of other code when they are really just a merge implementation detail.\n\tIs there any way to avoid this extra docFreq call when the spellchecker is 'sharded' ? Seems like we call docFreq twice in that case.\n\tI'd really like for a specific spellchecker impl to be able to able to work with the default merge implementation etc without having 'boolean sharded' (it shouldnt have to \"know\"). What is this extra check doing, and can we move it to the base class?\n\n "
        },
        {
            "author": "James Dyer",
            "id": "comment-13147193",
            "date": "2011-11-09T17:58:16+0000",
            "content": "Here is a version that addresses Robert's concerns.\n\n\nI'd really like for a specific spellchecker impl to be able to able to work with the default merge implementation etc without having 'boolean sharded' (it shouldnt have to \"know\"). What is this extra check doing, and can we move it to the base class?\n\nWhat happens is the first stage of a distributed request needs to return the original tokens plus an empty list so that the master, when merging, can know that the shard found the token misspelled but had no suggestions.  But if this is not a shard request, we don't want to go sending empty lists back to the enduser.  Hence the \"isShard\" boolean.  I removed this, allowing it to return empty lists all the time, and then having them removed out of the response if it is a non-distributed scenario.  This invalidated some test scenarios, so I made adjustments to a few unit tests to cope.\n\nLet me know if this needs more work before committing. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13147198",
            "date": "2011-11-09T18:07:16+0000",
            "content": "I'm +1 for this patch... any objections?\n\nThanks for cleaning all this up James! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13147602",
            "date": "2011-11-10T10:54:59+0000",
            "content": "Thanks again James! "
        }
    ]
}