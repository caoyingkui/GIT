{
    "id": "LUCENE-545",
    "title": "Field Selection and Lazy Field Loading",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/store"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "2.0.0",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "The patch to come shortly implements a Field Selection and Lazy Loading mechanism for Document loading on the IndexReader.\n\nIt introduces a FieldSelector interface that defines the accept method:\nFieldSelectorResult accept(String fieldName);\n\n(Perhaps we want to expand this to take in other parameters such as the field metadata (term vector, etc.))\n\nAnyone can implement a FieldSelector to define how they want to load fields for a Document.  \nThe FieldSelectorResult can be one of four values: LOAD, LAZY_LOAD, NO_LOAD, LOAD_AND_BREAK.  \nThe FieldsReader, as it is looping over the FieldsInfo, applies the FieldSelector to determine what should be done with the current field.\n\nI modeled this after the java.io.FileFilter mechanism.  There are two implementations to date: SetBasedFieldSelector and LoadFirstFieldSelector.  The former takes in two sets of field names, one to load immed. and one to load lazily.  The latter returns LOAD_AND_BREAK on the first field encountered.  See TestFieldsReader for examples.\n\nIt should support UTF-8 (I borrowed code from Issue 509, thanks!).  See TestFieldsReader for examples\n\nI added an expert method on IndexInput  named skipChars that takes in the number of characters to skip.  This is a compromise on changing the file format of the fields to better support seeking.  It does some of the work of readChars, but not all of it.  It doesn't require buffer storage and it doesn't do the bitwise operations.  It just reads in the appropriate number of bytes and promptly ignores them.  This is useful for skipping non-binary, non-compressed stored fields.\n\nThe biggest change is by far the introduction of the Fieldable interface (as per Doug's suggestion from a mailing list email on Lazy Field loading from a while ago).  Field is now a Fieldable.  All uses of Field have been changed to use Fieldable.  FieldsReader.LazyField also implements Fieldable.\n\nLazy Field loading is now implemented.  It has a major caveat (that is Documented) in that it clones the underlying IndexInput upon lazy access to the Field value.  IT IS UNDEFINED whether a Lazy Field can be loaded after the IndexInput parent has been closed (although, from what I saw, it does work).  I thought about adding a reattach method, but it seems just as easy to reload the document.  See the TestFieldsReader and DocHelper for examples.\n\nI updated a couple of other tests to reflect the new fields that are on the DocHelper document.\n\nAll tests pass.",
    "attachments": {
        "fieldSelectorPatch.txt": "https://issues.apache.org/jira/secure/attachment/12325383/fieldSelectorPatch.txt",
        "LazyFields.tar.gz": "https://issues.apache.org/jira/secure/attachment/12326193/LazyFields.tar.gz",
        "newFiles.tar.gz": "https://issues.apache.org/jira/secure/attachment/12325964/newFiles.tar.gz"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-04-16T03:57:24+0000",
            "content": "All main tests pass and most of contrib (I think the failures are unrelated to my changes).  All of contrib compiles as well.  \n\nAs always, let me know if I can help with anything. ",
            "author": "Grant Ingersoll",
            "id": "comment-12374656"
        },
        {
            "date": "2006-04-28T02:29:26+0000",
            "content": "Forgot the new files.   ",
            "author": "Grant Ingersoll",
            "id": "comment-12376787"
        },
        {
            "date": "2006-05-03T16:30:05+0000",
            "content": "Continuing the discussion from Lucene-558, LazyFields.tar.gz extends this patch (Lucene-545) with an additional optimization so that ParallelReader does not read fields from readers all of whose fields are NO_LOAD.  No change to the FieldSelector interface was required to achieve this.  Also, a useful new FieldSelector is provided, MapFieldSelector, and TestParallelReader is extended to test these things.\n\nBug fixes to ParallelReader from Lucene-561 are also included.\n\nKeeping everything involved factored and managing this with my other local changes has led to a slightly more complex file structure.  The steps to use LazyFields.tar.gz are:\n\nUnpack it\nApply fieldSelectorPatch.txt\nApply ParallelReader.patch\nApply TestParallelReader.patch\nUnpack and copy fieldSelectorNewFiles.tar.gz\nCopy LazyFields.new\n\nThe target of all patch applications and copies is the Lucene trunk.\n\nWhen I applied fieldSelectorPatch.txt against the latest Lucene trunk, a couple hunks failed to apply, but they were not relevant.  The version included here is the original version unchanged. ",
            "author": "Chuck Williams",
            "id": "comment-12377542"
        },
        {
            "date": "2006-06-08T07:14:55+0000",
            "content": "Chuck, \n\nI think the patch is missing your ListFieldSelector.java file.  Can you please attach it?\n\nThanks,\nGrant ",
            "author": "Grant Ingersoll",
            "id": "comment-12415240"
        },
        {
            "date": "2006-06-08T08:38:49+0000",
            "content": "Grant,\n\nListFieldSelector is not part of the update as MapFieldSelector subsumed its functionality.  It appears there is a dangling import of ListFieldSelector in TestParallelReader.  This line should just be deleted.\n\nI'd update the patch, but a) fieldSelectorPatch.txt does not apply cleanly against the current svn head, and b) my local copy has other modifications and so I can't reliably extract just this patch.\n\nAlso, there is one minor fix/improvment to ParallelReader.document().  The iterator over the fields of a subreader should not be constructed if it won'd be used, i.e., move the construction inside the first if:\n\n      boolean include = (fieldSelector==null);\n      if (!include) {\n        Iterator it = ((Collection)readerToFields.get(reader)).iterator();\n\nSorry about these issues...\n\nFYI, I've been using the capability extensively and it is working well.  Thanks for lazy fields!\n\nChuck ",
            "author": "Chuck Williams",
            "id": "comment-12415243"
        },
        {
            "date": "2006-06-08T18:08:45+0000",
            "content": "OK, I will take care of it, thanks! ",
            "author": "Grant Ingersoll",
            "id": "comment-12415321"
        },
        {
            "date": "2006-06-10T08:40:12+0000",
            "content": "Thanks, Chuck, for the assistance! ",
            "author": "Grant Ingersoll",
            "id": "comment-12415633"
        }
    ]
}