{
    "id": "SOLR-9579",
    "title": "Reuse lucene FieldType in createField flow during ingestion",
    "details": {
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "7.0",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "During ingestion createField in FieldType is being called for each field on each document. For the subclasses of FieldType without their own implementation of createField the lucene version of FieldType is created to be stored along with the value. However the lucene FieldType object is identical when created from the same SchemaField. In testing ingestion of one million rows with 22 field each we were creating 22 million lucene FieldType objects when only 22 are needed. Solr should lazily initialize a lucene FieldType for each SchemaField and reuse them for future ingestion. Not only does this relieve memory usage but also relieves significant pressure on the gc.\n\nThere are also subclasses of Solr FieldType which create separate Lucene FieldType for stored fields instead of reusing the static in StoredField.",
    "attachments": {
        "SOLR-9579.patch": "https://issues.apache.org/jira/secure/attachment/12830769/SOLR-9579.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-28T19:04:08+0000",
            "author": "John Call",
            "content": "This patch is an initial attempt at reusing lucene FieldType. It was created against master, it should be almost identical for branch_6x. Let me know if there is any input on this improvement or patch. ",
            "id": "comment-15530556"
        },
        {
            "date": "2016-09-28T20:40:50+0000",
            "author": "Mikhail Khludnev",
            "content": "yep.. hadoop API is known for such optimization, and Lucene's fields are designed to be reused. But what is a wall clock gain? Java is already optimized for such memory waste, attempts for fixing might even make things worse.   ",
            "id": "comment-15530812"
        },
        {
            "date": "2016-09-30T21:31:25+0000",
            "author": "Hoss Man",
            "content": "This seems like a slam dunk to me ... there's no reason to recreate objects over and over from the same SchemaField object, and lucene.FieldType objects are deliberately small specifically so they can be resused over and over in long running applications\n\n(but yes, some actual benchmark numbers would be nice)\n\nMy main question about the patch is why it only creates the lucene.FieldType lazily instead of doing in the SchemaField constructor? ",
            "id": "comment-15537129"
        },
        {
            "date": "2016-09-30T22:39:50+0000",
            "author": "John Call",
            "content": "My reasoning for lazily creating the FieldType is that in the following three scenarios they are simply taking up memory with no use.\n1) Systems where the implementations of SchemaField override CreateField and thus don't use this object. For example TrieField, PointType, and EnumField will not use this object at all. The main use I see is for text fields.\n2) This flow is only used for ingestion path, for systems where queries are the main use dedicating any extra memory per field seems unnecessary.\n3) For high ingestion systems with thousands of schema fields and sparse usage of some creating them all upfront could have slight performance impact on startup. Additionally, creating it lazily should still be faster than the current code.\n\nIn regard to benchmarking any suggestions would be appreciated, I'm not sure if there is any standardization on which schema or data set to use (I believe I have seen others discussing using the GettingStarted but I've never looked at how much data that contains).\n\nI understand that the memory impact of creating the object in the constructor is on the order of KB for most systems so I can easily make that change if there is consensus around it. ",
            "id": "comment-15537281"
        },
        {
            "date": "2016-09-30T23:12:40+0000",
            "author": "Yonik Seeley",
            "content": "A couple of years ago I prototyped making SchemaField implement lucene's IndexableFieldType (not sure if I opened a JIRA though).  A look at that interface today suggests it should still be relatively easy. ",
            "id": "comment-15537371"
        },
        {
            "date": "2016-10-05T01:37:05+0000",
            "author": "John Call",
            "content": "Made SchemaField implement IndexableFieldType and updated lucene.document.Field to be dependent on IndexableFieldType instead of FieldType. Not sure if I should renaming some of the existing methods in SchemaField to conform to IndexableFieldType instead of having duplicate methods as this will touch a large number of files. (e.g. tokenized/IsTokenized, storeTermVector/storeTermVectors etc) ",
            "id": "comment-15547320"
        },
        {
            "date": "2016-10-09T15:51:42+0000",
            "author": "Yonik Seeley",
            "content": "Thanks John, looks great!  It's even more straightforward than I remembered.\nWe can save possible handling of duplicate methods for another issue.  I plan on committing shortly unless I hear any objections. ",
            "id": "comment-15560204"
        },
        {
            "date": "2016-10-11T15:47:54+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 98191225eb3ed4b2938a7ce27128a6a9b0e22590 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9819122 ]\n\nSOLR-9579: SchemaField should implement lucene.IndexableFieldType to avoid repeated creation ",
            "id": "comment-15565801"
        },
        {
            "date": "2016-10-11T15:52:45+0000",
            "author": "Yonik Seeley",
            "content": "Committed to master.  Thanks John! ",
            "id": "comment-15565816"
        },
        {
            "date": "2016-10-12T00:28:34+0000",
            "author": "Michael McCandless",
            "content": "I think this commit also broke ant precommit; can you please fix Yonik Seeley? ",
            "id": "comment-15567085"
        },
        {
            "date": "2016-10-25T21:30:33+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 941c5e92ba6ff76e913746caf68e05b563983f17 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=941c5e9 ]\n\nSOLR-9579: fix intellij compilation: add lucene core dependency to the langid contrib ",
            "id": "comment-15606540"
        }
    ]
}