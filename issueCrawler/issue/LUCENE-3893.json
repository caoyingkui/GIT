{
    "id": "LUCENE-3893",
    "title": "TermsQuery should use AutomatonQuery or Terms.intersect",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I think we could see perf gains if TermsFilter sorted the terms, built a minimal automaton, and used TermsEnum.intersect to visit the terms...\n\nThis idea came up on the dev list recently.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-20T16:18:31+0000",
            "content": "LUCENE-3832 should also be done for this... ",
            "author": "Michael McCandless",
            "id": "comment-13233522"
        },
        {
            "date": "2012-03-20T17:20:25+0000",
            "content": "I already have something like this implemented when Dawid ported the Dahiwikwukblabla Automaton builder to Lucene core. We dont need a separate Filter or Query for that, just use (for the Filter):\n\nnew MultiTermQueryWrapperFilter(new AutomatonQuery(unionAutomaton))\n\nTo have a backwards-compatible TermsFilter, we can simply do it like PrfeixFilter (subclass MTQWF) and warp the above Automaton. ",
            "author": "Uwe Schindler",
            "id": "comment-13233575"
        },
        {
            "date": "2012-03-20T20:25:19+0000",
            "content": "Dahiwikwukblabla \n\nDaciuk, the name is Jan Daciuk  Although the same algorithm has been discovered independently by Stoyan Mihov and (I think) Bruce W. Watson. ",
            "author": "Dawid Weiss",
            "id": "comment-13233711"
        },
        {
            "date": "2012-03-20T20:41:35+0000",
            "content": "Thanks! I was on my mobile phone when commenting this and had the names not in mind  ",
            "author": "Uwe Schindler",
            "id": "comment-13233722"
        },
        {
            "date": "2012-03-20T20:45:44+0000",
            "content": "np. I see that Janek even has an audio file with the pronounciation, LOL \nhttp://www.eti.pg.gda.pl/katedry/kiw/pracownicy/Jan.Daciuk/personal/j_daciuk.au ",
            "author": "Dawid Weiss",
            "id": "comment-13233727"
        },
        {
            "date": "2015-06-10T09:38:34+0000",
            "content": "Just modernizing the issue title... ",
            "author": "Michael McCandless",
            "id": "comment-14580306"
        },
        {
            "date": "2015-06-10T09:47:48+0000",
            "content": "I made a simplistic performance test (TermsQueryPerf.java in luceneutil).  It indexes 100M ids into a 7/7/7 segment index, then randomly picks 10 subsets of 50K ids each to run using TermsQuery.\n\nI compared using TermsQuery, vs AutomatonQuery on Automata.makeStringUnion (which uses Terms.intersect), and I only measured the query execution time, not the cost to init the query (that is maybe a separate battle to fight, since we don't have a fast way to build a binary minimal automaton now, i.e. we always go through the UTF32 -> UTF8 conversion unnecessarily).\n\nWith \"easy\" ids (zero pad, sequential, encoded in base 10), Terms.intersect was ~40% faster (1040 msec vs 640 msec), but then when I measured on \"hard\" ids (fully random long, encoded in base 10), it was slower (4576 msec vs 3352) which is disappointing.\n\nDigging a bit, I think what's happening is the cost of checking each term's suffix when scanning the terms in a block is quite a bit higher with the automaton (a RunAutomaton.step for each one, vs comparing byte[] slices for the seekExact used by TermsQuery).\n\nMaybe we could improve the Terms.intersect impl to be more like AutomatonTermsEnum here, grabbing the next matching suffix as a BytesRef and comparing against that, instead of .step() for every suffix byte, but until we can consistently make Terms.intersect faster I think we should leave TermsQuery as is ... ",
            "author": "Michael McCandless",
            "id": "comment-14580317"
        },
        {
            "date": "2015-06-10T14:07:43+0000",
            "content": "I also tested AutomatonTermsEnum (disable BlockTree's Terms.intersect impl) but it's even slower ... ~8100 msec. ",
            "author": "Michael McCandless",
            "id": "comment-14580555"
        }
    ]
}