{
    "id": "LUCENE-304",
    "title": "[PATCH] add boost feature to MultiFieldQueryParser",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "add this feature\n(field1:query)^bfield1 (field2:query)^bfield12 (field3:query)^bfield3 ...\n(fieldx:query)^bfieldx\n\nGoogle Example: a user search \"coco\"  , my defaults search fields are title and\ndescription. But i would like boost title field more than description field to\nhave results more relevant.\n\nChange in the MultiFieldQueryParser : add this method \n\n  public static Query parse(String query, String[] fields, int[] flags, float []\nboost, Analyzer analyzer) throws ParseException {\n\n    {\n        BooleanQuery bQuery = new BooleanQuery();\n        for (int i = 0; i < fields.length; i++)\n        {\n            Query q = parse(query, fields[i], analyzer);\n==>         q.setBoost(boost[i]);\n            int flag = flags[i];\n            switch \n            {\n                case REQUIRED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST);\n                    break;\n                case PROHIBITED_FIELD:\n                    bQuery.add(q, BooleanClause.Occur.MUST_NOT);\n                    break;\n                default:\n                    bQuery.add(q, BooleanClause.Occur.SHOULD);\n                    break;\n            }\n        }\n        return bQuery;\n    }\n}",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--MultiFieldQueryParser.java": "https://issues.apache.org/jira/secure/attachment/12312435/ASF.LICENSE.NOT.GRANTED--MultiFieldQueryParser.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-05-16T02:40:59+0000",
            "content": "Created an attachment (id=15037)\nAdded multifield selective boost functionality to MultiFieldQueryParser class.\n\n\nThe attachment includes the changes made in the attachment 15036 for bug 33848.\n\n\nHere is the unit test I used:\n\n\t\tString[] fields=new String[]\n{\"f1\",\"f2\",\"f3\",\"f4\",\"f5\"}\n;\n\n\t\tHashMap boostMap=new HashMap();\n\t\tboostMap.put(\"f2\",new Float(1.2));\n\t\tboostMap.put(\"f3\",new Float(1.3));\n\n\t\tMultiFieldQueryParser parser=new\nMultiFieldQueryParser(fields,new TestAnalyzer(fields));\n\t\tparser.setBoostMap(boostMap);\n\t\tString qString=\"bla AND blo\";\n\n\t\tQuery q=parser.parse(qString);\n\t\t//Query q=QueryParser.parse(qString,\"f1\",new\nTestAnalyzer(fields));\n\t\t//Query q=MultiFieldQueryParser.parse(qString,fields,new\nTestAnalyzer(fields));\n\t\tSystem.out.println(q);\n\t}\n\n\tstatic class TestAnalyzer extends Analyzer{\n\t\tString[] _defaultFields;\n\t\tStandardAnalyzer _std;\n\t\tpublic TestAnalyzer(String[] defaultFields)\n{\n\t\t\t_defaultFields=defaultFields;\n\t\t\t_std=new StandardAnalyzer();\n\t\t}\n\t\tpublic TokenStream tokenStream(String fieldName, Reader reader)\n{\n\t\t\tif (\"f1\".equals(fieldName))\n{\n\t\t\t\treturn new EmptyTokenStream();\n\t\t\t}\n\t\t\telse\n{\n\t\t\t\treturn _std.tokenStream(fieldName, reader);\n\t\t\t}\n\t\t}\n\n\t\tprivate static class EmptyTokenStream extends TokenStream{\n\n\t\t\tpublic Token next() throws IOException \n{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t}\n\t} ",
            "author": "John Wang",
            "id": "comment-12322017"
        },
        {
            "date": "2006-06-16T12:24:03+0000",
            "content": "I think this is a \"duplicate\" of LUCENE-544 . ",
            "author": "Otis Gospodnetic",
            "id": "comment-12416451"
        }
    ]
}