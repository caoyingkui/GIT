{
    "id": "SOLR-8975",
    "title": "SolrClient setters should be deprecated in favor of SolrClientBuilder methods",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "SOLR-8097 added a builder layer on top of each SolrClient implementation.\n\nNow that builders are in place for SolrClients, the setters used in each SolrClient can be deprecated, and their functionality moved over to the Builders.  This change brings a few benefits:\n\n\n\tunifies SolrClient configuration under the new Builders.  It'll be nice to have all the knobs, and levers used to tweak SolrClients available in a single place (the Builders).\n\treduces SolrClient thread-safety concerns.  Currently, clients are mutable.  Using some SolrClient setters can result in erratic and \"trappy\" behavior when the clients are used across multiple threads.",
    "attachments": {
        "SOLR-8975.patch": "https://issues.apache.org/jira/secure/attachment/12830058/SOLR-8975.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-15T18:50:51+0000",
            "author": "Jason Gerlowski",
            "content": "Sitting down to start working on this now.  A few particulars for this came up over on SOLR-8097:\n\n\n\tpatch based on master\n\tdeprecate existing SolrClient setters\n\tJavadocs for (now deprecated) SolrClient setters should indicate that they're not thread-safe.\n\tremove usage of any SolrClient setters\n\tadd corresponding setters on SolrClientBuilder types.\n\n\n\nHopefully these changes should raise any complications, and we can refine things once the initial patch for this gets up. ",
            "id": "comment-15283920"
        },
        {
            "date": "2016-09-21T18:53:06+0000",
            "author": "Jason Gerlowski",
            "content": "I've started work on this in earnest, after an embarassingly long delay.  As a change, it's reminiscent of SOLR-8097.  The change is simple conceptually, but involves many smaller changes to the tests, due to their use of SolrClients.\n\nFor instance, many tests choose a ResponseParser randomly, often changing the type frequently (each iteration through a for-loop) for added randomness.  In a \"immutable-SolrClient-world\" this approach isn't possible anymore, are at least it would require new clients to be created often.  This is relatively cheap for HttpSolrClient, but could prove to be prohibitive for CloudSolrClient usage.\n\nI plan on pushing up a sample patch once I work through the work related to HttpSolrClient, so changes/suggestions can be discussed before I slog through the rest of the SolrClients. ",
            "id": "comment-15510829"
        },
        {
            "date": "2016-09-23T14:00:55+0000",
            "author": "Jason Gerlowski",
            "content": "I made these changes with respect to HttpSolrClient, in hopes of getting some feedback early, and catching any mistakes/concerns before I work through the other SolrCtilient implementations as well.\n\nI'd appreciate any feedback anyone can give.\n\nSome notes about the change:\n\n\tthe bulk of the changes occur in test files.\n\tin SOLR-8097, we added some methods for getting SolrClients to SolrTestCaseJ4, which either creates the client via the Builder, or via the deprecated ctors/setters.  Since this change adds many fields to HttpSolrClient ctors, a handful more of these methods were needed.  It's messy, but it's the exact sort of mess that will happen much less often when the SolrClient ctors are removed for good (Solr 7?).\n\tthis change doesn't contain any added cases for HttpSolrClientBuilderTest, but those are definitely needed, and are simple to add.\n\tA number of test base-classes initialize/cache SolrClient objects.  Subclasses then grab these objects, and make a few tweaks as necessary (change a timeout, swap out a RequestWriter, etc.).  In an immutable-SolrClient world, this base-class initialization makes less sense, since it's hard for the parent class to know how children will want to use the SolrClient.  I didn't take any steps to address this in this patch, but it's something to think about.  (For examples of this, see SolrJettyTestCase or AbstractDistribZkTestBase).\n\n ",
            "id": "comment-15516533"
        },
        {
            "date": "2016-09-27T18:40:55+0000",
            "author": "Jason Gerlowski",
            "content": "As an additional question/comment, the attached patch takes the values formerly provided to various setters, and adds them as parameters to the current \"kitchen-sink\" ctor (the one with all params used by the Builder).  This is technically a breaking change, as the ctor now has more arguments than it did previously.  Maybe this isn't a huge deal, as these \"kitchen-sink\" ctors have already been deprecated.\n\nBut I suspect what I should do is change the patch to create new deprecated kitchen-sink ctors that incorporate all the setter params, and leave the current (no longer \"kitchen-sink\") ctors as-is.\n\nJust wanted to confirm that.  If no one suggests otherwise, I'll make that change shortly. ",
            "id": "comment-15527057"
        },
        {
            "date": "2017-04-05T22:14:38+0000",
            "author": "Jason Gerlowski",
            "content": "So I've taken a few (failed) cracks at this.  I believe in the idea, but putting the patch together has been difficult.  SolrClient is used in so many places that the change takes some time to put together, and is quite large.  Both of which contribute to the patch encountering merge conflicts from other development before it's even uploaded.\n\nIn hopes of mitigating this, I would like to break to break this issue down by setter.  Should help avoid/lessen some of the pitfalls I've run into so far. ",
            "id": "comment-15957858"
        },
        {
            "date": "2017-11-09T22:48:18+0000",
            "author": "Shawn Heisey",
            "content": "General thoughts:\n\nA lot of recent work, including this issue, is moving towards a goal of immutable SolrClient objects.  It's discussed in the comments here.  I think this is the right direction \u2013 HttpClient has headed the same direction, beginning deprecation of anything related to mutable objects in version 4.3.\n\nAt the point where all the deprecated code goes away. I think that we should EXPLICITLY declare/document/enforce that SolrClient objects are immutable.\n\nI don't know if that's something to do as part of this issue or as a new one. ",
            "id": "comment-16246700"
        }
    ]
}