{
    "id": "SOLR-11717",
    "title": "Document Streaming Examples using SolrJ",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "documentation",
            "streaming expressions"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Under http://lucene.apache.org/solr/guide/streaming-expressions.html it would be nice if we had a page dedicated to how to use streaming with SolrJ\n\n\nTopics we could cover\n\n\tHow to correctly create a stream expression : https://issues.apache.org/jira/browse/SOLR-11600?focusedCommentId=16261446&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16261446\n\tWhat is a SolrClientCache\n\tWhich Stream objects should be a singleton and reused\n\tHow many http connections / connections_per_host are we limited with by default\n\tExample where the the Solr query node becomes the co-ordinator for the streaming expressions ( TupleStream solrStream = new SolrStream(solr_query_node, paramsLoc);\n\tHow to use an \"empty\" Solr node to fire queries against. This node should not have any collections. We could reduce the jetty thread pool size to rate limit number of parallel queries potentially?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-01T22:32:38+0000",
            "content": "Let's also create a specific Solrj client for Streaming Expressions. You can use SolrStream but that was really meant to be a low level Stream not a user facing Stream. We could call it StreamClient or something like that. Sample syntax:\n\nStreamClient client = new StreamClient(zkUrl, collection, params) ;\nclient.open();\nwhile(true){\n\u00a0 \u00a0Tuple t = client.read();\u00a0 \u00a0 \u00a0\n}\nclient.close();\n\n\u00a0\n\n\u00a0 ",
            "author": "Joel Bernstein",
            "id": "comment-16349408"
        }
    ]
}