{
    "id": "LUCENE-2146",
    "title": "DisjunctionMaxQuery has incorrect hashCode() implementation",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.9",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "The DisjunctionMaxQuery class hashCode() implementation is non-deterministic. It uses disjuncts.hashCode() in the computation. \nif the contents of disjuncts are arrays, just as DisjunctionMaxQueryTest.  \n                                                                ArrayList list1 = new ArrayList();\n\t\t\tArrayList list2 = new ArrayList();\n\t\t\tString[] terms =\n{\"term1\",\"term2\"};\n\t\t\tString[] terms2 ={\"term1\",\"term2\"}\n;\n\t\t\tlist1.add(terms);\n\t\t\tlist2.add(terms2);\n\t\t\tDisjunctionMaxQuery query1 = new DisjunctionMaxQuery(list1,0.0f);\n\t\t\tDisjunctionMaxQuery query2 = new DisjunctionMaxQuery(list2,0.0f);\naccording to the definition of DisjunctionMaxQuery, i think query1 and query2 should be equal.\nbut DisjunctionMaxQueryTest failed. That is because of DisjunctionMaxQuery.hashCode()\n{disjuncts.hasCode()}\n;\nmaybe my thought is wrong.",
    "attachments": {
        "LUCENE-2146.patch": "https://issues.apache.org/jira/secure/attachment/12427880/LUCENE-2146.patch",
        "DisjunctionMaxQueryTest.java": "https://issues.apache.org/jira/secure/attachment/12427882/DisjunctionMaxQueryTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-12-13T15:14:16+0000",
            "content": "By any chance do you also have a patch to fix this issue? ",
            "author": "Michael McCandless",
            "id": "comment-12789899"
        },
        {
            "date": "2009-12-14T02:13:56+0000",
            "content": "this patch can fix this bug. ",
            "author": "wang",
            "id": "comment-12789969"
        },
        {
            "date": "2009-12-14T09:38:54+0000",
            "content": "Actually... it's this a mis-use of DMQ?  You are supposed to provide it Collection<Query>, but you provided it with Collection<String[]>, as the disjuncts? ",
            "author": "Michael McCandless",
            "id": "comment-12790063"
        },
        {
            "date": "2009-12-14T09:48:03+0000",
            "content": "And the patch is against 2.9 without generics. It should be a patch against trunk.\n\nThe method is like this in trunk:\n\n  /** Add a collection of disjuncts to this disjunction\n   * via Iterable<Query>\n   */\n  public void add(Collection<Query> disjuncts) {\n    this.disjuncts.addAll(disjuncts);\n  }\n\n\n\nAnd why does the patch change the behaviour or fixes the bug? addAll() does the same like the while-loop. ",
            "author": "Uwe Schindler",
            "id": "comment-12790069"
        },
        {
            "date": "2009-12-14T11:37:43+0000",
            "content": "Thanks Michael and Uwe.\n\ni understand it is not a bug. ",
            "author": "wang",
            "id": "comment-12790107"
        }
    ]
}