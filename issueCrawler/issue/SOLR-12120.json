{
    "id": "SOLR-12120",
    "title": "New plugin type AuditLoggerPlugin",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "security"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Solr needs a well defined plugin point to implement audit logging functionality, which is independent from whatever AuthenticationPlugin\u00a0or AuthorizationPlugin\u00a0are in use at the time.\n\nIt seems reasonable to introduce a new plugin type AuditLoggerPlugin. It could be configured in solr.xml or it could be a third type of plugin defined in security.json, i.e.\n\n{\n  \"authentication\" : { \"class\" : ... },\n  \"authorization\" : { \"class\" : ... },\n  \"auditlogging\" : { \"class\" :\u00a0\"x.y.MyAuditLogger\", ... }\n}\n\n\nWe could then instrument SolrDispatchFilter to\u00a0the audit plugin with an AuditEvent at important points such as successful authentication:\n\nauditLoggerPlugin.audit(new SolrAuditEvent(EventType.AUTHENTICATED, request));\u00a0\n\n\n\u00a0We will mark the impl as @lucene.experimental in the first release to let it settle as people write their own plugin implementations.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-03-23T11:49:35+0000",
            "content": "Github pull request #342 ready for comments.\n\nHrishikesh Gadre can you have a look and consider whether your Audit logger plugin would be possible to realise with this API? I made it asynchronous so you can call auditLoggerPlugin.auditAsync(event); and continue the request immediately, while the audit framework processes the events on queue with a background thread. Very simple but powerful concept.\n\nI'm particularly looking for feedback for what other EventTypes we should have, and where else in the code should do logging. I was considering passing the auditLogger to Auth plugins so they can log wherever it seems fit, but currently I let DispatcherFilter and SolrCall do all the logging based on what they got back from Auth/Autz. I feel that is a better solution, and instead instrument AuthResponse\u00a0to capture more fine-grained types. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16411278"
        },
        {
            "date": "2018-03-23T18:44:01+0000",
            "content": "Jan H\u00f8ydahl\u00a0Thanks for this great feature!\ncan you have a look and consider whether your Audit logger plugin would be possible to realise with this API?\nI took a cursory look and we should be integrate this with the Sentry authorization framework. I will do a more thorough review next couple of days and will let you know.\u00a0\n\n\u00a0\nI made it asynchronous so you can call\u00a0auditLoggerPlugin.auditAsync(event);\u00a0and continue the request immediately, while the audit framework processes the events on queue with a background thread. Very simple but powerful concept.\nWhile I get the value of async processing, I am not sure why the audit logging plugin needs to expose this concept. This can be implemented inside the concrete implementation of\u00a0AuditLoggerPlugin (e.g. log4j does support async appender). My concern is that HttpSolrCall.java is using this method directly.\u00a0This\u00a0makes async behavior mandatory for all \u00a0audit logging implementations.\u00a0What do you think?\n\n\u00a0 ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16411877"
        },
        {
            "date": "2018-03-23T23:38:15+0000",
            "content": "My concern is that HttpSolrCall.java is using this method directly.\u00a0This\u00a0makes async behavior mandatory for all \u00a0audit logging implementations.\nYes, I see that.\u00a0My concern was\u00a0that since audit is called multiple times for each request we don't want it to slow down the queries.\n\nI'm going to push a change where I keep AuditLoggerPlugin synchronous only, and another abstract base class AsyncAuditLoggerPlugin extends AuditLoggerPlugin which will be the base class for implementations that wish to make use of the queue. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16412258"
        },
        {
            "date": "2018-03-24T00:10:27+0000",
            "content": "Updated PR with changes based on the comments. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16412290"
        },
        {
            "date": "2018-03-24T21:42:07+0000",
            "content": "Question: Should we strive to have only one\u00a0audit log event per\u00a0Solr request, or is it common\u00a0to have multiple as currently done in this patch, i.e. one for successful authentication and another for authorization? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16412808"
        },
        {
            "date": "2018-03-26T10:39:30+0000",
            "content": "More questions:\n\n\tShould we log internal requests, i.e. overseer actions, or requests stemming from auto-scaling triggers\u00a0etc?\n\tFor distributed requests, should we log only on the first node, or on every replica that the request is distributed to?\n\t\n\t\tIf only first node, how to reliably identify a request as being internal, preventing a way for end users to craft a request that looks like a distributed one and thus avoid being logged \n\t\tIf the\u00a0latter, i.e. on all nodes, what to use as the \"search id\" to be able to correlate the events from each replica as belonging to the same end-user search?\n\t\n\t\n\n ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16413671"
        },
        {
            "date": "2018-03-29T18:13:57+0000",
            "content": "Jan H\u00f8ydahl Sorry for late reply.\nShould we strive to have only\u00a0one\u00a0audit log event per\u00a0Solr request, or is it common\u00a0to have multiple as currently done in this patch, i.e. one for successful authentication and another for authorization?\nI think there is no need to log authentication success events when authorization is configured. So in that case we can just track authentication failures. It may also be a good idea to support suppressing some of these events (e.g. a user may only care about actions performed by authenticated users. So we may not want to generate authentication failure events in that case).\n\n\tShould we log internal requests, i.e. overseer actions, or requests stemming from auto-scaling triggers\u00a0etc?\n\n\nI don't think audit log plugin needs to care about internal vs. external requests. It should just log every incoming request. At least this is how I have implemented audit logs for Solr in Sentry.\nFor distributed requests, should we log only on the first node, or on every replica that the request is distributed to?\nSame as above. Just by logging every incoming request, we can avoid all these complications.\n\n\u00a0 ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16419518"
        },
        {
            "date": "2018-03-29T18:18:10+0000",
            "content": "\n\t\n\t\n\t\tIf the\u00a0latter, i.e. on all nodes, what to use as the \"search id\" to be able to correlate the events from each replica as belonging to the same end-user search?\n\t\n\t\n\n\nNot sure if audit log plugin needs to worry about correlation. Typically tracing frameworks (e.g. HTrace) provide such functionality.\n\n\u00a0\n\n\u00a0 ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16419523"
        },
        {
            "date": "2018-04-13T22:40:47+0000",
            "content": "I also added a new EventType COMPLETED which is logged when a search is completed (or failed).\n\nAgree that what types you want to log will vary. We could leave it up to concrete implementations, but probably the framework should aid with some configuration options that makes it possible to log only some types, or to avoid firing AUTHENTICATED event if the call continues etc.\n\nI've also added support for multiple loggers being called in a chain. So far that is done with a MultiLogger impl that takes a list of other loggers in the config. But I wonder if perhaps we should also support a JSON array notation natively?:\n\n\"auditlogging\" : [\n  { \"class\" : \"solr.Audit1\", ... },\n  { \"class\" : \"solr.Audit2\", ... }\n]\n\n ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16438027"
        },
        {
            "date": "2018-08-09T01:01:19+0000",
            "content": "Move issue from deprecated 'In  Progress' back to 'Open' ",
            "author": "Gavin",
            "id": "comment-16574089"
        },
        {
            "date": "2018-08-09T20:26:42+0000",
            "content": "I'll continue with this issue soon. Any comments on what's done so far is welcome.\n\nThe way it is now, AuditEvents are fired from various places, such as after successful authentication, after successful authorization etc. But I wonder if there would be a way to \"stack up\" all events happening in the same user request, and then only log the request once, i.e. if the request ends up with creating a new collection, then we could log an AuditEvent\n\ntype=ADMIN, method=POST, action=CREATE_COLLECTION, status=SUCCESS, user=johndoe\n\nand not log all the intermediate events such as\u00a0AUTHENTICATED, AUTHORIZED, since that is implied with a successful action. And how to handle async operations with collection API? Should we log one two events, first ordered, and then let the Audit framework poll for status and log another event with status either SUCCESS or FAILED::\n\ntype=ADMIN, method=POST, action=CREATE_COLLECTION, status=ORDERED, user=johndoe\ntype=ADMIN, method=POST, action=CREATE_COLLECTION, status=SUCCESS, user=johndoe\n\nAlso, there are several constructors in the AuditEvent class now, different ones called depending on what context is available (post-authentication with httpRequest, post-authorization with\u00a0AuthorizationContext etc). Would it be better to borrow the principle from MDC\u00a0and add info to the thread as we go along, and only ever call AuditLoggerPlugin#audit(AuditEvent)\u00a0when we know that the request is finished, either because we return data to user or due to some error. How would that look like and how can we be sure that the request is audited also when terminated due to exception, timeout etc? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16575361"
        },
        {
            "date": "2018-08-17T15:48:05+0000",
            "content": "Pushed some changes:\n\n\tRefGuide docs\n\tSupport for configuring what \"eventTypes\" that shall be logged by default\n\tAdd more tests, own test for AuditLogger\n\tValidate that all params are consumed\n\tUp to date with master\n\tPrecommit passes\n\n\n\nRemaining\n\n\tIntegration tests\n\tTesting async impl\n\tImplement ConfigEditablePlugin to edit via REST API\n\n ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16584097"
        },
        {
            "date": "2018-11-30T13:44:17+0000",
            "content": "Continuing with this. I think I will explore using MDC for some pieces, like sessionID and perhaps other info fetched from the authentication. Typically items that also could be useful to add in log4j logging. Then Audit plugins could use those as well.\n\nI think it could also be an idea to reduce the overhead of creating the AuditEvent object\u00a0for the states that shall not be logged. So move the logic for determining whether the eventType is to be logged or not to a cheaper method before creating the AuditEvent object. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16704748"
        }
    ]
}