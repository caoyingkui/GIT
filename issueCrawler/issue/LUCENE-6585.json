{
    "id": "LUCENE-6585",
    "title": "Make ConjunctionDISI flatten sub ConjunctionDISI instances",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Today ConjunctionDISI wraps some sub (two-phase) iterators. I would like to improve it by flattening sub iterators when they implement ConjunctionDISI. In practice, this would make \"+A +(+B +C)\" be executed more like \"+A +B +C\" (only in terms of matching, scoring would not change).\n\nMy motivation for this is that if we don't flatten and are unlucky, we can sometimes hit some worst cases. For instance consider the 3 following postings lists (sorted by increasing cost):\n\nA: 1, 1001, 2001, 3001, ...\nC: 0, 2, 4, 6, 8, 10, 12, 14, ...\nB: 1, 3, 5, 7, 9, 11, 13, 15, ...\n\nIf we run \"+A +B +C\", then everything works fine, we use A as a lead, and advance B 1000 by 1000 to find the next match (if any).\n\nHowever if we run \"+A +(+B +C)\", then we would iterate B and C 2 by 2 over the entire doc ID space when trying to find the first match which occurs on or after A:1.\n\nThis is an extreme example which is unlikely to happen in practice, but flattening would also help a bit on some more common cases. For instance imagine that A, B and C have respective costs of 100, 10 and 1000. If you search for \"+A +(+B +C)\", then we will use the most costly iterator (C) to confirm matches of B (the least costly iterator, used as a lead) while it would have been more efficient to confirm matches of B with A first, since A is less costly than C.",
    "attachments": {
        "LUCENE-6585.patch": "https://issues.apache.org/jira/secure/attachment/12740662/LUCENE-6585.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14593488",
            "author": "Ryan Ernst",
            "date": "2015-06-19T15:04:43+0000",
            "content": "Here is a patch collapsing all subconjunctions (thanks Adrien Grand for the help with twophase). "
        },
        {
            "id": "comment-14593522",
            "author": "Adrien Grand",
            "date": "2015-06-19T15:32:36+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14593634",
            "author": "Robert Muir",
            "date": "2015-06-19T16:57:55+0000",
            "content": "My primary concern is if the flattening optimization is safe.\n\nThe test is great for testing this DISI itself, but some of our scorers are complicated and have things like coord() at play. \n\nSo it would be great to see some simple nested boolean cases added to TestBooleanCoord, so we know the correct scores are still produced when DISIs are flattened. Maybe we should also add \"conjunction-of-phrases\" tests to *SearchEquivalence to know that phrase/sloppyphrase/spans/etc are ok with the change too. "
        },
        {
            "id": "comment-14594992",
            "author": "Paul Elschot",
            "date": "2015-06-21T08:19:19+0000",
            "content": "I checked that recursion is indeed not needed, ConjunctionDISI is always built bottom up. "
        },
        {
            "id": "comment-14595562",
            "author": "Adrien Grand",
            "date": "2015-06-22T09:16:33+0000",
            "content": "Paul, your comment confused me: where do you see recursion in the patch? "
        },
        {
            "id": "comment-14595771",
            "author": "Paul Elschot",
            "date": "2015-06-22T10:59:19+0000",
            "content": "Sorry about that. The patch has no recursion, and does not need it. "
        },
        {
            "id": "comment-14600421",
            "author": "ASF subversion and git services",
            "date": "2015-06-25T00:19:41+0000",
            "content": "Commit 1687400 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1687400 ]\n\nLUCENE-6585: improve TestBooleanCoord to better test coord handling "
        },
        {
            "id": "comment-14600443",
            "author": "ASF subversion and git services",
            "date": "2015-06-25T00:39:10+0000",
            "content": "Commit 1687402 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1687402 ]\n\nLUCENE-6585: improve TestBooleanCoord to better test coord handling "
        },
        {
            "id": "comment-14600516",
            "author": "ASF subversion and git services",
            "date": "2015-06-25T01:43:16+0000",
            "content": "Commit 1687404 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1687404 ]\n\nLUCENE-6585: add some tests that coord is applied properly for nested conjunctions "
        },
        {
            "id": "comment-14600523",
            "author": "ASF subversion and git services",
            "date": "2015-06-25T01:47:56+0000",
            "content": "Commit 1687406 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1687406 ]\n\nLUCENE-6585: add some tests that coord is applied properly for nested conjunctions "
        },
        {
            "id": "comment-14600550",
            "author": "Robert Muir",
            "date": "2015-06-25T02:11:29+0000",
            "content": "I added lots of coord() tests, and changed it to test a crazy coord(), the patch here is fine actually. It is difficult to see that its correct, but the tests help.\nI still opened LUCENE-6603 regardless, this stuff is really tricky and we should try to simplify life at some point.\n\nSeparately my concerns around 2-phase iterators (phrase/multiphrase) should not be an issue, unless they already have bugs with the two-phase API. I will look into this now.\n\nBut overall I think the patch here is good. We should probably add a comment to collapseSubs so that its a little more obvious:\nWe collapse the sub-iterators (removing the useless conjunction \"in between\") but the two-phase views are also kept. So everything works because of guarantees in the api.\n\nI don't like the instanceof ConjunctionDISI check, with the assert false. The reason is that this class is not final. I would rather it be an explicit class check on getClass() == ConjunctionDISI.class or TwoPhase.class.\n "
        },
        {
            "id": "comment-14600566",
            "author": "Ryan Ernst",
            "date": "2015-06-25T02:29:25+0000",
            "content": "Here's a new patch with instanceof replaced with ==. I also tried improving naming and comments a little. "
        },
        {
            "id": "comment-14600573",
            "author": "Robert Muir",
            "date": "2015-06-25T02:33:51+0000",
            "content": "Thanks, I am +1 to commit. \n\nAny \"problems\" are going to be problems in other scorers not obeying API contracts and not the logic here, so we don't need to hold up the change on improving testing for those IMO, but I still want to improve those tests eventually, it can be a followup. Its just good in general to assert more things about scoring so its less fragile. "
        },
        {
            "id": "comment-14600579",
            "author": "ASF subversion and git services",
            "date": "2015-06-25T02:45:47+0000",
            "content": "Commit 1687408 from Ryan Ernst in branch 'dev/trunk'\n[ https://svn.apache.org/r1687408 ]\n\nLUCENE-6585: Flatten conjunctions and conjunction approximations into parent conjunctions "
        },
        {
            "id": "comment-14600598",
            "author": "ASF subversion and git services",
            "date": "2015-06-25T03:06:42+0000",
            "content": "Commit 1687412 from Ryan Ernst in branch 'dev/trunk'\n[ https://svn.apache.org/r1687412 ]\n\nLUCENE-6585: Remove println from testing "
        },
        {
            "id": "comment-14600601",
            "author": "ASF subversion and git services",
            "date": "2015-06-25T03:08:01+0000",
            "content": "Commit 1687413 from Ryan Ernst in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1687413 ]\n\nLUCENE-6585: Flatten conjunctions and conjunction approximations into parent conjunctions (merged from r1687408, r1687412) "
        },
        {
            "id": "comment-14713160",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:57+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}