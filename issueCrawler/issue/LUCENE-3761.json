{
    "id": "LUCENE-3761",
    "title": "Generalize SearcherManager",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I'd like to generalize SearcherManager to a class which can manage instances of a certain type of interfaces. The reason is that today SearcherManager knows how to handle IndexSearcher instances. I have a SearcherManager which manages a pair of IndexSearcher and TaxonomyReader pair.\n\nRecently, few concurrency bugs were fixed in SearcherManager, and I realized that I need to apply them to my version as well. Which led me to think why can't we have an SM version which is generic enough so that both my version and Lucene's can benefit from?\n\nThe way I see SearcherManager, it can be divided into two parts: (1) the part that manages the logic of acquire/release/maybeReopen (i.e., ensureOpen, protect from concurrency stuff etc.), and (2) the part which handles IndexSearcher, or my SearcherTaxoPair. I'm thinking that if we'll have an interface with incRef/decRef/tryIncRef/maybeRefresh, we can make SearcherManager a generic class which handles this interface.\n\nI will post a patch with the initial idea, and we can continue from there.",
    "attachments": {
        "LUCENE-3761.patch": "https://issues.apache.org/jira/secure/attachment/12513837/LUCENE-3761.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-02-08T16:55:07+0000",
            "content": "Initial patch. Introduces a new package 'thingy' (a temporary one, this will eventually move to o.a.l.search) with the class ThingyManager, a Thingy interface and a SearcherThingy implementation.\n\nAs far as I can tell (if there are no bugs), this can replace SearcherManager as-is, aside from a 'nocommit' which I know how to handle, but didn't get to it yet.\n\nThe approach is that ThingyManager receives a Thingy<G> instance and delegates calls to it.\n\nRobert and I discussed another approach - have ThingyManager abstract with a concrete (final) SearcherManager impl which overrides methods like incRef/decRef etc. I still didn't try to impl that approach, I think that I'll give it a try, later.\n\nOh, and BTW, ThingyManager (even though a cool name !) will not be its final name ! . It's just easier to progress like that, without thinking too much about the name. ",
            "author": "Shai Erera",
            "id": "comment-13203739"
        },
        {
            "date": "2012-02-08T17:14:44+0000",
            "content": "This looks nice!\n\nI like \"Thingy\".  Very Dr. Seuss...\n\nI think maybeRefresh should match IR.openIfChanged?  (So we learn from\nour prior mistakes w/ IR.reopen).  Ie, name it openIfChanged\n(maybeRefresh sounds like it could be an in-place operation),\nreturn null (not this) if there is no change, and document that if it\nreturns non-null it transfers a reference to you. ",
            "author": "Michael McCandless",
            "id": "comment-13203753"
        },
        {
            "date": "2012-02-09T08:06:53+0000",
            "content": "Option #2:\n\nThingyManager<G> is an abstract class which implements all the concurrency administration and exposes the abstract methods tryIncRef(), decRef() and refreshIfNeeded().\n\nSearcherManager now extends ThingyManager<IndexSearcher> and implements just these 3 methods (in addition to isSearcherCurrent()).\n\nWhat I like about this approach is that SearcherManager remains a concrete class, so that code can reference it and not ThingyManager. Also, IMO it's a simplified impl vs. the composite ThingyManager/Thingy. AND besides the rename of maybeReopen to maybeRefresh, NONE of the code was affected by this refactoring.\n\nI've left the unneeded code as commented out in SearcherManager for easy comparison, but it should go away. TestSM passes (as well as all core tests), so I think that ThingyManager handles all concurrency cases as SearcherManager. However, it could use another inspecting eye .\n\nAs for the name \u2013 now the name is less important b/c I don't think we'll reference ThingyManagers. I lean towards something like ReferenceManager / RefCountManager or remove Manager. Something simple. Suggestions are welcome. ",
            "author": "Shai Erera",
            "id": "comment-13204343"
        },
        {
            "date": "2012-02-09T16:12:52+0000",
            "content": "Looks awesome \u2013 I like this 2nd approach better!\n\nAnd, actually... I think maybeRefresh is in fact a good name, because we are refreshing internal state to the ThingyManager (ie, this is different from IR.openIfChanged, which returns a new object to you and does not alter the state of the object you had passed in).\n\nI think ReferenceManager is good?  RefCountManager seems too low level (ie, ref counting is an impl detail, just one way to manage references, and you are not in fact managing the ref counts...).  Can't think of any other candidates.... naming is the hardest part  ",
            "author": "Michael McCandless",
            "id": "comment-13204614"
        },
        {
            "date": "2012-02-09T17:30:09+0000",
            "content": "I like ReferenceManager too. I'll produce a cleaner patch with correct naming and also a SearcherTaxoManager (For an IndexSearcher and TaxoReader pair).\n\nI'm not in front of the code now \u2013 do you think that NRTManager should be refactored too? ",
            "author": "Shai Erera",
            "id": "comment-13204668"
        },
        {
            "date": "2012-02-09T17:43:03+0000",
            "content": "do you think that NRTManager should be refactored too?\n\nThat would be wonderful!  It's rather... hairy.\n\nBut I think it's tricky, because the maybeReopen takes a boolean (applyDeletes)... which is confusing.  Maybe, we can change this, so that you must specify the applyDeletes up front to the ctor (I think there's no harm in making two NRTMgrs if you sometimes require deletes and other times don't... I mean resource wise it'd be no different that what NRTManager now does internally).  If we did that, then I think NRTManager could subclass ReferenceManager?  (And would no longer \"contain\" a SearcherManager inside it).\n\nProbably we should explore that on a new issue... ",
            "author": "Michael McCandless",
            "id": "comment-13204681"
        },
        {
            "date": "2012-02-10T05:19:16+0000",
            "content": "Probably we should explore that on a new issue...\n\nI agree. Given what you wrote, I think it deserves its own inspection. Maybe I'll do the SearcherTaxoManager in its own issue too, I'll think about it. ",
            "author": "Shai Erera",
            "id": "comment-13205244"
        },
        {
            "date": "2012-02-10T17:31:23+0000",
            "content": "OK I opened LUCENE-3769 to simplify NRTManager... I think it should be easy to cutover to ThingyManager after that! ",
            "author": "Michael McCandless",
            "id": "comment-13205565"
        },
        {
            "date": "2012-02-10T17:48:52+0000",
            "content": "I like this improvement while there is a serious problem with the current patch. \n\nprotected G current;\n\n \n\nshould either be volatile otherwise threads could spin unnecessarily long since tryInc will fail until the reference is re-read from main memory. I wonder if we should maybe make this a AtomicReference and remove the sync entirely. I don't like that this is actually syncing on \"this\" just for the swap purpose. Either we go for an AtomicRef or introduce a protected lock object. \n\nCan't think of any other candidates.... naming is the hardest part \nwhat about RefCountedResourceManager? Kind of long but hits the purpose...\n\n ",
            "author": "Simon Willnauer",
            "id": "comment-13205578"
        },
        {
            "date": "2012-02-10T18:25:04+0000",
            "content": "I don't like that this is actually syncing on \"this\" just for the swap purpose. \n\nHmm, I would prefer sticking with simple synchronized methods here... swapSearcher is called once during reopen, and by definition called from a single thread, so it will be uncontended.  The added cost is surely minor, while keeping the code simple. ",
            "author": "Michael McCandless",
            "id": "comment-13205603"
        },
        {
            "date": "2012-02-10T18:53:02+0000",
            "content": "Hmm, I would prefer sticking with simple synchronized methods here... swapSearcher is called once during reopen, and by definition called from a single thread, so it will be uncontended. The added cost is surely minor, while keeping the code simple.\n\nI didn't raise this due to perf reasons. I think using AtomicRef make is simpler since it encapsulates everything rather than using synchronized + volatile \nwe'd replace this:\n\nfinal G oldThingy = current;\ncurrent = newThingy;\nrelease(oldThingy);\n\n\n\nwith:\n\nrelease(atomicRef.getAndSet(newThingy));\n\n\n\nseems simpler to me though... for read access you simply call atomicRef.get()  ",
            "author": "Simon Willnauer",
            "id": "comment-13205632"
        },
        {
            "date": "2012-02-10T21:03:20+0000",
            "content": "Hmm, but how to protect swapThingy in one thread while close() is called in another? ",
            "author": "Michael McCandless",
            "id": "comment-13205753"
        },
        {
            "date": "2012-02-11T05:15:59+0000",
            "content": "should either be volatile otherwise threads could spin unnecessarily long since tryInc will fail until the reference is re-read from main memory.\n\nI don't think that we need to make 'current' volatile. It's only changed from swapSearcher which is synchronized, and therefore as soon as it changes, all shared copies of that instance (in all threads) gets updated.\n\nThere are many web pages that discuss volatile vs. synchronized (just Google those 3 words) and this page (http://www.javamex.com/tutorials/synchronization_volatile.shtml) even suggests that volatile is more expensive, because synchronization happens on each access to the variable, while in synchronized it's only inside the synced block.\n\nWe check 'current' in ensureOpen() which happens on every API call, and I think that volatile would therefore be more expensive. Also, I'm not sure that using AtomicRef would be simpler code. And following Mike's comments, I prefer to have an explicit synced swapSearcher. ",
            "author": "Shai Erera",
            "id": "comment-13206022"
        },
        {
            "date": "2012-02-11T09:11:44+0000",
            "content": "Hmm, but how to protect swapThingy in one thread while close() is called in another?\n\nwell essentially its the same just a while() with a CAS... I will take a stab at this soon. \n\nI don't think that we need to make 'current' volatile. It's only changed from swapSearcher which is synchronized, and therefore as soon as it changes, all shared copies of that instance (in all threads) gets updated.\n\nShai, this is a common misconception lemme give you an example:\n\n\npublic class Deadlocker {\n private static boolean ready;\n\n public static void startThread() {\n     new Thread() {\n         public void run() {\n             System.out.println(\"T2: Waiting two seconds.\");\n             try { sleep(2000); } catch (Exception e) { /* ignore */ }\n             System.out.println(\"T2: Setting ready = true\");\n             setReady();\n         }\n     }.start();\n }\n\n public static synchronized void setReady() {\n   ready = true;\n }\n\n public static void main(String [] args) {\n     startThread();\n     System.out.println(\"T1: spinning.\");\n     while (!ready) {\n         // Do nothing.\n     }\n     System.out.println(\"T1: Ready!\");\n }\n}\n\n\n\nif you run this on a 64 bit server vm this program will deadlock while on a 32bit client vm it won't. Now make \"ready\" volatile and you are good to go, you can even remove the sync entirely. I leave the rest to you to figure out why this happens... In general you\nneed to use special mechanisms to guarantee that communication happens between these threads, as you would on a message passing system. Memory writes that happen in one thread can \"leak through\" and be seen by another thread, but this is by no means guaranteed. Without explicit communication, you can't guarantee which writes get seen by other threads, or even the order in which they get seen and this communication must be on both sides, reader and writer! ",
            "author": "Simon Willnauer",
            "id": "comment-13206061"
        },
        {
            "date": "2012-02-11T14:55:05+0000",
            "content": "\nHmm, but how to protect swapThingy in one thread while close() is called in another?\n\nwell essentially its the same just a while() with a CAS... I will take a stab at this soon.\n\nThat's exactly the kind of added code complexity I don't like.  I can\nunderstand it if this were some hotspot... but that's not the case\nhere.\n\nI think we should stick w/ simple synchronized methods.\n\nI agree we need the volatile... ",
            "author": "Michael McCandless",
            "id": "comment-13206141"
        },
        {
            "date": "2012-02-11T16:11:21+0000",
            "content": "Bq. if you run this on a 64 bit server vm this program will deadlock while on a 32bit client vm it won't.\n\nSimon didn't mention that is the behavior under HotSpot, the result of running that code under other VMs and hardware architectures is in general unpredictable.\n\nThe above behavior on HotSpot is in fact not a result of memory visibility problems (but it could be!) but of how the code is seen by HotSpot jit optimizers. If the code is compiled by c1 compiler (default on 32-bit jvms in -client mode) everything works (or tends to  because the loop: while (!ready) {} always accesses physical memory. Once the code is on-stack-replaced with the c2 compiler (default second-tier optimizer for optimizer -server, it also explains why you need a delay in T2), c2's optimizer sees while (!ready) {} as a constant (because ready is not volatile and there are no happens-before with anything else) and promotes it outside the loop. The machine code becomes something like:\n\nif (!ready) {\n  while(true) {/* spin */}\n}\n\n\n\nYou can dump the assembly with debug versions of HotSpot and verify if I'm right. Another cool way of seing such opotimizations in reality is to use gcj -O3 and compile to assembly instead of an object file. \n\n(Sorry for being so verbose, this used to be part of a Java course I taught while in academia; I'd seen wide eyes on folks that had been writing Java code for a good few years). ",
            "author": "Dawid Weiss",
            "id": "comment-13206159"
        },
        {
            "date": "2012-02-11T20:58:52+0000",
            "content": "I think we should stick w/ simple synchronized methods.\nI am good with this, not a big deal\n\nI agree we need the volatile...\nyeah absolutely ",
            "author": "Simon Willnauer",
            "id": "comment-13206264"
        },
        {
            "date": "2012-02-13T14:48:26+0000",
            "content": "Thanks for the education guys. Simon's example clarified my confusion \u2013 if all access to a variable are synchronized, it doesn't need to be volatile. However in ThingyManager, only setting the variable is synced, but reading it isn't. That's why it needs to be volatile. And swapThingy needs to be synced for concurrency issues (close in parallel to maybeRefresh).\n\nI will declare it volatile. Will upload a patch soon.\n\nBTW, I'd like to rename maybeRefresh to refresh() because this method doesn't return an instance or anything, and to me it's just like calling refresh on say a web page - nothing guarantees that it will change. The method returns true/false depending on whether refresh was done. Are there any objections? ",
            "author": "Shai Erera",
            "id": "comment-13206909"
        },
        {
            "date": "2012-02-13T16:17:12+0000",
            "content": "Updated patch:\n\n\tThingyManager renamed to ReferenceManager\n\tDeclared 'current' volatile (thanks Simon!)\n\tAdded two tests to TestSM. While they could be under a TestReferenceManager new class, I didn't think that creating another class + a ReferenceManager extension is worth it.\n\tAdded a CHANGES entry under back-compat (following maybeReopen to maybeRefresh).\n\n\n\nIf nobody objects, I'd like to rename maybeRefresh to just refresh, and commit it. Otherwise, I'll commit what I have.\n\nI've decided to deal with the SearcherTaxoManager in a different issue. ",
            "author": "Shai Erera",
            "id": "comment-13206960"
        },
        {
            "date": "2012-02-13T16:21:48+0000",
            "content": "For 3.x, is it possible to have maybeReopen still (final+deprecated, calls maybeRefresh) ?\n\nThis would prevent a back compat break ",
            "author": "Robert Muir",
            "id": "comment-13206965"
        },
        {
            "date": "2012-02-13T18:04:26+0000",
            "content": "For 3.x, is it possible to have maybeReopen still (final+deprecated, calls maybeRefresh) ?\n\n+1\n\nIf nobody objects, I'd like to rename maybeRefresh to just refresh, and commit it. Otherwise, I'll commit what I have.\n\nI think we should reflect the \"try\" / \"maybe\" in the name since this operation is non-blocking. I designed this to work nicely with an async system where multiple refresh ops can come in concurrently. this method shouldn't block if we are already refreshing. That said I think we should either use maybe or try as a prefix for the method name.\n ",
            "author": "Simon Willnauer",
            "id": "comment-13207020"
        },
        {
            "date": "2012-02-13T18:28:50+0000",
            "content": "Patch looks great Shai! ",
            "author": "Michael McCandless",
            "id": "comment-13207041"
        },
        {
            "date": "2012-02-14T15:37:13+0000",
            "content": "Thanks all for your comments. Robert, I added back maybeReopen to SearcherManager as deprecated.\n\nCommitted rev 1243906 (3x).\nPorted to trunk 1244000 (trunk).\n\nI will open a separate issue for SearcherTaxoManager ",
            "author": "Shai Erera",
            "id": "comment-13207780"
        }
    ]
}