{
    "id": "SOLR-10413",
    "title": "v2 API: parsed JSON type should be coerced to expected type",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "v2 API"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "v2 API request bodies are parsed as JSON and are checked via JSON schema for the correct types.  But since the JSON parser used (noggit) accepts a relaxed form of JSON, it is weirdly necessary to quote some things but not others.\n\nFor example, after bin/solr start -e cloud -noprompt, curl http://localhost:8983/v2/cluster -H 'Content-type: application/json' -d '{ set-property: { name: autoAddReplicas, val: false } }' returns:\n\n\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n<title>Error 400 {metadata={error-class=org.apache.solr.api.ApiBag$ExceptionWithErrObject,root-error-class=org.apache.solr.api.ApiBag$ExceptionWithErrObject},errorMessages=[{set-property={name=autoAddReplicas, val=false}, errorMessages=[Expected type : string but found : falsein object : false]}],msg=Error in command payload,code=400}</title>\n</head>\n<body><h2>HTTP ERROR 400</h2>\n<p>Problem accessing /solr/____v2/cluster. Reason:\n<pre>    {metadata={error-class=org.apache.solr.api.ApiBag$ExceptionWithErrObject,root-error-class=org.apache.solr.api.ApiBag$ExceptionWithErrObject},errorMessages=[{set-property={name=autoAddReplicas, val=false}, errorMessages=[Expected type : string but found : falsein object : false]}],msg=Error in command payload,code=400}</pre></p>\n</body>\n</html>\n\n\n\nBy contrast, if I quote the propery value, the request succeeds: curl http://localhost:8983/v2/cluster -H 'Content-type: application/json' -d '{ set-property: { name: autoAddReplicas, val: \"false\" } }'\n\nThis is annoying because the property is semantically boolean, even though cluster properties' keys and values are always typed String.\n\nThis error occurs because the API spec for the v2 Cluster API's set-property command requires string typed values - from solr/core/src/resources/apispec/cluster.Commands.json: \n\n\n{\n  \"documentation\": [...],\n  \"description\": [...],\n  \"methods\": [ \"POST\" ],\n  \"url\": { \"paths\": [ \"/cluster\" ] },\n  \"commands\": {\n[...]\n    \"set-property\": {\n      \"type\": \"object\",\n      \"documentation\": [...],\n      \"description\": [...],\n      \"properties\": {\n        \"name\": { \"type\": \"string\",  \"description\": [...] },\n        \"val\": { \"type\": \"string\", \"description\": [...] }\n[...]\n\n\n\nI'm not sure how wide-spread the problem is, but at a minimum for this particular API (setting a cluster property), Solr should accept both keys and values of any (JSON) type and just toString() their values.",
    "attachments": {
        "SOLR-10413.patch": "https://issues.apache.org/jira/secure/attachment/12868321/SOLR-10413.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-16T13:44:18+0000",
            "content": "A patch for this ticket, I've rewritten json validator from scratch. The new json validator :\n\n\tcan add more validations easily\n\tto solve this ticket problem, the patch changed specification and validator to accept multiple-type values\n\n ",
            "author": "Cao Manh Dat",
            "id": "comment-16012415"
        },
        {
            "date": "2017-05-17T03:21:03+0000",
            "content": "let us not reflection here\n\n  String className = Character.toUpperCase(fname.toString().charAt(0))\n          + fname.toString().substring(1) + \"Validator\";\n      Class<Validator> validatorClass = getValidatorClass(fname, className);\n      Constructor<Validator> constructor = (Constructor<Validator>) validatorClass.getDeclaredConstructors()[0];\n\n\nWe have a well defined set of Validators . You can keep a Map of fname vs. Validator objects and lookup ",
            "author": "Noble Paul",
            "id": "comment-16013462"
        },
        {
            "date": "2017-05-18T01:01:19+0000",
            "content": "I disagree with using map. I think reflection make \n\n\tthe code clean and compact\n\tvery easy to add new validator\n\twe don't have to cast parameter to right type for each validator\n\n\n\nThe scope/usage of validator is small enough so the harm of reflection is almost nothing. ",
            "author": "Cao Manh Dat",
            "id": "comment-16015011"
        },
        {
            "date": "2017-05-18T02:16:45+0000",
            "content": "The map usage is type safe and less complex ",
            "author": "Noble Paul",
            "id": "comment-16015094"
        },
        {
            "date": "2017-05-18T02:26:37+0000",
            "content": "I don't think \n\n+  static final Map<String, Function<Pair<Map,Object>, Validator>> VALIDATORS= new HashMap<>();\n+  static {\n+    VALIDATORS.put(\"items\", pair -> new ItemsValidator(pair.first(), (Map) pair.second()));\n+    VALIDATORS.put(\"properties\", pair -> new PropertiesValidator(pair.first(), (Map) pair.second()));\n+    VALIDATORS.put(\"type\", pair -> new TypeValidator(pair.first(), (Map) pair.second()));\n+    VALIDATORS.put(\"required\", pair -> new RequiredValidator(pair.first(), (List)pair.second()));\n+  }\n\n\nis more type safe and less complex than reflection? ",
            "author": "Cao Manh Dat",
            "id": "comment-16015097"
        },
        {
            "date": "2017-05-18T02:37:27+0000",
            "content": "is more type safe and less complex than reflection?\n\nyes. How do you know that such a class exist or if that class is indeed a Validator when you use reflection. In this case you are sure about it  ",
            "author": "Noble Paul",
            "id": "comment-16015108"
        },
        {
            "date": "2017-05-18T03:55:21+0000",
            "content": "Updated patch, without reflection + oneOf validator. Will commit this patch soon. ",
            "author": "Cao Manh Dat",
            "id": "comment-16015152"
        },
        {
            "date": "2017-05-18T04:25:11+0000",
            "content": "Commit c93409392d780892542ba736739099970a26632f in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c934093 ]\n\nSOLR-10413: v2 API: parsed JSON type should be coerced to expected type ",
            "author": "ASF subversion and git services",
            "id": "comment-16015182"
        },
        {
            "date": "2017-05-18T07:00:07+0000",
            "content": "Commit 38205d7adab7fc184d510f1fa5af631699f75836 in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=38205d7 ]\n\nSOLR-10413: Update CHANGES.txt ",
            "author": "ASF subversion and git services",
            "id": "comment-16015306"
        },
        {
            "date": "2017-05-18T16:35:48+0000",
            "content": "Policeman Jenkins found a reproducing seed for a failure that started with c93409392d, the first commit on this issue (according to git bisect) https://jenkins.thetaphi.de/job/Lucene-Solr-master-Solaris/1304/:\n\n\n   [junit4] ERROR   0.04s J1 | TestCollectionAPIs.testCommands <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Error in command payload[{\n   [junit4]    >     \"modify\":{\n   [junit4]    >       \"rule\":\"replica:*,cores:<5\",\n   [junit4]    >       \"autoAddReplicas\":false},\n   [junit4]    >     \"errorMessages\":[\"Value is not valid, expected one of: [ARRAY], found: String\"]}]\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([41BCD0097E4852E2:608019F11472B286]:0)\n   [junit4]    > \tat org.apache.solr.handler.admin.TestCollectionAPIs.makeCall(TestCollectionAPIs.java:189)\n   [junit4]    > \tat org.apache.solr.handler.admin.TestCollectionAPIs.compareOutput(TestCollectionAPIs.java:148)\n   [junit4]    > \tat org.apache.solr.handler.admin.TestCollectionAPIs.testCommands(TestCollectionAPIs.java:120)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: org.apache.solr.api.ApiBag$ExceptionWithErrObject: Error in command payload\n   [junit4]    > \tat org.apache.solr.api.ApiBag.getCommandOperations(ApiBag.java:320)\n   [junit4]    > \tat org.apache.solr.handler.admin.TestCollectionAPIs$1.getCommands(TestCollectionAPIs.java:173)\n   [junit4]    > \tat org.apache.solr.handler.admin.BaseHandlerApiSupport$1.call(BaseHandlerApiSupport.java:84)\n   [junit4]    > \tat org.apache.solr.handler.admin.TestCollectionAPIs.makeCall(TestCollectionAPIs.java:187)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {}, docValues:{}, maxPointsInLeafNode=1627, maxMBSortInHeap=5.487446584455346, sim=RandomSimilarity(queryNorm=false): {}, locale=is-IS, timezone=America/Monterrey\n   [junit4]   2> NOTE: SunOS 5.11 amd64/Oracle Corporation 1.8.0_131 (64-bit)/cpus=3,threads=1,free=59314248,total=224067584\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16016041"
        },
        {
            "date": "2017-05-19T02:35:57+0000",
            "content": "Commit 9e3c710d0c7d8d82468c4e6a99717b08655db486 in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9e3c710 ]\n\nSOLR-10413: Fix test failure (with better json validators we can capture invalid input) ",
            "author": "ASF subversion and git services",
            "id": "comment-16016816"
        },
        {
            "date": "2017-05-19T02:43:48+0000",
            "content": "Commit eb475db9c4811d6364000e6ebe372773b3585df0 in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=eb475db ]\n\nSOLR-10413: Fix precommit ",
            "author": "ASF subversion and git services",
            "id": "comment-16016820"
        }
    ]
}