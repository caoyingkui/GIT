{
    "id": "SOLR-7853",
    "title": "support min(multivalued_field_name) and max(multivalued_field_name) syntax",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "The changes in SOLR-2522 are adding support for using field(field_name,'min') and field(field_name,'max') as a way to use the min/max of a multivalued docvalues field in functions at query time.\n\nThe ideal syntax would be to support this as a varient on the existing min() and max() functions \u2013 which would be more intuitive for users, but getting this to work is non trivial, so it's been split out as a distinct issue for future improvement.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-07-31T01:37:30+0000",
            "author": "Hoss Man",
            "content": "My Comments from SOLR-2522...\n\n\n\nThe root complexity is that the ValueSourceParsers all delegate to FunctionQParser.parseValueSource() (or parseValueSourceList()) when expecting an argument that can be an arbitrary (nested) ValueSource \u2013 this is how min & max work now.  FQP.parseValueSource() handles the logic of figuring out what hte argument is (literal, nested function, $variable, field name, etc...) and if it's a field name, calls f.getType().getValueSource(f, this) on the associated SchemaField \u2013 which for multivalued fields throws an exception that gets propogated up.\n\nMy initial thinking was that i could refactor parseValueSource() to support another flag for either specifying the MultiValueSelector, or indicating that we want a \"defered evaluation\" of the underlying SchemaFields (ie: return some mock FieldBasedValueSource that doesn't call FieldType.getValueSource until used, so the min/max functions can explicitly call getSingleValueSource() instead if they encounter a single argument) but then i realized that because of how FunctionQParser deals with $variable derefrencing \u2013 and the QParser abstraction (variables might refer to other queries, which get automatically unwrapped if they are FunctionQueries) then even that type of refacotring solution wouldn't work in simple use cases like this...\n\n\n...\n& fl=id,min($my_f)\n& my_f=some_multi_valued_field_name\n\n\n\nSo I'm going to punt on getting the min(some_multi_valued_field_name) (and max(some_multi_valued_field_name)) syntax working, and leave that as a usibillitiy improvement for the future. ",
            "id": "comment-14648602"
        }
    ]
}