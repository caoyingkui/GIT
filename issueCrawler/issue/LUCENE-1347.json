{
    "id": "LUCENE-1347",
    "title": "IndexWriter.rollback can hang if a previous call hit an exception",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.4"
        ],
        "affect_versions": "2.3,                                            2.3.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "IW.rollback has logic to make sure only one thread actually gets to do\nthe rollback whenever multiple threads are calling it at the same\ntime, by setting the \"boolean closing\" to true in the thread that got\nthere first.\n\nOther threads wait for that variable to become false again before\nreturning from abort.\n\nBut, we are not restoring closing to false in a try/finally in\nrollback(), which means on hitting an exception in rollback, a\nsubsequent call to rollback() will hang forever.\n\nclose() has the same logic, but there is already a try/finally there\nto restore closing to false on exception.\n\nThe fix is straightforward.",
    "attachments": {
        "LUCENE-1347.patch": "https://issues.apache.org/jira/secure/attachment/12387183/LUCENE-1347.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-07-30T12:47:35+0000",
            "content": "Attached patch.  I plan to commit in a day or so, and then backport to 2.3.x. ",
            "author": "Michael McCandless",
            "id": "comment-12618313"
        },
        {
            "date": "2008-07-30T14:23:07+0000",
            "content": "Looks good Mike!\nJust one question.... it looks like there might be a race condition in rollbackInternal()\nThread A calls rollbackInternal calls closeInternal which executes the finally block, waking up thread B.\nThread B sets closing=true and then calls closeInternal or rollbackInternal... meanwhile thread A executes the finally block in rollbackInternal and sets closing=false (oops, it shouldn't do that if closeInternal already did it).\n\nThat breaks the invariant, and thread C could then set closing=true and call closeInternal or rollbackInternal concurrently with thread B.\n\nNot sure if this would cause any real problems or not though. ",
            "author": "Yonik Seeley",
            "id": "comment-12618356"
        },
        {
            "date": "2008-07-30T14:55:41+0000",
            "content": "Woops, you're right \u2013 thanks for the review!  Two threads (B & C) could in fact enter closeInternal at the same time.\n\nInside rollbackInternal, if I move the closeInternal() call out of the try/finally that sets closing to false, I believe that should resolve this?  In other words, I would only revert closing to false on hitting an exception in all the logic rollbackInternal does before calling closeInternal.\n\nOK new patch attached. ",
            "author": "Michael McCandless",
            "id": "comment-12618375"
        },
        {
            "date": "2008-07-30T15:32:16+0000",
            "content": "Yep... the success flag ensures that closing=false  is only done once. ",
            "author": "Yonik Seeley",
            "id": "comment-12618390"
        },
        {
            "date": "2008-07-30T15:36:37+0000",
            "content": "Super, I'll commit shortly \u2013 thanks Yonik! ",
            "author": "Michael McCandless",
            "id": "comment-12618392"
        }
    ]
}