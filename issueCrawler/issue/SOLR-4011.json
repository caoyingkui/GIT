{
    "id": "SOLR-4011",
    "title": "SolrCore - correct behavior while having error loading specific cores",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "multicore"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "I've a multicore setup.  Solr.xml contains the following:\n\n<solr persistent=\"false\">\n\n  <!--\n  adminPath: RequestHandler path to manage cores.  \n    If 'null' (or absent), cores will not be manageable via request handler\n  -->\n<cores adminPath=\"/admin/cores\">\n<core name=\"a\" instanceDir=\"/shop/www/htdocs/a/shop.staging/solr/app\" dataDir=\"/shop/solr/staging/a/data/\" configName=\"solrconfig.xml\" schemaName=\"schema.xml\" />\n<core name=\"b\" instanceDir=\"/shop/www/htdocs/b/shop.staging/solr/app\" dataDir=\"/shop/solr/staging/b/data/\" configName=\"solrconfig.xml\" schemaName=\"schema.xml\" />\n<core name=\"c\" instanceDir=\"/shop/www/htdocs/c/shop.staging/solr/app\" dataDir=\"/shop/solr/staging/c/data/\" configName=\"solrconfig.xml\" schemaName=\"schema.xml\" />\n</cores>\n</solr>\n\nWhen solr starts, it tries to LOAD all the cores. If one fails (no solrconfig.xml or instanceDir found), the whole multicore configuration is broken and Solr won't answer as well for the other two cores. \n\nIs there a workaround for it? Reasons while it can happen is, for example, if cores' creation in the XML are managed indipendently (e.g via Puppet) but applications are not deployed in that instanceDir yet (therefore: no solrconfig.xml/schema.xml). Is there a specific parameter to use?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13485983",
            "date": "2012-10-29T12:15:13+0000",
            "content": "I'm not at all sure we should fix this. In the vast majority of cases, just continuing would lead to hard-to-understand behavior. Imagine an innocent typo on a core definition line in the non-puppet (or other \"special\") setup for just one of your cores. Now you have users who can't find a document, but only when searching for that core, but you don't know why. The \"fail fast\" option makes that obvious when you start solr, not after you've deployed it to your production system and have customers complaining....\n\nYou can actually fire up a Solr with no cores defined, and then use the \"CREATE\" command after you're sure the relevant file structure is in place. If you combine that with \"persist=true\" in your solr.xml file, you're in a situation where after you've deployed all your infrastructure and issued the proper \"CREATE\" commands, you'll have the setup in persisted to your solr.xml file. Despite its name, CREATE can be used as though it were something like OPEN or LOAD on a pre-existing collection.\n\nIn the future, could you raise this kind of question on the user's list first rather than opening a JIRA? We try to keep JIRAs for confirmed bugs...\n\nBest\nErick\n "
        },
        {
            "author": "Gianluca Varisco",
            "id": "comment-13486039",
            "date": "2012-10-29T14:14:54+0000",
            "content": "Erick, great - thanks for your feedback! \n\nWill raise this kind of question in user's ML next time, got the point! \n\nGian "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13486042",
            "date": "2012-10-29T14:19:11+0000",
            "content": "Gian:\n\nNo Problem, I'll close this and we can re-open it if there's something that should be done Solr-wise.... "
        }
    ]
}