{
    "id": "LUCENE-7036",
    "title": "nio.Paths and nio.Files package are used in StringHelper, but they are restricted in many infrastructure and platforms",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "5.1,                                            5.2,                                            5.3,                                            5.4,                                            5.5",
        "components": [
            "core/other"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "nio.Paths and nio.Files package are used in StringHelper, but they are restricted in many infrastructure and platforms like Google App Engine.\nThe use of Paths and Fiiles are not related to the main function of Lucene.\nIt's better to provide an interface to store system properties instead of using File API in String Helper directly.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15153856",
            "author": "Uwe Schindler",
            "date": "2016-02-19T07:35:02+0000",
            "content": "Can you explain your problem? Lucene 5.x requires Java 7 at minimum and all file IO uses java.nio.files.* APIs.\nStringHelper uses the file /dev/urandom only if it is available. If the environment restricts access, another hasing is used. "
        },
        {
            "id": "comment-15154947",
            "author": "Forrest Sun",
            "date": "2016-02-19T21:59:17+0000",
            "content": "In Google App Engine and other Platform as Service infrastructure, They provide a layer of abstraction to manage storage. File IOs are restricted in many cases. And the services will present a class can not initialize error if users use these class. "
        },
        {
            "id": "comment-15155028",
            "author": "Uwe Schindler",
            "date": "2016-02-19T22:39:09+0000",
            "content": "You won't be able to use Lucene at all without java.nio.file.* classes. In addition StringHelper catches SecurityExceptions and handles accordingly. "
        },
        {
            "id": "comment-15155029",
            "author": "Shawn Heisey",
            "date": "2016-02-19T22:40:03+0000",
            "content": "I hope I'm relaying correct information here.  This is my current understanding:\n\nWhen using the standard directory implementation, Lucene has a fundamental dependency on the classes that you're asking about.  This has been the situation since version 4.8.0, when Java 7 became the minimum.  Before that version, Lucene used the File class for I/O.  The switch to NIO2 has made Lucene a lot more stable.\n\nIf the abstraction layers you mentioned are specific to the service providers, changing this would make Lucene incompatible with off-the-shelf JVMs.\n\nIt might be possible to create your own Directory implementation that uses the abstraction layer provided by the service.  If their license is compatible with the Apache license, that addition could be included in Lucene as a contrib module. "
        }
    ]
}