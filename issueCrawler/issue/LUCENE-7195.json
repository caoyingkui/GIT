{
    "id": "LUCENE-7195",
    "title": "GeoPolygon construction sometimes inexplicably chooses concave polygons when order of points is clockwise",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "6.0",
        "components": [
            "modules/spatial3d"
        ],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "The following input generates the following polygon, which is backwards from the correct sense:\n\n\nMAKE POLY: centerLat=51.204382859999996 centerLon=0.23125274999999992\nradiusMeters=44832.90297079173 gons=10\n  polyLats=[51.204382859999996, 50.89947531437482, 50.8093624806861,50.8093624806861, 50.89947531437482, 51.204382859999996, 51.51015366140113, 51.59953838204167, 51.59953838204167, 51.51015366140113, 51.204382859999996]\n  polyLons=[0.8747711978759765, 0.6509219832137298, 0.35960265165247807, 0.10290284834752167, -0.18841648321373008, -0.41226569787597667, -0.18960465285650027, 0.10285893781346236, 0.35964656218653757, 0.6521101528565002, 0.8747711978759765]\n --> QUERY: PointInGeo3DShapeQuery: field=point: Shape:\nGeoCompositeMembershipShape: {[GeoConcavePolygon:\n{planetmodel=PlanetModel.WGS84, points=\n[[lat=0.899021779599662, lon=0.011381469253029434],\n [lat=0.9005818372758149, lon=0.006277016653633617],\n [lat=0.9005818372758149, lon=0.0017952271299490152],\n [lat=0.899021779599662, lon=-0.003309225469446801],\n [lat=0.8936850723587506, lon=-0.007195393820967987],\n [lat=0.8883634317734164, lon=-0.0032884879971082164],\n [lat=0.8867906661272461, lon=0.0017959935133446592],\n [lat=0.8867906661272461, lon=0.006276250270237971],\n [lat=0.8883634317734164, lon=0.011360731780690846],\n [lat=0.8936850723587506, lon=0.015267637604550617]], internalEdges={}, holes=[]}]}",
    "attachments": {
        "LUCENE-7195.patch": "https://issues.apache.org/jira/secure/attachment/12797736/LUCENE-7195.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15232294",
            "author": "Karl Wright",
            "date": "2016-04-08T15:00:36+0000",
            "content": "I turned this into a test, which unfortunately does not fail.  Attached. "
        },
        {
            "id": "comment-15232807",
            "author": "ASF subversion and git services",
            "date": "2016-04-08T19:53:44+0000",
            "content": "Commit 4c4730484d27d49223ce1841ed022f1d7550fbc1 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4c47304 ]\n\nLUCENE-7195: Clockwise/counterclockwise detection was rotating coordinates in the wrong direction. "
        },
        {
            "id": "comment-15232820",
            "author": "ASF subversion and git services",
            "date": "2016-04-08T19:55:51+0000",
            "content": "Commit 30d612f84ed71b00ef981c24dd77d305b326a7e8 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=30d612f ]\n\nLUCENE-7195: Clockwise/counterclockwise detection was rotating coordinates in the wrong direction. "
        },
        {
            "id": "comment-15233476",
            "author": "Michael McCandless",
            "date": "2016-04-09T09:44:07+0000",
            "content": "Thanks for fixing this Karl Wright, it let me run the geo bench again!\n\nOur geobench (in luceneutil) now has so many options that I wrote a wrapper Python script (also pushed to luceneutil) to run it on the N possibilities and summarizes the results\n\nThese results are on the 60.8 M point London, UK extract (100% of London, 2.5% of the rest of the world) from the OpenStreetMaps export:\n\nIndexing performance:\n\n\n\n\nApproach\nIndex time (sec)\nForce merge time (sec)\nIndex size (GB)\nReader heap (MB)\n\n\nGeo3d\n577.8s\n281.1s\n0.80\n1.96\n\n\nPoints\n354.8s\n165.0s\n1.05\n1.96\n\n\nGeopoint\n119.0s\n15.8s\n0.75\n2.73\n\n\n\n\n\nHere geopoint wins big since it builds on postings which are much faster at merging than BKD trees, but note that the benchmark intentionally picks settings that provoke heavy merging (small indexing buffer, serial merge scheduler).  It also shows that using the same morton code, but on (1D) points instead of postings, should be a really good option too.\n\nSearch performance, if queries are NOT pre-built (i.e., query construction time counts):\n\n\n\n\nShape\nApproach\nQPS\nHit count\n\n\nDistance\nGeo3d\n29.65\n383371933\n\n\nDistance\nPoints\n28.65\n382961957\n\n\nDistance\nGeopoint\n17.88\n382961953\n\n\nBox\nGeo3d\n45.31\n221118844\n\n\nBox\nPoints\n68.11\n221118844\n\n\nBox\nGeopoint\n38.09\n221118851\n\n\nPolygon (10 sides)\nGeo3d\n5.94\n355855224\n\n\nPolygon (10 sides)\nPoints\n29.26\n355809475\n\n\nPolygon (10 sides)\nGeopoint\n19.43\n355809465\n\n\n\n\n\n\nSearch performance if queries are pre-built:\n\n\n\n\nShape\nApproach\nQPS\nHit count\n\n\nDistance\nGeo3d\n31.89\n383371933\n\n\nDistance\nPoints\n28.84\n382961957\n\n\nDistance\nGeopoint\n17.50\n382961953\n\n\nBox\nGeo3d\n45.07\n221118844\n\n\nBox\nPoints\n69.78\n221118844\n\n\nBox\nGeopoint\n35.75\n221118851\n\n\nPolygon (10 sides)\nGeo3d\n24.88\n355855224\n\n\nPolygon (10 sides)\nPoints\n29.12\n355809475\n\n\nPolygon (10 sides)\nGeopoint\n19.29\n355809465\n\n\n\n\n\nPre-building makes a huge difference in Geo3d for polygons, and curiously seems not to matter much for Points and Geopoint. "
        },
        {
            "id": "comment-15233482",
            "author": "Karl Wright",
            "date": "2016-04-09T10:12:44+0000",
            "content": "For Geo3D polygons, I would bet a large amount of money that the time spent in building queries goes into that random search for a \"pole\" around which to determine clockwise/counterclockwise point direction.  I have some ideas how to refine the search for this point.  Will look at it when done fixing the current bug. "
        }
    ]
}