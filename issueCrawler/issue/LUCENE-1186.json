{
    "id": "LUCENE-1186",
    "title": "[PATCH] Clear ThreadLocal instances in close()",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "2.4.1",
            "2.9"
        ],
        "affect_versions": "2.3,                                            2.3.1,                                            2.4",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "As already found out in LUCENE-436, there seems to be a garbage collection problem with ThreadLocals at certain constellations, resulting in an OutOfMemoryError.\nThe resolution there was to remove the reference to the ThreadLocal value when calling the close() method of the affected classes (see FieldsReader and TermInfosReader).\nFor Java < 5.0, this can effectively be done by calling threadLocal.set(null); for Java >= 5.0, we would call threadLocal.remove()\n\nAnalogously, this should be done in any class which creates ThreadLocal values\n\nRight now, two classes of the core API make use of ThreadLocals, but do not properly remove their references to the ThreadLocal value\n1. org.apache.lucene.index.SegmentReader\n2. org.apache.lucene.analysis.Analyzer\n\nFor SegmentReader, I have attached a simple patch.\nFor Analyzer, there currently is no patch because Analyzer does not provide a close() method (future to-do?)",
    "attachments": {
        "LUCENE-1186-SegmentReader.patch": "https://issues.apache.org/jira/secure/attachment/12376218/LUCENE-1186-SegmentReader.patch",
        "LUCENE-1186.patch": "https://issues.apache.org/jira/secure/attachment/12401105/LUCENE-1186.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-02-22T10:55:56+0000",
            "content": "Patch: Adds termVectorsLocal.set(null) to SegmentReader#close() ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12571350"
        },
        {
            "date": "2008-02-22T18:52:10+0000",
            "content": "Is there really a memory leak issue here?  I don't recall all the details of LUCENE-436, but I think the problem was not with ThreadLocal...  Is there a way for you to demonstrate this memory issue? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12571523"
        },
        {
            "date": "2008-02-25T14:34:17+0000",
            "content": "This issue is rather a prophylactic one \u2013 until now, I have not encountered an OutOfMemoryError or slowdown etc.\n\nHowever, I think it is a good practice to release all resources as soon as an object is not used anymore. For SegmentReader, this is the case when #close() is called. More, as noted in LUCENE-436, some VMs (also recent ones) indeed seem to have problems when ThreadLocal values are not released, so I think it is not just a cosmetic issue. ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12572092"
        },
        {
            "date": "2009-02-27T08:26:49+0000",
            "content": "i'm using quartz schedules to trigger indexing tasks\n\nsince the analyzer class is using a thread local -> should i reuse an analyzer (e.g singleton pattern) in this case (quartz job reusing threads (=tread pool) -> thread local data never gets freed)...)? \n\nMem dump fragment (after out of memory):\n\nClass name Shallow Heap Retained HeapPercentage \norg.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e8070  QuartzScheduler_Worker-3 Thread       120  55.914.144    21,65% \n\n\n\n\n\tjava.lang.ThreadLocal$ThreadLocalMap @ 0xdf32a20      24  55.913.760  21,65%\n\n\n\n\n  '- java.lang.ThreadLocal$ThreadLocalMap$Entry[16384] @ 0x163a61b8      65.552  55.913.736 21,65% \njava.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xe090ca8  32 9.608 0,00% \njava.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xe0f6b88     ....\njava.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xe5d3df8   ....\n  org.apache.lucene.analysis.StopAnalyzer$SavedStreams @ 0xe090cc8  24      9.560    0,00% \n  org.apache.lucene.analysis.LowerCaseTokenizer @ 0xe090ce0           32   8.520    0,00% \n  org.apache.lucene.analysis.CharArraySet @ 0xe090e30       24          968   0,00% \n  org.apache.lucene.analysis.StopFilter @ 0xe090e18             24         24    0,00% \n  org.apache.lucene.analysis.StopAnalyzer @ 0xe0911f8          24          24     0,00%\njava.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xe629d80 ....\njava.lang.ThreadLocal$ThreadLocalMap$Entry @ 0xeb53510 ....\n......\n......\n\n\n\n\n\nquartz overview (eclipse memory analysis):\n\nClass name    Shallow Heap | Retained Heap | Percentage \norg.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e8070  QuartzScheduler_Worker-3 Thread|          120 |    55.914.144 |     21,65% \norg.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e7a50  QuartzScheduler_Worker-7 Thread|          120 |    30.684.056 |     11,88% \norg.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e7710  QuartzScheduler_Worker-9 Thread|          120 |    19.464.024 |      7,54% \norg.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e7ee8  QuartzScheduler_Worker-4 Thread|          120 |    14.813.640 |      5,74% \norg.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e78c8  QuartzScheduler_Worker-8 Thread|          120 |    11.154.576 |      4,32% \norg.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e81f8  QuartzScheduler_Worker-2 Thread|          120 |     8.403.544 |      3,25% \norg.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e8380  QuartzScheduler_Worker-1 Thread|          120 |     8.334.552 |      3,23% \norg.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e7d60  QuartzScheduler_Worker-5 Thread|          120 |     8.314.904 |      3,22% \norg.quartz.simpl.SimpleThreadPool$WorkerThread @ 0xb4e8508  QuartzScheduler_Worker-0 Thread|          120 |     8.267.376 |      3,20% \n ",
            "author": "Robert Starzer",
            "id": "comment-12677281"
        },
        {
            "date": "2009-02-27T11:53:17+0000",
            "content": "Re-using a single analyzer should work around this...\n\nAs of LUCENE-1383, we now have a CloseableThreadLocal, and we've used\nit instead of ThreadLocal in many places inside Lucene.\n\nHowever, Analyzer still uses ThreadLocal, because it doesn't have a\nclose() method.  I think we should simply add a close() method to\nAnalyzer, which then closes the ThreadLocal (attached patch).\n\nI plan to commit in a day or two, and back port to 2.4.1. ",
            "author": "Michael McCandless",
            "id": "comment-12677332"
        },
        {
            "date": "2009-02-27T12:05:57+0000",
            "content": "New patch, giving credit to Christian.  Thanks Christian! ",
            "author": "Michael McCandless",
            "id": "comment-12677338"
        },
        {
            "date": "2009-02-27T12:07:16+0000",
            "content": "great! thanks!\nIMHO, some kind of IOC container for these lifecycle/caching challenges would make it more transparent - or setting some strategy for different environments ",
            "author": "Robert Starzer",
            "id": "comment-12677340"
        },
        {
            "date": "2009-02-27T14:17:24+0000",
            "content": "IMHO, some kind of IOC container for these lifecycle/caching challenges would make it more transparent - or setting some strategy for different environments\n\nThis sounds interesting \u2013 can you flesh out some concrete details so we can discuss it?  EG are you picturing a single opaque class instance that'd hold all thread-local like state that Lucene needs to store, which could then be directly controlled by the app (ie, close()'d when the app is done for now interacting with Lucene)? ",
            "author": "Michael McCandless",
            "id": "comment-12677376"
        },
        {
            "date": "2009-02-27T17:10:48+0000",
            "content": "you could use e.g. spring and specific spring-bean-scopes [spring isn't the only choice ;-) ]\n(e.g. request/session scope for web apps, thread local scope (via org.springframework.aop.target.ThreadLocalTargetSource) for none-web apps), or even prototyp scope if nothing\nshould be reused\n\nthe main problem however is that i do not know why ThreadLocal objects are used in lucene; i somewhere read about synchronization issues, but IMHO only the developer/user knows\nif synchronization is really necessary; \n\ncould you please explain to me why/when ThreadLocals are used? ",
            "author": "Robert Starzer",
            "id": "comment-12677423"
        },
        {
            "date": "2009-02-27T21:37:13+0000",
            "content": "could you please explain to me why/when ThreadLocals are used?\n\nLucene largely uses them to avoid fine-grained synchronization.\n\nEG when you call IndexReader.document(int) we use ThreadLocal to store\na \"private\" clone for that thread.  Likewise for term vectors, for\ncaching terms info, and for analyzers to reuse TokenStream instances. ",
            "author": "Michael McCandless",
            "id": "comment-12677543"
        },
        {
            "date": "2009-02-27T22:55:15+0000",
            "content": "ok thanks!\n\nhttps://issues.apache.org/jira/browse/LUCENE-1383\n\"If closing all index readers and writers releases all Lucene thread locals it's great.\"\n\n-> is this true (only for SegmentReader)?\n\nanother interesting thing for me: is there a reason for the ThreadLocals not being defined as static? ",
            "author": "Robert Starzer",
            "id": "comment-12677584"
        },
        {
            "date": "2009-02-27T23:21:40+0000",
            "content": "-> is this true (only for SegmentReader)?\n\nIt's true, for all readers (Multi*Readers close the underlying SegmentReaders, which then close their ThreadLocals).\n\nis there a reason for the ThreadLocals not being defined as static?\n\nWell... if we made them static then we'd have to further key (internally) on the SegmentReader, and then on closing the SegmentReader we'd have to go and try to remove those entries somehow. ",
            "author": "Michael McCandless",
            "id": "comment-12677600"
        },
        {
            "date": "2009-02-27T23:44:42+0000",
            "content": "\"EG are you picturing a single opaque class instance that'd hold all thread-local\"\n\nI think this would solve the problem. The real impl should be configureable via e.g. properties file (keep it simple) to further implement/change to a no-thread-local-at-all-policy if lucene is being used i an thread-pool environment (quartz, web requests,...), or an impl using spring beans, ... (two or three different strategies...) ",
            "author": "Robert Starzer",
            "id": "comment-12677601"
        }
    ]
}