{
    "id": "SOLR-651",
    "title": "A SearchComponent for fetching TF-IDF values",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "A SearchComponent that can return TF-IDF vector for any given document in the SOLR index\nQuery : A Document Number / a query identifying a Document\nResponse :  A Map of term vs.TF-IDF value of every term in the Selected\nDocument\nWhy ?\n\nMost of the Machine Learning Algorithms work on TFIDF representation of\ndocuments, hence adding a Request Handler proving the TFIDF representation\nwill pave the way for incorporating Learning Paradigms to SOLR framework.",
    "attachments": {
        "SOLR-651-fixes.patch": "https://issues.apache.org/jira/secure/attachment/12392935/SOLR-651-fixes.patch",
        "SOLR-651.patch": "https://issues.apache.org/jira/secure/attachment/12389515/SOLR-651.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Grant Ingersoll",
            "id": "comment-12617829",
            "date": "2008-07-29T15:54:11+0000",
            "content": "See http://lucene.markmail.org/message/k7mr6d6qpulnizgb?q=Solr+TFIDF "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12628390",
            "date": "2008-09-04T17:20:50+0000",
            "content": "Here's a first crack at this.  It still needs more unit tests to exercise the various combination of options, but I think it is a reasonable first crack at the idea.\n\nQuestions to be answered/things to still do:\n1. How do people like the format for output?  It's basically broken down by doc, then field, then term, then term information,  See the unit tests for some samples\n2. Would be good to have a more efficient lookup for IDF.  At a minimum, a cache of IDF values would be useful, but the memory would need to be controlled.  Lucene may do some caching under the hood, so that should be investigated more\n3.  It relies on the query component doing it's thing.  That is, you send in a query, start and rows, and this component just loops over the doc list and fetches.  I could see a case for doing things separately, but that seems like duplication.  People using this can just send explicit queries designed for this Component.\n4. Probably needs some error handling for documents that don't have term vectors, but haven't tested yet.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12629065",
            "date": "2008-09-08T04:16:38+0000",
            "content": "The output looks fine . may be we can improve on iterations. We should add the uniqueKey value if it exists . That is the only way we the user can correlate it with the actual results\n\n\n<lst name=\"doc-3\">\n<str name=\"<unique-key-field-name><unique-key-value></str>\n<lst name=\"cat\">\n....\n\n\n\nanother observation is this gets a searcher and does not do a decref() after the use. The operations must be put in \n\ntry{\n//the operations\n}finally{ \nsearcher.decref();\n}\n\n\n\nA suggestion on the name why not make it all lowercase. tvrh instead of tvRH\n\nMost of the users may not need the \"results\" so it must be able to be used separately  as a requesthandler register it as \"/tvrh\"\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12630074",
            "date": "2008-09-11T02:48:33+0000",
            "content": "Addresses Noble's thoughts. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12634183",
            "date": "2008-09-24T15:59:56+0000",
            "content": "Here's a start at making this support distributed.  Still needs testing.  I'm not sure if I'm doing the distributed right, but there ain't a whole lot of docs on it just yet, so I'm going based off of what I see in the other components.  I'm especially not clear if I am understanding the stages correctly.\n\nAlso, would be handy if there was a better way of testing the distributed stuff.  So far, I call directly into the component to call distributedProcess, but would also be nice to have a harness that does what TestDistributedSearch does (i.e. setup a couple of Jetty instances and actually run them)\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12634877",
            "date": "2008-09-26T14:17:22+0000",
            "content": "Grant, would it be better to handle the distributed case through another issue and commit the fully baked patch for a single server? A lot of people can start using it immediately. Distributed Search is still relatively rare though it is certainly picking up the pace. "
        },
        {
            "author": "Vaijanath N. Rao",
            "id": "comment-12641769",
            "date": "2008-10-22T10:46:27+0000",
            "content": "Hi Grant,\n\nI have applied the patch and to start with it is really good. I just have few suggestions.\n\na) if  one set qt=tvrh  tv=true does not make sense as the user is anyway requesting term vectors.\nb) Repeating uniqueKeyFieldName for every record does not add any value.\nc) Ideally what I would have liked is something below.\n<response>\n<lst name=\"termVectors\">\n<lst name=\"firstdoc\">\n<str name=\"term1\">term1tf-idf</str>\n<str name=\"term2\">term1tf-idf</str>\n....\n</lst>\n<lst name=\"seconddoc\">\n<str name=\"term1\">term1tf-idf</str>\n...\n</lst>\n....\n</lst>\n</response>\n\nHaving said all this, the above patch helps us a lot in terms of using solr for document clustering.\n\n--Thanks and Regards\nVaijanath "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12641783",
            "date": "2008-10-22T11:09:08+0000",
            "content": "Vajijanath\n\n\nHaving said all this, the above patch helps us a lot in terms of using solr for document clustering.\n\nPlease see SOLR-769. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12641784",
            "date": "2008-10-22T11:16:33+0000",
            "content": "\na) if one set qt=tvrh tv=true does not make sense as the user is anyway requesting term vectors.\n\nqt=tvrh is setting the request handler.  tv=true is turning on the TermVectorComponent (TVC).  Those are two separate actions.  The TVC can be added to any ReqHandler.\n\n\nb) Repeating uniqueKeyFieldName for every record does not add any value.\n\nGood point.  I will move that out.\n\n\nc) Ideally what I would have liked is something below.\n<response>\n<lst name=\"termVectors\">\n<lst name=\"firstdoc\">\n<str name=\"term1\">term1tf-idf</str>\n<str name=\"term2\">term1tf-idf</str>\n....\n\nCan you make a case for that?  I have a couple of issues with it.  First, the term is incorrectly typed.  Presumably TF-IDF is a double.  Second, it requires Solr to do TF*IDF for every term, when not everyone will want that, thus it would be a wasted calculation.   I suppose it could be an option to have Solr do it, though.\n\nAre you proposing not to return the other info or is this just in the case where tf = true and idf = true? "
        },
        {
            "author": "Vaijanath N. Rao",
            "id": "comment-12641790",
            "date": "2008-10-22T11:45:26+0000",
            "content": "Hi Grant,\nI agree with the first point.\n\nFor the third point \nThe assumption is if someone has asked for TF-IDF representation, one would not expect the entire document to be back. So if the request is qt=trvh&tf.tv=true&tv=true or tf=true one would expect only to get the termvectors component.\n\nI agree with you regarding the tf-idf computation, just returning tf is more than sufficient.  \n\n--Thanks and Regards\nVaijanath  "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12641813",
            "date": "2008-10-22T13:14:20+0000",
            "content": "Adds in All parameter to get tf, idf, offsets, and positions.  Moves uniqueFieldKeyName out of the loop. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12641814",
            "date": "2008-10-22T13:19:40+0000",
            "content": "\nThe assumption is if someone has asked for TF-IDF representation, one would not expect the entire document to be back. So if the request is qt=trvh&tf.tv=true&tv=true or tf=true one would expect only to get the termvectors component.\n\nOK, I think I understand.  You're suggesting that if one only wants one component (i.e. TF), that we could flatten the structure a bit such that instead of:\n\n<lst name=\"display\">\n<int name=\"freq\">2</int>\n</lst>\n\n\nwe just do:\n\n<int name=\"display\">2</int>\n\n\n\nThe former is slightly more verbose, but then it only requires people to have one approach to handling the various options, whereas the latter approach, while more compact, requires people to have two ways of handling the output.  Is my understanding correct? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12641815",
            "date": "2008-10-22T13:22:52+0000",
            "content": "Fix bug with position output. "
        },
        {
            "author": "Vaijanath N. Rao",
            "id": "comment-12641830",
            "date": "2008-10-22T13:49:23+0000",
            "content": "Hi Grant,\n\nI think my understanding is slightly different, let me try to clarify them both.\n\nIf the user has asked for tf=true he is expecting term frequency value\nso the output would be\n<int name=\"display\">2</int>\n\nIf the user has asked for tf=true&idf=true user implies give me both computation\nso the output would be\n<float name=\"display\">1.0</float>\n\nI thought of this output and hence thought this representation would be ideal. But I think I might been missing something that you have though about.\n\n--Thanks and Regards\nVaijanath N. Rao "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12642157",
            "date": "2008-10-23T13:14:03+0000",
            "content": "\nIf the user has asked for tf=true&idf=true user implies give me both computation\nso the output would be\n<float name=\"display\">1.0</float>\nAh, so you are expecting Solr to do the computation tf*idf when you specify those two options, right?  My interpretations (and implmentation) is that it means return those two values in the response.  See http://wiki.apache.org/solr/TermVectorComponentExampleOptions\n\nI suppose we could add something like &tf-idf=true in which case Solr does the computation.  Otherwise, I think it is useful to be able to deliver them separately, as I think it gives the most flexibility.  Would adding a tf-idf option suit your needs?  Such that, when it is true, Solr returns that computation? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12642158",
            "date": "2008-10-23T13:31:51+0000",
            "content": "Added tf_idf calculation option.  I'm going to commit today. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12642191",
            "date": "2008-10-23T15:54:28+0000",
            "content": "Committed revision 707399. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12643226",
            "date": "2008-10-28T15:00:37+0000",
            "content": "Is there a reason that this component asks for the latest searcher from the core instead of getting the one bound to the SolrQueryRequest?  Assuming it's just a bug... patch attached. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12643270",
            "date": "2008-10-28T17:17:15+0000",
            "content": "Some random thoughts on this patch:\n\n\tAdding the uniqueKeyFieldName seems out of place.... it's just one element of the schema and it doesn't seem like it belongs in this component.\n\tHow about using the \"id\" as the key, as is done in other places like highlighting.\n  So instead of \n\n  <lst name=\"doc-170\">\n    <str name=\"uniqueKey\">3007WFP</str>\n    <lst name=\"cat\">\n\t<lst name=\"electronics\"/>\n\t<lst name=\"monitor\"/>\n   </lst>\n </lst>\n\n\nit could look like\n\n  <lst name=\"3007WFP\">\n    <lst name=\"cat\">\n\t<lst name=\"electronics\"/>\n\t<lst name=\"monitor\"/>\n   </lst>\n </lst>\n\n\n\tIt doesn't seem like we should link the ability to return term vectors with term vectors being stored.  Like highlighting, they should be used when available for speed, but stored fields should also be possible.  It's fine for the impl of that to wait, but perhaps the interface should support that via a tv.fl parameter.  update: just looked at the code again, and I see there is a tv.fl param.... so I guess the only discussion point is if the default is right (all fields with term vectors stored).\n\t\"idf\" actually isn't the idf, it's the doc freq that is being returned.  The label should probably be changed to \"df\"\n\tinstead of \"freq\", how about just using the shorter and well-known \"tf\"?\n\tthe docs say that tf_idf \"Calculates tf*idf for each term.\", but the code is actually returning \"freq\"/\"idf\" (but the idf is actually a df, so it is a straight tf * idf).  But this doesn't seem that useful because the user could trivially do tf/df themselves.  What would seem useful is to get the actual scoring tf-idf (via the Similarity).  For better language mappings, I think we should avoid dashes in parameter names too.... perhaps tv.tfidf or tv.tf_idf?\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12643289",
            "date": "2008-10-28T17:49:09+0000",
            "content": "\nIs there a reason that this component asks for the latest searcher from the core instead of getting the one bound to the SolrQueryRequest? Assuming it's just a bug... patch attached\n\nNope.  Go ahead and commit. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12643291",
            "date": "2008-10-28T17:58:09+0000",
            "content": "\n\n\tAdding the uniqueKeyFieldName seems out of place.... it's just one element of the schema and it doesn't seem like it belongs in this component.\n\tHow about using the \"id\" as the key, as is done in other places like highlighting.\n\n\nThat's fine.  I think my thinking was that by using a \"constant\" for the name, then one could ask explicitly for that property in the NamedList.  That is namedList.getVal(\"uniqueKey\");\n\n\nIt doesn't seem like we should link the ability to return term vectors with term vectors being stored. Like highlighting, they should be used when available for speed, but stored fields should also be possible. It's fine for the impl of that to wait, but perhaps the interface should support that via a tv.fl parameter. update: just looked at the code again, and I see there is a tv.fl param.... so I guess the only discussion point is if the default is right (all fields with term vectors stored).\n\nThat's reasonable.  We can open a separate issue for it if anyone wants it.\n\n\n\n\t\"idf\" actually isn't the idf, it's the doc freq that is being returned. The label should probably be changed to \"df\"\n\tinstead of \"freq\", how about just using the shorter and well-known \"tf\"?\n\tthe docs say that tf_idf \"Calculates tf*idf for each term.\", but the code is actually returning \"freq\"/\"idf\" (but the idf is actually a df, so it is a straight tf * idf). But this doesn't seem that useful because the user could trivially do tf/df themselves. What would seem useful is to get the actual scoring tf-idf (via the Similarity). For better language mappings, I think we should avoid dashes in parameter names too.... perhaps tv.tfidf or tv.tf_idf?\n\n\nAll fine as well.  I just added the tf*idf computation in as a based on Vaijanath's comments.  I'll update these and the wiki. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12646911",
            "date": "2008-11-12T14:37:51+0000",
            "content": "I committed:\n\nfreq -> tf\nidf -> df\ntf-idf -> tf_idf\n\nSee the Wiki page: http://wiki.apache.org/solr/TermVectorComponent "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775516",
            "date": "2009-11-10T15:51:43+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}