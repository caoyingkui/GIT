{
    "id": "LUCENE-4285",
    "title": "Improve FST API usability for mere mortals",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/FSTs"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "FST technology is something that has brought amazing advances to Lucene, yet the API is hard to use for the vast majority of users like me.  I know that performance of FSTs is really important, but surely a lot can be done without sacrificing that.\n\n(comments will hold specific ideas and problems)",
    "attachments": {
        "LUCENE-4285.patch": "https://issues.apache.org/jira/secure/attachment/12548224/LUCENE-4285.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-08-02T16:40:12+0000",
            "content": "Keep in mind, from an FST outsider like me, FSTs are basically a fancy SortedMap.  Yet Lucene's FST API is so complicated that there is a dedicated package of classes, and I need to understand a fair amount of it.  I'm not saying the package should go away or just one class is realistic, just that conceptually for outsiders it can and should be simpler than it is.\n\nThe Util.get* methods should have instance methods on the FST.  I shouldn't need to look at Util, I think.\n\nThe BytesReader concept is confusing and should be hidden.\n\nOutputs... this aspect of the API is over-exposed; maybe it can be hidden more?  I know I need to choose an implementation at construction.\n\nFSTEnum is pretty cool, and improving it or creating variants of it could help to simply using the overall API.  The FST should have a getter for it.  It would be nice if FSTEnum could advance to the next arc by a label (I need this).  It would be something like next(int).  Can it be improved to the point where, for example, SynonymFilter can use it?  It would be nice to reduce the use-cases where users/client-code don't have to even see an Arc. ",
            "author": "David Smiley",
            "id": "comment-13427435"
        },
        {
            "date": "2012-10-05T18:51:09+0000",
            "content": "I just found out that an FST builder.finish() returns null if there's no input basically.  That is bad API design; it should return an FST with nothing init.  For now I have to have littered null checks. ",
            "author": "David Smiley",
            "id": "comment-13470555"
        },
        {
            "date": "2012-10-05T18:57:19+0000",
            "content": "I rather like this: I don't think its common to have an empty FST, its usually indicative of a bug or misconfiguration.\n\nThere is also some code in lucene that uses this return value, e.g. SynonymFilterFactory, if you give it a file with no actual \nsynonyms entries it just returns the underlying stream rather than decorating it with a useless synonyms filter. ",
            "author": "Robert Muir",
            "id": "comment-13470560"
        },
        {
            "date": "2012-10-05T18:59:29+0000",
            "content": "That is bad API design; it should return an FST with nothing init.\n\n+1, this has also bit me ... null return is bad when it's surprising, as clearly it is here.\n\nSomehow we just need an FST that accepts nothing. ",
            "author": "Michael McCandless",
            "id": "comment-13470562"
        },
        {
            "date": "2012-10-05T19:30:34+0000",
            "content": "This is typically  done by making the root state follow an epsilon transition. If it points to a final state it means the automaton is empty and accepts epsilon (in other words, nothing).\n\nBut then it also adds overhead for every iteration which needs to skip over this epsilon transition... ",
            "author": "Dawid Weiss",
            "id": "comment-13470584"
        },
        {
            "date": "2012-10-05T19:38:11+0000",
            "content": "If the problem with null is that the documentation isn't loud enough, we can make it bold?\n\nIf the problem is people dont read build()'s javadocs and we think thats bad, another idea is to just\nthrow a checked exception: then there is no sneaky bugs caused by the change (unlike returning EMPTY, which\ncould easily introduce these). ",
            "author": "Robert Muir",
            "id": "comment-13470588"
        },
        {
            "date": "2012-10-05T19:45:40+0000",
            "content": "(I hate checked exceptions and think this would only be annoying for most users\n who will just let their IDE fill in a crappy try/catch with a System.out.println, but\n I'm just looking out for our own code here  ",
            "author": "Robert Muir",
            "id": "comment-13470595"
        },
        {
            "date": "2012-10-06T18:31:47+0000",
            "content": "I admit checked exceptions would have alerted me to my bug, but that doesn't make the API any nicer \u2013 I still need null checks littered through my FST user code now.  I don't know the FST internals but I'd be surprised to hear that adding support for an empty FST adds appreciable overhead.  If this \"overhead\" we're discussing is a simple conditional check, then this is net-zero since as it is I need these null checks on my end of the API due to my FST being potentially null. ",
            "author": "David Smiley",
            "id": "comment-13471081"
        },
        {
            "date": "2012-10-06T18:54:46+0000",
            "content": "Things are more difficult than they seem at the surface. An elegant solution would encode an empty automaton without any extra flags or checks. In an arc based representation there is simply no notion of an \"empty\" set of arcs though \u2013 there needs to be at least one and if it's present on the root state then, well, it's no longer an empty automaton. Like I said \u2013 this can be modeled with an initial state transition (the symbol doesn't matter); if this transition is final then this the automaton is empty (there is no actual root state). But this also changes how traversals are implemented and would affect all of the existing code. ",
            "author": "Dawid Weiss",
            "id": "comment-13471083"
        },
        {
            "date": "2012-10-08T11:15:51+0000",
            "content": "Patch, showing how we could use non-final-end-start arcs to do this: I\njust added a static Builder.getEmptyFST method.\n\nI think it's actually useful for Builder.finish to return null when\nnothing was added: it conveys information (and returning empty FST\nwould mask that).  EG SynonymFilterFactory uses this to bypass\ninserting a do-nothing (slowly) SynonymFilter. ",
            "author": "Michael McCandless",
            "id": "comment-13471498"
        },
        {
            "date": "2012-10-08T12:07:49+0000",
            "content": "For the record, I don't have anything against null returned for an empty automaton, I just mentioned how this representation is accomplished elsewhere (for instance here http://www.eti.pg.gda.pl/katedry/kiw/pracownicy/Jan.Daciuk/personal/fsa.html). ",
            "author": "Dawid Weiss",
            "id": "comment-13471514"
        }
    ]
}