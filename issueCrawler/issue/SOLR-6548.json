{
    "id": "SOLR-6548",
    "title": "Enable custom plugin types via configuration",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "I wanted to add a custom plugin type so that for a new request handler that uses different types of query generators it would be easy to add new query generators in the future through the plugin system, without having to touch the handler code.  To do so I wanted to add a \"queryGenerator\" plugin type.\n\nAs far as I can tell this is not possible without modifying the solr core code.\n\nAll of the available plugin types and corresponding names are hard-coded in the SolrConfig constructor \"public SolrConfig(SolrResourceLoader loader, String name, InputSource is)\" like:\n\n\n    loadPluginInfo(SolrRequestHandler.class,\"requestHandler\",\n                    REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK);\n     loadPluginInfo(QParserPlugin.class,\"queryParser\",\n                    REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK);\n     loadPluginInfo(QueryResponseWriter.class,\"queryResponseWriter\",\n                    REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK);\n     loadPluginInfo(ValueSourceParser.class,\"valueSourceParser\",\n                    REQUIRE_NAME, REQUIRE_CLASS, MULTI_OK);\n\n\n\nI propose adding these mappings to solrconfig.xml, or at least allow adding additional plugin type mappings there.\n\nThat way it would be easy to add new plugin types in the future, and users could create their own custom plugin types as needed.  Also if the default ones were solely defined in the list, they could then easily be overriden.\n\nAt first glance it seems like the change to enable this could be relatively simple. Adding a new \"plugin-types\" entry to the Solr configuration xml that has \"plugin-type\" entries each with a \"name\" and \"class\" sub-entry. \n\nThen the constructor would read this list from the config  and then call the  loadPluginInfo(pluginTypeClass, pluginTypeName, ...) method on each entry.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-14143351",
            "date": "2014-09-22T16:12:31+0000",
            "content": "I'm missing something fundemental to your suggestion here ... you have configuration to tell you what types of plugin configurations are supported? ... and then what?  loadPluginInfo creates a PluginInfo object corrisponding and what happens next? ... what piece of code does something with those PluginInfo objects?\n\ni don't understand how you can have user defined types of plugins w/o some code in solr knowing aout those types of plugins and invoking them. "
        },
        {
            "author": "Brian",
            "id": "comment-14143428",
            "date": "2014-09-22T17:04:47+0000",
            "content": "I guess it may not be as simple as I thought at first glance.\n\nAs of right now with only that change, for new custom types, it seems like the code for initializing them would have to go in the initialization code of the component that uses them.  I.e., it would be along the same lines as the code used in SolrCore to initialize the different components, e.g., \"initQParsers()\" in SolrCore gets all the plugin classes found in the SolrConfig having the QParser type and instantiates each.  \n\n\nHere's one way it could work:\nFor my custom request handler that makes use of the custom plugin type, in a SolrCoreAware inform method, it would get all the plugin classes defined in the SolrConfig extending the QueryGenerator plugin type, and based on which are specified in its parameters, it would instantiate an object of each QueryGenerator class as needed.  So the component that uses the custom plugin type could be responsible for instantiating and using them (the code could live there), which would still allow adding new types without any code changes to that component itself.\n\nI.e., say I wanted to add a new query generator type \"topic_based_generator\", then I would define \"topic_based_generator\" with a particular QueryGenerator class in solrconfig.xml with the class contained in a new jar I added to the library directory, like we do for custom query parsers.  The pluginInfo would get loaded by the SolrConfig constructor.  Then in the request handler definition in solrconfig.xml, I would list that type name \"topic_based_generator\" as one type that handler uses to generate queries.  Then in the initialization for the handler it would instantiate the correct QueryGenerator class that \"topic_based_generator\" mapped to.\n\nI.e., the handler would check info.name (from PluginInfo info) for the matching QueryGenerator PlugInfos it got from the SolrConfig for the one matching \"topic_based_generator\" then call solrCore.createInitInstance for that class to get the generator itself.\n "
        },
        {
            "author": "Brian",
            "id": "comment-14143437",
            "date": "2014-09-22T17:11:02+0000",
            "content": "A potential alternative that would require more change would be to genericize the SolrCore plugin initialization, instead of having a separate registry and corresponding look-up method for each type, make it so it was a registry for all types of plugins that need to be instantiated, and have a common look-up method. "
        },
        {
            "author": "Brian",
            "id": "comment-14143668",
            "date": "2014-09-22T19:34:47+0000",
            "content": "I guess what I specifically wanted to do is already possible, though maybe it is overly complex.  I could declare plugins of a custom type as child nodes in the xml definition for a known type (e.g., request handler), so long as the classes implement SolrInfoMBean.  This is following what the highlighting component does - it has a number of different \"fragmenter\" types each with a different class, and these get loaded as children PluginInfo of the highlighting component PluginInfo.  So during SolrCoreAware inform they can be read and instantiated from the passed-in PluginInfo, e.g., info.getChildren(\"highlighting\");\n\nI guess maybe one downside is the child plug-ins couldn't easily be shared between different handlers.\n\nI will close this issue - if needed a new one could always be opened.  "
        }
    ]
}