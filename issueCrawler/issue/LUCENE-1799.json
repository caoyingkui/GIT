{
    "id": "LUCENE-1799",
    "title": "Unicode compression",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/store"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "2.4.1",
        "resolution": "Unresolved",
        "status": "Reopened"
    },
    "description": "In lucene-1793, there is the off-topic suggestion to provide compression of Unicode data. The motivation was a custom encoding in a Russian analyzer. The original supposition was that it provided a more compact index.\n\nThis led to the comment that a different or compressed encoding would be a generally useful feature. \n\nBOCU-1 was suggested as a possibility. This is a patented algorithm by IBM with an implementation in ICU. If Lucene provide it's own implementation a freely avIlable, royalty-free license would need to be obtained.\n\nSCSU is another Unicode compression algorithm that could be used. \n\nAn advantage of these methods is that they work on the whole of Unicode. If that is not needed an encoding such as iso8859-1 (or whatever covers the input) could be used.",
    "attachments": {
        "LUCENE-1799_big.patch": "https://issues.apache.org/jira/secure/attachment/12450161/LUCENE-1799_big.patch",
        "LUCENE-1799.patch": "https://issues.apache.org/jira/secure/attachment/12449963/LUCENE-1799.patch",
        "LUCENE-1779.patch": "https://issues.apache.org/jira/secure/attachment/12450642/LUCENE-1779.patch",
        "Benchmark.java": "https://issues.apache.org/jira/secure/attachment/12450739/Benchmark.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-08-11T13:41:54+0000",
            "content": "I think right now this can be implemented as a delegating Directory. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12741868"
        },
        {
            "date": "2009-11-18T13:25:38+0000",
            "content": "Earwin, if implemented as a directory, we lose many of the advantages.\n\nFor example, if you are using BOCU-1, lets say with Hindi language, then according to the stats here: http://unicode.org/notes/tn6/#Performance\n\n\tyou can encode/decode BOCU-1 to/from UTF-16 more than twice as fast as you can UTF-8 to/from UTF-16 (for this language)\n\talso, resulting bytes are less than half the size of UTF-8 (for this language), yet sort order is still preserved, so it should work for term dictionary, etc.\n\n\n\nNote: I have never measured bocu performance in practice.\n\nI took a look at the flex indexing branch and this appears like this might be possible in the future thru a codec...  ",
            "author": "Robert Muir",
            "id": "comment-12779442"
        },
        {
            "date": "2009-11-18T16:10:23+0000",
            "content": "> Earwin, if implemented as a directory, we lose many of the advantages.\nDamn. I believed all strings pass through read/writeString() on IndexInput/Output. Naive. Well, one can patch UnicodeUtil, but the solution is no longer elegant.\nWaiting for flexible indexing, hoping it's gonna be flexible.. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12779510"
        },
        {
            "date": "2009-11-18T16:29:01+0000",
            "content": "Waiting for flexible indexing, hoping it's gonna be flexible.. \n\nit looked to me, at a glance that some things would still be wierd. like TermVectors aren't \"flexible\" yet, so wouldn't be BOCU-1.\nI do not know if in flexible indexing, it will be possible for a codec to change behavior like this... \nmaybe someone knows if this is planned eventually or not? ",
            "author": "Robert Muir",
            "id": "comment-12779513"
        },
        {
            "date": "2009-11-18T18:17:37+0000",
            "content": "The flex API will let you completely customize how the terms dict/index is encoded, but not yet term vectors. ",
            "author": "Michael McCandless",
            "id": "comment-12779571"
        },
        {
            "date": "2009-11-18T18:26:59+0000",
            "content": "pretty simple though, isnt it? Just pull the vector reader/writer from the codec as well? ",
            "author": "Mark Miller",
            "id": "comment-12779576"
        },
        {
            "date": "2009-11-18T18:27:14+0000",
            "content": "The flex API will let you completely customize how the terms dict/index is encoded, but not yet term vectors. \n\nThanks Mike! as far as the encoding itself, BOCU-1 is available in the ICU library, so we do not need to implement it and deal with the conformance/patent stuff\n(To get the royalty-free patent you must be \"fully compliant\", they have already done this).\n\nIf this feature is desired, I think something like a Codec in contrib that encodes the index with BOCU-1 from ICU would be the best. ",
            "author": "Robert Muir",
            "id": "comment-12779577"
        },
        {
            "date": "2009-11-18T18:30:29+0000",
            "content": "by the way, here are even more details on BOCU, including more in-depth size and performance, at least compared to the UTN:\nhttp://icu-project.org/repos/icu/icuhtml/trunk/design/conversion/bocu1/bocu1.html ",
            "author": "Robert Muir",
            "id": "comment-12779580"
        },
        {
            "date": "2009-11-18T19:11:07+0000",
            "content": "as far as the encoding itself, BOCU-1 is available in the ICU library\nICU's API requires to use ByteBuffer and CharBuffer for input/output. And even if I missed some nice method, encoder/decoder operates internally on said buffers. Thus, a wrap/unwrap for each String is inevitable. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12779602"
        },
        {
            "date": "2009-11-18T19:26:46+0000",
            "content": "ICU's API requires to use ByteBuffer and CharBuffer for input/output. And even if I missed some nice method, encoder/decoder operates internally on said buffers. Thus, a wrap/unwrap for each String is inevitable.\nEarwin, at least in ICU trunk you have the following (public class) in com.ibm.icu.impl.BOCU: \n\n\npublic static int compress(String source, byte buffer[], int offset)\npublic static int getCompressionLength(String source) \n...\n\n\n\nBut I think this class only supports encoding, not decoding (only used by Collation API for so called BOCSU).\nFor decoding, we might have to use registered charset and ByteBuffer... unless theres another way. ",
            "author": "Robert Muir",
            "id": "comment-12779621"
        },
        {
            "date": "2009-11-18T19:38:46+0000",
            "content": "Earwin, i do not really like this implementation either.\n\nSo it would be of course better to have something more suitable similar to UnicodeUtil, plus you could ditch the lib dependency.\nbut then i guess we have to deal with this patent thing... i do not really know what is involved with that. ",
            "author": "Robert Muir",
            "id": "comment-12779629"
        },
        {
            "date": "2009-11-18T21:51:50+0000",
            "content": "but then i guess we have to deal with this patent thing... i do not really know what is involved with that.\nCPAN holds BOCU-1 implementation, derived from \"Sample C code\", with all necessary copyrights and patent mentioned, but there's no word of them formally obtaining a license. I'm not sure if this is okay, or just overlooked. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12779682"
        },
        {
            "date": "2009-11-19T16:11:36+0000",
            "content": "The sample code is probably what is on this page, here:\n    http://unicode.org/notes/tn6/#Sample_Code\n\nFrom what I gather reading the whole page:\nIf we port the sample code and the test case and then provide demonstration that all test pass, then we will be granted a license.\n\nThere's contact info at the bottom of the page for getting the license. Maybe, contact them for clarification?\n\nAs the code is fairly small, I don't think it would be too hard to port. The trick is that the sample code appears to deal in 32-bit arrays and we'd probably want a byte[]. ",
            "author": "DM Smith",
            "id": "comment-12780129"
        },
        {
            "date": "2010-07-20T19:35:28+0000",
            "content": "attached is a simple prototype for encoding terms as BOCU-1\n\nSo while I don't think things like wildcard, etc will work due to the nature of BOCU-1, term and phrase queries should work fine, and it maintains UTF-8 order so sorting is fine, and range queries should work once we fix TermRangeQuery to use byte.\n\nthe impl is probably a bit slow (uses charset api) as its just for playing around.\n\nnote: I didnt check the box because of the patent thing, (not sure it even applies since i use the icu impl here), but either way i dont want to involve myself with that. ",
            "author": "Robert Muir",
            "id": "comment-12890407"
        },
        {
            "date": "2010-07-20T19:48:43+0000",
            "content": "For correctness of code: target.offset = buffer.arrayOffset() + buffer.position();\nBut for most cases position() will be 0, but this is quite often an error. If you use limit() you have to use position(), else its inconsistent. arrayOffset() gives the offset corresponding to position=0. And length should be remaining()(for example see payload contrib IdentityEncoder)\n\nAnd the default factory could be a singleton... ",
            "author": "Uwe Schindler",
            "id": "comment-12890411"
        },
        {
            "date": "2010-07-20T19:56:50+0000",
            "content": "Uwe, sure, if we were to implement this I wouldnt use NIO anyway though, like i said i dont plan on committing anything (unless somethign is figured out about the patent), but it might be useful to someone.\n\nI tested this on some hindi text:\n\n\n\nencoding\ntii\ntis\n\n\nutf-8\n60,205\n3,740,329\n\n\nbocu-1\n28,431\n2,168,407\n\n\n\n ",
            "author": "Robert Muir",
            "id": "comment-12890415"
        },
        {
            "date": "2010-07-20T19:58:20+0000",
            "content": "And one thing more, in the non-array case:\nbuffer.get(target.bytes, target.offset, limit); target's offset should be set to 0 on all write operations to bytesref (see UnicodeUtil.UTF16toUTF8WithHash()). Else the grow() before does not resize correct! ",
            "author": "Uwe Schindler",
            "id": "comment-12890416"
        },
        {
            "date": "2010-07-20T20:26:29+0000",
            "content": "Here the policed one \n\nIn my opinion something is better than nothing. The patents are not violated here, as we only use an abstract API and the string \"BOCU-1\". You can use the same code to encode in \"ISO-8859-1\". ",
            "author": "Uwe Schindler",
            "id": "comment-12890423"
        },
        {
            "date": "2010-07-20T20:29:00+0000",
            "content": "One more violation. Now its correct! ",
            "author": "Uwe Schindler",
            "id": "comment-12890425"
        },
        {
            "date": "2010-07-20T20:58:19+0000",
            "content": "Here a heavy reusing variant. ",
            "author": "Uwe Schindler",
            "id": "comment-12890439"
        },
        {
            "date": "2010-07-20T21:16:09+0000",
            "content": "The last one that could be used with any charset ",
            "author": "Uwe Schindler",
            "id": "comment-12890448"
        },
        {
            "date": "2010-07-21T07:07:29+0000",
            "content": "Here is a 100% legally valid implementation:\n\n\n\tLinking to icu4j-charsets is done dynamically by reflection. If you don't have ICU4J charsets in your classpath, the attribute throws explaining exception\n\tWe dont need to ship the rather large JAR file with Lucene just for this class\n\tWe dont have legal patent problems as we neither ship the API nor use it directly\n\tThe backside is that the Test simple prints a warning but passes, so the class is not tested until you install icu4j-charsets.jar. We can put the JAR file on hudson, so it can be used during nightly builds. Or we download it dynamically on build.\n\n\n\nI added further improvements to the encoder ittself:\n\n\tless variables\n\tcorrect error handling for encoding errors\n\tremove floating point from main loop\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-12890584"
        },
        {
            "date": "2010-07-21T09:03:31+0000",
            "content": "A new patch that completely separates the BOCU factory from the implementation (which moves to common/miscellaneous). This has the following advantages:\n\n\n\tYou can use any Charset to encode your terms. The javadocs should only note, that the byte[] order should be correct for range queries to work\n\tTheoretically you could remove the BOCU classes at all, one that wants to use, can simply get the Charset from ICUs factory and pass it to the AttributeFactory. The convenience class is still useful, especially if we can later natively implement the encoding without NIO (when patent issues are solved...)\n\tThe test for the CustomCharsetTermAttributeFactory uses UTF-8 as charset and verifies that the created BytesRefs have the same format like a BytesRef created using the UnicodeUtils.\n\tThe test also checks that encoding errors are bubbled up as RuntimeExceptions\n\n\n\nTODO:\n\n\n\tdocs\n\thandling of encoding errors configureable (replace with replacement char?)\n\tIf you want your complete index e.g. in ISO-8859-1, there should be also convenience methods that take CharSequences/char[] in the factory/attribute to quickly convert strings to BytesRefs like UnicodeUtil does - by this its possible to create TermQueries directly using e.g. ISO-8859-1 encoding.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-12890613"
        },
        {
            "date": "2010-07-21T09:24:09+0000",
            "content": "This is fabulous!  And a great example of what's now possible w/ the cutover to opaque binary terms w/ flex \u2013 makes it easy to swap out how terms are encoded.\n\nBOCU-1 is a much more compact encoding than UTF-8 for non-Latin languages.\n\nThis encoding would also naturally reduce the RAM required for the terms index and Terms/TermsIndex FieldCache (used when you sort by string field) as well, since Lucene just loads the [opaque] term bytes into RAM. ",
            "author": "Michael McCandless",
            "id": "comment-12890628"
        },
        {
            "date": "2010-07-21T11:53:53+0000",
            "content": "You can use any Charset to encode your terms. The javadocs should only note, that the byte[] order should be correct for range queries to work\n\nI don't think we should add support for any non-unicode character sets.\n\nIf you want your complete index e.g. in ISO-8859-1\n\nI am 100% against doing this. ",
            "author": "Robert Muir",
            "id": "comment-12890654"
        },
        {
            "date": "2010-07-21T12:18:10+0000",
            "content": "Is there any reason not to make BOCU-1 Lucene's default encoding?\n\nUTF8 penalizes non-english languages, and BOCU-1 does not, and it sounds like we expect little to no indexing or searching perf penalty (once we have a faster interface to BOCU1, eg our own private impl, like UnicodeUtil). ",
            "author": "Michael McCandless",
            "id": "comment-12890703"
        },
        {
            "date": "2010-07-21T12:23:34+0000",
            "content": "Is there any reason not to make BOCU-1 Lucene's default encoding?\n\nin my opinion, just IBM  But maybe we can make a strong implementation and they will approve it and give us a patent:\n\nhttp://unicode.org/notes/tn6/#Intellectual_Property\n\nUTF8 penalizes non-english languages, and BOCU-1 does not, and it sounds like we expect little to no indexing or searching perf penalty (once we have a faster interface to BOCU1, eg our own private impl, like UnicodeUtil).\n\nI'd like to play with swapping it in as the default, just to see what problems (if any) there are, and to make sure all queries are supported, etc. I can upload a new patch that does it this way and we can play. ",
            "author": "Robert Muir",
            "id": "comment-12890706"
        },
        {
            "date": "2010-07-21T12:42:25+0000",
            "content": "\n\n> Is there any reason not to make BOCU-1 Lucene's default encoding?\n\nin my opinion, just IBM \n\nBut... ICU's license is compatible w/ ASL (I think), and includes a working impl of BOCU-1, so aren't we in the clear here?  Ie we are free to take that impl, tweak it, add to our sources, and include ICU's license in our LICENSE/NOTICE? ",
            "author": "Michael McCandless",
            "id": "comment-12890709"
        },
        {
            "date": "2010-07-21T12:54:51+0000",
            "content": "But... ICU's license is compatible w/ ASL (I think), and includes a working impl of BOCU-1, so aren't we in the clear here? Ie we are free to take that impl, tweak it, add to our sources, and include ICU's license in our LICENSE/NOTICE?\n\nI dont know... personally i wouldnt feel comfortable committing something without getting guidance first. but we can explore the technicals with patches on this jira issue and not check the box and i think this is all ok for now. ",
            "author": "Robert Muir",
            "id": "comment-12890718"
        },
        {
            "date": "2010-07-22T11:29:46+0000",
            "content": "attached is a really really rough patch that sets bocu-1 as the default encoding.\n\nBeware: its a work in progress and a lot of the patch is auto-generated (eclipse) so some things need to be reverted.\n\nMost tests pass, the idea is to find bugs in tests etc that abuse bytesref/assume utf-8 encoding, things like that. ",
            "author": "Robert Muir",
            "id": "comment-12891099"
        },
        {
            "date": "2010-07-22T11:34:01+0000",
            "content": "btw that patch is huge because i just sucked in the icu charset stuff to have an implementation that works for testing... \n\nits not intended to ever be that way as we would just implement the stuff we need without this code, but it makes it easier to test since you dont need any external jars or muck with the build system at all. ",
            "author": "Robert Muir",
            "id": "comment-12891101"
        },
        {
            "date": "2010-07-27T21:38:09+0000",
            "content": "attached is a patch for the start of a \"BOCUUtil' with unicodeutil like methods.\n\nFor now i only implemented encode (and encodeWithHash):\n\nI generated random strings with _TestUtil.randomRealisticUnicodeString and benchmarked, and the numbers are stable.\n\n\n\n\nencoding\ntime to encode 20 million strings (ms)\nnumber of encoded bytes\n\n\nUTF-8\n1,757\n596,516,000\n\n\nBOCU-1\n1,968\n250,202,000\n\n\n\n\n\nSo I think we get good compression, and good performance close to UTF-8 for encode.\nI'll work on decode now. ",
            "author": "Robert Muir",
            "id": "comment-12892943"
        },
        {
            "date": "2010-07-27T23:01:06+0000",
            "content": "Slightly more optimized version of BOCU1 encode (but it's missing the hash variant). ",
            "author": "Michael McCandless",
            "id": "comment-12892975"
        },
        {
            "date": "2010-07-27T23:04:30+0000",
            "content": "Duh \u2013 that was some ancient wrong patch.  This one should be right! ",
            "author": "Michael McCandless",
            "id": "comment-12892976"
        },
        {
            "date": "2010-07-27T23:19:54+0000",
            "content": "Just inlines the 2-byte diff case. ",
            "author": "Michael McCandless",
            "id": "comment-12892985"
        },
        {
            "date": "2010-07-27T23:47:09+0000",
            "content": "Inlines/unwinds the 3-byte cases.  I think we can leave the 4 byte case as a for loop... ",
            "author": "Michael McCandless",
            "id": "comment-12892991"
        },
        {
            "date": "2010-07-28T00:06:17+0000",
            "content": "I ran tests, each one of Mike's optimizations speed up the encode...\n\nI think I agree with not unrolling the 4-byte, the \"diff\" from the previous character has to be > 187659 [0x2dd0b]\nthis is like pottery writings and oracle bone script... but the previous ones (2x, 3x) speed up CJK and other scripts and are very useful. ",
            "author": "Robert Muir",
            "id": "comment-12892995"
        },
        {
            "date": "2010-07-28T01:02:46+0000",
            "content": "removed some ifs for the positive unrolled cases. ",
            "author": "Robert Muir",
            "id": "comment-12893017"
        },
        {
            "date": "2010-07-28T12:11:00+0000",
            "content": "i optimized the surrogate case here, moving it into the 'prev' calculation.\nnow we are faster than utf-8 on average for encode.\n\n\n\n\nencoding\ntime to encode 20 million strings (ms)\nnumber of encoded bytes\n\n\nUTF-8\n1,756\n596,516,000\n\n\nBOCU-1\n1,724\n250,202,000\n\n\n\n ",
            "author": "Robert Muir",
            "id": "comment-12893150"
        },
        {
            "date": "2010-07-28T12:22:26+0000",
            "content": "oops, forgot a check in the surrogate case. ",
            "author": "Robert Muir",
            "id": "comment-12893158"
        },
        {
            "date": "2010-07-28T14:13:15+0000",
            "content": "here it is with first stab at decoder (its correct against random icu strings, but i didnt benchmark yet) ",
            "author": "Robert Muir",
            "id": "comment-12893185"
        },
        {
            "date": "2010-07-28T17:59:46+0000",
            "content": "I took a stab at benchmarking encoding speed only with some different languages.\nI encoded a word at a time (which happens at indexing time).\nI used some text from wikipedia in different languages: english, german, french, spanish, and chinese.\nI used WhitespaceAnalyzer for the first 4 and StandardAnalyzer for the chinese (but analysis speed is not measured.)\n\n\n\n\nencoding\nenglish\ngerman\nfrench\nspanish\nchinese\n\n\nUTF-8 size\n1888\n4550\n4875\n5123\n4497\n\n\nBOCU-1 size\n1888\n4610\n4995\n5249\n4497\n\n\nBOCU slowdown\n29%\n39%\n47%\n61%\n80%\n\n\n\n\n\nI suspect that the StandardAnalyzer is spitting out individual CJK chars, and hence the same size of BOCU-1 and UTF-8?\nI'll try and see if I can get SmartChineseAnalyzer working and re-run the chinese test. ",
            "author": "Yonik Seeley",
            "id": "comment-12893280"
        },
        {
            "date": "2010-07-28T18:19:27+0000",
            "content": "yonik, what were you benchmarking? I think you should benchmark overall indexing time, of which encode is just a blip (<1% of).\n\nand yes, since the start state is 0x40 the FIRST cjk char is a diff from 0x40, but any subsequent ones yield savings.\n\nin general you wont get much compression for chinese.. id say max 25%\nfor russian, arabic, hebrew, japanese it will do a lot better: max 40%\nfor indian languages you tend to get about 50%.\n\nI also dont know how you encoded word at a time, because i get quite different results. I focused a lot on 'single-byte diffs' to be fast (e.g. just subtraction) and I think i do a lot better for english than the 160% described in http://unicode.org/notes/tn6/\n\nFurthermore, utf-8 is a complete no-op for english, so being a compression algorithm that is only 29% slower than (byte) char is good in my book, but i dont measure 29% for english.\n\nI don't think there is any problem in encode speed at all. ",
            "author": "Robert Muir",
            "id": "comment-12893288"
        },
        {
            "date": "2010-07-28T18:24:24+0000",
            "content": "Yonik can you give more details about how you ran your tests?\n\nWas it an isolated string encoding test or does BOCU slow down overall indexing speed by 29%-80% (which would be hard to believe). ",
            "author": "Michael Busch",
            "id": "comment-12893292"
        },
        {
            "date": "2010-07-28T18:43:41+0000",
            "content": "Yonik can you give more details about how you ran your tests?\n\nI'm isolating encoding speed only (not analysis, not indexing, etc) of tokens in different languages.\nSo I took some text from wikipedia, analyze it to get a list of char[], then encode each char[] in a loop.  It's only the last step that is benchmarked to isolate the encode performance.  I'm certainly not claiming that indexing is n% slower. ",
            "author": "Yonik Seeley",
            "id": "comment-12893297"
        },
        {
            "date": "2010-07-28T18:53:13+0000",
            "content": "attached is my benchmark for english text.\n\nUTF-8: 15530ms\nBOCU-1: 15687ms\n\nNote, i use a Sun JVM 1.6.0_19 (64bit)\n\nYonik if you run this benchmark and find a problem with it / or its slower on your machine, let me know your configuration, because i dont see the results you do. ",
            "author": "Robert Muir",
            "id": "comment-12893302"
        },
        {
            "date": "2010-07-28T18:57:30+0000",
            "content": "in general you wont get much compression for chinese.. id say max 25%\n\nAh, OK.\nI just tried russian w/ whitespace analyzer used to split and did get a good size savings:\n\nUTF8_size=11056  BOCU-1_size=6810  BOCU-1_slowdown=32% ",
            "author": "Yonik Seeley",
            "id": "comment-12893306"
        },
        {
            "date": "2010-07-28T18:59:59+0000",
            "content": "Yonik, please see my issue.\n\nthe fact we can encode 100 million terms in 15 seconds, means any speed stuff is meaningless (though i still insist, something is wrong: either your benchmark, or it runs slower on your JDK or something (which we should try to improve) ",
            "author": "Robert Muir",
            "id": "comment-12893309"
        },
        {
            "date": "2010-07-28T19:03:36+0000",
            "content": "The char[] -> byte[] encode time is a miniscule part of indexing time.  And, in turn, indexing time is far less important than impact on search performance.  So... let's focus on the search performance here.\n\nMost queries are unaffected by the term encoding; it's only AutomatonQuery (= fuzzy, regexp, wildcard) that do a fair amount of decoding...\n\nNet/net BOCU1 sounds like an awesome win over UTF8. ",
            "author": "Michael McCandless",
            "id": "comment-12893312"
        },
        {
            "date": "2010-07-28T19:09:37+0000",
            "content": "I just insist there is no real difference between this and UTF-8 for encoding english... ",
            "author": "Robert Muir",
            "id": "comment-12893317"
        },
        {
            "date": "2010-07-28T19:31:28+0000",
            "content": "OK, I just tried Robert's Benchmark.java (i.e. fake english word encoding):\nUTF8=15731  BOCU-1=16961  (lowest of 5 diff runs)\n\nBut looking at the benchmark, it looks like the majority of the time could be just making random strings.\nI made a modified Benchmark.java that pulls out this string creation and only tests encoding performance.\nHere are my results:\n\nUTF8=2936 BOCU-1=4310\nIt turns out that making the random strings to encode took up 81% of the UTF8 time.\n\nSystem: Win7 64 bit, JVM=Sun 1.6.0_21 64 bit -server ",
            "author": "Yonik Seeley",
            "id": "comment-12893324"
        },
        {
            "date": "2010-07-28T19:42:09+0000",
            "content": "Thats good news, so we can encode 100 million strings in 4.3 seconds? \nI dont think we need to discuss performance any further, this is a complete non-issue. ",
            "author": "Robert Muir",
            "id": "comment-12893329"
        },
        {
            "date": "2010-07-28T19:42:34+0000",
            "content": "OK, hopefully the right Benchmark.java this time  ",
            "author": "Yonik Seeley",
            "id": "comment-12893330"
        },
        {
            "date": "2010-07-28T19:59:47+0000",
            "content": "Thats good news, so we can encode 100 million strings in 4.3 seconds? I dont think we need to discuss performance any further, this is a complete non-issue.\n\nWell... hopefully it's not an issue.\nThat should really be tested with real indexing when the time comes (micro-benchmarks can do funny things). ",
            "author": "Yonik Seeley",
            "id": "comment-12893339"
        },
        {
            "date": "2010-07-28T20:05:11+0000",
            "content": "\nWell... hopefully it's not an issue.\nThat should really be tested with real indexing when the time comes (micro-benchmarks can do funny things).\n\nits definitely not an issue no lucene indexer can do anything with 100 million strings in any reasonable time where this will matter.\n\ninstead most non-latin languages will be writing less bytes, causing less real i/o, using half the RAM at search time, etc which is way more dramatic.\n\nutf-8 is a non-option for our internal memory encoding, i'm suggesting bocu-1, but if you want to try to fight me all the way, then i'll start fighting for a reversion back to char[] instead... its at least less biased. ",
            "author": "Robert Muir",
            "id": "comment-12893343"
        },
        {
            "date": "2010-07-28T20:31:54+0000",
            "content": "Ummm, so you're against actually measuring any indexing performance decrease?  That's all I was suggesting. ",
            "author": "Yonik Seeley",
            "id": "comment-12893353"
        },
        {
            "date": "2010-07-28T20:39:18+0000",
            "content": "I dont think its measurable. 100 million strings in 4.3 seconds? this has no affect.\n\nkeep in mind, i fixed the analysis in 3.1 and doubled the speed of the default english indexing in solr, \nso if you want to improve indexing speed, i think you will be more successful looking at other parts of the code. ",
            "author": "Robert Muir",
            "id": "comment-12893357"
        },
        {
            "date": "2010-07-28T20:54:51+0000",
            "content": "so if you want to improve indexing speed, i think you will be more successful looking at other parts of the code.\n\nI have only been measuring performance at this point, and I haven't expressed an option about what defaults should be used.\nIf we convert to BOCU-1 as a default, and if UTF-8 remains an option, then I'd at least want to be able to document any trade-offs and when people should consider setting the encoding back to UTF-8. ",
            "author": "Yonik Seeley",
            "id": "comment-12893362"
        },
        {
            "date": "2010-07-28T21:15:10+0000",
            "content": "I have only been measuring performance at this point\n\nYou havent really been measuring performance, you have just been trying to pick a fight.\n\n\tany difference in encode has almost no effect on indexing speed, like i said, 100 million strings in 4.3 seconds?\n\tyou aren't factoring i/o nor ram into the equation for the writing systems (of which there are many) where this actually cuts terms to close half their size.\n\tsince this is a compression algorithm (and I'm still working on it), its vital to include these things, and not post useless benchmarks about whether it takes 2.9 or 4.3 seconds to encode 100 million strings, which nothing in lucene can do anything with in any short time anyway.\n\n\n\nI have a benchmark for UTF-8: and its that i have a lot of text that is twice as big on disk and causes twice as much io and eats up twice as much ram than it should. \nbocu-1 fixes that, and at the same time keeps ascii at a single-byte encoding (and other latin languages are very close).\nso everyone can potentially win. ",
            "author": "Robert Muir",
            "id": "comment-12893368"
        },
        {
            "date": "2010-07-28T21:40:07+0000",
            "content": "You havent really been measuring performance, you have just been trying to pick a fight.\n\nI'm sorry if it appeared that way, and apologize for anything I said to encourage that perception.\n\nI was genuinely surprised when you reported \"now we are faster than utf-8 on average for encode\", so I set out to benchmark it myself and report back.  In addition, I wanted to see what the encoding speed diff was for some different languages. ",
            "author": "Yonik Seeley",
            "id": "comment-12893381"
        },
        {
            "date": "2010-07-28T21:49:30+0000",
            "content": "I was genuinely surprised when you reported \"now we are faster than utf-8 on average for encode\", so I set out to benchmark it myself and report back. In addition, I wanted to see what the encoding speed diff was for some different languages.\n\nFor all of unicode yes, you just didnt pick a good variety of languages, or didnt tokenize them well (e.g. using an english tokenizer for chinese). \nI've been measuring against many, and i already checked the bigram (cjktokenizer) case to make sure that cjk was always smaller (its not much... e.g. 5 bytes instead of 6, but its better) ",
            "author": "Robert Muir",
            "id": "comment-12893386"
        },
        {
            "date": "2010-07-28T22:09:12+0000",
            "content": "by the way, to explain your results on french and german:\n\nsince the compression is a diff from the 'middle of the alphabet' (unicode block), an unaccented char, accented char, unaccented char combination will cause 2 2-byte diffs.\nin utf-8 encoding this sequence is 4 bytes, but in bocu it becomes 5.\n\nThe reason you experienced anything of measure is, I think because of whitespaceanalyzer (which i feel is a tad unrealistic)\nfor example, all the german stemmers do something with the umlauts (remove or substitute ue, oe, etc).\n\nIn general, lots of our analysis for lots of languages folds and normalizes characters in ways like this, that also serves to help the compression\nso I think if you used germananalyzer on the german text instead of whitespaceanalyzer, you wouldn't see much of size increase. ",
            "author": "Robert Muir",
            "id": "comment-12893391"
        },
        {
            "date": "2010-07-28T22:25:48+0000",
            "content": "\nBut looking at the benchmark, it looks like the majority of the time could be just making random strings.\nI made a modified Benchmark.java that pulls out this string creation and only tests encoding performance.\nHere are my results:\n\nUTF8=2936 BOCU-1=4310\n\nI think your benchmark isnt very reliable (i got really different results), so i added an extra 0 to do 10x more terms:\nchar[][] terms = new char[10000][];\n\nret=716132704 UTF-8 encode: 35081\nret=716132704BOCU-1 encode: 36517\n\nLike i said before, i don't see a 20% difference. ",
            "author": "Robert Muir",
            "id": "comment-12893398"
        },
        {
            "date": "2010-07-28T22:36:16+0000",
            "content": "I think your benchmark isnt very reliable (i got really different results), so i added an extra 0 to do 10x more terms:\n\nDid that change the ratio for you?  I just tried 10x more terms, and I got the exact same ratio:\n\nret=708532704 UTF-8 encode: 30524\nret=708532704BOCU-1 encode: 44635 ",
            "author": "Yonik Seeley",
            "id": "comment-12893403"
        },
        {
            "date": "2010-07-28T23:01:56+0000",
            "content": "yeah it did (it didnt seem 'stable' but the first run was much different than yours, e.g. 3300 vs 3500 or so).\n\nI just ran with -server also [using my same 64-bit 1.6.0_19 as before]:\nthere is more of a difference, however not as much as yours\nret=704032704 UTF-8 encode: 32134\nret=704032704BOCU-1 encode: 36391\n\nbut go figure, if i run with my 32-bit [same jdk: 1.6.0_19], i get horrible numbers!\nhere is -client\nret=684832704 UTF-8 encode: 26237\nret=684832704BOCU-1 encode: 54662\n\nhere is -server\nret=697132704 UTF-8 encode: 30062\nret=697132704BOCU-1 encode: 46293\n\nso there is definitely an issue with 32-bit jvm, sure yours is 64-bit? ",
            "author": "Robert Muir",
            "id": "comment-12893413"
        },
        {
            "date": "2010-07-29T00:52:57+0000",
            "content": "Hmmm, interesting.  I'm sure my JVM is 64 bit, and I just double-checked that the IDE is using that to launch the benchmark.  The differences we see might be down to CPU?\n\nHere's my 64 bit JVM I'm using:\njava version \"1.6.0_21\"\nJava(TM) SE Runtime Environment (build 1.6.0_21-b06)\nJava HotSpot(TM) 64-Bit Server VM (build 17.0-b16, mixed mode)\n\nAnd I just tried a 32 bit one (also -server) I had laying around:\njava version \"1.6.0_18\"\nJava(TM) SE Runtime Environment (build 1.6.0_18-b07)\nJava HotSpot(TM) Server VM (build 16.0-b13, mixed mode)\n\n32 bit results:\nret=713832704 UTF-8 encode: 35895\nret=713832704BOCU-1 encode: 55855 ",
            "author": "Yonik Seeley",
            "id": "comment-12893456"
        },
        {
            "date": "2010-11-15T21:28:14+0000",
            "content": "Returning to this issue, right now the best place for this functionality seems to be a variant of CharTermAttribute? ",
            "author": "Earwin Burrfoot",
            "id": "comment-12932206"
        },
        {
            "date": "2010-11-15T21:28:51+0000",
            "content": ".. and not the Codec, as was suggested in the beginning. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12932207"
        },
        {
            "date": "2011-02-06T16:29:34+0000",
            "content": "Any idea as to when this will be released? ",
            "author": "DM Smith",
            "id": "comment-12991170"
        },
        {
            "date": "2012-03-06T14:49:50+0000",
            "content": "Would someone be able to champion this. It appears ready to go. for the last 1.5 years. Looks like it is merely a permission problem. I'd like to see it get in the 3.x series. ",
            "author": "DM Smith",
            "id": "comment-13223294"
        },
        {
            "date": "2013-11-30T13:16:41+0000",
            "content": "2013 Old JIRA cleanup ",
            "author": "Erick Erickson",
            "id": "comment-13835691"
        }
    ]
}