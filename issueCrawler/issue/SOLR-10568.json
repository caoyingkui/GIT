{
    "id": "SOLR-10568",
    "title": "Automate HTML builds via Jenkins to occur with each commit",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "documentation"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "7.0",
            "7.1",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spin-off from SOLR-10295.\n\nThe idea is to use a mechanism (possibly gitpubsub and/or svnpubsub?) so Jenkins builds of HTML format of the Ref Guide occur as soon as commits are made to any non-released branch.\n\nThis would allow any committer to see doc changes ASAP after a commit to verify the presentation of the information is as expected.",
    "attachments": {
        "SOLR-10568.patch": "https://issues.apache.org/jira/secure/attachment/12877355/SOLR-10568.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-26T17:12:05+0000",
            "content": "The idea is to use a mechanism (possibly gitpubsub and/or svnpubsub?) so Jenkins builds of HTML format of the Ref Guide occur as soon as commits are made to any non-released branch.\n\nDo we really need any special publishing \"mechanism\" here?\n\nAssuming we have a jenkins job(s) building the ref guide for \"unreleased\" versions/branches (based on a git change trigger), and we want developers to be able to review the output, can't we just use the \"lastStable\" artifacts URLs to serve them?\n\nExample: here's the Changes.html file served from jenkins for the last stable build of the 6.x artifacts jenkins job...\n\nhttps://builds.apache.org/job/Lucene-Artifacts-6.x/lastStableBuild/artifact/lucene/dist/changes/Changes.html\n\n...we could serve the unreleased HTML or PDF versions of the ref guide from similar URLs, which owuld always update anytime there is a successful build)\n\n(this isn't a general purpose solution for publishing content/code, but for the purpose of developers reviewing the generated output of recently committed changes \u2013 that's pretty much exactly what jenkins \"artifacts\" hosting is for) ",
            "author": "Hoss Man",
            "id": "comment-15985170"
        },
        {
            "date": "2017-04-26T19:11:20+0000",
            "content": "I didn't explain it all very well in my initial description, maybe. I filed this to discuss some of what Jan proposed in his dream scenario:\n\nhttps://issues.apache.org/jira/browse/SOLR-10295?focusedCommentId=15930934&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15930934\n\n\nI would fully automate the build and publishing of the various versions of the HTML ref-guide though a new bot. The bot would watch git commits, build the HTML guide and publish it.\n\nI think http://lucene.apache.org/solr/guide/ would be a great landing page for the guide. It would be a page highlighting the latest official released guide, as well as linking to historic versions and also, less prominently, unreleased versions, such as master, branch_6x, branch_6_4 etc. This landing page could even be an SPA with auto generated links based on info we already have in DOAP and git. So we would have\n\n\nhttp://lucene.apache.org/solr/guide/ (main landing page)\nhttp://lucene.apache.org/solr/guide/6_5/ (built from branch_6_5, this way we can release bugfixes simply by committing to the branch)\nhttp://lucene.apache.org/solr/guide/branch_6x/ (build from branch_6x, next feature version to be released)\nhttp://lucene.apache.org/solr/guide/master/ (build from master, next major version to be released)\nhttp://lucene.apache.org/solr/guide/7_0/ (the permlink for Solr7 once it is released)\n...\n\n\n\nSo the bot (some script we write but Infra hosts) will \n\n\tmonitor every lucene-solr git commit\n\tif branch in not master, or a release branch, or if commit does not modify refguide, then exit\n\tcheckout the branch\n\tbuild ref-guide using ant, jekyll etc\n\tpublish the resulting guide to the website under correct sub folder (see above).\n\t\n\t\tAlternatively, publish to some other place such as www.solr-guide.com or wherever we want really.\n\t\n\t\n\tif JIRA issue mentioned in commit message, also add a comment to the JIRA issue with a link to the newly built version of the guide.\n\t\n\t\tCould even generate a list of deep-links to the individual guide pages changed by the commit, for easier review.\n\t\n\t\n\tif the build of the refguide fails, then post to the JIRA issue a relevant error message\n\n\n\nThis led to the discussion in SOLR-10295 about gitsubpub, to automate building on every commit and publishing. ",
            "author": "Cassandra Targett",
            "id": "comment-15985388"
        },
        {
            "date": "2017-04-26T19:25:15+0000",
            "content": "\nAssuming we have a jenkins job(s) building the ref guide for \"unreleased\" versions/branches (based on a git change trigger), and we want developers to be able to review the output, can't we just use the \"lastStable\" artifacts URLs to serve them?\n[...]\n ...we could serve the unreleased HTML or PDF versions of the ref guide from similar URLs, which owuld always update anytime there is a successful build)\n\n+1 \n\nI'll explore creating a Jenkins job (hosted on the ASF Jenkins nodes dedicated to website building) to build all forms of the unreleased guide.  We can then decide about triggering separately, but initially a periodic trigger, at least once a day I think, should be fine. ",
            "author": "Steve Rowe",
            "id": "comment-15985417"
        },
        {
            "date": "2017-04-26T19:27:23+0000",
            "content": "I agree with Hoss here. It is quite easy to instruct ASF Jenkins to run on every commit in a branch of SVN or GIT. No need for svbpubsub or anything. The results of a Jenkins run can be declared as \"release artifacts\" (a PDF file) and Jenkins copies them away and also archives them. So we have an archive of PDF files. If HTML is created it can be handled like \"Javadocs\". E.g. the Release documents of Lucene and Solr are a whole Website structure including custom HTML pages, but it is just marked as \"Javadocs\" in Jenkins builds - so published automatically. ",
            "author": "Uwe Schindler",
            "id": "comment-15985420"
        },
        {
            "date": "2017-04-26T19:30:21+0000",
            "content": "publish the resulting guide to the website under correct sub folder (see above).\n\nI don't think we should automatically publish any form of the released guide, even if some forms aren't voted on (like HTML).\n\nBy contrast, I'm fine with automatic \"publishing\" of the unreleased guide, as long as the location is not advertized to end users.  As Hoss points out, Jenkins could easily serve as both the build site and hosting site. ",
            "author": "Steve Rowe",
            "id": "comment-15985425"
        },
        {
            "date": "2017-04-26T19:45:50+0000",
            "content": "+1 ",
            "author": "Uwe Schindler",
            "id": "comment-15985455"
        },
        {
            "date": "2017-04-28T02:11:44+0000",
            "content": "I set up a Jenkins job to run daily: https://builds.apache.org/job/Solr-reference-guide-jira-SOLR-10290/\n\nI had to do a run of just ant ivy-bootstrap to populate ~/.ant/lib/ivy-2.3.0.jar.  Also the H19 node doesn't have jekyll on the path, so I copied most of the following from the https://builds.apache.org/job/PredictionIO-build-site job that runs on the same git-websites label (including H19 and H20 nodes at present) to install Ruby and the required gems under the jenkins account's home dir - this is the script that the job runs:\n\n\nexport RUBY_PATH=~/shared/.rvm\nexport GEM_HOME=${RUBY_PATH}/gems\ncurl -sSL https://get.rvm.io | bash -s -- --path ${RUBY_PATH}\nmkdir -p ${GEM_HOME}/gems\ngem install --install-dir ${GEM_HOME} jekyll jekyll-asciidoc pygments.rb\nexport PATH=${GEM_HOME}/bin:$PATH\ncd solr/solr-ref-guide\nant clean build-pdf build-site\n\n\n\nThe latest successfully built HTML: https://builds.apache.org/job/Solr-reference-guide-jira-SOLR-10290/lastSuccessfulBuild/artifact/solr/build/solr-ref-guide/html-site/apache-solr-reference-guide.html\n\nThe latest successfully built PDF: https://builds.apache.org/job/Solr-reference-guide-jira-SOLR-10290/lastSuccessfulBuild/artifact/solr/build/solr-ref-guide/apache-solr-ref-guide-7.0.pdf\n\nTomorrow I'll set it up to email the dev list if the build has a problem - currently no email is sent. ",
            "author": "Steve Rowe",
            "id": "comment-15988057"
        },
        {
            "date": "2017-04-28T15:22:38+0000",
            "content": "Nice work, Steve - thanks! ",
            "author": "Cassandra Targett",
            "id": "comment-15988993"
        },
        {
            "date": "2017-04-28T15:24:16+0000",
            "content": "Tomorrow I'll set it up to email the dev list if the build has a problem - currently no email is sent.\n\nFailure emails will now be sent to the dev list. ",
            "author": "Steve Rowe",
            "id": "comment-15988996"
        },
        {
            "date": "2017-05-11T21:28:35+0000",
            "content": "Steve Rowe - Now that the ref guide is on master, we should change up the job https://builds.apache.org/job/Solr-reference-guide-jira-SOLR-10290/ to run from master?\n\nDid we decide what to do about the branches? Do we need a job for each branch?\n\nedit: also, it seems that build isn't pulling from the repo properly...the last good build is from today, but the console output shows build errors that Hoss and I have definitely fixed, and the sha is from 27 April (49c92bf0) ",
            "author": "Cassandra Targett",
            "id": "comment-16007230"
        },
        {
            "date": "2017-05-11T21:33:13+0000",
            "content": "Steve Rowe - Now that the ref guide is on master, we should change up the job https://builds.apache.org/job/Solr-reference-guide-jira-SOLR-10290/ to run from master?\n\nYeah, I'll clone that one into a new job \"Solr-reference-guide-master\" and change the branch accordingly in the job config, then remove the original job (I seem to recall that renaming Jenkins jobs is problematic).\n\nDid we decide what to do about the branches? Do we need a job for each branch?\n\nWe have a job for each active branch for unit tests, and I think it makes sense to do the same for the ref guide.\n\nalso, it seems that build isn't pulling from the repo properly...the last good build is from today, but the console output shows build errors that Hoss and I have definitely fixed, and the sha is from 27 April (49c92bf0)\n\nI'll investigate. ",
            "author": "Steve Rowe",
            "id": "comment-16007238"
        },
        {
            "date": "2017-05-11T22:20:31+0000",
            "content": "I'll clone that one into a new job \"Solr-reference-guide-master\" and change the branch accordingly in the job config, then remove the original job (I seem to recall that renaming Jenkins jobs is problematic).\n\nDone: https://builds.apache.org/job/Solr-reference-guide-master/ . I deleted the jira/solr-10290 branch job.\n\nalso, it seems that build isn't pulling from the repo properly...the last good build is from today, but the console output shows build errors that Hoss and I have definitely fixed, and the sha is from 27 April (49c92bf0)\n\nI changed the git repo from https://git-wip-us.apache.org/repos/asf/lucene-solr.git to git://git.apache.org/lucene-solr.git, the latter of which is used by some (all?) of the other Lucene/Solr ASF Jenkins jobs.  I think these are usable interchangeably, but maybe not?\n\nAlso, in the Advanced section for the git repository, the Refspec was configured as +refs/heads/master:refs/remotes/origin/master (I cloned the original job from one of the existing ones on the git-websites label, and I must have forgotten to unfurl the Advanced section, so didn't notice this).  <== I'm guessing this was the problem, but I'm not sure.\n\nAnyway, I manually built the new job, and it succeeded after pulling the most recent master commit (2f6700972). ",
            "author": "Steve Rowe",
            "id": "comment-16007298"
        },
        {
            "date": "2017-05-12T12:44:58+0000",
            "content": "Awesome, thanks Steve. Once this is in branch_6x, I hope you will help us again by setting up a job for that too  ",
            "author": "Cassandra Targett",
            "id": "comment-16008059"
        },
        {
            "date": "2017-05-12T17:53:10+0000",
            "content": "Once this is in branch_6x, I hope you will help us again by setting up a job for that too\n\nDone: https://builds.apache.org/job/Solr-reference-guide-6.x/\n\nI tried to make a branch_6_6 version of the job (https://builds.apache.org/job/Solr-reference-guide-6.6/) but it is refusing to checkout the latest commit on the branch.  I created a JIRA to gain access to the VM where the job runs to see if I can figure out what's going on: https://issues.apache.org/jira/browse/INFRA-14143.  In the meantime, I've disabled the job. ",
            "author": "Steve Rowe",
            "id": "comment-16008475"
        },
        {
            "date": "2017-05-12T19:41:27+0000",
            "content": "Chris Lambertus offered to help troubleshoot the 6.6 job issue on INFRA-14143, but declined to provide me access to those general (non-project-specific) build slaves.  I manually kicked off the 6.6 job and it succeeded!  Maybe there was something weird about the squash merge commit or something?\n\nFYI because of changes Uwe instigated, the HTML format is no longer under latest successful build artifacts, but are instead available from the \"Document\" link from the job's landing page, pointing to a \".../javadocs/\" page, e.g. for the 6.6 job: https://builds.apache.org/job/Solr-reference-guide-6.6/javadoc/. ",
            "author": "Steve Rowe",
            "id": "comment-16008620"
        },
        {
            "date": "2017-06-22T14:34:04+0000",
            "content": "I think we can disable the 6_6 builds now, Steve Rowe.\n\nAlso, I wonder if we could increase the frequency of the builds to at least every hour for all jobs on each branch? It only takes a few minutes to build so it could be more frequent, particularly on master and any branch we're hoping to release somewhat soon.\n\nI think after that we can resolve this and just communicate needs for builds the way we do for the full Lucene/Solr packages (via the list). ",
            "author": "Cassandra Targett",
            "id": "comment-16059466"
        },
        {
            "date": "2017-06-22T15:58:09+0000",
            "content": "I think we can disable the 6_6 builds now, Steve Rowe.\n\nDone.\n\nAlso, I wonder if we could increase the frequency of the builds to at least every hour for all jobs on each branch?\n\nI set frequency to @hourly on Solr-reference-guide-6.6, Solr-reference-guide-6.x, and Solr-reference-guide-master. ",
            "author": "Steve Rowe",
            "id": "comment-16059576"
        },
        {
            "date": "2017-07-10T20:07:25+0000",
            "content": "I think we're done with this. Set the assignee to Steve since he did all the work  ",
            "author": "Cassandra Targett",
            "id": "comment-16081005"
        },
        {
            "date": "2017-07-13T23:50:45+0000",
            "content": "Reopening to describe Jenkins build modifications required as a result of version incompatibilities. ",
            "author": "Steve Rowe",
            "id": "comment-16086617"
        },
        {
            "date": "2017-07-14T00:14:42+0000",
            "content": "Yesterday the Jenkins jobs to build the ref guide stopped working, apparently because of version incompatibilities between the RVM (Ruby Version Manager), the system ruby version, and the gems used (jekyll, jekyll-asciidoc, and pygments.rb).  See dev list thread https://lists.apache.org/thread.html/4b1e483db65dbafff682c40878057380617f7a514da902b0f6b8bb92@%3Cdev.lucene.apache.org%3E for more information.\n\nI've re-enabled the ref guide building jobs for master, branch_7x and branch_7_0, and all three have since succeeded.\n\nDetails follow.\n\nI modified the shell script embedded in the Jenkins jobs' configuration that performs the build so versions are pinned as follows:\n\n\n\tRVM: the one labeled \"stable\"\n\tRuby: 2.3.3\n\tjekyll gem: 3.5.0\n\tjekyll-asciidoc gem: 2.1.0\n\tpygments.rb gem: 1.1.2\n\n\n\nThe RVM documentation is not well connected, so it took me a while to figure out the necessary incantations - the original version of the script was cargo-culted from another build (see comment above: https://issues.apache.org/jira/browse/SOLR-10568?focusedCommentId=15988057&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15988057).  Some notable changes: \n\n\n\tSwitch RVM's single-user install dir from ~/shared/.rvm/ to ~/.rvm/ - some stuff didn't work with a non-default install dir.\n\tInstall RVM's \"stable\" version instead of the default (\"master\").\n\tDisable RVM's \"autolibs\" functionality; without this change, RVM will refuse to do a single-user install.\n\tInstall a non-system Ruby in ~/.rvm.\n\tCreate and use an RVM \"gemset\", which is a combination of an RVM ruby version and a set of gems installed with it.\n\tInvoke gem install once for each gem, so that its version can be specified.\n\tUse the --force parameter with gem install, to ignore dependency conflicts.  Without this change, gem install fails when installing the jekyll gem, because listen's executable \"listen\" conflicts with sass-listen.\n\n\n\nHere's the final script:\n\nedit: cleaned up the script a bit \n\n\n#!/usr/bin/env bash\nset -x                                   # Echo commands to the console\nset -e                                   # Fail the script if any command fails\n\nRVM_PATH=$HOME/.rvm\nRUBY_VERSION=ruby-2.3.3\nGEMSET=solr-refguide-gemset\n\n# Install the \"stable\" RVM release to ~/.rvm/, and don't mess with .bash_profile etc.\n\\curl -sSL https://get.rvm.io | bash -s -- --ignore-dotfiles stable\n\nset +x                                   # Temporarily disable command echoing to reduce clutter\n\nfunction echoRun() {\n    local cmd=\"$1\"\n    echo \"Running '$cmd'\"\n    $cmd\n}\n\nechoRun \"source $RVM_PATH/scripts/rvm\"   # Load RVM into a shell session *as a Bash function*\nechoRun \"rvm autolibs disable\"           # Enable single-user mode\nechoRun \"rvm install $RUBY_VERSION\"      # Install Ruby \nechoRun \"rvm gemset create $GEMSET\"      # Create this project's gemset\nechoRun \"rvm $RUBY_VERSION@$GEMSET\"      # Activate this project's gemset\n\n# Install gems in the gemset.  Param --force disables dependency conflict detection.\nechoRun \"gem install --force --version 3.5.0 jekyll\"\nechoRun \"gem install --force --version 2.1.0 jekyll-asciidoc\"\nechoRun \"gem install --force --version 1.1.2 pygments.rb\"\n\ncd solr/solr-ref-guide\n\nset -x                                   # Re-enable command echoing\nant clean build-site build-pdf\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16086636"
        },
        {
            "date": "2017-07-14T18:14:12+0000",
            "content": "Reopening to commit the Jenkins shell script to dev-tools/scripts/ (thanks Hoss Man for the suggestion). ",
            "author": "Steve Rowe",
            "id": "comment-16087724"
        },
        {
            "date": "2017-07-14T18:14:59+0000",
            "content": "Patch with the same script as the above comment, with a license header and a description added.\n\nCommitting shortly. ",
            "author": "Steve Rowe",
            "id": "comment-16087726"
        },
        {
            "date": "2017-07-14T18:17:53+0000",
            "content": "Commit 31e1a8584b57676b2af396e8991821354809c7d0 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=31e1a85 ]\n\nSOLR-10568: Add Jenkins script to download and locally install the software needed to build the Solr ref guide, and then build it. ",
            "author": "ASF subversion and git services",
            "id": "comment-16087732"
        },
        {
            "date": "2017-07-14T18:17:55+0000",
            "content": "Commit 15e3e22f090419ecff8b56bcf6a1b418cd730940 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=15e3e22 ]\n\nSOLR-10568: Add Jenkins script to download and locally install the software needed to build the Solr ref guide, and then build it. ",
            "author": "ASF subversion and git services",
            "id": "comment-16087733"
        },
        {
            "date": "2017-07-14T18:19:18+0000",
            "content": "Commit af79b49042b2894ddcb5533a353897d608a1917b in lucene-solr's branch refs/heads/branch_7_0 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=af79b49 ]\n\nSOLR-10568: Add Jenkins script to download and locally install the software needed to build the Solr ref guide, and then build it. ",
            "author": "ASF subversion and git services",
            "id": "comment-16087736"
        },
        {
            "date": "2017-07-14T18:39:52+0000",
            "content": "Commit 60fd4f291a6da7b37b17cef8f6c00725bbda8fa1 in lucene-solr's branch refs/heads/branch_7_0 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=60fd4f2 ]\n\nSOLR-10568: Add gpg key import note to the Jenkins script ",
            "author": "ASF subversion and git services",
            "id": "comment-16087767"
        },
        {
            "date": "2017-07-14T18:39:53+0000",
            "content": "Commit b22a28d259a5ca7f28426702eaf55fa1549779e8 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b22a28d ]\n\nSOLR-10568: Add gpg key import note to the Jenkins script ",
            "author": "ASF subversion and git services",
            "id": "comment-16087768"
        },
        {
            "date": "2017-07-14T18:39:55+0000",
            "content": "Commit 65cc88de7ded52dd606cb7f0b01057c4e70ea568 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=65cc88d ]\n\nSOLR-10568: Add gpg key import note to the Jenkins script ",
            "author": "ASF subversion and git services",
            "id": "comment-16087769"
        },
        {
            "date": "2017-10-17T11:04:02+0000",
            "content": "Bulk close after 7.1.0 release ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16207414"
        }
    ]
}