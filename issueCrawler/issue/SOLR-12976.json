{
    "id": "SOLR-12976",
    "title": "Unify RedactionUtils and metrics hiddenSysProps settings",
    "details": {
        "type": "Improvement",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [
            "security"
        ],
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "System properties can contain sensitive data, and they are easily available from the Admin UI (/admin/info/system) and also from the Metrics API (/admin/metrics).\n\nBy default the /admin/info/system redacts any sys prop with a key containing password. This\u00a0can be configured with sysprop -Dsolr.redaction.system.pattern=<regex>\n\nThe metrics API by default hides these sysprops from the API output:\n\n    \"javax.net.ssl.keyStorePassword\",\n    \"javax.net.ssl.trustStorePassword\",\n    \"basicauth\",\n    \"zkDigestPassword\",\n    \"zkDigestReadonlyPassword\"\n\n\nYou can redefine these by adding a section to solr.xml: (https://lucene.apache.org/solr/guide/7_5/metrics-reporting.html#the-metrics-hiddensysprops-element)\n\n<metrics>\n <hiddenSysProps>\n   <str>foo</str>\n   <str>bar</str>\n   <str>baz</str>\n </hiddenSysProps>\n</metrics>\n\nUnifying the two\n\nIt is not very user firiendly to have two different systems for redacting system properties and two sets of defaults.\u00a0This goals of this issue are\n\n\tKeep only one set of defaults\n\tBoth metrics and system info handler will use the same source\n\tIt should be possible to change and persist the list without a full cluster restart, preferably though some API\n\n\n\nNote that the solr.redaction.system.pattern property is not documented in the ref guide, so this Jira should also fix documentation!",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16679673",
            "content": "Here's a plan:\n\n\tDeprecate solr.xml setting metrics/hiddenSysProps\n\tAdd a new solr.xml top-level tag\n\t\n\t\t<str name=\"hiddenSysPropsPattern\">mypattern</str>\n\t\tThis can be used to change the defaults by configuration and will work for\u00a0non-cloud\n\t\n\t\n\tLet\u00a0RedactionUtils initialize\u00a0the default regex from solr.xml, and if not set, fallback to .*password.*|basicauth\n\tSolrDispatchFilter#setupJvmMetrics will use RedactionUtils when choosing what props to register for system/properties\n\tProperty solr.redaction.system.pattern will still be supported,\u00a0and work as before, i.e. replacing the\u00a0defaults from solr.xml\n\n\n\nTo support API editable pattern:\n\n\tDefine a new cluster property hiddenSysPropsPattern that can be set with zkcli and lives in zookeeper\n\tRedactionUtils will (in cloud mode) read the new cluster property and update its regex accordingly\n\t\n\t\tWhenever a change is detected, then the system/properties gauge must be re-registered with metricsManager\n\t\n\t\n\n\n\nAndrzej Bialecki  ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-11-08T12:15:59+0000"
        },
        {
            "id": "comment-16679725",
            "content": "If we deprecate metrics/hiddenSysProps in 7.6 and document this in CHANGES, then we can remove it in 8.0, and just print a warning in logs if we find this setting. ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-11-08T12:59:34+0000"
        },
        {
            "id": "comment-16680372",
            "content": "Hiding system props from someone who can use the admin UI is a bit complicated. The UI page is not the only way to find the value of a system property if you know the key. Without\u00a0thinking too hard I can think of at least 2-3 ways aside from metrics and the UI page to discover the value of a system property. I'm concerned that this UI hiding creates a false sense of security, especially since the keys will still be listed so that they can be gleaned elsewhere. ",
            "author": "Gus Heck",
            "date": "2018-11-08T20:56:00+0000"
        },
        {
            "id": "comment-16680583",
            "content": "Valid point. If you know of more Solr APIs that expose system properties then please share so we can include them in the design.\n\nOf course if you have shell access to the server and can see the command line, you will see them all. But this issue is for protecting the APIs (and thus also the UI).\n\nIn metrics API the whole property is hidden. We could also do that in /admin/info/system for consistency. It does not help much for a user to see the text -REDACTED- except when explicitly checking to see if some prop is set. Perhaps an alternative for the UI is to display a text below the properties saying \"Some properties were hidden\" ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-11-08T23:28:05+0000"
        },
        {
            "id": "comment-16680873",
            "content": "Of the top of my head:\n\n\tAdd a field to a schema via the schema api that has a value ${java.version} for the field name or default value (name tested, definately works) Any query returning a document with the field or api call listing fields may expose the result\n\tConfigure at type in schema.xml via the api with an attribute that's not too sensitive\u00a0\n\n{\n  \"add-field-type\" : {\n     \"name\":\"myNewTxtField\",\n     \"class\":\"solr.TextField\",\n     \"positionIncrementGap\":\"100\",\n     \"analyzer\" : {\n        \"charFilters\":[{\n           \"class\":\"solr.PatternReplaceCharFilterFactory\",\n           \"replacement\":\"${java.version}\",\n           \"pattern\":\"([a-zA-Z])\\\\\\\\1+\" }],\n        \"tokenizer\":{\n           \"class\":\"solr.WhitespaceTokenizerFactory\" },\n        \"filters\":[{\n           \"class\":\"solr.WordDelimiterFilterFactory\",\n           \"preserveOriginal\":\"0\" }]}}\n}\n\nand then request the schema from the API\n      {\n        \"name\":\"myNewTxtField\",\n        \"class\":\"solr.TextField\",\n        \"positionIncrementGap\":\"100\",\n        \"analyzer\":{\n          \"charFilters\":[{\n              \"class\":\"solr.PatternReplaceCharFilterFactory\",\n              \"pattern\":\"([a-zA-Z])\\\\\\\\1+\",\n              \"replacement\":\"1.8.0_144\"}],\n          \"tokenizer\":{\n            \"class\":\"solr.WhitespaceTokenizerFactory\"},\n          \"filters\":[{\n              \"class\":\"solr.WordDelimiterFilterFactory\",\n              \"preserveOriginal\":\"0\"}]}},\n\n\n\n\n\n\tI was thinking I could possibly trick the overlay config stuff too (but haven't managed to do it yet).\n\tI was thinking probably there's ways of using schema or config api to cause an error due to the interpreted value and see that value in the error message in the admin ui log page (haven't managed it yet)\n\n ",
            "author": "Gus Heck",
            "date": "2018-11-09T04:46:43+0000"
        },
        {
            "id": "comment-16681351",
            "content": "Good points.\n\nSo to be safe, we also need to make utility methods that substitute properties in config files aware of RedactionUtils and return null for any secret keys, also meaning that we have to document that you no longer can use property substitution for secrets, you'll need code that reads those directly. So at least these need to change:\n\nPropertiesUtil.substituteProperty()\nDOMUtil.substituteProperty()\n\n\u00a0 ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-11-09T12:01:14+0000"
        },
        {
            "id": "comment-16681411",
            "content": "document that you no longer can use property substitution for secrets\nThat's an enormous break with back compatibility. I rather suspect one of the main reasons people pass in secretive things as system props is to substitute them in config. As I\u00a0implied on the user list, I think it's pretty questionable to give someone access to admin interface and admin api's (and therefore all your data) and then try to hide stuff from them. What's the use case driving this? ",
            "author": "Gus Heck",
            "date": "2018-11-09T13:11:01+0000"
        },
        {
            "id": "comment-16681486",
            "content": "One use case could be multi tenancy. So you have a\u00a0clients that get, say, only read access to collection \"foo\", while another client gets r/w access to collection \"bar\". Yet another client will have admin access. This is enforced by the auth framework. So in this case it is important to make sure that the \"foo\" client only can query this one collection and not see any system-level secrets on any of the API endpoints.\n\nAlso, you don't want secrets to leak out to the monitoring tool you are using, since it is not given that everyone with access to monitoring DB are also super-users.\n\nNow, I guess that the Admin UI will be pretty crippled already if you only have read access to one collection, and no other permissions. Then the dashboard won't even display anything meaningful and I don't think you'll get to use any of the /admin/ handlers, so that is an easy one. But if you have an administrator that should be allowed to create new collections or maintain a schema via schema API, he/she should not necessarily also be allowed to see other secrets? ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-11-09T14:10:52+0000"
        },
        {
            "id": "comment-16681781",
            "content": "Monitoring leaks is what the metrics stuff is about, right? So that makes sense. It's the UI stuff that concerns me. The list of properties should only hide things if they are hidden well and good across the board.\u00a0\n\nA\u00a0\"schema-admin\" role is basically what you are talking about at the end of your comment. That's an interesting idea. Probably it should be driven by a read-secret-sysprop permission\u00a0(or maybe part of the security-read permission?), which would then imply UI redaction, Schema update(and other) prohibitions on use of secret property expansion (input validation) and secret redaction for responses from API's. I'm not yet familiar with the authorization plugin, so I don't quite know what my suggestion implies though. ",
            "author": "Gus Heck",
            "date": "2018-11-09T18:07:19+0000"
        },
        {
            "id": "comment-16684075",
            "content": "Another point: anyone who has access to the blob-store and config overlay modification potentially can load up any code they want to run inside a handler of their own creation, including logging all the sysprops (which\u00a0should then would show up on the logging page in the admin UI). Of course access to the\u00a0config overlay modification capability plus blob store\u00a0is fundamentally full trust already, and sys prop gleaning is the least of one's worries so maybe this isn't viewed as a problem for this ticket. However, if\u00a0SOLR-9175\u00a0is implemented blob-store + schema access will have the same capability.\n\u00a0 ",
            "author": "Gus Heck",
            "date": "2018-11-12T16:49:49+0000"
        }
    ]
}