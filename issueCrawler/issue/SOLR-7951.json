{
    "id": "SOLR-7951",
    "title": "LBHttpSolrClient wraps ALL exceptions in \"No live SolrServers available to handle this request\" exception, even usage errors",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.2.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "We were experiencing many \"No live SolrServers available to handle this request\" exception, even though we saw no outages with any of our servers.  \n\nIt turned out the actual exceptions were related to the use of wildcards in span queries (and in some cases other invalid queries or usage-type issues). Traced it back to LBHttpSolrClient which was wrapping all exceptions, even plain SolrExceptions, in that outer exception.  \n\nInstead, wrapping in the out exception should be reserved for true communication issues in SolrCloud, and usage exceptions should be thrown as is.",
    "attachments": {
        "SOLR-7951.patch": "https://issues.apache.org/jira/secure/attachment/12751575/SOLR-7951.patch",
        "SOLR-7951-4.x.patch": "https://issues.apache.org/jira/secure/attachment/12751741/SOLR-7951-4.x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-20T17:49:42+0000",
            "author": "Mark Miller",
            "content": "Indeed. Thanks for the report, needs to be fixed. ",
            "id": "comment-14705406"
        },
        {
            "date": "2015-08-20T17:51:59+0000",
            "author": "Mark Miller",
            "content": "No live SolrServers available to handle this request\"\n\nIt does look like you should still get the original stack trace as a root exception? The message is still not being used correctly, but can you confirm that? ",
            "id": "comment-14705413"
        },
        {
            "date": "2015-08-20T17:59:30+0000",
            "author": "Elaine Cario",
            "content": "Yes - the original exception does get wrapped, and we'll need to unwrap it in our app as a workaround so we can get at the correct exception to display back to the user (and keep Operations from panicking!), at least until it can be fixed in Solr.  I've pasted the full message below (with server info redacted):\n\n<lst name=\"error\">\n  <str name=\"msg\">org.apache.solr.client.solrj.SolrServerException: No live SolrServers available to handle this request:http://...</str>\n  <str name=\"trace\">org.apache.solr.common.SolrException: org.apache.solr.client.solrj.SolrServerException: No live SolrServers available to handle this request:http://...\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:311)\n\tat com.wolterskluwer.atlas.solr.requesthandlers.WKRequestHandler.handleRequestBody(WKRequestHandler.java:123)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1967)\n\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:777)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:418)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:207)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:241)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:208)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:220)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:122)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:170)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:950)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:116)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:408)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1040)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:607)\n\tat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:313)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.solr.client.solrj.SolrServerException: No live SolrServers available to handle this request:http://...\n\tat org.apache.solr.client.solrj.impl.LBHttpSolrServer.request(LBHttpSolrServer.java:319)\n\tat org.apache.solr.handler.component.HttpShardHandlerFactory.makeLoadBalancedRequest(HttpShardHandlerFactory.java:205)\n\tat org.apache.solr.handler.component.HttpShardHandler$1.call(HttpShardHandler.java:162)\n\tat org.apache.solr.handler.component.HttpShardHandler$1.call(HttpShardHandler.java:119)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\n\t... 3 more\nCaused by: org.apache.solr.client.solrj.impl.HttpSolrServer$RemoteSolrException: Exceeded maximum of 1000 basic queries.\n\tat org.apache.solr.client.solrj.impl.HttpSolrServer.executeMethod(HttpSolrServer.java:550)\n\tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:210)\n\tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:206)\n\tat org.apache.solr.client.solrj.impl.LBHttpSolrServer.doRequest(LBHttpSolrServer.java:340)\n\tat org.apache.solr.client.solrj.impl.LBHttpSolrServer.request(LBHttpSolrServer.java:309)\n\t... 9 more\n</str> ",
            "id": "comment-14705436"
        },
        {
            "date": "2015-08-20T20:18:31+0000",
            "author": "Edward Ribeiro",
            "content": "Hi Mark Miller and Elaine Cario, I am attaching a patch for your evaluation. It's just a suggestion so feel free to ignore it or improve on it.  \n\nMark, while looking at this issue, I have seen that LBHttpSolrClientTest (with only a test method) and TestLBHttpSolrClient. Maybe it would be a nice opportunity to merge them? Furthermore, I have included a simple test into TestLBHttpSolrClient, but I am not quite pleased with it. Wdyt? \n\nIf you could suggest a better way of testing this issue, it would be really nice, but otherwise we can keep it as-is, or remove it. ",
            "id": "comment-14705683"
        },
        {
            "date": "2015-08-20T20:31:22+0000",
            "author": "Elaine Cario",
            "content": "Wow, that was quick...the patch looks pretty similar to what I was going to do, you beat me to it. \n\nIt will take a few days for me to test, as I need to spin up an environment  (and the keeper of the VMs is on vacay at the moment).  So forgive me if I go silent for a bit... ",
            "id": "comment-14705705"
        },
        {
            "date": "2015-08-20T21:55:42+0000",
            "author": "Edward Ribeiro",
            "content": "Oops, sorry Elaine Cario, not my intention.  Please, let me know if this patch solves your issue and how we could improve it, particularly the unit test.\n\nCheers! ",
            "id": "comment-14705835"
        },
        {
            "date": "2015-08-21T14:33:36+0000",
            "author": "Mark Miller",
            "content": "Thanks for looking at this!\n\nI suspect the problem is around \n\n\n      // we retry on 404 or 403 or 503 or 500\n      // unless it's an update - then we only retry on connect exception\n\n\n\nDo you know what the http code for the response was? Unfortunately, I'm not sure we can easily differentiate between a response we should retry or that is likely to get the same result on a retry.\n\nIf this is the case, the above patch looks like a possible solution, but we probably want to add some comments to help future devs understand what happened here.\n\nWe also want to make sure we are covering the following case correctly:\n\n\n catch (SolrServerException e) {\n      Throwable rootCause = e.getRootCause();\n      if (!isUpdate && rootCause instanceof IOException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else if (isUpdate && rootCause instanceof ConnectException) {\n        ex = (!isZombie) ? addZombie(client, e) : e;\n      } else {\n        throw e;\n      }\n\n ",
            "id": "comment-14706798"
        },
        {
            "date": "2015-08-21T14:48:11+0000",
            "author": "Mark Miller",
            "content": "For the new test, isn't this particular cause still supposed to actually say No live SolrServers available to handle this request?\n\nThe root problem is a socket timeout exception to that server in the test - when we have connection problems, we try the other server options and finally return 'no live solr servers' with the root cause.\n\nWe should avoid that message only when the problem is not connection related. ",
            "id": "comment-14706819"
        },
        {
            "date": "2015-08-21T15:32:23+0000",
            "author": "Elaine Cario",
            "content": "I was able to get an environment to test this on a little sooner, although it was a 4.10 environment (issue was reproducible there).  (Needed to manually apply the change, as LBHttpSolrServer was used in 4.10, later re-factored to LBHttpSolrServer client in 5.x).   The issue still occurred after the modification, though, so I need to make one additional change in both the conditions:\n\n...else if (ex instanceof SolrException)...   // (was SolrServerException in original patch)\n\n...as the HttpSolrServer.RemoteSolrException which was being thrown is a SolrException, not a SolrServerException. Then it worked as expected.\n\nI'm attaching a patch for 4.10.x with the corrected condition (SOLR-7951-4.x.patch) ",
            "id": "comment-14706872"
        },
        {
            "date": "2015-08-21T15:33:30+0000",
            "author": "Elaine Cario",
            "content": "Patch applies to LBHttpSolrServer in 4.x line.  Similar change can be made to 5.x LBHttpSolrClient ",
            "id": "comment-14706874"
        },
        {
            "date": "2015-08-21T18:22:03+0000",
            "author": "Edward Ribeiro",
            "content": "Cool, Elaine Cario!  Only thing I've got confused about the new patch is that it still cast to SolrServerException. -Shouldn't it be casted to SolrException now?- I see that the method signature throws SolrServerException, but I didn't get why it didn't throw ClassCastException... \n\n\n    } else if (ex instanceof SolrException) {\n      throw (SolrServerException) ex;\n\n\n\nAlso, it would be nice to document this as Mark Miller suggested above too for future devs.\n\nMark, let us know if you think this patch is okay, please? I mean, if it addresses your other  concerns with my original patch.\n\nps: So, the test I included was flawed. I wish we had a test to validate this fix. Any ideas? ",
            "id": "comment-14707205"
        },
        {
            "date": "2015-08-21T18:25:26+0000",
            "author": "Edward Ribeiro",
            "content": "Yeah, you right. I couldn't think of a better test to include.  ",
            "id": "comment-14707209"
        },
        {
            "date": "2015-08-21T20:20:16+0000",
            "author": "Elaine Cario",
            "content": "Edward Ribeiro, Well, you got me there, I was asking myself the same question, because I had it both ways (returning SolrException, and casting it to SolrServerException), and I couldn't figure out why the compiler or the runtime  wasn't complaining, so I decided to go with the cast in case something downstream might complain about SolrException coming out of a method that threw a SolrServerException. However, as I've pondered this, I think it is because SolrException (or RemoteSolrException) are descended from RuntimeException, so you can throw those without needing to declare them. So I think you are right, it is more proper to not cast it. I will test this some more next week to be absolutely sure.  I can also add appropriate comments around this.   ",
            "id": "comment-14707402"
        },
        {
            "date": "2015-08-24T18:01:13+0000",
            "author": "Elaine Cario",
            "content": "Updated patch for 4.10: it is correct to cast exception as SolrException (NOT SolrServerException).\n\nAlso added comments for clarity. ",
            "id": "comment-14709736"
        },
        {
            "date": "2015-08-24T18:02:35+0000",
            "author": "Elaine Cario",
            "content": "The original error code I was receiving was 500, and because it was an issue with the query, all the servers in the cluster were throwing the same error. ",
            "id": "comment-14709743"
        },
        {
            "date": "2015-09-09T14:35:02+0000",
            "author": "Edward Ribeiro",
            "content": "Hi Mark Miller, \n\nSorry for bothering you, but does the current patch looks okay? Any idea if we can commit this patch now or it needs further refining/work? \n\n/cc Elaine Cario\n\nThanks!\nEddie ",
            "id": "comment-14736944"
        },
        {
            "date": "2015-11-11T16:57:48+0000",
            "author": "Mark Miller",
            "content": "Sorry guys - just have not had a chance to dig back into this one. If someone else doesn't pick it up, it's still on my list. ",
            "id": "comment-15000673"
        },
        {
            "date": "2015-11-11T17:53:21+0000",
            "author": "Elaine Cario",
            "content": "NP - we applied patch to 4.10 in our prod environment some weeks ago, so far have seen no issues (and it fixed the issue we were having).  But it would be good to get it in 5.x so I don't need to worry about carrying the patch forward when we upgrade (no date for that, but it's in the planning stages).\n\nThanks for the follow-up! ",
            "id": "comment-15000782"
        },
        {
            "date": "2016-11-09T16:29:54+0000",
            "author": "Elaine Cario",
            "content": "We've upgraded now to Solr 5.5.2 (unpatched) and users are now reporting this issue again in the same scenario - use of wildcard in the query reports too many expansions, every shard reports the same exception, and instead of the actual exception, we get the \"No live servers....\" exception.\n\nI suppose we can run again with a locally patched Solr, but it would be really nice to have this fixed in Solr 6.x.\n\nThanks. ",
            "id": "comment-15651360"
        }
    ]
}