{
    "id": "SOLR-8213",
    "title": "SolrJ JDBC support basic authentication",
    "details": {
        "components": [
            "Authentication",
            "SolrJ"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "SolrJ JDBC doesn't support authentication where as Solr supports Basic and Kerberos authentication currently.",
    "attachments": {
        "add_401_httpstatus_code_check.patch": "https://issues.apache.org/jira/secure/attachment/12792354/add_401_httpstatus_code_check.patch",
        "SOLR-8213.patch": "https://issues.apache.org/jira/secure/attachment/12792515/SOLR-8213.patch",
        "add_basic_authentication_authorization_streaming.patch": "https://issues.apache.org/jira/secure/attachment/12792355/add_basic_authentication_authorization_streaming.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-26T18:36:59+0000",
            "author": "Kevin Risden",
            "content": "Currently the way that the authentication in SolrJ is setup is that the credentials must be added to the request unless a custom HttpClient is provided to the SolrClient during initialization.  ",
            "id": "comment-14974792"
        },
        {
            "date": "2016-03-09T21:15:38+0000",
            "author": "Kevin Risden",
            "content": "Joel Bernstein - Maybe you can shed some light on a 401 Unauthorized being swallowed in HttpSolrClient.java.\n\nIn HttpSolrClient.java, the httpStatus switch on line 497 doesn't account for HttpStatus.SC_UNAUTHORIZED and then the stream is returned on lines 516-524.\n\nif (processor == null || processor instanceof InputStreamResponseParser) {\n  // no processor specified, return raw stream\n  NamedList<Object> rsp = new NamedList<>();\n  rsp.add(\"stream\", respBody);\n  // Only case where stream should not be closed\n  shouldClose = false;\n  return rsp;\n}\n\n\n\nThe stream returned is pure HTML from the 401 unauthorized response which looks like:\n\n\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=ISO-8859-1\"/>\n<title>Error 401 </title>\n</head>\n<body>\n<h2>HTTP ERROR: 401</h2>\n<p>Problem accessing /collection1/select. Reason:\n<pre>    Unauthorized request, Response code: 401</pre></p>\n<hr /><a href=\"http://eclipse.org/jetty\">Powered by Jetty:// 9.3.6.v20151106</a><hr/>\n</body>\n</html>\n\n\n\nThis then causes the JSONTupleStream to blow up in the next() method since it can't parse the stream. The JSONTupleStream create method doesn't throw an exception since the response is actually valid just the stream contains content we don't want.\n\nI think the fix is to bail out earlier in HttpSolrClient on a 401 unauthorized. This would propagate the error back up to the JSONTupleStream and further up the stack during open() instead of read() for the streams.\n\nI was able to modify the JdbcTest to enable basic authentication and rules based authorization to show this exception and the same modification should work for the StreamingTest as well. I will upload a patch in a little bit. ",
            "id": "comment-15188048"
        },
        {
            "date": "2016-03-09T21:41:50+0000",
            "author": "Kevin Risden",
            "content": "For reference here is the block to enable basic auth username solr and password SolrRocks and have read authorization. I tested this block with JdbcTest, StreamingTest, and StreamExpressionTest. It should work with any test that extends AbstractFullDistribZkTestBase I think.\n\n\n  @Override\n  public void distribSetUp() throws Exception {\n    super.distribSetUp();\n\n    // Sets up basic auth with user solr and password SolrRocks\n    // Enables read permissions for solr user\n    try (ZkStateReader zkStateReader = new ZkStateReader(zkServer.getZkAddress(),\n        DEFAULT_CONNECTION_TIMEOUT, DEFAULT_CONNECTION_TIMEOUT)) {\n      zkStateReader.getZkClient().create(ZkStateReader.SOLR_SECURITY_CONF_PATH,\n          (\"{\\n\" +\n              \"  \\\"authentication\\\":{\\n\" +\n              \"    \\\"class\\\":\\\"solr.BasicAuthPlugin\\\",\\n\" +\n              \"    \\\"credentials\\\":{\\n\" +\n              \"      \\\"solr\\\":\\\"IV0EHq1OnNrj6gvRCwvFwTrZ1+z1oBbnQdiVC3otuq0= Ndd7LKvVBAaZIF0QAVi1ekCfAJXr1GGfLtRUXhgrF8c=\\\"},\\n\" +\n              \"    \\\"\\\":{\\\"v\\\":1}},\\n\" +\n              \"  \\\"authorization\\\":{\\n\" +\n              \"    \\\"class\\\":\\\"solr.RuleBasedAuthorizationPlugin\\\",\\n\" +\n              \"    \\\"permissions\\\":[\\n\" +\n              \"      {\\n\" +\n              \"        \\\"name\\\":\\\"read\\\",\\n\" +\n              \"        \\\"role\\\":[\\\"admin\\\"]}],\\n\" +\n              \"    \\\"user-role\\\":{\\\"solr\\\":\\\"admin\\\"}}}\").getBytes(Charsets.UTF_8),\n          CreateMode.PERSISTENT, true);\n    }\n  }\n\n ",
            "id": "comment-15188096"
        },
        {
            "date": "2016-03-09T21:47:19+0000",
            "author": "Kevin Risden",
            "content": "Attached a rough patch for adding a 401 HTTP status code check to HttpSolrClient. Also added patch that enables basic HTTP authentication and authorization for streaming/jdbc. Neither of these patches fix authentication/authorization for streaming or JDBC, but its a rough start to start testing it. ",
            "id": "comment-15188110"
        },
        {
            "date": "2016-03-09T21:50:59+0000",
            "author": "Joel Bernstein",
            "content": "I think it would be good to get some other committers thoughts on this. Can you post a question on the dev list and let's see what other committers suggest here. ",
            "id": "comment-15188117"
        },
        {
            "date": "2016-03-10T14:09:31+0000",
            "author": "Kevin Risden",
            "content": "This patch enables basic auth for all of the JdbcTest.java tests. It probably makes sense to randomly turn on/off basic auth instead of always having it on or off.\n\nThe implementation of passing username/password to the Solr request is through SolrParams. I think this should be ok since the JSONTupleStream is created on the client and then the request is sent to the /sql handler.\n\nJoel Bernstein - I don't fully understand the parallelism/worker node concepts  of parallel SQL and if the basic auth will be passed correctly all the way through to each node. Can you take a closer look at this approach? ",
            "id": "comment-15189322"
        },
        {
            "date": "2016-03-10T14:11:59+0000",
            "author": "Kevin Risden",
            "content": "This same approach should be used for StreamTest and StreamExpressionTest as well. I only focused on JDBC so far. ",
            "id": "comment-15189330"
        },
        {
            "date": "2016-03-10T14:16:41+0000",
            "author": "Kevin Risden",
            "content": "So username/password aren't removed from SolrParam when the request is sent by JSONTupleStream. I worry about this leaking credentials when it is handled by the SQL handler and passed across the cluster. Currently not sure there is a good way to pass credentials across the cluster without them being in the request parameters. ",
            "id": "comment-15189336"
        },
        {
            "date": "2016-03-14T22:31:46+0000",
            "author": "Kevin Risden",
            "content": "There needs to be some randomized testing of authentication/no authentication. ",
            "id": "comment-15194301"
        },
        {
            "date": "2016-03-15T01:09:14+0000",
            "author": "Joel Bernstein",
            "content": "I suspect it won't be get passed through. But if the we do basic auth on the SQLHandler perhaps that's enough.  ",
            "id": "comment-15194502"
        },
        {
            "date": "2016-03-15T20:53:25+0000",
            "author": "Joel Bernstein",
            "content": "A little more information on how the parallelism is accomplished in the SQLHandler. \n\nIf you look through the code in the SQLHandler you'll find a few places where the ParallelStream is used. In these scenarios the ParallelStream wraps another stream, for example the RollupStream, and sends it to worker nodes. It does this by calling toExpression() on the underlying stream which creates a Streaming Expression which is sent across the wire to the /stream handler on the workers. The workers run the expression and stream tuples back to the /sql handler for further processing. So it's the ParallelStream that would need to be adjusted if AUTH is to be passed through to the workers. ",
            "id": "comment-15196236"
        },
        {
            "date": "2016-03-15T21:00:17+0000",
            "author": "Joel Bernstein",
            "content": "Code from the SQLHandler:\n\n\n    CloudSolrStream cstream = new CloudSolrStream(zkHost, collection, params);\n    tupleStream = new RollupStream(cstream, buckets, metrics);\n\n    if(numWorkers > 1) {\n      // Do the rollups in parallel\n      // Maintain the sort of the Tuples coming from the workers.\n      StreamComparator comp = bucketSortComp(buckets, sortDirection);\n      ParallelStream parallelStream = new ParallelStream(workerZkHost, workerCollection, tupleStream, numWorkers, comp);\n\n      StreamFactory factory = new StreamFactory()\n          .withFunctionName(\"search\", CloudSolrStream.class)\n          .withFunctionName(\"parallel\", ParallelStream.class)\n          .withFunctionName(\"rollup\", RollupStream.class)\n          .withFunctionName(\"sum\", SumMetric.class)\n          .withFunctionName(\"min\", MinMetric.class)\n          .withFunctionName(\"max\", MaxMetric.class)\n          .withFunctionName(\"avg\", MeanMetric.class)\n          .withFunctionName(\"count\", CountMetric.class);\n\n      parallelStream.setStreamFactory(factory);\n      tupleStream = parallelStream;\n    }\n\n\n ",
            "id": "comment-15196247"
        },
        {
            "date": "2016-11-16T16:16:14+0000",
            "author": "Kevin Risden",
            "content": "Potentially related email thread: http://search-lucene.com/m/Solr/eHNl3vQZB16s7az1 ",
            "id": "comment-15670864"
        },
        {
            "date": "2016-11-16T21:40:02+0000",
            "author": "Kevin Risden",
            "content": "Linking to SOLR-9779 since it is most likely need for this to work correctly. ",
            "id": "comment-15671725"
        }
    ]
}