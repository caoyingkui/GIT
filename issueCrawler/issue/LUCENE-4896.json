{
    "id": "LUCENE-4896",
    "title": "PostingsHighlighter should use a interface of PassageFormatter instead of a class",
    "details": {
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": [
            "4.3",
            "6.0"
        ],
        "affect_versions": "4.2",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In my project I need a custom PassageFormatter to use with PostingsHighlighter.  I extended PassageFormatter  to override format(...)\n\nbut if I do that, I don't have access to the private variables.  So instead of changing the scope to protected, it should be more usefull to use a interface for PassageFormatter.\n\nlike public DefaultPassageFormatter implements PassageFormatter.",
    "attachments": {
        "LUCENE-4896.patch": "https://issues.apache.org/jira/secure/attachment/12578454/LUCENE-4896.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-04-03T15:07:16+0000",
            "content": "I agree there are a few bugs here:\n\n\twe should split PassageFormatter (abstract) from its default implementation.\n\tthe default implementation should expose its params as protected, so its still extensible.\n\n\n\nHowever I don't think an interface is best for this one: formatting is the key thing this class will do (as opposed to e.g. closeable). \nSo I think it should be an abstract class, even if today its api is only one method, i expect this API might unfortunately grow larger  ",
            "author": "Robert Muir",
            "id": "comment-13620984"
        },
        {
            "date": "2013-04-04T13:37:54+0000",
            "content": "Sebastien Dionne Do you want to create a patch for this issue? ",
            "author": "Robert Muir",
            "id": "comment-13622199"
        },
        {
            "date": "2013-04-12T17:20:23+0000",
            "content": "Patch against trunk. \n\nIn this first iteration I made PassageFormatter an interface and created a DefaultPassageFormatter, made also protected its fields.\n\nMaybe we should make protected the append method too. I can imagine people might want to modify the snippets before adding them to the string builder. The current impl can only escape html, but maybe some people would like to remove html tags at all. Maybe even better to make a proper protected method for that?\n\nI thought about using an abstract class but wasn't really sure what to make abstract and what to put in it. What do you think Robert?\n\n ",
            "author": "Luca Cavanna",
            "id": "comment-13630361"
        },
        {
            "date": "2013-04-12T17:29:04+0000",
            "content": "As i mentioned earlier i think PassageFormatter should be an abstract class (not an interface) with just that one method currently:\n\n\npublic String format(Passage passages[], String content);\n\n\n\nBut it might need a more complex API later, e.g. to support LUCENE-4906. So i think an abstract class is the right way to go (in addition to the reasons i mentioned in my first comment)\n\nopening up the DefaultPassageFormatter looks good in the patch. i think making append protected is fine. In general though its just useful if someone wants to tweak the default implementation. if their impl is radically different they should just be extending PassageFormatter (the abstract one). ",
            "author": "Robert Muir",
            "id": "comment-13630374"
        },
        {
            "date": "2013-04-12T17:36:01+0000",
            "content": "One other thing: in the DefaultPassageFormatter we should add @Override annotation to format(), and remove the javadocs block completely: it will be inherited from PassageFormatter.\n\nI'd also add lucene.experimental annotation to the abstract PassageFormatter class javadocs. ",
            "author": "Robert Muir",
            "id": "comment-13630383"
        },
        {
            "date": "2013-04-12T17:44:56+0000",
            "content": "No problem. It just felt weird to write an abstract class that looked to me like an interface.\n\nShould be better now. I also made append protected. ",
            "author": "Luca Cavanna",
            "id": "comment-13630391"
        },
        {
            "date": "2013-04-12T17:45:52+0000",
            "content": "Just read your last comment, going to add another patch  ",
            "author": "Luca Cavanna",
            "id": "comment-13630392"
        },
        {
            "date": "2013-04-12T17:51:43+0000",
            "content": "Here it is.\nThe lucene.experimental was already there, I left it only in the abstract class. \n\nFixed format javadocs too. ",
            "author": "Luca Cavanna",
            "id": "comment-13630402"
        },
        {
            "date": "2013-04-12T17:59:00+0000",
            "content": "Patch looks good... I'm going to apply it and review one last time. Thanks Luca!\n\nJust to try to explain my reasoning again for the abstract class: in general to me if its the class's \"primary purpose\" then its the correct way from an inheritance perspective. Whereas interfaces (e.g. Closeable) are not. This way we get the possibility of incorporating default behavior and things like this.\n\nOne reason why this could be useful, when we look at issues like LUCENE-4906, we might want to make formatter more powerful to do this: maybe it has a lower-level method that e.g. gets docids and all kinds of other things, or even all the passages for all the top-docs. The default implementation could still call format() for each doc, but that would allow someone to e.g. build a complex response structure for the whole top-docs at once or something like that.\n\nI'm not arguing that would necessarily be a good API at all, its just a theoretical example that wouldnt work well with interfaces  ",
            "author": "Robert Muir",
            "id": "comment-13630411"
        },
        {
            "date": "2013-04-12T18:26:19+0000",
            "content": "I see what you mean Robert, thanks a lot for your explanation. I would have probably ended up with an interface + abstract class then \n\nLet's see what I can come up with for LUCENE-4906...\n\n\n ",
            "author": "Luca Cavanna",
            "id": "comment-13630441"
        },
        {
            "date": "2013-04-12T18:27:50+0000",
            "content": "Thanks again Luca. I committed this with only one change to your patch (i added some javadocs to append, since its now protected).\n\nI'm backporting now and then i'll resolve the issue. ",
            "author": "Robert Muir",
            "id": "comment-13630444"
        },
        {
            "date": "2013-05-10T10:34:11+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654144"
        }
    ]
}