{
    "id": "LUCENE-3082",
    "title": "Add tool to upgrade all segments of an index to last recent supported index format without optimizing",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "New Feature",
        "fix_versions": [
            "3.2",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently if you want to upgrade an old index to the format of your current Lucene version, you have to optimize your index or use addIndexes(IndexReader...) [see LUCENE-2893] to copy to a new directory. The optimize() approach fails if your index is already optimized.\n\nI propose to add a custom MergePolicy to upgrade all segments to the last format. This MergePolicy could simply also ignore all segments already up-to-date. All segments in prior formats would be merged to a new segment using another MergePolicy's optimize strategy.\n\nThis issue is different from LUCENE-2893, as it would only support upgrading indexes from previous Lucene versions in-place using the official path. Its a tool for the end user, not a developer tool.\n\nThis addition should also go to Lucene 3.x, as we need to make users with pre-3.0 indexes go the step through 3.x, else they would not be able to open their index with 4.0. With this tool in 3.x the users could safely upgrade their index without relying on optimize to work on already-optimized indexes.",
    "attachments": {
        "index.31.optimized.cfs.zip": "https://issues.apache.org/jira/secure/attachment/12478546/index.31.optimized.cfs.zip",
        "LUCENE-3082.patch": "https://issues.apache.org/jira/secure/attachment/12478545/LUCENE-3082.patch",
        "index.31.optimized.nocfs.zip": "https://issues.apache.org/jira/secure/attachment/12478547/index.31.optimized.nocfs.zip",
        "LUCENE-3082-reorder-warnings.patch": "https://issues.apache.org/jira/secure/attachment/12479015/LUCENE-3082-reorder-warnings.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-05-08T13:16:18+0000",
            "content": "Maybe instead of a new method on IW, this is a new tool (eg oal.index.UpgradeIndex)?  That tool would create IW w/ a custom UpgradeMergePolicy that rewrites all segments (or only segments not matching current format, but often that would presumably be all segments). ",
            "author": "Michael McCandless",
            "id": "comment-13030483"
        },
        {
            "date": "2011-05-08T13:25:31+0000",
            "content": "Here the discussion of #lucene-dev irc channel: http://colabti.org/irclogger/irclogger_log/lucene-dev?date=2011-05-08#l117 ",
            "author": "Uwe Schindler",
            "id": "comment-13030484"
        },
        {
            "date": "2011-05-08T18:21:58+0000",
            "content": "This is a great idea. We should also allow one to plug in a PayloadProcessorProvider so he can rewrite the payload \"on the go\" if need be.\n\nAlso, while the index is being upgraded, I think it will be useful if we merge the segments that are upgraded, however not do cascading merges. Since segments are rewritten anyway, we can only gain from the merge. As always, if not everybody agree on this, we can make it a parameter.\n\nAnd let's make sure that whatever 'upgrade' means is at the application control. I.e., upgrade can be simply upgrading from 3x to 4.0, but it can also be using PayloadProcessorProvider as well suddenly deciding that all segments should be compound. I'm pretty sure I'll want to control the first two, not so about the last one.\n\nIt can be a simple 'boolean shouldUpgradeSegment(SegmentInfo)' on this UpgradeMP, which apps can override. ",
            "author": "Shai Erera",
            "id": "comment-13030518"
        },
        {
            "date": "2011-05-08T18:25:09+0000",
            "content": "Patch that implements this with a merge policy:\n\nIt does not yet contain the command line updater, if you want to upgrade an old index, the API code to do this is very simple:\n\n\nIndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_XX, new KeywordAnalyzer());\niwc = iwc.setMergePolicy(new UpgradeIndexMergePolicy(iwc.getMergePolicy()));\nIndexWriter w = new IndexWriter(dir, iwc);\nw.optimize();\nw.close();\n\n\n\nThe patch contains new tests in TestBackwards that verify the upgrade process:\n\n\n\tIt tries to upgrade all old indexes from the well-known list in TestBackwards. When this is done, all of them should contain exactly one segment (because all segments previously in index are older version, so they are merged/optimized together in new format). It also verifies all segment versions to be Constants.LUCENE_MAIN_VERSION.\n\tIt tries to upgrade two old, already optimized indexes (with prev version, I changed TestBackwards in my 3.1 checkout to generate those). It verifies the segment versions after the upgrade. This special case is needed, as optimizing a one-segment index is a no-op without the special merge-policy\n\tIt uses the old optimized indexes, opens them using standard merge policy and adds some documents to them. After that it upgrades the index with a new IndexWriter using the special merge policy. In that case (as some segments are already in new version), the index should only have the old-segments merged together, the newly added ones are untouched. So segment is verified to be count > 1.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13030519"
        },
        {
            "date": "2011-05-08T18:38:55+0000",
            "content": "Shai:\n\n\n\tThe supplied patch should handle all you want (there would be only one addition, the proposed 'boolean shouldUpgradeSegment(SegmentInfo)' method, which is a one-liner, will upload new patch for that und make the merge policy unfinal.\n\tIt will not do cascading merges, because when the merge policy recognizes that all segments have already the new version it will not merge anything. So after the first iteration all segments will be upgraded, so on the next run of this policy, it will return null merges.\n\n\n\nThe other ideas like PayloadProcessor can be done outside of that in user code (but beware, it will not touch segments already in new version). ",
            "author": "Uwe Schindler",
            "id": "comment-13030525"
        },
        {
            "date": "2011-05-08T18:42:29+0000",
            "content": "Upgraded patch with a protected shouldUpgradeSegment(SI) method. ",
            "author": "Uwe Schindler",
            "id": "comment-13030527"
        },
        {
            "date": "2011-05-08T18:47:37+0000",
            "content": "Patch looks great!\n\nThe segmentsToOptimize ought to contain every segment in the index; that's only present for the case where optimize() is called in a bg thread but other threads continue to index new documents causing new segments to be flushed.  These new segments would then NOT be in the segmentsToOptimize when the optimize merges need to cascade.\n\nTODO: for the command-line tool, we should make sure the index only has a single commit point (ie, abort if not).  Upgrading an index with more than one commit point is hairy (I think it's fine not to support this case... but we should not remove the commits). ",
            "author": "Michael McCandless",
            "id": "comment-13030528"
        },
        {
            "date": "2011-05-08T19:38:17+0000",
            "content": "Small change to the merging of the leftover segments, that are not scheduled for merge by the wrapped MergePolicy: They re now merged together into one segment instead of separately. Normally that are only few ones (e.g. when TieredMergePolicy only optimized the first 30 segments and leave the rest for later). As we have no cascading optimize, we merge the remaining segments into one. ",
            "author": "Uwe Schindler",
            "id": "comment-13030533"
        },
        {
            "date": "2011-05-09T00:56:18+0000",
            "content": "Patch with updated and randomized tests, command line tool (oal.index.IndexFormatUpgrader) and javadocs.\n\nI think it's ready to commit. ",
            "author": "Uwe Schindler",
            "id": "comment-13030571"
        },
        {
            "date": "2011-05-09T10:38:02+0000",
            "content": "How about this wording:\n\nExpert: this tool keeps only the last commit in an index; for this\nreason, if the incoming index has more than one commit, the tool\nrefuses to run by default.  Specify -delete-prior-commits to override\nthis, allowing the tool to delete all but the last commit.\n\nMaybe just call it IndexUpgrader?  (Format seems redundant?)\n\nThere's a missing \n{ and }\n after the \"if (commits.size() > 1)\" ",
            "author": "Michael McCandless",
            "id": "comment-13030676"
        },
        {
            "date": "2011-05-09T11:36:47+0000",
            "content": "New patch with renamed class and added documentation as suggested by Mike.\n\nThe previous patch had also a bug in the command line tool (instead of \"dir\" it used still \"args[0]\" to invoke the ctor, which was a relict from earlier tool version).\n\nI also fixed javadocs and added lucene.experimental to the UpgradeIndexMergePolicy, as we should not make it too public (but its not really \"internal\" because there are use cases not covered by the easy-to-use IndexUpgrader tool. ",
            "author": "Uwe Schindler",
            "id": "comment-13030691"
        },
        {
            "date": "2011-05-09T16:31:16+0000",
            "content": "Committed trunk revision: 1101088\nCommitted 3.x revision: 1101093 ",
            "author": "Uwe Schindler",
            "id": "comment-13030796"
        },
        {
            "date": "2011-05-09T16:32:37+0000",
            "content": "I also used the full random IndexWriterConfig now after LUCENE-3083 was committed (Fix MockRandomMergePolicy).\n\nI will now commit and merge the test code to produce the optimized indexes. ",
            "author": "Uwe Schindler",
            "id": "comment-13030797"
        },
        {
            "date": "2011-05-12T07:11:28+0000",
            "content": "We should add a warning to the MergePolicy/IndexUpgrader, that this tool reorders segments, if the index was partially upgraded before (e.g. by adding new documents). Segments that were upgraded before a call to MP's optimize come first, then the upgraded ones. ",
            "author": "Uwe Schindler",
            "id": "comment-13032283"
        },
        {
            "date": "2011-05-12T22:09:19+0000",
            "content": "Patch that adds some warnings about reordering of documents IDs if the index was partially upgraded before execution. ",
            "author": "Uwe Schindler",
            "id": "comment-13032708"
        },
        {
            "date": "2011-05-13T10:48:00+0000",
            "content": "Upgraded patch. Will now be committed.\n\nI added Version ctor argument, as in 3.x this would chose the default merge policy. ",
            "author": "Uwe Schindler",
            "id": "comment-13032954"
        },
        {
            "date": "2011-05-13T10:50:47+0000",
            "content": "Committed trunk revision: 1102658\nMerged 3.x revision: 1102659 ",
            "author": "Uwe Schindler",
            "id": "comment-13032956"
        },
        {
            "date": "2011-06-03T16:37:09+0000",
            "content": "Bulk closing for 3.2 ",
            "author": "Robert Muir",
            "id": "comment-13043457"
        }
    ]
}