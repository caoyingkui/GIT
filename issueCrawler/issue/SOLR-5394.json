{
    "id": "SOLR-5394",
    "title": "facet.method=fcs seems to be using threads when it shouldn't",
    "details": {
        "affect_versions": "4.6",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "faceting"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I built a wikipedia index, with multiple fields for faceting.\n\nWhen I do facet.method=fcs with facet.field=dateFacet and facet.field=userNameFacet, and then kill -QUIT the java process, I see a bunch (46, I think) of facetExecutor-7-thread-N threads had spun up.\n\nBut I thought threads for each field is turned off by default?\n\nEven if I add facet.threads=0, it still spins up all the threads.\n\nI think something is wrong in SimpleFacets.parseParams; somehow, that method returns early (because localParams) is null, leaving threads=-1, and then the later code that would have set threads to 0 never runs.",
    "attachments": {
        "SOLR-5394_keep_threads_original_value.patch": "https://issues.apache.org/jira/secure/attachment/12618397/SOLR-5394_keep_threads_original_value.patch",
        "SOLR-5394.patch": "https://issues.apache.org/jira/secure/attachment/12635517/SOLR-5394.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Dmitry Kan",
            "id": "comment-13846200",
            "date": "2013-12-12T09:35:56+0000",
            "content": "During debugging with facet.threads=0 I have noticed that when we advanced to parseParams method, threads=0 and this method resets it to -1 which breaks the latter logic. So I added a condition around threads=-1.\n\nI would be happy if someone can review this little patch and give feedback. "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-13940345",
            "date": "2014-03-19T09:40:36+0000",
            "content": "Attached patch contains 3tests reproducing issues with thread number.\nThere 2 unrelated usages of SimpleFacets.threads with different initialization:\n\n\tfacet.threads - pool size for getting term count per each faces field.\nSynchrous exectuion if 0.\n\tpool size of org.apache.solr.request.PerSegmentSingleValuedFaceting from local parameters used in query like \n{!prefix f=bla threads=3 ex=text:bla}\nsignatureField\nIf negative or zero thread number pased, then used MAX_INT as thread number - int threads = nThreads <= 0 ? Integer.MAX_VALUE : nThreads;\nDefault value as -1 could be the issue.\nAbout proposed fix i dont see any good reason to keep negative threads number by default. Absolute limit for threads if negative should be -1.\nI propose to set threads=1 by default meaning single thread execution, if unspecified. \nIf it's requried to get MAX_INT thread pool (with is unlimited threads number) is can be specified in query as -1.\n\n\n "
        },
        {
            "author": "Dmitry Kan",
            "id": "comment-13941841",
            "date": "2014-03-20T15:26:29+0000",
            "content": "This patch sets the default threads to 1 (single thread execution) as per Vitaly's suggestion. Fixed the test case with unspecified threads parameter: the number of threads is expected to be the default (=1). The tests in TestSimpleFacet pass. "
        },
        {
            "author": "Dmitry Kan",
            "id": "comment-13943275",
            "date": "2014-03-21T17:29:20+0000",
            "content": "Michael McCandless can you reproduce the bug with the patch? "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13943441",
            "date": "2014-03-21T19:29:17+0000",
            "content": "Dmitry Kan Unfortunately the env where I originally hit this is long since gone ... if your test case shows the issue fixed, I trust that  "
        }
    ]
}