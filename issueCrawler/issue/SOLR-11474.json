{
    "id": "SOLR-11474",
    "title": "Endless loop and OOM in PeerSync",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "After problem discussed in SOLR-11459, I restarted cluster and got OOM on start. \n\nPeerSync#handleVersionsWithRanges contains this logic: \n\n\n    while (otherUpdatesIndex >= 0) {\n      // we have run out of ourUpdates, pick up all the remaining versions from the other versions\n      if (ourUpdatesIndex < 0) {\n        String range = otherVersions.get(otherUpdatesIndex) + \"...\" + otherVersions.get(0);\n        rangesToRequest.add(range);\n        totalRequestedVersions += otherUpdatesIndex + 1;\n        break;\n      }\n\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersions.get(otherUpdatesIndex)) < ourLowThreshold) break;\n\n      if (ourUpdates.get(ourUpdatesIndex).longValue() == otherVersions.get(otherUpdatesIndex).longValue()) {\n        ourUpdatesIndex--;\n        otherUpdatesIndex--;\n      } else if (Math.abs(ourUpdates.get(ourUpdatesIndex)) < Math.abs(otherVersions.get(otherUpdatesIndex))) {\n        ourUpdatesIndex--;\n      } else {\n        long rangeStart = otherVersions.get(otherUpdatesIndex);\n        while ((otherUpdatesIndex < otherVersions.size())\n            && (Math.abs(otherVersions.get(otherUpdatesIndex)) < Math.abs(ourUpdates.get(ourUpdatesIndex)))) {\n          otherUpdatesIndex--;\n          totalRequestedVersions++;\n        }\n        // construct range here\n        rangesToRequest.add(rangeStart + \"...\" + otherVersions.get(otherUpdatesIndex + 1));\n      }\n    }\n\n\n\nIf at some point there will be\n\n ourUpdates.get(ourUpdatesIndex) = -otherVersions.get(otherUpdatesIndex) \n\nloop will never end. It will same string again and again into rangesToRequest until process runs out of memory.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-01T17:39:33+0000",
            "content": "Seems two issues were created simultaneously, probably due to some Jira glitch when it was created. Since SOLR-11475 has comments, closing this one as a duplicate. ",
            "author": "Cassandra Targett",
            "id": "comment-16348979"
        }
    ]
}