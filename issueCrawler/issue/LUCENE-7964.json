{
    "id": "LUCENE-7964",
    "title": "Remove Solr fieldType XML example from Lucene AnalysisFactories JavaDoc",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "general/javadocs"
        ],
        "fix_versions": [
            "7.6",
            "master (8.0)"
        ]
    },
    "description": "As proposed and discussed in this dev-list thread:\nhttps://lists.apache.org/thread.html/9add7e4a3ad28b307dc51532a609b423982922d734064f26f8104744@%3Cdev.lucene.apache.org%3E\n\nRobert Muir David Smiley Uwe Schindler",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16158727",
            "date": "2017-09-08T14:45:16+0000",
            "content": "The problem with the current examples is also that they are incomplete. We have no full documentation of all settings you can do with KV pairs in CustomAnalyzer or Solr. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16159440",
            "date": "2017-09-08T22:06:01+0000",
            "content": "\nI think it is more important to document all parameters and their valid values than to give one specific example of how to setup a complete analyzer. We could add a \n\n  <dl><dt>myparam</dt><dd>description</dd><dt>myparam2</dt><dd>desc</dd></dl>\u2026 \n\n\nto each, along with a standard phrase:\n\n\"See CustomAnalyzer (link) for an example of how to create an Alalyzer with this filter\u201d\n\nFWIW: as things stand right now, the ref-guide tries it's best to \"summarize\" the key options available and show a valid example \u2013 but still links to the javadocs for every factory for completeness (and is prone to getting out of sync since people have to remember to manually update both the javadocs and the ref-guide) ... so the examples of syntax in the javadocs are still handy, but as we move away from hand editing schema.xml (and towards the schema api) they will obviously become less useful over time.\n\n\n\nLong, Loooong, ago i experimented with the idea of using custom javadoc doclet markup to try and create a way for solr plugins (like these factories) to be able to declare the diff params (and each params datatype) that they supported in a \"structured\" way that could then be used in both the \"javadocs\" for developers as well as in some new custom formatted \"plugin docs\" for non-tech solr users that would omit most of the constructor/method details of regular javadocs: SOLR-555\n\nI eventually got frustrated with how cumbersome the javadoc APIs were to try and deal with (customizeing required a lot of assumptions about sun internal classes) and just abandoned the whole approach.\n\nI have no idea what the state of the art is in that regard \u2013 i know Alexandre Rafalovitch did some interesting stuff to power his solr-start.com site (see latest comments in SOLR-555) \u2013 but in general, it would be really great if we could get the basic info about the options supported by each factory not just into a consistent HTML table format in the javadocs, but also in something easily machine parsable \u2013 then the new ref-guide build process could easily parse & auto-generate the equivilent asciidoc syntax info in the ref-guide.\n\nleft field idea: what if we created a simple json/xml formated file that we kept in the source tree along with all of these factories that specified a short description of the factory, all the params supported along with, their data types, and some basic example values + some sample input/output values \u2013 these data files could then be used by:\n\n\ta unit test that uses SPI to get a list of all factories, verifies that evey factory has a corrisponding data file, that the sample params don't cause any errors, and that feeding the sample input produces the sample output\n\tthe documentation ant task which could generate an HTML snippet file from each for inclusion by the javadocs of each class (the doc linter could confirm the class javadocs for every class with a data file already has the neccessary @include)\n\t\n\t\tas a special case, a snippet indended for inclusion in the CustomAanalyzer javadocs could be generated showing how some of the notable factories can be chained together\n\t\n\t\n\tthe ref guide build, which could use the datafiles to generate asciidoc syntax for inclusion in the appropriate places in the ref guide \u2013 and which could error if a new factory gets added but there isn't an include reference to it in any of the ref-guide sections.\n\n ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-16159499",
            "date": "2017-09-08T23:07:25+0000",
            "content": "Is there some way to keep the documentation as part of the code itself? This way it is kept in sync and various tooling could also ask the class for what params it takes and thus drive GUIs. Would a custom annotation work? I guess we could still write a tool using SPI to scrape all these annotation strings?\n\n\n@AnalysisParams(\"[{name: preserveOriginal, description: \\\"Whether to keep the original term\\\", type: boolean}]\")\npublic class ASCIIFoldingFilterFactory extends TokenFilterFactory implements MultiTermAwareComponent {\n  private static final String PRESERVE_ORIGINAL = \"preserveOriginal\";\n\n ",
            "author": "Jan H\u00f8ydahl"
        },
        {
            "id": "comment-16161704",
            "date": "2017-09-11T18:13:19+0000",
            "content": "For solr-start.com, I did Javadoc parsing for the comments as well as for method signature checking,as not all Lucene components could be used in Solr definitions. But yes, I do wish the components were self-documented, it would enable a lot of different use-cases and pending Jiras.\n\nI did suggest about a year ago on the mailing list to use MBeans (or - worse but similar - JavaBeans), but it got -1 (-2 even): https://lists.apache.org/thread.html/94f411be62aba30746e28861569fd6cf5dc1453e1d6c17b89e4d4a68@%3Cdev.lucene.apache.org%3E (towards the end)\n\nAny other self-documenting method would work too, but my feeling was just that if we use something that is already codified, we may also benefit from pre-existing tools.\n ",
            "author": "Alexandre Rafalovitch"
        },
        {
            "id": "comment-16461809",
            "date": "2018-05-03T01:11:44+0000",
            "content": "I think this issue shouldn't try to explode the scope into documenting all possible parameters, autogenerating them, making them type-safe, or any other stuff.\nThis stuff is really just blocking all progress when it needs to be separate stuff, because we don't have that today.\n\nWhat we have today is nonfunctional javadoc for java users, which is a real problem, e.g. https://mail-archives.apache.org/mod_mbox/lucene-java-user/201805.mbox/%3CCANdt40C_q8GX2_E9b%2B_qORZKojWANPfT%3DnzMuRg02WB3mbZe1w%40mail.gmail.com%3E\nI think instead the lucene javadocs here really need to use examples that, well, work with lucene: e.g. reformulated with CustomAnalyzer. ",
            "author": "Robert Muir"
        }
    ]
}