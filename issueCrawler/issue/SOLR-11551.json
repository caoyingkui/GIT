{
    "id": "SOLR-11551",
    "title": "Standardize response codes and success/failure determination for core-admin api calls",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.4",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "If we were to tackle SOLR-11526 I think we need to start fixing the core admin api's first.\n\n\nIf we are relying on response codes I think we should make the following change and fix all the APIs \n\n\n  interface CoreAdminOp {\n    void execute(CallInfo it) throws Exception;\n  }\n\n\n\nTo\n\n\n  interface CoreAdminOp {\n    /**\n     *\n     * @param it request/response object\n     *\n     * If the request is invalid throw a SolrException with SolrException.ErrorCode.BAD_REQUEST ( 400 )\n     * If the execution of the command fails throw a SolrException with SolrException.ErrorCode.SERVER_ERROR ( 500 )\n     * Add a \"error-message\" key to the response object with the exception ( this part should be done at the caller of this method so that each operation doesn't need to do the same thing )\n     */\n    void execute(CallInfo it);\n  }\n\n\n\ncc Jason Gerlowski",
    "attachments": {
        "SOLR-11551.patch": "https://issues.apache.org/jira/secure/attachment/12896181/SOLR-11551.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-06T12:02:31+0000",
            "content": "Sorry this took me so long to get to Varun Thacker\n\nThe attached patch wraps each CoreAdminOp implementation in a try-catch to gather up any unexpected 500 errors.  It also adds arg-checking for any required core-api params, to return a 400 if any are missing.  Tests for all these cases are included in CoreAdminOperationTest.\n\nAs-written, there are a few test failures as a result of the bug reported in SOLR-11608.  That small bug maybe blocks this improvement.  I've uploaded a 1-line-fix over there though, which could be included in this patch as well.  (Wasn't sure whether to include it or not, since it's a conceptually separate problem). ",
            "author": "Jason Gerlowski",
            "id": "comment-16240184"
        },
        {
            "date": "2017-11-06T12:05:09+0000",
            "content": "I also noticed that anytime a core-API takes in a \"core\" parameter, but that core doesn't exist, we throw a SolrException with a 400 status-code.  This might be better represented as a 404 (NOT FOUND).  I don't have a strong opinion whether we implement that, but it does fit things a little maybe.\n\nI left the behavior as-is in the initial patch, since it wasn't in the interface you laid out in the issue description.  Just wanted to mention it in case anyone liked the idea... ",
            "author": "Jason Gerlowski",
            "id": "comment-16240187"
        },
        {
            "date": "2017-11-06T13:46:58+0000",
            "content": "On returning 404 errors for specific conditions: I think the 400 response is a result of consistency in another direction \u2013 I'm not sure that Solr ever actually returns a 404 response.  When the URL is valid but information in the parameters isn't, I think I've only ever seen 400 (request problem) and 500 (server problem) \u2013 and not just from CoreAdmin.  When a 404 response happens (like what happens with http://host:port/solr/corename base URLs), I believe it's typically the container that returns that error \u2013 because the URL is incomplete or invalid, and doesn't get mapped to Solr.\n\nIf the error message returned with the 404 is clear enough to indicate the problem (core not found is one specific scenario) then I am completely on board with the change.  If the only actual information that Solr sends is the HTTP code, then the change may cause more confusion than clarity.  There definitely should be a specific note made in the \"upgrading\" section of CHANGES.txt indicating that HTTP response codes are changing in some circumstances \u2013 not just a \"SOLR-11551\" note about the issue being included. ",
            "author": "Shawn Heisey",
            "id": "comment-16240310"
        },
        {
            "date": "2017-11-07T02:41:53+0000",
            "content": "I do like the 404 idea.  Though if no other Solr APIs make use of the 404 status code, then introducing 404 here for CoreAdmin is a strike against the standardization this Issue was created to work towards.\n\nMaybe it's best deferred to a separate JIRA specifically focused on introducing 404 for all relevant APIs? (CoreAdmin, CollectionAdmin, ConfigSet, etc. could all ostensibly benefit from a 404 status code differentiation).  Whether that other JIRA gets voted up or down, at least the APIs would stay consistent that way. ",
            "author": "Jason Gerlowski",
            "id": "comment-16241387"
        },
        {
            "date": "2018-03-19T23:01:55+0000",
            "content": "I attached a modernized version of Jason's patch, no other changes. ",
            "author": "Steve Rowe",
            "id": "comment-16405569"
        },
        {
            "date": "2018-03-20T02:25:39+0000",
            "content": "Thanks for refreshing the patch Steve (and bringing it back to my attention as a result).  I had let this sit initially as it was waiting on SOLR-11608, but that fix went in awhile ago.\n\nTo circle back to the earlier discussion around 404's; longterm I think that's the right \"status\" value for Solr to return.  It's a common status code that most users are familiar with intuitively, and it allows us to distinguish between two similar but distinct types of failures.  But I don't think trying to squeeze that in here is the right call, since (as Shawn pointed out) it doesn't seem to be returned by any APIs currently (and this JIRA has so far been scoped to the CoreAdmin APIs).\n\nIf no one objects, I'd like to take a second look at the test coverage for this and merge it in later this week. ",
            "author": "Jason Gerlowski",
            "id": "comment-16405708"
        },
        {
            "date": "2018-03-23T00:05:00+0000",
            "content": "Steve Rowe mentioned to me in a discussion offline that the enveloping try-catch blocks in each of these CoreAdminOp implementations can be pulled into CoreAdminOperation.execute(), to cut down on duplication and really shrink this patch.  I'd considered this before, but avoided it since the exception messages aren't quite the same.  But Steve suggested using the enum name to generate the error message.\n\nRecent patch takes this suggestion into account (thanks Steve!).\n\nTests and precommit pass.  Will commit in a day or so unless I get anymore feedback. ",
            "author": "Jason Gerlowski",
            "id": "comment-16410598"
        },
        {
            "date": "2018-03-23T01:46:20+0000",
            "content": "Thanks for making the try-catch change, looks good.\n\n+1 on the rest of the new patch, except for three small things I noticed after I took a closer look at the patch: \n\n1. in MergeIndexesOp, you changed the line if (core != null) { to if (core == null) return; (line 65).  This could happen earlier, and short-circuit some unnecessary collection creations, right after where the core is obtained, on line 55.\n\n\n51:  @Override\n52:  public void execute(CoreAdminHandler.CallInfo it) throws Exception {\n53:    SolrParams params = it.req.getParams();\n54:    String cname = params.required().get(CoreAdminParams.CORE);\n55:    SolrCore core = it.handler.coreContainer.getCore(cname);\n56:    SolrQueryRequest wrappedReq = null;\n57:\n58:    List<SolrCore> sourceCores = Lists.newArrayList();\n59:    List<RefCounted<SolrIndexSearcher>> searchers = Lists.newArrayList();\n60:    // stores readers created from indexDir param values\n61:    List<DirectoryReader> readersToBeClosed = Lists.newArrayList();\n62:    Map<Directory, Boolean> dirsToBeReleased = new HashMap<>();\n63:\n64:\n65:    if (core == null) return;\n\n\n\n2. CoreAdminOperation.execute() no longer needs to declare throws Exception since it always wraps any encountered exceptions with SolrException, which is unchecked.  As a result, all implementing classes should also remove this declaration.  (Note that this detail was included in this issue's description.)\n\n3. Copy/paste-o's in CoreAdminOperationTest.java:\n\n3.a. Should call REJOINLEADERELECTION_OP.execute() instead of REQUESTSTATUS_OP.execute() (and the failure message should be adjusted too):\n\n\n  public void testRejoinLeaderElectionUnexpectedFailuresResultIn500Exception() {\n    final Throwable cause = new NullPointerException();\n    whenUnexpectedErrorOccursDuringCoreAdminOp(cause);\n    \n    try {\n      CoreAdminOperation.REQUESTSTATUS_OP.execute(callInfo);\n      fail(\"Expected request-status execution to fail with exception.\");\n\n\n\n3.b. failure message prints \"core-unload\" instead of \"core-reload\":\n\n\n  public void testReloadUnexpectedFailuresResultIn500SolrException() {\n    final Throwable cause = new NullPointerException();\n    whenUnexpectedErrorOccursDuringCoreAdminOp(cause);\n    \n    try {\n      CoreAdminOperation.RELOAD_OP.execute(callInfo);\n      fail(\"Expected core-unload execution to fail with exception.\");\n\n\n\n3.c. failure message prints \"request-sync\" instead of \"request-buffer-updates\":\n\n\n  public void testRequestBufferUpdatesUnexpectedFailuresResultIn500Exception() {\n    final Throwable cause = new NullPointerException();\n    whenUnexpectedErrorOccursDuringCoreAdminOp(cause);\n    \n    try {\n      CoreAdminOperation.REQUESTBUFFERUPDATES_OP.execute(callInfo);\n      fail(\"Expected request-sync execution to fail with exception.\");\n\n\n\n3.d. failure message prints \"request-apply-updates\" instead of \"request-status\":\n\n\n public void testRequestStatusMissingRequestIdParamResultsIn400SolrException() {\n    whenCoreAdminOpHasParams(Maps.newHashMap());\n\n    try {\n      CoreAdminOperation.REQUESTSTATUS_OP.execute(callInfo);\n      fail(\"Expected request-apply-updates execution to fail when no 'requestid' param present\");\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16410678"
        },
        {
            "date": "2018-03-23T18:50:12+0000",
            "content": "Man, thanks for the thorough review Steve.  Those copy-paste issues are tough for familiar eyes to catch.\n\nI've attached a patch which fixes concerns (1) and (3) above.\n\nI disagree a bit with concern (2) though.  Or rather, the code does.  With the wrap-all-exceptions-but-SolrException logic pulled into CoreAdminOperation.execute(), many of the CoreAdminOp implementations still throw checked exceptions.  (Most commonly IOException and InterruptedException).  See CreateSnapshoOp, DeleteSnapshotOp, MergeIndexesOp, PrepRecoveryOp, RestoreCoreOp, SplitOp, and StatusOp for examples.  Removing throws Exception from the interface declaration was one of the sacrifices made when unifying all of the nearly identical exception-wrapping bits.\n\nI'm happy to walk back the try-catch unification if you'd rather see the throws Exception clause gone from the interface.  There might be some other changes with these types that can get us around this too.  Haven't had much time to look yet.  But I'm not sure what they would buy us.\n\nMy slight preference though would be to leave things as they are.  Each implementation is free to throw non-SolrExceptions, but we have a single place that inspects and optionally repackages any exceptions that trickle out.  But I'm happy to defer if you feel strongly about getting that throws Exception out of CoreAdminOp. ",
            "author": "Jason Gerlowski",
            "id": "comment-16411887"
        },
        {
            "date": "2018-03-23T19:04:33+0000",
            "content": "With the wrap-all-exceptions-but-SolrException logic pulled into CoreAdminOperation.execute(), many of the CoreAdminOp implementations still throw checked exceptions. [...] My slight preference though would be to leave things as they are. Each implementation is free to throw non-SolrExceptions, but we have a single place that inspects and optionally repackages any exceptions that trickle out.\n\nI agree, thanks.\n\nThe other fixes look good, +1 to commit. ",
            "author": "Steve Rowe",
            "id": "comment-16411907"
        },
        {
            "date": "2018-03-24T15:00:09+0000",
            "content": "Commit c4abbfd5f737def3a8c2376d61aa425f6a0e96aa in lucene-solr's branch refs/heads/master from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c4abbfd ]\n\nSOLR-11551: Standardize CoreAdmin API status codes ",
            "author": "ASF subversion and git services",
            "id": "comment-16412646"
        },
        {
            "date": "2018-03-24T15:49:41+0000",
            "content": "Commit ff5665b51bb60508693e1eeb048e5908594ddaff in lucene-solr's branch refs/heads/branch_7x from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ff5665b ]\n\nSOLR-11551: Standardize CoreAdmin API status codes ",
            "author": "ASF subversion and git services",
            "id": "comment-16412667"
        },
        {
            "date": "2018-03-24T16:41:58+0000",
            "content": "Thanks everyone for the suggestions/review/help. ",
            "author": "Jason Gerlowski",
            "id": "comment-16412684"
        }
    ]
}