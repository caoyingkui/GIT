{
    "id": "SOLR-122",
    "title": "Add optional support for Ruby-libxml2 (vs. REXML)",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "clients - ruby - flare"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This file adds drop-in support for the ruby-libxml2, which is a wrapper for the libxml2 library, which is an order of magnitude or so faster than REXML.\n\nThis depends on my SOLR-121 patch for multi-document adds, since the behavior of Solr::Request::AddDocument#to_s is different.\n\nRequiring this makes some tests fail, but for trivial reasons: some tests are directly tied to REXML, others fail due to interelement whitespace added by libxml2 (which you can't disable via the Ruby interface). Functionally, it's identical, and passes all functional tests.",
    "attachments": {
        "solrb_libxml_support.diff": "https://issues.apache.org/jira/secure/attachment/12350403/solrb_libxml_support.diff",
        "libxml.rb": "https://issues.apache.org/jira/secure/attachment/12349718/libxml.rb"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Antonio Eggberg",
            "id": "comment-12467997",
            "date": "2007-01-27T05:48:46+0000",
            "content": "Even though Hpricot or Xaagly is new but they are much faster then libxml or REXML.. Have you considered them?\n\nHpricot \nhttp://code.whytheluckystiff.net/hpricot/\n\nXaagly (I think this is just pure XML parsing) not tried\n\nhttp://involution.com/2007/01/02/xaggly-a-c-based-xml-parser-for-ruby-released/\n\nA comparison\n\nhttp://involution.com/2006/11/28/xaggly-vs-hpricot-vs-rexml/\n "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12467998",
            "date": "2007-01-27T06:08:14+0000",
            "content": "I hadn't seen Xaagly, Antonio \u2013 I'll check it out.\n\nlibxml2 is definitely the most stable, mature XML parser for C around, though, and I'd be reluctant to use anything else \u2013 XML can be tricky business (from security perspectives as well as performance), and libxml2 has received scrutiny from a much, much larger population of programmers than either Hpricot or Xaagly.\n\nEither way, thanks to the well-architected nature of solrb, it's easy enough to write a wrapper for the XML library of your choice. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12468047",
            "date": "2007-01-27T18:34:19+0000",
            "content": "Hold that thought, folks.  First of all, we do very minimal with XML all of which could even be done with simply using strings instead of an XML API.  Also,  a refactoring of the request/response code is forthcoming which will make things a lot cleaner.  I think its a great idea for us to optimize our XML handling, don't get me wrong, and I've come to really dislike REXML (primarily due to its performance).\n\nA question to Coda - did you measure performance before/after between REXML and libxml2 within solrb? "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12468057",
            "date": "2007-01-27T19:24:00+0000",
            "content": "Erik \u2013 using simple string substitution always sounds like a good idea, but I've never found it to be.\n\nI'll post some benchmarks of REXML vs. libxml2 here in the next couple of days. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12468101",
            "date": "2007-01-28T10:21:03+0000",
            "content": "The main place where XML gets used in solrb is in adding a document to Solr, and only a few bits would need to be XML escaped: the field text and the field name.  The rest is static.  I'm not suggesting we necessarily switch to using string concatenation, just tossing it out as an idea that would avoid having to use either REXML or libxml2 and likely be much faster than either.\n\nI'm certainly curious what speed differences within the context of solrb and adding documents the difference between REXML and libxml2 makes. "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12468140",
            "date": "2007-01-28T18:30:46+0000",
            "content": "So I just ran two tests: indexing and querying. The first was indexing about 251K records (mostly short strings, floats, and integers), 1K at a time (the server was stopped and the index deleted between these tests). The second was querying (\"id:[1 TO 1000]\") and returning 100 rows. These tests were run on my MacBook Pro while I checked my mail and looked at funny pictures of cats. Solr was running on Jetty, with the config from the solrb directory, but a different schema.\n\nSo... libxml-ruby is much faster:\n\n                        user     system       total         real\nREXML indexing:  2107.480000  24.760000 2132.240000 (2421.141147)\nlibxml indexing:  728.810000  24.440000  753.250000 (1016.763167)\n\nREXML querying:    25.520000   7.210000   32.730000  (873.637089)\nlibxml querying:   19.790000   6.020000   25.810000  (706.032189)\n\n(For those unfamiliar with Ruby benchmarks, the first three numbers are CPU-seconds, the last number in parentheses is the actual elapsed clock time in seconds.)\n\nJust to clarify, I'm not suggesting that REXML be ditched entirely; rather, I think it would be better to have a drop-in replacement for people who want to use libxml (or Xaagly or whatever) in situations where performance is important.\n\nAlso, my previous file had an escaping bug, so I'll post a corrected version. (Basically, one should use XML::Node#<< instead of passing a second parameter to XML::Node.new when setting the content of an element to an unescaped value.) "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12468141",
            "date": "2007-01-28T18:31:34+0000",
            "content": "This version has a fix for the escaping bug. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12468153",
            "date": "2007-01-28T20:53:08+0000",
            "content": "Thanks for the performance numbers.  I'm confused on how your XML patch improves querying performance, since the Ruby's eval() is used for processing search results and there isn't any XML parsing involved (unless I'm missing something) ??? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12468156",
            "date": "2007-01-28T21:12:01+0000",
            "content": "Coda -Let's add a condition to keep this from loading if libxml is not installed.  Also, it looks like your Xml class is not used.   Again, I will be refactoring the request/response early this week, so stay tuned. "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12468158",
            "date": "2007-01-28T21:19:20+0000",
            "content": "I'll see if I can't get some better benchmarks for this \u2013 there's no good reason why this drop-in would improve querying times.\n\nAlso, I'm not sure what you mean by \"your Xml class.\" The drop-in doesn't add any additional classes; it just opens up the existing ones and modifies their XML behavior to use libxml-ruby instead of REXML. And the drop-in isn't loaded by default, so there's no worry of it not working with someone who doesn't have libxml-ruby installed. They'd have to go out of their way (i.e., require \"solrb/libxml\") to shoot themselves in the foot.\n\nLet me know when you refactor this; I'm fine with re-writing it. "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12468166",
            "date": "2007-01-28T22:53:48+0000",
            "content": "I can't nail down the query benchmarks \u2013 running the same benchmark over and over again gives me fluctuations of 20-30%.\n\nI simplified the indexing benchmarks \u2013 now it takes a hash of 1000 records, adds them in, and deletes them all. It does that 100 times. Here are the results:\n\n                       user     system      total        real\nREXML indexing:  444.590000   2.740000 447.330000 (549.907248)\nlibxml indexing:  34.450000   3.650000  38.100000 (138.402562) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12468394",
            "date": "2007-01-29T20:05:14+0000",
            "content": "I'd echo Erik's sentiments... one often doesn't need an XML parser for XML generation. "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12468433",
            "date": "2007-01-29T22:39:33+0000",
            "content": "Yonik \u2013 in this case, libxml-ruby is faster at generating XML than simple string concatenation in Ruby when you take the overhead of escaping into consideration. Anything is faster than REXML, including guessing.\n\n====\n\n                            user     system      total        real\nstring concatenation:  35.280000   0.180000  35.460000 ( 35.713158)\nstring substitution:   34.870000   0.180000  35.050000 ( 35.273428)\nREXML:                129.480000   0.610000 130.090000 (130.845760)\nlibxml:                23.020000   0.130000  23.150000 ( 23.315077)\n\n====\n\nrequire \"benchmark\"\nrequire \"rexml/document\"\nrequire \"xml/libxml\"\n\nTESTS = 1_000_000\n\nBenchmark.bmbm do |results|\n  results.report(\"string concatenation:\") do\n    TESTS.times do\n      x = \"<blah>\"\n      x << \"woot\".gsub(\"&\", \"&\").gsub(\"<\", \"<\").gsub(\">\", \">\")\n      x << \"</blah>\"\n    end\n  end\n\n  results.report(\"string substitution:\") do\n    TESTS.times do\n      x = \"<blah>#\n{\"woot\".gsub(\"&\", \"&\").gsub(\"<\", \"<\").gsub(\">\", \">\")}\n</blah>\"\n    end\n  end\n\n  results.report(\"REXML:\") do\n    TESTS.times do\n      e = REXML::Element.new(\"blah\")\n      e.add_text(\"woot\")\n      e.to_s\n    end\n  end\n\n  results.report(\"libxml:\") do\n    TESTS.times do\n      e = XML::Node.new(\"blah\")\n      e << \"woot\"\n      e.to_s\n    end\n  end\nend "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12468472",
            "date": "2007-01-30T03:06:18+0000",
            "content": "Nice benchmarks Coda.  I buy it.    But wow, libxml is faster than string concatenation.  That surprises since surely libxml is doing more work, but down in C instead of Ruby.  Another nail in REXMLs coffin.\n\nLet me get those refactorings to the request/responses committed and we'll rework this so that it can work automatically if libxml-ruby gem is installed.  Sound good? "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12468481",
            "date": "2007-01-30T03:29:37+0000",
            "content": "Sounds like a plan, Erik. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12468490",
            "date": "2007-01-30T04:12:12+0000",
            "content": "OK, check this out... my second ruby coding attempt ever.  The first was the 6 line program here http://wiki.apache.org/solr/SolRuby\n\nAt first I thought maybe the speed difference was due to gsub scanning the string 3 times.  Then I started fooling around with it and realized the slowdown must be because the pattern is being \"compiled\" on every evaluation (just a guess).  I also wrote a single-pass version that's a little faster yet.\n\nI didn't test the XML versions since I don't have libxml (and I'm not even sure how to get/install... I'm obviously not a ruby person).   but since these versions are 10 times faster than the original string concat versions, I assume they will be perhaps 5 times faster than libxml.  Assuming It's actually doing what it's supposed to and I didn't make some horrible mistake.\n\n                                          user     system      total        real\nstring concatenation:                 6.812000   0.171000   6.983000 (  7.172000)\nstring substitution:                  6.922000   0.141000   7.063000 (  7.250000)\nstring concatenation2:                1.047000   0.000000   1.047000 (  1.078000)\nstring substitution2:                 0.953000   0.000000   0.953000 (  0.969000)\ncatenation w/ single pass escape:     0.734000   0.000000   0.734000 (  0.750000)\nsubstitution w/ single pass escape:   0.657000   0.000000   0.657000 (  0.656000\n)\n\nrequire \"benchmark\"\n\n#TESTS = 1_000_000\nTESTS = 100_000\n\ndef escape(text)\n  text.gsub(/([&<>])/) \n{ |ch|\n    case ch\n    when '&' then '&'\n    when '<' then '<'\n    when '>' then '>'\n    end\n  }\nend\n\n\nBenchmark.bmbm do |results|\n  results.report(\"string concatenation:\") do\n    TESTS.times do\n      x = \"<blah>\"\n      x << \"woot\".gsub(\"&\", \"&\").gsub(\"<\", \"<\").gsub(\">\", \">\")\n      x << \"</blah>\"\n    end\n  end\n\n  results.report(\"string substitution:\") do\n    TESTS.times do\n      x = \"<blah>#\n{\"woot\".gsub(\"&\", \"&\").gsub(\"<\", \"<\").gsub(\">\", \">\")}\n</blah>\"\n    end\n  end\n\n  results.report(\"string concatenation2:\") do\n    TESTS.times do\n      x = \"<blah>\"\n      x << \"woot\".gsub(/&/, '&').gsub(/</, '<').gsub(/>/, '>')\n      x << \"</blah>\"\n    end\n  end\n\n  results.report(\"string substitution2:\") do\n    TESTS.times do\n      x = \"<blah>#\n{\"woot\".gsub(/&/, '&').gsub(/</, '<').gsub(/>/, '>')}\n</blah>\"\n    end\n  end\n\n  results.report(\"catenation w/ single pass escape:\") do\n    TESTS.times do\n      x = \"<blah>\"\n      x << escape(\"woot\")\n      x << \"</blah>\"\n    end\n  end\n\n  results.report(\"substitution w/ single pass escape:\") do\n    TESTS.times do\n      x = \"<blah>#\n{escape('woot')}\n</blah>\"\n    end\n  end\n\n\nend\n "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12468498",
            "date": "2007-01-30T04:47:45+0000",
            "content": "Yonik \u2013 The results switch back once the text gets more complicated than \"woot.\" Your escape function is really fast as long as the block passed to String#gsub never gets called \u2013 if there's nothing there to escape. Blocks are pretty slow compared with other means of branching. Good catch on the regexp compiling \u2013 I didn't think that String#gsub compiled the first parameter to a Regexp every time.\n\nHere's how it looks with 1000 random characters of [A-Za-z0-9<>&], 100,000 times each:\n\n                                          user     system      total        real\nstring concatenation:                 9.320000   0.070000   9.390000 (  9.921551)\nstring substitution:                  9.210000   0.050000   9.260000 (  9.660138)\nstring concatenation2:                7.610000   0.050000   7.660000 (  7.919240)\nstring substitution2:                 7.550000   0.040000   7.590000 (  7.817162)\ncatenation w/ single pass escape:    12.640000   0.070000  12.710000 ( 13.121503)\nsubstitution w/ single pass escape:  12.420000   0.070000  12.490000 ( 12.845156)\nlibxml:                               2.050000   0.010000   2.060000 (  2.108470)\n\nlibxml back in the lead. \n\nAlso, if you're on Mac or Linux, you can install libxml-ruby as follows: sudo gem install libxml-ruby\n\nBe sure you've installed libxml2 first (sudo port install libxml2, sudo apt-get install libxml2, sudo rpm something-or-other).\n\nIf you're on Windows, you'll just have to take my word for it.\n\n====\n\nrequire \"benchmark\"\nrequire \"rexml/document\"\nrequire \"rubygems\"\nrequire \"xml/libxml\"\n\nTESTS = 100_000\n\nCHARS = ('A'..'Z').to_a + ('a'..'z').to_a + ('0'..'9').to_a + ['<', '>', '&']\nTEXT = \"\"\n1000.times do\n  TEXT << CHARS[rand(CHARS.size)]\nend\n\ndef escape(text)\n text.gsub(/([&<>])/) \n{ |ch|\n   case ch\n   when '&' then '&'\n   when '<' then '<'\n   when '>' then '>'\n   end\n }\nend\n\n\nBenchmark.bmbm do |results|\n results.report(\"string concatenation:\") do\n   TESTS.times do\n     x = \"<blah>\"\n     x << TEXT.gsub(\"&\", \"&\").gsub(\"<\", \"<\").gsub(\">\", \">\")\n     x << \"</blah>\"\n   end\n end\n\n results.report(\"string substitution:\") do\n   TESTS.times do\n     x = \"<blah>#\n{TEXT.gsub(\"&\", \"&\").gsub(\"<\", \"<\").gsub(\">\", \">\")}\n</blah>\"\n   end\n end\n\n results.report(\"string concatenation2:\") do\n   TESTS.times do\n     x = \"<blah>\"\n     x << TEXT.gsub(/&/, '&').gsub(/</, '<').gsub(/>/, '>')\n     x << \"</blah>\"\n   end\n end\n\n results.report(\"string substitution2:\") do\n   TESTS.times do\n     x = \"<blah>#\n{TEXT.gsub(/&/, '&').gsub(/</, '<').gsub(/>/, '>')}\n</blah>\"\n   end\n end\n\n results.report(\"catenation w/ single pass escape:\") do\n   TESTS.times do\n     x = \"<blah>\"\n     x << escape(TEXT)\n     x << \"</blah>\"\n   end\n end\n\n results.report(\"substitution w/ single pass escape:\") do\n   TESTS.times do\n     x = \"<blah>#\n{escape(TEXT)}\n</blah>\"\n   end\n end\n\n results.report(\"libxml:\") do\n   TESTS.times do\n     e = XML::Node.new(\"blah\")\n     e << TEXT\n     e.to_s\n   end\n end\nend "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12468504",
            "date": "2007-01-30T05:31:11+0000",
            "content": "Uncle! \n\nStill, considering the number of small attributes, tags, and values that won't have any reserved chars, I wouldn't hazard to guess which would come out fastest when actually constructing various Solr documents.  Not REXML  "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12469938",
            "date": "2007-02-03T02:45:25+0000",
            "content": "Coda - let's add the libxml2 support like AWS::S3 does:\n\nhttp://rubyforge.org/viewvc/s3/trunk/lib/aws/s3.rb?revision=128&root=amazon&view=markup\n\nYou game for patching us up to have it load in if its installed? "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12470249",
            "date": "2007-02-05T15:34:16+0000",
            "content": "Erik \u2013 I think that makes a lot of sense. Let me know when you're done refactoring the XML methods. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12470275",
            "date": "2007-02-05T17:02:54+0000",
            "content": "Coda - go to town.  I'm working on other things at this point. "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12470448",
            "date": "2007-02-06T04:56:24+0000",
            "content": "Okay, so here it is, with full test support.\n\nI was wondering how we should refactor out the XML generation and so forth to a common interface, when I realized we had a common interface \u2013 REXML::Element. With a few minor changes, we can make XML::Node act exactly like REXML::Element.\n\nSo the XML generation class has been moved to Solr::XML::Element.\n\nIf we can load libxml-ruby, we do so, and make the minor changes to get XML::Node acting like REXML::Element. We then set Solr::XML::Element to XML::Node.\n\nIf we can't load libmxl-ruby, we load rexml/document, and set Solr::XML::Element to REXML::Element.\n\nI've also gone through and changed some of the unit tests \u2013 results are matched against regular expressions to smooth out the difference between libxml2 and REXML's output.\n\nI think this approach is a lot nicer than the drop-in monkey patching \u2013 this allows us to toggle between libxml-ruby and REXML for testing purposes, and we don't need to maintain/develop two versions of code generation.\n\nI think the same approach should be taken with XML parsing, but since it doesn't seem like we're doing a lot of that, I've put that off.\n\nAs always, all tests pass, and I'm interested in any feedback. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12470521",
            "date": "2007-02-06T11:17:21+0000",
            "content": "Coda - nicely done!   I've committed this.  There are still some uses of REXML directly left over in the response classes.  Should these be adjusted to use Solr::XML also?  Is so, and you want to tackle it, let's open a new issue.   Thanks for this contribution! "
        },
        {
            "author": "Coda Hale",
            "id": "comment-12470650",
            "date": "2007-02-06T17:20:24+0000",
            "content": "Thanks, Erik!\n\nI didn't refactor Solr::Response::Xml mainly because it's much harder \u2013 REXML's XPath support is, um, unique and special like a snowflake, so it's more than just making the method profiles line up. I figured eventually I or someone else would write Solr::XML::Parser, then have that run either REXML or libxml-ruby, depending on what loaded.\n\nI'll open another issue when it comes to that.  "
        }
    ]
}