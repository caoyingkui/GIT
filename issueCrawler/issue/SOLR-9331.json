{
    "id": "SOLR-9331",
    "title": "Can we remove ReRankQuery's length constructor argument?",
    "details": {
        "components": [],
        "type": "Wish",
        "labels": "",
        "fix_versions": [
            "6.2",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "Can we remove ReRankQuery's length constructor argument? It is a ReRankQParserPlugin private class.\n\nproposed patch summary:\n\n\n\tchange ReRankQuery.getTopDocsCollector to use its len argument (instead of the length member)\n\tremove ReRankQuery's length member and constructor argument\n\tremove ReRankQParser.parse's use of the rows and start parameters\n\n\n\nmotivation: towards ReRankQParserPlugin and LTRQParserPlugin (SOLR-8542) sharing (more) code",
    "attachments": {
        "SOLR-9331.patch": "https://issues.apache.org/jira/secure/attachment/12819672/SOLR-9331.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-07-22T18:00:42+0000",
            "author": "Joel Bernstein",
            "content": "It's been a while since I looked at this code. I'm wondering if I originally implemented it like this because of issues with the QueryResultCache. But I don't remember exactly the reason for having a separate length variable.  ",
            "id": "comment-15389932"
        },
        {
            "date": "2016-07-22T18:04:55+0000",
            "author": "Joel Bernstein",
            "content": "So the length that is passed into the constructor would be the exact length requested by query. The len being passed in getTopDocsCollector would be adjusted for the query result cache I believe. I'm not sure there is any issue though with using the len being passed in getTopDocsCollector. ",
            "id": "comment-15389948"
        },
        {
            "date": "2016-07-22T18:08:10+0000",
            "author": "Joel Bernstein",
            "content": "Also let's take close at all the adjustments done to the length in SolrIndexSearcher.getDocListNC(QueryResult qr, QueryCommand cmd).  ",
            "id": "comment-15389953"
        },
        {
            "date": "2016-07-25T07:57:58+0000",
            "author": "Christine Poerschke",
            "content": "Thanks Joel Bernstein for the QueryResultCache and getDocListNC pointers. I now realize why and agree that the length passed to the constructor and the len passed to getTopDocsCollector are potentially different and so the constructor's length argument should stay therefore. Whilst looking at the code I noticed that the hashCode and equalsTo in ReRankQuery don't use the length member, SOLR-9336 created with proposed patch to change that - what do you think? ",
            "id": "comment-15391501"
        },
        {
            "date": "2016-07-26T14:30:04+0000",
            "author": "Christine Poerschke",
            "content": "\nBeen reading and investigating some more w.r.t. SOLR-9331 here and SOLR-9336 also - here's my now improved understanding of how the request parameters rows, start and reRankDocs and the solrconfig.xml element queryResultWindowSize combine as far as the ReRank(Query|Collector) and the QueryResultCache are concerned.\n\nThe start parameter defaults to 0 if not supplied and combined with the rows parameter it is used for paging, for example if each page is to contain five documents then the requests would be:\n\n# page 1\n...&rows=5\n# page 2\n...&rows=5&start=5\n# page 3\n...&rows=5&start=10\n\n\n\nNext, let's say we wish to apply some sort of reranking to improve search relevance.\n\n\tHere's what the requests would look like if we were to rerank/reorder just the first page of documents:\n\n# page 1\n...&rq={!rerank+reRankDocs=5+reRankQuery=$rrq+...}&rrq=...&rows=5\n# cost: 5 docs retrieved, 5 docs reordered, 5 docs returned\n#\n# page 2\n...&rq={!rerank+reRankDocs=5+reRankQuery=$rrq+...}&rrq=...&rows=5&start=5\n# cost: 10 docs retrieved, 5 docs reordered, 5 docs skipped and then 5 docs returned\n#\n# page 3\n...&rq={!rerank+reRankDocs=5+reRankQuery=$rrq+...}&rrq=...&rows=5&start=10\n# cost: 15 docs retrieved, 5 docs reordered, 10 docs skipped and then 5 docs returned\n\n\n\tHere's what the requests would look like if we were to rerank/reorder the first five pages of documents:\n\n# page 1\n...&rq={!rerank+reRankDocs=25+reRankQuery=$rrq+...}&rrq=...&rows=5\n# cost: 25 docs retrieved, 25 docs reordered, 5 docs returned\n#\n# page 2\n...&rq={!rerank+reRankDocs=25+reRankQuery=$rrq+...}&rrq=...&rows=5&start=5\n# cost: 25 docs retrieved, 25 docs reordered, 5 docs skipped and then 5 docs returned\n#\n# page 3\n...&rq={!rerank+reRankDocs=25+reRankQuery=$rrq+...}&rrq=...&rows=5&start=10\n# cost: 25 docs retrieved, 25 docs reordered, 10 docs skipped and then 5 docs returned\n\n\n\n\n\nNext, let's think about query result caching and demonstrate why reRankDocs needs to be part of the ReRankQuery.equalTo formula:\n\n# reranking logic: 'odd ahead of even'\n# results without            reranking: 1 2 3 4 5 6 7 8 9 10\n# results with reRankDocs=7  reranking: 1 3 5 7 2 4 6 8 9 10\n# results with reRankDocs=10 reranking: 1 3 5 7 9 2 4 6 8 10\n\n\n\n\tconclusion: reRankDocs influences the end result and thus it must form part of the query result caching logic.\n\n\n\nNext, let's consider query result caching, with rows+start combined into a length variable:\n\n# reranking logic: 'odd ahead of even'\n#\n#  input: reRankDocs=3&start=0&rows=6&rq=...\n# output: [ 1 3 2 4 5 6 ] // populate cache (length=6)\n#\n#  input: reRankDocs=3&start=0&rows=3&rq=...\n# output: [ 1 3 2 ] // use (length=6) cache (we need only first half subset of what is cached)\n#\n#  input: reRankDocs=3&start=3&rows=3&rq=...\n# output: [ 4 5 6 ] // use (length=6) cache (we need only second half subset of what is cached)\n#\n#  input: reRankDocs=3&start=0&rows=4&rq=...\n# output: [ 1 3 2 4 ] // use (length=6) cache (we need only first two thirds subset of what is cached)\n#\n#  input: reRankDocs=3&start=3&rows=4&rq=...\n# output: cache lookup returns (length=6) cache entry with too few elements and so no cache use here\n#  cache: [ 1 3 2 4 5 6 7 ] // populate cache (length=7)\n# output: [ 4 5 6 7 ]\n\n\n\n\tconclusions: length not being part of the query result caching logic means that\n\t\n\t\ta length=6 cache entry can be used by some (but not all) subsequent length!=6 requests\n\t\tthe cache entry's length must be considered relative to the request's length and a cache hit is not always a useable cache hit\n\t\n\t\n\n\n\nFollowing on from this, we can think of the queryResultWindowSize config element as a 'rounded up' version of the length variable:\n\n# reranking logic: 'odd ahead of even'\n#\n#  input: reRankDocs=3&start=0&rows=6&rq=...\n# config: queryResultWindowSize=8\n#  cache: [ 1 3 2 4 5 6 7 8 ] // populate cache (length=8)\n# output: [ 1 3 2 4 5 6 ]\n#\n#  input: reRankDocs=3&start=3&rows=4&rq=...\n# output: [ 4 5 6 7 ] // use (length=8) cache (we need only a middle subset of what is cached)\n\n\n\n\tnotes:\n\t\n\t\tthe first query slightly overpopulated the cache and thus the second query could use the cache\n\t\tthe first query became slightly more expensive (8 vs. 6 docs retrieved)\n\t\tthe second query became cheaper since the query result cache could be used\n\t\n\t\n\n\n\nFinally, let's reassure ourselves that the queryResultWindowSize 'rounding up' does not alter query results themselves:\n\n\tThe mainCollector is used to retrieve documents. The ReRankCollector constructor specifies Math.max(reRankDocs, length) as the numHits for the mainCollector.\n\tThe ReRankCollector.topDocs method obtains Math.max(reRankDocs, length) documents from the mainCollector and then reranks/reorders up to reRankDocs of the obtained documents.\n\n\n\nSo, based on the above analysis I would conclude that ReRankQuery's length constructor argument can safely be removed (as is proposed by the attached patch) and that doing so would be in keeping with the queryResultWindowSize logic itself.\n\nHow does that sound? What do you think? ",
            "id": "comment-15393870"
        },
        {
            "date": "2016-08-04T18:48:17+0000",
            "author": "Joel Bernstein",
            "content": "Hi Christine Poerschke,\n\nSorry I've been slow responding to your work with the re-ranker.\n\nNow that SOLR-9252 is complete the next step is to deploy stored models in the reranker. I'll be working on this for the Solr 6.3 release. That will be a good time for me to test out any changes you make in the reranker. \n\nMy plan for deploying models in the reranker is to add a classify() function query that returns the score from a logistic regression classifier. The classify() function query will initially work with the logistic regression models created in SOLR-9252. \n\nThen the rerank query would be:\n\n\n{!func}classify(...)\n\n\n\n\n\n\n\n\n ",
            "id": "comment-15408300"
        },
        {
            "date": "2016-08-05T12:02:30+0000",
            "author": "Christine Poerschke",
            "content": "Hi Joel Bernstein - no problem. Thanks for your input on my re-ranker small refactor work. My plan is to commit SOLR-9353 later this afternoon and then this SOLR-9331 here Monday or Tuesday. Would that work for you too? From quick look at the latest SOLR-9252 patch there should be no merge conflicts. ",
            "id": "comment-15409357"
        },
        {
            "date": "2016-08-05T13:32:55+0000",
            "author": "Joel Bernstein",
            "content": "I haven't had time to review but if you're feeling comfortable with the changes then feel free to commit.\n\nThe re-ranker is going to be a major focus of the 6.3 release for me, so I'll be able to provide feedback if I run into any issues. ",
            "id": "comment-15409454"
        },
        {
            "date": "2016-08-10T14:57:40+0000",
            "author": "Christine Poerschke",
            "content": "Previous patch rebased against latest master with conflicts resolved. ",
            "id": "comment-15415395"
        },
        {
            "date": "2016-08-10T15:28:03+0000",
            "author": "ASF subversion and git services",
            "content": "Commit bc25a565d23a7f791272be02685e71217234704b in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bc25a56 ]\n\nSOLR-9331: Remove ReRankQuery's length constructor argument and member. ",
            "id": "comment-15415448"
        },
        {
            "date": "2016-08-11T09:07:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 02527909625763871f0cf5a4aea353462299cda1 in lucene-solr's branch refs/heads/branch_6x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0252790 ]\n\nSOLR-9331: Remove ReRankQuery's length constructor argument and member. ",
            "id": "comment-15416913"
        }
    ]
}