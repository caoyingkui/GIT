{
    "id": "LUCENE-6252",
    "title": "Numeric range search does not find all expected results",
    "details": {
        "resolution": "Not A Problem",
        "affect_versions": "4.10.2",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "4.10.3"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Hi Lucene Team,\n\nThe below code creates an index with three documents, each document has one BirthDate field. Searching does not return expected results.\n\nRegards\n\nSlav\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.Date;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.document.LongField;\nimport org.apache.lucene.index.DirectoryReader;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.IndexWriterConfig;\nimport org.apache.lucene.index.IndexWriterConfig.OpenMode;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.NumericRangeQuery;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.ScoreDoc;\nimport org.apache.lucene.search.TopDocs;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.FSDirectory;\nimport org.apache.lucene.util.Version;\n\n\npublic class LuceneTest {\n\tprivate static final java.text.SimpleDateFormat DATE_PARSER = new java.text.SimpleDateFormat(\"yyyy/MM/dd\");\n\tprivate static final String INDEX_PATH = \"/tmp/lucene\";\n\n\tprivate static Date parseDate(String dateSt) {\n\t\tsynchronized(DATE_PARSER) {\n\t\t\ttry \n{\n\t\t\t\treturn DATE_PARSER.parse(dateSt);\n\t\t\t}\n catch (java.text.ParseException e) \n{\n\t\t\t\tthrow new IllegalArgumentException(e);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static void main(String[] args) {\n\t\t//Create an index\n\t\ttry {\n\t\t\tDirectory dir = FSDirectory.open(new File(INDEX_PATH));\n\t\t\tAnalyzer analyzer = new StandardAnalyzer();\n\t\t\tIndexWriterConfig iwc = new IndexWriterConfig(Version.LUCENE_4_10_2, analyzer);\n\t\t\tiwc.setOpenMode(OpenMode.CREATE);\n\t\t\tIndexWriter writer = new IndexWriter(dir, iwc);\n\n\t\t\tDocument doc = new Document();\n\t\t\tdoc.add(new LongField(\"BirthDate\", parseDate(\"1989/11/01\").getTime(), Field.Store.YES));\n\t\t\twriter.addDocument(doc);\n\n\t\t\tdoc = new Document();\n\t\t\tdoc.add(new LongField(\"BirthDate\", parseDate(\"1973/03/02\").getTime(), Field.Store.YES));\n\t\t\twriter.addDocument(doc);\n\n\t\t\tdoc = new Document();\n\t\t\tdoc.add(new LongField(\"BirthDate\", parseDate(\"1969/01/31\").getTime(), Field.Store.YES));\n\t\t\twriter.addDocument(doc);\n\n\t\t\twriter.close();\n\n\t\t\t//Now do searching\n\n\t\t\tIndexReader reader = DirectoryReader.open(FSDirectory.open(new File(INDEX_PATH)));\n\t\t\tIndexSearcher searcher = new IndexSearcher(reader);\n\n\t\t\tQuery query = NumericRangeQuery.newLongRange(\"BirthDate\", 4, parseDate(\"1969/01/30\").getTime(),\n\t\t\t\tparseDate(\"1973/03/03\").getTime(), true, true);\n\n\t\t\tTopDocs results = searcher.search(query, null, 100);\n\t\t\tScoreDoc[] scoreDocs = results.scoreDocs;\n\t\t\tint hits = scoreDocs.length;\n\t\t\tint count = results.totalHits;\n\n\t\t\tfor(int i = 0; i < hits; i++) \n{\n\t\t\t\tdoc = searcher.doc(scoreDocs[i].doc);\n\t\t\t\tString value = doc.get(\"BirthDate\");\n\t\t\t\tSystem.out.println(new Date(Long.parseLong(value)));\n\t\t\t}\n\t\t} catch (Exception e) \n{\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14327052",
            "author": "Slav Boleslawski",
            "date": "2015-02-19T06:50:00+0000",
            "content": "My mistake based on some obsolete LongField documentation: the default precision step is 16 rather than 4 as the doco text suggests. "
        }
    ]
}