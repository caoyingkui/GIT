{
    "id": "LUCENE-7204",
    "title": "Geo3d test failure",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "6.0",
        "components": [
            "modules/spatial3d"
        ],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "Here's the failure:\n\n\n   [junit4]   1> doc=88 should not have matched but did\n   [junit4]   1>   point=[X=0.0038335118741108774, Y=-0.573079818081998, Z=0.8181033476562913]\n   [junit4]   1> doc=204 should not have matched but did\n   [junit4]   1>   point=[X=0.06261935698392095, Y=-0.7037442799933893, Z=0.7068904282182165]\n   [junit4]   1> doc=260 should not have matched but did\n   [junit4]   1>   point=[X=0.4907901530264244, Y=-0.5758499506609788, Z=0.653363480679368]\n   [junit4]   1> doc=264 should not have matched but did\n   [junit4]   1>   point=[X=-0.061800745070773974, Y=-0.5326052041841663, Z=0.8425951029848608]\n   [junit4]   1> doc=287 should not have matched but did\n   [junit4]   1>   point=[X=0.08818422712556362, Y=-0.614963564464081, Z=0.7824044277871937]\n   [junit4]   1> doc=547 should not have matched but did\n   [junit4]   1>   point=[X=-0.04739860157482007, Y=-0.6574284839960851, Z=0.750985475815813]\n   [junit4]   1> doc=554 should not have matched but did\n   [junit4]   1>   point=[X=-0.5779207585184598, Y=-0.6049825614514794, Z=0.5479227404361104]\n   [junit4]   1> doc=847 should not have matched but did\n   [junit4]   1>   point=[X=0.48950343395228607, Y=-0.6406286311662371, Z=0.5914916803363882]\n   [junit4]   1> doc=854 should not have matched but did\n   [junit4]   1>   point=[X=3.042457161835612E-4, Y=-0.7128650494052442, Z=0.7005389695059573]\n   [junit4]   1> doc=907 should not have matched but did\n   [junit4]   1>   point=[X=-0.18691746426020325, Y=-0.6887854957245693, Z=0.6996969822802096]\n   [junit4]   1> doc=1094 should not have matched but did\n   [junit4]   1>   point=[X=0.24447941208949003, Y=-0.7129089791613828, Z=0.6567516017564152]\n   [junit4]   1> doc=1096 should not have matched but did\n   [junit4]   1>   point=[X=0.07576694938258999, Y=-0.7384703771772976, Z=0.6694322939400529]\n   [junit4]   1> doc=1192 should not have matched but did\n   [junit4]   1>   point=[X=0.36909002466675517, Y=-0.542817605169824, Z=0.7533496242201582]\n   [junit4]   1> doc=1268 should not have matched but did\n   [junit4]   1>   point=[X=0.3890280101830621, Y=-0.5810079873616575, Z=0.7140654641512392]\n   [junit4]   1> doc=1324 should not have matched but did\n   [junit4]   1>   point=[X=0.19309742942422353, Y=-0.5212802964477496, Z=0.8298063161802797]\n   [junit4]   1> doc=1435 should not have matched but did\n   [junit4]   1>   point=[X=-0.23456167467604777, Y=-0.690411120935381, Z=0.6836682010255007]\n   [junit4]   1> doc=1457 should not have matched but did\n   [junit4]   1>   point=[X=-0.2700839398927264, Y=-0.71866306815227, Z=0.6403541724008389]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeo3DPoint -Dtests.method=testGeo3DRelations -Dtests.seed=3B0F8F9FC5B270DA -Dtests.slow=true -Dtests.locale=th-TH -Dtests.timezone=Japan -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 0.45s | TestGeo3DPoint.testGeo3DRelations <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: invalid hits for shape=GeoCompositeMembershipShape: {[GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[[lat=0.2669499069140678, lon=-0.31249902828113546([X=0.9186752334433793, Y=-0.2968103450748192, Z=0.2640238502385029])], [lat=1.538559019421765, lon=0.0([X=0.03215971057004023, Y=0.0, Z=0.9972473454662941])], [lat=-0.5516194571595735, lon=0.0([X=0.8518418310766115, Y=0.0, Z=-0.5241686363384119])]], internalEdges={2}}, GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[[lat=0.0, lon=-3.141592653589793([X=-1.0011188539924791, Y=-1.226017000107956E-16, Z=0.0])], [lat=-1.5707963267948966, lon=-2.2780601241431375([X=-3.9697069088211677E-17, Y=-4.644115432258393E-17, Z=-0.997762292022105])], [lat=0.2669499069140678, lon=-0.31249902828113546([X=0.9186752334433793, Y=-0.2968103450748192, Z=0.2640238502385029])]], internalEdges={2}}, GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=[[lat=0.2669499069140678, lon=-0.31249902828113546([X=0.9186752334433793, Y=-0.2968103450748192, Z=0.2640238502385029])], [lat=-0.5516194571595735, lon=0.0([X=0.8518418310766115, Y=0.0, Z=-0.5241686363384119])], [lat=0.0, lon=-3.141592653589793([X=-1.0011188539924791, Y=-1.226017000107956E-16, Z=0.0])]], internalEdges={0, 2}}]}\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([3B0F8F9FC5B270DA:8B70F20B4AFFDE46]:0)\n   [junit4]    > \tat org.apache.lucene.spatial3d.TestGeo3DPoint.testGeo3DRelations(TestGeo3DPoint.java:434)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene60): {}, docValues:{}, maxPointsInLeafNode=812, maxMBSortInHeap=4.018189025913436, sim=RandomSimilarity(queryNorm=true,coord=no): {}, locale=th-TH, timezone=Japan\n   [junit4]   2> NOTE: Windows 7 6.1 amd64/Oracle Corporation 1.8.0_45 (64-bit)/cpus=4,threads=1,free=103491752,total=128974848\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeo3DPoint]",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15236988",
            "author": "Karl Wright",
            "date": "2016-04-12T11:03:16+0000",
            "content": "These docs that shouldn't be included but are all come from a \"CONTAINS\" response from the following:\n\n\n   [junit4]   1>   cycle: cell=498 parentCellID=497 x: -2147483648 TO 2147483647, y: -2147483648 TO -1115570726, z: -2140283542 TO 2139178938, splits: 1 queue.size()=0\n   [junit4]   1>     minx=-1.0011188539924791 maxx=1.0011188539924791 miny=-1.0011188539924791 maxy=-0.5200593200323914 minz=-0.997762292058209 maxz=0.9972473456973803\n   [junit4]   1>     GeoArea.CONTAINS: now addAll\n\n\n\nAn individual doc that is included that shouldn't be is:\n\n\n   [junit4]   1>   doc=88: [X=0.0038335118741108774, Y=-0.573079818081998, Z=0.8181033476562913]\n\n "
        },
        {
            "id": "comment-15236997",
            "author": "Karl Wright",
            "date": "2016-04-12T11:14:07+0000",
            "content": "Here's the polygon.  It's pretty wacko:\n\n\n   [junit4]    > Throwable #1: java.lang.AssertionError: invalid hits for shape=GeoCompositeMembershipShape:\n   {[GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=\n   [[lat=0.2669499069140678, lon=-0.31249902828113546([X=0.9186752334433793, Y=-0.2968103450748192, Z=0.2640238502385029])],\n   [lat=1.538559019421765, lon=0.0([X=0.03215971057004023, Y=0.0, Z=0.9972473454662941])],\n   [lat=-0.5516194571595735, lon=0.0([X=0.8518418310766115, Y=0.0, Z=-0.5241686363384119])]], internalEdges={2}},\n   GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=\n   [[lat=0.0, lon=-3.141592653589793([X=-1.0011188539924791, Y=-1.226017000107956E-16, Z=0.0])],\n   [lat=-1.5707963267948966, lon=-2.2780601241431375([X=-3.9697069088211677E-17, Y=-4.644115432258393E-17, Z=-0.997762292022105])],\n   [lat=0.2669499069140678, lon=-0.31249902828113546([X=0.9186752334433793, Y=-0.2968103450748192, Z=0.2640238502385029])]], internalEdges={2}},\n   GeoConvexPolygon: {planetmodel=PlanetModel.WGS84, points=\n   [[lat=0.2669499069140678, lon=-0.31249902828113546([X=0.9186752334433793, Y=-0.2968103450748192, Z=0.2640238502385029])],\n   [lat=-0.5516194571595735, lon=0.0([X=0.8518418310766115, Y=0.0, Z=-0.5241686363384119])],\n   [lat=0.0, lon=-3.141592653589793([X=-1.0011188539924791, Y=-1.226017000107956E-16, Z=0.0])]], internalEdges={0, 2}}]}\n\n\n\nIt looks offhand to me like this polygon is built using the maximum negative world X value as well as the south pole .  I'm pretty sure its extreme nature has something to do with the failure, although I don't yet see why it should. "
        },
        {
            "id": "comment-15237061",
            "author": "Karl Wright",
            "date": "2016-04-12T12:17:18+0000",
            "content": "More analysis:\n\nThe only thing in the XYZSolid that intersects the world at all is the circle described by Y=-0.5200593200323914.  Our algorithm will look for an intersection between any external edge of the polygon and this circle.  If it doesn't find such an intersection, then it concludes that the shape contains the XYZSolid.  But none of the polygon edges above are outside of the range Y=0 through Y=-0.2968103450748192, so obviously there's no intersection.\n\nThe solid's edge points listed below are correct as well, given the current logic, but what's weird is that path.isWithin() is true for both of these, since we already concluded that the shape didn't go anywhere near Y=-0.52:\n\n\n    [junit4]   2>  Edge point [X=0.0, Y=-1.0011188539924791, Z=0.0] path.isWithin()? true\n    [junit4]   2>  Edge point [X=0.0, Y=-0.5200593200323914, Z=-0.8525716793307343] path.isWithin()? true\n    [junit4]   2>  path edge point [lat=0.2669499069140678, lon=-0.31249902828113546([X=0.9186752334433793, Y=-0.2968103450748192, Z=0.2640238502385029])] isWithin()? false minx=1.9197940874358586 maxx=-0.08244362054909982 miny=0.70430850891766 maxy=0.22324897495757223 minz=1.2617861422967118 maxz=-0.7332234954588774\n    [junit4]   2>  all area points inside shape\n\n\n\nIf both Y=-1.0011188539924791 and the point [X=0.0, Y=-0.5200593200323914, Z=-0.8525716793307343] is within the shape, and there are no edge intersections, then the logic is correct to conclude it's a \"contains\" situation.  So the question is whether the logic is justified in concluding both of these points are within the shape.  The latter point in particular would seem suspicious.  Confirming now. "
        },
        {
            "id": "comment-15237078",
            "author": "Karl Wright",
            "date": "2016-04-12T12:32:01+0000",
            "content": "Not only is the edge point (0.0, -0.5200593200323914, -0.8525716793307343) within one component of the polygon, it's within TWO:\n\n\n   [junit4]   2> p1.isWithin() = false\n   [junit4]   2> p2.isWithin() = true\n   [junit4]   2> p3.isWithin() = true\n\n\n\nThis can happen legitimately only if the point is sitting on a shared edge.  But that doesn't seem to be the case here.  Hmm. "
        },
        {
            "id": "comment-15237096",
            "author": "Karl Wright",
            "date": "2016-04-12T12:47:56+0000",
            "content": "It appears as if there's potential confusion as to which way an edge goes.  Specifically, this one (from polygon 3):\n\n\n    [lat=-0.5516194571595735, lon=0.0([X=0.8518418310766115, Y=0.0, Z=-0.5241686363384119])],\n    [lat=0.0, lon=-3.141592653589793([X=-1.0011188539924791, Y=-1.226017000107956E-16, Z=0.0])]], internalEdges={0, 2}}]}\n\n\n\nThe plane this describes is a slice through the world that is horizontal in Y and tilts from the negative X extreme point downwards to an exit at X=0, Y=0, Z=negative on the other side.  Because the points describing this edge are both at Y=0, the edge can be viewed equally well as proceeding on one side of the globe as on the other.  All that determines which it is are the bounding planes, which in this case are the other two planes of this polygon.  Should the wrong side be picked for whatever reason, then no intersection would be detected.  The fact that both p2 and p3 seem to have the same trial point within them is a clue that this might be the case.  My suspicion is therefore high that polygon formation is where the bug lies. "
        },
        {
            "id": "comment-15237120",
            "author": "Karl Wright",
            "date": "2016-04-12T13:08:00+0000",
            "content": "I was able to prove that the edge point in question does not lie on the common edge of the two polygons using this code:\n\n\n    Plane p = new Plane(new GeoPoint(pm, 0.2669499069140678, -0.31249902828113546), new GeoPoint(pm, 0.0, -3.141592653589793));\n    assertTrue(p.evaluateIsZero(edgePoint));\n\n\n\n... which fails. So the only way the point can be in both sections is if the sense of the edges is reversed for p3. "
        },
        {
            "id": "comment-15237141",
            "author": "Karl Wright",
            "date": "2016-04-12T13:20:58+0000",
            "content": "Here's the entry method and the parameters for constructing this geopolygon:\n\nEntry point:\n\n\n  public static GeoPolygon makeGeoPolygon(final PlanetModel planetModel,\n    final List<GeoPoint> pointList,\n    final int convexPointIndex,\n    final List<GeoPolygon> holes) {\n\n\n\nParameters:\n\n\n   [junit4]   1> Initial point list =\n[[lat=-0.5516194571595735, lon=0.0([X=0.8518418310766115, Y=0.0, Z=-0.5241686363384119])],\n [lat=0.0, lon=-3.141592653589793([X=-1.0011188539924791, Y=-1.226017000107956E-16, Z=0.0])],\n [lat=-1.5707963267948966, lon=-2.2780601241431375([X=-3.9697069088211677E-17, Y=-4.644115432258393E-17, Z=-0.997762292022105])],\n [lat=0.2669499069140678, lon=-0.31249902828113546([X=0.9186752334433793, Y=-0.2968103450748192, Z=0.2640238502385029])],\n [lat=1.538559019421765, lon=0.0([X=0.03215971057004023, Y=0.0, Z=0.9972473454662941])]];\n convexPointIndex = 4; holes = null\n\n "
        },
        {
            "id": "comment-15237178",
            "author": "Karl Wright",
            "date": "2016-04-12T13:42:43+0000",
            "content": "The polygon clearly crosses itself, so it's illegal.  Unfortunately, nothing manages to detect its illegality so it blows up the test.\n\nThe check-in which allowed this to happen was the one that allowed co-planar points.  While that wasn't incorrect, it allows quite a range of additional crappy polygons through that otherwise would have been rejected, including this one.\n\nI will need to think through a reasonable way of detecting this particular condition.  I think detecting edge intersections would be sufficient, although that is an N^2 algorithm.  The alternative is to simply not generate bad polygons in the test.\n\nOne way to avoid the performance penalty of N^2 checks of this kind would be to pass in an (optional) boolean flag to the API which would disable this kind of expensive checking.  I don't have a good sense of whether that would be consistent or inconsistent with typical Lucene practices.  Michael McCandless, do you care to comment? "
        },
        {
            "id": "comment-15237293",
            "author": "Karl Wright",
            "date": "2016-04-12T14:39:25+0000",
            "content": "Turns out that the polygon intersection check doesn't work anyhow.  There are enough co-planar points here that it can't find any planes to actually check for intersection!  This is because it needs the plane and two boundary planes for each intersection check.  The boundary planes can be shared but not the planes themselves (or the intersection check will always fail).  Argh.\n "
        },
        {
            "id": "comment-15237327",
            "author": "Karl Wright",
            "date": "2016-04-12T14:58:58+0000",
            "content": "And, even worse, I just realized that if the one side that could go either way goes on the opposite side than I was thinking, the edges might not intersect at all.  In other words, it could well be a legal polygon.\n\nGotta keep thinking this through. "
        },
        {
            "id": "comment-15237534",
            "author": "Karl Wright",
            "date": "2016-04-12T16:55:06+0000",
            "content": "After annotating a ping pong ball, it is clear that while the proposed shape may be valid (still to be confirmed, though), the tiling chooses subpolygons that cross each other.  This is incorrect, and everything else flows from that.  It's still not clear whether the siding that the initial polygon construction does makes sense globally also.  That's the first thing to confirm.\n\n\n "
        },
        {
            "id": "comment-15237547",
            "author": "Karl Wright",
            "date": "2016-04-12T17:05:21+0000",
            "content": "The initial sidedness (when evaluating the point at (0,pi/2)) is as follows:\n\n\n   [junit4]   2>  Edge: [A=-0.0, B=0.9999999999999999, C=0.0, D=0.0, side=-1.0]; pointToTest inside? false <--- this is the starting edge\n   [junit4]   2>  Edge: [A=-1.2246467991473535E-16, B=1.0, C=-1.9902094468969375E-16, D=0.0, side=-1.0]; pointToTest inside? false\n   [junit4]   2>  Edge: [A=1.2246467991473532E-16, B=-1.0, C=4.6545309132162556E-17, D=0.0, side=1.0]; pointToTest inside? false\n   [junit4]   2>  Edge: [A=-0.3074375899237097, B=-0.9515682467915272, C=5.652278052213793E-17, D=0.0, side=1.0]; pointToTest inside? false\n   [junit4]   2>  Edge: [A=-0.31002281556332606, B=-0.9506765478000323, C=0.00999776441015607, D=0.0, side=1.0]; pointToTest inside? false\n\n\n\nThis is inconsistent; there should be at least a couple of \"true\" values for isWithin for some of the edges.  So things are messed up from the start. "
        },
        {
            "id": "comment-15237664",
            "author": "Karl Wright",
            "date": "2016-04-12T18:07:37+0000",
            "content": "The reason for the inconsistency is that four of the five points are coplanar, and the polygon also backtracks over itself (didn't realize this before).  The edge backtracking is just as problematic as if edges crossed.\n\nStill thinking through a way to detect this case and prevent the polygon from getting created. "
        },
        {
            "id": "comment-15237827",
            "author": "ASF subversion and git services",
            "date": "2016-04-12T19:38:06+0000",
            "content": "Commit 414bdea97a5c1e514c0ea28abf3d7b0471cf04a5 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=414bdea ]\n\nLUCENE-7204: Add check for backtracking over polygon path. "
        },
        {
            "id": "comment-15237828",
            "author": "ASF subversion and git services",
            "date": "2016-04-12T19:40:19+0000",
            "content": "Commit 0696a7e0c70199c2d3cb8c97967dbe248e68ab4a in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0696a7e ]\n\nLUCENE-7204: Add check for backtracking over polygon path. "
        },
        {
            "id": "comment-15238720",
            "author": "ASF subversion and git services",
            "date": "2016-04-13T06:51:51+0000",
            "content": "Commit 69f3d1fe5ff6c0e19a64ac56c4407d7213f28cce in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=69f3d1f ]\n\nLUCENE-7204: Add a test for (and make a fix for) legitimately coplanar polygon points. "
        },
        {
            "id": "comment-15238722",
            "author": "ASF subversion and git services",
            "date": "2016-04-13T06:53:42+0000",
            "content": "Commit c0698952b20e7252728f28a4b788713c45ea3726 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c069895 ]\n\nLUCENE-7204: Add a test for (and make a fix for) legitimately coplanar polygon points. "
        }
    ]
}