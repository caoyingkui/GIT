{
    "id": "SOLR-5936",
    "title": "Deprecate non-Trie-based numeric (and date) field types in 4.x and remove them from 5.0",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.8",
            "6.0"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Task",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We've been discouraging people from using non-Trie numeric&date field types for years, it's time we made it official.",
    "attachments": {
        "SOLR-5936.trunk.patch": "https://issues.apache.org/jira/secure/attachment/12639252/SOLR-5936.trunk.patch",
        "SOLR-5936.branch_4x.patch": "https://issues.apache.org/jira/secure/attachment/12637664/SOLR-5936.branch_4x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-13954396",
            "date": "2014-03-29T19:17:46+0000",
            "content": "4.x patch with deprecations.\n\nI'll work up a separate trunk patch. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13954417",
            "date": "2014-03-29T19:54:41+0000",
            "content": "Here's an updated 4.x patch that removes these field types from the schemaless example (users almost certainly won't have existing indexes with the legacy numeric/date types), and adds comments to the main example schema about these types being deprecated and removed in 5.0.\n\nThe DIH example schemas are waaaay out of date - they don't include any of the trie fields - I'll make a separate issue to clean them up. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13954438",
            "date": "2014-03-29T20:49:32+0000",
            "content": "As part of this cleanup, could somebody volunteer to create a plain-English summary of exactly what a trie field really is, what good it is, and why we can't live without them? I've read the code and, okay, there is a sequence of bit shifts and generation of extra terms, but in plain English, what's the point?\n\nI'm not asking for a recitation of the actual algorithm(s), but some intuitively accessible summary. I would note that the typical examples are for strings with prefixes rather than binary numbers.\n\nSee:\nhttp://en.wikipedia.org/wiki/Trie\n\nAnd, is trie really the best solution for number types? Does it actually have real value for float and double values?\n\nAnd I would really like to see some plain, easily readable explanation of precision step. Again, especially for real numbers.\n\nAnd how should precision step be used for dates?\n\nI mean, other than assuring sort order, why bother with trie? Or more specifically, why does a Solr (or Lucene) user need to know that trie is used for the implementation?\n\nSpecifically, for example, does it matter if a field has an evenly distributed range of numeric values with little repetition vs. numeric codes where there is a relatively small number of distinct values (e.g., 1-10, or scores of 0-100 or dates in years between 1970 and 2014) and relatively high cardinality? I mean, does trie do a uniformly great job for both of these extreme use cases, including for faceting?\n\nAnd if trie really is the best approach for numeric fields, why not just do all of this under the hood instead of polluting the field type names with \"trie\"? IOW, rename TrieIntField to IntField, etc.\n\nTo me, trie just seems like unnecessary noise to average users. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13954476",
            "date": "2014-03-29T22:31:22+0000",
            "content": "Hi Jack,\n\nAnd if trie really is the best approach for numeric fields, why not just do all of this under the hood instead of polluting the field type names with \"trie\"? IOW, rename TrieIntField to IntField, etc.\n\nThis goes back to the introduction of that in Lucene 2.9 / Solr 1.4. At that time everybody was using other field types, and stuff like IntField, SortableIntField,.. was already used as names. Because of that it was introduced to Solr with the name based on the original donated code (by me). Shortly later, Lucene renamed the field to be \"NumericField\" and \"NumericRangeQuery\" the query. The term \"trie\" is no longer used in Lucene and only the term \"precisionStep\" as a configureable flag for the number of additional term remained (in the documentation). So \"Trie(Int|Long|Float|Double|Date)Field\" is just there for \"backwards compatibility\" with earlier indexes (in Solr 1.4) and now, because the name is baked in, no way to change anymore.\n\n+1 to rename for 5.0\n\nAs part of this cleanup, could somebody volunteer to create a plain-English summary of exactly what a trie field really is, what good it is, and why we can't live without them? I've read the code and, okay, there is a sequence of bit shifts and generation of extra terms, but in plain English, what's the point?\n\nSee javadocs of NumericRangeQuery.\n\nSpecifically, for example, does it matter if a field has an evenly distributed range of numeric values with little repetition vs. numeric codes where there is a relatively small number of distinct values (e.g., 1-10, or scores of 0-100 or dates in years between 1970 and 2014) and relatively high cardinality?\n\nThis does not matter because of the structure of the additional terms. The number of terms used for actual ranges is almost always around the approx. expected number (see javadocs of NRQ). It also does not matter if it is a date or a int or a float. Internally, for trie, there are no floats or dates at all. Everything is mapped to the sortable bits (means if value_a < value_b also the bits_of_value_a < bits_of_value_b). It also has no real effect on the size of the range. Lucene always matches approximately the same number of terms (a few hundreds at maximum).\n\nSimply said, you are indexing all numbers as bits like strings formed as \"10110110\" (just in a better compressed way), with additional terms stripping some bits from the right (like \"10110110\", \"101101\", \"1011\", \"10\"). Ranges are then simplified to match middle parts of the range with shorter terms that match more documents. For that algorithm, the distribution of values is not that important. Index size only grows by a minimum size, because the shorter terms are more rare (approx. 12% more terms), with large posting lists (many docs match). But as those terms match many sequential docs, the posting lists are not so big (because of the delta encoding). So trie terms raise the index size only by a few percents, but make range queries ultimatively fast, because ranges can be matched with few terms hitting many documents.\n\nSee: http://en.wikipedia.org/wiki/Trie\n\nThis wikipedia page does not apply to numeric fields in Lucene. The term \"Trie\" only comes from the structure of the terms generated by the NumericTokenStream. But the algorithm is not the same as for trie lookups. It is just a name, nothing meaningful about the implementation. So I agree, we should nuke it from the source (only Solr is using it, Lucene and Elasticsearch don't use it). I just wanted to have a name for \"my algorithm and data structure mix\" at that time.\n\nI mean, does trie do a uniformly great job for both of these extreme use cases, including for faceting?\n\nIt is not used for facetting. Facetting does not use the additional terms. For facetting use DocValues instead of indexed fields. If you want to use Trie fields, and don't want to search on them with ranges, you can switch of the additional terms by setting precStep to 0.\n\nOne last note from my side:\nI agree with removing the impl details from the user. The user in my opinion only needs 2 types of numerics: precisionStep=4 or 8 (I think the default in solr is 8, although I disagree - e.g., Elasticsearch uses the Lucene default of 4) and another one with precisonStep=infinity (0 in solr would) for numerics that are only for sorting and don't need range queries. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13954508",
            "date": "2014-03-29T23:20:27+0000",
            "content": "Could we take the pint, plong, pfloat and all that out of the example schema while we're at it? Maybe in trunk only? I think that trunk, at least, won't have to read indexes with these it it. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13954509",
            "date": "2014-03-29T23:23:28+0000",
            "content": "Could we take the pint, plong, pfloat and all that out of the example schema while we're at it? Maybe in trunk only? I think that trunk, at least, won't have to read indexes with these it it.\n\n+1 - see the issue title  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13954669",
            "date": "2014-03-30T13:20:15+0000",
            "content": "I think we can remove this from the example schema alltogether?\n\n+   <!-- The pint (solr.IntField) field type is deprecated and will be removed in Solr 5.0! -->\n    <dynamicField name=\"*_pi\"  type=\"pint\"    indexed=\"true\"  stored=\"true\"/>\n\n\n\nI had added it a long time ago for manual testing purposes. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13954716",
            "date": "2014-03-30T15:38:00+0000",
            "content": "\nI think we can remove this from the example schema alltogether?\n\n+   <!-- The pint (solr.IntField) field type is deprecated and will be removed in Solr 5.0! -->\n    <dynamicField name=\"*_pi\"  type=\"pint\"    indexed=\"true\"  stored=\"true\"/>\n\n\n\nI had added it a long time ago for manual testing purposes.\n\nThis patch removes it. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13954722",
            "date": "2014-03-30T15:43:13+0000",
            "content": "+1 to commit last patch "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13954778",
            "date": "2014-03-30T18:23:08+0000",
            "content": "I'm going to commit the 4.x patch now - the SOLR-5937 changes will depend on the main example schema changes here. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13954779",
            "date": "2014-03-30T18:27:08+0000",
            "content": "Commit 1583179 from Steve Rowe in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1583179 ]\n\nSOLR-5936: Deprecate non-Trie-based numeric & date field types "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13954874",
            "date": "2014-03-30T23:47:45+0000",
            "content": "Commit 1583226 from Steve Rowe in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1583226 ]\n\nSOLR-5936: don't use deprecated solr.IntField field type in Solr example tests (dynamic field '*_pi', using solr.IntField via the 'pint' field type, was removed from the main example schema) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13955381",
            "date": "2014-03-31T17:00:09+0000",
            "content": "+1 to rename for 5.0\n\nWhat exactly do you suggest renaming these Solr FieldType's to?\n\nIf you are suggesting \"TrieFooField -> FooField\" then i am a HUGE -1 to that idea.\n\nIt's one thing to say that things like the (text based) IntField is deprecated, and will not work in 5.0 and people have to reindex.  but if we also rename TrieIntField to IntField, then people who are still using the (text based) IntField in their schema.xml and attempt upgrading will get really weird, and hard to understand errors.\n\nIf folks think Trie is a confusing word in the name and want to change that then fine \u2013 I'm certainly open to the idea \u2013  But we really should not re-use the name of an existing (deprecated/removed) field type in a way that isn't backcompat.\n\n\n\nIn any event, a lot of what's being discussed here in comments feels like it should really be tracked in discreet issues (these can all be dealt with independnet of this issue, and eachother):\n\n\n\tbetter jdocs for the trie numeric fields\n\trenaming the trie numeric fields\n\tsimplifying configuration of the trie numeric fields\n\n\n\n...let's please keep this issue focused on the deprecation & removal of the non-trie fields, and folks who care about these other idea can file other jira's to track them "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13963355",
            "date": "2014-04-08T19:55:17+0000",
            "content": "Patch removing non-Trie numeric/date field types from trunk.\n\nNote that the example-DIH schemas are not addressed here - I'll do that under SOLR-5937 once I've committed here.\n\nRun the following bash script before applying the patch:\n\n\nfor a in BCD{Int,Long,Str}Field.java DateField.java {Sortable,}{Double,Long,Float,Int}Field.java ; do\n     svn rm solr/core/src/java/org/apache/solr/schema/$a\ndone\nsvn rm solr/core/src/java/org/apache/solr/util/BCDUtils.java\nsvn rm solr/core/src/test/org/apache/solr/util/TestNumberUtils.java\n\n\n\nSolr tests pass, after several fun-filled days of legacy-field-type whack-a-mole...\n\nI think it's ready.  I'll commit tomorrow unless there are objections. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13964600",
            "date": "2014-04-09T19:48:16+0000",
            "content": "Commit 1586106 from sarowe@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1586106 ]\n\nSOLR-5936: Removed deprecated non-Trie-based numeric & date field types. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13964620",
            "date": "2014-04-09T20:08:34+0000",
            "content": "Committed the deprecation patch on branch_4x; committed the removal patch on trunk; and committed the branch_4x and trunk versions of the example-DIH configset modernization sub-task (SOLR-5937). "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13982647",
            "date": "2014-04-27T23:26:04+0000",
            "content": "Close issue after release of 4.8.0 "
        }
    ]
}