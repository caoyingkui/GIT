{
    "id": "LUCENE-133",
    "title": "[PATCH] QueryParser assumes getPositionIncrement() == 1",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I've written an analyzer that can output several tokens when just one is input.\nSay : \"language\" is analyzed as \"C\", \"C++\", \"Java\".\n\nAs stated by the docs, the first token (i.e. \"C\") is given a PositionIncrement\nof 1 while the other ones have a PositionIncrement of 0. All share the same \npositions as well.\n\nWhen parsed by the QueryParser, the query :\nlanguage \n\n...is interpreted as the PhraseQuery :\nC C++ Java\n\n...which is obviously not what I want.\n\nI think the condition that triggers a PhraseQuery (vector's size > 1) is \nover-simplistic. My tokens should feed a BooleanQuery with 3 clauses :\nC || C++ || Java\n\nHowever, if I input a 2 tokens query, I surely want (at least) a PhraseQuery.\n\nSay now that \"OS\" is analyzed as \"Windows\", \"Unix\", \"MacOS\" (with \nPositionIncrements set to 1-0-0 and same positions).\n\nThe query \"language OS\" should be parsed as : \n\"C Windows\" || \"C++ Windows\" || \"Java Windows\" || C Unix\" || \"C++ Unix\"\n\n\n\n \"Java Unix\" \n \"C MacOS\" \n \"C++ MacOS\" \n \"Java MacOS\".\n\n\n\n\n\nWell... there may be a better optimization for that but in any case, I think\nthat QueryParser.getFieldQuery(String field, Analyzer analyzer, String\nqueryText) can not afford to lose the Tokens.getPositionIncrement as it \nacutally does.\n\np.b.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--TestMultiAnalyzer.java": "https://issues.apache.org/jira/secure/attachment/12312251/ASF.LICENSE.NOT.GRANTED--TestMultiAnalyzer.java",
        "ASF.LICENSE.NOT.GRANTED--ZeroPositionIncrementTokenQueryParser.jj": "https://issues.apache.org/jira/secure/attachment/12312249/ASF.LICENSE.NOT.GRANTED--ZeroPositionIncrementTokenQueryParser.jj",
        "ASF.LICENSE.NOT.GRANTED--queryparser.diff": "https://issues.apache.org/jira/secure/attachment/12312250/ASF.LICENSE.NOT.GRANTED--queryparser.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2004-04-27T23:32:44+0000",
            "content": "Hi,\n\nFollowing the current discussion on a relatively close topic, I provide you my \nown dirty yet functional solution.\n\nSorry, I can't give you a patch that would be applicable to Lucene's \nQueryParser.jj because my QueryParser has some extra functionalities.\n\nHope this help but I'm very satisfied with it in the context of an arabic \nanalysis.\n\np.b. ",
            "author": "Pierrick Brihaye",
            "id": "comment-12321363"
        },
        {
            "date": "2004-04-27T23:35:08+0000",
            "content": "Created an attachment (id=11358)\nA QueryParser that can deal with positionIncrement == 0 (+ extra stuff) ",
            "author": "Pierrick Brihaye",
            "id": "comment-12321364"
        },
        {
            "date": "2004-11-11T22:33:13+0000",
            "content": "Created an attachment (id=13397)\nsimplified patch ",
            "author": "Daniel Naber",
            "id": "comment-12321365"
        },
        {
            "date": "2004-11-11T22:34:58+0000",
            "content": "Created an attachment (id=13398)\ntest cases for my patch ",
            "author": "Daniel Naber",
            "id": "comment-12321366"
        },
        {
            "date": "2004-11-11T22:39:22+0000",
            "content": "I've updated the patch to use MultiPhraseQuery, this simplifies the code and \nit could improve performance. I'll soon commit this to CVS unless someone \nfinds a problem with it (and as I'm not so familiar with QueryParser it would \nreally be great if someone can check the patch).  ",
            "author": "Daniel Naber",
            "id": "comment-12321367"
        },
        {
            "date": "2004-11-13T23:19:02+0000",
            "content": "This patch has now been committed to CVS. \n ",
            "author": "Daniel Naber",
            "id": "comment-12321368"
        }
    ]
}