{
    "id": "SOLR-12666",
    "title": "Support multiple AuthenticationPlugin's simultaneoulsy",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Authentication",
            "security"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Solr is getting support for more authentication plugins year by year, and customers have developed their own in-house plugins as well.\n\nAt the same time we see more and more JIRAs\u00a0to add BasicAuth support for various clients and use cases, such as\u00a0SOLR-12584\u00a0(Solr Exporter),\u00a0SOLR-9779\u00a0(Streaming expressions),\u00a0SOLR-11356\u00a0(ConcurrentUpdateSolrClient),\u00a0SOLR-8213\u00a0(JDBC),\u00a0SOLR-12583\u00a0(Subquery docTransformer) and\u00a0SOLR-10322\u00a0(Streaming expression daemon), SOLR-12526\u00a0(metrics history),\u00a0SOLR-11759\u00a0(DocExpirationUpdateProcessor), SOLR-11959\u00a0(CDCR), SOLR-12359\u00a0(LIR)\u00a0and probably more. Some of these may be\u00a0bugs that can be fixed\u00a0with PKI though...\n\nCurrently the framework supports only one active Auth method (except PKI which is special). Which means that if you use something else than BasicAuth, you're lucky if you get any of the above features to work with your cluster. Even the AdminUI only supports BasicAuth (implicit via browser).\n\nI think the solution is to allow more than one auth plugin to be active at the same time, allowing people to use their custom fancy auth which is tightly integrated with their environment, and at the same time activate BasicAuth for use with other clients that do not support the primary auth method.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-15T15:00:29+0000",
            "content": "In order to support this, the framework would need to allow a list of auth plugins and hand over the request to each one in turn until either one of them says OK or all of them say NOT OK.\u00a0\n\nThe AuthenticationPlugin\u00a0API is very low level now, allowing each plugin to interact with the filterChain,\u00a0set headers on the response and even terminate the request by returning an error 401 as response. We'd have to completely rewrite the API in order to support a chained call to each plugin.\n\nAnother alternative is to add a new optional method to base class AuthenticationPlugin, e.g.:\n\nAuthResponse prepareAuthenticate(req)\n\n...which would be called for all configured plugins only if multiple are configured. The method would always return a status, and then the framework could use the response to decide to which plugin it should send the final doAuthenticate() call. This would give back-compat with old configurations and plugins, but plugins who wish to be able to support chained operation can implement this one method.\n\nThe\u00a0AuthResponse\u00a0object could carry information about whether credentials are detected or not, whether the request would succeed or not, a list of HTTP headers that the plugin would return to user etc. If no plugins find any credentials on the request and blockUnknown==false, then continue the request. If none of the plugins find credentials and blockUnknown==true, then return 401 with all headers each plugin wants to return (this may include multiple WWW-Authenticate headers). If one of the plugins find credentials (e.g. Authorization Basic header) then call doAuthenticate() on that plugin. If more than one plugin find credentials, and all of them say that the request would succeed then pick the first to call doAuthenticate. However, if one of them says up front that credentials are found but the request would no succeed, then call doAuthenticate() on that one?\u00a0\n\nI'm not sure whether there's a valid case for multiple plugins detecting credentials.\u00a0One I could think of is an IP auth plugin, it would always find an IP address on the request, and it would be fully legal for that to not match the configured list if another plugin finds a valid BasicAuth header. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16581194"
        }
    ]
}