{
    "id": "SOLR-9168",
    "title": "Add availability to specify own oom handing script",
    "details": {
        "components": [
            "scripts and tools"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.5.1"
        ],
        "affect_versions": "5.5.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Right now the start script always uses $SOLR_TIP/bin/oom_solr.sh  to handle OutOfMemoryException. This script only kills instance of solr.\n\nWe need to do some additional things (e.g sent mail about this exception)\n\nWhat do you think about adding possibility to set up own script?\n\n\nProposition:\n\nif [ -z \"$SOLR_OOM_SCRIPT\" ]; then\n  SOLR_OOM_SCRIPT=$SOLR_TIP/bin/oom_solr.sh \nfi\n\n[...]\n\nnohup \"$JAVA\" \"${SOLR_START_OPTS[@]}\" $SOLR_ADDL_ARGS \\\n\t\"-XX:OnOutOfMemoryError=$SOLR_OOM_SCRIPT $SOLR_PORT $SOLR_LOGS_DIR\" \\\n        -jar start.jar \"${SOLR_JETTY_CONFIG[@]}\" \\\n\t1>\"$SOLR_LOGS_DIR/solr-$SOLR_PORT-console.log\" 2>&1 & echo $! > \"$SOLR_PID_DIR/solr-$SOLR_PORT.pid\"",
    "attachments": {
        "SOLR-9168.patch": "https://issues.apache.org/jira/secure/attachment/12897893/SOLR-9168.patch",
        "0001-SOLR-9168-Allow-users-to-specify-their-own-OnOutOfMe.patch": "https://issues.apache.org/jira/secure/attachment/12897894/0001-SOLR-9168-Allow-users-to-specify-their-own-OnOutOfMe.patch",
        "SOLR-9168-userdefined.patch": "https://issues.apache.org/jira/secure/attachment/12902419/SOLR-9168-userdefined.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-16T02:07:41+0000",
            "author": "Tyler Lubeck",
            "content": "Hi! This is something that I just ran across needing in my own work, and I figured I'd give it a shot. I wanted to submit the actual change early, while I hunt around to figure out where any documentation is that may need updating ",
            "id": "comment-16254636"
        },
        {
            "date": "2017-12-14T21:29:26+0000",
            "author": "Shawn Heisey",
            "content": "I think that we should not just replace oom_solr.sh with a user-provided script.  Because operation is undefined when OOME strikes, it is my strong opinion that it should always kill Solr, and we cannot assume that a user-provided script is going to do that.\n\nAdding custom user actions would be immensely useful, though.  So, I propose that we allow the user to define a variable with the name/location of an executable (program or script) that will be run by oom_solr.sh after Solr is killed. ",
            "id": "comment-16291643"
        },
        {
            "date": "2017-12-14T22:08:15+0000",
            "author": "Tyler Lubeck",
            "content": "Oooh ok I like that a lot. What do you think of something like this:\n\n1. Change the startup command here to instead say something like -XX:-XX:OnOutOfMemoryError='USER_SCRIPT=$SOLR_OOM_SCRIPT $SOLR_TIP/bin/oom_solr.sh'\n2. Add docs and examples to set SOLR_OOM_SCRIPT in solr.in.sh\n3. Append something like [[ -z $USER_SCRIPT]] && exec $USER_SCRIPT to the end of the existing oom_solr.sh script\n\nI'm trying to think of ways to get a custom user variables from solr.in.sh over to oom_solr.sh. That said, I haven't tested this yet and am totally up for better suggestions. \n\nAlongside that, are there any values we can provide to a custom OOM script that might be useful for custom user actions? If so, should we route them as arguments or on stdin? ",
            "id": "comment-16291693"
        },
        {
            "date": "2017-12-14T22:37:36+0000",
            "author": "Tyler Lubeck",
            "content": "Erick Erickson had asked on my initial email thread if this was needed for the Windows scripts - I've done some digging and nothing of this nature appears to be setup for solr.cmd so I think we're good, but perhaps we consider adding an oom_solr.cmd script to match what's set up for non-windows? ",
            "id": "comment-16291728"
        },
        {
            "date": "2017-12-14T23:09:14+0000",
            "author": "Shawn Heisey",
            "content": "I think it can just be done as an environment variable, optionally set in the include script (normally solr.in.sh).\n\nSOLR_USER_OOM_EXE would be one idea for the variable name.  Feel free to bikeshed. \n\nHere's a patch against master with one idea.  I have not tested this.  The bin/solr script might need to explicitly export the environment variable.\n\nIf this code works, it will propagate the arguments supplied to oom_solr to the user-defined program.  There are a few other little tweaks in this patch.\n\n\ndiff --git a/solr/bin/oom_solr.sh b/solr/bin/oom_solr.sh\nindex 5ecba6b..a8c343f 100755\n--- a/solr/bin/oom_solr.sh\n+++ b/solr/bin/oom_solr.sh\n@@ -17,14 +17,32 @@\n \n SOLR_PORT=$1\n SOLR_LOGS_DIR=$2\n-SOLR_PID=`ps auxww | grep start.jar | grep $SOLR_PORT | grep -v grep | awk '{print $2}' | sort -r`\n+SOLR_PID=`ps auxww | grep start\\.jar | grep -w $SOLR_PORT | grep -v grep | awk '{print $2}' | sort -r`\n if [ -z \"$SOLR_PID\" ]; then\n   echo \"Couldn't find Solr process running on port $SOLR_PORT!\"\n-  exit\n+  exit 1\n fi\n NOW=$(date +\"%F_%H_%M_%S\")\n+OOM_LOG_FILE=\"$SOLR_LOGS_DIR/solr_oom_killer-$SOLR_PORT-$NOW.log\"\n (\n echo \"Running OOM killer script for process $SOLR_PID for Solr on port $SOLR_PORT\"\n kill -9 $SOLR_PID\n-echo \"Killed process $SOLR_PID\"\n-) | tee $SOLR_LOGS_DIR/solr_oom_killer-$SOLR_PORT-$NOW.log\n+echo \"Killed process $SOLR_PID at $NOW\"\n+) | tee $OOM_LOG_FILE\n+\n+if [ -n \"$SOLR_USER_OOM_EXE\" ]; then\n+  if [ -f \"$SOLR_USER_OOM_EXE\" ]; then\n+    if [ -x \"$SOLR_USER_OOM_EXE\" ]; then\n+      \"$SOLR_USER_OOM_EXE\" \"$@\" | tee -a $OOM_LOG_FILE\n+      exit $?\n+    else\n+      echo User-defined OOM program $SOLR_USER_OOM_EXE found but not executable! \\\n+        | tee -a $OOM_LOG_FILE\n+      exit 1\n+    fi\n+  else\n+    echo User-defined OOM program $SOLR_USER_OOM_EXE not found! \\\n+        | tee -a $OOM_LOG_FILE\n+    exit 1\n+  fi\n+fi\n\n ",
            "id": "comment-16291765"
        },
        {
            "date": "2017-12-15T17:56:09+0000",
            "author": "Shawn Heisey",
            "content": "An updated patch for a user-defined OOM script/program.  Should be complete except for CHANGES.txt and some testing.\n\nThis patch also fixes the problem where Solr doesn't enable the OOM killer when running in the foreground.  I think there's another issue for that problem, we'll need to find it and get the issues linked.\n\nThe patch also includes new comments in solr.in.sh. ",
            "id": "comment-16292928"
        },
        {
            "date": "2017-12-15T17:58:23+0000",
            "author": "Shawn Heisey",
            "content": "Linking SOLR-9177. ",
            "id": "comment-16292932"
        },
        {
            "date": "2018-01-17T20:45:30+0000",
            "author": "Erick Erickson",
            "content": "Waking this up after a while....\n\nAs of Java 8u92, there's a couple of new options:\n\n-\u00a0ExitOnOutOfMemoryError\n\n-\u00a0CrashOnOutOfMemoryError\n\nSee: https://bugs.openjdk.java.net/browse/JDK-8152669\n\nWhat do people think about changing how this works? It would require requiring\u00a0at least u92 for it all to work, but since we're up to 151 I don't think that's onerous. If it's an earlier version the option will just be ignored anyway. The proposal then becomes:\n\n1> Enable ExitOnOutOfMemoryError by default\n\n2> Go ahead and leave oom_solr.sh as the default file, just make it\u00a0a placeholder (comment-only) file.\u00a0People can add whatever they want in there as one option.\n\n3> It's still a good idea to let the\u00a0script used be specified (optionally) by an environment variable, for instance when I'm\u00a0troubleshooting I could easily want to invoke different oom scripts on different runs.\n\n4> Go ahead and add both options to foreground too.\n\nIf users go in and take out the ExitOnOutOfMemoryError they can, although we'll strongly discourage that, Shawn's comment is well taken.\n\nThis hinges on our willingness to require 8u92, although this option would probably be ignored if run on earlier versions.\n\nOpinions? ",
            "id": "comment-16329438"
        },
        {
            "date": "2018-01-17T21:19:05+0000",
            "author": "Shawn Heisey",
            "content": "I'd be curious as to exactly what happens and what gets logged if those new options in 8u92 are used.  If both the \"exit\" option and the existing option are present, are both actions taken, or does one option override the other?\n\nIf there's no record of the action that Java has taken with the exit option, then I think we should stick with what we have. ",
            "id": "comment-16329490"
        },
        {
            "date": "2018-05-24T22:52:12+0000",
            "author": "Shawn Heisey",
            "content": "Erick Erickson, with 8u172 64-bit on Windows, I have just confirmed behavior when both ExitOnOutOfMemoryError and OnOutOfMemoryError options are configured.  I wrote a little program whose entire job was to fill up the heap and ignore OOME.\n\n\npackage foobar;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.atomic.AtomicInteger;\n\npublic class Whee\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tAtomicInteger i = new AtomicInteger();\n\t\tList<String> l = new ArrayList<>();\n\t\twhile (true)\n\t\t{\n\t\t\ttry {\n\t\t\t\tl.add(Integer.toString(i.incrementAndGet()));\n\t\t\t}\n\t\t\tcatch (OutOfMemoryError e)\n\t\t\t{\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n\nThe script configured for OnOutOfMemroyError just echos a single string to stdout.  If neither option is configured, the JVM stays running with no output, and if only the current option is configured, then I get the output from the command I configured and the JVM stays running.  If both are configured, the JVM exits and the script output is seen.\n\nThis means that if we can verify the java version is new enough, it will be dead easy to have OOM killing on ANY platform, and the executed command can just be responsible for logging the fact that an OOM occurred and Solr was killed.  I think I can leverage this on the startup scripting I've got planned for SOLR-6733 and SOLR-6734. ",
            "id": "comment-16489948"
        },
        {
            "date": "2018-05-24T23:44:51+0000",
            "author": "Erick Erickson",
            "content": "Properties props = System.getProperties();\n\nSome interesting ones are\n\"java.specification.version\" -> \"1.8\"\n\"java.runtime.version\" -> \"1.8.0_151-b12\"\n\"java.version\" -> \"1.8.0_151\"\n\nalthough I purely hate trying to parse one of these. Is \"151\" greater or less than \"92\"? ",
            "id": "comment-16490001"
        },
        {
            "date": "2018-05-28T06:19:32+0000",
            "author": "Shawn Heisey",
            "content": "I thought I had made this comment already, but it's not here, so I'll try again.\n\nWatching the exit code of the following command will determine whether the flag is supported without any need to parse a version string (POSIX version shown)\n\n\n$JAVA -Xmx1M -XX+ExitOnOutOfMemoryError -version > /dev/null 2> /dev/null\n\n\n\nIf the flag is supported, it can be combined with OnOutOfMemoryError calling an oom logging script.  If it's not supported, then we just use the existing oom killer script.\n\nI'm not sure whether the -Xmx parameter is required with -version to keep memory usage down. ",
            "id": "comment-16492310"
        }
    ]
}