{
    "id": "SOLR-6760",
    "title": "New optimized DistributedQueue implementation for overseer",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Currently the DQ works as follows\n\n\n\tread all items in the directory\n\tsort them all\n\ttake the head and return it and discard everything else\n\trinse and repeat\n\n\n\nThis works well when we have only a handful of items in the Queue. If the items in the queue is much larger (in tens of thousands) , this is counterproductive\n\nAs the overseer queue is a multiple producers + single consumer queue, We can read them all in bulk  and before processing each item , just do a zk.exists(itemname) and if all is well we don't need to do the fetch all + sort thing again",
    "attachments": {
        "SOLR-6760-branch_5x.patch": "https://issues.apache.org/jira/secure/attachment/12751489/SOLR-6760-branch_5x.patch",
        "deadlock.patch": "https://issues.apache.org/jira/secure/attachment/12749770/deadlock.patch",
        "SOLR-6760.patch": "https://issues.apache.org/jira/secure/attachment/12749958/SOLR-6760.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-12-08T11:14:10+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "+1\n\nThe current implementation is quite inefficient. I find that the overseer thread is idle/waiting for the DQ approx 30% of the time during my tests in SOLR-6554. ",
            "id": "comment-14237773"
        },
        {
            "date": "2015-08-10T22:39:47+0000",
            "author": "Scott Blum",
            "content": "First pass.  The DQ tests themselves pass, but I haven't yet run the full test suite. ",
            "id": "comment-14680890"
        },
        {
            "date": "2015-08-10T22:55:26+0000",
            "author": "Scott Blum",
            "content": "One big question I have is how to handle session/loss connection issues.  I worry that a hole in the patch I have is what happens if we lose ZK connection and regain it?  I have a feeling we'd end up in deadlock.  I think I need to add a general ConnectionStateListener so that I can mark having no watcher if we lose connection, and when connection comes back, tickle the notEmpty condition to cause all blocked threads to loop and ultimately refetch ZK state. ",
            "id": "comment-14680909"
        },
        {
            "date": "2015-08-10T22:56:35+0000",
            "author": "Scott Blum",
            "content": "Or I could tickle notEmpty when we lose session, causing the blocked threads to loop and eventually throw a SessionExpiredException ",
            "id": "comment-14680910"
        },
        {
            "date": "2015-08-11T04:32:15+0000",
            "author": "Scott Blum",
            "content": "Minimal tests passing, haven't run full suite. ",
            "id": "comment-14681224"
        },
        {
            "date": "2015-08-11T05:14:46+0000",
            "author": "Scott Blum",
            "content": "Added a patch to show the deadlock state I was in.  Not sure why...\n\nExample of a deadlock test is TestMiniSolrCloudCluster.testCollectionCreateSearchDelete ",
            "id": "comment-14681261"
        },
        {
            "date": "2015-08-11T18:50:27+0000",
            "author": "Scott Blum",
            "content": "Running ant test now, I actually expect this may pass.. ",
            "id": "comment-14682285"
        },
        {
            "date": "2015-08-11T18:55:40+0000",
            "author": "Scott Blum",
            "content": "NOTE: committer should start with an svn copy DistributedQueue -> DistributedQueueExt to preserve history. ",
            "id": "comment-14682298"
        },
        {
            "date": "2015-08-11T21:48:35+0000",
            "author": "Scott Blum",
            "content": "New patch, with better testing.  Tests all passing, I think. ",
            "id": "comment-14692315"
        },
        {
            "date": "2015-08-11T21:50:35+0000",
            "author": "Scott Blum",
            "content": "Shalin Shekhar Mangar please sanity check the block of code in testDistributedQueueBlocking() that forces a ZK disconnect / reconnect... I looked around but couldn't really find canonical patterns.  I wanted to ensure that we don't end up in a state where the session is disconnected, but we think we still have a watcher, so we're stuck forever. ",
            "id": "comment-14692319"
        },
        {
            "date": "2015-08-12T01:36:24+0000",
            "author": "Scott Blum",
            "content": "I did get ant test to pass, but the new test is flaky.  Any advice on making it less flaky?  In particular, I want to force a ZK session drop and reconnect.  This code sometimes fails:\n\n\n    // Force session expiry.\n    long sessionId = zkClient.getSolrZooKeeper().getSessionId();\n    zkServer.expire(sessionId);\n    zkClient.getConnectionManager().waitForDisconnected(10000);\n    zkClient.getConnectionManager().waitForConnected(10000);\n    assertTrue(zkClient.isConnected());\n    assertFalse(sessionId == zkClient.getSolrZooKeeper().getSessionId());\n\n ",
            "id": "comment-14692748"
        },
        {
            "date": "2015-08-12T13:18:35+0000",
            "author": "Noble Paul",
            "content": "Scott Blum Why did you choose to have  a DistributedQueue and DistributedQueueExt, why not modify the original class? ",
            "id": "comment-14693464"
        },
        {
            "date": "2015-08-12T16:46:38+0000",
            "author": "Scott Blum",
            "content": "Noble Paul I feel like the API and implementation of DistributedQueue represents a pretty clean, cohesive, and general API.  This is evidenced by the fact that most of the existing places we were using DQ \"just work\".\n\nDistributedQueueExt represents what I feel like is kind of crap that was glommed on to support the collection task queue, specifically.  You have methods like containsTaskWithRequestId() that are highly specific to the collection task queue, the strange QueueEvent and response-prefix stuff that I don't even understand what it's supposed to do, getTailId() to peek at the end of the queue with unclear semantics (is it good enough to answer with the end of the in-memory queue, or does the caller expect a synchronous read-through into ZK?), and a remove method that doesn't operate on the head of the queue.  In addition to the unclear semantics on some of these, the implementations of some of them necessarily break the clean model DQ uses and are in some cases FAR less efficient \u2013 containsTaskWithRequestId for example has to not only fetch the entire list from ZK, it then has to actually read all the data nodes.\n\nSuffice it to say I don't think anything in there is good enough to promote into the general purpose DQ.  Maybe the core issue is that the collection work queue is fundamentally looking for something more, like a distributed task queue.  I think someone should go back and analyze the true needs there and figure out if there's something better we can do. ",
            "id": "comment-14693804"
        },
        {
            "date": "2015-08-12T17:03:41+0000",
            "author": "Mark Miller",
            "content": "Good reasoning. I'd suggest we come up with a more descriptive modifier than ext though. ",
            "id": "comment-14693845"
        },
        {
            "date": "2015-08-12T17:14:18+0000",
            "author": "Scott Blum",
            "content": "+1 I was actually hoping someone would suggest a better name!  Any suggestions? ",
            "id": "comment-14693866"
        },
        {
            "date": "2015-08-12T22:48:20+0000",
            "author": "Scott Blum",
            "content": "Test is no longer flaky ",
            "id": "comment-14694350"
        },
        {
            "date": "2015-08-18T23:44:06+0000",
            "author": "Scott Blum",
            "content": "Shalin Shekhar Mangar ping for review ",
            "id": "comment-14702177"
        },
        {
            "date": "2015-08-19T13:57:53+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I saw test failures twice in a row but I can't reproduce them on beasting.\n\nLooking at the test itself I can't figure out why it would fail like this:\n\njava.util.NoSuchElementException\n        at __randomizedtesting.SeedInfo.seed([FD3C9C458FB6F5FD:9E2CC8B3009169AB]:0)\n        at org.apache.solr.cloud.DistributedQueue.remove(DistributedQueue.java:203)\n        at org.apache.solr.cloud.DistributedQueueTest.testDistributedQueue(DistributedQueueTest.java:62)\n\n\n\nPerhaps related to the tests being executed in a wrong order? Maybe each test method should get its own ZK server or at least a different znode path for the queue?\n\nIn case it helps, the seeds were:\n\nant test  -Dtestcase=DistributedQueueExtTest -Dtests.method=testDistributedQueue -Dtests.seed=F156B17A5CB6EA4 -Dtests.slow=true -Dtests.locale=ca -Dtests.timezone=Europe/Vilnius -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\nant test  -Dtestcase=DistributedQueueTest -Dtests.method=testDistributedQueue -Dtests.seed=FD3C9C458FB6F5FD -Dtests.slow=true -Dtests.locale=en_AU -Dtests.timezone=Australia/Lindeman -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n ",
            "id": "comment-14703053"
        },
        {
            "date": "2015-08-19T16:22:55+0000",
            "author": "Scott Blum",
            "content": "Rewrite DQ test code to fix race, document offer() semantics. ",
            "id": "comment-14703273"
        },
        {
            "date": "2015-08-19T16:23:58+0000",
            "author": "Scott Blum",
            "content": "Fixed.  To recap IRC discussion, the old test code assumed that calling offer() would result in the offered element immediately being available from poll().  This is contrary to the design decision in the new DQ.\n\n1) Fixed the test code assumptions and generally cleaned up the test code to be more clear.\n2) Documented offer() semantics.\n\nOn the decision to decouple offer() and poll():\n\nThe rationale for the design decision is that being the offering VM is not \"special\".  In the general case different VMs often offer while a single VM is doing the polling, the two are decoupled in reality.  So there's no real need to guarantee that offer() followed by poll() in a single VM always returns the element immediately ",
            "id": "comment-14703277"
        },
        {
            "date": "2015-08-19T18:16:00+0000",
            "author": "Scott Blum",
            "content": "Final patch? DistributedQueueExt -> OverseerCollectionQueue ",
            "id": "comment-14703504"
        },
        {
            "date": "2015-08-19T18:47:03+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks! Looks good to me. I'll commit this tomorrow morning my time. ",
            "id": "comment-14703549"
        },
        {
            "date": "2015-08-20T05:10:12+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "This gives us a great speedup as well. The rate of processing state operations went up from 4550 requests/min to 26083 requests/min i.e. a boost of 473%!\n\n\nstateFormat = 2, 10 collections, With refactoring (trunk):\n=============================================================\n\n  2> 56663 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 Overseer loop finished processing: \n  2> 56664 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t totalTime: 46405.595921\n  2> 56664 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t avgRequestsPerMinute: 0.021548541967677345\n  2> 56664 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 5minRateRequestsPerMinute: 0.0\n  2> 56664 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 15minRateRequestsPerMinute: 0.0\n  2> 56664 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t avgTimePerRequest: 46405.595921\n  2> 56664 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t medianRequestTime: 46405.595921\n  2> 56665 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 75thPctlRequestTime: 46405.595921\n  2> 56665 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 95thPctlRequestTime: 46405.595921\n  2> 56665 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 99thPctlRequestTime: 46405.595921\n  2> 56665 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 999thPctlRequestTime: 46405.595921\n  2> 56665 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 op: am_i_leader, success: 3, failure: 0\n  2> 56665 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t totalTime: 7.714871\n  2> 56665 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t avgRequestsPerMinute: 3.9009249281419294\n  2> 56665 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 5minRateRequestsPerMinute: 21.00415965703074\n  2> 56665 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 15minRateRequestsPerMinute: 22.9566897384727\n  2> 56666 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t avgTimePerRequest: 2.5716236666666665\n  2> 56666 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t medianRequestTime: 0.390077\n  2> 56666 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 75thPctlRequestTime: 7.016754\n  2> 56666 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 95thPctlRequestTime: 7.016754\n  2> 56666 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 99thPctlRequestTime: 7.016754\n  2> 56667 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 999thPctlRequestTime: 7.016754\n  2> 56667 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 op: update_state, success: 20011, failure: 0\n  2> 56669 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t totalTime: 8677.820981\n  2> 56669 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t avgRequestsPerMinute: 26054.58092669684\n  2> 56669 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 5minRateRequestsPerMinute: 28115.736803934476\n  2> 56669 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 15minRateRequestsPerMinute: 28300.17714580809\n  2> 56669 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t avgTimePerRequest: 0.4336525401529159\n  2> 56669 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t medianRequestTime: 0.4546175\n  2> 56669 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 75thPctlRequestTime: 0.5425845\n  2> 56669 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 95thPctlRequestTime: 0.68700805\n  2> 56670 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 99thPctlRequestTime: 0.9623780800000007\n  2> 56670 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 999thPctlRequestTime: 3.872901139000002\n  2> 56670 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 op: state, success: 20001, failure: 0\n  2> 56671 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t totalTime: 7268.609771\n  2> 56671 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t avgRequestsPerMinute: 26083.69778407265\n  2> 56671 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 5minRateRequestsPerMinute: 28469.456291781717\n  2> 56671 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 15minRateRequestsPerMinute: 28689.269577883602\n  2> 56671 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t avgTimePerRequest: 0.36341231793410333\n  2> 56671 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t medianRequestTime: 0.37234449999999997\n  2> 56671 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 75thPctlRequestTime: 0.451628\n  2> 56671 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 95thPctlRequestTime: 0.5609881\n  2> 56671 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 99thPctlRequestTime: 0.6850270100000001\n  2> 56671 INFO  (TEST-OverseerTest.testPerformance-seed#[4A854829B14EB462]) [    ] o.a.s.SolrTestCaseJ4 \t 999thPctlRequestTime: 3.4499434830000055\n\n\nstateFormat = 2, 10 collections, Without refactoring (trunk):\n=============================================================\n\n   [junit4]   2> 274160 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 Overseer loop finished processing: \n   [junit4]   2> 274161 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t totalTime: 264346.50677\n   [junit4]   2> 274161 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t avgRequestsPerMinute: 0.003782893537381759\n   [junit4]   2> 274161 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 5minRateRequestsPerMinute: 0.0\n   [junit4]   2> 274162 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 15minRateRequestsPerMinute: 0.0\n   [junit4]   2> 274162 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t avgTimePerRequest: 264346.50677\n   [junit4]   2> 274162 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t medianRequestTime: 264346.50677\n   [junit4]   2> 274162 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 75thPctlRequestTime: 264346.50677\n   [junit4]   2> 274162 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 95thPctlRequestTime: 264346.50677\n   [junit4]   2> 274162 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 99thPctlRequestTime: 264346.50677\n   [junit4]   2> 274162 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 999thPctlRequestTime: 264346.50677\n   [junit4]   2> 274163 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 op: am_i_leader, success: 2, failure: 0\n   [junit4]   2> 274163 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t totalTime: 10.991148\n   [junit4]   2> 274163 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t avgRequestsPerMinute: 0.4544215783246879\n   [junit4]   2> 274163 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 5minRateRequestsPerMinute: 10.257958366769442\n   [junit4]   2> 274163 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 15minRateRequestsPerMinute: 18.078447754911757\n   [junit4]   2> 274163 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t avgTimePerRequest: 5.495574\n   [junit4]   2> 274164 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t medianRequestTime: 5.4955739999999995\n   [junit4]   2> 274164 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 75thPctlRequestTime: 7.035856\n   [junit4]   2> 274164 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 95thPctlRequestTime: 7.035856\n   [junit4]   2> 274164 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 99thPctlRequestTime: 7.035856\n   [junit4]   2> 274165 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 999thPctlRequestTime: 7.035856\n   [junit4]   2> 274165 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 op: update_state, success: 20011, failure: 0\n   [junit4]   2> 274166 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t totalTime: 12397.475361\n   [junit4]   2> 274166 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t avgRequestsPerMinute: 4547.833695111793\n   [junit4]   2> 274166 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 5minRateRequestsPerMinute: 3847.5781990107857\n   [junit4]   2> 274166 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 15minRateRequestsPerMinute: 2998.648631930923\n   [junit4]   2> 274167 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t avgTimePerRequest: 0.6195330248863126\n   [junit4]   2> 274167 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t medianRequestTime: 0.5545475\n   [junit4]   2> 274167 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 75thPctlRequestTime: 0.6847515\n   [junit4]   2> 274167 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 95thPctlRequestTime: 0.8879762999999998\n   [junit4]   2> 274167 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 99thPctlRequestTime: 1.1280661800000003\n   [junit4]   2> 274167 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 999thPctlRequestTime: 3.7108806920000013\n   [junit4]   2> 274167 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 op: state, success: 20001, failure: 0\n   [junit4]   2> 274168 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t totalTime: 10719.864045\n   [junit4]   2> 274169 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t avgRequestsPerMinute: 4550.14580363099\n   [junit4]   2> 274169 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 5minRateRequestsPerMinute: 3861.3377008032517\n   [junit4]   2> 274169 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 15minRateRequestsPerMinute: 3010.807350864149\n   [junit4]   2> 274169 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t avgTimePerRequest: 0.5359664039298035\n   [junit4]   2> 274169 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t medianRequestTime: 0.483754\n   [junit4]   2> 274169 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 75thPctlRequestTime: 0.58192225\n   [junit4]   2> 274169 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 95thPctlRequestTime: 0.71668745\n   [junit4]   2> 274169 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 99thPctlRequestTime: 0.8258062500000001\n   [junit4]   2> 274169 INFO  (TEST-OverseerTest.testPerformance-seed#[1CE0793468424C19]) [    ] o.a.s.SolrTestCaseJ4 \t 999thPctlRequestTime: 13.507429244000047\n\n ",
            "id": "comment-14704299"
        },
        {
            "date": "2015-08-20T05:12:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1696706 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1696706 ]\n\nSOLR-6760: New optimized DistributedQueue implementation for overseer ",
            "id": "comment-14704302"
        },
        {
            "date": "2015-08-20T09:16:55+0000",
            "author": "Ramkumar Aiyengar",
            "content": "In the output above, 'success' new way is 3 instead of 20k, some test bug? Or is it counting with the batching as one op? ",
            "id": "comment-14704564"
        },
        {
            "date": "2015-08-20T09:40:38+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Are you looking at success of amILeader op? Look at the state operations. Those are all 20k. ",
            "id": "comment-14704595"
        },
        {
            "date": "2015-08-20T09:51:33+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Ah, got it, my bad.. ",
            "id": "comment-14704610"
        },
        {
            "date": "2015-08-20T13:08:21+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Here is a patch which applies to branch_5x.\n\n\n\tI had to use ImmutableSortedSet.of() in DistributedQueue#getChildren because there is no Collections.emptySortedSet in Java 7.\n\tChanged DistributedQueueTest to not use lambdas\n\tI had to make local variable \"data\" as final in Overseer so that it could be used in the ZkWriteCallback anonymous inner class.\n\n\n\nI should also mention that I had to change DistributedQueueTest in the trunk patch to use ExecutorUtil for creating the executor service so that forbidden-api-checker is happy:\n\nprotected ExecutorService executor = ExecutorUtil.newMDCAwareSingleThreadExecutor(new SolrjNamedThreadFactory(\"dqtest-\"));\n\n ",
            "id": "comment-14704837"
        },
        {
            "date": "2015-08-20T14:05:38+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1696789 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1696789 ]\n\nSOLR-6760: New optimized DistributedQueue implementation for overseer ",
            "id": "comment-14704944"
        },
        {
            "date": "2015-08-20T14:08:27+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Scott! ",
            "id": "comment-14704960"
        },
        {
            "date": "2015-08-20T14:43:59+0000",
            "author": "Scott Blum",
            "content": "Woohoo! ",
            "id": "comment-14705029"
        },
        {
            "date": "2015-08-20T18:07:44+0000",
            "author": "Mark Miller",
            "content": "The rate of processing state operations went up from 4550 requests/min to 26083 requests/min i.e. a boost of 473%!\n\nNice, huge win! ",
            "id": "comment-14705453"
        },
        {
            "date": "2015-08-21T21:02:53+0000",
            "author": "Gregory Chanan",
            "content": "The naming here conflicts a bit with what I was trying to accomplish with SOLR-7789, so I'm asking here for suggestions on how to resolve.  In SOLR-7789 I am trying to accomplish the following:\n#1 Add another OverseerMessageHandler (OverseerConfigSetMessageHandler) to handle ConfigSet-related operations.\n#2 From the perspective of the non-overseer (i.e. the ConfigSetsHandler), it looks like the operations are written to a separate queue from the collection queue, i.e.  getOverseerConfigSetQueue()\n#3 Since the ConfigSet operations are most likely rare and fast, it made sense to just use the existing collections queue \"under the covers\" and handle the dispatch separately.  The naming here breaks the illusion of #2, i.e. if I return an OverseerCollectionQueue it's pretty obvious to the non-overseer what's going on.\n\nSo, here's my plan:\nShort term: rename OverseerCollectionQueue to something more generic...DistributedTaskQueue?  DistributedAsyncAwareQueue?  There's nothing in there that is actually collection specific (which is why it works for the ConfigSet operations)\n\nLonger term:  I have some more suggestions for the queue interface in SOLR-7789.  For example, on the insertion side the queue should be ZKNodeProps based rather than byte [] based so we can return different queue types that understand the semantics of the operations being inserted (hard to do that with a byte []).  In particular, I want to prefix all operation names to the ConfigSetQueue with \"configsets:\" automatic to simplify the dispatching to the correct OverseerMessageHandler.  The ConfigSetsHandler needs to do this now (so sort of breaks the illusion of #2) because of the interface.  There's probably a lot more room to break things up for client vs processing side as well \u2013 i.e. why does the CollectionsHandler / ConfigSetsHandler get access to an object that lets it remove something from the queue? ",
            "id": "comment-14707457"
        },
        {
            "date": "2015-08-22T01:51:20+0000",
            "author": "Gregory Chanan",
            "content": "After some more thought, I like the rename of OverseerCollectionQueue -> OverseerTaskQueue.  It makes the term more generic, but makes it clear the scope should be limited to the Overseer (compared to my earlier suggestion of DistributedTaskQueue), which seems like a good idea  given the limitations of the interface discussed in this issue.\n\nMy latest version of the patch in SOLR-7789 makes this change. ",
            "id": "comment-14707781"
        },
        {
            "date": "2015-08-22T11:45:16+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Let's keep this discussion on SOLR-7789. I'll respond on that issue. ",
            "id": "comment-14708004"
        },
        {
            "date": "2015-08-22T17:14:15+0000",
            "author": "Scott Blum",
            "content": "Gregory, glad you're thinking about this.  This kind of discussion is just what I was hoping for when I wrote \"I think someone should go back and analyze the true needs there and figure out if there's something better we can do.\"  ",
            "id": "comment-14708094"
        }
    ]
}