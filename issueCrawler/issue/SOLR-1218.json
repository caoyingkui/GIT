{
    "id": "SOLR-1218",
    "title": "maven artifact for webapp",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It would be convenient to have a <packaging>war</packaging> maven project for the webapp, to allow launching solr from maven via jetty.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Martin Petrovsky",
            "id": "comment-12773108",
            "date": "2009-11-03T18:40:01+0000",
            "content": "I agree. This would be very handy and is in fact I found this issue while googling to see if there was a packaged war file \n "
        },
        {
            "author": "Mark Diggory",
            "id": "comment-12779875",
            "date": "2009-11-19T08:39:26+0000",
            "content": "I've set about doing my own Maven war pom and distribution for this purpose.\n\nhttp://scm.dspace.org/svn/repo/modules/dspace-solr/trunk\n\nand\n\nhttp://repo2.maven.org/maven2/org/dspace/dspace-solr/1.3.0.2/\n\nI'm working on one for 1.4.0 (I release some minor maintenance builds between releases)\n\nI've also considered producing a different release process for the maven projects that would be maintained separately from the current build process it would checkout appropriate source trees of solr to construct the release at mvn package time.\n\nI've seen some comments about the Maven build and release processes being unwieldy, but I have to disagree.\n\nMark "
        },
        {
            "author": "Tracy Flynn",
            "id": "comment-12888416",
            "date": "2010-07-14T16:20:31+0000",
            "content": "A large thanks to Mark for the Maven work.\n\nI was able to take his structure and adapt it to my needs in a few hours this morning.  I now have a clean, Mavenized 1.4.1 build structure that tidy, modular and intuitive.\n\nIf I can figure out a good place post a 'public' version of this project, I'll post it there. "
        },
        {
            "author": "Kjetil \u00d8degaard",
            "id": "comment-12912395",
            "date": "2010-09-20T08:50:22+0000",
            "content": "With the Solr WAR in the Maven repo, people would be able to easily build their own customized WARs with Maven WAR overlays. All you need to do is set a dependency to the Solr WAR from the web project with compile scope, and Maven handles the rest for you.\n\nWe've put the Solr WAR in our local repo and use this for our custom Solr deploy. If it were in central, things would be even easier. "
        },
        {
            "author": "Stevo Slavic",
            "id": "comment-12912429",
            "date": "2010-09-20T10:25:38+0000",
            "content": "Voted for the issue too.\n\nAs a temporary workaround, to reference solr.war but still keep solr config files in IDE under version control, I use following config:\n\npom.xml\n...\n<plugin>\n  <groupId>org.mortbay.jetty</groupId>\n  <artifactId>jetty-maven-plugin</artifactId>\n  <configuration>\n    <stopPort>${jetty.stop.port}</stopPort>\n    <stopKey>foo</stopKey>\n    <webApp>${env.SOLR_HOME}/example/webapps/solr.war</webApp>\n    <tempDirectory>${project.build.directory}/jetty-tmp</tempDirectory>\n    <systemProperties>\n      <systemProperty>\n        <name>solr.solr.home</name>\n        <value>${basedir}/src/main/solr/home</value>\n      </systemProperty>\n      <systemProperty>\n        <name>solr.data.dir</name>\n        <value>${project.build.directory}/solr/data</value>\n      </systemProperty>\n      <systemProperty>\n        <name>solr_home</name>\n        <value>${env.SOLR_HOME}</value>\n      </systemProperty>\n    </systemProperties>\n  </configuration>\n  <executions>\n    <execution>\n      <id>start-jetty</id>\n      <phase>pre-integration-test</phase>\n      <goals>\n        <goal>deploy-war</goal>\n      </goals>\n      <configuration>\n        <daemon>true</daemon>\n        <webAppConfig>\n          <contextPath>/solr</contextPath>\n          <tempDirectory>${project.build.directory}/jetty-tmp</tempDirectory>\n        </webAppConfig>\n        <connectors>\n          <connector implementation=\"org.eclipse.jetty.server.nio.SelectChannelConnector\">\n            <port>${jetty.http.port}</port>\n          </connector>\n        </connectors>\n      </configuration>\n    </execution>\n    <execution>\n      <id>stop-jetty</id>\n      <phase>post-integration-test</phase>\n      <goals>\n        <goal>stop</goal>\n      </goals>\n    </execution>\n  </executions>\n</plugin>\n...\n\n\n\nAnd update the SOLR_HOME environment variable with move to new Solr installation/version. This is easy for development environment, not for CI (Hudson). That's why solr.war on public repo would be handy. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-12975758",
            "date": "2010-12-29T10:54:37+0000",
            "content": "The latest patch on LUCENE-2657 includes a Solr war, as well as a maven-jetty-plugin configuration.  Please give it a try and report back on that issue. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-12984546",
            "date": "2011-01-21T03:47:45+0000",
            "content": "Maven artifact for Solr webapp is now generated (fixed in LUCENE-2657). "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013205",
            "date": "2011-03-30T15:45:51+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}