{
    "id": "SOLR-6917",
    "title": "TestDynamicLoading fails frequently.",
    "details": {
        "components": [],
        "type": "Test",
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "most recent failure:\n\n\n   [junit4] FAILURE 39.7s J5 | TestDynamicLoading.testDistribSearch <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: New version of class is not loaded {\n   [junit4]    >   \"responseHeader\":{\n   [junit4]    >     \"status\":404,\n   [junit4]    >     \"QTime\":2},\n   [junit4]    >   \"error\":{\n   [junit4]    >     \"msg\":\"no such blob or version available: test/2\",\n   [junit4]    >     \"code\":404}}\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([B49634A982DC7AFE:3570BAB1F5831AC2]:0)\n   [junit4]    > \tat org.apache.solr.core.TestDynamicLoading.dynamicLoading(TestDynamicLoading.java:154)\n   [junit4]    > \tat org.apache.solr.core.TestDynamicLoading.doTest(TestDynamicLoading.java:64)\n   [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:868)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)",
    "attachments": {
        "SOLR-6917.patch": "https://issues.apache.org/jira/secure/attachment/12698961/SOLR-6917.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-06T21:38:37+0000",
            "author": "Hoss Man",
            "content": "isn't this already being tracked in SOLR-6801? ",
            "id": "comment-14266819"
        },
        {
            "date": "2015-01-07T13:21:54+0000",
            "author": "Noble Paul",
            "content": "Yes, SOLR-6801 is reopened and  the reason why this is failing because the jar upload failed.  ",
            "id": "comment-14267617"
        },
        {
            "date": "2015-01-09T18:04:18+0000",
            "author": "Mark Miller",
            "content": "Another fail I see:   \n\n\n [junit4]    > Throwable #1: java.lang.AssertionError: Could not successfully add blob after 150 attempts. Expecting 2 items. time elapsed 15.587  output  for url is {\n   [junit4]    >   \"responseHeader\":{\n   [junit4]    >     \"status\":0,\n   [junit4]    >     \"QTime\":1},\n   [junit4]    >   \"response\":{\n   [junit4]    >     \"numFound\":1,\n   [junit4]    >     \"start\":0,\n   [junit4]    >     \"docs\":[{\n   [junit4]    >         \"id\":\"test/1\",\n   [junit4]    >         \"md5\":\"9cea0ff5afa8f603388031a0ae1f4a8d\",\n   [junit4]    >         \"blobName\":\"test\",\n   [junit4]    >         \"version\":1,\n   [junit4]    >         \"timestamp\":\"2015-01-09T18:01:16.014Z\",\n   [junit4]    >         \"size\":5325}]}}\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([1F266CF75BC3FAE5:9EC0E2EF2C9C9AD9]:0)\n   [junit4]    > \tat org.apache.solr.handler.TestBlobHandler.postAndCheck(TestBlobHandler.java:150)\n   [junit4]    > \tat org.apache.solr.core.TestDynamicLoading.dynamicLoading(TestDynamicLoading.java:114)\n   [junit4]    > \tat org.apache.solr.core.TestDynamicLoading.doTest(TestDynamicLoading.java:70)\n   [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:868)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n\n  ",
            "id": "comment-14271618"
        },
        {
            "date": "2015-01-09T18:05:44+0000",
            "author": "Mark Miller",
            "content": "isn't this already being tracked in SOLR-6801?\n\nGiven how frequently this fails in my local runs, I'd prefer it has a dedicated issue to track it so it can be bad appled if not fixed. ",
            "id": "comment-14271622"
        },
        {
            "date": "2015-01-10T14:42:05+0000",
            "author": "Mark Miller",
            "content": "If you are having trouble testing fixes for this test, rather than just trying single commits for the jenkins tester to take a shot on, I wrote this script to help with local test hardening: https://gist.github.com/markrmiller/dbdb792216dc98b018ad\n\nIf you run the same test n times in parallel for long enough, these fails tend to fall out easily. Once this script works without fail (with aggressive settings), the jenkins cluster will generally work without fail. ",
            "id": "comment-14272532"
        },
        {
            "date": "2015-01-10T14:43:21+0000",
            "author": "Mark Miller",
            "content": "Also, FYI, while this seems to fail less frequently for me, it does still fail. ",
            "id": "comment-14272533"
        },
        {
            "date": "2015-01-10T16:28:01+0000",
            "author": "Mark Miller",
            "content": "Here is one closer to the first fail I posted, but with test/1 instead of test/2.\n\n\n   [junit4] FAILURE 22.3s J0 | TestDynamicLoading.testDistribSearch <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: {\n   [junit4]    >   \"responseHeader\":{\n   [junit4]    >     \"status\":404,\n   [junit4]    >     \"QTime\":4},\n   [junit4]    >   \"error\":{\n   [junit4]    >     \"msg\":\"no such blob or version available: test/1\",\n   [junit4]    >     \"code\":404}}\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([FABDED257D0E2B4A:7B5B633D0A514B76]:0)\n   [junit4]    > \tat org.apache.solr.core.TestDynamicLoading.dynamicLoading(TestDynamicLoading.java:111)\n   [junit4]    > \tat org.apache.solr.core.TestDynamicLoading.doTest(TestDynamicLoading.java:70)\n   [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:868)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> 83034 T633 oas.SolrTestCaseJ4.deleteCore ###deleteCore\n\n ",
            "id": "comment-14272574"
        },
        {
            "date": "2015-01-12T14:03:35+0000",
            "author": "Noble Paul",
            "content": "Mark Miller\nI tried your script . removing -sync-hack target will fail the test . So I didn't remove it\n\nI ran the tests for 18 iters , but it took only 1 minure 57 seconds  \n\nthere were no failures. How do I make sure it actually ran the tests so many times ? ",
            "id": "comment-14273612"
        },
        {
            "date": "2015-01-13T15:04:41+0000",
            "author": "Mark Miller",
            "content": "java.lang.AssertionError: Could not successfully add blob after 150 attempts. Expecting 2 items. time elapsed 15 641  output  for url \n\nremoving -sync-hack target will fail the test\n\nHeh, it has nothing to do with tests. Just remove what's within it is probably the easiest path. It's super simple, I've already ran that script against this test many times. ",
            "id": "comment-14275313"
        },
        {
            "date": "2015-01-13T15:05:32+0000",
            "author": "Mark Miller",
            "content": "Latest fail message:\n\n\njava.lang.AssertionError: Could not successfully add blob after 150 attempts. Expecting 2 items. time elapsed 15 641  output  for url is {\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":0},\n  \"response\":{\n    \"numFound\":1,\n    \"start\":0,\n    \"docs\":[{\n        \"id\":\"test/1\",\n        \"md5\":\"45c318b4350b531b3d67e196175d4193\",\n        \"blobName\":\"test\",\n        \"version\":1,\n        \"timestamp\":\"2015-01-13T14:29:01.395Z\",\n        \"size\":5359}]}}\n\n ",
            "id": "comment-14275317"
        },
        {
            "date": "2015-01-13T15:42:30+0000",
            "author": "Noble Paul",
            "content": "I'm not sure if this is a problem with the feature. Because all it does is add a document and commit . I will not be surprised if it is a replication problem. Anyway I need to make it fail in my machine first\n\nI ran your beast script and used the beast.iters upto 25 iterations. I could never see this error\n\nHeh, it has nothing to do with tests. Just remove what's within it is probably the easiest path. \nDo you mean , just remove the stuff inside that target and leave the target there? \n ",
            "id": "comment-14275414"
        },
        {
            "date": "2015-01-23T01:24:50+0000",
            "author": "Noble Paul",
            "content": "with the realtime get fix ,the failures have gone away ",
            "id": "comment-14288548"
        },
        {
            "date": "2015-01-29T16:52:17+0000",
            "author": "Mark Miller",
            "content": "This test still fails:\n\n\nError Message\n\n{   \"responseHeader\":{     \"status\":404,     \"QTime\":2},   \"error\":{     \"msg\":\"no such blob or version available: test/1\",     \"code\":404}}\nStacktrace\n\njava.lang.AssertionError: {\n  \"responseHeader\":{\n    \"status\":404,\n    \"QTime\":2},\n  \"error\":{\n    \"msg\":\"no such blob or version available: test/1\",\n    \"code\":404}}\n\tat __randomizedtesting.SeedInfo.seed([D29E79B1F7699E60:AD354E600B43BC0]:0)\n\tat org.junit.Assert.fail(Assert.java:93)\n\tat org.junit.Assert.assertTrue(Assert.java:43)\n\tat org.apache.solr.core.TestDynamicLoading.testDynamicLoading(TestDynamicLoading.java:108)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1618)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:827)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:863)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:877)\n\tat org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsFixedStatement.callStatement(BaseDistributedSearchTestCase.java:940)\n\tat org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsStatement.evaluate(BaseDistributedSearchTestCase.java:915)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:365)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:798)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:458)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:836)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:738)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:772)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:783)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:365)\n\tat java.lang.Thread.run(Thread.java:745)\n\n ",
            "id": "comment-14297127"
        },
        {
            "date": "2015-02-14T21:10:06+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I noticed that some of the log lines aren't right:\n\noash.BlobHandler.handleRequestBody New blob inserting test/1 ,size ?,???, md5 3c2e709cb0aa097906dbb8542b83de9c\n\noasc.SolrException.log ERROR org.apache.solr.common.SolrException: Invalid combination of blobName test and version ?\n   [junit4]   2> \t\tat org.apache.solr.handler.BlobHandler.handleRequestBody(BlobHandler.java:187)\n   [junit4]   2> \t\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:144)\n\n ",
            "id": "comment-14321705"
        },
        {
            "date": "2015-02-15T08:18:36+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I see that Noble committed fixes for these incorrect log lines but he tagged SOLR-6924 in the commit instead of this issue.\n\nThis patch makes the following changes:\n\n\tBlobHandler.indexMap calls processor.finish for correctness\n\tJarRepository tries all shards (instead of just the first random shard) and makes sure to choose an active replica instead of any replica\n\tTestDynamicLoading waits for all nodes of .system collection to be completely recovered before proceeding with the test\n\n ",
            "id": "comment-14321860"
        },
        {
            "date": "2015-02-15T08:23:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1659893 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1659893 ]\n\nSOLR-6917: TestDynamicLoading should wait for .system collection to recover and JarRepository should always choose an active replica ",
            "id": "comment-14321867"
        },
        {
            "date": "2015-02-15T08:26:18+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1659894 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1659894 ]\n\nSOLR-6917: TestDynamicLoading should wait for .system collection to recover and JarRepository should always choose an active replica ",
            "id": "comment-14321869"
        },
        {
            "date": "2015-02-15T11:07:09+0000",
            "author": "Noble Paul",
            "content": "JarRepository tries all shards (instead of just the first random shard)\n\nI'm not sure we should do this. The most common usecase is that somebody just gave  a wrong name and it is genuinely not there. It actually does all this work for all requests. \n\nand makes sure to choose an active replica instead of any replica\n\nThis surely makes sense ",
            "id": "comment-14321919"
        },
        {
            "date": "2015-02-15T12:41:39+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I'm not sure we should do this. The most common usecase is that somebody just gave a wrong name and it is genuinely not there. It actually does all this work for all requests.\n\nSorry, I incorrectly described the change. Look at the patch that I posted for details. It doesn't actually make requests to all the shards but only tries to select an active replica looking at all shards.\n\nBut now that you raised this question, this logic of selecting a shard is itself wrong \u2013 the jar will be in exactly one shard and we should find the right shard and go to it directly. This indirection isn't saving us anything except when numShards=1. ",
            "id": "comment-14321965"
        },
        {
            "date": "2015-03-18T00:18:49+0000",
            "author": "Noble Paul",
            "content": "Keeping it open because it may not be failing with the Blobhandler issue ",
            "id": "comment-14366372"
        },
        {
            "date": "2015-04-15T00:30:50+0000",
            "author": "Timothy Potter",
            "content": "Bulk close after 5.1 release ",
            "id": "comment-14495372"
        }
    ]
}