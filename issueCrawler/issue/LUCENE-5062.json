{
    "id": "LUCENE-5062",
    "title": "Spatial CONTAINS is sometimes incorrect for overlapped indexed shapes",
    "details": {
        "components": [
            "modules/spatial"
        ],
        "fix_versions": [
            "4.4"
        ],
        "affect_versions": "4.3",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "If the spatial data for a document is comprised of multiple overlapping or adjacent parts, it might fail to match a query shape when doing the CONTAINS predicate when the sum of those shapes contain the query shape but none do individually.",
    "attachments": {
        "LUCENE-5062_Spatial_CONTAINS_with_overlapping_shapes.patch": "https://issues.apache.org/jira/secure/attachment/12588235/LUCENE-5062_Spatial_CONTAINS_with_overlapping_shapes.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-06-17T06:21:35+0000",
            "content": "This test demonstrates the problem (place in SpatialOpRecursivePrefixTreeTest):\n\n  public void testContainsPairOverlap() throws IOException {\n    mySetup(7);\n    adoc(\"0\", new ShapePair(ctx.makeRectangle(60, 70, 35, 63), ctx.makeRectangle(10, 60, 35, 63), true));\n    commit();\n    Query query = strategy.makeQuery(new SpatialArgs(SpatialOperation.Contains,\n        ctx.makeRectangle(50, 65, 40, 60)));\n    SearchResults searchResults = executeQuery(query, 1);\n    assertEquals(1, searchResults.numFound);\n  }\n\n ",
            "author": "David Smiley",
            "id": "comment-13685011"
        },
        {
            "date": "2013-06-17T21:49:36+0000",
            "content": "The attached patch corrects this problem. I left the former behavior as a boolean flag performance optimization, since if you don't have indexed data triggering this problem then there's no point in the extra overhead of checking for it at runtime.  I doubt it's much but nonetheless it was easy to add. ",
            "author": "David Smiley",
            "id": "comment-13686055"
        },
        {
            "date": "2013-06-18T16:04:32+0000",
            "content": "This patch adds the flag as a boolean constructor parameter.  And adds equals & hashCode based on it.\n\nI also made this setting and \"hasPoints\" (inverse of hasIndexedLeaves) protected field members of RecursivePrefixTreeStrategy so that subclassers can tune them.\n\nI'll commit this in a day or two. ",
            "author": "David Smiley",
            "id": "comment-13686866"
        },
        {
            "date": "2013-06-20T15:48:04+0000",
            "content": "[trunk commit] dsmiley\nhttp://svn.apache.org/viewvc?view=revision&revision=1495059\n\nLUCENE-5062: Spatial CONTAINS bug fix for indexed MultiPolygons with overlaps ",
            "author": "Commit Tag Bot",
            "id": "comment-13689347"
        },
        {
            "date": "2013-06-20T15:49:58+0000",
            "content": "[branch_4x commit] dsmiley\nhttp://svn.apache.org/viewvc?view=revision&revision=1495061\n\nLUCENE-5062: Spatial CONTAINS bug fix for indexed MultiPolygons with overlaps ",
            "author": "Commit Tag Bot",
            "id": "comment-13689350"
        },
        {
            "date": "2013-06-20T15:50:47+0000",
            "content": "Committed to both branches.\n\n* LUCENE-5062: If the spatial data for a document was comprised of multiple\n  overlapping or adjacent parts then a CONTAINS predicate query might not match\n  when the sum of those shapes contain the query shape but none do individually.\n  A flag was added to use the original faster algorithm. (David Smiley)\n\n ",
            "author": "David Smiley",
            "id": "comment-13689352"
        }
    ]
}