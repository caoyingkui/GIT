{
    "id": "SOLR-6602",
    "title": "dismax query does not match with additional field in qf",
    "details": {
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.10",
        "status": "Closed",
        "resolution": "Duplicate",
        "priority": "Major"
    },
    "description": "A query using the Solr dismax query parser does not match anymore after I've added another field to the qf parameter. I'd expect that an additional field in the qf parameter would not lead to fewer matches. \n\nTest setup\nA document with rather strange content in a field \"name_tokenized\" of type \"text_general\":\n\n\nabc_<iframe src='loadLocale.js' onload='javascript:document.XSSed=\"name\"' width=0 height=0>\n\n\n\ncan be found when using the following dismax query with qf set to field \"name_tokenized\" only: \n\nhttp://localhost:44080/solr/studio/editor?deftype=dismax&q=abc_%3Ciframe+src%3D%27loadLocale.js%27+onload%3D%27javascript%3Adocument.XSSed%3D%22name%22%27&debug=true&echoParams=all&qf=name_tokenized^2\n\n\n\nWhen submitting exactly the same query but with an additional field \"feederstate\" of type \"string\" in the qf parameter, I don't get any results.\n\nhttp://localhost:44080/solr/studio/editor?deftype=dismax&q=abc_%3Ciframe+src%3D%27loadLocale.js%27+onload%3D%27javascript%3Adocument.XSSed%3D%22name%22%27&debug=true&echoParams=all&qf=name_tokenized^2%20feederstate\n\n\n\nThe decoded value of q is: \n\nabc_<iframe src='loadLocale.js' onload='javascript:document.XSSed=\"name\"'\n\n and it seems the trailing single-quote causes problems here. (In fact, I can find the document when I remove the last char)\n\nThe parsed query for the latter case is\n\n(\n  +((\n    DisjunctionMaxQuery((feederstate:abc_<iframe | ((name_tokenized:abc_ name_tokenized:iframe)^2.0))~0.1)\n    DisjunctionMaxQuery((feederstate:src='loadLocale.js' | ((name_tokenized:src name_tokenized:loadlocale.js)^2.0))~0.1)\n    DisjunctionMaxQuery((feederstate:onload='javascript:document.XSSed= | ((name_tokenized:onload name_tokenized:javascript:document.xssed)^2.0))~0.1)\n    DisjunctionMaxQuery((feederstate:name | name_tokenized:name^2.0)~0.1)\n    DisjunctionMaxQuery((feederstate:')~0.1)\n  )~5)\n\n  DisjunctionMaxQuery((textbody:\"abc_ iframe src loadlocale.js onload javascript:document.xssed name\" | name_tokenized:\"abc_ iframe src loadlocale.js onload javascript:document.xssed name\"^2.0)~0.1)\n)/no_coord\n\n\n\nI've configured the called search handler with <str name=\"mm\">100%</str> so that all of the 5 dismax queries at the top must match. But this one does not match: DisjunctionMaxQuery((feederstate:')~0.1)\n\n(All mentioned field types are taken from the example schema.xml.)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2014-10-07T15:18:01+0000",
            "author": "Frances Webb",
            "content": "It looks like your analysis on name_tokenized is eliminating the fifth \"term\", so that you'd only have four terms that must match if only searching against name_tokenized. By adding the new search field, the fifth term is no longer being universally eliminated by the search field analyses. Because the fifth term survives the analysis for feederstate, it is no longer exempted from matching under mm=100%.\n\nThis isn't an uncommon problem, but it isn't a Solr bug. It requires re-evaluation of your search and/or index strategies. Should the single quote by itself be populated into feederstate so the fifth term will match? It might be a bug that it isn't already. Should the search string be optimized before passing it to Solr? Maybe feederstate should be a text field with punctuation eliminated and a keyword tokenizer? That would cause the fifth term to be eliminated from both fields and thus exempted from matching. ",
            "id": "comment-14161987"
        },
        {
            "date": "2014-10-07T15:58:16+0000",
            "author": "Andreas Hubold",
            "content": "Okay, if I understand correctly dismax is not suitable for searching across text_general and string fields with arbitrary content when one expects results for matches in any of these fields (as in field1:STUFF OR field2:STUFF). At least without query preprocessing.\n\nIf this is not a bug, a hint in the manual would be great: https://cwiki.apache.org/confluence/display/solr/The+DisMax+Query+Parser ",
            "id": "comment-14162031"
        },
        {
            "date": "2014-10-07T16:10:01+0000",
            "author": "Hoss Man",
            "content": "I haven't verified Frances's assessment first hand \u2013 but assuming he's correct this seems to just be a varient of SOLR-3085.\n\nIf this is not a bug, a hint in the manual would be great: https://cwiki.apache.org/confluence/display/solr/The+DisMax+Query+Parser\n\nif you could help us out with that, it would be appreciated \u2013 users who run into problems they don't understand are the usually the best people to know/understand where/how they would have expected to see information like this covered in the documentation for new users.  if you could please post a comment on the appropriate ref-guide page with some suggested wording that would be really helpful...\n\nhttps://cwiki.apache.org/confluence/display/solr/Internal+-+Maintaining+Documentation#Internal-MaintainingDocumentation-HowtoGiveFeedbackonThisDocumentation ",
            "id": "comment-14162036"
        },
        {
            "date": "2014-10-08T12:13:18+0000",
            "author": "Andreas Hubold",
            "content": "Thank you. This really seems to be a duplicate of SOLR-3085.\n\nI made a suggestion for the documentation at\nhttps://cwiki.apache.org/confluence/display/solr/The+DisMax+Query+Parser?focusedCommentId=47382698#comment-47382698 ",
            "id": "comment-14163412"
        }
    ]
}