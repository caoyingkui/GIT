{
    "id": "SOLR-7936",
    "title": "Bogus failure when deleting collections.",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Cannot Reproduce",
        "priority": "Major"
    },
    "description": "When looking at the CDCR test failures, we began to wonder whether the problem was\n1> the cdcr code itself\n2> the test framework\n3> Solr\n\nSome of the failures seem to be \"impossible\" assuming collection creation/deletion work OK.\n\nSo I wrote a little program to exercise collection creation/deletion outside the test framework by just adding and deleting the same collection over and over and over again, and it started regularly failing in OverseerCollectionMessageHandler.deleteCollection about line 780 it would throw the \"Could not fully remove the collection\" exception:\n\n\n      TimeOut timeout = new TimeOut(30, TimeUnit.SECONDS);\n      boolean removed = false;\n      while (! timeout.hasTimedOut()) {\n        Thread.sleep(100);\n        // WORKS SO FAR IF UNCOMMENTED zkStateReader.updateClusterState();\n        removed = !zkStateReader.getClusterState().hasCollection(collection);\n        if (removed) {\n          Thread.sleep(500); // just a bit of time so it's more likely other\n                             // readers see on return\n          break;\n        }\n      }\n      if (!removed) {\n        throw new SolrException(ErrorCode.SERVER_ERROR,\n            \"Could not fully remove collection: \" + collection);\n      }\n\n\n\nHowever, the collection is really gone from clusterstate. When I put the updateClusterState() in above, it doesn't seem to fail. Is it as simple as the updateClusterState() call?\n\nWithout the update in place, it failed within 20 reps very regularly. So far, with the update in place we're at 132 and counting. Any comments?\n\nIf this runs 1,000 times tonight, I'll check it in if there are no objections. I don't know what it means for CDCR yet though.\n\nI'm also suspicious of the 500ms sleep. Anyone have a clue what that's in there for?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-17T06:47:53+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Some of those recent bogus deletion failures are likely because of SOLR-5756 ",
            "id": "comment-14699081"
        },
        {
            "date": "2015-08-17T15:42:33+0000",
            "author": "Erick Erickson",
            "content": "Shalin Shekhar Mangar This was with code from last night. The CDCR failures have been around for quite a while, although SOLR-5756 probably didn't help. ",
            "id": "comment-14699707"
        },
        {
            "date": "2015-09-05T21:58:34+0000",
            "author": "denis isack",
            "content": "It is just give time for other readers or other people accessing your code (application online/or connected device if any) can get see the change if they request for the same request(code).It means each time the loop executes the delay is given so other users can get updated or any other criteria based on the business logic that need to be full field mostly to avoid pitfall of concurrency.  ",
            "id": "comment-14732114"
        },
        {
            "date": "2016-11-27T05:43:51+0000",
            "author": "Erick Erickson",
            "content": "Can't get this to fail now. ",
            "id": "comment-15699112"
        }
    ]
}