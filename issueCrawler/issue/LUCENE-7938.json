{
    "id": "LUCENE-7938",
    "title": "Bounds of bounding box are not equal to bounding box",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Not A Problem",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Bug",
        "components": [],
        "fix_versions": []
    },
    "description": "Hi,\n\nIt seems if I get the bounds of a BBox and I create a new bounding box, sometimes both bounding box are not equal. It is a problem with precision.",
    "attachments": {
        "LUCENE-7938-test.patch": "https://issues.apache.org/jira/secure/attachment/12882887/LUCENE-7938-test.patch",
        "LUCENE-7938-fix.patch": "https://issues.apache.org/jira/secure/attachment/12882886/LUCENE-7938-fix.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16135263",
            "date": "2017-08-21T15:03:03+0000",
            "content": "Attached is a test showing the issue and a possible fix. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16135482",
            "date": "2017-08-21T17:34:13+0000",
            "content": "Ignacio Vera, this is by design.  Bounding boxes are supposed to contain the objects within; there are indeed some rare cases where it is difficult to compute the bounding box and we return a larger box as a shortcut.\n\nFurthermore, you should not modify the \"equals\" method to allow a match that is not a precise object match; that's a violation of the contract of \"equals\".\n\nI'm going to close this as \"not a bug\".\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16136374",
            "date": "2017-08-22T06:18:35+0000",
            "content": "\"there are indeed some rare cases where it is difficult to compute the bounding box and we return a larger box as a shortcut.\"\n\nWhat I disagree about is that computing the bounding box of a bounding box should not be difficult. Maybe there is a better implementation of getbounds() for GeoRectangle. Currently the method does the following:\n\n  @Override\n  public void getBounds(Bounds bounds) \n{\n    super.getBounds(bounds);\n    bounds.addHorizontalPlane(planetModel, topLat, topPlane, bottomPlane, leftPlane, rightPlane)\n      .addVerticalPlane(planetModel, rightLon, rightPlane, topPlane, bottomPlane, leftPlane)\n      .addHorizontalPlane(planetModel, bottomLat, bottomPlane, topPlane, leftPlane, rightPlane)\n      .addVerticalPlane(planetModel, leftLon, leftPlane, topPlane, bottomPlane, rightPlane)\n      .addIntersection(planetModel, leftPlane, rightPlane, topPlane, bottomPlane)\n      .addPoint(ULHC).addPoint(URHC).addPoint(LLHC).addPoint(LRHC);\n  }\n\nProbably it will be enough if the method does the following:\n\n  @Override\n  public void getBounds(Bounds bounds) \n{\n    super.getBounds(bounds);\n    bounds.addPoint(ULHC).addPoint(URHC).addPoint(LLHC).addPoint(LRHC);\n  }\n\nAs we know, the bounds of this object are the points. No need to add the planes as they introduce numerical imprecision.\n\nCheers,\n\nI.  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16136570",
            "date": "2017-08-22T09:39:37+0000",
            "content": "\nAs we know, the bounds of this object are the points. No need to add the planes as they introduce numerical imprecision.\n\nIgnacio Vera, unfortunately that is not true.  This is a complex issue because planes that are almost but not quite coplanar define shapes that actually do have points on the opposite side of the world, within the precision limit of geo3d.  Random tests picked this up and I had to introduce addIntersection() to deal with this situation, since I could not see a better way to handle very thin rectangles using planes.  Polygons also have this issue.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16136623",
            "date": "2017-08-22T10:44:47+0000",
            "content": "Ok, understood! ",
            "author": "Ignacio Vera"
        }
    ]
}