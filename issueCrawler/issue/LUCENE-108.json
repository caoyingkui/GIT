{
    "id": "LUCENE-108",
    "title": "org.apache.lucene.store.FSDirectory#create bug",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "With an existing index:\nIf there is already an IndexReader created on this index, then any attempt to \nre-create the index (and therefore a call to FSDirectory#create()) will delete \nall the index files that are not opened, until it finds one and throw an \nexception. On my tests at least the 'segments' and 'deletable' files are \ndeleted. Searches on the index are not affected and after a new document \nadd/index optimize, everything goes back to normal.\nProblem is, the IndexReader#indexExists methods check for the existence of \nthe 'segments' file.\nI can see two solutions to this problem: \n\n\tthe quick and dirty one: change the test to look for a *.f1 file.\n\ta cleaner approach is to modify the create method so that it ensures that\nevery file in the index is deletable before actually deleting it.\nI have implemented this by attempting to rename all the files prior to delete \nthem: if one rename fails, then the file can't be deleted. All the files \nreturn to their orginal name and no deletion is attempted.\n\n\n\nhere's the result of a CVS diff on the latest CVS version:\ndiff -r1.19 FSDirectory.java\n163,167c163,187\n<     for (int i = 0; i < files.length; i++) \n{\n<       File file = new File(directory, files[i]);\n<       if (!file.delete())\n<         throw new IOException(\"couldn't delete \" + files[i]);\n<     }\n\u2014\n>     ArrayList deletableFiles = new ArrayList();\n>     final String DEL_EXTENSION = \".deleted\";\n>     String undeletable = null;\n> \tfor (int i = 0; i < files.length; i++) \n{\n> \t  File file = new File(directory, files[i]);\n> \t  File delFile = new File(directory, files[i] + DEL_EXTENSION);\n> \t  if (!file.renameTo(delFile))\n> \t\tundeletable = files[i];\n> \t  else // rename the file back to its old extension\n> \t    delFile.renameTo(new File(directory, files[i]));\n> \t}\n> \tif (undeletable == null) {\n> \t\t// now really delete all files\n> \t    for (int i = 0; i < files.length; i++) {\n> \t      File file = new File(directory, files[i]);\n> \t      if (!file.delete()) \n{\n> \t\t\t  undeletable = files[i];\n> \t\t\t  break;\n> \t      }\n> \t    }\n> \t}\n> \tif(undeletable != null) \n{\n> \t\t// finally, throw the exception!\n> \t\tthrow new IOException(\"couldn't delete \" + undeletable);\n> \t}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2003-09-10T23:20:23+0000",
            "content": "I don't know what to do with this bug and patch.  I feel like working around a\ndeveloper writing an application that can open two IndexReader instances on the\nsame directory is too much.\n\nI feel like the onus should be on the application developer to check for this\ncase, and not on Lucene to work around it.\n\nWhat do other developers think? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321302"
        },
        {
            "date": "2003-09-19T04:54:59+0000",
            "content": "This should be fixed now, after applying Christoph Goller's patch last week.\nIf you are still having problems, please provide a self-contained unit test that\ndemonstrates the problem. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321303"
        }
    ]
}