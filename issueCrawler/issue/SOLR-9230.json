{
    "id": "SOLR-9230",
    "title": "Change of default to BinaryRequestWriter breaks some use cases",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "From Solr 6.0 onwards, SOLR-8595 changes the default writer in HttpSolrClient (et al) from RequestWriter to BinaryRequestWriter.\n\nThe RequestWriter writes java.math.BigDecimal values using a simple toString() on the value. This means that a BigDecimal-value is passed to the server using its text representation, which is then mapped into whatever the server wants. (The RequestWriter probably uses toString() on anything it sees)\n\nThe BinaryRequestWriter instead handles unknown value types by writing a string containing the class name, a colon, and then the toString() value. This means that a BigDecimal-value is passed to the server as a text representation \"java.math.BigDecimal:12345\", which the server cannot convert to a number, and which then stops indexing.\n\nI'm not entirely sure that this behaviour is a bug, but I'm fairly sure that the quiet change of behaviour qualifies. The \"Trivial Patch\" (quote from SOLR-8595) isn't, when straight forward indexing scenarios quietly stop working.\n\nThere are several possible paths forward:\n\n\n\tHave the BinaryRequestWriter (really the JavaBinCodec) encode java.lang.Numbers as Strings, the way the RequestWriter does\n\tAdd something in release notes to inform users about the change\n\n\n\nSOLR-4021 describes the problem, but the change of default writer increases problem visibility. SOLR-6165 somehow seems relevant.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-06-22T05:02:56+0000",
            "author": "David Smiley",
            "content": "Also related to SOLR-8866.  Perhaps the same approach could be taken here \u2013 throw an exception if we don't know the type.  Better to fail than silently do the wrong thing.\n\nIt's a separate matter, I think, to handle BigDecimal/BigInteger. ",
            "id": "comment-15343707"
        }
    ]
}