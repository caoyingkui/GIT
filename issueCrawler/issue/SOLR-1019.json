{
    "id": "SOLR-1019",
    "title": "ConstantScorePrefixQuery.java - Absolute FP comparison on getBoost()",
    "details": {
        "affect_versions": "1.3",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "Absolute FP comparisons are inherently unsafe.  Comparisons of FP done under an epsilon resolution difference. \n\naffects ConstantScorePrefixQuery#toString() and #equals()",
    "attachments": {
        "SOLR-1019.patch": "https://issues.apache.org/jira/secure/attachment/12400109/SOLR-1019.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12675167",
            "date": "2009-02-19T22:48:28+0000",
            "content": "In both the lines you suggest changing, i believe using value equality is actually more correct then an epsilon comparison given the intent of the code.\n\n1) In toString() the intent is to display the boost when it isn't the default (1.0f), an epsilon based comparison could hide the boost value when it varies from the default by an extremely small amount.  It's better to output \"^1.000000001\" then nothing at all.\n\n2) In the equals method we need to know if the Query objects are ... well, equal.  if the boost values vary by an amount less then the epsilon we would erroneously return true.  (if i'm not mistaken, the equals change you're suggesting would actually break caching in some edge cases, because it would result in situations where...\n\nqueryA.equals(queryB) && ! queryA.hashCode()==queryB.hashCode()\n "
        },
        {
            "author": "Karthik K",
            "id": "comment-12675945",
            "date": "2009-02-23T15:20:07+0000",
            "content": "I believe either of the scenarios in which the fix might be invalid would be related to the value of epsilon . If we keep the value of epsilon small enough - Math.Double.MIN_VALUE - we might get around the issue. The bottom line is that absolute FP comparisons can result in unpredictable behaviors, depending on the underlying implementation something that we want to avoid.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12675963",
            "date": "2009-02-23T16:22:21+0000",
            "content": "Absolute comparisons aren't good for the result of floating point calculations, but things like boosts are pretty much always set from constants.  For the very rare case that these constants are calculated, it should be up to the code doing the calculation to round or normalize if that is desired.  In any case, the failure mode in this extremely unlikely event is still graceful - everything still works but the cache hit ratio goes down.\n\nAnother point:  from the Lucene point of view, a boost of 0.0 and a boost of .0000001 are very different - lucene screens out scores <=0.0f (although Solr does not). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12676120",
            "date": "2009-02-23T23:32:22+0000",
            "content": "The bottom line is that absolute FP comparisons can result in unpredictable behaviors, depending on the underlying implementation something that we want to avoid.\n\nThe behavior of equality operators on floats is fairly explicit and unambiguous in JLS s15.21 \u2013 if a JVM implementation produces unexpected behavior on these comparisons that's a bug in the JVM implementation.\n\nIt's not ConstantScorePrefixQuery's job (or the job of any other Query class) to second guess whether the caller considers a boost value of X+epsilon to be \"close enough\" to a boost value of X to consider them the same query.\n\n(FWIW: I agree that equality tests on float/double values tend to indicate  ... i just disagree with the assessment that there actually is a mistake in these specific cases) "
        }
    ]
}