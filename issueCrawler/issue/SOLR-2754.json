{
    "id": "SOLR-2754",
    "title": "create Solr similarity factories for new ranking algorithms",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "To make it easy to use some of the new ranking algorithms, we should add factories to solr:\n\n\tfor parametric models like LM and BM25 so that parameters can be set from schema.xml\n\tfor framework models like DFR and IB, so that different basic models/normalizations/lambdas can be chosen",
    "attachments": {
        "SOLR-2754.patch": "https://issues.apache.org/jira/secure/attachment/12494183/SOLR-2754.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13103370",
            "date": "2011-09-13T05:40:13+0000",
            "content": "untested patch, i'll work up tests tomorrow. "
        },
        {
            "author": "David Mark Nemeskey",
            "id": "comment-13106683",
            "date": "2011-09-16T18:44:22+0000",
            "content": "Robert, I've reviewed the patch. Even though I don't have any experience with Solr, the code is very clear, well documented and easy to understand. I have the following observations (or questions, more like):\n\n1. LMDirichletSimilarity has a mu-less constructor. Maybe we could avoid defining a constant in two places if we used that? E.g.\n\nmu = params.getFloat(\"mu\");\n...\n\nLMDirichletSimilarity sim = (mu != null) ? new LMDirichletSimilarity(mu)\n                                         : new LMDirichletSimilarity();\n\n\nSame goes for H3 and Z.\n\n2. I think it is a nice feature of the new framework that the user can create new basic models, normalizations, distributions, etc. and just plug them in to DFRSimilarity or IBSimilarity. However, these factories can only handle those that we have defined ourselves. Wouldn't it be good if we could instantiate custom classes via reflection? It could work similarily as in Terrier: keep the current code for core models, and use reflection if the user specifies a (fully specified) classname.\n\n3. I don't know the Lucene/Solr conventions for line length. There are some rather long lines in IB and DFR, but maybe its not a problem? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106707",
            "date": "2011-09-16T18:58:22+0000",
            "content": "Thanks for the review David!\n\n\nLMDirichletSimilarity has a mu-less constructor. Maybe we could avoid defining a constant in two places if we used that? E.g.\n\nSame goes for H3 and Z.\n\n+1, I think it would be good (though probably unavoidable for e.g. BM25's (k1, b) to do it this way if we want to provide default parameters.\n\nAlternative, another idea would be for all 'parametric' models to require the parameter? Then in the \"still-to-be-written\" test config\nthat tests all these sims, we would just have good default parameters specified? Part of me likes this solution: if you are using a parametric\nmodel then it requires you to think about it?\n\n\nWouldn't it be good if we could instantiate custom classes via reflection?\n\nWe could add this, e.g. if the parameter doesnt match any of the supplied names. But i started thinking about this, say I created NormalizationRob,\nand it wants a bunch of parameters... at the end of the day for practical purposes a user could just make their own simple factory that uses \nI(F)BRob(2.3, 4.5, 6.99) or whatever they wanted, because I think the intent here is to support all of lucene-core's capabilities? \nIts still pluggable in the sense someone can always make their own factory for their custom stuff.\n\n\nI don't know the Lucene/Solr conventions for line length. There are some rather long lines in IB and DFR, but maybe its not a problem?\n\nYeah maybe especially for the javadocs, but we can probably re-arrange these. "
        },
        {
            "author": "David Mark Nemeskey",
            "id": "comment-13106795",
            "date": "2011-09-16T20:40:11+0000",
            "content": "Alternative, another idea would be for all 'parametric' models to require the parameter? ... Part of me likes this solution: if you are using a parametric model then it requires you to think about it?\n\nI can understand the reasoning behind this idea. On the other hand, for some models, the parameter has a value that's optimal in a wide range of cases. In such cases, I think it we could make the life of the user easier by falling back to this value. (Actually, that's why LMJelinekMercerSimilarity does not have a default constructor; there is no single parameter value that is kind-of-optimal in all cases).\n\nBut i started thinking about this, say I created NormalizationRob, and it wants a bunch of parameters...\n\nYes, I know, it'd be a bit difficult to support that... maybe if all Similarities and models had a constructor with a map as a parameter? I'm not sure we want that, though.\n\nI think the intent here is to support all of lucene-core's capabilities?\n\nIn that case let's forget reflection for now. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106924",
            "date": "2011-09-16T23:54:57+0000",
            "content": "\nI can understand the reasoning behind this idea. On the other hand, for some models, the parameter has a value that's optimal in a wide range of cases. In such cases, I think it we could make the life of the user easier by falling back to this value. (Actually, that's why LMJelinekMercerSimilarity does not have a default constructor; there is no single parameter value that is kind-of-optimal in all cases).\n\nWell, we can do both: we can provide these basic parameters as default values to be friendly, but at the same time in the test or example xml configurations that use these, our examples can have the parameters set. Even in the JelinekMercer case, our example can also be set to 0.7, because thats the default for long queries and you typically don't use this smoothing for short queries (you would usually use Dirichlet instead), at least that was my reasoning with the default.\n\n\nYes, I know, it'd be a bit difficult to support that... maybe if all Similarities and models had a constructor with a map as a parameter? I'm not sure we want that, though.\n\nYeah, I think we want to have hard type-safe apis for the sims themselves, and part of my line of thinking is the case of \"I'm going to plug in a custom normalization into DFR\" is a pretty expert case for a Solr user at this moment, if you are that expert you could also write a 3 LOC sim factory that sets up your sim with your custom normalization method. "
        },
        {
            "author": "David Mark Nemeskey",
            "id": "comment-13107069",
            "date": "2011-09-17T09:34:45+0000",
            "content": "Well, we can do both: we can provide these basic parameters as default values to be friendly, but at the same time in the test or example xml configurations that use these, our examples can have the parameters set.\n\nThat's a good idea. I could modify the patch if you want to, and also break the long lines into two in the meantime. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13107116",
            "date": "2011-09-17T13:16:25+0000",
            "content": "+1 "
        },
        {
            "author": "David Mark Nemeskey",
            "id": "comment-13107464",
            "date": "2011-09-18T16:11:29+0000",
            "content": "Done. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13107489",
            "date": "2011-09-18T18:08:22+0000",
            "content": "Thanks David, I took your patch and I'm adding tests right now, will upload a new patch soon. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13109643",
            "date": "2011-09-21T16:47:01+0000",
            "content": "i added tests for the new factories: i think its ready to commit. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13109743",
            "date": "2011-09-21T18:21:06+0000",
            "content": "Thanks David! "
        }
    ]
}