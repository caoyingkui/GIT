{
    "id": "SOLR-265",
    "title": "Make IndexSchema updateable in live system",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I've seen a few items on the mailing lists recently surrounding updating a schema on the file system and not seeing the changes get propagated.  while I think that automatically detecting schema changes on disk may be unrealistic, I do think it would be useful to be able to update the schema without having to bounce the webapp.  the forthcoming patch adds a method to SolrCore to do just that as well as a request handler to be able to call said method.  \n\nThe patch as it exists is a straw man for discussion.  The one thing that concerned me was making IndexScheam schema non-final in SolrCore.  I'm not quite sure why it needs to be final to begin with so perhaps someone can shed some light on the situation.  Also, I think it would be useful to be able to upload a schema through the admin GUI, have it persisted to disk and then call relaodSchema()but that seemed like a good bit of effort for a patch that might not even be a good idea.\n\nI'd also point out that this specific problem is one I've been trying to address recently and while I think it could be solved with various dynamic fields the combination of all the options for fields seemed to create too many variables to make useful dynamic name patterns.\n\nThoughts?\n\n\n\twill",
    "attachments": {
        "IndexSchemaReload.patch": "https://issues.apache.org/jira/secure/attachment/12360057/IndexSchemaReload.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Will Johnson",
            "id": "comment-12505912",
            "date": "2007-06-18T18:25:13+0000",
            "content": "updates to:\n\n\n\tsolconfig.xml to register handler\n\tIndexSchema to add reload() method that clears() all internal data structures and calls readconfig()\n\ta new o.a.s.handler.admin.IndexSchemaRequestHandler to trigger the updating\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12505927",
            "date": "2007-06-18T19:16:40+0000",
            "content": "Doesn't this have thread-saftey and unsolvable consistency issues?\nIt doesn't seem like a specific instance of IndexSchema should change in the middle of a request.\n\nPerhaps it's better to create a new IndexSchema, and keep track of the current schema in the SolrCore (a dependency that wasn't there before, but someone needs to keep track of the current schema if it can change). "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12505938",
            "date": "2007-06-18T19:51:27+0000",
            "content": "After doing some more thinking about the issue after I submitted the\npatch I agree that there probably are some threading issues to work out.\nI was working on another approach that was much larger (only keep 1 copy\nin SolrCore accessible by getSchema() and add protection there) but that\nrequired a much larger code change than the one posted so I went with\nthe shorter to at least promote discussion.  If the single schema\ngetter() makes sense, I'll be happy to provide such a patch. \n\nThere do seem to be other alternatives though:\n\nFirst is a ModifySchema handler that could support adding fields etc\nwhich should be easier to defend against from a synchronization\nstandpoint. At least there are fewer times when fields.clear() has been\ncalled but new values have not been added back.  As this is all I care\nabout at the moment I'd be happy, but I assume someone might want to do\nsomething else more complex.\n\nThe second is to wrap up the clear/repopulate methods with some basic\nprotection but actually allow different schemas inside a single request.\nThis could be done by requiring all new schemas to be 'compatible' in\nsome defined way.  Since there doesn't seem to be any validation that\ngoes on if I stop the app, change the schema and then restart it,\ncompatible might just mean valid xml.  If field 'new_x' suddenly appears\nduring the middle of my post it shouldn't have any effect as my posted\ndata won't contain 'new_x.'  from a client's contractual perspective, if\nyou want new fields processed correctly you have to wait for\nupdateSchema to finish.\n\nIn any case, it seems to me that restarting a webapp and suffering\ndowntime is a heavy price to pay just to add a new field or even to just\nchange an existing field property.\n\n\n\twill\n\n\n\n\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12505950",
            "date": "2007-06-18T20:46:50+0000",
            "content": "I haven't looked at the patch, but have a couple questions:\n\n\tWhat is the motivation/use case for editing the schema at runtime?  (I'm not suggesting there aren't good ones, just curious)\n\tWould changes be saved?\n\tWhy not dynamic fields?\n\n\n\n> it seems to me that restarting a webapp and suffering\n> downtime is a heavy price to pay just to add a new field or even to just\n> change an existing field property.\n\nadding fields should be relatively straightforward \u2013 the more I learn about lucene indexing(indexes), it seems like most schema changes require the index to be rebuilt anyway.  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12541192",
            "date": "2007-11-09T01:10:16+0000",
            "content": "It seems like you won't need to update/edit a schema if you can 'reload' the core at runtime.\n\nPerhaps we should close this issue and make sure SOLR-350 handles what you are looking for. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12551082",
            "date": "2007-12-12T19:08:52+0000",
            "content": "SOLR-350 lets you \"RELOAD\" a core.  this will reload the IndexSchema also "
        }
    ]
}