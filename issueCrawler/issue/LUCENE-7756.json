{
    "id": "LUCENE-7756",
    "title": "Only record the major that was used to create the index rather than the full version",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "7.0"
        ]
    },
    "description": "LUCENE-7703 added information about the Lucene version that was used to create the index to the segment infos. But since there is a single creation version, it means we need to reject calls to addIndexes that can mix indices that have different creation versions, which might be seen as an important regression by some users. So I have been thinking about only recording the major version that was used to create the index, which is still very valuable information and would allow us to accept calls to addIndexes when all merged indices have the same major version. This looks like a better trade-off to me.",
    "attachments": {
        "LUCENE-7756.patch": "https://issues.apache.org/jira/secure/attachment/12860882/LUCENE-7756.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15945281",
            "date": "2017-03-28T14:36:46+0000",
            "content": "Here is a patch. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15945828",
            "date": "2017-03-28T19:57:15+0000",
            "content": "Should we maybe record the complete version, but only check the major version in addIndexes?  It seems like it could be helpful at some point to know the minor/bugfix values of the release too, maybe? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15945863",
            "date": "2017-03-28T20:14:30+0000",
            "content": "Thanks for having a look! So say you have an index that was created with version X.Y and then you call addIndexes with an index that was created with version X.Z. What should be the created version after addIndexes has been called? Do you think we should just ignore the addIndexes call and retain X.Y as a created version, or maybe take the min or something?\n\nSomething else that I am considering, is to add the version of the oldest segment that contributed to a segment through merges, in addition to the index created version (major). This might address your concern if it is mainly about losing information that might be useful for debugging purposes? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15946900",
            "date": "2017-03-29T10:29:36+0000",
            "content": "Hmm addIndexes is indeed tricky on how we would update the created version.\n\nOK I like your plan to only keep the major version (for the whole index), and then to also track the oldest (full X.Y.Z) version in a segment's \"genealogy\".\n\nThanks Adrien Grand. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15948792",
            "date": "2017-03-30T10:11:06+0000",
            "content": "Here is a patch. It is a bit verbose since I had to write a new SegmentInfoFormat in order to add the minimum version that contributed to a segment to SegmentInfo. I tried to make the patch not lenient by raising errors if this version is not provided for indexes created on or after Lucene 7. But this made bw testing of old segment info formats a bit tricky, so I had to add a hack (see SegmentInfos) that we can remove when we are on Lucene 8 in a couple months.\n\nI also factored the creation version, the minimum version that contributed to a segment and the index sort in a wrapper class called IndexInfos in order to keep the number of methods on LeafReader contained. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15950678",
            "date": "2017-03-31T10:57:26+0000",
            "content": "Thanks Adrien Grand, this really turned into quite a doozie!\n\n+1 to not be lenient.\n\nI'm a little confused by the testing hack for SegmentInfos: won't pre-7.0 indices \"legitimately\" have a null minVersion, and so Lucene needs to handle that \"gracefully\"?  For such old indexes, does/shouldn't SegmentInfo.getMinVersion() return null?  And if those old segments get merged even with new segments, it should still return null?\n\nCan we rename IndexInfos to SegmentMetaData maybe?  infos is heavily used in Lucene!  And improve its javadocs, maybe Provides read-only metadata about the segment or so?\n\nTypo te in the javadocs for SegmentInfos.ALLOW_OLD_CODECS_TO_WRITE:\n\n\nof a segment, so for testing those codecs we allow te temporarily set the\n\n\n\nIn IW.addIndexes(CodecReader...), why do you pass null for the minVersion of the newly merged SegmentInfo?  Shouldn't it be the min across the incoming readers?  Oh, I see!  SegmentMerger's ctor sets it, OK.  Can you add a comment in both places (here, and in _mergeInit) in IW where you pass null saying that SegmentMerger takes care of it?\n\nIn IndexInfos ctor, can you throw an exception if the createdMajorVersion is invalid (less than 7 I guess)?  Because, I was looking at ParallelLeafReader and it seems like it's logic is possibly wrong if ever the major version was somehow set to -1. Likewise if minVersion is null but major version is >= 7.\n\nMaybe factor out the \"if major version is >= 7 and minVersion is null\" checking to a private helper method in SegmentInfos?  I think there are at least 4 places doing it.\n ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15950843",
            "date": "2017-03-31T13:16:23+0000",
            "content": "I'm a little confused by the testing hack for SegmentInfos: won't pre-7.0 indices \"legitimately\" have a null minVersion, and so Lucene needs to handle that \"gracefully\"? For such old indexes, does/shouldn't SegmentInfo.getMinVersion() return null? And if those old segments get merged even with new segments, it should still return null?\n\nAbsolutely. We expect all indices created on or after 7.0 to set the minVersion. However for testing old codecs, we create new indices (createdVersion = 7) with old codec components that do not support recording the minVersion, such as Lucene62RWSegmentInfoFormat. Without the hack, all tests that use a codec whose SegmentInforFormat is not Lucene70SegmentInfoFormat or SimpleTextSegmentInfoFormat would fail. This is a bit of a Frankenstein situation, but those tests for old codecs components like TestLucene62SegmentInfoFormat have value in my opinion so I did not want to remove them. There are only 3 tests that make use of this hack: TestLucene50SegmentInfoFormat, TestLucene62SegmentInfoFormat and TestLucene62SegmentInfoFormat.\n\nI like your other suggestions, I'll apply them! ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15952827",
            "date": "2017-04-02T19:43:18+0000",
            "content": "However for testing old codecs, we create new indices (createdVersion = 7) with old codec components that do not support recording the minVersion, such as Lucene62RWSegmentInfoFormat\n\nAhh, OK, and that is because our \"fake creating of old indices\" isn't perfect (sets createdVersion = 7).  OK, this makes sense, and is hard to think about.  Thanks. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15953591",
            "date": "2017-04-03T14:44:04+0000",
            "content": "I found a different way that does not require to add the hack to SegmentInfos, instead I commit empty segment infos to the directory that we use for testing in BaseFileFormatTestCase, which as a side-effect sets the created version for the index. I think it is better since it only impacts the test framework rather than core?\n\nOther feedback has been applied. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15954305",
            "date": "2017-04-03T23:14:31+0000",
            "content": "+1, thanks Adrien Grand. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15954749",
            "date": "2017-04-04T07:58:17+0000",
            "content": "Commit 23b002a0fdf2f6025f1eb026c0afca247fb21ed0 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=23b002a ]\n\nLUCENE-7756: Only record the major Lucene version that created the index, and record the minimum Lucene version that contributed to segments. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15954787",
            "date": "2017-04-04T08:15:06+0000",
            "content": "Thanks Mike for looking at this larg-ish patch! ",
            "author": "Adrien Grand"
        }
    ]
}