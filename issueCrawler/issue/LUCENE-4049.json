{
    "id": "LUCENE-4049",
    "title": "PrefixQuery (or it's superclass MultiTermQuery) ignores index time boosts",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.5,                                            3.6",
        "resolution": "Not A Problem",
        "status": "Resolved"
    },
    "description": "It is possible to set boost to fields or documents during indexing, so certain documents can be boostes over others. This works well with TermQuery or FuzzyQuery but not with PrefixQuery which ignores the individual values.\n\nTest Code below:\n\n\nimport java.io.IOException;\n\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.IndexWriterConfig;\nimport org.apache.lucene.index.Term;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.PrefixQuery;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.ScoreDoc;\nimport org.apache.lucene.search.TopScoreDocCollector;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.RAMDirectory;\nimport org.apache.lucene.util.Version;\n\nimport com.evermind.tools.calendar.StopWatch;\n\n\npublic class LuceneTest\n{\n    public static void main(String[] args) throws Exception\n    {\n        Directory index=new RAMDirectory();\n        StandardAnalyzer analyzer=new StandardAnalyzer(Version.LUCENE_35);\n        IndexWriterConfig config=new IndexWriterConfig(Version.LUCENE_35, analyzer);\n\n        IndexWriter w = new IndexWriter(index, config);\n        addDoc(w, \"Hello 1\",1);\n        addDoc(w, \"Hello 2\",2);\n        addDoc(w, \"Hello 3\",1);\n        w.close();\n        StopWatch.stop();\n\n        IndexReader reader = IndexReader.open(index);\n        IndexSearcher searcher = new IndexSearcher(reader);\n\n//        Query q = new TermQuery(new Term(\"f1\",\"hello\"));\n        Query q = new PrefixQuery(new Term(\"f1\",\"hello\"));\n\n        TopScoreDocCollector collector = TopScoreDocCollector.create(10, true);\n        searcher.search(q, collector);\n        for (ScoreDoc hit: collector.topDocs().scoreDocs)\n        {\n            Document d = searcher.doc(hit.doc);\n            System.err.println(d.get(\"f1\")+\" \"+hit.score+\" \"+hit.doc);\n        }\n    }\n\n    private static void addDoc(IndexWriter w, String value, float boost) throws IOException\n    {\n        Document doc = new Document();\n        doc.add(new Field(\"f1\", value, Field.Store.YES, Field.Index.ANALYZED));\n        doc.setBoost(boost);\n        w.addDocument(doc);\n    }\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-11T11:36:14+0000",
            "content": "setRewriteMethod(SCORING_BOOLEAN_QUERY_REWRITE) ",
            "author": "Robert Muir",
            "id": "comment-13273178"
        },
        {
            "date": "2012-05-11T19:23:23+0000",
            "content": "Robert, could you please explain it a bit more (maybe with the code above)? I wonder why PrefixQuery behaves unlike the other query types there. ",
            "author": "Michael Wyraz",
            "id": "comment-13273525"
        },
        {
            "date": "2012-05-11T19:31:24+0000",
            "content": "The default rewrite method in PrefixQuery / MTQ is ConstantScore ie. it will create a constant score query return 1.0f for all matching documents. if you want a \"real\" scoring query change the rewrite method (MultiTermQuery#setRewriteMethod()) to MultiTermQuery#SCORING_BOOLEAN_QUERY_REWRITE. \n\nthat is btw. true for all MTQ subclasses. ",
            "author": "Simon Willnauer",
            "id": "comment-13273536"
        },
        {
            "date": "2012-05-11T20:16:06+0000",
            "content": "Thank you, this solved the problem. ",
            "author": "Michael Wyraz",
            "id": "comment-13273572"
        }
    ]
}