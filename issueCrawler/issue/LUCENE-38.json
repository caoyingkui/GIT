{
    "id": "LUCENE-38",
    "title": "RangeQuery without lower term and inclusive=false skips blank fields",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This was reported by \"James Ricci\" <james@riccinursery.com> at:\nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listName=lucene-user@jakarta.apache.org&msgNo=1835\n\n\nWhen you create a ranged query and omit the lower term, my expectation \nwould be that I would find everything less than the upper term. Now if I pass\nfalse for the inclusive term, then I would expect that I would find all\nterms less than the upper term excluding the upper term itself.\n\nWhat is happening in the case of lower_term=null, upper_term=x,\ninclusive=false is that empty strings are being excluded because \ninclusive is set false, and the implementation of RangedQuery creates a default \nlower term of Term(fieldName, \"\"). Since it's not inclusive, it excludes \"\". \nThis isn't what I intended, and I don't think it's what most people would \nimagine RangedQuery would do in the case I've mentioned.\n\nI equate lower=null, upper=x, inclusive=false to Field < x. lower=null,\nupper=x, inclusive=true would be Field <= x. In both cases, the only\ndifference should be whether or not Field = x is true for the query.",
    "attachments": {
        "TestRangeQuery.patch": "https://issues.apache.org/jira/secure/attachment/12339682/TestRangeQuery.patch",
        "LUCENE-38.patch": "https://issues.apache.org/jira/secure/attachment/12393860/LUCENE-38.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-08-28T07:11:42+0000",
            "content": "Added additional tests, using \"null\" as the lower term in the range query. The tests are commented to indicate how they should be modified to behave once this LUCENE-38 is fixed.  ",
            "author": "Dejan Nenov",
            "id": "comment-12430939"
        },
        {
            "date": "2008-11-12T23:45:58+0000",
            "content": "Does this need to be 'fixed' ? RangeQuery now uses the semantics from ConstantScoreRangeQuery, which decided that open ended sides of a range must be inclusive (and are converted as such if not). Is that acceptable and we close this bug? Or jump a hoop or two for this rather niche case? ",
            "author": "Mark Miller",
            "id": "comment-12647123"
        },
        {
            "date": "2008-11-13T04:32:19+0000",
            "content": "This thing is 6+ years old and I don't recall this being mentioned on the list in the last half a decade.  I'll leave you the Won't Fix pleasure, Mark. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12647185"
        },
        {
            "date": "2008-11-13T10:06:30+0000",
            "content": "Actually, this should have already worked, because RangeTermEnum forces includeLower to be true when lowerTermText is null.\n\nBut indeed the test still fails, so I dug into a bit and I think the test is faulty.  The test expects the empty string doc (\"\") to be returned as a result, but the problem is the empty string doc when analyzed does not produce an empty string Token.  So I modified the test (attached) to use an analyzer that emits empty string token, and then the test passes as expected.\n\nI'll commit shortly. ",
            "author": "Michael McCandless",
            "id": "comment-12647245"
        },
        {
            "date": "2008-11-13T10:08:21+0000",
            "content": "Committed revision 713696. ",
            "author": "Michael McCandless",
            "id": "comment-12647247"
        }
    ]
}