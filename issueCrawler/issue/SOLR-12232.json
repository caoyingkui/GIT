{
    "id": "LUCENE-8262",
    "title": "NativeFSLockFactory loses the channel when a thread is interrupted and the SolrCore becomes unusable after",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.1.1",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "The condition is rare for us and seems basically a race.\u00a0 If a thread that is running just happens to have the FileChannel open for NativeFSLockFactory and is interrupted, the channel is closed since it\u00a0extends\u00a0AbstractInterruptibleChannel\n\nUnfortunately this means the Solr Core has to be unloaded and reopened to make the core usable again as the ensureValid check forever throws an exception after.\n\norg.apache.lucene.store.AlreadyClosedException: FileLock invalidated by an external force: NativeFSLock(path=data/index/write.lock,impl=sun.nio.ch.FileLockImpl[0:9223372036854775807 exclusive invalid],creationTime=2018-04-06T21:45:11Z) at org.apache.lucene.store.NativeFSLockFactory$NativeFSLock.ensureValid(NativeFSLockFactory.java:178) at org.apache.lucene.store.LockValidatingDirectoryWrapper.createOutput(LockValidatingDirectoryWrapper.java:43) at org.apache.lucene.store.TrackingDirectoryWrapper.createOutput(TrackingDirectoryWrapper.java:43) at org.apache.lucene.codecs.compressing.CompressingStoredFieldsWriter.<init>(CompressingStoredFieldsWriter.java:113) at org.apache.lucene.codecs.compressing.CompressingStoredFieldsFormat.fieldsWriter(CompressingStoredFieldsFormat.java:128) at org.apache.lucene.codecs.lucene50.Lucene50StoredFieldsFormat.fieldsWriter(Lucene50StoredFieldsFormat.java:183)\n\n\u00a0\n\nProposed solution is using\u00a0AsynchronousFileChannel instead, since this is only operating on a lock and .size method",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-04-18T02:59:30+0000",
            "content": "Robert Muir Michael McCandless Is this perhaps more properly a Lucene issue? ",
            "author": "Erick Erickson",
            "id": "comment-16441816"
        },
        {
            "date": "2018-04-18T03:13:27+0000",
            "content": "IMO it does not solve the problem. The correct fix is not to Thread.interrupt lucene threads using NIO apis. it is not safe to use Thread.interrupt with nio-based stuff with lucene: we document that. It is good that locking detected the error in the code (use of Thread.interrupt) because it can have much more dangerous impacts (e.g. loss of a reader). Asynchronous channels are too slow and wont help there. In the future, maybe its fixed in the JDK: http://mail.openjdk.java.net/pipermail/nio-dev/2018-March/004761.html\n\nI don't think lucene should mask the problem here because it will not solve anything for these reasons. Please, fix the Thread.interrupt ",
            "author": "Robert Muir",
            "id": "comment-16441825"
        },
        {
            "date": "2018-04-18T03:33:11+0000",
            "content": "Robert Muir likely has a much better understanding of the gory details than I do.\n\nI've only written a few multi-threaded apps ... but I have never used Thread.interrupt.  What little reading I've done on the subject tells me that doing so is likely to cause problems.\n\nEven if I were to research it and learn how to use interrupting properly, I would never use it on a thread that I didn't create \u2013 especially not those in a comprehensive system like Solr or Lucene. ",
            "author": "Shawn Heisey",
            "id": "comment-16441844"
        },
        {
            "date": "2018-04-18T04:21:07+0000",
            "content": "Disclaimer: I haven't studied the approach in the patch.\n\nLucene has\u00a0RAFDirectory (in misc) for apps that want to trade-off raw performance for\u00a0interruptibility. \u00a0It uses RandomAccessFile and not\u00a0NIO. \u00a0Wouldn't it be appropriate\u00a0to have a LockFactory impl that supports (safe) interruptability too, so they can be used together? \u00a0I'm not sure I'm getting your point Rob... are you saying, indirectly, that interrupt-safe IO is impossible? \u00a0Or maybe you don't like interruption at all so, in your opinion, anyone\u00a0using it has made an error in judgement for using it? ",
            "author": "David Smiley",
            "id": "comment-16441875"
        },
        {
            "date": "2018-04-18T04:29:48+0000",
            "content": "There isn't a real tradeoff. I'm not even sure it counts as a \"workaround\". RAF must synchronize all reads so its basically like just only having one thread, searches will pile up. \n\nIt has nothing to do with what i like or don't like. If you interrupt lucene threads using nio its gonna look nasty, probably like index corruption. the whole point of lockfactory is to detect bugs in the code: it found one here in solr (or some plugin or something). That's what needs to be fixed. ",
            "author": "Robert Muir",
            "id": "comment-16441878"
        },
        {
            "date": "2018-04-18T04:44:40+0000",
            "content": "By trade-off, I mean an app loses raw search speed (and you explained this well) but the app gains the ability to interrupt (cancel) a search task that is taking too long.  However wise we may be, I don't think we ought to dictate to all users/apps that doing this is fundamentally wrong (what you call a bug).\n\nIf you interrupt lucene threads using nio ...\n\nUnderstood.  But we don't have to use NIO. ",
            "author": "David Smiley",
            "id": "comment-16441889"
        },
        {
            "date": "2018-04-18T04:45:37+0000",
            "content": "The thread interrupting is purposeful for our solution and won't be changing anytime soon due to external requirements. \u00a0It worked just fine for quite a few years until the call to ensureValid was added. \u00a0Since I saw no specific requirement for this class to close its file channel due to an interrupt exception it seemed a decent solution incase anyone else out there uses interrupts in any manner without removing the ensureValid call for us. \u00a0If no one sees value in this for Solr then so be it.\n\n\u00a0\n\n\u00a0 ",
            "author": "Jeff Miller",
            "id": "comment-16441890"
        },
        {
            "date": "2018-04-18T04:56:01+0000",
            "content": "\nUnderstood. But we don't have to use NIO.\n\nYes, use another lock factory or some alternative if you want. But this is NIO lock factory, and well it uses NIO. And its behavior is correct: its wrong to interrupt the NIO stuff. It is definitely OK to dictate that its wrong to interrupt NIO stuff, we document it that way for a reason, because its dangerous.\n\nLock validation and other checks here are important because they prevent screw crazy corruption-looking cases from showing up. Please don't shoot the messenger but fix the actual bugs instead (the perp calling interrupt on lucene threads). ",
            "author": "Robert Muir",
            "id": "comment-16441898"
        },
        {
            "date": "2018-04-18T05:03:28+0000",
            "content": "\"Please don't shoot the messenger \"\n\nSometimes it's about how you deliver it, not the message itself. \u00a0Your point is understood and appreciated. ",
            "author": "Jeff Miller",
            "id": "comment-16441909"
        },
        {
            "date": "2018-04-20T19:40:38+0000",
            "content": "... Is this perhaps more properly a Lucene issue?\nGood question. JIRA can support issue moves between projects \u2013 I think, let me try that here, SOLR-12232 would become a forwarding link to the LUCENE issue.\n\nedit: SOLR-12232 moved to be LUCENE-8262 ",
            "author": "Christine Poerschke",
            "id": "comment-16446269"
        },
        {
            "date": "2018-04-24T14:29:51+0000",
            "content": "I've looked into this in the past. This is not the only problem interrupting can cause.\n\nThe answer is don't interrupt threads running Lucene IndexReader/IndexWriter code. I spent a bunch of time making sure Solr no longer does. It cannot be properly supported. ",
            "author": "Mark Miller",
            "id": "comment-16449956"
        },
        {
            "date": "2018-04-24T15:02:29+0000",
            "content": "Mark, could you please provide any further info\u00a0of why Lucene IndexReader/IndexWriter is fundamentally un-interruitible? \u00a0I think that's what your saying; I haven't heard that before. \u00a0The NIO aspect is already understood; and the user can choose to avoid NIO. ",
            "author": "David Smiley",
            "id": "comment-16450020"
        },
        {
            "date": "2018-08-17T00:30:07+0000",
            "content": "The consensus is that this isn't safe/common enough to incorporate in the code base. ",
            "author": "Erick Erickson",
            "id": "comment-16583219"
        }
    ]
}