{
    "id": "SOLR-12407",
    "title": "edismax boost performance regression from switch to FunctionScoreQuery",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.3",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Assertion: FunctionScoreQuery uses the iterator style API (advanceExact + doubleValue).\u00a0BoostedQuery uses the \"old\" api (just a single call to doubleValue).\u00a0In an edismax boost this means the boost function is called twice for every document being scored in 7.3 instead of once in 7.2.\n\nI'm seeing\u00a0~50% increase in query response time after upgrading from 7.2 to 7.3 (600ms to 900ms). My queries use an edismax boost something like:\n\nif(termfreq(type,\"A\"),product(map(field1,3,3,1.5,1),map(field1,4,4,1.9,1),if(def(field2,false),product(map(field1,1,1,0.6,1),map(field1,2,2,0.7,1),if(not(exists(field1)),0.6,1),map(field3,0,0,1.3,1)),product(map(field1,1,1,0.7,1),map(field1,2,2,1.1,1),if(not(exists(field1)),0.90,1),map(field3,0,0,1.50,1)))),1)\n\nThis boost is\u00a0likely (surely?) suboptimal but\u00a0LUCENE-8099 appears to have introduced this performance regression (poured proverbial oil on my smouldering fire). If I change\u00a0ExtendedDismaxQParser back to using the deprecated BoostedQuery I get the 600ms solr 7.2 response time back.\n\nIt\u00a0appears\u00a0FunctionScoreQuery invokes the\u00a0boost function twice for each document. Once with a call to exists()\u00a0from advanceExact(),\u00a0then a second time from the call chain following scores.doubleValue().\n\nI don't know if that's the cause of the slowdown but I'm definitely seeing a slowdown that disappears when I revert part of LUCENE-8099.\n\nI've attached some flamegraphs\u00a0comparing 7.2 and 7.3. The frame\u00a0FunctionScoreQuery$FunctionScoreWeight$1.score in solr-7.3.svg show 2 \"towers\". One for\u00a0advanceExact (calling exists()), the other for doubleValue() which ends up similar to solr-7.2.svg.",
    "attachments": {
        "solr-7.2.svg": "https://issues.apache.org/jira/secure/attachment/12925269/solr-7.2.svg",
        "restore-boosted-query.patch": "https://issues.apache.org/jira/secure/attachment/12925268/restore-boosted-query.patch",
        "solr-7.3.svg": "https://issues.apache.org/jira/secure/attachment/12925270/solr-7.3.svg"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-27T00:29:45+0000",
            "content": "I initially mentioned this on the mailing list. The\u00a0stack trace diff maybe helps show what I'm talking about. I don't know enough to propose a fix/alternative sorry.\n\n\u00a0\njstack from 7.2:\n\u00a0\n\"qtp2136344592-24\" #24 prio=5 os_prio=31 tid=0x00007f80630e5000 nid=0x7103 runnable [0x00007000049bb000]\n\u00a0 \u00a0java.lang.Thread.State: RUNNABLE\nat org.apache.lucene.queries.function.valuesource.ProductFloatFunction.func(ProductFloatFunction.java:41)\nat org.apache.lucene.queries.function.valuesource.MultiFloatFunction$1.floatVal(MultiFloatFunction.java:82)\nat org.apache.lucene.queries.function.valuesource.IfFunction$1.floatVal(IfFunction.java:64)\nat org.apache.lucene.queries.function.valuesource.ProductFloatFunction.func(ProductFloatFunction.java:41)\nat org.apache.lucene.queries.function.valuesource.MultiFloatFunction$1.floatVal(MultiFloatFunction.java:82)\nat org.apache.lucene.queries.function.valuesource.IfFunction$1.floatVal(IfFunction.java:64)\nat org.apache.lucene.queries.function.valuesource.IfFunction$1.floatVal(IfFunction.java:64)\nat org.apache.lucene.queries.function.valuesource.ProductFloatFunction.func(ProductFloatFunction.java:41)\nat org.apache.lucene.queries.function.valuesource.MultiFloatFunction$1.floatVal(MultiFloatFunction.java:82)\n at org.apache.lucene.queries.function.BoostedQuery$CustomScorer.score(BoostedQuery.java:124)\nat org.apache.lucene.search.TopScoreDocCollector$SimpleTopScoreDocCollector$1.collect(TopScoreDocCollector.java:64)\nat org.apache.lucene.search.Weight$DefaultBulkScorer.scoreAll(Weight.java:233)\nat org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:184)\nat org.apache.lucene.search.BulkScorer.score(BulkScorer.java:39)\nat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:660)\nat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:462)\nat org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:215)\n\u00a0\njstack from 7.3.1:\n\u00a0\n\"qtp559670971-25\" #25 prio=5 os_prio=31 tid=0x00007fe23fa0c000 nid=0x7303 runnable [0x000070000b024000]\n\u00a0 \u00a0java.lang.Thread.State: RUNNABLE\nat org.apache.lucene.queries.function.valuesource.IfFunction$1.floatVal(IfFunction.java:64)\nat org.apache.lucene.queries.function.valuesource.ProductFloatFunction.func(ProductFloatFunction.java:41)\nat org.apache.lucene.queries.function.valuesource.MultiFloatFunction$1.floatVal(MultiFloatFunction.java:82)\nat org.apache.lucene.queries.function.valuesource.IfFunction$1.floatVal(IfFunction.java:64)\nat org.apache.lucene.queries.function.valuesource.ProductFloatFunction.func(ProductFloatFunction.java:41)\nat org.apache.lucene.queries.function.valuesource.MultiFloatFunction$1.floatVal(MultiFloatFunction.java:82)\nat org.apache.lucene.queries.function.valuesource.IfFunction$1.floatVal(IfFunction.java:64)\nat org.apache.lucene.queries.function.valuesource.IfFunction$1.floatVal(IfFunction.java:64)\nat org.apache.lucene.queries.function.valuesource.ProductFloatFunction.func(ProductFloatFunction.java:41)\nat org.apache.lucene.queries.function.valuesource.MultiFloatFunction$1.floatVal(MultiFloatFunction.java:82)\n at org.apache.lucene.queries.function.docvalues.FloatDocValues.doubleVal(FloatDocValues.java:67)\n at org.apache.lucene.queries.function.ValueSource$WrappedDoubleValuesSource$1.doubleValue(ValueSource.java:217)\n at org.apache.lucene.search.DoubleValues$1.doubleValue(DoubleValues.java:48)\n at org.apache.lucene.queries.function.FunctionScoreQuery$MultiplicativeBoostValuesSource$1.doubleValue(FunctionScoreQuery.java:199)\n at org.apache.lucene.queries.function.FunctionScoreQuery$FunctionScoreWeight$1.score(FunctionScoreQuery.java:171)\nat org.apache.lucene.search.TopScoreDocCollector$SimpleTopScoreDocCollector$1.collect(TopScoreDocCollector.java:64)\nat org.apache.lucene.search.Weight$DefaultBulkScorer.scoreAll(Weight.java:233)\nat org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:184)\nat org.apache.lucene.search.BulkScorer.score(BulkScorer.java:39)\nat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:660)\nat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:462)\nat org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:215) ",
            "author": "Will Currie",
            "id": "comment-16491864"
        },
        {
            "date": "2018-06-14T08:22:06+0000",
            "content": "I'd missed this, sorry for not picking it up earlier.\n\nIt looks as though BoostedQuery just assumed that all docs had a value, so avoided the exists check.  I'm not entirely sure that's a safe assumption, but from looking at a few ValueSource implementations it does seem that they have default return values and so the exists check isn't actually necessary.  So the best solution is I think to remove the exists call from ValueSource.WrappedDoubleValuesSource and always return true from advanceExact() ",
            "author": "Alan Woodward",
            "id": "comment-16512146"
        },
        {
            "date": "2018-06-14T09:25:03+0000",
            "content": "Thanks for taking a look! I was reluctant to ping you directly, thinking maybe this was too much of an edge case.\u00a0\n\n\n\nWould it be too risky/rushed to sneak that change into 7.4? From the mailing list there's been quite a few \"can we wait\u00a0for X?\" requests in 7.4 already. ",
            "author": "Will Currie",
            "id": "comment-16512217"
        },
        {
            "date": "2018-06-14T09:34:00+0000",
            "content": "I'll work up a patch, but I'd like to get Hoss Man's opinion on this, as he knows more about how ValueSources are used in Solr than I do.\n\nAnd don't worry about pinging me, I can always ignore emails if need be  ",
            "author": "Alan Woodward",
            "id": "comment-16512227"
        },
        {
            "date": "2018-06-14T16:40:38+0000",
            "content": "It looks as though BoostedQuery just assumed that all docs had a value, so avoided the exists check. I'm not entirely sure that's a safe assumption, but from looking at a few ValueSource implementations it does seem that they have default return values and so the exists check isn't actually necessary. So the best solution is I think to remove the exists call from ValueSource.WrappedDoubleValuesSource and always return true from advanceExact()\n\nI haven't reviewed the \"current\" (post LUCENE-8099) code that has raised this concern, but if i'm understanding the current discussion what you are describing sounds sane/desired for this usage/code-path. \n\nIn the \"boost by function\" use cases the \"query being boosted\" has already dictated that docX matches the query, the \"boosting ValueSource\" is only needed to decide how much the boost should be \u2013 it doesn't really matter if the ValueSource \"exists()\" for that particular document, it's still going to match the overall query, so it has to return something.  If the VS doesn't \"exist()\" for a doc, then the \"implicit default\" (typically 0) of the ValueSource impl can/should be used ... if users don't want that implicit default, that's what the def(...) wrapper function is for. \n\nexists() really only needs to be checked for the case where the ValueSource is being used to decide which documents should match \u2013 like the frange query parser \u2013 of in the case where a wrapper ValueSource needs to make conditional decisions (see LUCENE-5961) ",
            "author": "Hoss Man",
            "id": "comment-16512724"
        }
    ]
}