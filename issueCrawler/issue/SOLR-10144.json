{
    "id": "SOLR-10144",
    "title": "redesign block-join support",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "query parsers",
            "update"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "This is a placeholder for new block join design. Let's comeup with the name first: whether it will be nested child docs or blocks? \nFeature Delivery plan\nNaming\nNested Documents\n\nScopes in schema.xml \n\n\tfields can be grouped with <scope name=\"parent\" default=\"true\">;\n\t\n\t\t such fields' scoping is not mandatory, postponable, might cause rbdbms illusion\n\t\n\t\n\tit can be any level deep, and fan out any subscopes (a scope name is necessary to distinguish between sons and daugthers subscopes);\n\t I'm not sure whether name is uniq globally or names in traverse path is unique. I'd like the former;\n\tbtw, maybe  type  ;\n\tdefault attribute is necessary to map existing blocks, which has only one nesting dimension: childrenDocuments;\n\tfields beside of scopes (global) can appear on any scope. it should work with uniqueKey. What's semantic of uniqueKey across scopes One recently discussed case it searching for child scope documents, when children uniqKeys should not clash;\n\t\n\t\troot doc uniqueKey spans on whole block (it's necessary to be used as deleteTerm for block updates), but every doc is identified with own uniqueKey (otherwise it's not possible to find it with distributed search)\n\t\n\t\n\tcoming to roots  how many root scopes we can have? I think we can have a few ones that introducing notion of document types.\n\n\n\nUpdates\n\n\tAll formats XML, JSON, JSONdoc, Javabin accept nesting in named scopes;\n\tCurrent format (unnamed nesting) is supported by default marked scope;\n\tfield are accepted only if they are defined at the certain scope, beside of the global ones. (see consideration above)\n\n\n\nDefault experience \n\n\t\n\t\n\t\tsubmitting q=*:*&fl=* responds root documents with all children from all subscopes nested in according to the scopes hierarchy. i.e. [child] is on by default\n\t\tfq= aims root docs\n\t\n\t\n\n\n\nQuery\n\n\tlet's follow Elastic JSON.facet idea, and piggyback on its' request parsing facilities;\n\tthis query should contains of nested query nodes, every node represent {!parser param=baram v='input'};\n\tthis syntax should have handy defaluts/shortcut, to search foo:bar in less than fifteen brackets,quotes and commas;\n\tit should use existing QParsers including {!func} ;\n\tsearching scopes is supported by named scope QParser, handled in this syntax by regular way;\n\tsubscope query should be easily hooked in any occur (should, must, not )  ;\n\tit should be available in a dedicated [transformer], and support the following scenarios: search parents by certain children, return them nested in response without repeating query, do the same but return all children of selected parents   ;\n\tnaming standalone nodes and referencing them is cool.\n\n\n\nUpdate/deletes/uniqueness/versioning\n\n\tdelete query/id hits root docs, and also nukes subordinate children;\n\tupdating existing root doc completely removes existing subdocs, and replace all of them with the new ones ;\n\tfield update fully rewrites whole doc hierarchy, and can aim any subdoc in hierarchy (this won't be easy, how to identify children?)\n\t do we need to identify separate subdocs with id? probably yes for field updates\n\tversion should span whole block (If I've got the recent SOLR-10114 right)\n\n\n\nFaceting\n\n\tsubject for support by Json.facet\n\n\n\nNamed scopes support in DIH\n\n\tOld sport, you know.\n\n\n\nInception\ncomment and the next one",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-02-16T05:02:09+0000",
            "content": "I think \"nested\". As the xml/json format to submit them is nested. And you could have parent/child/grandchild/etc, so it is a separate terminology collection. And blocks is just confusing. ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-15869181"
        },
        {
            "date": "2018-08-14T13:34:31+0000",
            "content": "I agree that Nested Documents needs to be better integrated in Solr to be useful in certain use cases.\n\n\n\tIt is bad to pollute the schema of the parent document with field for child docs. And child documents should not carry all mandatory fields from their parent schema. Internally some sub-schema mechanism is needed. How would your scope syntax would look like? Like this? And the scope internally would be something like a own schema?\n\n<schema name=\"example-schema\" version=\"1.6\">\n\n\u00a0\u00a0 \u00a0<uniqueKey>id</uniqueKey>\n\n\u00a0\u00a0 \u00a0<fieldtype name=\"text\" class=\"solr.TextField\" />\n\u00a0\u00a0 \u00a0<fieldType name=\"string\" class=\"solr.StrField\" />\n\u00a0\u00a0 \u00a0<fieldType name=\"long\" class=\"solr.TrieLongField\" precisionStep=\"0\" positionIncrementGap=\"0\" />\n\n\u00a0\u00a0 \u00a0<field name=\"id\" type=\"string\" indexed=\"true\" stored=\"true\" required=\"true\" multiValued=\"false\" />\n\u00a0\u00a0 \u00a0<field name=\"title\" type=string\" indexed=\"true\" stored=\"true\" multiValued=\"false\" />\n\n\u00a0\u00a0 \u00a0<scope name=\"subitem\" default=\"true\" >\n\u00a0\u00a0 \u00a0\u00a0\u00a0 <field name=\"subitemA\" type=\"string\" indexed=\"true\" stored=\"true\" multiValued=\"false\" />\n\u00a0\u00a0 \u00a0\u00a0\u00a0 <field name=\"subitemB\" type=\"text\" indexed=\"true\" stored=\"true\" multiValued=\"true\" />\n\u00a0\u00a0 \u00a0</scope>\n\n\u00a0\u00a0 \u00a0<field name=\"_version_\" type=\"long\" indexed=\"true\" stored=\"true\" multiValued=\"false\" />\n\n</schema>\n\n\n\n\n\n\n\tAn alternative would be to use FieldType for this, i.e.\n\n<schema name=\"example-schema\" version=\"1.6\">\n    <uniqueKey>id</uniqueKey>\n\n    <fieldtype name=\"text\" class=\"solr.TextField\" />\n    <fieldType name=\"string\" class=\"solr.StrField\" />\n    <fieldType name=\"long\" class=\"solr.TrieLongField\" precisionStep=\"0\" positionIncrementGap=\"0\" />\n\n    <field name=\"id\" type=\"string\" indexed=\"true\" stored=\"true\" required=\"true\" multiValued=\"false\" />\n    <field name=\"title\" type=string\" indexed=\"true\" stored=\"true\" multiValued=\"false\" />\n\n    <field name=\"subitem\" type=\"nested\" >\n    <field name=\"subitemA\" scope=\"subitem\" type=\"string\" indexed=\"true\" stored=\"true\" multiValued=\"false\" />\n    <field name=\"subitemB\" scope=\"subitem\" type=\"text\" indexed=\"true\" stored=\"true\" multiValued=\"true\" />\n\n    <field name=\"_version_\" type=\"long\" indexed=\"true\" stored=\"true\" multiValued=\"false\" />\n</schema>\n\n\n\n\n\nDespite the syntax I guess to make Nested Documents a first class citizen in Solr (meaning: to integrate it in the standard query behavior without the need for a ChildDocTransformer, manually defining fields to distinguish parents and child as well as parentFilter that uses them) a lot of classes needs to be changed. All classes involved in indexing and query documents need to be aware that documents can occure in a nested document structure and that there is a parent and child schemas. And the root field as it exists right now should be automatically used to distinguish between parents and child documents. \n\nWhat are the future plans of the developers with nested documents in Solr? Are there any plans to improve the integration in upcoming releases? Would be great to get some insight here. ",
            "author": "Sebastian Lutter",
            "id": "comment-16579803"
        },
        {
            "date": "2018-08-14T13:38:21+0000",
            "content": "Closing in favor of\u00a0SOLR-12298 ",
            "author": "Mikhail Khludnev",
            "id": "comment-16579806"
        }
    ]
}