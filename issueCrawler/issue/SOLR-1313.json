{
    "id": "SOLR-1313",
    "title": "DIH should be able to read gziped files",
    "details": {
        "affect_versions": "1.5",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "For very large (file) imports it would be beneficial to be able to read from gzipped files which should also improve performance (less disk I/O)",
    "attachments": {
        "GzipFileDataSource.java": "https://issues.apache.org/jira/secure/attachment/12414683/GzipFileDataSource.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yousef Ourabi",
            "id": "comment-12735848",
            "date": "2009-07-27T23:59:04+0000",
            "content": "Here is a preliminary patch/addition called \"GzipFileDataSource\" \u2013 Initially I thought about parameterizing FileDataSource to handle compressed input. \n\nI'm still open to that approach but opted to create a new class (at least initially) to have a clean separation.\n\nNo unit test / documentation attached. \n\nPlease add comment/feedback and I'll incorporate as needed.\n\nThanks. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12735926",
            "date": "2009-07-28T05:02:54+0000",
            "content": "reading from gzipped files is good .but unless we have a corresponding means to walk through the file list in the zipped file it is not so useful. Most of the zip files will have multiple files. \n\n\nI should be able to do as follows\n\n<dataSource name=\"zip\" type=\"CompressedFileDataSource\" format=\"gzip\"/>\n    <document>\n        <entity name=\"f\" processor=\"CompressedFileListEntityProcessor\" \n                     file=\"/some/path/to/files.gz\" fileName=\".*xml\" \n                     recursive=\"true\" rootEntity=\"false\">\n            <entity name=\"x\" dataSource=\"zip\" \n                          processor=\"XPathEntityProcessor\" \n                          forEach=\"/the/record/xpath\" url=\"${f.fileAbsolutePath}\">\n                <field column=\"full_name\" xpath=\"/field/xpath\"/>\n            </entity>\n        </entity>\n    </document>\n\n\n\n\nI guess the URLDataSource should be able to accept urls of the format \"jar:file:/home/duke/duke.jar!/a.xml\" "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13631166",
            "date": "2013-04-13T21:14:30+0000",
            "content": "SPRING_CLEANING_2013 JIRAS Pretty sure this has been addressed by later JIRAs. "
        }
    ]
}