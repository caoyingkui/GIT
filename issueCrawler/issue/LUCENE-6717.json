{
    "id": "LUCENE-6717",
    "title": "TermAutomatonQuery should be two-phased",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "TermAutomatonQuery (still in sandbox) is a simple way to get accurate query-time multi-token synonyms using the new SynonymGraphFilter from LUCENE-6664.  It already has a utility class to directly translate an incoming TokenStream into a corresponding query.\n\nHowever the query is likely quite slow because it always iterates positions for all terms in the automaton.\n\nI think one simple approach is to walk the automaton and find the subset of terms (if any) that appear in common to all paths, and then approximate with ConjunctionDISI like PhraseQuery does.  Such a subset doesn't always exist for an automaton (i.e. it could be empty), so the logic would have to be conditional...\n\nAnd I think there are more complex approximations we could make, but using ConjunctionDISI seems like a simple start.",
    "attachments": {
        "LUCENE-6717.patch": "https://issues.apache.org/jira/secure/attachment/12749076/LUCENE-6717.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14660052",
            "author": "Michael McCandless",
            "date": "2015-08-06T14:05:07+0000",
            "content": "Patch, I think it's ready, tests pass.\n\nWhen there are 2 or more required terms, I use ConjunctionDISI, else\nif there's 1 required term, I use its DISI, else I just do the same\nlogic it did before.\n\nI also reworked how the scorer inits positions (do it only later, when\nit's time to walk the positions) and implemented needsScores. "
        },
        {
            "id": "comment-14660077",
            "author": "Robert Muir",
            "date": "2015-08-06T14:21:51+0000",
            "content": "Nice, I like it. This is a great improvement. "
        },
        {
            "id": "comment-14660104",
            "author": "Adrien Grand",
            "date": "2015-08-06T14:43:23+0000",
            "content": "I like it too, I'm curious how it compares to PhraseQuery now. \n\nI think we should set cost=required.cost() when there are required terms, otherwise this query will still return the same cost as a disjunction even though it can do much better.\n\nI'm curious about the assertion at the beginning of the doNext() method, it's been both changed and commented out, should we just remove it if invariants are hard to verify?\n\nTermAutomatonQuery.termIsRequired is documented as public for testing, but it looks to me that pkg-private would be enough? "
        },
        {
            "id": "comment-14660108",
            "author": "Robert Muir",
            "date": "2015-08-06T14:47:18+0000",
            "content": "The one suggestion i have is to see in the future if it can always be two-phased: e.g. take the non-required terms and make them optional.\n\nThen any disjunction logic can be removed and this query just worries about positional matches... ideally. "
        },
        {
            "id": "comment-14660122",
            "author": "Michael McCandless",
            "date": "2015-08-06T14:58:41+0000",
            "content": "Thanks for the feedback, I'll fold it.\n\nI'm curious about the assertion at the beginning of the doNext() method, it's been both changed and commented out, should we just remove it if invariants are hard to verify?\n\nOh yeah the invariant is wrong now, because for advance I push the old docID back into the queue and then advance from in the queue ... I'll remove it.\n\nThe one suggestion i have is to see in the future if it can always be two-phased:\n\nThis is a good idea!  I'll put a TODO ... it shouldn't be so hard, since I already know all required terms, I can just take \"the rest\" and make into the disjunction.  "
        },
        {
            "id": "comment-14660135",
            "author": "Michael McCandless",
            "date": "2015-08-06T15:03:48+0000",
            "content": "I like it too, I'm curious how it compares to PhraseQuery now\n\nIt's a good question, I wonder too \n\nI suspect it's probably still a good amount slower: it's using a PriorityQueue to walk through the positions vs the simple array, for ExactPhraseScorer "
        },
        {
            "id": "comment-14680121",
            "author": "Michael McCandless",
            "date": "2015-08-10T13:40:56+0000",
            "content": "New patch, folding in feedback. "
        }
    ]
}