{
    "id": "SOLR-578",
    "title": "Binary stream response for request",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Allow sending binary response back from request.  This is not the same as encoding in binary such as BinaryQueryResponseWriter.  Simply need access to servlet response stream for sending something like a Lucene segment.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jason Rutherglen",
            "id": "comment-12597862",
            "date": "2008-05-19T02:19:04+0000",
            "content": "Maybe this will work.  The request handler implements it.  \n\n\npublic interface BinaryRequestHandler {\n  public void handleRequest(SolrQueryRequest req, HttpServletResponse servletResponse);\n}\n\n "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12597863",
            "date": "2008-05-19T02:22:41+0000",
            "content": "Or place it in SolrQueryResponse.   "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12597868",
            "date": "2008-05-19T04:40:29+0000",
            "content": "The BinaryQueryResponseWriter is the interface you must implement and the 'out' parameter is an instance of  ServletOutputStream. Using that you can send out any binary data (even a lucene segment).  \n\nThe implementation code  is as follows in SolrDispatchFilter\n\n if (responseWriter instanceof BinaryQueryResponseWriter) {\n     BinaryQueryResponseWriter binWriter = (BinaryQueryResponseWriter) responseWriter;\n      binWriter.write(response.getOutputStream(), solrReq, solrRsp);\n }\n\n\n\nIs there any specific reason why you must have access to the HttpServletResponse  object ? "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12597956",
            "date": "2008-05-19T13:49:19+0000",
            "content": "It is incongruous to have SolrQueryRequest.getContentStreams() but nothing similar for SolrQueryResponse.  If BinaryQueryResponseWriter is used, the logic for handling the request would go in the class that implements it, what is the purpose of the RequestHandler in this case?  The purpose of BinaryQueryResponseWriter is to allow encoding the normal Solr result objects into a binary format.  A RequestHandler that only returns binary and does not use the SolrQueryResponse.add() or similar methods for encoding objects is out of place using BinaryQueryResponseWriter.   "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12598179",
            "date": "2008-05-20T05:24:30+0000",
            "content": "It is by design that SOLR keep the requesthandlers and response writers loosely coupled. The responsibilities are clearly defined \n\n\tRequestHandler : Takes in the request parameters , do the necessary operations and prepare a response to be written back to the client\n\tResponseWriter : Take in the response object and write it down in a format of client's choice\n\n\n\nIf your Handler can write out data only  using a specific writer, you have the flexibility of overriding the 'wt' in the handler. Register your own writer in solrconfig.xml.\n\nWe are implementing SOLR-561 using the same strategy .\n\n\tWe have a handler which reads an index file (or a part of it)  and puts the stream object into the SolrQueryResponse rsp.add(\"stream\", inputstreamobject)\n\tIt sets a custom writer . (solrparams.Params.set(\"wt\", \"filestream\")).\n\tThe custom binary writer then take the inputstream object (rsp.get(\"stream\")) and pipe the data to the outputstream.\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12598532",
            "date": "2008-05-21T00:13:52+0000",
            "content": "If your Handler can write out data only using a specific writer, you have the flexibility of overriding the 'wt' in the handler. Register your own writer in solrconfig.xml.\n\nCorrect.  \n\n(a handler can even go so far as to \"fail\" in the inform(SolrCore) method if the writer it expects is not present)\n\nThe ShowFileRequestHandler and RawResponseWriter are good examples of this model (although it would probably make sense to change RawResponseWriter to implement BinaryQueryResponseWriter at some point)\n\nIt is incongruous to have SolrQueryRequest.getContentStreams() but nothing similar for SolrQueryResponse.\n\nOnly if you are use to thinking of things in terms of the servlet API : )\n\ngenerally speaking, the majority of Request Handlers shouldn't be dealing with raw character or binary streams ... they should be dealing with simple objects and deferring rendering of those objects to the QueryResponseWriter to decide how to render them based on the wishes of the client ... there are exceptions to every rule however, hence the approach described here where the Handler \"forces\" a particular response writer. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12598536",
            "date": "2008-05-21T01:17:57+0000",
            "content": "Ok "
        }
    ]
}