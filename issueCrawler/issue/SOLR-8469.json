{
    "id": "SOLR-8469",
    "title": "Look into how HttpSolrCall#remoteQuery handles IOException and passing error messages back to a client.",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "We have a test fail that is reported to the client as:\n\nError from server at http://127.0.0.1:45745/awholynewcollection_0: non ok status: 500, message:Server Error\n\nbut problem seems to be:\n\norg.apache.solr.common.SolrException: Error trying to proxy request for url: http://127.0.0.1:45745/awholynewcollection_0/select\nCaused by: java.io.IOException: Response header too large\nCaused by: java.nio.BufferOverflowException\n\nI'm not sure if this is because we are using sendError on catching Exception in that method instead of throwing out an exception (I'd like to make this change anyway), or if it's because we close the streams. I've removed those closes in another uncommitted issue about using method.abort().",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-27T20:41:56+0000",
            "author": "Mark Miller",
            "content": "https://builds.apache.org/job/Lucene-Solr-Tests-trunk-Java8/745/consoleText ",
            "id": "comment-15072236"
        },
        {
            "date": "2015-12-27T20:44:58+0000",
            "author": "Mark Miller",
            "content": "If you test a similar exception coming out of something other than remoteQuery, a more relevant message is returned - so something about the special case IOException handling or something else in remoteQuery (like the steam closing) is causing this. ",
            "id": "comment-15072239"
        }
    ]
}