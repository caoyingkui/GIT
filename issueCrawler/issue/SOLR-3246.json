{
    "id": "SOLR-3246",
    "title": "UpdateRequestProcessor to extract Solr XML from rich documents",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "This would be an update request handler to save a file with the xml that represents the document in an external directory. The original\nidea behind this was to add it to the processing chain of the ExtractingRequestHandler to store an already parsed version of the docs. This storage of pre-parsed documents will make the re indexing of the entire index faster (avoiding the Tika phase, and just sending the xml to the standard update processor).\nAs a side effect, extracting the xml can make debugging of rich docs easier.",
    "attachments": {
        "SOLR-3246.patch": "https://issues.apache.org/jira/secure/attachment/12518353/SOLR-3246.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Emmanuel Espina",
            "id": "comment-13229468",
            "date": "2012-03-14T18:27:41+0000",
            "content": "This is similar to https://issues.apache.org/jira/browse/SOLR-903\nBut this would be a server side component. "
        },
        {
            "author": "Emmanuel Espina",
            "id": "comment-13229482",
            "date": "2012-03-14T18:38:09+0000",
            "content": "Initial code for this component (with a very simple test) "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13229747",
            "date": "2012-03-14T23:19:00+0000",
            "content": "We wrote a data dumper in a project as a patched ExtractingUpdateRequestHandler. It writes a CSV format (including Base64 encoded binary input) to one file. We were thinking about rewriting it as an UpdateProcessor, which will then work much like yours. The benefit with CSV format is that it is much more compact. Also, a file system may kneal with too many files in a folder. "
        },
        {
            "author": "Emmanuel Espina",
            "id": "comment-13231457",
            "date": "2012-03-16T18:01:10+0000",
            "content": "Probably the output format could be set in a similar way to how it's done with the response writers. In that way the XMLWritingUpdateProcessor would be just WritingUpdateProcessor and the writer can be selected with a parameter in the configuration, having a default (being that xml or csv). That would be:\n\n<updateRequestProcessorChain name=\"writer\">\n    <processor class=\"org.apache.solr.update.processor.WritingUpdateProcessorFactory\">\n      <str name=\"outputDir\">\"./dacDumps</str>\n      <str name=\"writer\">xml</str>\n      <str name=\"groupFiles\">100</str>\n    </processor>\n</updateRequestProcessorChain>\n\nAlso with another parameter one could select to add to the same file one, n or unlimited documents.  "
        },
        {
            "author": "Emmanuel Espina",
            "id": "comment-13238798",
            "date": "2012-03-26T20:41:56+0000",
            "content": "Added some changes to let the user select the format of the output. In the patch there is only a XML writer, but others like the CSV can be added. "
        }
    ]
}