{
    "id": "SOLR-4197",
    "title": "EDismax allows end users to use local params in q= to override global params",
    "details": {
        "affect_versions": "3.5,                                            3.6,                                            4.0",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Edismax is advertised as suitable to be used to \"process advanced user input directly\".  Thus, it would seem reasonable to have an application directly pass user input in the q= parameter to a back-end Solr server.\n\nHowever, it seems that users can enter local params at the start of q= which override the global params that the application (e.g. website) may have set on the query string.  Confirmed with Erik Hatcher that this is somewhat unexpected behavior (though one could argue it's an expected feature of any query parser)\n\nProposed fix - add a parameter (e.g. that can be used as an invariant) that can be passed to inhibit Solr from using local params from the q= parameter.\n\nThis is somewhat related to SOLR-1687",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13533090",
            "date": "2012-12-15T17:44:50+0000",
            "content": "This is why \"defType\" stands for \"default type\" - it's only the default and may be overridden.\n\nAdding a space would disable recognition of localParams.\nFor example, when sending \"q\" through to Solr, construct it like so:\n\"q\" = \" \" + userQuery;\n\nOr you could specify the query type of \"q\" using localParams and put the user query in \"qq\":\n\nq={!edismax v=$qq}\nqq=hello there\n\n "
        },
        {
            "author": "Peter Wolanin",
            "id": "comment-13533611",
            "date": "2012-12-17T03:09:26+0000",
            "content": "Ok, but there is no way to enforce that in the configuration, right?\n\nAt the very least it's a documentation problem, but I would still consider it a problem that I can't lock this down via solrconfig.xml "
        },
        {
            "author": "Peter Wolanin",
            "id": "comment-13533643",
            "date": "2012-12-17T04:38:37+0000",
            "content": "Apparently adding a space at the beginning is not a complete solution - I then get an exception when it's the standard lucene parser:\n\nProblem accessing /solr/select. Reason:\n\n    org.apache.lucene.queryParser.ParseException: Cannot parse ' {!lucene}hello': Encountered \" \"}\" \"} \"\" at line 1, column 9.\nWas expecting one of:\n    \"TO\" ...\n    <RANGEEX_QUOTED> ...\n    <RANGEEX_GOOP> ...\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13534314",
            "date": "2012-12-17T21:19:15+0000",
            "content": "This sounds like a serious problem, although admittedly I can't think of how an attacker could subvert security rules (e.g. an 'fq') or otherwise spy on information that is otherwise concealed.  Can you think of something Peter? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13534335",
            "date": "2012-12-17T21:45:46+0000",
            "content": "Apparently adding a space at the beginning is not a complete solution - I then get an exception when it's the standard lucene parser:\n\nA complete solution to what?  You should get an error since it's not valid lucene syntax.  The space did it's job and prevented the localParams from being interpreted as localParams.  That's what you were trying to do, right? "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13534350",
            "date": "2012-12-17T22:03:55+0000",
            "content": "I think it's more graceful to ignore or strip local params per configuration instead of throwing an error, even for the user that for some crazy reason inputs a series of characters that is recognized as local params.\n\nIf edismax is to be advertized as be able to handle direct end-user input it should never throw an error, but to do so developers must either strip it from the input before sending it to Solr or configure Solr to ignore or strip it.\n\nI would opt for an option to strip it completely. Right now we have to externally strip everything that looks like {!.*} "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13534368",
            "date": "2012-12-17T22:14:20+0000",
            "content": "I think it's more graceful to ignore or strip local params per configuration instead of throwing an error,\n\nYes, that's what edismax is for.  I think in Peter's example he was using \"lucene\" qparser, which has a strict syntax.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13534373",
            "date": "2012-12-17T22:19:01+0000",
            "content": "Options for forcing edismax and prohibiting changing the query type or adding other parameters via localParams (as opposed to just defaulting):\n\n1) prepend a space to the user query\n2) prepend {!edismax} to the user query\n3) use a different parameter:  q={!edismax v=$qq}&qq=user_query\n\n\nIf you do any of these and get a syntax error back, then it's an edismax escaping bug that we need to handle. "
        }
    ]
}