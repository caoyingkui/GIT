{
    "id": "LUCENE-3473",
    "title": "CheckIndex should verify numUniqueTerms == recomputedNumUniqueTerms",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.4,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Just glancing at the code it seems to sorta do this check, but only in the hasOrd==true case maybe (which seems to be testing something else)?\n\nIt would be nice to verify this also for terms dicts that dont support ord.\n\nwe should add explicit checks per-field in 4.x, and for-all-fields in 3.x and preflex",
    "attachments": {
        "LUCENE-3473.patch": "https://issues.apache.org/jira/secure/attachment/12500384/LUCENE-3473.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-10-23T23:54:56+0000",
            "content": "Patch adding the checks to checkindex.\n\nthere were some problems:\n\n\tIndexReader.getUniqueTermCount doesn't work in trunk, but works fine in 3.x. This is because it sums per-field across the Terms api, but PreFlex codec doesn't know this information per-field\n\tIf a field has no postings (but exists in fieldinfos), then IR.getUniqueTermCount hits an NPE (ant test-core -Dtestcase=TestNorms -Dtestmethod=testCustomEncoder -Dtests.seed=-6a2248fc7313e45:c41a685f840f6ed:-5a3fd5b8ec315508)\n\tMemoryCodec didn't implement Fields.getUniqueTermCount, probably just forgotten because its not abstract (instead throwing UOE by default).\n\n\n\nSo, i fixed MemoryCodec to impl Terms.getUniqueTermCount, changed Terms.getUniqueTermCount to be abstract (throw -1 if you cannot implement it), and added Fields.getUniqueTermCount, called by IR.getUniqueTermCount: default implementation sums across fields, but PreFlex overrides so that its IR.getUniqueTermCount works again.\n\nwe might want to deprecate the latter method when 3.x indexes no longer need to be supported, or maybe its just fine as-is (you have to do the summing somewhere). ",
            "author": "Robert Muir",
            "id": "comment-13133783"
        },
        {
            "date": "2011-10-24T00:22:43+0000",
            "content": "More fixes:\n\n\tcatch(UOE)'s are removed in checkindex because now this stat just returns -1 like other stats when it isnt available.\n\tDR.getUniqueTermCount returns -1 like MR now, and I adjusted the test to expect this rather than the exception.\n\tPreflex is disabled in the test: only because we currently 'write' preflex indexes actually as PerFieldCodecWrapper... which is bogus but a larger issue. Still, the preflex method is being tested for the older indexes when checkIndex runs. once we fix PreFlexRW to be a \"real codec\" that writes actual valid 3.x indexes we can remove the assume()\n\n ",
            "author": "Robert Muir",
            "id": "comment-13133784"
        },
        {
            "date": "2011-10-24T02:01:00+0000",
            "content": "Hmm, I noticed i left a s.o.p in the previous patch for preflex, but it wasn't being called from CheckIndex.\n\nThis is because we always wrap PreFlex inside PerFieldCodecWrapper... even if its a 3.x index! This is a problem as it still perpetuates the loss of IR.numUniqueTerms.\n\nSo in this patch we no longer do this, which means I'm able to remove the assume as well.\n\nBut, now that preflex is being tested I think I've found an off-by-one with this statistic when the field name is the empty string. \n\nI'm gonna see if i can make a testcase/issue against 3.x separately for this... because this patch is already too big. \n\nNOTE: reproduce with: ant test -Dtestcase=TestIndexWriter -Dtestmethod=testEmptyFieldName -Dtests.seed=57fd2807ecfb5a2b:5556d32d3a1f68b7:469f7ed779c63825 -Dtests.codec=PreFlex ",
            "author": "Robert Muir",
            "id": "comment-13133800"
        },
        {
            "date": "2011-10-24T02:23:32+0000",
            "content": "I committed the trivial patch to enable this check on 3.x branch... so something else is up with trunk... ill investigate. ",
            "author": "Robert Muir",
            "id": "comment-13133803"
        },
        {
            "date": "2011-10-24T17:06:18+0000",
            "content": "Robert: In your patch is an additional test for CheckIndex on the old indexes. This is implicitely already done by: testSearchOldIndex, which calls Testutil's checkindex as first step. So this test is duplicate and slows down, right? ",
            "author": "Uwe Schindler",
            "id": "comment-13134247"
        },
        {
            "date": "2011-10-24T17:09:54+0000",
            "content": "Uwe yes: i was actually adding this test only for debugging... I'll remove it (it does not give us any additional test coverage) ",
            "author": "Robert Muir",
            "id": "comment-13134248"
        },
        {
            "date": "2011-10-24T17:16:47+0000",
            "content": "updated patch, now that LUCENE-3526 is fixed, all tests passed.\n\n\n\tremoved the useless TestBackwardsCompatibility test (i was just debugging)\n\tfixed TestRollingUpdates to not combine PreFlexCodec and MemoryCodec in PerFieldCodecWrapper (this is stupid, and causes my assert to trip)\n\n ",
            "author": "Robert Muir",
            "id": "comment-13134259"
        },
        {
            "date": "2011-11-27T12:29:34+0000",
            "content": "Bulk close after release of 3.5 ",
            "author": "Uwe Schindler",
            "id": "comment-13157806"
        }
    ]
}