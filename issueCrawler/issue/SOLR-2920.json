{
    "id": "SOLR-2920",
    "title": "Refactor frequent conditional use of DefaultSolrParams into SolrParams.combine(p,d)",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I had a small bug in use of DefaultSolrParams in my code because I didn't check for non-existent defaults.  I noticed through the Solr codebase that is code pattern is very common:\n\n    if( defaults != null ) {\n      params = new DefaultSolrParams( params, defaults );\n    }\n\n\nInstead, I refactored this logic into a new SolrParams.combine(p,d) method and made it so that nobody refers to DefaultSolrParams.  I did similarly for AppendedSolrParams.",
    "attachments": {
        "SOLR-2920_SolrParams_combine().patch": "https://issues.apache.org/jira/secure/attachment/12505158/SOLR-2920_SolrParams_combine%28%29.patch",
        "SOLR-2920_SolrParams_wrapDefaults_and_wrapAppended.patch": "https://issues.apache.org/jira/secure/attachment/12506678/SOLR-2920_SolrParams_wrapDefaults_and_wrapAppended.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-13157304",
            "date": "2011-11-25T21:11:20+0000",
            "content": "The attached patch was done against trunk r1205366 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13159522",
            "date": "2011-11-29T20:29:09+0000",
            "content": "David:\n\n+1 to the refactoring ... thta's a great idea to help eliminate bugs\n\n-0 to the names SolrParams.combine and SolrParams.combineAppended .. \"combine\" doesn't really make it clear what it's doing, it sounds more like a merge then wrapping in a defaults.\n\nWhat do you think about putting each of these static methods in their respective classes?... \"params = DefaultSolrParams.wrap(params,defaults)\" and \"params = AppendedSolrParamswrap(params,extra)\" ?\n\n(BTW: can you config your IDE to not reorder import statements?  makes patches a lot harder to review) "
        },
        {
            "author": "David Smiley",
            "id": "comment-13159850",
            "date": "2011-11-30T06:10:19+0000",
            "content": "Thanks for noticing my issue, Hoss.\n\n\"combine\" vs \"merge\" seem similar to me.  \"wrap\" (if on DefaultSolrParams) or \"wrapDefaults\" (if not) sounds clearer to me.\n\nI started this by putting a method in the respective class it came from, but then I noticed that SolrParams already has some handy static utility methods.  Then it occurred to me that it would be convenient if the caller didn't need to know about all the classes in this package \u2013 just SolrParams with some static factory methods.  It's just one class to import too.  Extending this line of reasoning suggests more refactoring would be in order to create a MapSolrParams.  What do you think?\n\nRE import statements: It would be nice if there was a standard the project could agree on so we could just configure our IDEs consistently.  In the mean time, I'll try to reduce import statement modifications. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13163878",
            "date": "2011-12-06T21:33:30+0000",
            "content": "Anybody have any opinion here?  I'd love to get this issue to a resolution. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13165442",
            "date": "2011-12-08T19:10:43+0000",
            "content": "I started this by putting a method in the respective class it came from, but then I noticed that SolrParams already has some handy static utility methods. Then it occurred to me that it would be convenient if the caller didn't need to know about all the classes in this package\n\nAh ... good point. SolrParams already has static methods like this, and no reason to increase the import count. \n\nSolrParams.wrapAppended and SolrParams.wrapDefaults are a good call. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13165660",
            "date": "2011-12-08T22:58:46+0000",
            "content": "I attached a new patch using wrapDefaults and wrapAppended, and I took care to retain the import statements according to Lucene/Solr's strict standards \n\nI think it's still an open-question if we want to more aggressively take the SolrParams factory-method approach and create some methods that return a MapSolrParams, ModifiableSolrParams, MultiMapSolrParams, and RequiredSolrParams.  Personally, I really like the idea of SolrParams being a one-stop shop for these. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13166462",
            "date": "2011-12-09T19:13:15+0000",
            "content": "David: thanks for the updated, reading the diff something wonky jumped out at me though... \n\nin SingleFragListBuilder & SimpleFragListBuilder the \"params\" are no longer wrapped in defaults at all - is that intentional?  was that dead code before? .. or is that just a accidental deletion?\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13166635",
            "date": "2011-12-09T22:50:44+0000",
            "content": "Those params weren't used at all \u2013 dead code. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13167889",
            "date": "2011-12-12T22:33:35+0000",
            "content": "yep yep ... totally get it now.  they don't use any of the params they are given, so no reason to waste the cycles wrapping the defaults.\n\njust in case though, i added a comment about the defaults in case those methods ever do start using defaults.\n\nCommitted revision 1213474. - trunk\n\n...testing the merge back to 3x now. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13167919",
            "date": "2011-12-12T22:57:39+0000",
            "content": "Committed revision 1213484. - 3x\n\nDavid: thanks for the suggestion & the following through with patch! "
        }
    ]
}