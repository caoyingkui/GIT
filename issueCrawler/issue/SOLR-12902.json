{
    "id": "SOLR-12902",
    "title": "Block Expensive Queries custom Solr component",
    "details": {
        "type": "Task",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [],
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "Added a Block Expensive Queries custom Solr component (\u00a0https://github.com/apache/lucene-solr/pull/47 ) :\n\n\tThis search component can be plugged into your SearchHandler if you would like to block some well known expensive queries.\n\tThe queries that are blocked and failed by component currently are deep pagination queries as they are known to consume lot of memory and CPU. These are\u00a0\n\n\n\n\n\t\n\t\n\t\tqueries with a start offset which is greater than the configured maxStartOffset config parameter value\n\t\tqueries with a row param value which is greater than the configured maxRowsFetch config parameter value",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16664178",
            "content": "Hi Tirth,\n\nI've left a few comments on the PR . I think continuing the review on the PR would be the best approach\n\nFuture ideas could be block facet requests with rows=-1\u00a0 , wildcards in the middle ( you've already mentioned leading wildcards in the docs )\u00a0 etc.\n\n\u00a0\n\nAnshum Gupta\u00a0 @Tomas do you guys have any thoughts on this approach? ",
            "author": "Varun Thacker",
            "date": "2018-10-25T19:09:18+0000"
        },
        {
            "id": "comment-16664187",
            "content": "Varun Thacker I'll take a look. I just glanced through this and seemed like a decent starting point. I've worked on a bunch of things for update/core/schema side of things, but that is different w.r.t. where it hooks in. Whatever we do, we should think about how we expose the settings and have them all seem connected at both query and update side. ",
            "author": "Anshum Gupta",
            "date": "2018-10-25T19:17:56+0000"
        },
        {
            "id": "comment-16664209",
            "content": "Thanks Anshum! In the approach Tirth has taken , it's a search component. So to configure what needs to be blocked one would need to configure the \"defaults\" section of a request handler.\n\nWould this model be consistent with the related hooks that you're referring to? ",
            "author": "Varun Thacker",
            "date": "2018-10-25T19:35:17+0000"
        },
        {
            "id": "comment-16667304",
            "content": "I'd suggest that the search side of things also follows the same path i.e. use collection/cluster property to set these values and the components read the values (or the fact if it's enabled or not) from the CLUSTER/COLLECTION property.\n\nThat would make thing much easier for the user when different values have to be configured for different collections that share the same config. ",
            "author": "Anshum Gupta",
            "date": "2018-10-29T14:52:37+0000"
        },
        {
            "id": "comment-16667690",
            "content": "Hi Anshum Gupta, I have added a test-case in the code to explain the scenario in which the custom component will be helpful. There are 2 parameters that I take directly in the solrconfig.xml file which provides the user to gain flexibility in choosing the parameters upfront. Incase, the user forgets to add them in the solrconfig.xml, the code will pick up default values to handle that case. ",
            "author": "Tirth Rajen Mehta",
            "date": "2018-10-29T20:12:44+0000"
        },
        {
            "id": "comment-16711927",
            "content": "Hi guys, it would be great if someone could review my PR.\n\n\u00a0\n\nThanks. ",
            "author": "Tirth Rajen Mehta",
            "date": "2018-12-06T19:36:24+0000"
        }
    ]
}