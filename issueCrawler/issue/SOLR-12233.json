{
    "id": "SOLR-12233",
    "title": "QParserPlugin maintains a list of classes recreated every time a Solrcore object is created",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.4"
        ],
        "affect_versions": "7.1.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "QParserPlugin maintains a static map of Class Names to Class objects and everytime we create a SolrCore object this causes a lot of overhead doing classloader lookups.\u00a0 Our system runs a lot of cores and the classloader gets bogged down when a lot of threads are creating solrcore objects.\u00a0\u00a0\n\nThere's no need to create these objects every time, similar classes such as\u00a0\n\nTransformerFactory store the object one time and reference it over and over again",
    "attachments": {
        "SOLR-12233.patch": "https://issues.apache.org/jira/secure/attachment/12926587/SOLR-12233.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-04-18T04:41:30+0000",
            "content": "Are you absolutely certain that all of the QParserPlugin implementations are safe to have one instance shared between all SolrCore objects?  How much testing has been done with this patch?\n\nAt first glance (looking at only a few of them) they do look a little bit like factory classes \u2013 each one has an implementation of the abstract method createParser, and it looks like a parser is probably created for every request. ",
            "author": "Shawn Heisey",
            "id": "comment-16441887"
        },
        {
            "date": "2018-04-18T04:50:12+0000",
            "content": "We've done some extensive testing ourselves, the class loader lookups are the expensive part but only during high load with a lot of solr core objects being created in different threads. \u00a0I looked at every class and they all seemed to just be returning new objects, I didn't see a point of recreating them all. ",
            "author": "Jeff Miller",
            "id": "comment-16441894"
        },
        {
            "date": "2018-04-18T04:52:08+0000",
            "content": "In our use case we're loading some 60,000 solrcore objects over 4ish hours and this was one of the high items in the profiling, \u00a0the other being creating the handlers which is a whole other problem (the amount doubled since solr.4 days). Luckily we aren't using half and can just disable them.\n\n\u00a0\n\n*Edit. - I should probably mention these are transient cores, meaning the SolrCore objects are destroyed based on eldest once we hit a threshold, meaning we recreate the core objects a lot in some scenarios. ",
            "author": "Jeff Miller",
            "id": "comment-16441896"
        },
        {
            "date": "2018-04-18T14:17:36+0000",
            "content": "In our use case we're loading some 60,000 solrcore objects\n\nThat many cores on one machine is going to present a LOT of scalability issues, some of which cannot be improved, even when using transient cores.  Anything you can do to decrease this number is going to help.  One idea is to combine data from multiple cores into one core, and use filtering on fields in the document.  Another is to add more servers, so there are fewer cores on each one.\n\nSharing internal objects like this issue aims to do will help, but that can't be done with everything.  A SolrCore instance is not a small object, and takes a little bit of time to initialize.\n\nthe other being creating the handlers which is a whole other problem \n\nThere are a lot of implicit request handlers created even without configuration.  Quite a lot of them were added after the 4.x versions.  It might be that we need a way to disable implicit handlers when the user is facing scalability issues and is absolutely certain that they won't ever need some of them.\n\nhttps://lucene.apache.org/solr/guide/7_3/implicit-requesthandlers.html ",
            "author": "Shawn Heisey",
            "id": "comment-16442577"
        },
        {
            "date": "2018-04-19T01:11:22+0000",
            "content": "+1 to the PR.\n\nI think it makes sense to define\u00a0QParserPlugin.standardPlugins in a way consistent\u00a0with built-in registries of some of Solr's other abstractions:\n\n\tTransformerFactory: TransformerFactory.defaultFactories\n\tQueryResponseWriter: SolrCore.DEFAULT_RESPONSE_WRITERS\n\tValueSourceParser: ValueSourceParser.standardValueSourceParsers\n\n\n\nThat said, some are using the name to Class:\n\n\tSearchComponent: SearchComponent.standard_components\n\n\n\nOne important factor to consider is SolrCoreAware. \u00a0None of the built-in QParserPlugins, TransformerFactories, or\u00a0QueryResponseWriters implement SolrCoreAware, and so it's safe to\u00a0have a global/static Map to an actual instance\u00a0of these built-in classes instead of holding the Class. \u00a0It wouldn't even make sense for the built-in or perhaps any\u00a0QParserPlugin or TransformerFactory to be SolrCoreAware since these are both factories that have a method that take the SolrQueryRequest which provide access to everything. \u00a0Similarly ValueSourceParser.parse provides access, albeit indirectly, to the SolrCore.\n\n\u00a0 ",
            "author": "David Smiley",
            "id": "comment-16443414"
        },
        {
            "date": "2018-04-19T02:49:03+0000",
            "content": "Thanks for your analysis, David Smiley.  This issue has been an education!\n\nWhat do you think of the idea of configuration to turn off implicit handlers? (needs a new issue)  For instance, I have no need for /update/csv, /update/json, or /update/json/docs.  I don't think the admin UI needs those handlers either.\n\nDisabling some of the implicit handlers would make Solr start a little bit faster.  For my servers, with a couple dozen cores, the difference would be very small, but when there are thousands of cores, it could really add up.\n\nI was thinking maybe we could create an umbrella issue for efficiency/scalability improvements outside of SolrCloud.  The issue I've just described, and this issue, could be children of the umbrella issue. ",
            "author": "Shawn Heisey",
            "id": "comment-16443499"
        },
        {
            "date": "2018-04-19T04:02:39+0000",
            "content": "Sorry I didn't address your comments Shawn; I read them. \u00a0I've been working with Jeff and he's been measuring this stuff, and this issue right here was a huge chunk of time (as measured in profiling). \u00a0Sure maybe disabling some things altogether might help as well... but this is an unusual scenario\u00a0to optimize\u00a0for. \u00a0At least this issue seems pretty straight-forward & clean. \u00a0Making some things disable-able might not be worth whatever maintenance/complexity in having that\u00a0option; I don't know yet. \u00a0It seems like premature optimization right now.\n\nBTW if I recall /update/csv etc. are actually still the Update request handler but simply have the content type auto-set to the appropriate mime-type. \u00a0CSVRequestHandler doesn't exist anymore; instead those formats were moved to ContentStreamLoader subclasses.\u00a0So this isn't a good example of excess weight to avoid. ",
            "author": "David Smiley",
            "id": "comment-16443553"
        },
        {
            "date": "2018-06-05T16:07:15+0000",
            "content": "Shawn Heisey I just saw your comment, \u00a0interesting you brought that up. \u00a0I did disable a bunch of the implicit handlers in the json file since they were showing up as heavy hitter during profiling also. \u00a0Another issue I'm tracking but isn't an easy fix is PluginBag loading of plugins from SolrConfig.java, \u00a0the class seems to look for anything implementing those interfaces and uses reflection to look up and create instances of the classes. This is real heavy work if a lot of core loads are happening.\n\nApparently very few customers use core loading often so this doesn't seem to be widely benefitting and some of it ends up staying custom code on our side. ",
            "author": "Jeff Miller",
            "id": "comment-16502014"
        },
        {
            "date": "2018-06-05T16:08:48+0000",
            "content": "Here's a patch, updated to master, which meant adding FilterQParserPlugin.\nI'm running the test stuite / precommit and will commit if it checks out.  My tentative CHANGES.txt will be as follows:\n\n(Optimizations)\n\n\tSOLR-12233: QParserPlugin's built-in static qparser registry now holds actual QParserPlugin instances instead of class references. This is consistent with other plugin registries and allows a SolrCore to load faster.  (Jeff Miller, David Smiley)\n\n ",
            "author": "David Smiley",
            "id": "comment-16502015"
        },
        {
            "date": "2018-06-05T19:11:40+0000",
            "content": "Commit 0c6f38a315d0df5abd01e7d4efe481bc53444a49 in lucene-solr's branch refs/heads/master from Jeff\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0c6f38a ]\n\nSOLR-12233: QParserPlugin's static registry of builtins can be optimized\n to avoid needless ClassLoader activity on SolrCore load. ",
            "author": "ASF subversion and git services",
            "id": "comment-16502340"
        },
        {
            "date": "2018-06-05T19:15:32+0000",
            "content": "Thanks Jeff!\n\nI just realized that when I copy-paste in the diff into IntelliJ from the git PR  (via adding \".patch\" to GH PR URL), it retains your \"Author\" info.  When I finally committed it, I saw the author was retained.  So that's cool because ASFs git history reflects you and it was painless for me to do this. ",
            "author": "David Smiley",
            "id": "comment-16502345"
        },
        {
            "date": "2018-06-06T18:47:20+0000",
            "content": "Commit 2dd6036fbfbbfe18b99c42b9b26e2f51ab21d164 in lucene-solr's branch refs/heads/branch_7x from Jeff\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2dd6036 ]\n\nSOLR-12233: QParserPlugin's static registry of builtins can be optimized\n to avoid needless ClassLoader activity on SolrCore load.\n\n(cherry picked from commit 0c6f38a) ",
            "author": "ASF subversion and git services",
            "id": "comment-16503743"
        }
    ]
}