{
    "id": "LUCENE-857",
    "title": "Remove BitSet caching from QueryFilter",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Since caching is built into the public BitSet bits(IndexReader reader)  method, I don't see a way to deprecate that, which means I'll just cut it out and document it in CHANGES.txt.  Anyone who wants QueryFilter caching will be able to get the caching back by wrapping the QueryFilter in the CachingWrapperFilter.",
    "attachments": {
        "LUCENE-857.refactoring-approach.diff": "https://issues.apache.org/jira/secure/attachment/12355209/LUCENE-857.refactoring-approach.diff",
        "LUCENE-857.patch": "https://issues.apache.org/jira/secure/attachment/12355036/LUCENE-857.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-04-05T20:40:07+0000",
            "content": "QueryFilter without caching.\nI'll commit it tomorrow (Friday) if nobody complains. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12487095"
        },
        {
            "date": "2007-04-05T22:03:12+0000",
            "content": "From email since i didn't notice Otis opened this issue already...\n\nDate: Thu, 5 Apr 2007 14:24:31 -0700 (PDT)\nTo: java-dev@lucene.apache.org\nSubject: Re: Caching in QueryFilter - why?\n\n: Since caching is built into the public BitSet bits(IndexReader reader)\n: method, I don't see a way to deprecate that, which means I'll just cut\n: it out and document it in CHANGES.txt.  Anyone who wants QueryFilter\n: caching will be able to get the caching back by wrapping the QueryFilter\n: in your CachingWrapperFilter.\n\nthis seems like a potentially big surprise for people when upgrading ...\nold code will continue to work fine without warning, just get a lot less\nefficient.\n\nIf the concern is duplicated code, perhaps QueryFilter should be\ndeprecated and changed to be a subclass of CachingWrapperFilter, with a\nconstructor that takes in the Query and wraps it in some new class\n(QueryWrapperFilter perhaps?)  that does the meaty part (collecting the\nmatches) ...\n\n@deprecated use CachingWrapperFilter and QueryWrapperFilter directly\npublic class QueryFilter extends CachingWrapperFilter {\n  public QueryFilter(Query query) \n{\n    super(new QueryWrapperFilter(query));\n  }\n}\n\npublic class QueryWrapperFilter extends Filter {\n  private Query query;\n  public QueryWrapperFilter(Query query) \n{\n    this.query = query;\n  }\n  public BitSet bits(IndexReader reader) throws IOException {\n    final BitSet bits = new BitSet(reader.maxDoc());\n    new IndexSearcher(reader).search(query, new HitCollector() {\n      public final void collect(int doc, float score) \n{\n        bits.set(doc);  // set bit for hit\n      }\n    });\n    return bits;\n  }\n}\n\n\n(obviously we need some toString, equals, and hashCode methods in here as well) ",
            "author": "Hoss Man",
            "id": "comment-12487116"
        },
        {
            "date": "2007-04-08T05:29:47+0000",
            "content": "I think this is where a javadoc and CHANGES.txt come in.  People with serious production environments don't just throw new Lucene version on top of the old one without carefully reading CHANGES.txt.  I do this every time I upgrade.  If one is careless and doesn't read that, then, well...\n\nWhat you suggested is okay, but I didn't want to deprecate the whole class, just remove the caching concern from it, as that's what the CWF is concerned with already.  With your suggestion one can't get a raw QueryFilter without getting it automatically cached.  Isn't this inflexibility uncool? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12487433"
        },
        {
            "date": "2007-04-10T04:00:28+0000",
            "content": "I don't think it's a question of being careless about reading the Changelog \u2013 I just think that when dealing with a point release, we shouldn't require people to make code changes just to get the same behavior as before ... if this was necessary to fix a bug it would be one thing, but really what we're talking about here is refactoring out a piece of functionality (using a Query as a Filter) so that it can be used independently from another piece of functionality (filter caching) ... since that can be done in a backwards compatible way, why not make it easy for people.\n\n> With your suggestion one can't get a raw QueryFilter without getting it \n> automatically cached. Isn't this inflexibility uncool? \n\n...not quite, I'm suggesting that the \"raw\" QueryFilter behavior be extracted into a new class (QueryWrapperFilter) and the existing QueryFilter class continue to do exactly what it currently does - but refactored so that there is no duplicate code. ",
            "author": "Hoss Man",
            "id": "comment-12487679"
        },
        {
            "date": "2007-04-10T04:36:21+0000",
            "content": "An example of what I'm thinking would make sense from a backwards compatibility standpoint ... javadocs could still use some improvement. ",
            "author": "Hoss Man",
            "id": "comment-12487681"
        },
        {
            "date": "2007-04-10T20:43:07+0000",
            "content": "Thanks for the persistence and patience, Hoss.  I see the light now!  The patch wouldn't apply to QueryFilter, so I made changes manually.\nCommitted. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12487910"
        },
        {
            "date": "2007-04-11T00:50:39+0000",
            "content": "Actually Otis: for the backwards compatibility to work, QueryFilter needs to extend CachingWrapperFilter with a constructor like...\n\n   public QueryFilter(Query query) \n{\n     super(new QueryWrapperFilter(query));\n   }\n\n...what you've committed eliminates the caching from QueryFilter  ",
            "author": "Hoss Man",
            "id": "comment-12487964"
        },
        {
            "date": "2007-04-11T02:27:56+0000",
            "content": "But of course.  Thanks for the catch! ",
            "author": "Otis Gospodnetic",
            "id": "comment-12487967"
        }
    ]
}