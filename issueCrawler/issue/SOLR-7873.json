{
    "id": "SOLR-7873",
    "title": "prefix query parser fails with two words and a second field",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.8",
        "status": "Closed",
        "resolution": "Not A Problem",
        "priority": "Minor"
    },
    "description": "works: \n{!prefix f=journal_name}radar c\nworks: pub_name:5 AND {!prefix f=journal_name}\nradar\nfails: pub_name:5 AND \n{!prefix f=journal_name}\nradar c\n\nboth fields are lowercased text fields\nfail results in 0 matches\nany equivalent queries would be welcome",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-05T14:24:19+0000",
            "author": "Erick Erickson",
            "content": "First, please raise issues like this on the user's list first\nbefore raising a JIRA unless you're sure it's a code\nand not a usage problem.\n\nSecond, what do you mean by \"fails\"? Doesn't return the\nexpected docs? Throws an exception? Other?\n\nWhat have you done to try to figure it out? Have you, for \ninstance, attached &debug=query to and seen how it parses?\n\nIn short, there isn't enough info here to say much ",
            "id": "comment-14658278"
        },
        {
            "date": "2015-08-05T15:13:49+0000",
            "author": "Randy Jacobsen",
            "content": "As I said, failure results in 0 matches.\nNo exception.\n\nThe documentation for the prefix query parser is extremely thin:\n\n\"PrefixQParser extends the QParserPlugin by creating a prefix query from the input value. Currently no analysis or value transformation is done to create this prefix query. The parameter is f, the field. The string after the prefix declaration is treated as a wildcard query.\nExample: \n{!prefix f=myfield}\nfoo\nThis would be generally equivalent to the Lucene query parser expression myfield:foo*.\"\n\nNo discusion of more than one word or more than on field. ",
            "id": "comment-14658346"
        },
        {
            "date": "2015-08-05T15:23:00+0000",
            "author": "Erik Hatcher",
            "content": "The {!prefix} query parser works only with individual terms, so generally prefixes won't span words (like the whitespace in the issue description between \"radar\" and \"c\").  Prefix values are taken literally as the start of a single term to match; and relies on the field analysis definition to control what makes terms that are prefix-able.   In other words, this is working as designed.  You may get what you are looking for using the {!complexphrase} query parser instead. ",
            "id": "comment-14658362"
        },
        {
            "date": "2015-08-06T03:58:31+0000",
            "author": "Randy Jacobsen",
            "content": "Thanks for your suggestion.\nWith debugQuery=on the first two queries generate what you would expect.\nYou can use as many terms as you want with only one field.\nYou can use as many fields as you want with only one term.\nThe third query generates \"+pub_name:5 +journal_name:radar* +journal+name:c\" which is obviously bogus.\n\nFrom StackOverflow:\n\n\"Might I suggest the solr prefix query plugin if you are only using it for wildcards on the suffix as we were http://lucene.apache.org/solr/4_0_0/solr-core/org/apache/solr/search/PrefixQParserPlugin.html\n\nexample usage\n\nhttp://localhost:8983/solr/collection/select?q=\n{!prefix%20f=name}\nBob%20Smi\nwould match \"Bob Smith\" or \"Bob Smit\" but not convert into a check of (\"Bob\" OR \"Smi*\") as would happen if you used the first solution you might consider along the lines of q=name:Bob%20Smi*\n\nHopefully this is of some help to you or someone else looking for a simple solution because I was banging my head against a wall for hours before I found this!\" ",
            "id": "comment-14659440"
        }
    ]
}