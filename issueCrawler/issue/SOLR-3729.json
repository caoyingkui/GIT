{
    "id": "SOLR-3729",
    "title": "ExtendedDismaxQParser (edismax) doesn't parse (*:*) properly",
    "details": {
        "affect_versions": "4.0-BETA",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I just happen to notice that (*:*) is not parsed properly by the edismax (ExtendedDismaxQParser) query parser in 4.0-beta. It appears to require spaces before and after the *:*, otherwise it treats the colon as part of a wildcard term (see the escaping below). I haven\u2019t tried other releases yet.\n\nMy original query:\n\nhttp://localhost:8983/solr/select/?debugQuery=true&q=(*:*)&defType=edismax\n\nProduces this:\n\n\n<str name=\"rawquerystring\">(*:*)</str>\n<str name=\"parsedquery\">(+DisjunctionMaxQuery((text:*\\:*)))/no_coord</str>\n<str name=\"parsedquery_toString\">+(text:*\\:*)</str>\n<str name=\"QParser\">ExtendedDismaxQParser</str>\n\n\n\nSome variations I tried:\n\n\n<str name=\"rawquerystring\">( *:*)</str>\n<str name=\"parsedquery\">(+DisjunctionMaxQuery((text:*\\:*)))/no_coord</str>\n<str name=\"parsedquery_toString\">+(text:*\\:*)</str>\n \n<str name=\"rawquerystring\">(*:* )</str>\n<str name=\"parsedquery\">(+DisjunctionMaxQuery((text:*\\:*)))/no_coord</str>\n<str name=\"parsedquery_toString\">+(text:*\\:*)</str>\n \n<str name=\"rawquerystring\">( *:* )</str>\n<str name=\"parsedquery\">(+MatchAllDocsQuery(*:*))/no_coord</str>\n<str name=\"parsedquery_toString\">+*:*</str>\n \n<str name=\"rawquerystring\">(*:* -fox)</str>\n<str name=\"parsedquery\">\n(+(DisjunctionMaxQuery((text:*\\:*)) -DisjunctionMaxQuery((text:fox))))/no_coord\n</str>\n<str name=\"parsedquery_toString\">+((text:*\\:*) -(text:fox))</str>\n \n<str name=\"rawquerystring\">( *:* -fox)</str>\n<str name=\"parsedquery\">\n(+(MatchAllDocsQuery(*:*) -DisjunctionMaxQuery((text:fox))))/no_coord\n</str>\n<str name=\"parsedquery_toString\">+(*:* -(text:fox))</str>",
    "attachments": {
        "SOLR-3729.patch": "https://issues.apache.org/jira/secure/attachment/12541136/SOLR-3729.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13434962",
            "date": "2012-08-15T10:48:20+0000",
            "content": "I wonder if SOLR-3377 introduced this bug? "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13435223",
            "date": "2012-08-15T15:48:54+0000",
            "content": "I verified with 3.6.1 that the problem exists there as well. The only difference is that the colon is not escaped in the debugQuery output:\n\n\n<str name=\"rawquerystring\">(*:*)</str>\n<str name=\"querystring\">(*:*)</str>\n<str name=\"parsedquery\">+DisjunctionMaxQuery((text:*:*))</str>\n<str name=\"parsedquery_toString\">+(text:*:*)</str>\n\n\n\nPutting spaces just inside the parentheses works as in 4.0-beta. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13435226",
            "date": "2012-08-15T15:52:46+0000",
            "content": "Jan, since the SOLR-3377 fix didn't make it into 3.6.1, it would appear that the problem was already there, but that had been my concern. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13435232",
            "date": "2012-08-15T15:55:45+0000",
            "content": "It is also worth noting that the basic Lucene/Solr query parser does not have the problem:\n\n\n<str name=\"rawquerystring\">(*:*)</str>\n<str name=\"parsedquery\">MatchAllDocsQuery(*:*)</str>\n<str name=\"parsedquery_toString\">*:*</str>\n<str name=\"QParser\">LuceneQParser</str>\n\n "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13435538",
            "date": "2012-08-15T21:13:54+0000",
            "content": "Patch for 4x branch, with tests. Tested in Eclipse. Haven't done full ant test or tested with trunk, but should be low risk. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13451185",
            "date": "2012-09-08T00:36:33+0000",
            "content": "assigning to myself to look into later, anyone with an itch to deal with this should not hesitate to take it from me "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13457295",
            "date": "2012-09-17T20:39:03+0000",
            "content": "After reviewing the patch a bit, i'm skeptical of this regex ... in particular it drasticaly changes the behavior in any case where \"*\\:*\" is embedded in a longer string, ala...\n\nhttp://localhost:8983/solr/select?defType=edismax&debugQuery=true&q=foo*:*bar\n\nThere may be other impacts that are less obvious.\n\nGiven that this bug seems to have been around for a while, i don't think we should rush a fix like this into 4.0 ... i'd rather leave it alone until we find a more robust solution. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13457520",
            "date": "2012-09-18T01:02:40+0000",
            "content": "I concur that the patch is insufficient. Unfortunately, to prevent both false positives and false negatives, the regex would have to include the full \"logic\" of what starts and ends a term. Certainly not undoable, but the test cases alone are daunting. Still, it is a shame that the base case of a parenthesized match-all query can't be supported. "
        },
        {
            "author": "Kuro Kurosaka",
            "id": "comment-13475109",
            "date": "2012-10-12T16:17:59+0000",
            "content": "I have an indirect evidence that : is given to the analysis chain and the tokens are concatenated together and fed to DisjunctionMaxQuery when pf= is in use.  Analysis chain (tokenizer+filters) should not be invoked for the special query \":\", should it? Probably because my custom tokenizer generates 3 tokens \"\", \":\", and \"\", I am seeing this in debug output (note a space between \"*\" and \":\"):\n\nDisjunctionMaxQuery((body:\"* : *\"~100^0.5...\n\n\nand the score is not 1.0.\n\nHere are steps to reproduce this using NGramTokenizer. (I'm using NGramTokenizer in non-realistic way because I couldn't find other Tokenizer that divides \":\" into three tokens.)\n\n1. After indexing the Solr sample docs normally, stop the Solr and insert:\n\n    <fieldtype name=\"text_fake\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n       <analyzer type=\"index\">\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.NGramTokenizerFactory\"\n           maxGramSize=\"1\"\n           minGramSize=\"1\" />\n      </analyzer>\n    </fieldtype>\n\n\n\n2. Replace the field definition for \"name\":\n\n   <field name=\"name\" type=\"text_fake\" indexed=\"true\" stored=\"true\"/>\n\n\n\nIn solrconfig.xml, change the default search handler's definition like this:\n\n           <str name=\"defType\">edismax</str>\n         <str name=\"pf\">name^0.5</str>\n\n\n(I guess you could just have these in the URL.)\n\n3. Start Solr and give this URL:\n\nhttp://localhost:8983/solr/select?indent=on&version=2.2&q=*%3A*&fq=&start=0&rows=10&fl=*%2Cscore&qt=&wt=&debugQuery=on\n\n\n\nHopefully you'll see what I see:\n\n<float name=\"score\">0.3663672</float>\n\n\nand\n\n+MatchAllDocsQuery(*:*) DisjunctionMaxQuery((name:\"* : *\"^0.5))\n\n\nin the debug output.\n\nI think two things are wrong here:\n(1) The score calculation should not be attempted when the query is :.\n(2) Even if the score calculation is done, \":\" shouldn't be passed to Tokenizers.\n\n\nIf this phenomena is nothing to do with this bug, my apology.  I'll file a separate bug.\nThis behavior is observed with Solr 3.5.0.  I haven't tried Solr 4.0. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14365934",
            "date": "2015-03-17T20:04:54+0000",
            "content": "Jack Krupansky Can we close this as a dupe of SOLR-3377? "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-16312098",
            "date": "2018-01-04T22:06:27+0000",
            "content": "Can we close this as a dupe of SOLR-3377?\n\nIt's not a dupe AFAICT. It is still reproducible using Solr 7.2. "
        }
    ]
}