{
    "id": "SOLR-10814",
    "title": "Solr RuleBasedAuthorization config doesn't work seamlessly with kerberos authentication",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.2",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Solr allows configuring roles to control user access to the system. This is accomplished through rule-based permission definitions which are assigned to users.\n\nThe authorization framework in Solr passes the information about the request (to be authorized) using an instance of AuthorizationContext class. Currently the only way to extract authenticated user is via getUserPrincipal() method which returns an instance of java.security.Principal class. The RuleBasedAuthorizationPlugin implementation invokes getName() method on the Principal instance to fetch the list of associated roles.\nhttps://github.com/apache/lucene-solr/blob/2271e73e763b17f971731f6f69d6ffe46c40b944/solr/core/src/java/org/apache/solr/security/RuleBasedAuthorizationPlugin.java#L156\n\nIn case of basic authentication mechanism, the principal is the userName. Hence it works fine. But in case of kerberos authentication, the user principal also contains the RELM information e.g. instead of foo, it would return foo@EXAMPLE.COM. This means if the user changes the authentication mechanism, he would also need to change the user-role mapping in authorization section to use foo@EXAMPLE.COM instead of foo. This is not good from usability perspective.",
    "attachments": {
        "SOLR-10814.patch": "https://issues.apache.org/jira/secure/attachment/12881792/SOLR-10814.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-05T15:55:34+0000",
            "content": "Upon investigation, I found that we can utilize getRemoteUser() method in HttpServletRequest class to fetch the name of the authenticated user.\nhttp://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getRemoteUser()\n\nCurrently Hadoop authentication framework returns appropriate information for this method. So we should add an API in AuthorizationContext class to return this information as well (along with relevant changes in RuleBasedAuthorizationPlugin). ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16037127"
        },
        {
            "date": "2017-06-05T21:57:03+0000",
            "content": "GitHub user hgadre opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/210\n\n    SOLR-10814 Solr RuleBasedAuthorizationPlugin works seamlessly with \u2026\n\n    \u2026Kerberos authentication\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/hgadre/lucene-solr solr10814\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/210.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #210\n\n\ncommit c76333f221ab927904d3e4f07e06c83b56e8e007\nAuthor: Hrishikesh Gadre <hgadre@cloudera.com>\nDate:   2017-06-05T20:14:07Z\n\n    SOLR-10814 Solr RuleBasedAuthorizationPlugin works seamlessly with Kerberos authentication\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-16037673"
        },
        {
            "date": "2017-06-05T21:57:30+0000",
            "content": "Ishan Chattopadhyaya can you please take a look? ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16037675"
        },
        {
            "date": "2017-06-06T09:57:45+0000",
            "content": "Hi Hrishikesh, I shall be able to take a look at it by end of day, Wednesday. Pinging Noble Paul here, in case he can do it before me. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16038506"
        },
        {
            "date": "2017-06-07T22:00:30+0000",
            "content": "Just had a brief look at the patch. Here are my observations / concerns:\n\n\tIn general, I agree that the admin shouldn't need to reconfigure his authorization configurations to add the realm name to the usernames.\n\tHowever, I don't think we should deprecate getUserPrincipal() in AuthorizationContext, since many admins who only want kerberos would prefer to keep the realm in their authorization configurations.\n\tAlso, I don't think dropping the realm is a good idea for an organization that has setup cross realm authorization. Imagine that ishan@REALM1 and ishan@REALM2 maybe completely different users.\n\tAlso, this is a significant backcompat break for kerberos+authorization setups that would prevent them from upgrading.\n\tHow about using the getUserPrincipal or getUserName based on some configuration / property? That is, if someone wants to setup Solr for a variety of authentication mechanisms, he could enable some configuration property after which the getUserName() would be used instead of getPrincipal (or other way around)?\n\n ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16041730"
        },
        {
            "date": "2017-06-07T23:07:02+0000",
            "content": "Ishan Chattopadhyaya\n\nAlso, this is a significant backcompat break for kerberos+authorization setups that would prevent them from upgrading.\nHow about using the getUserPrincipal or getUserName based on some configuration / property? That is, if someone wants to setup Solr for a variety of authentication mechanisms, he could enable some configuration property after which the getUserName() would be used instead of getPrincipal (or other way around)?\n\nI agree. We can make this behavior configurable for RuleBasedAuthorizationPlugin\n\nAlso, I don't think dropping the realm is a good idea for an organization that has setup cross realm authorization. Imagine that ishan@REALM1 and ishan@REALM2 maybe completely different users.\n\nI disagree. We are not dropping the RELM from the principal name. The kerberos authentication plugin applies a set of \"kerberos name rules\" to the authenticated principal and uses the result as the \"short user name\". Hence it is possible for the system administrators to tweak the output of this process by modifying the kerberos name rules parameter. Here are few pointers for more details,\n\nhttps://web.mit.edu/kerberos/krb5-1.5/krb5-1.5.1/doc/krb5-admin/realms--krb5.conf-.html\nhttps://www.cloudera.com/documentation/enterprise/latest/topics/cdh_sg_kerbprin_to_sn.html\n\nHowever, I don't think we should deprecate getUserPrincipal() in AuthorizationContext, since many admins who only want kerberos would prefer to keep the realm in their authorization configurations.\n\nI disagree. This is not just restricted to RuleBasedAuthorizationPlugin, but it applies to all future implementations of AuthorizationPlugin (e.g. SENTRY-1475). Specifically - if AuthorizationContext provides both user_principal and user_name, which of these should be used by the plugin implementation? \n\nI know that Apache Sentry always uses short user name for configuring permissions (even when kerberos is used). \n\nI found that Apache Ranger is converting the kerberos principal to the short username as part of the authorization plugin implementation,\nhttps://github.com/apache/ranger/blob/16f3dd3c350ac9ea85b157b81ceddfcdb761e128/plugin-solr/src/main/java/org/apache/ranger/authorization/solr/authorizer/RangerSolrAuthorizer.java#L170\n\nThe problem I have with this implementation in Apache Ranger is that the details of authentication mechanism are spilling into the authorization logic. e.g. take a look at following comment,\nhttps://github.com/apache/ranger/blame/16f3dd3c350ac9ea85b157b81ceddfcdb761e128/agents-audit/src/main/java/org/apache/ranger/audit/provider/MiscUtil.java#L560\n\nIdeally I would expect the authorization plugin to deal with just short user names and be completely agnostic of underlying authentication mechanism. \n\nSo to summarize - here is my proposal,\n\n\tI agree that we need to be backwards compatible with respect to RuleBasedAuthorizationPlugin. Hence we should make the switch from principal name to user_name configurable.\n\tI don't agree with the rationale of not deprecating getUserPrincipal(). Most of the role based authorization solutions are using short user names. Hence if we deprecate getUserPrincipal() for Solr 7.0 (and/or 6.x), we can wait until 8.0 to clean this up. That will provide sufficient time for the administrators to migrate their authorization settings to user short user-names.\n\n\n\nPlease let me know your thoughts.\n\n ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16041860"
        },
        {
            "date": "2017-06-26T16:56:25+0000",
            "content": "Ishan Chattopadhyaya any thoughts? This bugfix is needed for Solr/Sentry integration. Hence any feedback would be great... ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16063398"
        },
        {
            "date": "2017-06-29T15:04:21+0000",
            "content": "ping...\n\nAnshum Gupta Noble Paul Any thoughts? ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16068447"
        },
        {
            "date": "2017-06-30T05:38:02+0000",
            "content": "Hrishikesh Gadre Yes, in case of Kerberos foo@EXAMPLE.COM has to be specified in the user role mapping. So what is wrong with that ? How do you want it to be changed? do you wish to use just foo instead of  user@EXAMPLE.COM?\n\nSo, is the objective of the ticket is to \"use simple names instead of full name\"? ",
            "author": "Noble Paul",
            "id": "comment-16069520"
        },
        {
            "date": "2017-06-30T21:59:15+0000",
            "content": "Noble Paul, I think the objective is to be able to re-use the authorization configs across BasicAuth and Kerberos. Kerberos requires that principals have the realm, but basicAuth usernames are simple ones.\n\nI agree with the objectives and the patch in general. However, as I mentioned, my major concerns are (a) backward compatibility (maybe the latest patch takes care of it) and (b) I don't think we should be deprecating getUserPrincipal(), which the authorization plugins have had available till now \u2013 I don't mind getUsername() being used in out of the box authz plugins going forward, but I don't want to break or forcefully upgrade any third party using plugin that uses the full user principal; e.g. Ranger plugin maybe?  Don Bosco Durai, any thoughts?.\n\nNoble, what do you think on the latter issue? ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16070777"
        },
        {
            "date": "2017-06-30T22:02:57+0000",
            "content": "Hrishikesh Gadre, actually, looking at your above comment on Ranger, I am less sure about not wanting to deprecate.\nI'll be able to take a fresh look at it on Tuesday. Thanks for your patience and apologies for the delay. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16070780"
        },
        {
            "date": "2017-06-30T22:24:54+0000",
            "content": "Ishan Chattopadhyaya Noble Paul Thanks for your feedback. \n\nNote - I have not yet updated the patch as I was wanted to ensure that we all agree on the approach. Here is the summary of my thinking so far,\n\n\twe need to be backwards compatible with respect to RuleBasedAuthorizationPlugin. Hence we should make the switch from principal name to user_name configurable.\n\tWe should use short user name instead of principal as most of the role based authorization solutions are using short user names. Here we have two options,\n\n\n\noption (a) Expose both short user-name and principal\n\nAdvantages\n(a) No need to worry about backwards incompatibility\n\nDisadvantages\n(a) Confusing for the third party integrators (Since similar information is available from both these APIs, which one should be used?) Clearly using getPrincipal() will require updating authorization metadata every time authentication mechanism is changed from/to kerberos. Hence most likely everyone will end up using getUserName() and will leave getPrincipal() unused for most part.\n\noption (b) Expose short user-name and deprecate getPrincipal() method\n\nAdvantages\n(a) No confusion with respect to which APIs to use.\n(b) The API result will be consistent across authentication mechanisms.\n\nDisadvantages\n(a) May have backwards incompatibility concerns further down the line (e.g. during Solr 8.0 release).\n\nLet me know your thoughts and I will update the patch accordingly. ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16070799"
        },
        {
            "date": "2017-06-30T22:56:19+0000",
            "content": "My preference is option a, with properly worded javadocs (which includes details on which authentication plugins return what, etc.) to help the third party plugin writer to take the right decision. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16070826"
        },
        {
            "date": "2017-06-30T23:29:45+0000",
            "content": "This should be a configuration for the kerberos plugin . It can return appropriate name based on that configuration. Then, we don't need to touch the RuleBasedAuthorizationPlugin ",
            "author": "Noble Paul",
            "id": "comment-16070859"
        },
        {
            "date": "2017-07-14T18:19:19+0000",
            "content": "Noble Paul I don't think any changes in the kerberos plugin are required. The representation of the user principal is a property of KERBEROS protocol and the KerberosPlugin is correctly reflecting it. The approach suggested by Ishan Chattopadhyaya is safer from backwards compatibility perspective. Let me update the patch... ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16087737"
        },
        {
            "date": "2017-07-14T18:50:23+0000",
            "content": "Ishan Chattopadhyaya I have updated the pull request. Note that\n\nTestRuleBasedAuthorizationPlugin -> Uses the getUserPrincipal() API (For testing backwards compatibility)\nTestRuleBasedAuthorizationWithKerberos -> Uses the getUserName() API \n\nAnshum Gupta This is the jira that I mentioned yesterday during the Solr meetup. Assuming that Ishan Chattopadhyaya is happy with the latest patch, can we please consider back-porting it to 7.0 branch? This is very important for Solr/Sentry integration that I am working on (SENTRY-1475)  ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16087788"
        },
        {
            "date": "2017-07-17T23:28:36+0000",
            "content": "I don't think I'll have the time to take a look at this, but I'll wait for Ishan to comment on this one. Also, can both of you weigh in on it's potential impact on existing code? I ask because I know that the Kerberos tests weren't the best ones, for multiple reasons .  ",
            "author": "Anshum Gupta",
            "id": "comment-16090791"
        },
        {
            "date": "2017-07-17T23:42:06+0000",
            "content": "Anshum Gupta\n\nAlso, can both of you weigh in on it's potential impact on existing code? I ask because I know that the Kerberos tests weren't the best ones, for multiple reasons\n\nWith my latest patch, there is no impact on the existing code. I have added a unit test verifying RuleBasedAuthorizationPlugin with Kerberos. Also all the unit tests are passing locally. ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16090805"
        },
        {
            "date": "2017-07-25T09:17:16+0000",
            "content": "Ishan Chattopadhyaya and Hrishikesh Gadre thanks for keeping the getUserPrincipal() API. We are using it in Ranger and it helps us to use the same auth to local rules from Hadoop UGI.\n\nThanks\n\n ",
            "author": "Don Bosco Durai",
            "id": "comment-16099759"
        },
        {
            "date": "2017-07-25T11:00:44+0000",
            "content": "Hrishikesh Gadre can you tell us which is the latest pull request ",
            "author": "Noble Paul",
            "id": "comment-16099862"
        },
        {
            "date": "2017-07-25T11:16:56+0000",
            "content": "I talked to Ishan Chattopadhyaya and I still believe the following is the best solution\n\n\n\tKerBerosPlugin will emit a KerberoPrincipal which has 2 extra methods getRealm() and getFullName() .\n\tThe Principal#getName() will continue to return the long name\n\tAdd an extra flag fro kerberosPlugin say kerberos.useShortName . If that flag is set to true  Principal#getName() returns short names else it will continue to return the long name as it does today\n\tThis solution is backward compatible and we don't need to touch any other plugin other than the KerberosPlugin\n\n ",
            "author": "Noble Paul",
            "id": "comment-16099868"
        },
        {
            "date": "2017-07-25T11:48:49+0000",
            "content": "Noble Paul, what will be the default value for kerberos.useShortName flag? ",
            "author": "Don Bosco Durai",
            "id": "comment-16099913"
        },
        {
            "date": "2017-07-25T11:50:37+0000",
            "content": "Noble Paul, what will be the default value for kerberos.useShortName flag?\n\nfalse. If it is true, it will be incompatible with all users who use kerberos today ",
            "author": "Noble Paul",
            "id": "comment-16099917"
        },
        {
            "date": "2017-07-25T11:57:54+0000",
            "content": "Great, this should work for Apache Ranger with no changes.\n\nThanks ",
            "author": "Don Bosco Durai",
            "id": "comment-16099925"
        },
        {
            "date": "2017-07-25T15:39:46+0000",
            "content": "Noble Paul\n\ncan you tell us which is the latest pull request\n\nI have only one pull request. (Updated the same with the review feedback). https://github.com/apache/lucene-solr/pull/210\n\nKerBerosPlugin will emit a KerberoPrincipal which has 2 extra methods getRealm() and getFullName() .\n\nBTW KerberosPlugin is not the only option for using kerberos with Solr. We have recently added HadoopAuthPlugin which allows configuring any authentication mechanism provided by underlying Hadoop framework (e.g. LDAP, OAuth etc.). Your suggestion will not work in that case (without adding hacks to identify Kerberos auth type).\n\nWhat are your thoughts on adding getUserName() method to AuthorizationContext ? Since we are keeping getPrincipal() method as well, the latest patch is perfectly backwards compatible. Please review the pull request and let me know what you think. ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16100222"
        },
        {
            "date": "2017-07-25T15:51:33+0000",
            "content": "Noble Paul\n\nJust to clarify - even though I have worded this jira as related RuleBasedAuthorizationPlugin + Kerberos, it can be a problem for any authentication mechanism which provides a Principal string other than the short user name.   ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16100249"
        },
        {
            "date": "2017-07-25T15:55:13+0000",
            "content": "BTW KerberosPlugin is not the only option for using kerberos with Solr. We have recently added HadoopAuthPlugin which allows configuring any authentication mechanism provided by underlying Hadoop framework (e.g. LDAP, OAuth etc.). \n\nAll authentication plugins should extend the AuthenticationPlugin class. So, it should decide what details it should return. This has nothing to do with what underlying authentication is used. The authorization plugin should be agnostic of authentication mechanism\n\nWhat are your thoughts on adding getUserName() method to AuthorizationContext ?\n\nHow do you expect RuleBasedAuthorizationPlugin to work w/o changes. What about other users who already relies on getUserPrincipal() \n ",
            "author": "Noble Paul",
            "id": "comment-16100258"
        },
        {
            "date": "2017-07-25T15:56:03+0000",
            "content": "Don Bosco Durai\n\nand it helps us to use the same auth to local rules from Hadoop UGI.\n\nIn my patch, we are using the short username provided by Hadoop authentication layer itself. So we would be using the same auth to local rules from the Hadoop UGI. ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16100260"
        },
        {
            "date": "2017-07-25T16:02:45+0000",
            "content": "The problem with the solution is, the configuration for what feature of authentication to use is set in the authorization plugin. Every plugin will need to have a special flag to achieve this. This makes no sense to me. The framework is supposed to take care of these things. \n\nIf there is a Ranger Authorization plugin, you want them to implement this flag as well? ",
            "author": "Noble Paul",
            "id": "comment-16100273"
        },
        {
            "date": "2017-07-25T21:36:54+0000",
            "content": "Noble Paul\n\nIf there is a Ranger Authorization plugin, you want them to implement this flag as well?\n\nAFAIK Ranger plugin does not need this flag (or this fix in general) since they have already implemented logic to parse Kerberos principal -> short userName. \nhttps://github.com/apache/ranger/blame/16f3dd3c350ac9ea85b157b81ceddfcdb761e128/agents-audit/src/main/java/org/apache/ranger/audit/provider/MiscUtil.java#L560\n\nThe concern here is that it \"assumes\" kerberos authentication. I don't know if this works for any authentication type other than Kerberos (e.g. basic auth).\n\nThe framework is supposed to take care of these things.\n\nI agree. In the hindsight, it was a mistake for Solr authorization framework to provide java.security.Principal as part of AuthorizationContext (instead of short userName) since the Principal representation depends upon the type of the authentication scheme. \n\nAll authentication plugins should extend the AuthenticationPlugin class. So, it should decide what details it should return. This has nothing to do with what underlying authentication is used. \n\nHow would we do that? By overriding getUserPrincipal() method in the HttpServletRequest class ? I would be concerned with that. Since  getUserPrincipal() is a public method and can be used by downstream components (e.g. custom request handlers, plugins etc.), this would be a backwards incompatible change.\n\nA safer alternative may be to let authorization framework handle this global flag and return short username (or user principal) accordingly.\nhttps://github.com/apache/lucene-solr/blob/10875143b2eb4c6cd72c7a93e657833444498b66/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java#L1034\n\n\n  @Override\n  public Principal getUserPrincipal() {\n    if (Boolean.getBoolean(\"solr.authorization.useShortName\") {\n      return new BasicUserPrincipal(getReq().getRemoteUser());\n    }\n    return getReq().getUserPrincipal();\n  }\n\n\n\n\n\n\n ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16100832"
        },
        {
            "date": "2017-07-26T03:57:43+0000",
            "content": "A safer alternative may be to let authorization framework handle this global flag and return short username (or user principal) accordingly.\n\nThis looks OK. But where does a user set this solr.authorization.useShortName? in a system property? No . We must avoid system properties as much as possible. It could be a global property at the same level as authentication & authorization\n\nsecurity.json\n{\n\"useShortUserName\": true,\n\"authentication\":{},\n\"authorization\":{}\n}\n\n\n\nWe will need to add a command to toggle this flag  ",
            "author": "Noble Paul",
            "id": "comment-16101137"
        },
        {
            "date": "2017-07-26T09:15:00+0000",
            "content": "After going again through the discussion, I personally feel, option A is a good option. \n> option (a) Expose both short user-name and principal\nIt should be the authentication plugins responsibility to set/derive the short name, but also expose the security Principal, so that the authorization module (or others) if it wants to, it can process the Principals as it wishes. \n\nSo in the future, if we start supporting certificate based two way SSL authentication, then the SSLAuthPlugin will be responsible for getting the CN from the certificate and derive the shortUserName from it, but also make the entire DN available in the getPrincipal() API.\n\nIn most cases, all the code should use getShortName(), which should be user friendly and printable string. So that we can use it in logs and other places.\n\nThis approach will give provide both backward compatibility and also we don't have to do any property hacks. And make it future proof for any new authentication plugins.\n ",
            "author": "Don Bosco Durai",
            "id": "comment-16101408"
        },
        {
            "date": "2017-07-26T10:27:04+0000",
            "content": "No. getShortName() is not backward compatible. How are you going to switch between the both? ",
            "author": "Noble Paul",
            "id": "comment-16101510"
        },
        {
            "date": "2017-07-26T10:34:00+0000",
            "content": "No. getShortName() is not backward compatible. How are you going to switch between the both?\nWhat I meant was, all existing code will continue using getPrincipal(). And for anyone writing new authorization plugin, they can use either of the two methods. Those who want to keep to play it safe, can use getShortName()  and not worry about the underlying authentication mode. And those who want to do additional processing then can use getPrincipal(). \n\n\n\n ",
            "author": "Don Bosco Durai",
            "id": "comment-16101521"
        },
        {
            "date": "2017-08-07T18:53:54+0000",
            "content": "What I meant was, all existing code will continue using getPrincipal(). And for anyone writing new authorization plugin, they can use either of the two methods. Those who want to keep to play it safe, can use getShortName() and not worry about the underlying authentication mode. And those who want to do additional processing then can use getPrincipal().\n\nDon Bosco Durai Thanks for your feedback. I think it make sense. I would prefer to use short userName for Sentry plugin (instead of requiring some special configuration from user).\n\nNoble Paul it looks like Apache Ranger and Sentry plugins would not need special flag if the short username is exposed via AuthorizationContext. But as you said RuleBasedAuthorizationPlugin (and other third-party implementations) may benefit from a global flag. After thinking about it, I am not sure if we can have one solution which would benefit all plugins.\n\nSo I suggest following approach,\n\n\tExpose short userName via AuthorizationContext. This will allow new plugin implementations to work without any special configuration.\n\tAdd a parameter in security.json which can define the result of the AuthorizationContext#getPrincipal() API (i.e. a fully qualified principal name vs short userName). This will allow RuleBasedAuthorization plugin as well as other third party implementations to work without any changes. (Note - user will need to set this parameter for that though).\n\n\n\nDoes that make sense? ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16117059"
        },
        {
            "date": "2017-08-08T11:13:36+0000",
            "content": "Expose short userName via AuthorizationContext. This will allow new plugin implementations to work without any special configuration.\n\nTell me , how will the new plugin implementation know whether to use a short name or a long name? \n\nAnyway, I personally am ambivalent about how third party plugins are written. \n\nThe flag anyway lets the user switch between long and short name easily. RuleBasedAuthorizationPlugin does not have to be modified.  ",
            "author": "Noble Paul",
            "id": "comment-16118197"
        },
        {
            "date": "2017-08-08T15:03:13+0000",
            "content": "Noble Paul\n\nTell me , how will the new plugin implementation know whether to use a short name or a long name?\n\nWe will just use the short name all the time (and ignore the long name). Obviously this means that the plugin can only work for Solr releases which contain this fix. But I think that is ok. ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16118434"
        },
        {
            "date": "2017-08-08T15:35:09+0000",
            "content": "I think we have reached a consensus ",
            "author": "Noble Paul",
            "id": "comment-16118477"
        },
        {
            "date": "2017-08-08T16:26:13+0000",
            "content": "+1\nSeems reasonable to me also. Thanks ",
            "author": "Don Bosco Durai",
            "id": "comment-16118574"
        },
        {
            "date": "2017-08-08T20:20:08+0000",
            "content": "Thanks Noble Paul and Don Bosco Durai for your feedback!\n\nI have updated the pull request based on our discussion: https://github.com/apache/lucene-solr/pull/210\n\nBTW I found that SecurityConfHandler in Solr does not support configuring top-level elements of the security.json file. Users are expected to upload the security.json file manually to Zookeeper. Once this is done, the individual authentication/authorization plugins can edit their own configuration via Solr HTTP APIs. Hence I think the ability to update this flag (as well as initial configuration of plugins) via HTTP API should be handled as part of a separate jira. Does that make sense?\n\nNoble Paul Anshum Gupta Please include this fix in the Solr 7.0 branch as it will simplify the Solr/Sentry integration. \n ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16118958"
        },
        {
            "date": "2017-08-09T06:51:50+0000",
            "content": "BTW I found that SecurityConfHandler in Solr does not support configuring top-level elements of the security.json file \n\ncorrect and we need to add it\n\nPlease include this fix in the Solr 7.0 branch as it will simplify the Solr/Sentry integration.\n\nWe have already frozen 7.0 branch. This can go in 7.1 which will be released pretty soon ",
            "author": "Noble Paul",
            "id": "comment-16119496"
        },
        {
            "date": "2017-08-11T22:08:21+0000",
            "content": "Noble Paul OK I filed SOLR-11230 for introducing the HTTP APIs for configuring global properties in security.json. If you get a chance, can you please review (and commit) the patch for this jira? ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16124178"
        },
        {
            "date": "2017-08-14T14:21:28+0000",
            "content": "If you get a chance, can you please review (and commit) the patch for this jira?\n\nwhere is the patch? ",
            "author": "Noble Paul",
            "id": "comment-16125737"
        },
        {
            "date": "2017-08-14T17:16:59+0000",
            "content": "Noble Paul I had opened a github pull request. Anyway I am uploading a patch as well. Please take a look and let me have your feedback. ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16126006"
        },
        {
            "date": "2017-08-18T18:55:07+0000",
            "content": "Noble Paul could you please review the attached patch? ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16133465"
        },
        {
            "date": "2017-08-25T17:17:58+0000",
            "content": "Noble Paul ping  ",
            "author": "Hrishikesh Gadre",
            "id": "comment-16141918"
        },
        {
            "date": "2017-08-26T06:19:06+0000",
            "content": "There should be  a command to edit this property at /security endpoint \n\n\ncurl  http://localhost:8983/solr/admin/authentication -H 'Content-type:application/json' -d  '{\n \"set-useShortNames\": true}'\n\n\n\nThis should be implemented in SecurityConfHandler.java instead of the Authentication Plugin\n\nThe variable useShortNames must be stored in SecurityConfHandler.SecurityConfig instead of CoreContainer\n ",
            "author": "Noble Paul",
            "id": "comment-16142641"
        }
    ]
}