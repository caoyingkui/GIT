{
    "id": "SOLR-8909",
    "title": "Streaming Expressions should leverage streaming facets",
    "details": {
        "components": [
            "Facet Module",
            "streaming expressions"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "The JSON Facet API can currently stream facets (use method=stream) from a single node.  Each facet bucket is calculated as it is written out, so field cardinality has no effect on memory.\n\nThis is only from a single node - normal distributed search/faceting does not stream...  But that's what streaming expressions are for anyway!\n\nOne current caveat: streaming currently only works with \"sort=index asc\" (the term order in the Lucene index).\nFuture work could allow more complex sorts, at the cost of some memory to calculate the sort criteria for each bucket prior to streaming out.  Of course more complex sorts would require more complex merging logic (i.e. even a sort by bucket count is not a simple merge sort and requires more buffering in the merging node).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-26T02:14:34+0000",
            "author": "Joel Bernstein",
            "content": "This is another powerful tool in the toolbox.\n\nWe can probably build this into the FacetStream by adding the method param and a new code path to handle the merge.\n\nWith the SQL handler, we can probably use this approach in most scenarios because we can re-order the Tuples by wrapping the FacetStream in a RankStream.\n\nThe RollupStream will likely only need to be used following distributed joins. ",
            "id": "comment-15212736"
        }
    ]
}