{
    "id": "SOLR-6595",
    "title": "Improve error response in case distributed collection cmd fails",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.10",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "Followed the description https://cwiki.apache.org/confluence/display/solr/Enabling+SSL and generated a self signed key pair. Configured a few solr-nodes and used the collection api to crate a new collection. I get error message when specify the nodes with the createNodeSet param. When I don't use createNodeSet param the collection gets created without error on random nodes. Could this be a bug related to the createNodeSet param? Update: It failed due to what turned out to be invalid client certificate on the overseer, and returned the following response:\n\n\n<response>\n  <lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">185</int></lst>\n  <lst name=\"failure\">\n    <str>org.apache.solr.client.solrj.SolrServerException:IOException occured when talking to server at: https://vt-searchln04:443/solr</str>\n  </lst>\n</response>\n\n\n\nUpdate: Three problems:\n\n\tStatus=0 when the cmd did not succeed (only ZK was updated, but cores not created due to failing to connect to shard nodes to talk to core admin API).\n\tThe error printed does not tell which action failed. Would be helpful to either get the msg from the original exception or at least some message saying \"Failed to create core, see log on Overseer <node.name>\n\tState of collection is not clean since it exists as far as ZK is concerned but cores not created. Thus retrying the CREATECOLLECTION cmd would fail. Should Overseer detect error in distributed cmds and rollback changes already made in ZK?",
    "attachments": {
        "SOLR-6595.patch": "https://issues.apache.org/jira/secure/attachment/12949544/SOLR-6595.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-10-06T20:40:54+0000",
            "author": "Erick Erickson",
            "content": "Please raise this kind of issue on the user's list first, then if it turns out not to be\npilot error raise a JIRA.\n\nNothing substantive, I have no clue about this particular issue though. ",
            "id": "comment-14160902"
        },
        {
            "date": "2014-10-08T13:12:41+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Does it work with createNodeSet when using plain SolrCloud without SSL?\n\nPlease provide the exact CollectionApi request you used when it failed, so we can see if the syntax is correct. Also, is 443 your secure port number in Jetty/Tomcat? ",
            "id": "comment-14163460"
        },
        {
            "date": "2014-10-08T13:56:08+0000",
            "author": "Sindre Fiskaa",
            "content": "Yes, running SolrCloud without SSL it works fine with the createNodeSet param. I run this with Tomcat application server and 443 enabled.\n\nAlthough I receive this error message the collection and the shards gets created and the clusterstate.json updated, but the cores are missing. I manual add them one by one in the admin console so I get my cloud up running and the solr-nodes are able to talk to each other - no certificate issues or SSL handshake error between the nodes.\n\ncurl -E solr-ssl.pem:secret12 -k 'https://vt-searchln03:443/solr/admin/collections?action=CREATE&numShards=3&replicationFactor=2&name=multisharding&createNodeSet=vt-searchln03:443_solr,vt-searchln04:443_solr,vt-searchln01:443_solr,vt-searchln02:443_solr,vt-searchln05:443_solr,vt-searchln06:443_solr'\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n<lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">206</int></lst><lst name=\"failure\"><str>org.apache.solr.client.solrj.SolrServerException:IOException occured when talking to server at: https://vt-searchln03:443/solr</str><str>org.apache.solr.client.solrj.SolrServerException:IOException occured when talking to server at: https://vt-searchln04:443/solr</str><str>org.apache.solr.client.solrj.SolrServerException:IOException occured when talking to server at: https://vt-searchln06:443/solr</str><str>org.apache.solr.client.solrj.SolrServerException:IOException occured when talking to server at: https://vt-searchln05:443/solr</str><str>org.apache.solr.client.solrj.SolrServerException:IOException occured when talking to server at: https://vt-searchln01:443/solr</str><str>org.apache.solr.client.solrj.SolrServerException:IOException occured when talking to server at: https://vt-searchln02:443/solr</str></lst>\n</response> ",
            "id": "comment-14163509"
        },
        {
            "date": "2014-10-11T21:47:49+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "The reason for the IOException was that the Overseer node did not have the correct SSL certificate required for authenticating with all the other Solr nodes. Uploading the correct certificate to all nodes solved the issue.\n\nHowever, will re-purpose this issue to improving error response on failed distributed collection actions. ",
            "id": "comment-14168366"
        },
        {
            "date": "2014-10-11T22:21:54+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Comment to the three listed problems in the updated problem description:\n\n\tWhat error code to return? Anything is better than 0. In this case it's a server configuration error, so 5xx? But where to modify the status code? Perhaps OverseerCollectionProcessor#processResponse()?\n\tHow about printing the Exception-class names of all intermediate exceptions in the chain and then the message from the original one?\n\tRollback of partially successful collection create would be interesting, but deserves its own JIRA perhaps \n\n ",
            "id": "comment-14168385"
        },
        {
            "date": "2014-10-24T21:01:17+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Appreciate feedback and discussion on how to solve this... ",
            "id": "comment-14183481"
        },
        {
            "date": "2015-12-02T20:12:03+0000",
            "author": "mugeesh",
            "content": "above conversation nobody tell clearly how to solve it,\nI am getting same error in solr-5.3.\nProvide the exact command for creating create colllection/core. ",
            "id": "comment-15036518"
        },
        {
            "date": "2016-10-14T12:37:34+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I wonder if the error reporting might be solved during a lot of refactoring of the overseer, async operations etc? Anyone? ",
            "id": "comment-15575214"
        },
        {
            "date": "2018-11-19T21:49:08+0000",
            "author": "Jason Gerlowski",
            "content": "Wanted to check in on this and see which of the original concerns are still issues:\n\nStatus=0 when the cmd did not succeed\nStill a problem, though it will soon be fixed for CREATE, the reporter's original example here.\n\nThe error printed does not tell which action failed\nStill a problem, but a hard one: it's tough to guess which bits in the exception chain are the helpful bits.  The top and root of the chain are the most likely entries to be interesting, but not always.  Any truncation of the exception chain is going to reduce the chance we're conveying the important part.\n\nState of collection is not clean since it exists as far as ZK is concerned but cores not created\nThis should have already been fixed in SOLR-8983.\n\nSo I'd argue that fixing the status property should be our main goal.  To that end, I've attached a patch fixing this problem for CREATE on SOLR-5970.  I don't like the narrowness of that fix though will spend some time seeing if there's a way it can be generalized at a different level of our collection API processing.  Going to assign this to myself. ",
            "id": "comment-16692329"
        },
        {
            "date": "2018-11-26T20:51:36+0000",
            "author": "Jason Gerlowski",
            "content": "I've attached a patch here which ensures that any collection-api response with a non-empty \"failure\" property also has its status set to 500.  This has the advantage of covering things more generically and save us from constantly finding new cases where the status property (and HTTP status code) is incorrect.  (There's a few different JIRAs open at the moment for similar issues with various collection APIs.).\n\nReviewers might notice that I change the status to 500 not by throwing a SolrException as is common, but my introducing a field in SolrQueryResponse as a \"status-override\".  I didn't like deviating from the normal way of doing things, and I don't love introducing yet-another way to set the API status, but I had trouble finding a good way to flatten the often-nested structure of the \"failure\" map into a message for a SolrException without losing tons of information that could help the user out.  If anyone sees a better way here, I'd love some review/feedback.\n\nThis change triggers a few additional test failures- the API calls in these tests have apparently been failing for some time before this change but we never noticed since the incorrect statuses obscured the problem.  So this patch includes fixes for a number of these tests.  I'm still building confidence that I've caught all of these cases, hoping to flush out more status-related test failures through the week.  If my runs stop finding issues by the end of the week, I'll be looking to commit. ",
            "id": "comment-16699566"
        },
        {
            "date": "2018-11-28T19:07:50+0000",
            "author": "Jason Gerlowski",
            "content": "Thinking aloud here, and I guess also soliciting feedback.\n\nThe current patch sets 500 as the value for the \"status' property, as well as the HTTP status code on the response.  The expectation in most other places seems to be that the \"status\" property matches the HTTP status code.  So this seems like the technically correct thing to do from an API perspective.\n\nThere's is a downside to this though- SolrJ converts non-200 responses into exceptions.  So while the failure information is still in the response, SolrJ users can't get at it.  (This isn't strictly true...SolrJ tries its best to come up with a good exception message by looking for properties like \"error\" and \"failure\".  But that's a pale substitute to giving users access to the response itself if they want it).\n\nIt'd be cool if SolrJ users could access the original response in exceptional cases.  Maybe we should attach the parsed NamedList to RemoteSolrExceptions that get thrown by SolrJ.  That seems like a separate JIRA, but wanted to raise it here since it bears on these response changes indirectly. ",
            "id": "comment-16702292"
        }
    ]
}