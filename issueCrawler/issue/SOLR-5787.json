{
    "id": "SOLR-5787",
    "title": "Get spellcheck frequency relatively to current query",
    "details": {
        "affect_versions": "4.6",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "spellchecker"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I guess that this functionnality isn't implemented yet. I'll begin by an example to explain what I'm requesting:\n\nI have a lucene query that get articles satisfying a certain query. With this same command, I'm getting at the same time suggestions if this query doesnt return any article (so far, nothing unusual). \n\nThe frequency (count) associated with these suggestions is relative to all index (it counts all occurences of the suggestion in the whole index). What I want is that it counts only suggestion occurences satisfying current lucene query.\n\nP.S: I'm using solr's spellcheck component (solr.DirectSolrSpellChecker).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "James Dyer",
            "id": "comment-13914571",
            "date": "2014-02-27T14:33:20+0000",
            "content": "Can you explain why spellcheck#maxCollationTries and spellcheck#collateExtendedResults do not satisify your needs?  This will give you the # of results that the query returns if you take all of the suggestions provided in the collation. "
        },
        {
            "author": "Hakim",
            "id": "comment-13914770",
            "date": "2014-02-27T17:34:32+0000",
            "content": "Because the frequency returned with each suggestion word, count the occurences in the WHOLE index instead of counting it only for the documents satisfying current lucene query. "
        },
        {
            "author": "Nalini Kartha",
            "id": "comment-14114310",
            "date": "2014-08-28T20:39:33+0000",
            "content": "Hakim When you say \"satisfying current lucene query\" are you referring to the filter query (fq) params specified with the query or something else? We ran into the issue of the returned counts not reflecting the fq params and would like to have a workaround for this. I can work on a patch if other people think this is worth fixing too.\n\ncc James Dyer "
        },
        {
            "author": "Hakim",
            "id": "comment-14117490",
            "date": "2014-09-01T15:43:53+0000",
            "content": "Actually, I am using the `q` parameter for my query instead of the filter query `fq`. And documents count of suggestions proposed is relative to all index, instead of being relative to the query\nFor example, if I'm searching for `q` = 'town:usa AND search:ferraro', and that there are 100 ferrari in the whole world but only 10 of them are in the usa.\nThe suggestion 'ferrari' would have a count of 100 even if my request is restricted to usa (instead of 10). "
        },
        {
            "author": "James Dyer",
            "id": "comment-14118265",
            "date": "2014-09-02T15:27:05+0000",
            "content": "The counts for the individual-word suggestions show the total count for the entire index.  This is the section of the spellcheck response you get with \"spellcheck.extendedResults=true\"\n\n\n<lst name=\"hopq\">\n\t<int name=\"numFound\">3</int>\n\t<int name=\"startOffset\">10</int>\n\t<int name=\"endOffset\">14</int>\n\t<int name=\"origFreq\">0</int>\n\t<arr name=\"suggestion\">\n\t\t<lst>\n\t\t\t<str name=\"word\">hope</str>\n\t\t\t<int name=\"freq\">25283</int>\n\t\t</lst>\n\t\t<lst>\n\t\t\t<str name=\"word\">hopi</str>\n\t\t\t<int name=\"freq\">647</int>\n\t\t</lst>\n\t\t<lst>\n\t\t\t<str name=\"word\">hops</str>\n\t\t\t<int name=\"freq\">246</int>\n\t\t</lst>\n\t</arr>\n</lst>\n\n\n\nSo \"hope\" occurs in the 25,283 times total in the entire index whereas \"hops\" is only in the index 246.\n\nOn the other hand, if you are setting \"spellcheck.maxCollateTries\" >0 with \"spellcheck.collate=true\" and \"spellcheck.collateExtendedResults=true\", this section tells you the total hits the collation would return if you re-queried it.\n\n\n<lst name=\"collation\">\n\t<str name=\"collationQuery\">(life AND hope)</str>\n\t<int name=\"hits\">1328</int>\n\t<lst name=\"misspellingsAndCorrections\">\n\t\t<str name=\"lifq\">life</str>\n\t\t<str name=\"hopq\">hope</str>\n\t</lst>\n</lst>\n\n\n\nIn this example, if you kept the same \"fq\" parameters as before but changed \"q\" to \"(life AND hope)\", your query would return 1,328 results. "
        },
        {
            "author": "Nalini Kartha",
            "id": "comment-14118678",
            "date": "2014-09-02T20:25:04+0000",
            "content": "Sounds like what Hakim is looking for is different than what we're looking for and that collations are the right solution for him? \n\nUnfortunately, we can't use collations to get the query which would return most results (respecting fqs) because our query is a default OR query. The collation hits value would be reflecting the number of results returned for a default OR query which doesn't help with selecting a collation, especially when it's a multi term query where some terms are correctly spelled. The workaround we're using is to select the best corrections for each mis-spelled query term based on the individual frequencies passed back in the extended results but since these freqs don't respect fqs, we're not selecting the best correction most of the time. We had discussed this on the mailing list a while ago but then it slipped off my radar - \nhttp://mail-archives.apache.org/mod_mbox/lucene-solr-user/201212.mbox/%3CCAMqOzYHYpmsBrwv1HoEeoODT-faw4tKgg_-aXv=f7O5kFF8dmA@mail.gmail.com%3E\n\nJames Dyer I'll go ahead and open another JIRA for this issue so that we can move the discussion over there. Apologies for hijacking this thread with the discussion about fq params.  "
        },
        {
            "author": "James Dyer",
            "id": "comment-14118690",
            "date": "2014-09-02T20:32:24+0000",
            "content": "Nalini,\n\nYou can override the \"mm\" for collation purposes.  From http://wiki.apache.org/solr/SpellCheckComponent#spellcheck.collateParam.XX\n\n\nFor use with \"spellcheck.maxCollationTries\". Override the named parameter (substitute XX). For instance, if user's query uses dismax/edismax and a low \"mm\" value was specified (such as 1), it might be desired to requre 100% of the query terms to match when testing collations. In this case, specify \"spellcheck.collateParam.mm=100%\".\n\nSee SOLR-3211 for further discussion.\n\nWould this solve your issue and let you use collations? "
        },
        {
            "author": "Nalini Kartha",
            "id": "comment-14118747",
            "date": "2014-09-02T21:05:18+0000",
            "content": "James Dyer Not quite - we want to allow for some terms (mis-spelled and correctly spelled) not occurring in the documents so the collation hit counts with mm set to 100 would be misleading or not helpful. \n\nSay for eg. the query is 'classic stor' - the term 'classic' does not exist in the index at all but the term 'store' exists in 1000 documents in the index, 100 of which satisfy the fq params and the term 'story' exists in 2000 documents in the index, 10 of which satisfy the fq params.\n\nThe collations 'classic store' or 'classic story' with mm=100 would have 0 hits because 'classic' doesn't exist in the index. In this eg. we want to know that 'store' is more frequent in the index compared to 'story' - when taking into account the fq params - so that we can choose 'store' as the correction. But the frequencies in the extended results and the collation hits don't give us the information we're looking for. \n\nI realize that our use case is a bit strange but in general, having the frequencies returned in extended results reflect the fq params seems useful and more accurate. What do you think?  "
        },
        {
            "author": "James Dyer",
            "id": "comment-14118768",
            "date": "2014-09-02T21:17:46+0000",
            "content": "It sounds like if you want to get exactly what you want, then you're right:  you'll have to implement this new feature.  And if you do, please consider contributing it back.\n\nBut you may be able to save yourself the time and expense if you know approx how many docs you get with q=: and the filters the user is using.  With that you can compute a rough % for an mm override to get the collations to return roughly what you want. "
        },
        {
            "author": "Hakim",
            "id": "comment-14118987",
            "date": "2014-09-02T23:55:15+0000",
            "content": "Thanks guys for your help\nJames Dyer I've done some java coding in the past, but unfortunately I'm not that good at solr coding (and I've never hacked inside of its code) to build this functionnality by myself.\nAnyway, it's not really a very important feature but it would be good if solr would integrate it in next versions (for e-commerce application for example). "
        },
        {
            "author": "Nalini Kartha",
            "id": "comment-14128884",
            "date": "2014-09-10T18:27:41+0000",
            "content": "Hakim I think the functionality you're looking for is exposed through collations as James Dyer explained. In order to get suggestion frequencies taking into account the rest of query terms, a query needs to be run and that's exactly what collations does - the frequency returned with collations is what you're looking for. So should we close this JIRA? I'll open another one for the fq param issue discussed above. "
        },
        {
            "author": "Hakim",
            "id": "comment-14129324",
            "date": "2014-09-10T23:12:13+0000",
            "content": "Ok Nalini Kartha, you can close it.\nI guess that doing a separate query is the only possible solution to this issue.\n\nThanks guys ! "
        }
    ]
}