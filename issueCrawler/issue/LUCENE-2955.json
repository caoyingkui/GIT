{
    "id": "LUCENE-2955",
    "title": "Add utitily class to manage NRT reopening",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.3",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I created a simple class, NRTManager, that tries to abstract away some\nof the reopen logic when using NRT readers.\n\nYou give it your IW, tell it min and max nanoseconds staleness you can\ntolerate, and it privately runs a reopen thread to periodically reopen\nthe searcher.\n\nIt subsumes the SearcherManager from LIA2.  Besides running the reopen\nthread, it also adds the notion of a \"generation\" containing changes\nyou've made.  So eg it has addDocument, returning a long.  You can\nthen take that long value and pass it back to the getSearcher method\nand getSearcher will return a searcher that reflects the changes made\nin that generation.\n\nThis gives your app the freedom to force \"immediate\" consistency (ie\nwait for the reopen) only for those searches that require it, like a\nverifier that adds a doc and then immediately searches for it, but\nalso use \"eventual consistency\" for other searches.\n\nI want to also add support for the new \"applyDeletions\" option when\npulling an NRT reader.\n\nAlso, this is very new and I'm sure buggy \u2013 the concurrency is either\nwrong over overly-locking.  But it's a start...",
    "attachments": {
        "LUCENE-2955.patch": "https://issues.apache.org/jira/secure/attachment/12473160/LUCENE-2955.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-03-09T16:59:46+0000",
            "content": "Patch.\n\nThe sources are in Lucene core now but I think we should commit into contrib somewhere since this is really a \"wrapper\" around core APIs. ",
            "author": "Michael McCandless",
            "id": "comment-13004650"
        },
        {
            "date": "2011-06-03T16:40:48+0000",
            "content": "bulk move 3.2 -> 3.3 ",
            "author": "Robert Muir",
            "id": "comment-13043562"
        },
        {
            "date": "2011-06-08T22:00:28+0000",
            "content": "New patch; I think it's ready to commit.\n\nYou can now specify, when requesting the new searcher, whether deletes must have been applied. ",
            "author": "Michael McCandless",
            "id": "comment-13046251"
        },
        {
            "date": "2011-06-09T12:15:24+0000",
            "content": "Mike, nice work so far  I have to admit that I really don't like the reopen thread. I think reopen in the background should be abstracted and the Reopen thread should not be part of the core manager. By default I think we should consult a ReopenStrategy on change and hijack indexing threads to reopen the reader. we can still sychronized the reopeing with a lock.tryLock() and by default go with a timed reopen policy. Thoughts?\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13046496"
        },
        {
            "date": "2011-06-09T13:07:03+0000",
            "content": "I agree with Simon.  I think providing a ReopenStrategy abstraction will be helpful.   ",
            "author": "Chris Male",
            "id": "comment-13046518"
        },
        {
            "date": "2011-06-09T16:02:00+0000",
            "content": "Perhaps we can merge this functionality with SOLR-2565 and/or SOLR-2566, such that Solr utilizes it for reader opening.  However why would this issue use a background thread and Solr performs a max time reopen? ",
            "author": "Jason Rutherglen",
            "id": "comment-13046644"
        },
        {
            "date": "2011-06-09T22:50:52+0000",
            "content": "\nOK, new patch, folding in Simon's & Chris's feedback (thanks!).\n\nI pulled out the reopen thread into a separate class, so that one can\nnow instantiate NRTManager but do their own reopening (no bg reopen\nthread).  So eg if you want to hijack indexing threads to do reopen,\nyou can.\n\nBut if you want to simply reopen on a periodic basis with the bg\nthread, instantiate NRTManagerReopenThread, passing it the manager and\nyour max and min staleness.  Max staleness applies when no caller is\nwaiting for a specific indexing change; min applies when one is.\n\nI didn't implement a ReopenStrategy... I think that should live\n\"above\" this class.  But, I did add a WaitingListener so that such a\nreopener reopener can be notified when someone is waiting for a\nspecific generation to be visible (NRTManagerReopenThread uses\nthat). ",
            "author": "Michael McCandless",
            "id": "comment-13046889"
        },
        {
            "date": "2011-07-02T02:40:15+0000",
            "content": "bulk close for 3.3 ",
            "author": "Robert Muir",
            "id": "comment-13058926"
        }
    ]
}