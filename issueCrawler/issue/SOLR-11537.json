{
    "id": "SOLR-11537",
    "title": "Add Replica after upgrading from Solr 6.2.1 to Solr 7.1.0 throws InvalidClassException",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "We have a Solr cloud running with multiple collections with each collection split over 6 shards with replication factor of 2.\nWe would want to use some advance features like  LTR and advance analysis using heavily nested documents, thus we wished to upgrade.\nSo we attempted to upgrade one of the nodes from the cluster to Solr 7.1.0.\nIdeally when restarted the node happily became the part of cluster while when attempted to ADDREPLICA through API and through Admin console we ran into the below issue :\n\nnull:org.apache.solr.common.SolrException: java.io.InvalidClassException: org.apache.solr.common.util.SimpleOrderedMap; local class incompatible: stream classdesc serialVersionUID = -2149411884323073227, local class serialVersionUID = 4921066926612345812\n\tat org.apache.solr.client.solrj.SolrResponse.deserialize(SolrResponse.java:61)\n\tat org.apache.solr.handler.admin.CollectionsHandler.handleResponse(CollectionsHandler.java:301)\n\tat org.apache.solr.handler.admin.CollectionsHandler.invokeAction(CollectionsHandler.java:243)\n\tat org.apache.solr.handler.admin.CollectionsHandler.handleRequestBody(CollectionsHandler.java:221)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:177)\n\tat org.apache.solr.servlet.HttpSolrCall.handleAdmin(HttpSolrCall.java:745)\n\tat org.apache.solr.servlet.HttpSolrCall.handleAdminRequest(HttpSolrCall.java:726)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:507)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:382)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:326)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1751)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:582)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n\tat org.eclipse.jetty.rewrite.handler.RewriteHandler.handle(RewriteHandler.java:335)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:534)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:283)\n\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:108)\n\tat org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.io.InvalidClassException: org.apache.solr.common.util.SimpleOrderedMap; local class incompatible: stream classdesc serialVersionUID = -2149411884323073227, local class serialVersionUID = 4921066926612345812\n\tat java.io.ObjectStreamClass.initNonProxy(ObjectStreamClass.java:616)\n\tat java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1630)\n\tat java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1521)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1781)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1353)\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:373)\n\tat java.util.ArrayList.readObject(ArrayList.java:791)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1058)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1909)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1808)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1353)\n\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2018)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1942)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1808)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1353)\n\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:2018)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1942)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1808)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1353)\n\tat java.io.ObjectInputStream.readObject(ObjectInputStream.java:373)\n\tat org.apache.solr.client.solrj.SolrResponse.deserialize(SolrResponse.java:59)\n\t... 36 more",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-24T13:01:00+0000",
            "content": "This is bad... it appears Solr's Overseer is relying on Java Serialization which is in SolrResponse.serializable(...) and SolrResponse.deserialize(...) Shawn Heisey and I were looking at this yesterday. ",
            "author": "David Smiley",
            "id": "comment-16216853"
        },
        {
            "date": "2017-10-24T13:26:46+0000",
            "content": "Yes , I looked into it too , I may look into it further today , for now we have made a stable move to Solr 6.6 , things are fine and no red flag with 6.6. I'll follow for any new updates on this.\nThanks David Smiley & Shawn Heisey !! ",
            "author": "Atita Arora",
            "id": "comment-16216900"
        },
        {
            "date": "2017-10-24T16:27:24+0000",
            "content": "Yes, I discussed this with David Smiley on the dev IRC channel as he mentioned.  I also fired off an email to Erick Erickson asking for his opinion on whether it looked as bad to him as it did to me.\n\nAfter a look at git history, I think that the commit for SOLR-10755 is what caused the new value for SimpleOrderedMap#SerialVersionUID.  That change certainly looked innocent enough.  If I'm right, then if SimpleOrderedMap had contained a hard-coded definition of SerialVersionUID, there wouldn't have been an issue.\n\nWe should look at any other classes that are transmitted with the javabin format to see if any are missing SerialVersionUID, find out what the compiler's calculated value is, and explicitly set them. ",
            "author": "Shawn Heisey",
            "id": "comment-16217183"
        }
    ]
}