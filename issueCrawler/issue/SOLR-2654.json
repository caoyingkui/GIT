{
    "id": "SOLR-2654",
    "title": "<lockType/> not used consistently in all places Directory objects are instantiated",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "nipunb noted on the mailing list then when configuring solr to use an alternate <lockType/> (ie: simple) the stats for the SolrIndexSearcher list NativeFSLockFactory being used by the Directory.\n\nThe problem seems to be that SolrIndexConfig is not consulted when constructing Directory objects used for IndexReader (it's only used by SolrIndexWriter)\n\nI don't think this is a problem in most cases since the IndexReaders should all be readOnly in the core solr code) but plugins could attempt to use them in other ways.  In general it seems like a really bad bug waiting to happen.",
    "attachments": {
        "SOLR-2698.patch": "https://issues.apache.org/jira/secure/attachment/12489815/SOLR-2698.patch",
        "SOLR-2654.patch": "https://issues.apache.org/jira/secure/attachment/12489533/SOLR-2654.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13065608",
            "date": "2011-07-14T23:38:47+0000",
            "content": "Original report...\n\n\nFrom: nipunb \nTo: solr-user\nDate: Thu, 14 Jul 2011 00:50:21 -0700 (PDT)\nSubject: Lockfactory indicated by ../solr/admin/cores different from the setting in solrconfig.xml\n\nhey\nWe have set locktype to simple in solrconfig.xml using:\n<lockType>simple</lockType>. However on the page\nlocalhost:8983/solr/admin/cores shows:\n<str name=\"directory\">\norg.apache.lucene.store.MMapDirectory:org.apache.lucene.store.MMapDirectory..../solr-cores/core0/data/index\nlockFactory=*org.apache.lucene.store.NativeFSLockFactory*@3415ddf5\n</str>\nI can see a write.lock file in the index directory. But shouldn't the page\nsolr/admin/cores also be showing the the lockFactory to be\norg.apache.lucene.store.SimpleFSLockFactory.SimpleFSLockFactory\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13065614",
            "date": "2011-07-14T23:42:15+0000",
            "content": "In general i wonder if there isn't a largely problem here: shouldn't the IndexReader and SolrIndexWriter usually be using the exact same instance of a Directory object \u2013 not just two instances generated by the same DirectoryFactory?)\n\n(I'm not sure given the various work being done with reopen and what not) "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13072527",
            "date": "2011-07-28T20:59:33+0000",
            "content": "I think practically it's not a large problem - since the write lock is used for IndexWriter only as you say. Other than that, it would depend on the lock factory impl. It also depends on the Directory impl. I think in general, current impls work fine this way.\n\nWe should address this I think though - we shouldn't count on this to work correctly.\n\nIt's tricky in a couple areas though. I'll address on trunk before considering 3.4. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13079477",
            "date": "2011-08-04T17:17:02+0000",
            "content": "So the lock issue is not really a problem - but not sharing the dir is depending on the impl as I mentioned.\n\nI first tried tackling this outside of the directory factory - this quickly gets very difficult, most due to the newIndexPath that replication uses to avoid copying a full index.\n\nI'm now exploring simply have the base directory factory cache all directories with the path as a key - how the ram directory factory works now. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080224",
            "date": "2011-08-05T21:00:54+0000",
            "content": "first rough patch - \n\nTestReplicationHandler does not pass - \n\ndoTestReplicateAfterWrite2Slave causes any of the other replication tests run after it to fail. Commenting it out, all tests pass.\n\nThis allows us to use the same dir instance everywhere (kind of important - we hacked around this for ram dir specifically by using a static cache - mainly for tests).\n\nIt does kind of make it so you must use the new approved SolrCore reload method rather than just starting a new clore and closing the old one. But you really should do that anyhow, so...and it's better than using a static cache IMO. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080525",
            "date": "2011-08-07T03:16:32+0000",
            "content": "Hmmm...the problem has something to do with this new index stuff that replication uses - this thing always gets in my way  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080526",
            "date": "2011-08-07T03:29:28+0000",
            "content": "So with this patch, tests pass for me - but it scares me because I had to change two places that used the std index path to use the newIndex path. That's odd stuff - need to figure out how this was working as is on trunk... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080532",
            "date": "2011-08-07T03:44:48+0000",
            "content": "My initial suspicion is actually that these where bugs in trunk that where being hidden by the old behavior. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080632",
            "date": "2011-08-07T19:39:30+0000",
            "content": "Nope, it was my bug. SolrIndexSearcher only supplies the right index dir if the directory is an instance of FSDirectory - since we now used a Directory wrapper, the index dir was not properly coming from the SolrIndexSearcher. This indexdir newIndexDir stuff is dicey \n\nGot it fixed locally, but I'll do a few more cleanup chores before supply another patch. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080634",
            "date": "2011-08-07T19:55:04+0000",
            "content": "I'm actually going to kill this RefCntDirectory now - I had it because I was copying our RamDirectoryFactory hack - but the way things have changed, I don't think we need it at all anymore (not that we where closing Directories anyway - I think we actually can close them properly now though) "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080643",
            "date": "2011-08-07T20:31:24+0000",
            "content": "new patch:\n\n*removes the refcnt dir wrappers\n*cleans up a bunch of other nocommits / cleanup work\n*adds a new NRTCachingDirectoryFactory - completely untested, but half the reason I'm working on improving this area  Uses hack ram / merge settings of 64. Needs to be set to reasonable defaults, plus be easily configurable eventually.\n\nTests pass for me. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080662",
            "date": "2011-08-07T20:49:59+0000",
            "content": "So I have one last nocommit - directories pile up in the cache over time, and are only released when the SolrCore is finally truly closed (usually end of program). Ideally, we like to close them earlier when we can, and pull them from the cache (think clearing a RamDirectory).\n\nSo I think we can fix this by having SolrIndexSearcher and SolrIndexWriter close their directories in their close methods - of course that likely brings back my friend the ref cnt directory  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13080664",
            "date": "2011-08-07T20:55:17+0000",
            "content": "so we can remove the closeDirectories() hack in SolrTestCaseJ4? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080668",
            "date": "2011-08-07T21:12:18+0000",
            "content": "Yeah, we def should be able to after this. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080669",
            "date": "2011-08-07T21:18:03+0000",
            "content": "Current patch, directories are all closed when a SolrCore is finally closed (not reloaded). This is new, and should alleviate the need for the test close dir hack.\n\nThe reason I want to sometimes close them early is that the index dir for a core can change - either on reload (unlikely) or by the replication handler. So if you had a Solr instance up for a long time, and used replication, you could end up, over time, with a lot of open Directories in the directory cache - currently, this is not much of a problem - replication only works with FSDirectories anyway. But I'd like to see that limitation fixed too - so that something like a RAMDirectory could work with replication - and in that case, this would be slightly more important*, as an unclosed RAMDirectory will take up much more RAM than an FSDirectory, which does nothing on close anyway (*only slightly more important because replication only uses a new index dir in a minority of cases). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080687",
            "date": "2011-08-07T22:29:32+0000",
            "content": "So I removed the close directories hack for tests and realized that I need the solution I proposed above regardless - when we force open a new directory, we need to close the old one - because we replace it in the map (well, close it, or keep it around in another list/set). We cannot close it right then, because something still might be using it. The ref cnt dir is def coming back. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13080968",
            "date": "2011-08-08T14:28:00+0000",
            "content": "Yeesh - much more difficult to get this right than I expected. I may just go back to only closing when the SolrCore is finally closed - trying to get the searchers/writers to do the closing is just driving me nuts. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13081016",
            "date": "2011-08-08T15:57:52+0000",
            "content": "Okay, so first a step backwards - back to keeping the dirs around till the core is really closed, and no ref cnt dirs. Tests now pass without the test close directory hack.\n\nI have not given up on something better, but I probably will take a break on this madness.\n\nEclipse has been doing weird stuff creating my patches on my Ubuntu machine - hopefully this one is legit, but I'll check it on my mac eventually to be sure. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13081021",
            "date": "2011-08-08T16:04:04+0000",
            "content": "Not sure its really a step backwards if tests pass without the test close directory hack!\n\ncouldn't we go with this as an iterative improvement, currently no directories are ever getting closed right? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13081024",
            "date": "2011-08-08T16:12:34+0000",
            "content": "couldn't we go with this as an iterative improvement\n\nYeah, that's been on my mind - just didn't want to give up completely yet. If I commit this now, it will take the pressure off for figuring out something better. Give me a bit more time to defeat myself.\n\ncurrently no directories are ever getting closed right?\n\nRight - but the tradeoff with this is, I think, is that before Directories would be garbage collected when they where no longer used - and now they will stick around till the SolrCore is really closed. Not a big deal for FSDirectory impls in general, but more troublesome for the ram based variety. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13081065",
            "date": "2011-08-08T17:16:08+0000",
            "content": "P.S. to clarify, by step backwards, I meant vs the approach I was banging my head against. It's def a step forward from trunk mostly, and a step forward from the last patch (it now keeps all dirs seen in a list, so none are lost by the time we close them all). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13081466",
            "date": "2011-08-09T06:26:34+0000",
            "content": "Okay, looks like i am close to having this figured out - I changed tactics to do the ref counting in the dir factory, and then having the user release the directory. For whatever reason, this made things easier to debug. I found an issue I had that was making the previous attempt difficult, and also what looks like a nasty bug (more to come) that was compounding the issue. Still a fair amount to try and do to finish this off as I want, but making progress. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13081473",
            "date": "2011-08-09T06:43:05+0000",
            "content": "Latest rough patch "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13084738",
            "date": "2011-08-13T23:00:32+0000",
            "content": "new patch - the problem with pure ref counting is that sometimes you might hit a point where you don't need the directory for a moment - and then you do - if its a ram based dir that means you lose your dir data. So this is something of a hybrid - it still ref counts, but only when a new index writer is forced open does it allow a directory to actually be closed. So when the indexwriter jumps to a new index, that should allow the old one to be removed once all the refs are released. The current working directory will always be kept around. All created directories are are tracked so that any that are not closed can be closed when the SolrCore is actually closed (not reloaded).\n\nAll tests currently passing. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13086040",
            "date": "2011-08-16T23:34:07+0000",
            "content": "I've cleaned up this patch quite a bit. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13086078",
            "date": "2011-08-17T01:45:36+0000",
            "content": "Another slightly better patch - we don't need to also track the set of all dirs anymore. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13086618",
            "date": "2011-08-17T21:48:45+0000",
            "content": "This makes one change in lucene that I could break out into it's own issue, but it's rather small - so I will collect any opinions here for now: \n\nI take the ensureOpen check out of IndexWriter on getDirectory. Anyone object? I don't know why we care if the IndexWriter is still open if we want to grab which Directory it used. You can hack around it, but I don't see why we don't just remove the check. Thoughts? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13086648",
            "date": "2011-08-17T22:29:06+0000",
            "content": "Another, more cleaned up, patch. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13086709",
            "date": "2011-08-18T00:42:33+0000",
            "content": "\nI take the ensureOpen check out of IndexWriter on getDirectory. Anyone object? I don't know why we care if the IndexWriter is still open if we want to grab which Directory it used. You can hack around it, but I don't see why we don't just remove the check. Thoughts?\n\n+1... its just a getter for the Dir, no reason to ensure its open. you might just want to do instanceof or something.\n\nIn any case, the Directory itself not indexwriter should be calling ensureOpen before doing things that require an open dir.\n\nMaybe we could spin off a separate issue to make a test for this, i know its inconsistent everywhere. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13086999",
            "date": "2011-08-18T13:21:21+0000",
            "content": "Cool - I'm growing tempted to commit this then. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13087106",
            "date": "2011-08-18T16:38:30+0000",
            "content": "+1 "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13087241",
            "date": "2011-08-18T20:12:42+0000",
            "content": "Committed to trunk.\n\nThis cannot be done the same way on 3.x. 3.x does not have a mechanism to pass state across core reloads, and that's a change I'd rather leave to 4.x.\n\nMight simply be best to track all directories and close them on shutdown. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106265",
            "date": "2011-09-16T14:50:19+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13177259",
            "date": "2011-12-29T16:43:30+0000",
            "content": "I don't think there is enough gain to tackle something on the 3x branch here. If further info changes that, or someone else wants to tackle it, we should just open a new issue. I'm going to resolve this for 4 since we have a solution there. "
        },
        {
            "author": "Ronny Karallus",
            "id": "comment-13398874",
            "date": "2012-06-21T21:25:55+0000",
            "content": "We just occured this problem using the spellchecking component. We got Solr 3.5 running.\n\nOur configuration is:\n...\n<indexDefaults>\n ...\n <lockType>simple</lockType>\n</indexDefaults>\n\n<searchComponent name=\"spellcheck\" class=\"solr.SpellCheckComponent\">\n    <str name=\"queryAnalyzerFieldType\">textSpell</str>\n    <lst name=\"spellchecker\">\n      <str name=\"name\">default</str>\n      <str name=\"field\">_spell</str>\n      <str name=\"spellcheckIndexDir\">./spellchecker1</str>\n\t  <str name=\"buildOnCommit\">true</str> \n    </lst>\n...\n</searchComponent>\n\nThat results in:\n\nCaused by: org.apache.lucene.store.LockObtainFailedException: Lock obtain timed out: NativeFSLock@.../data/spellchecker1/write.lock\n\tat org.apache.lucene.store.Lock.obtain(Lock.java:84)\n\tat org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:1108)\n\tat org.apache.lucene.search.spell.SpellChecker.setSpellIndex(SpellChecker.java:169)\n\tat org.apache.lucene.search.spell.SpellChecker.<init>(SpellChecker.java:149)\n\tat org.apache.solr.spelling.AbstractLuceneSpellChecker.init(AbstractLuceneSpellChecker.java:127)\n\t... 22 more\n\nOur FS doesnt support native locking. That's why we configured locktype to simple. However, the Spellchecker code doesn't use this setting ... That can be read pretty easy from the code:\n\nSolr AbstractLuceneSpellChecker:\n  protected void initIndex() throws IOException {\n    if (indexDir != null) \n{\n      index = FSDirectory.open(new File(indexDir));\n    }\n else \n{\n      index = new RAMDirectory();\n    }\n  }\n=> doesnt give a locking factory so the default is used\n\nLucene FSDirectory:\n  protected FSDirectory(File path, LockFactory lockFactory) throws IOException {\n    // new ctors use always NativeFSLockFactory as default:\n    if (lockFactory == null) \n{\n      lockFactory = new NativeFSLockFactory();\n    }\n    directory = getCanonicalPath(path);\n\n    if (directory.exists() && !directory.isDirectory())\n      throw new NoSuchDirectoryException(\"file '\" + directory + \"' exists but is not a directory\");\n\n    setLockFactory(lockFactory);\n  }\n=> the default is NativeFSLock\n\nI think that makes the problem a little less theoretical and more severe then the read scenario "
        }
    ]
}