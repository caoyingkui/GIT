{
    "id": "SOLR-7615",
    "title": "Slow update requests not logged at WARN due to how LogUpdateProcessor's are created",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "In SOLR-6650, we introduced the ability to only have slow update and query requests get logged as warnings. However, when tracking down the cause of SOLR-7603, we discovered that the LogUpdateProcessor is only included in the chain if the log has INFO enabled, thus rendering the solution provided by SOLR-6650 useless for update requests (queries still work though).\n\nThus, we need to fix how LogUpdateProcessor is created if the user has configured slowUpdateThresholdMillis > 0.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-06-01T16:14:04+0000",
            "author": "Mark Miller",
            "content": "I ran into something like this before. I was tempted to fix it as a bug. Seems to me it should be created at INFO or lower as well.\n\nIt's just a bit trappy. Perhaps we should always be creating it. ",
            "id": "comment-14567502"
        },
        {
            "date": "2015-06-01T19:23:17+0000",
            "author": "Hoss Man",
            "content": "It's just a bit trappy. Perhaps we should always be creating it.\n\n+0 ... it's a factory optimization to only create/inject the processor if it has some purpose for existing.\n\nit probably saves a few cycles for some people, but if the optimization is getting in hte way of the maintainability of the code, by all means rip it out. ",
            "id": "comment-14567843"
        },
        {
            "date": "2015-06-01T21:05:14+0000",
            "author": "Mark Miller",
            "content": "it's a factory optimization to only create/inject the processor if it has some purpose for existing.\n\nThat's the problem - the optimization is essentially worthless, but it's pretty annoying when you go down to TRACE or DEBUG and actually lose logging. It's fighting with the logging system itself in magic ways basically. ",
            "id": "comment-14568000"
        },
        {
            "date": "2015-06-01T21:30:21+0000",
            "author": "Hoss Man",
            "content": "... but it's pretty annoying when you go down to TRACE or DEBUG and actually lose logging. ...\n\nWhoa ... wait a minute \u2013 that doesn't sound right at all.  Are you sure the problem you're remembering having is the same code being discussed in this issue?\n\nThe optimization we're discussing is based on this line of code...\n\n\nreturn LogUpdateProcessor.log.isInfoEnabled() ? new LogUpdateProcessor(req, rsp, this, next) : null;\n\n\n\nLogger.isInfoEnabled() does NOT return \"false\" for TRACE and DEBUG - it returns true as long as the effective log level is at least INFO \u2013 you can confirm this with something simple like...\n\n\n  public void testLoggerLevelSanity() throws Exception { // nocommit\n    org.slf4j.Logger log = org.slf4j.LoggerFactory.getLogger(\"whatever\");\n    org.apache.log4j.LogManager.getRootLogger().setLevel(org.apache.log4j.Level.TRACE);\n    assertTrue(log.isDebugEnabled());\n    org.apache.log4j.LogManager.getRootLogger().setLevel(org.apache.log4j.Level.WARN);\n    assertFalse(log.isDebugEnabled());\n  }\n\n\n\n...the fundemental issue here is that the changes added by SOLR-6650 cause LogUpdateProcessor to be useful in some configurations even if the level is only WARN, and not INFO - yet the Factory will currently not produce a LogUpdateProcesssor in this situation \u2013 ie: the changes made in SOLR-6650 did not take into consideration the existing optimization, nor test for the situation where the Logger was configured with a Level of WARN or ERROR\n ",
            "id": "comment-14568049"
        },
        {
            "date": "2015-06-01T22:10:47+0000",
            "author": "Mark Miller",
            "content": "that doesn't sound right at all. Are you sure the problem you're remembering having is the same code being discussed in this issue?\n\nI specifically remember having to add OR's to LogUpdateProcessor.log.isInfoEnabled() to get that logging while using DEBUG logging.\n\nPerhaps somehow I was smoking crack ... but I have very specific memories of making and carrying this code change in a patch for a bit.\n\nI'll take your word that the method behaves that way, but it doesn't fit a very specific memory of dealing with this code and using DEBUG logging.  ",
            "id": "comment-14568117"
        },
        {
            "date": "2015-06-01T22:22:18+0000",
            "author": "Mark Miller",
            "content": "Yuck - I went to dig into the source code and found that this new apcheds-all-20.0.0-m15.jar has duplicate slf4j classes in it...that doesn't seem good... ",
            "id": "comment-14568132"
        },
        {
            "date": "2015-06-01T22:33:05+0000",
            "author": "Mark Miller",
            "content": "I specifically remember having to add OR's to LogUpdateProcessor.log.isInfoEnabled() to get that logging while using DEBUG logging.\n\nI do know I have never seen anything like this when changing the top level logging to DEBUG. It always has worked as I would expect in this case. I think I saw whatever this behavior was when I was specifically changing the logging level for that class because I had added some test logging under debug. Who knows - if it works the way you say, I guess no sweat.\n\nIn any case, +1 for just creating the update processor at least also on warn if not alway. ",
            "id": "comment-14568149"
        },
        {
            "date": "2018-08-09T01:01:29+0000",
            "author": "Gavin",
            "content": "Move issue from deprecated 'In  Progress' back to 'Open' ",
            "id": "comment-16574116"
        }
    ]
}