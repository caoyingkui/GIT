{
    "id": "LUCENE-1910",
    "title": "Extension to MoreLikeThis to use tag information",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/other"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I would like to contribute a class based on the MoreLikeThis class in\ncontrib/queries that generates a query based on the tags associated\nwith a document. The class assumes that documents are tagged with a\nset of tags (which are stored in the index in a seperate Field). The\nclass determines the top document terms associated with a given tag\nusing the information gain metric.\n\nWhile generating a MoreLikeThis query for a document the tags\nassociated with document are used to determine the terms in the query.\nThis class is useful for finding similar documents to a document that\ndoes not have many relevant terms but was tagged.",
    "attachments": {
        "LUCENE-1910.patch": "https://issues.apache.org/jira/secure/attachment/12451015/LUCENE-1910.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-09-21T15:28:44+0000",
            "content": "Hi Thomas,\nFollowing your request for feedback, some initial thoughts from a very quick look.\n\n\n\tThe \"Information Gain\" algo could use a little more explanation e.g. using variable names other than \"num1\" and \"num2\" and could perhaps be extracted into a utility class\n\n\n\n\n\tIs this scalable? It looks like in initialize it is loading this:\nMoreLikeThisUsingTags.java\n\t/**\n      * All terms in the index\n      */\n\tprotected HashSet docTerms=new HashSet();\n\n \n..that seems a little scary!\nIt's also doing a seperate BooleanQuery for all items in this list ( and repeated for >1 tag?). Thats look like a lot of searches.\n\n\n\nI need to spend a little more time looking at it before I understand it in more detail.\nBefore then - have you tested this on a big (millions of docs/terms) index? Some performance figures would be useful to accompany this.\n\nCheers,\nMark ",
            "author": "Mark Harwood",
            "id": "comment-12757924"
        },
        {
            "date": "2009-10-04T06:24:09+0000",
            "content": "Mark,\n\nI refactored the class to include more descriptive variable names. I also modified the code so that while calculating information gain only terms belonging to documents that have been tagged with the given tag and used (and not all the terms in the index). \nI tested this class on a test index containing one million documents. The documents were tagged with five tags (tag_0...tag_4). tag_0 was assigned to approximately 10% of the documents, tag_1 to 20% and so on. \n\ntag name, number of documents, time in ms\ntag_0, 10134, 137314\ntag_1, 19996, 219527\ntag_2, 30010, 315336\ntag_3, 39907, 413615\ntag_4, 50148, 507350\n\nThe time taken to generate the query for a tag depends on the number of documents in the index containing the tag and scales linearly with the number of documents. \nThe top document terms for a given are cached in a hashmap once they have been generated in order to speed up subsequent lookups.\n\nThanks,\nThomas ",
            "author": "Thomas D'Silva",
            "id": "comment-12761997"
        },
        {
            "date": "2009-10-05T18:23:58+0000",
            "content": "> 2 minutes to create a query based on 10,000 documents?\n\nUnfortunately, I can't see this being generally useful until the performance is improved dramatically. ",
            "author": "Mark Harwood",
            "id": "comment-12762290"
        },
        {
            "date": "2009-11-27T02:25:01+0000",
            "content": "Mark,\n\nI refactored the code so that the tag and document probabilities are computed and used to find the most important document terms corresponding to a given tag term during the index creation phase. These most important document terms (ranked by information gain) for a given tag term is stored as meta information in the index when the index is created. I added a class TagIndexWriter which extends IndexWriter which is used to create an index which can be used to run MoreLikeThisUsingTags queries. \n\nI recreated a test index with one million documents, and assigned tags (tag_0,...tag_4) to 10%,20%.. and so on of the documents. \n\nThe time taken to generate a query on an index created using TagIndexWriter:\ntag name, number of documents, time in ms\ntag_0, 10134, 22\ntag_1, 19996, 29\ntag_2, 30010, 6\ntag_3, 39907, 6\ntag_4, 50148, 9\n\nSince the document terms corresponding to a tag term is computed during the indexing phase, the time taken to generate a MoreLikeThisUsingTags query is constant. \n\nThanks,\nThomas ",
            "author": "Thomas D'Silva",
            "id": "comment-12783010"
        },
        {
            "date": "2009-12-15T19:02:19+0000",
            "content": "\n\tI'll second Mark's suggestion to extract the Information Gain piece of the patch into separate class(es), so we can reuse it in other places.  It looks like it's currently an integral part of MoreLikeThisUsingTags class.  Would that be possible?\n\n\n\n\n\tI noticed the code needs ASL (the Apache Software License) added.\n\n\n\n\n\tAlso, could you please use the Lucene code format? (Eclipse/IntelliJ templates are at the bottom of http://wiki.apache.org/lucene-java/HowToContribute )\n\n ",
            "author": "Otis Gospodnetic",
            "id": "comment-12790889"
        },
        {
            "date": "2010-08-02T06:24:28+0000",
            "content": "I extracted the Information Gain code into a separate class. I also added the Apache Software License and reformatted the code to use the Lucene code format. Are there any other changes or modifications that are needed?\n\nThanks,\nThomas ",
            "author": "Thomas D'Silva",
            "id": "comment-12894471"
        }
    ]
}