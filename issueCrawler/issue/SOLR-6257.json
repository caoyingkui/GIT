{
    "id": "SOLR-6257",
    "title": "More than two \"!\"-s in a doc ID throws an ArrayIndexOutOfBoundsException when using the composite id router",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Since CompositeIdRouter is the default router, it has to be able to deal with any ID string without throwing an exception.\n\nThe following test (added to TestHashPartitioner) currently fails:\n\n\n  public void testNonConformingCompositeId() throws Exception {\n    DocRouter router = DocRouter.getDocRouter(CompositeIdRouter.NAME);\n    DocCollection coll = createCollection(4, router);\n    Slice targetSlice = coll.getRouter().getTargetSlice(\"A!B!C!D\", null, null, coll);\n    assertNotNull(targetSlice);\n  }\n\n\n\nwith the following output: \n\n\n   [junit4] Suite: org.apache.solr.cloud.TestHashPartitioner\n   [junit4]   2> log4j:WARN No such property [conversionPattern] in org.apache.solr.util.SolrLogLayout.\n   [junit4]   2> Creating dataDir: /Users/sarowe/svn/lucene/dev/trunk/solr/build/solr-core/test/J0/./temp/solr.cloud.TestHashPartitioner-19514036FB5C5E56-001/init-core-data-001\n   [junit4]   2> 1233 T11 oas.SolrTestCaseJ4.buildSSLConfig Randomized ssl (false) and clientAuth (false)\n   [junit4]   2> 1296 T11 oas.SolrTestCaseJ4.setUp ###Starting testNonConformingCompositeId\n   [junit4]    > Throwable #1: java.lang.ArrayIndexOutOfBoundsException: 2\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([19514036FB5C5E56:3A131EC016F531A4]:0)\n   [junit4]    > \tat org.apache.solr.common.cloud.CompositeIdRouter$KeyParser.getHash(CompositeIdRouter.java:296)\n   [junit4]    > \tat org.apache.solr.common.cloud.CompositeIdRouter.sliceHash(CompositeIdRouter.java:58)\n   [junit4]    > \tat org.apache.solr.common.cloud.HashBasedRouter.getTargetSlice(HashBasedRouter.java:33)\n   [junit4]    > \tat org.apache.solr.cloud.TestHashPartitioner.testNonConformingCompositeId(TestHashPartitioner.java:205)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)",
    "attachments": {
        "SOLR-6257.patch": "https://issues.apache.org/jira/secure/attachment/12656557/SOLR-6257.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-14066753",
            "date": "2014-07-18T19:12:09+0000",
            "content": "Patch with two tests and a fix.\n\nThe first test routes ID strings known not to conform to the composite ID format, and the second routes ID strings containing a random sequence of \"!\"-s, \"/\"-s, random numbers, and random Unicode strings.  Both fail without the fix.\n\nThe included fix changes CompositeIdRouter.KeyParser to treat the first two \"!\"-s in an ID as separators, but then treat any further \"!\"-s as regular text.\n\nWith the fix, the random test passed when I set it to test 5,000,000 IDs, but it's dialed down to 10,000 in the patch.\n\nRunning all Solr tests now.\n\nAnshum Gupta, I'd appreciate a review if you have time. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14066758",
            "date": "2014-07-18T19:16:21+0000",
            "content": "The random test included in the patch would have caught SOLR-5502 too. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14066823",
            "date": "2014-07-18T20:15:23+0000",
            "content": "Thinking about back-compat: this will change how docs are routed, but the behavior is only different for documents with IDs that would currently trigger an AIOOBE and thus fail to index, so I think it's fine.\n\nThere is one corner case I can think of that does not currently throw an exception, but that hashes differently: two trailing \"!\"-s - String.split(\"!\") (used currently to break up IDs into pieces, but not by my fixed version) only returns one piece for \"A!!\", but my changes would return two pieces (the second being empty). KeyParser adds another \"piece\" if it finds a trailing \"!\" in the key, so the current behavior will operate with pieces=2, my changes with pieces=3.\n\nI confirmed the problem: the hash produced by KeyParser.getHash() in the fixed version for \"A!!\" is different from the currentlly produced hash. (By contrast, the hash for \"A!\" is the same.)\n\nShould be fairly easy to change this corner case back to the previous behavior.  I'll post a patch shortly. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14066905",
            "date": "2014-07-18T21:26:25+0000",
            "content": "Modified patch fixing the back-compat issue.\n\nAdded a CHANGES.txt entry.\n\nI think it's ready to go. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14066937",
            "date": "2014-07-18T21:51:22+0000",
            "content": "This looks good to me. The only suggestion is to move the test to TriLevelCompositeIdRoutingTest perhaps?\nBut yes, keep it here if you think this works better. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14067371",
            "date": "2014-07-19T04:06:25+0000",
            "content": "Thanks Anshum.\n\nThe only suggestion is to move the test to TriLevelCompositeIdRoutingTest perhaps? But yes, keep it here if you think this works better.\n\nThe two new tests are unit tests and don't require indexing/querying, so I put them with the other (non-cloud) tests in TestHashPartitioner - there were already a couple of other composite id router tests in there.\n\nI'll commit tomorrow if there are no objections. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14067471",
            "date": "2014-07-19T10:34:59+0000",
            "content": "+1. LGTM! "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14067624",
            "date": "2014-07-19T18:30:49+0000",
            "content": "Committed:\n\n\ttrunk: r1611934\n\tbranch_4x: r1611940\n\n "
        }
    ]
}