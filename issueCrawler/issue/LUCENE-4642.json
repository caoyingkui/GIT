{
    "id": "LUCENE-4642",
    "title": "Add create(AttributeFactory) to TokenizerFactory and subclasses with ctors taking AttributeFactory, and remove Tokenizer's and subclasses' ctors taking AttributeSource",
    "details": {
        "components": [
            "modules/analysis"
        ],
        "fix_versions": [
            "4.3",
            "6.0"
        ],
        "affect_versions": "4.1",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "All tokenizer implementations have a constructor that takes a given AttributeSource as parameter (LUCENE-1826).  These should be removed.\n\nTokenizerFactory does not provide an API to create tokenizers with a given AttributeFactory, but quite a few tokenizers have constructors that take an AttributeFactory.  TokenizerFactory should add a create(AttributeFactory) method, as should subclasses for tokenizers with AttributeFactory accepting ctors.",
    "attachments": {
        "LUCENE-4642-single-create-method-on-TokenizerFactory-subclasses.patch": "https://issues.apache.org/jira/secure/attachment/12573800/LUCENE-4642-single-create-method-on-TokenizerFactory-subclasses.patch",
        "TrieTokenizerFactory.java.patch": "https://issues.apache.org/jira/secure/attachment/12566666/TrieTokenizerFactory.java.patch",
        "LUCENE-4642.patch": "https://issues.apache.org/jira/secure/attachment/12561902/LUCENE-4642.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-20T15:09:02+0000",
            "content": "Patch adding #create(AttributeSource source, Reader reader) to the TokenizerFactory class and to all its subclasses.\n\nGiven there are a lot of tokenizers that do not have constructors that take a given AttributeSource, I have implemented the new create method for their respective factory which throws a UnsupportedOperationException. ",
            "author": "Renaud Delbru",
            "id": "comment-13537066"
        },
        {
            "date": "2013-01-02T14:32:40+0000",
            "content": "Hi,\n\nAny plan to commit this patch ? Or is there additional work to do before ?\n\nthanks ",
            "author": "Renaud Delbru",
            "id": "comment-13542144"
        },
        {
            "date": "2013-01-16T15:55:08+0000",
            "content": "Could someone from the team tell us if this patch may be considered for inclusion at some point ? We currently need it in our project, and therefore it is kind of blocking us in our development. Thanks. ",
            "author": "Renaud Delbru",
            "id": "comment-13555146"
        },
        {
            "date": "2013-01-16T16:01:00+0000",
            "content": "Hi Renaud, I'll review some time in the next week. ",
            "author": "Steve Rowe",
            "id": "comment-13555153"
        },
        {
            "date": "2013-01-16T22:01:18+0000",
            "content": "I'm not familiar enough with Lucene anlysis to know whether it should be exposed in the factories, but in order not to break existing factories, I think it would be better to make this new method throw  UOE by default instead of being abstract. ",
            "author": "Adrien Grand",
            "id": "comment-13555507"
        },
        {
            "date": "2013-01-21T13:48:07+0000",
            "content": "I think this is a good addition.\n\nHere is a patch against trunk.  Four tokenizers and their factories have been removed, and so aren't present in this patch: ChineseTokenizer, ArabicLetterTokenizer, RussianLetterTokenizer, and CJKTokenizer.\n\nI've also taken the opportunity to narrow the return type to the class being instantiated from all analysis factory create() methods where possible.\n\nin order not to break existing factories, I think it would be better to make this new method throw UOE by default instead of being abstract.\n\nI agree - I did this in the patch. ",
            "author": "Steve Rowe",
            "id": "comment-13558768"
        },
        {
            "date": "2013-01-21T13:52:42+0000",
            "content": "don't you think adding the AttributeFactory ctor would be more useful? I think its much more esoteric to provide an AttributeSource to a tokenizer.\n\n\nin order not to break existing factories, I think it would be better to make this new method throw UOE by default instead of being abstract.\n\nI don't agree with this for trunk. we should add deprecations or whatever in 4.x, but trunk should be clean without any UOEs. ",
            "author": "Robert Muir",
            "id": "comment-13558772"
        },
        {
            "date": "2013-01-21T14:05:37+0000",
            "content": "I'd also like to know the use case here.\n\nPersonally: I think we should remove Tokenizer(AttributeSource): it bloats the APIs and causes ctor explosion.\nThere are no real use-cases in the lucene/solr codebase: its only used by a HACK (TrieTokenizerFactory in Solr), which should instead be fixed.\n\nAttributeFactory on the other hand is different (e.g. real use cases like numerics and collation) ",
            "author": "Robert Muir",
            "id": "comment-13558780"
        },
        {
            "date": "2013-01-21T15:26:55+0000",
            "content": "\nPersonally: I think we should remove Tokenizer(AttributeSource): it bloats the APIs and causes ctor explosion.\n\nWhy not the contrary instead ? I.e., remove Tokenizer(AttributeFactory) and leave Tokenizer(AttributeSource) since AttributeFactory is an enclosed class of AttributeSource ? Limiting the API to only AttributeFactory will restrict it unnecessarily imho.\n\nOur use case is to be able to create \"advanced token streams\", where one \"parent token stream\" can have multiple \"child token streams\", the parent token stream will share their attribute sources with the child token streams for performance reasons. Emulating this behaviour by doing copies of the attributes from stream to stream is really ineffective (our throughput is divided by at least 3).\nA more concrete use case is the ability to create \"specific token streams\" for a particular \"token type\". For example, our parent tokenizer tokenizes a string into a list of tokens, each one having a specific type. Then, each token is processed downstream by \"child token streams\". The child token stream that will process the token depends on the token type attribute. ",
            "author": "Renaud Delbru",
            "id": "comment-13558832"
        },
        {
            "date": "2013-01-21T15:36:10+0000",
            "content": "\nWhy not the contrary instead ? I.e., remove Tokenizer(AttributeFactory) and leave Tokenizer(AttributeSource) since AttributeFactory is an enclosed class of AttributeSource ? Limiting the API to only AttributeFactory will restrict it unnecessarily imho.\n\nBecause its totally unrelated.\n\nAttributeFactory lets you customize the attribute implementations.\n\nBut the AttributeSource ctor is a even crazier thing: its sharing actual attributes objects with another attributesource. ",
            "author": "Robert Muir",
            "id": "comment-13558842"
        },
        {
            "date": "2013-01-21T15:44:27+0000",
            "content": "\nBecause its totally unrelated.\n\nWell, I think the user could simply create a new AttributeSource with a given AttributeFactory to emulate the Tokenizer(AttributeFactory) ? But that might add some burden on the user side. ",
            "author": "Renaud Delbru",
            "id": "comment-13558850"
        },
        {
            "date": "2013-01-25T14:52:52+0000",
            "content": "Hi, \n\nare there still some open questions on this issue that block the patch of being committed ?  ",
            "author": "Renaud Delbru",
            "id": "comment-13562740"
        },
        {
            "date": "2013-01-25T14:56:19+0000",
            "content": "I raised a lot of questions. I think they are valid concerns. ",
            "author": "Robert Muir",
            "id": "comment-13562745"
        },
        {
            "date": "2013-01-25T15:22:19+0000",
            "content": "Renaud, have you looked at TeeSinkTokenFilter?  Sounds to me like a good fit for the use case you mentioned. ",
            "author": "Steve Rowe",
            "id": "comment-13562765"
        },
        {
            "date": "2013-01-25T17:28:10+0000",
            "content": "@steve:\n\n\nhave you looked at TeeSinkTokenFilter\n\nYes, and from my current understanding, it is similar to our current implementation. The problem with this approach is that the exchange of attributes is performed using the AttributeSource.State API with AttributeSource#captureState and AttributeSource#restoreState, which copies the values of all attribute implementations that the state contains, and this is very inefficient as it has to copies arrays and other objects (e.g., char term arrays, etc.) for every single token.\n\n@robert:\n\nConcerning the problem of UOEs, the new patch of Steve reduces the number of UOEs to one only, which is much more reasonable than my first approach. I have looked at the current state of the Lucene trunk, and there are already a lot of UOEs in many places. So, I would suggest that this problem may not be a blocking one (but I might be wrong).\n\nConcerning the problem of constructor explosion, maybe we can find a consensus. Your proposition of removing Tokenizer(AttributeSource) cannot work for us, as we need it to share a same AttributeSource across multiple streams. However, as I proposed, removing the Tokenizer(AttributeFactory) could work as it could be emulated by using Tokenizer(AttributeSource).\n ",
            "author": "Renaud Delbru",
            "id": "comment-13562853"
        },
        {
            "date": "2013-01-25T22:33:21+0000",
            "content": "My problem i guess with AttributeSource/AttributeFactory is that they invade on every single custom tokenizer: the API is not good.\n\nI realize its useful for expert users to be able to plug in their own, but why in the world must every  tokenizer have ctor explosion (minimum 3) to support this? \n\nAnd I guess I was secretly hoping we could remove Tokenizer(AttributeSource) if we fixed the solr hack. \n\nAgain my main problem is not about what you want to do, its instead related to the existing APIs (Tokenizer.java) and where we are heading if we perpetuate this to the analysis factories (TokenizerFactory) too. ",
            "author": "Robert Muir",
            "id": "comment-13563108"
        },
        {
            "date": "2013-01-27T11:44:32+0000",
            "content": "Hi Robert,\n\nI understand your point of view. One possible alternative for simplifying the API would be to refactor constructors with AttributeSource/AttributeFactory into setters. After a quick look, this looks compatible with the existing tokenizers and tokenizer factories. \nThe setting of AttributeSource/AttributeFactory for a tokenizer will be transparent (i.e., they do not have to explicitly create a constructor), and specific extension can be still implemented by subclasses (e.g., NumericTokenStream can overwrite the setAttributeFactory method to wrap a given factory with NumericAttributeFactory).\nFor the tokenizer factories, we can then implement a create method with an AttributeSource/AttributeFactory parameter, which will call the abstract method create and then call the setAttributeSource/setAttributeFactory on the newly created tokenizer.\n\nWhat do you think ? Did I miss something in my reasoning which could break something ?  ",
            "author": "Renaud Delbru",
            "id": "comment-13563784"
        },
        {
            "date": "2013-01-27T12:15:04+0000",
            "content": "TokenStreams are final and their settings should not be modifiable (the ones which still have setters are there for backwards compatibility in Lucene 3.x, in 4.0 all settings should be unmodifiable). It is also impossible to change the AttributeFactory or AttributeSource after construction because the attributes are created during construction (addAttribute in the implicit field initialization constructor), so changing the AttributeSource/Factory afterwards will not work. ",
            "author": "Uwe Schindler",
            "id": "comment-13563790"
        },
        {
            "date": "2013-01-27T12:15:58+0000",
            "content": "And I guess I was secretly hoping we could remove Tokenizer(AttributeSource) if we fixed the solr hack. \n\nThis is my opinion, too!\n\nTo remove the hack I have an idea (but it is also a hack). The main problem is Solr, which cannot work with plain TokenStreams, it always needs a Tokenizer (which is a serious limitation for special field types like numerics). The better hack I have is to write a fake AttributeFactory, that simply returns the attribute implementations of the underlying NumericTokenStream. I will attach a patch. Then we can remove new Tokenizer(AttributeSource), which is horrible and incorrect. ",
            "author": "Uwe Schindler",
            "id": "comment-13563791"
        },
        {
            "date": "2013-01-27T12:45:05+0000",
            "content": "Here the patch that changes the hack so we can remove the incorrect AttributeSource from TokenStream/Tokenizer ctors. AttributeFactory is the way to go and if somebody relied on this odd expert behaviour, he can port the code to use the same hack. ",
            "author": "Uwe Schindler",
            "id": "comment-13563796"
        },
        {
            "date": "2013-01-27T12:47:05+0000",
            "content": "+1 for Uwe's patch. I think this constructor is dangerous, i dont want it on every tokenizer. ",
            "author": "Robert Muir",
            "id": "comment-13563798"
        },
        {
            "date": "2013-01-28T17:26:51+0000",
            "content": "Great, I think that AttributeFactory hack could work for us. Would you agree to add a TokenizerFactory.create(AttributeFactory) method ? I could prepare a patch for that. ",
            "author": "Renaud Delbru",
            "id": "comment-13564422"
        },
        {
            "date": "2013-02-03T20:01:36+0000",
            "content": "Hi,\n\nI have submitted a patch which integrates:\n\n\tthe patch from Uwe\n\tthe removal of the Tokenizer(AttributeSource) constructor\n\tthe addition of a TokenizerFactory.create(AttributeFactory) method\n\tsome of the changes from the previous patch from Steve (e.g., TokenizerFactory.create method throw UOE by default)\n\n\n\nAll test suites are passing. ",
            "author": "Renaud Delbru",
            "id": "comment-13569883"
        },
        {
            "date": "2013-02-14T12:52:52+0000",
            "content": "Hi, would this patch be considered for inclusion at some point in time ? Thanks. ",
            "author": "Renaud Delbru",
            "id": "comment-13578331"
        },
        {
            "date": "2013-02-26T17:08:34+0000",
            "content": "Hi, any updates about the patch ? thanks. ",
            "author": "Renaud Delbru",
            "id": "comment-13587269"
        },
        {
            "date": "2013-02-26T17:27:43+0000",
            "content": "Hi Renaud,\n\nI skimmed your patch, looks good, I'll take a closer look in the next couple days for completeness and testing. ",
            "author": "Steve Rowe",
            "id": "comment-13587283"
        },
        {
            "date": "2013-03-11T10:29:44+0000",
            "content": "Hi Steve, I imagine things were busy these past days with the 4.2 release. Would you need help to finalise this patch ? thanks. ",
            "author": "Renaud Delbru",
            "id": "comment-13598688"
        },
        {
            "date": "2013-03-12T17:10:04+0000",
            "content": "Patch, narrows one or two more create(AttributeFactory) return types, minor cosmetic mods, removed unused imports.\n\nCommitting shortly. ",
            "author": "Steve Rowe",
            "id": "comment-13600197"
        },
        {
            "date": "2013-03-12T22:22:30+0000",
            "content": "Committed to trunk r1455670 and branch_4x r1455698 ",
            "author": "Steve Rowe",
            "id": "comment-13600562"
        },
        {
            "date": "2013-03-12T22:23:07+0000",
            "content": "Thanks Renaud for being persistent  ",
            "author": "Steve Rowe",
            "id": "comment-13600564"
        },
        {
            "date": "2013-03-12T22:33:44+0000",
            "content": "I haven't resolved this issue because of Robert's response to Renaud:\n\n\nin order not to break existing factories, I think it would be better to make this new method throw UOE by default instead of being abstract.\nI don't agree with this for trunk. we should add deprecations or whatever in 4.x, but trunk should be clean without any UOEs.\n\nTokenizerFactory.create(AttributeFactory,Reader) throws UOE, for those subclasses that don't override because the corresponding Tokenizer doesn't have a constructor that takes an AttributeFactory.\n\nI guess the way forward (trunk and branch_4x, I think) is to make this method abstract and add implementations to all subclasses that don't already have one, after first adding AttributeFactory-accepting constructors to all Tokenizers that don't already have them? ",
            "author": "Steve Rowe",
            "id": "comment-13600573"
        },
        {
            "date": "2013-03-13T00:55:40+0000",
            "content": "I think the way forward is to have one create() method for tokenizers. if it should take attributefactory, then thats what it takes (and somewhere else, DEFAULT_ATTRIBUTE_FACTORY is filled in).\n\nI really don't like separate methods. This will cause bugs and confusion. ",
            "author": "Robert Muir",
            "id": "comment-13600679"
        },
        {
            "date": "2013-03-13T04:09:55+0000",
            "content": "Somewhere else?  You mean, everywhere it's used?\n\nI really don't like separate methods. This will cause bugs and confusion.\n\nCan you expand on this thought?  Is this the constructor explosion argument?  If not, what sort of bugs and confusion do you see happening? ",
            "author": "Steve Rowe",
            "id": "comment-13600793"
        },
        {
            "date": "2013-03-13T04:24:57+0000",
            "content": "Its not a constructor explosion argument, because we aren't dealing with a constructor.\n\nIts just not a good API currently: it means every factory has to implement create() twice.\n\nWhats the sense in:\n\n  /** Creates the {@link TokenStream} of n-grams from the given {@link Reader}. */\n  @Override\n  public NGramTokenizer create(Reader input) {\n    return new NGramTokenizer(input, minGramSize, maxGramSize);\n  }\n\n  @Override\n  public NGramTokenizer create(AttributeFactory factory, Reader input) {\n    return new NGramTokenizer(factory, input, minGramSize, maxGramSize);\n  }\n\n\n\nwhen you can just have \n\n  @Override\n  public NGramTokenizer create(AttributeFactory factory, Reader input) {\n    return new NGramTokenizer(factory, input, minGramSize, maxGramSize);\n  }\n\n\n\nand in the base tokenizerfactory have\n\n  /** just for ease of use... maybe @deprecated, maybe don't even have this method */\n  public final Tokenizer create(Reader input) {\n     return create(DEFAULT_ATTRIBUTE_FACTORY, input);\n  }\n\n ",
            "author": "Robert Muir",
            "id": "comment-13600801"
        },
        {
            "date": "2013-03-13T13:08:23+0000",
            "content": "[branch_4x commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1455698\n\nLUCENE-4642: Add create(AttributeFactory) to TokenizerFactory and subclasses with ctors taking AttributeFactory, and remove Tokenizer's and subclasses' ctors taking AttributeSource. (merge trunk r1455670) ",
            "author": "Commit Tag Bot",
            "id": "comment-13601108"
        },
        {
            "date": "2013-03-13T13:08:36+0000",
            "content": "[trunk commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1455670\n\nLUCENE-4642: Add create(AttributeFactory) to TokenizerFactory and subclasses with ctors taking AttributeFactory, and remove Tokenizer's and subclasses' ctors taking AttributeSource. ",
            "author": "Commit Tag Bot",
            "id": "comment-13601118"
        },
        {
            "date": "2013-03-14T17:40:11+0000",
            "content": "\nand in the base tokenizerfactory have\n\n  /** just for ease of use... maybe @deprecated, maybe don't even have this method */\n  public final Tokenizer create(Reader input) {\n     return create(DEFAULT_ATTRIBUTE_FACTORY, input);\n  }\n\n\n\nOkay, I understand, I'll make a patch - I plan on including the no-attr-factory create() variant, and not deprecating it - I assume this will be used by most consumers. ",
            "author": "Steve Rowe",
            "id": "comment-13602482"
        },
        {
            "date": "2013-03-14T23:45:47+0000",
            "content": "Patch:\n\n\n\tTokenizerFactory.create(Reader) is made final, and calls the AttributeFactory-accepting version with AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY\n\tTokenizerFactory.create(AttributeFactory, Reader) is made abstract\n\tAdded AttributeFactory-accepting constructors to all Tokenizer's with existing TokenizerFactory subclasses that didn't already have them\n\tRemoved create(Reader) from all TokenizerFactory subclasses.\n\n\n\nIn this patch there is a new even more horrible hack in TrieTokenizer(Factory) - the AttributeFactory argument to the TrieTokenizer constructor is ignored!!!  Surely there a better way???:\n\n\npublic class TrieTokenizerFactory extends TokenizerFactory {\n...\n  @Override\n  public TrieTokenizer create(AttributeFactory factory, Reader input) {\n    return new TrieTokenizer(factory, input, type, TrieTokenizer.getNumericTokenStream(precisionStep));\n  }\n}\n\nfinal class TrieTokenizer extends Tokenizer {\n...\n  public TrieTokenizer(Reader input, TrieTypes type, final NumericTokenStream ts) {\n    this(AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY, input, type, ts);\n  }\n\n  public TrieTokenizer(AttributeFactory factory, Reader input, TrieTypes type, final NumericTokenStream ts) {\n    // Hack #0: factory param is ignored\n    // H\u00e4ckidy-Hick-Hack #1: must share the attributes with the NumericTokenStream we delegate to, so we create a fake factory:\n    super(new AttributeFactory() {\n      @Override\n      public AttributeImpl createAttributeInstance(Class<? extends Attribute> attClass) {\n        return (AttributeImpl) ts.addAttribute(attClass);\n      }\n    }, input);\n    // add all attributes:\n    for (Iterator<Class<? extends Attribute>> it = ts.getAttributeClassesIterator(); it.hasNext();) {\n      addAttribute(it.next());\n    }\n    this.type = type;\n    this.ts = ts;\n    // dates tend to be longer, especially when math is involved\n    termAtt.resizeBuffer( type == TrieTypes.DATE ? 128 : 32 );\n  }\n\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13602894"
        },
        {
            "date": "2013-03-15T02:01:11+0000",
            "content": "\nIn this patch there is a new even more horrible hack in TrieTokenizer(Factory) - the AttributeFactory argument to the TrieTokenizer constructor is ignored!!! Surely there a better way???:\n\nJust at a quick glance, I think it should be passed to TrieTokenizer.getNumericTokenStream(int), which should instead take (AttFactory, int), and call: public NumericTokenStream(AttributeFactory factory, final int precisionStep) ?\n\nThis way the numerictokenstream is created with the requested attfactory. TrieTokenizer shouldnt take factory at all since its just this 'layer on top' that pretends to be a tokenizer over it? ",
            "author": "Robert Muir",
            "id": "comment-13603025"
        },
        {
            "date": "2013-03-15T04:32:37+0000",
            "content": "\nIn this patch there is a new even more horrible hack in TrieTokenizer(Factory) - the AttributeFactory argument to the TrieTokenizer constructor is ignored!!! Surely there a better way???:\nJust at a quick glance, I think it should be passed to TrieTokenizer.getNumericTokenStream(int), which should instead take (AttFactory, int), and call: public NumericTokenStream(AttributeFactory factory, final int precisionStep) ?\nThis way the numerictokenstream is created with the requested attfactory. TrieTokenizer shouldnt take factory at all since its just this 'layer on top' that pretends to be a tokenizer over it?\n\nCool, that works, thanks; patch attached that does this.\n\nCommitting shortly. ",
            "author": "Steve Rowe",
            "id": "comment-13603117"
        },
        {
            "date": "2013-03-15T04:46:18+0000",
            "content": "[trunk commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1456768\n\nLUCENE-4642:\n\n\tTokenizerFactory.create(Reader) is made final, and calls the AttributeFactory-accepting version with AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY\n\tTokenizerFactory.create(AttributeFactory, Reader) is made abstract\n\tAdded AttributeFactory-accepting constructors to all Tokenizer's with existing TokenizerFactory subclasses that didn't already have them\n\tRemoved create(Reader) from all TokenizerFactory subclasses\n\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13603127"
        },
        {
            "date": "2013-03-15T04:49:36+0000",
            "content": "Thanks a lot.. this is very nice IMO. ",
            "author": "Robert Muir",
            "id": "comment-13603129"
        },
        {
            "date": "2013-03-15T05:33:36+0000",
            "content": "Committed the second patch to trunk and branch_4x.\n\nThanks for your help, Robert. ",
            "author": "Steve Rowe",
            "id": "comment-13603159"
        },
        {
            "date": "2013-03-15T05:42:39+0000",
            "content": "[branch_4x commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1456771\n\nLUCENE-4642:\n\n\tTokenizerFactory.create(Reader) is made final, and calls the AttributeFactory-accepting version with AttributeFactory.DEFAULT_ATTRIBUTE_FACTORY\n\tTokenizerFactory.create(AttributeFactory, Reader) is made abstract\n\tAdded AttributeFactory-accepting constructors to all Tokenizer's with existing TokenizerFactory subclasses that didn't already have them\n\tRemoved create(Reader) from all TokenizerFactory subclasses\n(merged trunk r1456768)\n\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13603161"
        },
        {
            "date": "2013-03-20T16:25:50+0000",
            "content": "Thanks for committing this, Steve and Robert. That's great. ",
            "author": "Renaud Delbru",
            "id": "comment-13607809"
        },
        {
            "date": "2013-05-10T10:34:03+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654108"
        }
    ]
}