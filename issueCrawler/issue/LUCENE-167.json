{
    "id": "LUCENE-167",
    "title": "[PATCH] QueryParser not handling queries containing AND and OR",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The QueryParser does not seem to handle boolean queries containing AND and OR\noperators correctly:\ne.g.\na AND b OR c AND d gets parsed as +a +b +c +d.\n\nThe attached patch fixes this by changing the vector of boolean clauses into a\nvector of vectors of boolean clauses in the addClause method of the query\nparser. A new sub-vector is created whenever an explicit OR operator is used.\n\nQueries using explicit AND/OR are grouped by precedence of AND over OR. That is\na OR b AND c gets a OR (b AND c).\n\nQueries using implicit AND/OR (depending on the default operator) are handled as\nbefore (so one can still use a +b -c to create one boolean query, where b is\nrequired, c forbidden and a optional).\n\nIt's less clear how a query using both explizit AND/OR and implicit operators\nshould be handled.\nSince the patch groups on explicit OR operators a query \na OR b c is read as a (b c)\nwhereas\na AND b c as +a +b c\n(given that default operator or is used).\n\nThere's one issue left:\nThe old query parser reads  a query \n`a OR NOT b' as `a -b' which is the same as `a AND NOT b'.\nThe modified query parser reads this as `a (-b)'.\nWhile this looks better (at least to me), it does not produce the result of a OR\nNOT b. Instead the (-b) part seems to be silently dropped.\nWhile I understand that this query is illegal (just searching for one negative\nterm) I don't think that silently dropping this part is an appropriate way to\ndeal with that. But I don't think that's a query parser issue.\nThe only question is, if the query parser should take care of that. \n\nI attached the patch (made against 1.3rc3 but working for 1.3final as well) and\na test program.\nThe test program parses a number of queries with default-or and default-and\noperator and reparses the result of the toString method of the created query.\nIt outputs the initial query, the parsed query with default or, the reparesed\nquery, the parsed query with the default and it's reparsed query.\nIf called with a -q option, it also run's the queries against an index\nconsisting of all documentes containing one or none a b c or d.\nUsing an unpatched and a patched version of lucene in the classpath one can look\nat the effect of the patch in detail.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--QueryParser.patch": "https://issues.apache.org/jira/secure/attachment/12312285/ASF.LICENSE.NOT.GRANTED--QueryParser.patch",
        "ASF.LICENSE.NOT.GRANTED--LuceneTest.java": "https://issues.apache.org/jira/secure/attachment/12312284/ASF.LICENSE.NOT.GRANTED--LuceneTest.java",
        "ASF.LICENSE.NOT.GRANTED--QueryParser.jj.patch": "https://issues.apache.org/jira/secure/attachment/12312283/ASF.LICENSE.NOT.GRANTED--QueryParser.jj.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2003-12-30T18:35:03+0000",
            "content": "Created an attachment (id=9750)\nPatch for QueryParser.jj ",
            "author": "Morus Walter",
            "id": "comment-12321454"
        },
        {
            "date": "2003-12-30T18:36:01+0000",
            "content": "Created an attachment (id=9751)\nTest program that shows the result of the query parser ",
            "author": "Morus Walter",
            "id": "comment-12321455"
        },
        {
            "date": "2004-01-22T16:18:46+0000",
            "content": "I extended the patch to avoid ArrayIndexOutOfBoundsExceptions\nin case of stopwords.\n\nEmpty queries and queries containing only prohibited clauses return null\nnow.\nNote that this also aplies to subqueries, e.g. \n`a (-b -c)' gets `a' since -b -c only contains prohibited clauses. ",
            "author": "Morus Walter",
            "id": "comment-12321456"
        },
        {
            "date": "2004-01-22T16:19:44+0000",
            "content": "Created an attachment (id=10051)\nnew version of patch taking care of stopwords ",
            "author": "Morus Walter",
            "id": "comment-12321457"
        },
        {
            "date": "2004-01-23T01:39:09+0000",
            "content": "Thanks for the patch!\nHowever, I applied your patch locally, but a number of QueryParser unit tests\nare now failing.\nAre they passing for you?\n\nHere are some failures I'm seeing:\n\n    [junit] Testcase: testSimple(org.apache.lucene.queryParser.TestQueryParser):\n       FAILED\n    [junit] Query /a OR !b/ yielded /a/, expecting /a -b/\n    [junit] junit.framework.AssertionFailedError: Query /a OR !b/ yielded /a/,\nexpecting /a -b/\n    [junit]     at\norg.apache.lucene.queryParser.TestQueryParser.assertQueryEquals(TestQueryParser.java:162)\n\n    [junit] Testcase: testNumber(org.apache.lucene.queryParser.TestQueryParser):\n       Caused an ERROR\n    [junit] null\n    [junit] java.lang.NullPointerException\n    [junit]     at\norg.apache.lucene.queryParser.TestQueryParser.assertQueryEquals(TestQueryParser.java:160)\n\n\netc.\n ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321458"
        },
        {
            "date": "2004-02-13T02:13:39+0000",
            "content": "Thanks for you effort Otis.\n\nI wasn't aware of the test cases and used only my own ones.\n\nWhen I run the tests now, I do get these errors.\nI had a closer look and find that these errors are due to intentional changes.\n\nFirst I changed the test cases to deal with null queries returned from the query\nparser, that is I changed the function assertQueryEquals to\n  public void assertQueryEquals(String query, Analyzer a, String result)\n    throws Exception {\n    Query q = getQuery(query, a);\n    String s = q != null ? q.toString(\"field\") : \"null\";\n    if (!s.equals(result)) \n{\n      fail(\"Query /\" + query + \"/ yielded /\" + s\n           + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n(the change is the construction of the result string 'String s = ...').\n\nThen I get the following errors:\n\n    [junit] Testcase:\ntestSimple(org.apache.lucene.queryParser.TestQueryParser):\tFAILED\n    [junit] Query /a OR !b/ yielded /a/, expecting /a -b/\n\nintentional:\na OR !b means all documents that contain a or that don't contain b.\nSo this cannot be expressed by a single boolean query since it would implement a\nAND !b. So a OR !b gets a OR (!b) and !b is a boolean query containing only\nprohibited terms, which cannot be searched.\nTherefor it's dropped.\nI asked how to deal with that on the mailing list\n(http://issues.apache.org/eyebrowse/ReadMsg?listName=lucene-user@jakarta.apache.org&msgNo=6497)\nand Otis suggested to return null for such queries,\nwhich means that it will get dropped.\n\n    [junit] Testcase:\ntestNumber(org.apache.lucene.queryParser.TestQueryParser):\tFAILED\n    [junit] Query /3/ yielded /null/, expecting //\n...\n    [junit] Testcase: testQPA(org.apache.lucene.queryParser.TestQueryParser):\tFAILED\n    [junit] Query /stop/ yielded /null/, expecting //\n\nAlso intentional. Empty queries return null now, instead of a boolean\nquery containing no query.\nSame question on the mailing list.\n\n    [junit] Testcase: testBoost(org.apache.lucene.queryParser.TestQueryParser):\nFAILED\n    [junit] null\nThis is from \n   StandardAnalyzer oneStopAnalyzer = new StandardAnalyzer(new String[]\n{\"on\"}\n);\n    QueryParser qp = new QueryParser(\"field\", oneStopAnalyzer);\n    Query q = qp.parse(\"on^1.0\");\n    assertNotNull(q);\nwhich is also a query containing only stopwords, that returns null now.\n\n\nSo I think this raises the question again, what should be the result of an empty\nquery?\nA boolean query containing no clauses doesn't make much sense to me (the only\nreason to use this would be compatiblity, since this is the old behavior).\nFor queries (and subqueries) containing only stopwords, an alternative would be\nto raise an exception. ",
            "author": "Morus Walter",
            "id": "comment-12321459"
        },
        {
            "date": "2004-02-13T02:38:35+0000",
            "content": "It is convenient to have an empty query string parsed as an empty BooleanQuery.\n That makes it much simpler to, e.g., construct a query from a form, where some\nfields may be empty.  One needn't check for a null result from the parser, but\ncan always unconditionally add the parsed query to the full query being composed.\n\nBack-compatiblity is also a good reason.  Changing this will likely break a lot\nof applications when they upgrade, which is never nice. ",
            "author": "cutting@apache.org",
            "id": "comment-12321460"
        },
        {
            "date": "2004-02-13T04:24:14+0000",
            "content": "I had the same question when I submitted the last two patches to the \nQueryParser: what should an empty query return? This was the cause of some \ninternal problems for handling stopwords within the QueryParser. \n\nReturning null from BooleanQuery broke \"only\" broke three tests in \nTestQueryParser, but fixed a lot of abnormal behaviors. Testing for an empty \nstring appeared more of a dirty hack, but would do the trick too.\n\nI noticed that they were several patches in the queue for the QueryParser. Is \nthere anybody that is taking care of them?\n\nJean-Francois Halleux ",
            "author": "Jean-Fran\u00e7ois Halleux",
            "id": "comment-12321461"
        },
        {
            "date": "2004-02-13T06:57:33+0000",
            "content": "One of the Lucene developers will take care of them.\nI noticed there are several of them, which means there will be problems applying\nthem.\nI am currently very busy, and will not get to this in at least another week or two. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321462"
        },
        {
            "date": "2004-02-16T01:52:03+0000",
            "content": "Two comments on Dougs arguments:\n\n\n\tan empty query will not result in an empty (or null) query but raise a parser\nexception. So if it should, this would have to be changed.\nThe only situation where empty (or null) queries occur is, when a query only\ncontains stopwords (or, with my patch, contains only prohibited terms).\n\twhile it may be conveniant in some cases to have an empty query as the result,\nI would like to distinguish between empty queries and queries returning an empty\nresult. So if an empty query is returned I'd like to have a simple way of\ntesting for that.\nI suggest a 'isEmpty()' method for the query object, which can be implemented in\nthe query object always returning false and be overwritten for boolean queries,\nwhere it returns true unless one of clauses is a nonempty query.\nCurrently you can only use the toString() method to test for empty queries or\nhave to distinguish the type of query object and if its boolean query look into\nit's details yourself.\n\n ",
            "author": "Morus Walter",
            "id": "comment-12321463"
        },
        {
            "date": "2004-03-02T22:48:22+0000",
            "content": "How about this.\nIt seems to me that the optimal way to approach this problem at this point is to\nchange the patch to return an empty Query instead of a null one, after all. \nThis way we get everything that Doug mentioned (no need to test results, and we\nremain compatible with previous versions).  This way we also fix the bug that\nyou identified in the first place, which is incorrect parsing of AND/OR query\nexpressions, and we also get the solution to only prohibited terms being present\nin the query.\n\nWhat we do not get is the way of figuring out why a returned Query is empty...\nand you (Morus) even say that blank Queries will raise parser exceptions.\n\nSo I suggest we patch QueryParser.jj without this last bit for now, and add\nsupport for that later. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321464"
        },
        {
            "date": "2004-03-05T02:06:51+0000",
            "content": "Ok for me.\nAs I said, I'd just like to have an easy way of checking if a query is empty in\nthis case.\n\nIf you want me to change the patch, let me know. That no big deal. ",
            "author": "Morus Walter",
            "id": "comment-12321465"
        },
        {
            "date": "2005-03-03T01:54:44+0000",
            "content": "I tried applying the latest QueryParser.jj patch but it failed.  Could you update this patch to the current \nsvn version of QueryParser.jj?   And we need to have some test cases to prove this works as expected.  \nI'll apply it. \n\nThere are other ways to achieve this with JavaCC which I'm exploring myself in a custom query parser. ",
            "author": "Erik Hatcher",
            "id": "comment-12321466"
        },
        {
            "date": "2005-03-03T15:59:19+0000",
            "content": "OK, I'll look into this.\nBut it might take some time (1-2 weeks).\n\nIf you're going to fix it otherwise, let me know.\nOf course it should be able to do the operator precenedence on the javacc level,\nthough I'm not sure about the details of the needed recursion.\nBut that might end in a major rewrite of qp, something I wanted to avoid, when I\nwrote the patch. ",
            "author": "Morus Walter",
            "id": "comment-12321467"
        },
        {
            "date": "2005-03-08T03:31:47+0000",
            "content": "I have created a PrecedenceQueryParser in Lucene's trunk repository.  This implements the precedence \nwith AND/OR as desired with AND taking a higher precedence, and also seems to deal nicely with the \nedge cases mentioned in the comments of this issue such that A OR B C translates to A B C.\n\nLet me know if PQP is acceptable and I'll make the switch and rename it to QueryParser moving the old \nQueryParser to OldQueryParser and deprecating it in case anyone needs the previous behavior. ",
            "author": "Erik Hatcher",
            "id": "comment-12321468"
        },
        {
            "date": "2007-12-06T13:56:12+0000",
            "content": "Hi, I would like to know if this new Parser is integrated or even\nthe standard QueryParser in current releases? ",
            "author": "Christoph Bammann",
            "id": "comment-12549042"
        },
        {
            "date": "2007-12-06T14:19:04+0000",
            "content": "the PrecedenceQueryParser is in the contrib/miscellaneous codebase (in Lucene's repo) and in released \"miscellaneous\" JAR.  But it has some issues that are documented in the test case, so it is definitely not ready for prime time.   ",
            "author": "Erik Hatcher",
            "id": "comment-12549046"
        },
        {
            "date": "2008-02-11T09:29:05+0000",
            "content": "I see that very little has been done with this since 2005. Are there any plans to incorporate a fix into the current build? How can I get my hands on a copy of the fix that will work with 2.3.0? ",
            "author": "Graham Maloon",
            "id": "comment-12567556"
        },
        {
            "date": "2009-08-25T08:28:20+0000",
            "content": "This feature is part of the new queryparser implementation\nIt is disabled by the by default, to implement the lucene 2.4 behaviour.\nIt can be enabled by removing the GroupQueryNodeProcessor from the StandardQueryNodeProcessorPipeline.\n\nIn LUCENE-1823 we plan to expose it in a new syntax parser and also handle OR, AND, NOT as logical operators with precedence.\n\nWould be this enough to address this issue? ",
            "author": "Luis Alves",
            "id": "comment-12747303"
        },
        {
            "date": "2009-08-25T09:05:58+0000",
            "content": "From my point of view (as the one who opened the ticket) this seems sufficient, so I'm closing the ticket.\n\nSorry, I was not aware that it is still open.\n ",
            "author": "Morus Walter",
            "id": "comment-12747318"
        }
    ]
}