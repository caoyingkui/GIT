{
    "id": "SOLR-10032",
    "title": "Create report to assess Solr test quality at a commit point.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Tests"
        ],
        "type": "Task",
        "fix_versions": [
            "7.0",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "We have many Jenkins instances blasting tests, some official, some policeman, I and others have or had their own, and the email trail proves the power of the Jenkins cluster to find test fails.\n\nHowever, I still have a very hard time with some basic questions:\n\nwhat tests are flakey right now? which test fails actually affect devs most? did I break it? was that test already flakey? is that test still flakey? what are our worst tests right now? is that test getting better or worse?\n\nWe really need a way to see exactly what tests are the problem, not because of OS or environmental issues, but more basic test quality issues. Which tests are flakey and how flakey are they at any point in time.\n\n\nReports:\nhttps://drive.google.com/drive/folders/0ByYyjsrbz7-qa2dOaU1UZDdRVzg?usp=sharing\n\n01/24/2017 - https://docs.google.com/spreadsheets/d/1JySta2j2s7A_p16wA1UO-l6c4GsUHBIb4FONS2EzW9k/edit?usp=sharing\n02/01/2017 - https://docs.google.com/spreadsheets/d/1FndoyHmihaOVL2o_Zns5alpNdAJlNsEwQVoJ4XDWj3c/edit?usp=sharing\n02/08/2017 - https://docs.google.com/spreadsheets/d/1N6RxH4Edd7ldRIaVfin0si-uSLGyowQi8-7mcux27S0/edit?usp=sharing\n02/14/2017 - https://docs.google.com/spreadsheets/d/1eZ9_ds_0XyqsKKp8xkmESrcMZRP85jTxSKkNwgtcUn0/edit?usp=sharing\n02/17/2017 - https://docs.google.com/spreadsheets/d/1LEPvXbsoHtKfIcZCJZ3_P6OHp7S5g2HP2OJgU6B2sAg/edit?usp=sharing",
    "attachments": {
        "Lucene-Solr Master Test Beasults 02-08-2017-6696eafaae18948c2891ce758c7a2ec09873dab8 Level Medium+- Running 30 iterations, 10 at a time, 8 cores.pdf": "https://issues.apache.org/jira/secure/attachment/12851869/Lucene-Solr%20Master%20Test%20Beasults%2002-08-2017-6696eafaae18948c2891ce758c7a2ec09873dab8%20Level%20Medium%2B-%20Running%2030%20iterations%2C%2010%20at%20a%20time%2C%208%20cores.pdf",
        "Lucene-Solr Master Test Beasults 02-14-2017- Level Medium+-a1f114f70f3800292c25be08213edf39b3e37f6a Running 30 iterations, 10 at a time, 8 cores.pdf": "https://issues.apache.org/jira/secure/attachment/12852891/Lucene-Solr%20Master%20Test%20Beasults%2002-14-2017-%20Level%20Medium%2B-a1f114f70f3800292c25be08213edf39b3e37f6a%20Running%2030%20iterations%2C%2010%20at%20a%20time%2C%208%20cores.pdf",
        "Lucene-Solr Master Test Beasults 02%2F17%2F2017-19c8ec2bf1882bed1bb34d0b55198d03f2018838 Level Hard Running 100 iterations, 12 at a time, 8 cores.pdf": "https://issues.apache.org/jira/secure/attachment/12853478/Lucene-Solr%20Master%20Test%20Beasults%2002%252F17%252F2017-19c8ec2bf1882bed1bb34d0b55198d03f2018838%20Level%20Hard%20Running%20100%20iterations%2C%2012%20at%20a%20time%2C%208%20cores.pdf",
        "Lucene-Solr Master Test Beast Results 01-24-2017-9899cbd031dc3fc37a384b1f9e2b379e90a9a3a6 Level Medium- Running 30 iterations, 12 at a time .pdf": "https://issues.apache.org/jira/secure/attachment/12849785/Lucene-Solr%20Master%20Test%20Beast%20Results%2001-24-2017-9899cbd031dc3fc37a384b1f9e2b379e90a9a3a6%20Level%20Medium-%20Running%2030%20iterations%2C%2012%20at%20a%20time%20.pdf",
        "Lucene-Solr Master Test Beasults 02-01-2017-bbc455de195c83d9f807980b510fa46018f33b1b Level Medium- Running 30 iterations, 10 at a time.pdf": "https://issues.apache.org/jira/secure/attachment/12850768/Lucene-Solr%20Master%20Test%20Beasults%2002-01-2017-bbc455de195c83d9f807980b510fa46018f33b1b%20Level%20Medium-%20Running%2030%20iterations%2C%2010%20at%20a%20time.pdf"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-01-25T15:19:08+0000",
            "content": "I'll create sub issues off this JIRA to address the worst tests I find. ",
            "author": "Mark Miller",
            "id": "comment-15837890"
        },
        {
            "date": "2017-01-25T15:41:06+0000",
            "content": "+1. Flakey test clean up is an arduous and unforgiving task, but it's hard to overstate it's importance. \n\nDo you have ideas on how we might track this beyond trying to fix the biggest offenders? If there's stuff we can do to raise the visibility of such tests, that will be a start to getting all of us more aware of the problem and moving toward a long-term solution. ",
            "author": "Cassandra Targett",
            "id": "comment-15837927"
        },
        {
            "date": "2017-01-25T16:45:43+0000",
            "content": "+1 I'm so glad you're looking into this Mark; thank you! ",
            "author": "David Smiley",
            "id": "comment-15838093"
        },
        {
            "date": "2017-01-25T16:58:26+0000",
            "content": "I'm still building the first report, but here is a partial sample attached. At the moment, the output of my script is a tsv file and I just paste that into Google spreadsheets. ",
            "author": "Mark Miller",
            "id": "comment-15838123"
        },
        {
            "date": "2017-01-25T17:06:44+0000",
            "content": "If there's stuff we can do to raise the visibility of such tests, that will be a start to getting all of us more aware of the problem and moving toward a long-term solution.\n\nI think it really depends on how much effort we can maintain over time on this, but ideally we would do this:\n\nTake the first report and file JIRA issues (or find current ones) for all of the tests that are beyond a bit flakey. Push on the author and contributors to those tests to get them solid. Generating reports for just the worst tests is actually pretty fast for a feedback loop. For tests that have fails, I have all the logs to provide to the JIRA issue.\n\nIf we can get out a report with all tests within a certain flakey cutoff range and if we can regularly generate this report over time, it will be relatively easy to spot new bad tests or tests that re enter a bad state, and we can file high priority JIRA's (or reopen JIRAs) and/or ignore them with AwaitsFix annotations.\n\nOnce we get a report under a basic level, we can be harder on tests that creep into a danger zone. It really depends on if we get enough momentum, but I'm willing to give it a try.\n\nOne thing I've tried to do is create a rating for different failure rates, with the idea being, we first work on the tests worse than the 'flakey' rating, Once we achieve that, we can be very hard on tests that go above that rating while working on hardening the least flakey tests over time as well. ",
            "author": "Mark Miller",
            "id": "comment-15838140"
        },
        {
            "date": "2017-01-25T17:09:02+0000",
            "content": "How the report is generated:\n\nI am running each of tests on a beefy ubuntu machine, 30 runs per tests, 12 in parallel at a time. ",
            "author": "Mark Miller",
            "id": "comment-15838149"
        },
        {
            "date": "2017-01-25T17:17:20+0000",
            "content": "If there's stuff we can do to raise the visibility of such tests,\n\nI'm hoping having this report with all the tests compared will help give us backing to do just this. Right now, it's hard to be objective about which tests are the problem and how hard you should push back on a flakey test. Fails for you, not for me, fails on jenkins but so do many others, etc.\n\nWith this report and the logs of all 30 runs for each test, I think it will be much easier to create high priority JIRA issues for bad tests and pressure contributors to improve them. We can also send an occasional email to the dev list and highlight problem tests.\n\nOpen to other ideas as well of course. ",
            "author": "Mark Miller",
            "id": "comment-15838163"
        },
        {
            "date": "2017-01-25T17:22:43+0000",
            "content": "We can also send an occasional email to the dev list and highlight problem tests.\n\n+1 !\nWould be great to eventually automate (e.g. a daily report wouldn't be noise compared to what we have now), but whatever can be done in the meantime will be a huge improvement. ",
            "author": "Yonik Seeley",
            "id": "comment-15838177"
        },
        {
            "date": "2017-01-25T18:58:12+0000",
            "content": "This will also help address getting our nightly runs to a useful state. I am not currently running tests that run non nightly with 'nightly cranked up' variants, but we do get a report on tests that only run nightly, and tests like that tend to get little to no visibility currently (and my guess is we may find many fairly failure prone). ",
            "author": "Mark Miller",
            "id": "comment-15838364"
        },
        {
            "date": "2017-01-25T20:00:42+0000",
            "content": "I think a hammer approach (and probably effective) for now would be disable all flaky tests. While someone should anyway need to work on them, their getting resolved would not get in the way of a regular developer now trying to figure out the basic questions Mark mentioned. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15838475"
        },
        {
            "date": "2017-01-25T20:11:18+0000",
            "content": "I think there is likely too much of a test coverage problem if we take that approach.\n\nI'd like to instead push gradually, though perhaps 'Apache time' quickly.\n\nFirst I will create critical issues for the worst offenders, if they cannot be fixed pretty much right away, I will badapple or awaitsfix them.\n\nI'll also create critical issues for other fails above a certain threshold and ping appropriate JIRA issues to try and bring attention to them. Over time we can ignore these as well if they are not addressed and someone doesn't find them important enough to keep coverage.\n\nWe can then tighten this net down to a certain level. \n\nI think if we commit to following through on some progress, we can take an iterative approach that gives people ample time to fix important tests and us time to evaluate loss of important test coverage (even flakey test coverage is very valuable info to us right now, and some flakey tests pass 90%+ of the time - we want to harden them, but they provide critical coverage in many cases).\n\nI'll also ping the dev list with a summary occasionally to bring attention to this and the current state. ",
            "author": "Mark Miller",
            "id": "comment-15838489"
        },
        {
            "date": "2017-01-28T00:31:05+0000",
            "content": "Here is the first report. There may still be some kinks to work out. I'll summarize the report and add additional commentary later. I'll also send that to the dev list. We can make or surface JIRA issues for any test not solid and prompt fixes or badapple/awaitsfix annotations.\n\nYou can see the attached report or here: https://docs.google.com/spreadsheets/d/1JySta2j2s7A_p16wA1UO-l6c4GsUHBIb4FONS2EzW9k/edit?usp=sharing ",
            "author": "Mark Miller",
            "id": "comment-15843698"
        },
        {
            "date": "2017-01-28T00:34:07+0000",
            "content": "This report covers 876 tests. If any tests share the same name, the results for one would currently be misses. Will have to start using full package names to avoid that. ",
            "author": "Mark Miller",
            "id": "comment-15843701"
        },
        {
            "date": "2017-01-31T15:01:36+0000",
            "content": "One thing that has surprised me is how stable the tests actually are. I ran this on a 16 core machine, but it is also generally 12 of the same test at a time, 12 again, and then 6 at a time. It's a fairly aggressive environment to survive for 30 runs. Given 876 tests, the number that have passed this test is very, very high when you consider the many ignored and nightly tests listed as failed.\n\nOur jenkins cluster will probably keep finding rarer fails over time, but getting the average developer in good shape looks very tractable. ",
            "author": "Mark Miller",
            "id": "comment-15846932"
        },
        {
            "date": "2017-02-01T14:02:47+0000",
            "content": "Commit 730df22e40cdfb51dd466d44332631fa8fa87f42 in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=730df22 ]\n\nSOLR-10032: Ignore tests that run no test methods. ",
            "author": "ASF subversion and git services",
            "id": "comment-15848398"
        },
        {
            "date": "2017-02-01T14:57:36+0000",
            "content": "In some cases, because the machine I have been using has no swap space, RAM usage could be an issue in the first report. I'll be adjusting and reducing load in the next run. ",
            "author": "Mark Miller",
            "id": "comment-15848458"
        },
        {
            "date": "2017-02-03T05:16:22+0000",
            "content": "Here is a second test report for a commit from 2/1.\n\nA couple fails in the first run had to do with RAM issues, so for the second report I used a lot more RAM and did 10 at a time instead of 12.\n\nI've been making other small iterative improvements as well.\n\nhttps://docs.google.com/spreadsheets/d/1FndoyHmihaOVL2o_Zns5alpNdAJlNsEwQVoJ4XDWj3c/edit?usp=sharing ",
            "author": "Mark Miller",
            "id": "comment-15851079"
        },
        {
            "date": "2017-02-03T11:52:12+0000",
            "content": "The report looks great, and much needed. However, was just wondering whether it accounts for all flaky tests. ShardSplitTest.testSplitAfterFailedSplit() fails quite often on my local test runs, and also fails often at Apache/Policeman jenkins, but you seemed to have had no problems with that test (\"rock-solid\"). Could it be that the test (and potentially other tests like that) fails only on slower computers?  ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15851389"
        },
        {
            "date": "2017-02-03T15:31:59+0000",
            "content": "This report is not made to reproduce all fails.\n\nSome tests will fail for a variety of reasons. Resources are too low, Java/OS version, which tests they happen to run against, etc, etc.\n\nSo this will not exhaustively produce all flakey tests, nor is it trying to. In fact, I've tried to make sure there are plenty of resources to the run the tests reasonably. My goal is to find flakey tests that pop out easily, and not due to very specific conditions. This should target and find obvious problems and then help clamp down on minor flakey tests in time. Jenkins and individual devs will still play an important role in outliers and other, hopefully much less common, fails.\n\nThat said, most things still end up popping out if you beast long enough in my experience. Beasting for 100 runs would probably surface even more flakey tests. Producing this test with 30 is already quite time expensive though  I'll eventually do some longer reports as we whittle down the obvious issues. It's really a judgment call of time vs coverage, and in these early reports 30 seemed like a reasonable condition to pass.\n\nThe other tests are not all cleared, but here is a very reasonable list of tests we should focus on - that even in a good clean env appear to fail too much.\n\nI will also focus 100 run or more beasting on the tests that this report surfaces as flakey, and likely some tests will enter and drop off the report from one to the next. Those tests will end up needing more extensive individual beasting to pass as 100% clean.\n\nrock-solid is not really a definitive judgment, just the rating for no fails. If you did a single run and it passed it would be rock-solid. I can change that to something a little less confusing.\n\nIf you do have a specific test that seems to fail for you, I'm happy to beast it more extensively and let you know if fails pop out. I'll try ShardSplitTest. It may be that it has more severe resource problems when it ends up running against some other intensive tests in ant test.\n\nIt does give us some more info when looking at ShardSplitTest - we know it fails fairly often for you and Jenkins, but that in a clean, resource friendly env, it can pass for 30 runs, 10 run at a time. That gives some clues hardening that test. ",
            "author": "Mark Miller",
            "id": "comment-15851620"
        },
        {
            "date": "2017-02-03T17:58:56+0000",
            "content": "In other words: I am looking for tests that fail in a medium challenging but resource plentiful scenario first. Once we have a handle on those tests, there are steps we can take to improve hunting for deeper issues. ",
            "author": "Mark Miller",
            "id": "comment-15851836"
        },
        {
            "date": "2017-02-03T18:45:01+0000",
            "content": "but you seemed to have had no problems with that test\n\nThis test did actually fail .07% of the time in the previous report. In future reports I will include the previous fail rate as well. ",
            "author": "Mark Miller",
            "id": "comment-15851916"
        },
        {
            "date": "2017-02-09T02:22:01+0000",
            "content": "For this next report I have switched to an 8 core machine from a 16 core machine. It looks like that may have made some of the more resource/env sensitive tests pop out a little more. The first report was created on a single machine, so I went with 16 cores just to try and generate it as fast as possible. 16-cores was not strictly needed, I run 10 tests at a time on my 6-core machine with similar results. It may even be a little too much CPU for our use case, even when running 10 instances of the test in parallel.\n\nI have moved on from just using one machine though. It actually basically took 2-3 days to generate the first report as I was still working out some speed issues. The First run had like 2 minutes and 40 seconds of 'build' overtime per test run for most of the report and just barely enough RAM to handle 10 tests at a time - for a few test fails on heavy tests (eg hdfs), not enough RAM as there is also no swap space on those machines. Anyway, beasting ~900 tests is time consuming even in the best case. \n\nTwo tests also hung and that slowed things up a bit. Now I am more on the lookout for that - I've @BadAppled a test method involved in producing one of the hangs, and for this report I locally @BadAppled the other. They both look like legit bugs to me. I should have done @Ignore for the second hang, the test report runs @BadApple and @AwaitFix.  Losing one machine for a long time when you are using 10 costs you a lot in report creation time. Now I at least know to pay attention to my email while running reports though. Luckily, these instance I'm using will auto pause after 30 minutes of no real activity and I get an email, so I now I can be a bit more vigilant while creating the report. Also helps that I've gotten down to about 4 hours to create the report.\n\nI used 5 16-core machines for the second report. I can't recall about how long that took, but it was still in the realm of an all night job.\n\nFor this third report I am using 10 8-core machines.\n\nI think we should be using those annotations like this:\n\n\n\t@AwaitsFix - we basically know something key is broken and it's fairly clear what the issue is - we are waiting for someone to fix it - you don't expect this to be run regularly, but you can just pass a system property to run them.\n\t@BadApple - test is too flakey, fails too much for unknown or varied reasons - you do expect that some test runs would still or could still include these tests and give some useful coverage information - flakiness in many more integration type tests can be the result of unrelated issues and clear up over time. Or get worse.\n\t@Ignore - test is never run, it can hang, OOM, or does something negative to other tests.\n\n\n\nI'll put up another report soon. I probably won't do another one until I have tackled the above flakey rating issues, hoping that's just a couple to a few weeks at most, but may be wishful. ",
            "author": "Mark Miller",
            "id": "comment-15858889"
        },
        {
            "date": "2017-02-09T02:39:50+0000",
            "content": "I'd also been wondering why the test framework didn't bail on those hangs like I've seen it do many times with ant test. Finally dug it up and found the default when you run a single test is no timeout. I'll add an appropriate timeout. ",
            "author": "Mark Miller",
            "id": "comment-15858902"
        },
        {
            "date": "2017-02-09T14:01:19+0000",
            "content": "Here is the latest report, ran against a commit from yesterday.\n\nI now include up to 3 of the last fail percentage results from previous reports.\n\nhttps://docs.google.com/spreadsheets/d/1N6RxH4Edd7ldRIaVfin0si-uSLGyowQi8-7mcux27S0/edit?usp=sharing ",
            "author": "Mark Miller",
            "id": "comment-15859555"
        },
        {
            "date": "2017-02-09T21:22:47+0000",
            "content": "Just thinking out loud, I wonder if this beasting could be tied into something that instruments the code to automatically dump the stack and all related variables on failure. \n\nMaybe with something like http://byteman.jboss.org/ or - for commercial options - https://www.overops.com/ or http://chrononsystems.com/ \n ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-15860219"
        },
        {
            "date": "2017-02-09T23:13:18+0000",
            "content": "I suppose it depends on the cost of integrating and maintaining it vs how much the information it provides is consumed or useful. I think of things like clover that a lot of effort and time was spent on in the past, but who is looking at clover coverage? I'd still prefer to have test coverage reports, but again, usually I'll just generate that on demand. Often I won't even look at the logs for beast fails initially. I will move to the latest code, beast out the latest fails with the latest code, etc. Usually beast fails are very replicable (beast longer!), and running 8-12 in parallel allows you blast out a few hundred runs on a test in no time (one test, no time, 900 tests, not so much). For example, a couple tests hung in my first report and couple had RAM issues. I didn't dig in the data much first though, I just reproduced with YourKit attached to see what was up and addressed it. ",
            "author": "Mark Miller",
            "id": "comment-15860371"
        },
        {
            "date": "2017-02-10T18:04:56+0000",
            "content": "Interesting that PeerSyncReplicationTest is rock-solid for you, It fails quite often to me (and seems like also in Jenkins) ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15861609"
        },
        {
            "date": "2017-02-10T18:19:30+0000",
            "content": "It's what I mention above. Surviving 30 runs is an arbitrary initial bar. If that test has low resource env issues, fails will will pop up over time and longer beast runs will draw out its true stability.\n\nThis will not match Jenkins or everyone local environments, but that is not really the point either. I promise if a test is truly flakey, I will draw it out over time. These others tests fail often even in good conditions and short beasting and will need attention first.\n\nA lot of these tests that pass 30 runs even often will have 1 out of 60 or 1 out of 100 fails or 1 out of 200 fails that can be much more common under certain conditions. ",
            "author": "Mark Miller",
            "id": "comment-15861628"
        },
        {
            "date": "2017-02-10T18:52:21+0000",
            "content": "Back to my point that devs and Jenkins will play an very important role in testing regardless of the progress made on this front.\n\nPlease keep reporting tests that you know fail and are not yet popping out in these reports. That is two I will make sure have JIRA issues and I can quickly and easily beast them a few hundred times and report the results.\n\nAs tests are flagged, special attention can produce much more likely fails. Simply adding many more iterations for a test is the great hammer but you can also look at running even more in parallel or creating other fake load. Some tests are not very aggressive competition with themselves even at 10 in parallel.\n\nI have plenty of experience pulling out failures from single tests, plenty of knobs to twist, this is just about getting a list of those tests to focus on and naming names.\n\nSo if your favorite flakey test has not made the report yet, please report it here and I'll give it some special attention. ",
            "author": "Mark Miller",
            "id": "comment-15861677"
        },
        {
            "date": "2017-02-15T19:37:43+0000",
            "content": "Here is the latest report. I now include the average fail % of all tracked report runs and started tagging tests with JIRA ids.\n\n2/14/2017 https://docs.google.com/spreadsheets/d/1eZ9_ds_0XyqsKKp8xkmESrcMZRP85jTxSKkNwgtcUn0/edit?usp=sharing\n\n(PDF attached to issue) ",
            "author": "Mark Miller",
            "id": "comment-15868446"
        },
        {
            "date": "2017-02-16T16:47:22+0000",
            "content": "Mark:\n\nFirst of all, really appreciate the work you're doing here. I hope to address some of the tests I'm familiar with, honest. Real Soon Now.\n\nWould it be convenient for you to publicly share the folder these reports go into so I could bookmark that?\n\nErick ",
            "author": "Erick Erickson",
            "id": "comment-15870265"
        },
        {
            "date": "2017-02-17T16:10:01+0000",
            "content": "Would it be convenient for you to publicly share the folder these reports go into so I could bookmark that?\n\nhttps://drive.google.com/drive/folders/0ByYyjsrbz7-qa2dOaU1UZDdRVzg?usp=sharing ",
            "author": "Mark Miller",
            "id": "comment-15872034"
        },
        {
            "date": "2017-02-19T18:11:09+0000",
            "content": "Here is a special 3 day weekend edition, 100 iterations, 12 at a time instead of 10, trying to draw out more tests: https://docs.google.com/spreadsheets/d/1LEPvXbsoHtKfIcZCJZ3_P6OHp7S5g2HP2OJgU6B2sAg/edit?usp=sharing ",
            "author": "Mark Miller",
            "id": "comment-15873781"
        },
        {
            "date": "2017-02-20T04:38:36+0000",
            "content": "Here are some notes and color for the last test report: https://medium.com/@heismark/solr-test-report-results-notes-02-17-2017-3fd66db1adeb#.gity816cj ",
            "author": "Mark Miller",
            "id": "comment-15874022"
        },
        {
            "date": "2017-03-08T04:53:48+0000",
            "content": "I've got a few issue to look into, but when I'm done I'll run a new report and work on removing any tests failing over 5% of the time. ",
            "author": "Mark Miller",
            "id": "comment-15900701"
        },
        {
            "date": "2017-03-10T15:05:32+0000",
            "content": "If graphs can be generated showing the time it takes for test runs (excluding those that take two hours and hit the timeout), it could serve as a minimal benchmark.  Perhaps SOLR-10130 might not have slipped through the cracks.  A full-fledged benchmark (like the one McCandless does for Lucene) would be best, but graphing times for test runs could serve as a stopgap. ",
            "author": "Shawn Heisey",
            "id": "comment-15905210"
        },
        {
            "date": "2017-03-13T10:10:57+0000",
            "content": "work on removing any tests failing over 5% of the time.\n\n+1. This would result in a much more stable build, and might force us all to start tackling the important disabled tests more seriously. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15907112"
        },
        {
            "date": "2017-03-14T05:38:17+0000",
            "content": "I've recorded a talk on this topic that also demo's creating a test report a bit: https://youtu.be/A2VXU-JVoGY ",
            "author": "Mark Miller",
            "id": "comment-15923605"
        },
        {
            "date": "2017-03-17T17:16:51+0000",
            "content": "I'm a little behind on my latest run because I want to look into a test or two that hangs recently first (a hang that the test suite timeout can't kill can make a test run take much much longer unless I notice it fast and I'm not usually monitoring over hours). I'll generate a new report by Monday though. ",
            "author": "Mark Miller",
            "id": "comment-15930325"
        },
        {
            "date": "2017-06-30T14:29:30+0000",
            "content": "I actually bailed on spending more time with report generation for a bit. The process was still a bit too cumbersome - it really needs to be one command to kick off and then everything else is automatic so that it can be run regularly with ease. I finally came up with a plan to automate from test running to table generation and publishing, so I have spent the time instead finishing up full automation. I still have a bit to do, but I'll be done soon and then will run a report on a regular schedule.\n\nI've also spent a little time planning out using Docker for parallel test runs instead of the built in project support. This will enable the possibility of supporting other projects and there are some nice benefits in truly isolating parallel test runs. ",
            "author": "Mark Miller",
            "id": "comment-16070191"
        },
        {
            "date": "2017-06-30T17:57:28+0000",
            "content": "As part of fully automating everything, I've been experimented with sending results to bitballoon rather than cut and pasting into Google sheets. It's dead simple to automate and a nicer experience I think. Here is a demo of results http://solr-tests.bitballoon.com ",
            "author": "Mark Miller",
            "id": "comment-16070480"
        },
        {
            "date": "2017-06-30T18:00:34+0000",
            "content": "Sweet! ",
            "author": "Erick Erickson",
            "id": "comment-16070484"
        },
        {
            "date": "2017-06-30T18:27:45+0000",
            "content": "This is looking really good! ",
            "author": "Anshum Gupta",
            "id": "comment-16070530"
        },
        {
            "date": "2017-08-09T04:14:31+0000",
            "content": "Okay, I'm pretty much ready here. I have a generic project called BeastIt that can generate a report for pretty much anything that runs on linux, has test files and allows launching a single test via command line. I'm going to resolve this issue once I post a new report and then I'll start regularly generating test reports now that it's just a command line call. ",
            "author": "Mark Miller",
            "id": "comment-16119386"
        },
        {
            "date": "2017-08-09T06:46:57+0000",
            "content": "Mark Miller do you intend to open source BeastIt ? ",
            "author": "Anshum Gupta",
            "id": "comment-16119489"
        },
        {
            "date": "2017-08-09T08:43:54+0000",
            "content": "Yeah, I'll move it to a public repo at some point.\n\nFirst report is done, they will show up here: http://apache-solr.bitballoon.com/\n\nOne thing to note is that SharedFSAutoReplicaFailoverTest looks broken. That may be the same on the 7.0 release branch. One of the things I'm looking forward to with this is some more visibility on nightlies - too easy to break them and not care or notice as it is. ",
            "author": "Mark Miller",
            "id": "comment-16119585"
        },
        {
            "date": "2017-08-09T13:30:58+0000",
            "content": "Mark Miller - This is really great, thank you.\n\nI have one question, out of curiosity: Why do a few tests show up as failing more than 100% of the time? ",
            "author": "Cassandra Targett",
            "id": "comment-16119899"
        },
        {
            "date": "2017-08-09T14:13:03+0000",
            "content": "Those are special codes to order and identify tests with annotations.\n\nSo if a test is ignored, it's not run at all and gets a 122 or whatever. If it's @BadApple and fails 100%, it gets a 112, if it's @AwaitFix and fails 100% it gets a 113. So those 100% fails are basically expected. If it is 100%, it's a test that won't pass and doesn't have one of these annotations, so really bad. ",
            "author": "Mark Miller",
            "id": "comment-16119959"
        },
        {
            "date": "2017-08-09T15:05:03+0000",
            "content": "This is excellent, thanks for all your hard work here! ",
            "author": "Erick Erickson",
            "id": "comment-16120050"
        },
        {
            "date": "2017-08-09T15:24:17+0000",
            "content": "Thanks! It actually ended up being a ton of work. It wasn't so bad just to stitch something together for Solr with me to fill in gaps, but to make it generic for any project using docker, to allow it to have tests (docker within docker!), to allow you to point it at 10 freshly provisioned machines with no setup on your part, to make it easy to debug and add new project support easily, etc, was actually many, many, many hours of effort. Still some polish and minor things to do, but very happy it's ready to start pushing out reports regularly now. ",
            "author": "Mark Miller",
            "id": "comment-16120074"
        },
        {
            "date": "2018-08-06T15:59:46+0000",
            "content": "Hi Mark Miller, the last report was in April. Is this still something you intend to publish and/or publish the code? ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16570398"
        },
        {
            "date": "2018-08-06T17:45:19+0000",
            "content": "I don\u2019t own the code and had not had a chance to open source it before changing jobs, so remains to be seen what will happen. ",
            "author": "Mark Miller",
            "id": "comment-16570539"
        }
    ]
}