{
    "id": "LUCENE-6151",
    "title": "Remove Java 7 close() hack in OutputStreamIndexOutput",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "6.0",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Task"
    },
    "description": "In OutputStreamIndexOutput we have the following hack:\n\n\n  @Override\n  public void close() throws IOException {\n    try (final OutputStream o = os) {\n      // We want to make sure that os.flush() was running before close:\n      // BufferedOutputStream may ignore IOExceptions while flushing on close().\n      // TODO: this is no longer an issue in Java 8:\n      // http://hg.openjdk.java.net/jdk8/tl/jdk/rev/759aa847dcaf\n      o.flush();\n    }\n  }\n\n\n\nAs we are on Java 8 already in trunk, we can remove this hack. The bug was fixed in Java 8, BufferedOutputStream / FilterOutputStream always calls flush() and close(), although an error happened!",
    "attachments": {
        "LUCENE-6151.patch": "https://issues.apache.org/jira/secure/attachment/12689686/LUCENE-6151.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14262175",
            "author": "Uwe Schindler",
            "date": "2014-12-31T13:46:32+0000",
            "content": "Patch. "
        },
        {
            "id": "comment-14262176",
            "author": "Robert Muir",
            "date": "2014-12-31T13:47:50+0000",
            "content": "Why are we removing this? I think java 8 is impacted too! "
        },
        {
            "id": "comment-14262179",
            "author": "Robert Muir",
            "date": "2014-12-31T13:50:33+0000",
            "content": "Please look at this one too: https://bugs.openjdk.java.net/browse/JDK-8054565\n\nI think the hack should be fixed in the same way as this bug describes for branch_5x at least? "
        },
        {
            "id": "comment-14262180",
            "author": "Uwe Schindler",
            "date": "2014-12-31T13:50:49+0000",
            "content": "Java 8 has fixed this bug (see the comment: \"TODO: this is no longer an issue in Java 8\"): http://hg.openjdk.java.net/hsx/hotspot-rt/jdk/rev/759aa847dcaf\n\nThe URL was outdated, but its in the source code. At least it does not hurt, so we can keep it as it is... So maybe IBM J9 still has the bug  "
        },
        {
            "id": "comment-14262182",
            "author": "Uwe Schindler",
            "date": "2014-12-31T13:53:35+0000",
            "content": "Please look at this one too: https://bugs.openjdk.java.net/browse/JDK-8054565\n\nAh, I see. This is a sideeffect of the change they did in JDK8. close() is no longer respecting contract (multiple closes not allowed). In fact we have to fix our hack and make sure, flush() is not called if stream was already closed. "
        },
        {
            "id": "comment-14262183",
            "author": "Robert Muir",
            "date": "2014-12-31T13:54:58+0000",
            "content": "The situation gets worse if the underlying output gets closed-by-interrupt. But maybe thats unavoidable... this is a mess. "
        },
        {
            "id": "comment-14262193",
            "author": "Robert Muir",
            "date": "2014-12-31T14:05:25+0000",
            "content": "Can we update the link in our code to the bug impacted? https://bugs.openjdk.java.net/browse/JDK-7015589\nI was surprised regarding priority... can't this cause data loss?\n\nAnyway, i dont know what we should do. In all cases there will be bugs. But the lesser evil to me is to bogusly throw an exception on close, rather than silently ignore an important one. "
        },
        {
            "id": "comment-14262199",
            "author": "Uwe Schindler",
            "date": "2014-12-31T14:21:31+0000",
            "content": "We should not fix this, the hack does not hurt - so better keep it. I will open another issue to fix the double-close issue. "
        }
    ]
}