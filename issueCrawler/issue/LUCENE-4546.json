{
    "id": "LUCENE-4546",
    "title": "SorterTemplate.quicksort incorrect",
    "details": {
        "components": [
            "core/other"
        ],
        "fix_versions": [
            "3.6.1",
            "4.0",
            "4.1"
        ],
        "affect_versions": "3.6.1,                                            4.0,                                            4.1",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "On trying to use the very useful o.a.l.utils.SorterTemplate, I stumbled upon inconsistent sorting behaviour, of course, only a randomized test caught this\n\nBecause SorterTemplate.quicksort is used in several places in the code (directly BytesRefList, ArrayUtil, BytesRefHash, CollectionUtil and transitively index and search), I'm a bit puzzled that this either hasn't been caught by another higher-level test or that neither my test nor my understanding of an insufficiency in the code is valid\nIf the former holds and given that the same code is released in 3.6 and 4.0, this might even be a more critical issue requiring a higher priority than 'major'.\nSo, can a second pair of eyes please have a timely look at the attached test and patch?\n\nBasically the current quicksort implementation seems to assume that luckily always the median is chosen as pivot element by grabbing the mid element, not handling the case where the initially chosen pivot ends up not in the middle. Hope this and the test helps to understand the issue.\n\nReproducible, currently failing test and a patch attached.",
    "attachments": {
        "TestSorterTemplate.java": "https://issues.apache.org/jira/secure/attachment/12552471/TestSorterTemplate.java",
        "SorterTemplate.java.patch": "https://issues.apache.org/jira/secure/attachment/12552472/SorterTemplate.java.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-11-07T14:31:43+0000",
            "content": "Test and patch file now attached. ",
            "author": "Stefan Pohl",
            "id": "comment-13492383"
        },
        {
            "date": "2012-11-07T15:59:18+0000",
            "content": "Hi,\nI think the problem is your test case:\nThe SorterTemplate in your test does not handle the pivot value correctly - The setPivot() and comparePivot() methods get the index to compare with, but setPivot must store the actual value of the pivot, not the index of the pivot. Your code just stores the pivot index. You can fix this by correctly implementing setPivot: this.pivot = x[i] and implement comparePivot accordingly.\n\nSee ArrayUtil for an example. ",
            "author": "Uwe Schindler",
            "id": "comment-13492445"
        },
        {
            "date": "2012-11-07T16:02:14+0000",
            "content": "By the way we have a random test (TestArrayUtil) that does exactly the same, but the tested ArrayUtil handles the pivot value correctly, so it works correct. If you use your failing example array and sort it with ArrayUtil it passes. ",
            "author": "Uwe Schindler",
            "id": "comment-13492450"
        },
        {
            "date": "2012-11-07T16:17:29+0000",
            "content": "Attached the corrected testcase, which passes.\n\nBTW: Your SorterTemplate implementation fails with with mergeSort completely  (this was incorrect, mergeSort does not use the pivot methods) ",
            "author": "Uwe Schindler",
            "id": "comment-13492464"
        },
        {
            "date": "2012-11-07T16:28:49+0000",
            "content": "Thanks for the clarification, Uwe!\n\nOut of curiosity and for reference, are there any reasons for the abstraction having to overwrite setPivot/comparePivot? Using the implementation in my patch would actually allow to get rid of having to overwrite these methods at all, possibly being faster due to removal of some calls depending on JVM optimization and possibly being slower due to a few more swaps and branches in the code. Pure speculation. ",
            "author": "Stefan Pohl",
            "id": "comment-13492480"
        },
        {
            "date": "2012-11-07T21:32:26+0000",
            "content": "Hi Stefan,\nit is some time ago when I worked on SorterTemplate, so I don't have all the facts in mind. There are different implementations of QuickSort available, also those working without any pivot (like yours). But as far as I remember, the performance tests showed, that the additional swaps and compares added some slowdown (depending on the order of input data), so the explicit pivot methods helped. The SorterTemplate quicksort implementation is also the one that was used in Lucene from the beginning, so I did not want to change the algorithm in a minor release. We could add some new performance tests with your implementation and compare the speed, but I think, e.g. CollectionUtil, which uses Collections.swap() would get much slower by this.\n\nI agree, the class is very nice for sorting of non-array data, but it is currently marked as @lucene.internal, so the usability for non-lucene code was never thought of, performance was the only driving force  But I checked the javadocs, it is clearly documented that setPivot has to store the value of slot i for later comparison with comparePivot(j). ",
            "author": "Uwe Schindler",
            "id": "comment-13492720"
        }
    ]
}