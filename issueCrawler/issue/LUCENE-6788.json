{
    "id": "LUCENE-6788",
    "title": "Mishandling of Integer.MIN_VALUE in FuzzySet leads to AssertionError",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "4.10.4,                                            6.0",
        "components": [
            "core/index"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "Reindexing some data in the DataStax Enterprise Search product (which uses Solr) led to these stack traces:\n\nERROR Lucene Merge Thread #13430 2015-09-08 11:14:36,582 CassandraDaemon.java (line 258) Exception in thread ThreadLucene Merge Thread #13430,6,main\norg.apache.lucene.index.MergePolicy$MergeException: java.lang.AssertionError\n        at org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:545)\n        at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:518)\nCaused by: java.lang.AssertionError\n        at org.apache.lucene.codecs.bloom.FuzzySet.mayContainValue(FuzzySet.java:216)\n        at org.apache.lucene.codecs.bloom.FuzzySet.contains(FuzzySet.java:165)\n        at org.apache.lucene.codecs.bloom.BloomFilteringPostingsFormat$BloomFilteredFieldsProducer$BloomFilteredTermsEnum.seekExact(BloomFilteringPostingsFormat.java:351)\n        at org.apache.lucene.index.BufferedUpdatesStream.applyTermDeletes(BufferedUpdatesStream.java:414)\n        at org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(BufferedUpdatesStream.java:283)\n        at org.apache.lucene.index.IndexWriter._mergeInit(IndexWriter.java:3838)\n        at org.apache.lucene.index.IndexWriter.mergeInit(IndexWriter.java:3799)\n        at org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3651)\n        at org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:405)\n        at org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:482)\n\nIn tracking down the cause of the stack trace, I noticed this:\nhttps://github.com/apache/lucene-solr/blob/trunk/lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java#L164\n\nIt is possible for the Murmur2 hash to return Integer.MIN_VALUE (e.g. when hashing \"WeH44wlbCK\").  Multiplying Integer.MIN_VALUE by -1 returns Integer.MIN_VALUE again, so the \"positiveHash >= 0\" assertion at line 217 fails.\n\nWe could special-case Integer.MIN_VALUE, map it to 42 or some other magic number... since the same \"* -1\" logic appears on line 236 perhaps it should be part of the hash function?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14736443",
            "author": "Adrien Grand",
            "date": "2015-09-09T08:29:19+0000",
            "content": "Hmm actually it looks to me that having a positive value is not necessary as the only thing we are doing with the result of the hash is to and it with the bloom size, which would work fine with a negative number too. "
        },
        {
            "id": "comment-14737126",
            "author": "Robert Tarrall",
            "date": "2015-09-09T16:22:41+0000",
            "content": "After sleeping on it... if we need a positive value, \"hash = hash & Integer.MAX_VALUE\" would be the correct way to force it positive, rather than using a magic number.\n\nThat said, yeah, I'm not able to follow the logic well enough to know whether it needs to be positive, or even an integer.  Overall it seems like using all 32 bits available from the hashing function would be a win. "
        }
    ]
}