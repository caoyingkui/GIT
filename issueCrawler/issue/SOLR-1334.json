{
    "id": "SOLR-1334",
    "title": "SortableXXXField could use native FieldCache for sorting",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "When looking through the FieldTypes (esp. new Trie code), I found out that field types using org.apache.solr.util.NumberUtils use String sorting. As SortField can get a FieldCache Parser since LUCENE-1478, NumberUtils could supply FieldCache.Parser singletons (serializable singletons!) for the SortableXXXField types, and the SortField instances could use these parsers instead of STRING only SortFields.\n\nThe same parsers could be used to create ValueSources for these types.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12739205",
            "date": "2009-08-04T22:10:07+0000",
            "content": "Yeah - I decided against upgrading the Sortable* field types because it wouldn't be 100% back compatible, and we have the Trie* fields now anyway.  The issue has to do with missing values - if you use native FieldCache entries, you can't tell when a document had a value or not and that breaks some stuff like StatisticsComponent, and SortMissingLastComparator. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12739371",
            "date": "2009-08-05T08:38:48+0000",
            "content": "Ok, so it should stay as it is.\n\nThe problem with NULL values in the FieldCache is a pain, I had this problem also in FieldCacheRangeFilter. Maybe in the complete overhaul task there should be some OpenBitSet/DocIdSet in parallel to the native arrays, that marks all valid values. E.g. it could be handled like a normal cache for a specific field and could be retrieved by FieldCache.getValidValues() or something like that. The bitset is build parallel to the uninversion. If the field name is the same, the valid values are also the same (not related to data type).\n\nWhat do you think? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12739453",
            "date": "2009-08-05T12:27:48+0000",
            "content": "Yup - that's what I had in mind... a DocIdSet that matches documents with a value. "
        }
    ]
}