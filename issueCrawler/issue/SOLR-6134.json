{
    "id": "SOLR-6134",
    "title": "MapReduce GoLive code improvements",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "contrib - MapReduce"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "I looked at the GoLive.java source quite a bit and found myself editing the source to make it clearer.  It wasn't hard to understand before but I felt it could be better.  Furthermore, when not in SolrCloud mode, the commit messages are now submitted asynchronously using the same thread pool used for merging.\n\nThis refactoring does away with the inner class \"Result\", the CompletionService, and any keeping track of Future's/Result's in collections and looping over them.  Fundamentally the code never cared about the result; it just wanted to know if it all worked or not.  This refactoring uses Java's \"Phaser\" concurrency utility which may seem advanced (especially with the cool name  but I find it quite understandable how to use, and is very flexible. I added an inner class implementing Runnable to avoid some duplication across the merge and commit phases.\n\nThe tests pass but I confess to not having used it for real.  I certainly don't feel comfortable committing this until someone does try it; especially try and break it .",
    "attachments": {
        "SOLR-6134_GoLive.patch": "https://issues.apache.org/jira/secure/attachment/12648193/SOLR-6134_GoLive.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-14018057",
            "date": "2014-06-04T19:28:50+0000",
            "content": "One small changed needed to satisfy \"ant precommit\" is to use a non-default ThreadFactory, such as by doing this:\n\n    final ExecutorService executor = Executors.newFixedThreadPool(options.goLiveThreads,\n        new DefaultSolrThreadFactory(\"goLive\"));\n\n "
        }
    ]
}