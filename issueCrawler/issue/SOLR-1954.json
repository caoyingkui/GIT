{
    "id": "SOLR-1954",
    "title": "Highlighter component should expose snippet character offsets and the score.",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "highlighter"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The Highlighter Component does not currently expose the snippet character offsets nor the score.  There is a TODO in DefaultSolrHighlighter indicating the intention to add this eventually.  This information is needed when doing highlighting on external content.  The data is there so its pretty easy to output it in some way.  The challenge is deciding on the output and its ramifications on backwards compatibility.  The current highlighter component response structure doesn't lend itself to adding any new data, unfortunately.  I wish the original implementer had some foresight.  Unfortunately all the highlighting tests assume this structure.  Here is a snippet of the current response structure in Solr's sample data searching for \"sdram\" for reference:\n\n<lst name=\"highlighting\">\n <lst name=\"VS1GB400C3\">\n  <arr name=\"text\">\n\t<str>CORSAIR ValueSelect 1GB 184-Pin DDR &lt;em&gt;SDRAM&lt;/em&gt; Unbuffered DDR 400 (PC 3200) System Memory - Retail</str>\n\n  </arr>\n </lst>\n</lst>\n\n\n\nPerhaps as a little hack, we introduce a pseudo field called text_startCharOffset which is the concatenation of the matching field and \"_startCharOffset\".  This would be an array of ints.  Likewise, there would be another array for endCharOffset and score.\n\nThoughts?",
    "attachments": {
        "SOLR-1954_start_and_end_offsets.patch": "https://issues.apache.org/jira/secure/attachment/12447258/SOLR-1954_start_and_end_offsets.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-12879451",
            "date": "2010-06-16T18:51:03+0000",
            "content": "Implementation for the default highlighter.  Includes a basic test. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12879580",
            "date": "2010-06-16T23:31:25+0000",
            "content": "if the structure is poor and hard to add additional metadata to which would be beneficial to new users let's change it\n\nAs long as there is an option people can turn on to force the legacy behavior there's nothing wrong with that.\n\nIn it's simplest form we can just add a new Highlighting Component (with a different class name) that is registered by default as the component \"highlight\" and document in CHANGES.txt that if people need/want the old one they should modify their solrconfig.xml to register it explicitly .\n\nalternately we can keep using hte existing class, and modify it so that it changes it's behavior based on some init param, ditto previous comments about default behavior and CHANGES.txt\n\n(back compat should be easy on upgrade, but i'd rather tell existing users \"add this one line to your config if you really need the exact same response structure instead of this new better structure\" then tell new and existing users \"this is the really klunky hoop you have to jump through to make sense of all this hot new data we are returning\") "
        },
        {
            "author": "David Smiley",
            "id": "comment-12880063",
            "date": "2010-06-18T03:55:56+0000",
            "content": "I think a different component is overkill for such a small change. I agree it should be toggled with a parameter.\n\nSince the majority of users don't care about this extra metadata, perhaps the existing structure should be retained for when it is not asked for.  Nobody would have to change, not even the tests.  No Solr clients would have to care, necessarily.  And when it is asked for (a rare need), the structure would then change to accommodate it.  This would brake any client logic expecting to find the existing snippet where it usually is because it wouldn't be there.  If this is undesirable or unacceptable, then there's the field suffix method that I describe in this issue and which is implemented in the patch.  The only danger is that a client should not assume that that all listed fields are arrays of strings since some will be arrays of ints or floats.  My patch includes such a modification for SolrJ. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12880152",
            "date": "2010-06-18T10:14:34+0000",
            "content": "The spellcheck component changes format if you ask for extendedResults.  I find that painful.  Let's not repeat that here.\n\nOne option is to put the additional information into a parallel data structure keyed by uniqueKey, just like the current highlighting data structure.  So rather than within it, beside it.  Make sense?   I know, I know... we've been talking about moving away from these parallel keyed data structures, but it's really not difficult for a client to deal with. "
        },
        {
            "author": "David Smiley",
            "id": "comment-12880210",
            "date": "2010-06-18T14:25:24+0000",
            "content": "Erik, I think you're suggesting what I suggested.  So we'd have:\n\n\n  <arr name=\"text\">\n\t<str>CORSAIR ValueSelect 1GB 184-Pin DDR &lt;em&gt;SDRAM&lt;/em&gt; Unbuffered DDR 400 (PC 3200) System Memory - Retail</str>\n  </arr>\n  <arr name=\"text_startPos\">\n        <int>5</int>\n  </arr>\n\n\n\nThe leading problem is that clients can no longer expect that every child of the parent parent element here (which identifies the document matched) is necessarily an array of strings, because it could be an array of ints or floats.  We're also overloading the field name namespace with suffixes thereby preventing this working if a fieldname actually ends with _startPos.  This strikes me as no big deal. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12880214",
            "date": "2010-06-18T14:48:24+0000",
            "content": "No, we're not talking about the same thing.   Here's what I'm suggesting:\n\n\n{\n  'responseHeader'=>{\n    'status'=>0,\n    'QTime'=>15},\n  'response'=>{'numFound'=>3,'start'=>0,'maxScore'=>0.10558263,'docs'=>[\n      {\n        'id'=>'IW-02',\n        'name'=>'iPod & iPod Mini USB 2.0 Cable',\n        'manu'=>'Belkin',\n        'weight'=>2.0,\n        'price'=>11.5,\n        'popularity'=>1,\n        'inStock'=>false,\n        'store_0_d'=>37.7752,\n        'store_1_d'=>-122.4232,\n        'store'=>'37.7752,-122.4232',\n        'manufacturedate_dt'=>'2006-02-14T23:55:59Z',\n        'cat'=>[\n          'electronics',\n          'connector'],\n        'features'=>[\n          'car power adapter for iPod, white'],\n        'score'=>0.10558263}]\n  },\n  'highlighting'=>{\n    'IW-02'=>{\n      'features'=>['car power adapter for <em>iPod</em>, white'],\n      'name'=>['<em>iPod</em> & <em>iPod</em> Mini USB 2.0 Cable']}},\n  'highlighting-extended-info'=>{\n    'IW-02'=>{\n      'text_startPos'=>[5]\n  }\n}\n\n\n\nThat way the highlighting section remains untouched, with extra stuff in a 'highlighting-extended-info' (let's use a shorter name though) section as a direct child of the root response, just like 'highlighting' is.   "
        },
        {
            "author": "David Smiley",
            "id": "comment-12880218",
            "date": "2010-06-18T14:54:37+0000",
            "content": "This seems like a good idea to me.  How about naming it \"highlighting-extended\"  ?  I don't think the length of this name should matter. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12880220",
            "date": "2010-06-18T14:58:54+0000",
            "content": "+1 to highlighting-extended "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12880240",
            "date": "2010-06-18T16:29:45+0000",
            "content": "The problem with offsets is.... what are the units?  utf8 bytes, utf16 units, real characters?\n\nWalter Underwood proposed a good idea of just alternating segments of text for highlighting.  That would also avoid the broken style of highlighting we have now (it's ambiguous since a real <em> could be embedded in the text.\n\nRather than adding more outer containers like 'highlighting-extended-info', we could change what \"highlighting\" contains based on a parameter (and perhaps even change the default if this is targeted toward trunk). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12880338",
            "date": "2010-06-18T21:48:49+0000",
            "content": "That way the highlighting section remains untouched, with extra stuff in a 'highlighting-extended-info'\n\nthat really seems painful \u2013 i think it would be a lot better to just come up with what the \"new\" structure should look like that's more flexible, populated it with more/less data based on what param the user asks for (ie: hl.positions=true) and then make this new structure the default for all future versions of solr.  Folks who don't want the new types of metadata, and don't want to change their clients to understand the new structure can add some param to their defaults to revert the format.  this is how we've dealt with several other changes in the past where we want the \"default\" behavior to be differnet for new users, but still support the old behavior for legacy users\n\n(spellcheck.extendedResults may seem painful because it changes results \u2013 but that's because it was never intended for you to toggle it on differnet requsts \u2013 it's expected that you'll set it once and forget it \u2013 the real problem is that it probably should have been made the default)\n\nThe problem with offsets is.... what are the units? utf8 bytes, utf16 units, real characters? \n\n1) isn't highlighting fairly fundamentally character based?  would you ever want/expect a highlight position to be based on bytes that break up a logical character?\n2) being largely ignorant of highlighting, i would say the units should be in whatever the Highlighter currently use when indexing into string values \u2013 my understanidng is that it's the same as the start/end offsets in tokens, so if they are char then it's char, if they are bytes, then it's bytes.\n\nWalter Underwood proposed a good idea of just alternating segments of text for highlighting.\n\nI like that idea, and if structured properly it can still include the \"score\" for each matching chunk as metadata,  but some clients are still going to prefer offset metadata \u2013 in particular the situation where i've got a 20MB text file in external storage and i want display the entire document with matches highlighted.  returning alternating strings isn't going to really going to help me unless they aren't truncated - at which point you are returning the entire 20MB doc (broken up in a bunch of distinct strings) instead of just returning a bunch of numbers i can use to find the corrisponding points in my local copy of the file. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12880340",
            "date": "2010-06-18T21:57:30+0000",
            "content": "\n1) isn't highlighting fairly fundamentally character based? would you ever want/expect a highlight position to be based on bytes that break up a logical character?\n2) being largely ignorant of highlighting, i would say the units should be in whatever the Highlighter currently use when indexing into string values - my understanidng is that it's the same as the start/end offsets in tokens, so if they are char then it's char, if they are bytes, then it's bytes.\n\nNope, a 'character' in java is utf-16, it cannot even hold a full unicode code point. \nIn other programming languages that might be solr clients, characters and strings might be utf-8, or utf-32.\nSo if offsets are to be returned, its necessary to specify what 'unit' they are measured in.\nOtherwise, an offset is as useless as saying my house is '4' away from yours... 4 what?! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12880350",
            "date": "2010-06-18T22:43:36+0000",
            "content": "\n1) isn't highlighting fairly fundamentally character based? would you ever want/expect a highlight position to be based on bytes that break up a logical character?\n2) being largely ignorant of highlighting, i would say the units should be in whatever the Highlighter currently use when indexing into string values - my understanidng is that it's the same as the start/end offsets in tokens, so if they are char then it's char, if they are bytes, then it's bytes.\n\nOn IRC rmuir convinced me that the world is not this simple ... char offsets makes sense when dealing just with the java API, but once you send the data over the wire to a remote client, it might be using any arbitrary charset in memory, so the only possible unit you can use to convey position information that can be ignorant of the remote client is bytes. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12880353",
            "date": "2010-06-18T22:55:04+0000",
            "content": "whoops ... didn't notice rmuir had already commented. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12880360",
            "date": "2010-06-18T23:10:35+0000",
            "content": "so the only possible unit you can use to convey position information that can be ignorant of the remote client is bytes.\n\nI think bytes are no better, for example:\n\n\ud866\udf05 is 6-bytes in UTF-16, 4-bytes in UTF-8, 2 chars in java.\n\nin other programming languages maybe its 1 char and 4-bytes, in java its 2 chars and 6 bytes.\n\nSo this is why any offset numbers will be problematic, as they will invite bugs in client applications. "
        },
        {
            "author": "David Smiley",
            "id": "comment-12880798",
            "date": "2010-06-21T12:22:47+0000",
            "content": "Character offsets may not be perfect, but bytes are worse.  And without either, there's no feature here to discuss!  Hence lets keep it at UTF-16 character offset as a practical matter. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12880805",
            "date": "2010-06-21T12:42:42+0000",
            "content": "And without either, there's no feature here to discuss! Hence lets keep it at UTF-16 character offset as a practical matter.\n\nI don't necessarily agree. I would like to see, for example, correct php or perl code that consumes these offsets. I argue anyone trying to use utf16 offsets from anything but java will likely have bugs in their client application.\n\nIt would be good to consider alternative ways to implement this without using integer offsets (for example, what yonik proposed) "
        },
        {
            "author": "Jamie Johnson",
            "id": "comment-13066207",
            "date": "2011-07-15T21:10:07+0000",
            "content": "I know this has been awhile, but I had a need for something like this and while I implemented (and added it to SOLR-1397) I figured I'd try this out instead as well.  After applying the patch I got the following response\n\n<lst name=\"highlighting\">\n    <lst name=\"1\">\n        <arr name=\"subject_phonetic\">\n            <str><em>Test</em> subject message</str>\n        </arr>\n        <arr name=\"subject_phonetic_startPos\"><int>0</int></arr>\n        <arr name=\"subject_phonetic_endPos\"><int>29</int></arr>\n    </lst>\n</lst>\n\nseems that the startPos is always 0 and endPos is the length of the field including the highlighting start/end tags.  Is this expected? "
        },
        {
            "author": "David Smiley",
            "id": "comment-13067035",
            "date": "2011-07-18T13:55:42+0000",
            "content": "Jamie; it's been a long time since I've touched this. I am not sure why you see the behavior you see; it is not expected at all. "
        },
        {
            "author": "Fabian Deutsch",
            "id": "comment-13177384",
            "date": "2011-12-29T20:53:16+0000",
            "content": "Good day, is there any progress on this or anything needed to get this patch upstream? "
        }
    ]
}