{
    "id": "SOLR-12632",
    "title": "Completely remove Trie fields",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Trie fields were deprecated in Solr 7.0.  We should remove them completely before we release Solr 8.0.\n\nUnresolved points-related issues: https://jira.apache.org/jira/issues/?jql=project=SOLR+AND+labels=numeric-tries-to-points+AND+resolution=unresolved",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-07T17:36:01+0000",
            "content": "have we yet solved the issue of Trie fields being slower for individual value lookups? ",
            "author": "Erick Erickson",
            "id": "comment-16572026"
        },
        {
            "date": "2018-08-07T18:08:25+0000",
            "content": "have we yet solved the issue of Trie fields being slower for individual value lookups?\n\nI assume you mean Point fields here.\n\nI don't think so, other than the workaround: use a string field for those kinds of lookups.  Is there a JIRA for this? ",
            "author": "Steve Rowe",
            "id": "comment-16572069"
        },
        {
            "date": "2018-08-08T02:09:34+0000",
            "content": "Right, I meant point fields. The idea of using strings for numerics just sits wrong, but not wrong enough to do anything about it personally  ",
            "author": "Erick Erickson",
            "id": "comment-16572568"
        },
        {
            "date": "2018-08-08T20:19:27+0000",
            "content": "other than the workaround: use a string field for those kinds of lookups. Is there a JIRA for this?\n\nYes \u2013 SOLR-12074 ",
            "author": "David Smiley",
            "id": "comment-16573806"
        },
        {
            "date": "2018-08-08T20:21:13+0000",
            "content": "Is there a JIRA for this?\n\nSOLR-12074 probably. ",
            "author": "Steve Rowe",
            "id": "comment-16573810"
        },
        {
            "date": "2018-11-14T14:55:46+0000",
            "content": "I recall a discussion about this issue among a few committers at Activate in October, where it was proposed that perhaps we should not try to completely remove Trie fields until the issue with the individual lookups (SOLR-11078) can be fixed (possibly with something like SOLR-12074).\n\nAnyone else recall that conversation, and possibly want to add any additional thoughts or agreement? If we agree as a community about punting this, we could unmark this as a blocker for 8.0. ",
            "author": "Cassandra Targett",
            "id": "comment-16686630"
        },
        {
            "date": "2018-11-14T15:00:35+0000",
            "content": "IMO we should remove old trie stuff for 8.0 wether or not SOLR-12074 happens or not.  SOLR-12074 is a nice-to-have.   ",
            "author": "David Smiley",
            "id": "comment-16686638"
        },
        {
            "date": "2018-11-14T15:13:37+0000",
            "content": "David Smiley But the whole point of keeping Trie fields was because of the performance slowdown for looking up individual terms. If we just remove Trie fields, what's our story on the performance hit? ",
            "author": "Erick Erickson",
            "id": "comment-16686652"
        },
        {
            "date": "2018-11-14T15:16:17+0000",
            "content": "Simple: add a copyField to a StrField and do lookups there.  This isn't \"friendly\" but it's also just an optimization (isn't essential). ",
            "author": "David Smiley",
            "id": "comment-16686656"
        },
        {
            "date": "2018-11-14T15:44:50+0000",
            "content": "Revealing  my ignorance here, but just want to be sure. Adding docValues to a points-based field doesn't penalize sorting/faceting/grouping, right? You can tell I couldn't attend the committer's meeting at Activate.... ",
            "author": "Erick Erickson",
            "id": "comment-16686741"
        },
        {
            "date": "2018-11-14T15:57:21+0000",
            "content": "The performance hit seems more important than exactly when deprecated functionality is removed.\nWe should have a superior single numeric field that is better at both range queries and single value matches before we remove the existing field (trie) that can do both well. ",
            "author": "Yonik Seeley",
            "id": "comment-16686768"
        },
        {
            "date": "2018-11-14T16:10:08+0000",
            "content": "Trie fields are also faster in aggregation functions. So copying to a StrField won't help in those scenarios. I can add some performance numbers to this ticket so we quantify how much faster.\u00a0\n\nAt this time I agree with Yonik that the performance issues outweigh the need to remove deprecated Trie fields.\u00a0\u00a0 ",
            "author": "Joel Bernstein",
            "id": "comment-16686785"
        },
        {
            "date": "2018-11-14T16:33:51+0000",
            "content": "Joel Bernstein can you please explain how \"aggregation functions\" are impacted?  I'm not sure what you mean by that, honestly. ",
            "author": "David Smiley",
            "id": "comment-16686831"
        },
        {
            "date": "2018-11-14T16:34:47+0000",
            "content": "When you sum a point field it is slower then summing a trie field. ",
            "author": "Joel Bernstein",
            "id": "comment-16686832"
        },
        {
            "date": "2018-11-14T16:38:57+0000",
            "content": "Aggregations like that should come from DocValues which is entirely separate from either the Points index or Terms index.  What am I missing? ",
            "author": "David Smiley",
            "id": "comment-16686837"
        },
        {
            "date": "2018-11-14T16:38:57+0000",
            "content": "If docValues are enabled, hopefully current point fields aren't slower for things like statistics.  But I could see them being slower for faceting (which uses single-value lookups for things like refinement, or calculating the domain for a sub-facet) ",
            "author": "Yonik Seeley",
            "id": "comment-16686838"
        },
        {
            "date": "2018-11-14T16:56:12+0000",
            "content": "I've been running queries locally and I was incorrect. This was driven by a very large drop in performance we were seeing in certain JSON facet queries when point fields were involved. But they were involved in two ways:\n\n1) As facet buckets (field facets)\n\n2) In aggregations\n\nI removed the point fields from facet buckets and just used the points in aggregations. The points were actually faster.\u00a0\n\nSo it was #1 which is very, very slow. And in those scenarios the StrField copy does work.\u00a0\n\nSo, I'll remove my objection. ",
            "author": "Joel Bernstein",
            "id": "comment-16686865"
        },
        {
            "date": "2018-11-20T05:09:16+0000",
            "content": "I did some basic benchmarking on my laptop against branch 7_6. Index has 25M documents in a two shard collection.\n\nBoth top_level_pi/one_level_pi have a 1M cardinality.\n\nSolrInputDocument document = new SolrInputDocument();\ndocument.addField(\"id\", x*batchSize+j);\ndocument.addField(\"top_level_pi\", TestUtil.nextInt(r,0, 1000*1000));\ndocument.addField(\"one_level_pi\", TestUtil.nextInt(r,0, 1000*1000));\n\ndocument.addField(\"top_level_ti\", TestUtil.nextInt(r,0, 1000*1000));\ndocument.addField(\"one_level_ti\", TestUtil.nextInt(r,0, 1000*1000));\n\n\n\n\u00a0\n\n<fieldType name=\"tint\" class=\"solr.TrieIntField\" docValues=\"true\" precisionStep=\"8\" positionIncrementGap=\"0\"/>\n<dynamicField name=\"*_ti\"  type=\"tint\"    indexed=\"true\"  stored=\"true\" docValues=\"true\"/>\n<dynamicField name=\"*_pi\"  type=\"pint\"    indexed=\"true\"  stored=\"true\" docValues=\"true\"/>\n\nThere were two types of queries that I ran against : one with counts and one with count and a sum aggregation\n\nThe\u00a0totalRows is 111111\n\nSimple Count\n\n1.\ntime : 38-41s\nfilterCache inserts : 54303\nfacet(gettingstarted,q=\"id:123*\",buckets=\"top_level_pi,one_level_pi\", bucketSorts=\"count(*) desc\", bucketSizeLimit=-1, count(*))\n\n2.\ntime : 6-9s\nfilterCache inserts : 54280\nfacet(gettingstarted,q=\"id:123*\",buckets=\"top_level_ti,one_level_ti\", bucketSorts=\"count(*) desc\", bucketSizeLimit=-1, count(*))\n\n\nUnderlying Facet Query that the stream expression forms\n{\n\u00a0\u00a0 \u00a0\"top_level_ti\": {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"type\": \"terms\",\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"field\": \"top_level_ti\",\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"limit\": 2147483647,\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"sort\": {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"count\": \"desc\"\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0},\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"facet\": {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"one_level_ti\": {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"type\": \"terms\",\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"field\": \"one_level_ti\",\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"limit\": 2147483647,\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"sort\": {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"count\": \"desc\"\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0},\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"facet\": {}\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}\n\u00a0\u00a0 \u00a0}\n\n\n\u00a0\n\nCount + Sum Aggregation\n\n3.\ntime : 110s\nfilterCache inserts : 110044\nfacet(gettingstarted,q=\"id:123*\",buckets=\"top_level_pi,one_level_pi\", bucketSorts=\"count(*) desc\", bucketSizeLimit=-1, count(*), sum(top_level_pi))\n\n4.\ntime : 11-13s\nfilterCache inserts ; 110021\nfacet(gettingstarted,q=\"id:123*\",buckets=\"top_level_ti,one_level_ti\", bucketSorts=\"count(*) desc\", bucketSizeLimit=-1, count(*), sum(top_level_ti))\n\n\nUnderlying Facet Query that the stream expression forms\n{\n\u00a0\u00a0 \u00a0\"top_level_pi\": {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"type\": \"terms\",\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"field\": \"top_level_pi\",\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"limit\": 2147483647,\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"sort\": {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"count\": \"desc\"\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0},\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"facet\": {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"one_level_pi\": {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"type\": \"terms\",\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"field\": \"one_level_pi\",\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"limit\": 2147483647,\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"sort\": {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"count\": \"desc\"\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0},\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"facet\": {\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\"facet_0\": \"sum(top_level_pi)\"\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}\n\u00a0\u00a0 \u00a0\u00a0\u00a0 \u00a0}\n\u00a0\u00a0 \u00a0}\n}\n\n\u00a0\n\nFew observations\n\n\tFor the same query trie is a lot faster than point fields\n\tWhen you add a sum aggregation to the same facet query the time doubles\n\tThe filter cache inserts are exteremly high. For nested facets with high cardinality this will simply nuke the filer cache without much reuse\n\tFor the same queries when I ran without the filter cache, only query 3 was faster by 30-50% the rest were roughly the same time.\n\n\n\nFor reference , I ran the points query with java flight recorder and here's the main stack trace from method profiling\n\norg.apache.lucene.util.bkd.BKDReader$PackedIndexTree.pushLeft(BKDReader.java:410)\norg.apache.lucene.util.bkd.BKDReader.intersect(BKDReader.java:786)\norg.apache.lucene.util.bkd.BKDReader.intersect(BKDReader.java:797)\norg.apache.lucene.util.bkd.BKDReader.intersect(BKDReader.java:787)\norg.apache.lucene.util.bkd.BKDReader.intersect(BKDReader.java:787)\norg.apache.lucene.util.bkd.BKDReader.intersect(BKDReader.java:797)\norg.apache.lucene.util.bkd.BKDReader.intersect(BKDReader.java:787)\norg.apache.lucene.util.bkd.BKDReader.intersect(BKDReader.java:787)\norg.apache.lucene.util.bkd.BKDReader.intersect(BKDReader.java:787)\norg.apache.lucene.util.bkd.BKDReader.intersect(BKDReader.java:797)\norg.apache.lucene.util.bkd.BKDReader.intersect(BKDReader.java:533)\norg.apache.lucene.search.PointRangeQuery$1$4.get(PointRangeQuery.java:299)\norg.apache.lucene.search.PointRangeQuery$1.scorer(PointRangeQuery.java:323)\norg.apache.lucene.search.Weight.bulkScorer(Weight.java:177)\norg.apache.lucene.search.IndexOrDocValuesQuery$1.bulkScorer(IndexOrDocValuesQuery.java:138)\norg.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:667)\norg.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:471)\norg.apache.solr.search.DocSetUtil.createDocSetGeneric(DocSetUtil.java:151)\norg.apache.solr.search.DocSetUtil.createDocSet(DocSetUtil.java:140)\norg.apache.solr.search.SolrIndexSearcher.getDocSetNC(SolrIndexSearcher.java:1178)\norg.apache.solr.search.SolrIndexSearcher.getDocSet(SolrIndexSearcher.java:1213)\norg.apache.solr.search.facet.FacetFieldProcessor.fillBucket(FacetFieldProcessor.java:439)\norg.apache.solr.search.facet.FacetFieldProcessor.findTopSlots(FacetFieldProcessor.java:381)\norg.apache.solr.search.facet.FacetFieldProcessorByHashDV.calcFacets(FacetFieldProcessorByHashDV.java:249)\norg.apache.solr.search.facet.FacetFieldProcessorByHashDV.process(FacetFieldProcessorByHashDV.java:214)\norg.apache.solr.search.facet.FacetRequest.process(FacetRequest.java:368)\norg.apache.solr.search.facet.FacetProcessor.processSubs(FacetProcessor.java:472)\norg.apache.solr.search.facet.FacetProcessor.fillBucket(FacetProcessor.java:429)\norg.apache.solr.search.facet.FacetQueryProcessor.process(FacetQuery.java:64)\norg.apache.solr.search.facet.FacetRequest.process(FacetRequest.java:368)\norg.apache.solr.search.facet.FacetModule.process(FacetModule.java:139)\norg.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:298)\n\n\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16692678"
        }
    ]
}