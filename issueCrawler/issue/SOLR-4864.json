{
    "id": "SOLR-4864",
    "title": "RegexReplaceProcessorFactory should support pattern capture group substitution in replacement string",
    "details": {
        "affect_versions": "4.3",
        "status": "Closed",
        "fix_versions": [
            "4.8",
            "6.0"
        ],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It is unfortunate the the replacement string for RegexReplaceProcessorFactory is a pure, \"quoted\" (escaped) literal and does not support pattern capture group substitution. This processor should be enhanced to support full, standard pattern capture group substitution.\n\nThe test case I used:\n\n\n  <updateRequestProcessorChain name=\"regex-mark-special-words\">\n    <processor class=\"solr.RegexReplaceProcessorFactory\">\n      <str name=\"fieldRegex\">.*</str>\n      <str name=\"pattern\">([^a-zA-Z]|^)(cat|dog|fox)([^a-zA-Z]|$)</str>\n      <str name=\"replacement\">$1&lt;&lt;$2&gt;&gt;$3</str>\n    </processor>\n    <processor class=\"solr.LogUpdateProcessorFactory\" />\n    <processor class=\"solr.RunUpdateProcessorFactory\" />\n  </updateRequestProcessorChain>\n\n\n\nIndexing with this command against the standard Solr example with the above addition to solrconfig:\n\n\n  curl \"http://localhost:8983/solr/update?commit=true&update.chain=regex-mark-special-words\" \\\n  -H 'Content-type:application/json' -d '\n  [{\"id\": \"doc-1\",\n    \"title\": \"Hello World\",\n    \"content\": \"The cat and the dog jumped over the fox.\",\n    \"other_ss\": [\"cat\",\"cat bird\", \"lazy dog\", \"red fox den\"]}]'\n\n\n\nAlas, the resulting document consists of:\n\n\n  \"id\":\"doc-1\",\n  \"title\":[\"Hello World\"],\n  \"content\":[\"The$1<<$2>>$3and the$1<<$2>>$3jumped over the$1<<$2>>$3\"],\n  \"other_ss\":[\"$1<<$2>>$3\",\n    \"$1<<$2>>$3bird\",\n    \"lazy$1<<$2>>$3\",\n    \"red$1<<$2>>$3den\"],\n\n\n\nThe Javadoc for RegexReplaceProcessorFactory uses the exact same terminology of  \"replacement string\", as does Java's Matcher.replaceAll, but clearly the semantics are distinct, with replaceAll supporting pattern capture group substitution for its \"replacement string\", while RegexReplaceProcessorFactory interprets \"replacement string\" as being a literal. At a minimum, the RegexReplaceProcessorFactory Javadoc should explicitly state that the string is a literal that does not support pattern capture group substitution.\n\nThe relevant code in RegexReplaceProcessorFactory#init:\n\n\nreplacement = Matcher.quoteReplacement(replacementParam.toString());\n\n\n\nPossible options for the enhancement:\n\n1. Simply skip the quoteReplacement and fully support pattern capture group substitution with no additional changes. Does have a minor backcompat issue.\n\n2. Add an alternative to \"replacement\", say \"nonQuotedReplacement\" that is not quoted as \"replacement\" is.\n\n3. Add an option, say \"quotedReplacement\" that defaults to \"true\" for backcompat, but can be set to \"false\" to support full replaceAll pattern capture group substitution.",
    "attachments": {
        "SOLR-4864.patch": "https://issues.apache.org/jira/secure/attachment/12638234/SOLR-4864.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13796951",
            "date": "2013-10-16T16:36:38+0000",
            "content": "It was designed for the simple case, but i agree - an option to let you use a more robust capture related replacement string makes sense.\n\nMy vote would probably be for option #3 (although perhaps \"literalReplacement\" would be a less obscure name for non-java people not directly familiar with the Matcher function names).  But option #2 would also work fine (as long as there was good error checking to ensure they didn't specify both types of replacement) "
        },
        {
            "author": "Sunil Srinivasan",
            "id": "comment-13957539",
            "date": "2014-04-02T11:06:48+0000",
            "content": "Here is a patch for the functionality that Hoss/Jack wanted. Please review. I've added the additional tests as part of the testRegexReplace. Please let me know if they need to be separated out.  "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13959042",
            "date": "2014-04-03T18:02:09+0000",
            "content": "Hi Sunil,\n\nPatch looks good, a few comments:\n\n\n\tUnless you're making changes to the import section of .java files, you shouldn't rearrange them or add/subtract whitespace.  You may need to tell your IDE to stop doing this for you.\n\tIn RegexReplaceProcessorFactory.init(), instead of args.removeArg() to get the boolean literalReplacement param value, you should use args.removeBooleanArg(), because users might specify this arg as <str name=\"literalReplacement\">false</str> instead of as a <bool>, resulting in a String-valued object returned by args.removeArg(), and your cast to Boolean would throw an exception.  (NamedList.removeBooleanArg() handles type checking and parsing for you.)\n\tTo test the ability to accept a String-valued boolean param, I recommend adding an <updateRequestProcessorChain> with a <str>-valued literalReplacement  to solrconfig-update-processor-chains.xml, and adding a test for it to FieldMutatingUpdateProcessorTest.testRegexReplace().\n\tI recommend adding new <updateRequestProcessorChain>-s in solrconfig-update-processor-chains.xml, and corresponding tests in FieldMutatingUpdateProcessorTest.testRegexReplace(), that verify that when literalReplacement is true, either explicitly or by default, a text/pattern/replacement combination that would trigger group substitution if literalReplacement were false would not trigger group substitution.\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13959054",
            "date": "2014-04-03T18:15:31+0000",
            "content": "Sunil, one other thing I forgot to mention: you should add an example of using the param to the class javadocs on RegexReplaceProcessorFactory, and also explain how the new param works. "
        },
        {
            "author": "Sunil Srinivasan",
            "id": "comment-13961667",
            "date": "2014-04-07T06:58:30+0000",
            "content": "Thanks Steve for the review\n\nI've made the changes and attached the patch "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13964406",
            "date": "2014-04-09T17:14:54+0000",
            "content": "Thanks Sunil.\n\nThe attached patch moves your javadoc addition to its own paragraph and rewords it a little to be more explicit about what literalReplacement means.\n\nI also removed an unnecessary cast from Object to Boolean for the return value from NamedList.removeBooleanArg(); added a test case for backreference replacement syntax when literalReplacement is not specified and defaults to true; and added a CHANGES.txt entry.\n\nI think it's ready to go.  I'll commit later today. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13964582",
            "date": "2014-04-09T19:31:03+0000",
            "content": "Commit 1586093 from sarowe@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1586093 ]\n\nSOLR-4864: RegexReplaceProcessorFactory should support pattern capture group substitution in replacement string. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13964583",
            "date": "2014-04-09T19:33:37+0000",
            "content": "Commit 1586094 from sarowe@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1586094 ]\n\nSOLR-4864: RegexReplaceProcessorFactory should support pattern capture group substitution in replacement string. (merged trunk r1586093) "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13964586",
            "date": "2014-04-09T19:35:22+0000",
            "content": "Committed to trunk and branch_4x.\n\nThanks Sunil and Jack! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13982615",
            "date": "2014-04-27T23:25:58+0000",
            "content": "Close issue after release of 4.8.0 "
        }
    ]
}