{
    "id": "SOLR-6364",
    "title": "_version_ value too big for javascript clients causing reported _version_ never matching internal _version_ ==> suggested resolution: json should communicate _version_ as string!",
    "details": {
        "affect_versions": "4.9",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "There seems to be a 100 based rounding active in the output/rendition/return of the version field of added documents.  Internally on the solr side however the real number (non-rounded) is effective and introduces conflicts with the optimistic concurrency logic.\n\nApparently this is to be expected in all Javascript clients, since the version numbers used are too big to fit into Javascript Number variables without loss of precision.\n\nHere is what one can do to see this in action - all steps below with \n1/ using the solr4 admin UI on \n    http://localhost:8983/solr/#/mycore/documents\n2/ the request-handler box set to \n    /update?commit=true&versions=true\n3/ by adding the following into the \"documents\"  section on the page:\n\n[1] for create \nUsing:\n\n{ \"id\": \"tst-abcd, \"version\": 1, \"type\": \"test\", \"title\": [\"title\"], \"_version_\": -1 }\n\nResponse:\n\n{  \"responseHeader\": \n{    \"status\": 0,    \"QTime\": 1882  }\n,\n  \"adds\": [    \"tst-abcd\",    1476172747866374100  ]\n}\n\n>> see the returned _version_ is a multiple of 100, always!\n\n\n[2] update\nUsing:\n\n{ \"id\": \"tst-abcd\", \"version\": 2, \"type\": \"test\", \"title\": [\"title update\"], \"_version_\": 1476172747866374100 }\n\nResponse Error:\n{  \"responseHeader\": \n{    \"status\": 409,    \"QTime\": 51  }\n,\n  \"error\": {    \"msg\": \"version conflict for tst-abcd expected=1476172747866374100 actual=1476172747866374144\",\n    \"code\": 409  }}\n\n>> notice how the error-message-string correctly mentions the real actual _version_ that is effective (not rounded to 100)\n\n\n[3] corrected update, using that effective number\n\n{ \"id\": \"tst-abcd\", \"version\": 2, \"type\": \"test\", \"title\": [\"title update\"], \"_version_\": 1476172747866374144 }\n\nResponse:\n\n{  \"responseHeader\": \n{    \"status\": 0,    \"QTime\": 597  }\n,\n  \"adds\": [    \"tst-abcd\",    1476173026894545000  ] }\n\n\n\nOdd at first this behaviour is not shown with curl on the command line...\n\n[1] create\n\n$ curl \"$solrbase/update?commit=true&versions=true\" -H 'Content-type:application/json' -d '[\n{ \"id\": \"tst-1234\", \"version\": 1, \"type\": \"test\", \"title\": [\"title\"], \"_version_\": -1 }\n]'\n\n\nresponse: \n\n{\"responseHeader\":\n{\"status\":0,\"QTime\":587}\n,\"adds\":[\"tst-1234\",1476163269470191616]}\n\n>> number is not rounded, looks good!\n\n[2] update \n\n$ curl \"$solrbase/update?commit=true&versions=true\" -H 'Content-type:application/json' -d '[\n{ \"id\": \"tst-1234\", \"version\": 2, \"type\": \"test\", \"title\": [\"title updated\"], \"_version_\": 1476163269470191616 }\n]'\n\n\nresponse: \n\n{\"responseHeader\":\n{\"status\":0,\"QTime\":512}\n,\"adds\":[\"tst-1234\",1476163320472928256]}\n\n\n\nAll this was pretty much a mistery to me untill I came across this:\n\nhttp://stackoverflow.com/questions/15689790/parse-json-in-javascript-long-numbers-get-rounded\n\n\nThis looks like passing down the too big numbers in the _version_ as strings should avoid the issue. Or use numbers that aren't that big, since apparently: \"The largest number JavaScript can handle without loss of precision is 9007199254740992\"  \u2013 quoted from that stackoverflow page.\n\nThere are more references (below) talking about this being a Javascript limitation rather then a pure json-spec issue, nevertheless... it might be easier to adapt solr to deal with this know Javascript limitation and thus helping out the Javascript clients out there?\n\n\n\thttp://stackoverflow.com/questions/307179/what-is-javascripts-max-int-whats-the-highest-integer-value-a-number-can-go-t\n\thttp://stackoverflow.com/questions/13502398/json-integers-limit-on-size\n\n\n\nIn terms of backwards compatibility I don't see an easy way out for the moment.  \n\n\tclients that expect _version_ to be numeric might not handle the string\n\tin existing deployments it might be hard to reduce all the already existing _version_ to stay undere the limit...\n\n\n\nI still have to investigate into receiving and parsing XML replies from SOLR instead - making sure I keep the returned _version_ info in a Javascript string.  Hoping that might work as a timely (but not as elegant) workaround.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-14093395",
            "date": "2014-08-11T22:00:25+0000",
            "content": "There seems to be a 100 based rounding active in the output/rendition/return of the version field of added documents.\n\nNo such rounding is occurring in solr (which is why you can't reproduce when you hit solr from curl).  What you are seeing appears to be the behavior of the javascript engine in your browser when it parses JSON containing numeric values larger then the javascript spec allows for numbers. (i see the same behavior in firefox)\n\nThere are more references (below) talking about this being a Javascript limitation rather then a pure json-spec issue...\n\ncorrect, the JSON spec has no limitiation on hte size of a numeric value.\n\n...it might be easier to adapt solr to deal with this know Javascript limitation and thus helping out the Javascript clients out there?\n\nwe certainly should not change the default behavior of solr's JSON response format, since many languages have no problems with java \"long\" values in JSON \u2013 but it does seem like it might be a good idea to add an option for dealing with this better, since it would certainly affect any javascript client parsing any \"long\" value (not just version\n\n\u2014\n\nMy suggestion would be a new \"json.long\" param (following the naming convention of \"json.nl\" and \"json.wrf\" params) that would control wether java \"long\" values should be returned as numerics or strings in the JSON response.\n "
        },
        {
            "author": "Marc Portier",
            "id": "comment-14093750",
            "date": "2014-08-12T05:13:28+0000",
            "content": "My suggestion would be a new \"json.long\" param (following the naming convention of \"json.nl\" and \"json.wrf\" params) that would control wether java \"long\" values should be returned as numerics or strings in the JSON response.\n\nYep. This surely sounds like the elegant way out I was still trying to get at.  The param would then take \"num\" (default for backwards compat) or \"text\" as values?.  And indeed: it should affect other fields/values in the json as well. "
        },
        {
            "author": "Marc Portier",
            "id": "comment-14095920",
            "date": "2014-08-13T18:50:15+0000",
            "content": "As a reference to others experiencing this.\nHere are some (nodejs) libraries addressing the issue on the javascript end:\n\n\n\thttps://www.npmjs.org/package/bignumber.js introduces arbitrary big numbers to be handled without loss of precission in Javascript (resembles the Java BigDecimal somewhat)\n\thttps://www.npmjs.org/package/json-bigint uses the previous to effectively allow an alternative json-parse that deals with big numbers\n\n "
        }
    ]
}