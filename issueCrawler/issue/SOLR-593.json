{
    "id": "SOLR-593",
    "title": "Solr hangs at QueryElevationComponent.inform() if elevate.xml is in data directory",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The thread dump is:\n\n\"main\" prio=6 tid=0x003f81d8 nid=0x10e4 in Object.wait() [0x0006f000..0x0006fc20]\n        at java.lang.Object.wait(Native Method)\n\n\twaiting on <0x23dd0188> (a java.lang.Object)\n        at java.lang.Object.wait(Object.java:474)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:685)\n\tlocked <0x23dd0188> (a java.lang.Object)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:624)\n        at org.apache.solr.handler.component.QueryElevationComponent.inform(QueryElevationComponent.java:185)\n\tlocked <0x23e51ee0> (a java.util.WeakHashMap)\n        at org.apache.solr.core.SolrResourceLoader.inform(SolrResourceLoader.java:264)\n        at org.apache.solr.core.SolrCore.<init>(SolrCore.java:396)\n\tlocked <0x27b44b60> (a java.lang.Class)\n        at org.apache.solr.servlet.SolrDispatchFilter.init(SolrDispatchFilter.java:90)\n        at org.mortbay.jetty.servlet.FilterHolder.doStart(FilterHolder.java:99)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:40)\n        at org.mortbay.jetty.servlet.ServletHandler.initialize(ServletHandler.java:594)\n        at org.mortbay.jetty.servlet.Context.startContext(Context.java:139)\n        at org.mortbay.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1218)\n        at org.mortbay.jetty.handler.ContextHandler.doStart(ContextHandler.java:500)\n        at org.mortbay.jetty.webapp.WebAppContext.doStart(WebAppContext.java:448)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:40)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:147)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.doStart(ContextHandlerCollection.java:161)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:40)\n        at org.mortbay.jetty.handler.HandlerCollection.doStart(HandlerCollection.java:147)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:40)\n        at org.mortbay.jetty.handler.HandlerWrapper.doStart(HandlerWrapper.java:117)\n        at org.mortbay.jetty.Server.doStart(Server.java:210)\n        at org.mortbay.component.AbstractLifeCycle.start(AbstractLifeCycle.java:40)\n        at org.mortbay.xml.XmlConfiguration.main(XmlConfiguration.java:929)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n        at java.lang.reflect.Method.invoke(Method.java:585)\n        at org.mortbay.start.Main.invokeMain(Main.java:183)\n        at org.mortbay.start.Main.start(Main.java:497)\n        at org.mortbay.start.Main.main(Main.java:115)\n\n\n\nThe cause is that accessing reader during SolrCoreAware.inform(). Shalin pointed out same thing at:\n\nhttp://www.nabble.com/Accessing-IndexReader-during-core-initialization-hangs-init-td17259235.html#a17259235",
    "attachments": {
        "SOLR-593.patch": "https://issues.apache.org/jira/secure/attachment/12386491/SOLR-593.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12613218",
            "date": "2008-07-14T00:57:41+0000",
            "content": "bugs in code new since 1.2 should be fixed before 1.3 "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12613728",
            "date": "2008-07-15T20:51:58+0000",
            "content": "Solr has a deadlock when useColdSearcher=false and a plugin calls getSearcher() from inform():\n\nThe SolrCore constructor prevents warming queries from firing before inform() has been called on plugins.  But if useColdSearcher=false, then those warming queries will need to be completed before the searcher is registered.  If a plugin calls getSearcher() from inform() it will block waiting for the searcher to be registered (which is dependent on completing the inform() calls): deadlock. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12613731",
            "date": "2008-07-15T20:58:09+0000",
            "content": "The simplest solution might be to deprecate/remove useColdSearcher=false "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12615082",
            "date": "2008-07-20T11:17:55+0000",
            "content": "Can we introduce getColdSearcher() method so that SolrCoreAware components can call it to get searcher, instead of getSearcher(), to avoid this deadlock? getColdSearcher() always returns a cold searcher regardless of useColdSearcher setting... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12615102",
            "date": "2008-07-20T15:39:11+0000",
            "content": "Can we introduce getColdSearcher() method so that SolrCoreAware components can call it to get searcher\n\nThat could work.\n\nWe could also try to do something more generic like getNewestSearcher() that could be called in any context.  That could also be used internally to use the new lucene reopen() for better efficiency.  But the implementation would be a little tricky. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12615108",
            "date": "2008-07-20T17:38:02+0000",
            "content": "This patch implements a getNewestSearcher() method, and keeps a list of searchers that are currently open.\n\nKeeping a list like this opens a race condition in that someone could aquire a reference from the list just as close is being called.  To protect against this, the list is only accessed when searcherLock is held, and the close() of RefCounted<SolrIndexSearcher> aquires searcherLock and checks the referece count again.  If it's greater than 0, it aborts the close.\n\nHaving the list will also be useful for using Lucene's new reopen, as well as other future admin actions.\n\nAll tests pass, but I'm going to do some ad-hoc testing to make sure this hasn't introduced any new issues. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12615248",
            "date": "2008-07-21T14:02:06+0000",
            "content": "committed. "
        }
    ]
}