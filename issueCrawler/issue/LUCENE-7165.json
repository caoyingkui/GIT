{
    "id": "LUCENE-7165",
    "title": "Return GeoPointField Encoding to use full 64 bit space",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "This was originally done in LUCENE-6710 but then reverted due to issues with GeoHash encoding (which has since been removed). This issue will revert the GeoPoint encoding back to full 64 bit space which will synchronize quantization TOLERANCE between LatLonPoint and GeoPointField.",
    "attachments": {
        "LUCENE-6996.patch": "https://issues.apache.org/jira/secure/attachment/12797082/LUCENE-6996.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15222346",
            "author": "Michael McCandless",
            "date": "2016-04-01T21:16:52+0000",
            "content": "+1.\n\nIs this a dup of LUCENE-6996?\n\nAlso, LUCENE-6170 looks like an unrelated issue? "
        },
        {
            "id": "comment-15222390",
            "author": "Robert Muir",
            "date": "2016-04-01T21:47:35+0000",
            "content": "+1\n\nI think the differences here are responsible for e.g. 4 documents different in queries during benchmarking etc. It would be great to use 64-bits for geopoint too. If we are going to change the encoding, maybe it is also worth looking at using this full 64 bit encoding with a 1D KD tree? I would also consider not using interleaved form in the docvalues storage: for the way in which docvalues is used i think de-interleaving is just an unnecessary cost. LatLonPoint just uses high/low bits and if GeoPointField is compatible, then it could use the same (also re-use sort comparator!) "
        },
        {
            "id": "comment-15226330",
            "author": "Nicholas Knize",
            "date": "2016-04-05T14:17:05+0000",
            "content": "Switching to full 32 bit resolution for the morton curve introduces numerical instability when a point is quantized multiple times. Before this patch can be applied, LUCENE-7179 needs to be completed. "
        },
        {
            "id": "comment-15226396",
            "author": "Nicholas Knize",
            "date": "2016-04-05T14:48:51+0000",
            "content": "Added patch converts morton encoding to full 64 bit resolution space.\n\nUpdated TestGeoEncodingUtils.testScaleUnscaleIsStable to demonstrate effect of roundoff error. "
        },
        {
            "id": "comment-15226423",
            "author": "Robert Muir",
            "date": "2016-04-05T15:11:00+0000",
            "content": "Can we instead remove the addition/subtraction so that the encoding is stable? "
        },
        {
            "id": "comment-15226432",
            "author": "Nicholas Knize",
            "date": "2016-04-05T15:14:51+0000",
            "content": "Which? translating to 360.0 and 180.0? "
        },
        {
            "id": "comment-15226557",
            "author": "Robert Muir",
            "date": "2016-04-05T16:19:20+0000",
            "content": "the subtraction in encode yes (and addition in decode). I don't understand why we need those?\n\nMaybe we should just reuse the latlonpoint encoding but then interleave those bits? This one just has divide or multiply and makes it easier have consistent rounding. If we do other intermediate calculations this kind of stuff gets hairy.\n\nIf we want to make it hairy with additional stuff, thats ok, but we should still try to achieve goals like stability, well-defined rounding, no overflows, etc. random.nextDouble() * 360 + 180 is not good enough in tests to find bugs in these issues. "
        },
        {
            "id": "comment-15226565",
            "author": "Robert Muir",
            "date": "2016-04-05T16:21:52+0000",
            "content": "Also now that numbers are in negative space, we will round towards zero unlike before. This adds complexity so i think the Math.floor/ceil is warranted so we keep things simpler and round in one direction regardless of sign. "
        },
        {
            "id": "comment-15226590",
            "author": "Nicholas Knize",
            "date": "2016-04-05T16:33:49+0000",
            "content": "the subtraction in encode yes (and addition in decode). I don't understand why we need those?\n\nIt creates the unsigned space for the morton curve mapping everything to full unsigned 32 bits. Using LatLonPoint means we just push the hairy code to handling the signed bit so -90, -180 still maps to 0x0L and 90, 180 maps to 0xFFFFFFF....L  \n\nMaybe we should just reuse the latlonpoint encoding but then interleave those bits? \n\nStill have to handle the sign bit\n "
        }
    ]
}