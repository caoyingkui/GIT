{
    "id": "LUCENE-1524",
    "title": "True reverse sorting",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.4.1"
        ],
        "affect_versions": "2.4",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "If documents sorted have the same sort value, they are sorted in the same way even if the reverse flag is true.",
    "attachments": {
        "reverse.patch": "https://issues.apache.org/jira/secure/attachment/12398392/reverse.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-01-21T11:57:02+0000",
            "content": "The patch comes with unit test which demonstrates the bug. All other tests pass.\n\nI tried to follow how to contribute guidelines, but I was not able to run successfuly compatibility tests (ant clean test-tag) even without my modifications... ",
            "author": "Jiri Kuhn",
            "id": "comment-12665808"
        },
        {
            "date": "2009-01-21T19:00:02+0000",
            "content": "\nI can appreciate the motivation to fix this, but I don't see a\nreliable way to do so.\n\nEG say I sort first by Title reversed and then document size\nnon-reversed.  In that case, should the tie-breaker (sort by docID) be\nreversed or not?  (Or, vice/versa).\n\nI don't think it's well defined, because Lucene doesn't have a\ntoplevel (in the Sort object) reversed boolean (it's per-SortField).\n\nThat fallback (\"compare by docID\") is sort of an emergency\ntie-breaker, to make sure you get deterministic results when your sort\nleaves ambiguity.\n\nOne simple way to get the behavior you want is to disambiguate\nyour sort by adding SortField.FIELD_DOC at the end.  Then you can\nexplicitly control whether it's reversed or not... ",
            "author": "Michael McCandless",
            "id": "comment-12665914"
        },
        {
            "date": "2009-01-22T07:55:58+0000",
            "content": "my take is similar to Michael...\n\nThe test in the patch doesn't seem valid to me.  Specifying a reverse sort on FIELD_1 just means that the documents must be returned in descending order of the value in  FIELD_1 \u2013 it does not say anything about breaking ties when two docs have equal values for FIELD_1, the behavior in that case is undefined (and just so happens to be consistent) ",
            "author": "Hoss Man",
            "id": "comment-12666081"
        },
        {
            "date": "2009-01-22T08:20:57+0000",
            "content": "Well, consider this. You have\n\n\n\ta search result displayed as web page\n\tthe search has ability to show it reversed\n\tthe documents found are all equal (in the sense of lucene sort )\n\n\n\nNow you click on the link to see result reversed, what happens? Nothing. The documents are orderer in the same way as before. But one would expect that first document became last etc. This is natural expectation which is covered by the test.\n\nYou said - the behaviour is undefined, let define it! ",
            "author": "Jiri Kuhn",
            "id": "comment-12666082"
        },
        {
            "date": "2009-01-22T10:37:32+0000",
            "content": "The usual semantics for sort is that items with the same score are in random order (not only for Lucene). The semantics you propose essentially model the assumption that users prefer documents with lower id when they have the same score. If this assumption holds for your application, you can use the approach suggested by Michael and explicitly express it in the query. But to force it onto all users of Lucene doesn't seem to be a good solution. ",
            "author": "Wolf Siberski",
            "id": "comment-12666115"
        },
        {
            "date": "2009-01-22T20:27:33+0000",
            "content": "If this assumption holds for your application, you can use the approach suggested by Michael and explicitly express it in the query. But to force it onto all users of Lucene doesn't seem to be a good solution.\n\nexactly.  by being undefined Lucene doesn't have to explicitly compute a secondary sort when the client doesn't ask for it...\n\n\n// sorts on field F ascending, behavior in ties in undefined\nSort a1 = new Sort(new SortField[] { new SortField(F, SortField.STRING, false) });\n// sorts on field F descending, behavior in ties is undefined.\nSort d1 = new Sort(new SortField[] { new SortField(F, SortField.STRING, true) });\n\n// sorts on field F ascending, behavior in ties is ascending sort by internal id \nSort a2 = new Sort(new SortField[] { \n   new SortField(F, SortField.STRING, false), new SortField(null, SortField.DOC, false) });\n// sorts on field F descending, behavior in ties is descending sort by internal id\nSort d2 = new Sort(new SortField[] { \n   new SortField(F, SortField.STRING, true), new SortField(null, SortField.DOC, true) });\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-12666279"
        },
        {
            "date": "2009-01-26T08:01:53+0000",
            "content": "If you're not using a deterministic tie-breaker, in case of a tie you'll get random results even doing the same search over and over again. That has a chance to happen exactly after the next index segment merge. On merge, documents change their docIds and can even be reordered depending on how the segments are being merged. Seeing as you're not getting stable results for forward sort, I can't fathom how you're expecting reverse sort to give you something predictable.\n\nI used two solutions to this problem - use docId as a tie-breaker, reversing it together with the primary field. That gave me some stability inbetween merges and nice sort reversal. Then I switched to using my application document id - it is constant during the life of a document, I need to retrieve it anyway for all the documents found, and for this exact reason it rests in a cache that makes sorting on that field lightning fast. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12667175"
        }
    ]
}