{
    "id": "SOLR-7242",
    "title": "Schema API: Edit remaining schema elements: Name, Version, Unique Key, and Global Similarity",
    "details": {
        "components": [
            "Schema and Analysis"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "We should be able to specify an entire schema via the bulk schema API.\n\nThe bulk schema API should have the following commands in addition to those already available/planned:\n\n\n\tset-name\n\tset-version\n\tset-unique-key/unset-unique-key\n\tset-similarity",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-13T16:53:40+0000",
            "author": "Steve Rowe",
            "content": "Maybe also set-solr-query-parser-default-operator and set-default-search-field?  These have both been deprecated though, so adding support for them via API seems like the wrong way to go. ",
            "id": "comment-14360631"
        },
        {
            "date": "2015-06-19T18:45:40+0000",
            "author": "Steve Rowe",
            "content": "When global similarity can be set via the Schema API, the Solr Reference Guide should updated to warn people that before adding field types with per-field-type similarity, they must first change the global similarity to SchemaSimilarityFactory (or another similarity factory that enables per-field-type similarity).  More details at SOLR-7679. ",
            "id": "comment-14593770"
        },
        {
            "date": "2017-02-16T20:21:23+0000",
            "author": "David Smiley",
            "content": "I suggest tossing the notion of a schema name.  It tends to be something copied from another configset, e.g. \"example\" and never updated which creates misinformation as it stays. ",
            "id": "comment-15870635"
        },
        {
            "date": "2017-02-16T20:24:56+0000",
            "author": "David Smiley",
            "content": "And perhaps starting with 7.0, schema version be removed in lieu of using luceneMatchVersion for this.  One less thing to manage.\n\nSeparately, I'd like to see the removal of deprecated things like default field & default query operator from this API.  It's odd they were created in the first place since these underlying schema features have been deprecated for a long time now. ",
            "id": "comment-15870642"
        },
        {
            "date": "2017-02-16T21:22:50+0000",
            "author": "Alexandre Rafalovitch",
            "content": "I've never actually seen schema name used for anything useful. So, +1 on getting rid of it. \n\nSchema version I guess is a little messier, as important defaults get switched around, but if there is clear way to map it to luceneMatchVersion, I am all for it.  ",
            "id": "comment-15870717"
        },
        {
            "date": "2017-03-27T14:53:16+0000",
            "author": "Shawn Heisey",
            "content": "Steve Rowe, I am wondering whether the API to change the uniqueKey should attempt to ensure that the field is suitable.  A \"force\" option may not be a bad thing to add, to let the user do what they want, even if the software doesn't think it's a good idea.\n\nOne thing that I think would be good to check is to make sure that the new field isn't using the TextField class.  A uniqueKey field that can be analyzed has the possibility of being unsuitable for that role.\n\nAnother thing to check is that the field is entirely comprised of unique values.  If the index is empty, that would qualify.  Another check that could be done:  Run an internal facet query on the field and make sure that none of the counts are more than 1.  Because of the nature of facet queries on high-cardinality fields, that query could run into OOME problems, especially on distributed cloud indexes with multiple shards per node. ",
            "id": "comment-15943401"
        },
        {
            "date": "2017-03-27T14:55:36+0000",
            "author": "Shawn Heisey",
            "content": "I just thought of another difficulty for changing the uniqueKey on an existing SolrCloud distributed index:  document routing. ",
            "id": "comment-15943404"
        },
        {
            "date": "2017-03-27T15:21:00+0000",
            "author": "Erick Erickson",
            "content": "Setting the <uniqueKey> seems dangerous to me. There's a very small window where that's won't mess things up when using composite id routing, specifically between the time you put the configset up in SolrCloud and the time you index your first document for any collection that uses that configset. Any time after that and Bad Things Happen.\n\nI suppose if the collection was defined with implicit routing at least that case would be OK as far as routing docs.\n\nCould you even update an existing document after changing? Your <uniqueKey> might not even exist in a document before this change. Especially bad would be if you just \"didn't like the name\" and switched from \"id\" to \"mypersonalid\" after indexing docs.\n\nThe more I think about this, the more negative I am on this specific bit of functionality. I suppose if it were really desirable for, say, some GUI that defined schemas it could be an \"expert\", undocumented feature, I just don't want to deal with all the ways it could be abused.\n\nI suppose one could build in really draconian safeguards and refuse to carry out the operation if the schema in question was used by any collection in SolrCloud mode. Personally I wouldn't care if there were any docs in those collections or not. While technically you could change the <uniqueKey> if there weren't any docs in the collection, that's too subtle to let \"into the wild\" given the benefits are minimal. I mean how hard is it to nuke/create a collection with 0 docs in it? Not sure if you can safeguard much in stand-alone though.\n\nI just don't want to chase down \"All of the sudden I'm getting duplicate documents and I didn't change anything\". 6 hours later \"Oh, yeah, I did change the unique key after indexing 500M documents\" .  ",
            "id": "comment-15943447"
        },
        {
            "date": "2017-06-15T08:46:08+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "-1 for set-name \u2013 Instead just get rid of the name\n+1 for set-version\n-1 for set-unique-key since it seems dangerous - spin off into separate jira\n+1 for set-similarity ",
            "id": "comment-16050171"
        },
        {
            "date": "2018-05-29T13:36:12+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Should we proceed with\u00a0set-version and set-similarity as a first improvement? ",
            "id": "comment-16493532"
        },
        {
            "date": "2018-05-29T13:37:57+0000",
            "author": "Steve Rowe",
            "content": "Should we proceed with set-version and set-similarity as a first improvement?\n\n+1 ",
            "id": "comment-16493535"
        },
        {
            "date": "2018-05-29T15:40:20+0000",
            "author": "David Smiley",
            "content": "Jan H\u00f8ydahl what do you think about my proposal to deprecate the notion of schema version in lieu of using luceneMatchVersion going forward?  That's a separate issue, sure, but it suggests not bothering with adding a set-version for the schema. ",
            "id": "comment-16493720"
        },
        {
            "date": "2018-05-29T15:58:03+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Have not thought it through, why don't you create an issue for it to spark some discussion separate from this? ",
            "id": "comment-16493756"
        },
        {
            "date": "2018-05-29T19:04:32+0000",
            "author": "David Smiley",
            "content": "Good idea: SOLR-7242 ",
            "id": "comment-16494072"
        }
    ]
}