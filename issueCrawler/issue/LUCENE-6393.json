{
    "id": "LUCENE-6393",
    "title": "Add two-phase support to SpanPositionCheckQuery and subclasses",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "This hits an assert in SpanScorer because it breaks the javadocs contract of Spans.nextStartPosition():\n\n\tReturns the next start position for the current doc.\n\tThere is always at least one start/end position per doc.\n\tAfter the last start/end position at the current doc this returns NO_MORE_POSITIONS.",
    "attachments": {
        "LUCENE-6393-alternative.patch": "https://issues.apache.org/jira/secure/attachment/12709423/LUCENE-6393-alternative.patch",
        "LUCENE-6393.patch": "https://issues.apache.org/jira/secure/attachment/12709422/LUCENE-6393.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14394962",
            "author": "Robert Muir",
            "date": "2015-04-03T19:29:44+0000",
            "content": "I think SpanPayloadCheckQuery, SpanPositionRangeQuery, or any other subclasses of SpanPositionCheckQuery are likely impacted. "
        },
        {
            "id": "comment-14394965",
            "author": "Robert Muir",
            "date": "2015-04-03T19:31:00+0000",
            "content": "Oops. i resolved the wrong issue on accident. "
        },
        {
            "id": "comment-14394969",
            "author": "Robert Muir",
            "date": "2015-04-03T19:34:04+0000",
            "content": "This is pretty easy to find by just doing a SpanFirstQuery(someNearQuery, 0).\n\nIt only happens when it wraps a span-near query, when it wraps a simple termquery it never does the wrong thing. "
        },
        {
            "id": "comment-14394982",
            "author": "ASF subversion and git services",
            "date": "2015-04-03T19:43:44+0000",
            "content": "Commit 1671137 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1671137 ]\n\nLUCENE-6393: add equivalence tests for SpanFirstQuery. "
        },
        {
            "id": "comment-14394987",
            "author": "Robert Muir",
            "date": "2015-04-03T19:45:21+0000",
            "content": "I committed tests marked with @AwaitsFix to TestSpanSearchEquivalence for now. \nWas working to get those beefed up a little bit and cover more of the spans so we could have more confidence. "
        },
        {
            "id": "comment-14394991",
            "author": "ASF subversion and git services",
            "date": "2015-04-03T19:48:41+0000",
            "content": "Commit 1671139 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1671139 ]\n\nLUCENE-6393: add equivalence tests for SpanFirstQuery. "
        },
        {
            "id": "comment-14395702",
            "author": "Paul Elschot",
            "date": "2015-04-04T11:59:14+0000",
            "content": "The problem is that with two phase iteration neither nextDoc() or advance() is called on SpanPositionCheckQuery.PositionCheckSpans in the testSpanFirstNear test case, leaving the atFirstInCurrentDoc flag in the wrong state.\n\nOverriding PositionCheckSpans.asTwoPhaseIterator to return null makes the testSpanFirstNear test case pass.\n\nAt the moment I have no idea what the good fix would be.\nPerhaps FilterSpans should return null for its two phase iterator just to be on the safe side. "
        },
        {
            "id": "comment-14395705",
            "author": "Paul Elschot",
            "date": "2015-04-04T12:03:57+0000",
            "content": "Because of the Spans contract that there is always at least one start/end position per doc, I considered adding a firstStartPosition method that should be called before the first nextStartPosition call.\nThat would reduce the need for the atFirstInCurrentDoc flag that is used in quite a few Spans, and that might help to avoid problems like this one. "
        },
        {
            "id": "comment-14395720",
            "author": "Robert Muir",
            "date": "2015-04-04T13:23:25+0000",
            "content": "We can also give SpanPositionCheck two-phase support? I wrote these tests with that in mind. I just noticed the failed before i made any code changes... "
        },
        {
            "id": "comment-14395764",
            "author": "Robert Muir",
            "date": "2015-04-04T15:05:49+0000",
            "content": "Here is a very quickly-done patch, adding two-phase support to SpanPositionCheck. Paul Elschot, mind taking a look? "
        },
        {
            "id": "comment-14395772",
            "author": "Robert Muir",
            "date": "2015-04-04T15:20:37+0000",
            "content": "\nThe problem is that with two phase iteration neither nextDoc() or advance() is called on SpanPositionCheckQuery.PositionCheckSpans in the testSpanFirstNear test case, leaving the atFirstInCurrentDoc flag in the wrong state.\n\nOverriding PositionCheckSpans.asTwoPhaseIterator to return null makes the testSpanFirstNear test case pass.\n\nAt the moment I have no idea what the good fix would be.\nPerhaps FilterSpans should return null for its two phase iterator just to be on the safe side.\n\nOk, I understand the issue. Another option to consider is to take the implementation I added here and move it into filterspans, adding 'abstract boolean twoPhaseCurrentDocMatches()' to FilterSpans. Then it would have built in approximation support. I just have to look at NearSpansUnordered.SpansCell and figure out what the implementation there should be (maybe just 'return true', i am just not familiar with the code). "
        },
        {
            "id": "comment-14395778",
            "author": "Robert Muir",
            "date": "2015-04-04T15:33:32+0000",
            "content": "Here is that second approach (LUCENE-6393-alternative.patch). I like this because it forces a subclass of FilterSpans to deal with it. "
        },
        {
            "id": "comment-14395785",
            "author": "Robert Muir",
            "date": "2015-04-04T15:47:23+0000",
            "content": "\nBecause of the Spans contract that there is always at least one start/end position per doc, I considered adding a firstStartPosition method that should be called before the first nextStartPosition call.\nThat would reduce the need for the atFirstInCurrentDoc flag that is used in quite a few Spans, and that might help to avoid problems like this one.\n\nWell, I'm not sure it would avoid all cases of this problem, which IMO is a trap in FilterSpans. If we return null in FilterSpans by default, thats also a trap (just a performance trap instead). \n\nSeparately, it might be a good idea, but maybe we should add the remaining two-phase support first (SpanOrQuery, SpanNotQuery) and then try to look at refactoring after have a clear picture of all the stuff involved? I started with this query because it seemed easiest. The next step would be to give SpanOr and SpanNot logic similar to DisjunctionScorer and ReqExclScorer.  Another step after that is to see if they can share two-phase code (like SpanNear does with ConjunctionDISI). "
        },
        {
            "id": "comment-14395795",
            "author": "Paul Elschot",
            "date": "2015-04-04T16:18:19+0000",
            "content": "With code shared between normal and two phase the code is actually easier to write, see the patch at LUCENE-6083.\nFor two phase return a boolean indicating a match, for normal iterate to a matching docID as necessary and return it, and in both cases prepare the first position if there is a match. "
        },
        {
            "id": "comment-14395797",
            "author": "Paul Elschot",
            "date": "2015-04-04T16:20:44+0000",
            "content": "Patch of 4 April 2015.\nThis removes the asTwoPhaseIterator method in FilterSpans.java and the @AwaitsFix lines in /TestSpanSearchEquivalence.\nThe patch also deletes TestFilterSpans, which only repeats checks already done by the compiler. "
        },
        {
            "id": "comment-14395798",
            "author": "Paul Elschot",
            "date": "2015-04-04T16:21:47+0000",
            "content": "I missed the earlier two patches, I'll take a look at them later. "
        },
        {
            "id": "comment-14395804",
            "author": "Paul Elschot",
            "date": "2015-04-04T16:27:28+0000",
            "content": "The current patches partially overlap, and I see no conflicts between them. "
        },
        {
            "id": "comment-14395806",
            "author": "Robert Muir",
            "date": "2015-04-04T16:35:45+0000",
            "content": "Sorry the patch I think is the best solution is LUCENE-6393-alternative.patch\n\nThe other one was just my first stab attempt, it does not actually fix FilterSpans. "
        },
        {
            "id": "comment-14395914",
            "author": "Paul Elschot",
            "date": "2015-04-04T20:08:07+0000",
            "content": "A first impression the alternative patch.\nIn case for Spans it makes sense to enforce two phase iteration everywhere except in TermSpans, it could be done in for example in an abstract class TwoPhaseSpans (a Spans subclass) that should then be used for all other Spans than TermSpans.\nDoing that in FilterSpans as in the alternative patch could be a first step for that.\n\nAbout this TODO:\n\n// TODO: can/should we combine this with the logic above?\n+    public boolean twoPhaseCurrentDocMatches\n\n\nSuch sharing can be done by calling this twoPhaseCurrentDocMatches from the toMatchDoc method that is normally used at the end of nextDoc() and advance(). The SpanContain... queries at LUCENE-6083 have this in ContainSpans.java:\n\n+  @Override\n+  int toMatchDoc() throws IOException {\n+    oneExhaustedInCurrentDoc = false;\n+    while (true) {\n+      if (twoPhaseCurrentDocMatches()) {\n+        return docID();\n+      }\n+      if (nextDoc() == NO_MORE_DOCS) {\n+        return NO_MORE_DOCS;\n+      }\n+    }\n+  }\n\n\nI tried to share the same method also with the NearSpansUn/Ordered classes, but when I did that some tests failed (maybe because the atFirstInCurrentDoc flag is not yet handled correctly.)\n "
        },
        {
            "id": "comment-14395916",
            "author": "Paul Elschot",
            "date": "2015-04-04T20:14:11+0000",
            "content": "Looking again at the code above, I think it recurses with nextDoc() and toMatchDoc() calling each other, and that was not the intention.\nThis can be fixed by using only the first part of the implementation of nextDoc() in toMatchDoc(). "
        },
        {
            "id": "comment-14395951",
            "author": "Robert Muir",
            "date": "2015-04-04T21:19:07+0000",
            "content": "Updated patch with Paul's idea.\n\nI like it, maybe we should consider this logic being migrated to FilterSpans... but we could do this as a second step? "
        },
        {
            "id": "comment-14396004",
            "author": "Paul Elschot",
            "date": "2015-04-04T23:41:38+0000",
            "content": "Lots of deleted lines, good sign.\nFor migrating this logic I think one step at a time should work. Let's see what the other Span queries need for two phase iteration.\nThe others are SpanOr/MultiTerm and PayloadTermQuery, or did I miss one? "
        },
        {
            "id": "comment-14396346",
            "author": "Robert Muir",
            "date": "2015-04-05T18:06:36+0000",
            "content": "I think we can do SpanNot as well, similar to what ReqExclScorer does. "
        },
        {
            "id": "comment-14396368",
            "author": "ASF subversion and git services",
            "date": "2015-04-05T19:44:33+0000",
            "content": "Commit 1671420 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1671420 ]\n\nLUCENE-6393: Add two-phase support to SpanPositionCheckQuery and subclasses "
        },
        {
            "id": "comment-14396370",
            "author": "Robert Muir",
            "date": "2015-04-05T19:59:10+0000",
            "content": "I used one final trick in the two-phase for FilterSpans:\n\n  @Override\n  public TwoPhaseIterator asTwoPhaseIterator() {\n    final TwoPhaseIterator inner = in.asTwoPhaseIterator();\n    if (inner != null) {\n      // wrapped instance has an approximation\n      return new TwoPhaseIterator(inner.approximation()) {\n        @Override\n        public boolean matches() throws IOException {\n          return inner.matches() && twoPhaseCurrentDocMatches();\n        }\n      };\n    } else {\n      // wrapped instance has no approximation, but \n      // we can still defer matching until absolutely needed.\n      return new TwoPhaseIterator(in) {\n        @Override\n        public boolean matches() throws IOException {\n          return twoPhaseCurrentDocMatches();\n        }\n      };\n    }\n  }\n\n\n\nThis gives two-phase support for stuff like SpanFirst(SpanTerm). We may want to make this easier later (e.g. mandate approximations in Spans and give SpanTerm the obvious sorta-stupid implementation so code is easier). But for now lets get support in all the spans so we see what everything looks like. "
        },
        {
            "id": "comment-14396371",
            "author": "ASF subversion and git services",
            "date": "2015-04-05T20:03:23+0000",
            "content": "Commit 1671421 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1671421 ]\n\nLUCENE-6393: Add two-phase support to SpanPositionCheckQuery and subclasses "
        },
        {
            "id": "comment-14396372",
            "author": "Robert Muir",
            "date": "2015-04-05T20:04:11+0000",
            "content": "Thanks for the help here Paul. "
        },
        {
            "id": "comment-14586816",
            "author": "Anshum Gupta",
            "date": "2015-06-15T21:42:56+0000",
            "content": "Bulk close for 5.2.0. "
        }
    ]
}