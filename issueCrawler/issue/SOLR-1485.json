{
    "id": "SOLR-1485",
    "title": "Payload support",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "6.6",
            "7.0"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Solr has no support for Lucene's PayloadScoreQuery, yet it has support for indexing payloads (via DelimitedPayloadTokenFilter or NumericPayloadTokenFilter). \n\nThis issue adds value source and query parser support for leveraging payloads created by those token filters.",
    "attachments": {
        "payload_value_source.png": "https://issues.apache.org/jira/secure/attachment/12863587/payload_value_source.png",
        "PayloadTermQueryPlugin.java": "https://issues.apache.org/jira/secure/attachment/12421139/PayloadTermQueryPlugin.java",
        "SOLR-1485.patch": "https://issues.apache.org/jira/secure/attachment/12863586/SOLR-1485.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-12761672",
            "date": "2009-10-02T19:01:43+0000",
            "content": "This class adds a QParserPlugin to support creating PayloadTermQuery's.\n\nThis can be registered in solrconfig.xml like this:\n\n <queryParser name=\"payload\" class=\"org.apache.solr.search.PayloadTermQueryPlugin\"/>\n\nA custom Similarity is needed to score payloads (not provided with this issue).\n\nOnce everything is lined up right (payload indexed, similarity with scorePayload implemented), a query like this can be used:\nhttp://localhost:8983/solr/select?q=\n{!payload%20f=payloads%20func=avg}\nfoo&debugQuery=true\n\nAs can be seen with this explanation:\n1.4450715 = (MATCH) fieldWeight(payloads:foo in 0), product of:\n  4.709331 = (MATCH) btq, product of:\n    0.70710677 = tf(phraseFreq=0.5)\n    6.66 = scorePayload(...)\n  0.30685282 = idf(payloads:  foo=1)\n  1.0 = fieldNorm(field=payloads, doc=0) "
        },
        {
            "author": "Bill Au",
            "id": "comment-12761687",
            "date": "2009-10-02T19:45:57+0000",
            "content": "Eric, have you started on this?  I recently wrote a QParserPlugin that supports PayloadTermQuery.  It is very bear-bone but could be a good starting point.  I can attach my code here to get things started. "
        },
        {
            "author": "Bill Au",
            "id": "comment-12761688",
            "date": "2009-10-02T19:51:05+0000",
            "content": "Never mind.  I just saw you update.  Your code looks good. "
        },
        {
            "author": "Bill Au",
            "id": "comment-12761696",
            "date": "2009-10-02T20:18:29+0000",
            "content": "Eric, do you think we should support default field and default operator in the QParser used? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12761919",
            "date": "2009-10-03T17:27:21+0000",
            "content": "Moving out of 1.4 since this is a new feature that isn't ready to commit.\nAs written, it looks more like \"rawpayload\" or something since no analysis is done on the input. "
        },
        {
            "author": "Bill Au",
            "id": "comment-12761931",
            "date": "2009-10-03T17:56:23+0000",
            "content": "I am +0 on including/excluding this from 1.4.  FYI, Solr 1.4 already has a DelimitedPayloadTokenFilterFactory which uses the DelimitedPayloadTokenFIlter in Lucene.  If we include this, I think we should also include a Similarity class for payload, either as part of this JIRA or a separate one.\n\nThere is also a similar JIRA on query support:\n\nhttps://issues.apache.org/jira/browse/SOLR-1337 "
        },
        {
            "author": "david",
            "id": "comment-12778095",
            "date": "2009-11-15T12:42:47+0000",
            "content": "Hi,\nWhat if I want to do a boolean query?\nlike: payoladField:steve OR NonPayloadField:George ?\n\nWon't the payload plugin be used for all the query parts? "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-13013790",
            "date": "2011-03-31T02:11:09+0000",
            "content": "Julien Noche posted last August that he had to create a new query parser variant of dismax. I cannot find an example of a query string in his post.\n\nUsing Payloads with DisMaxQParser in SOLR\n\nUse cases for a payload-based query:\n\n\ta raw byte stream\n\ta serialized Java String\n\ta number\n\ta boolean value in the payload\n\t\"is there a payload?\"\n\tboosting a document if the search term has a payload\n\t\n\t\tthe payload is a number (packed float) created by\n\t\n\t\n\n\n\nMost of these can be encoded into a payload. But there are no matching decoders.\nThere is no code that pulls the payload and uses the data. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13060019",
            "date": "2011-07-05T17:20:42+0000",
            "content": "Is there interest in rejuvenating this to get some form of a SpanTermQuery support into Solr?   I'll take a stab at updating this to do like the \n{!term}\n query parser to factor in the field type and any needed analysis.  Anything else?\n\nPerhaps for the dismax+payloads situation Lance mentioned, which will be a different issue altogether, we make the SolrQueryParser implementation used by (e)dismax pluggable that it uses, so that there can be a span-aware one? "
        },
        {
            "author": "Roland Deck",
            "id": "comment-13287384",
            "date": "2012-06-01T13:17:24+0000",
            "content": "Hi\nI tried the PayloadTermQueryPlugin today.\nTo get the scores as mentioned above I had to change the code a little. \n\nHere is the relevant code fragment:\n\n  @Override\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new QParser(qstr, localParams, params, req) {\n      public Query parse() throws ParseException \n{\n        //rdeck: hint: lets try to set includeSpanCore to true. => Yes it works! (after having re-indexed all documents)!\n        return new PayloadTermQuery(\n            new Term(localParams.get(QueryParsing.F), localParams.get(QueryParsing.V)),\n            createPayloadFunction(localParams.get(\"func\")),\n            true); //was originally false instead of true\n      }\n    };\n  }\n\nwith includeSpanCore = false, I get score = payload value\nwith includeSpanCore = true, the payload takes part on the score calculation\n\nI have some questions left:\n\n1) Why is the PayloadTermQuery limited to just one field? Or will this change?\n2) How can I mix up queries containing parts which are payload dependent and others which aren't? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13697471",
            "date": "2013-07-02T03:33:43+0000",
            "content": "Erik Hatcher - not sure if you are watching SOLR-1337, so I'll write the same comment/Q here:\n\nMy impression was that Span queries and Payloads are kind of pase in Luceneland.... no?\nIf yes, should we Won't Fix this? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13697687",
            "date": "2013-07-02T11:02:45+0000",
            "content": "I would say it would be good to support payloads, unless there is a better solution. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14102658",
            "date": "2014-08-19T19:01:03+0000",
            "content": "Anyone have thoughts on how best to implement the scorePayload() method in Solr?   Should Solr have its own DefaultSimilarity subclass that implements it?  \n\nIt'd be great to at least get support for PayloadTermQuery in, such that it supports DelimitedPayloadTokenFilter created payloads.   I suppose that means that scorePayload() will need to support at least float and integer decoding, based on introspecting the field type definition.   What about \"identity\" encoding (throw an unsupported exception?)?    Using a custom encoder would require a custom scorePayload(), and by default throw an exception on that too I presume.\n\nAnd what about other Similarity implementations and if/how to support those? \n\nI'm seeing that it's tough to put this into Solr in a general purpose way, but maybe we can at least get out of the box support for integer and float using the default similarity. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14102938",
            "date": "2014-08-19T22:11:11+0000",
            "content": "Happens that I put together an end-to-end example here: http://searchhub.org/2014/06/13/end-to-end-payload-example-in-solr/, and part of that is a discussion I had with Hossman about whether a query parser approach or a fieldType approach would be better. Turns out each supports different capabilities.\n\nPersonally, I think a fieldType would be a good thing since it should \"just work\".\n\nFWIW "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14104405",
            "date": "2014-08-20T19:30:22+0000",
            "content": "Is there a reason not to use SchemaSimilarityFactory as the default Similarity moving forward?   Relying on that would be nice, it seems. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15612967",
            "date": "2016-10-27T19:41:38+0000",
            "content": "Is there a reason not to use SchemaSimilarityFactory as the default Similarity moving forward? Relying on that would be nice, it seems.\n\nThis is now the case I believe. Does that mean this issue can move forward? Or has payloads querying been implemented somewhere else by now? "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-15623224",
            "date": "2016-10-31T20:12:53+0000",
            "content": "This is indeed the case but there is still no PayloadQParserPlugin, probably for the reason that there is also no Similarity implementation taking care of payload scoring.\n\nWe have and use such a plugin and can provide it, and a BM25 similarity where the payload is directly used for scoring in the basic cases. But payloads can be used for much fancier applications, so would would Solr want to support? Without a similarity, the parser is useless. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15970383",
            "date": "2017-04-16T13:04:54+0000",
            "content": "work in progress checkpoint.   two new query parsers, mainly \n{!payload_score}\n, and a payload (float) value source. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15970386",
            "date": "2017-04-16T13:16:27+0000",
            "content": "It's coming together, finally!   Here's an example field and field type:\n\n\n  \"add-field-type\": {\n    \"name\": \"delimited_float_payloads\",\n    \"class\": \"solr.TextField\",\n    \"positionIncrementGap\": \"100\",\n    \"indexAnalyzer\": {\n      \"tokenizer\": {\n        \"class\": \"solr.WhitespaceTokenizerFactory\"\n      },\n      \"filters\": [\n        {\n          \"class\": \"solr.DelimitedPayloadTokenFilterFactory\",\n          \"encoder\": \"float\"\n        }\n      ]\n    },\n    \"queryAnalyzer\": {\n      \"tokenizer\": {\n        \"class\": \"solr.WhitespaceTokenizerFactory\"\n      }\n    }\n  },\n  \"add-field\" : {\n    \"name\":\"delimited_float_payloads\",\n    \"type\":\"delimited_float_payloads\",\n    \"stored\": \"true\",\n    \"multiValued\": \"true\"\n  }\n\n\n\nGiven that field definition, here's some example data indexed:\n\n\nbin/post -c test -type text/csv -out yes -d $'id,delimited_float_payloads\\n1,one|1.0 two|2.0 three|3.0\\n2,weighted|50.0 weighted|100.0'\n\n\n\nHere's a query that returns the computed payload function for the term \"two\" (which has a float value of 2.0):\n\nhttp://localhost:9999/solr/test/select?q=*:*&fl=*,p:payload(delimited_float_payloads,two),score\n\n\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15970392",
            "date": "2017-04-16T13:26:59+0000",
            "content": "There's three pieces in that previous patch:\n\n\n\tFloatPayloadValueSource: the payload(...) function\n\tPayloadScoreQParserPlugin: the {!payload_score} qparser\n\tPayloadCheckQParserPlugin: the {!payload_check} qparser\n\n\n\nThe focus so far has really been the payload(...) function.  The query parsers need more work, as at the moment they only support a term query.  "
        },
        {
            "author": "David Smiley",
            "id": "comment-15972086",
            "date": "2017-04-18T03:52:11+0000",
            "content": "Just a couple tidbits of feedback on the patch:\n\n\tcomputePayloadFactor would probably get called a ton of times, thus it's worth trying to ensure it's implementation is quick.  I see you having it doing \"integer\" & \"float\" string comparisons.  That can be done beforehand; perhaps declare a java.util.ToDoubleFunction initialized with one of 3 lambdas depending on the situation.\n\tFloatPayloadValueSource confuses me... ValueSources produce a value per document yet payloads are per term occurrence.  What use-case do you have in mind?\n\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15972747",
            "date": "2017-04-18T14:09:13+0000",
            "content": "David Smiley - thanks for having a look.\n\nI'll rework to the lambda recommendation, thanks!   \n\nFloatPayloadValueSource has this function signature: payload(field,value[,default, 'min|max|average']), where the default behavior currently is to average the payload floats for the matching terms.  Your following question gets at the heart of one of the primary use cases for this, unique terms per-field, where the idea is to return only a single float value (for sorting, other functioning, pseudo-fielding, and range/bucket/query faceting).   Multiple matching terms per doc serves different use cases though, such as down-boosting synonyms (via NumericPayloadTokenFilter), or averaging a bunch of entity matches, each carrying some \"weight\" factor.\n\nThanks again, David. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15973211",
            "date": "2017-04-18T18:18:24+0000",
            "content": "implements string checking and lambda creation in ctor instead of nested computePayloadFactor function "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15973214",
            "date": "2017-04-18T18:20:19+0000",
            "content": "David Smiley - I wasn't quite sure how to use ToDoubleFunction in this case, but I took a stab at a lambda with an interface.  Payloads really need an encoder/decoder coupled utility anyway, so this is a start along that idea as well. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15973857",
            "date": "2017-04-19T01:28:58+0000",
            "content": "last patch had a recursive loop issue on the SimScorer (this instead of the delegate) "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15973885",
            "date": "2017-04-19T01:49:52+0000",
            "content": "While I'm at it, I found that Lucene's PayloadScoreQuery had a .equals/hashCode/cache bug in that it didn't take into account the includeSpanScore flag - fixed here. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15977530",
            "date": "2017-04-20T21:09:30+0000",
            "content": "a few fiddly changes, but most relevantly added three dynamic fields/types to the data_driven configuration: *_dpf, *_dpi, and *_dps, for delimited_payloads float, int, and string. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15977923",
            "date": "2017-04-21T01:40:16+0000",
            "content": "With the latest patch, one can index payloaded terms like this:\n\n\n    bin/solr create -c payloads\n    bin/post -c payloads -type text/csv -out yes -d $'id,weighted_terms_dpf\\n1,one|1.0 two|2.0 three|3.0\\n2,weighted|50.0 weighted|100.0'\n\n# this is two documents:\n#     1: one|1.0 two|2.0 three|3.0\n#     2: weighted|50.0 weighted|100.0\n\n\n\nand then get the values back as scores like this:\n\n\n    http://localhost:8983/solr/payloads/select?q={!payload_score f=weighted_terms_dpf v=$payload_term func=max}&fl=id,*_dpf,score&wt=csv&payload_term=two\n    * &payload_term=two\n    id,score\n    1,2.0\n\n    * &payload_term=three:\n    id,score\n    1,3.0\n    \n    * &payload_term=weighted (func=max):\n    id,score\n    2,100.0\n\n    * &payload_term=weighted (func=min):\n    id,score\n    2,50.0\n    \n    * &payload_term=weighted (func=average):\n    id,score\n    2,75.0    \n\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15977930",
            "date": "2017-04-21T01:49:52+0000",
            "content": "It's interesting to note that there is actually one query built in that could handle payload scoring already: q={!xmlparser}<BoostingTermQuery fieldName=\"weighted_terms_dpf\">weighted</BoostingTermQuery>, with hardcoded \"average\" function and includeSpanScore=true, resulting in the above data example an output of:\n\nid,score\n2,71.00154\n\n\n\nAnd here's a patch that adds includeSpanScore control flexibility to <BoostingTermQuery>:\n\n\n--- a/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java\n+++ b/lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/BoostingTermBuilder.java\n@@ -34,11 +34,12 @@ public class BoostingTermBuilder extends SpanBuilderBase {\n   @Override\n   public SpanQuery getSpanQuery(Element e) throws ParserException {\n     String fieldName = DOMUtils.getAttributeWithInheritanceOrFail(e, \"fieldName\");\n+    boolean includeSpanQuery = DOMUtils.getAttribute(e, \"includeSpanScore\", true);\n     String value = DOMUtils.getNonBlankTextOrFail(e);\n \n-    // TODO: add parameter to control PayloadScoreQuery's `includeSpanScore` and `PayloadFunction`\n+    // TODO: add parameter to control PayloadScoreQuery's and `PayloadFunction`\n     SpanQuery btq = new PayloadScoreQuery(new SpanTermQuery(new Term(fieldName, value)),\n-        new AveragePayloadFunction());\n+        new AveragePayloadFunction(), includeSpanQuery);\n     btq = new SpanBoostQuery(btq, DOMUtils.getAttribute(e, \"boost\", 1.0f));\n     return btq;\n   }\n\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15990095",
            "date": "2017-04-30T02:04:50+0000",
            "content": "I've started committing to branch jira/SOLR-1485: https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=shortlog;h=refs/heads/jira/SOLR-1485 where I've just committed the payload() function (and tests and helper utilities) "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15990103",
            "date": "2017-04-30T02:29:37+0000",
            "content": "I've now committed/pushed everything to the branch needed for the payload() function, including the dynamic field types for delimited payloading of terms.   I think we could call this JIRA satisfied with what's committed so far, however I've got these pieces in addition locally: PayloadCheckQParserPlugin, PayloadScoreQParserPlugin.java, PayloadScoringSimilarityWrapper.java, and an improvement to xmlparser's <BoostingTermQuery> - may include these along with this issue, not sure yet. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15990541",
            "date": "2017-05-01T02:05:48+0000",
            "content": "I've completed both query parsers as well on the jira/SOLR-1485 branch.\n\nAny review takers before I merge this over master and then to 6.x?   David Smiley?  Erick Erickson?   I wonder if there'll be any API issues between master and 6x?   "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15991953",
            "date": "2017-05-02T01:35:40+0000",
            "content": "Commit 6c565c001bb48af0c37a4d4909ba2f98d51e7fe6 in lucene-solr's branch refs/heads/master from Erik Hatcher\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6c565c0 ]\n\nSOLR-1485: Add payload support "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15992018",
            "date": "2017-05-02T02:34:44+0000",
            "content": "I'm not seeing the git message here, but I've committed to branch_6x now too, including a minor tweak to the similarity wrapper due to API change on master.  https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=shortlog;h=refs/heads/branch_6x "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15992019",
            "date": "2017-05-02T02:35:23+0000",
            "content": "Leaving this ticket open until the documentation is done, but otherwise, whew, DONE! "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15993460",
            "date": "2017-05-02T18:30:39+0000",
            "content": "long time coming, thanks for the encouragement and patience.  finally, payload support in Solr on the query/function side of things.   This includes three pieces:\n\n\n\tpayload() value source function\n\tpayload_score query parser\n\tpayload_check query parser\n\n\n\nDocs for these have been added to the cwiki. "
        },
        {
            "author": "David Smiley",
            "id": "comment-15993494",
            "date": "2017-05-02T18:48:41+0000",
            "content": "Apologies for reviewing late.\nI'm looking at your documentation and what you committed.\n\n\tIt's not documented that PayloadScoreQuery parses the value as a SpanNearQuery (or SpanTermQuery if 1 term).  Can you document this? Or if it's too much implementation detail then document the subset that you think is appropriate. (aside: it'd be nice if you let the user pick the query parser and query like other query parsers do see BoostQParserPlugin and how it calls subQuery).\n\tPayloadUtils.createSpanQuery: TokenStream implements Closeable and I see that you called close().  But you should use try-with-resources to ensure it gets called.  (Personally I think of this immediately I see code that calls close(); I ask myself why not try-with-resources). From experience with buggy analysis components (that I had a hand in writing , this is a serious issue since a forgotten close can actually put the entire Solr node into an inoperative state!  (due to stringent checks in TokenStream and that analysis components get cached in ThreadLocal)\n\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15993969",
            "date": "2017-05-02T23:04:11+0000",
            "content": "David Smiley thanks again for your review - much appreciated.  \n\n\n\tQuery parsing - yeah, that was a tricky one and I opted for the simplest thing that made sense given the available payloading of terms will be done by way of DelimitedPayloadTokenFilter, so rather than trying phrase, boolean, and other things just delegate to the analyzer and build a SpanTermQuery or SpanNearQuery with zero slop and ordered.  I just documented this on the cwiki as well as a new upcoming commit that will add it to PayloadUtils.createSpanQuery().   On the parsing decision I looked around to find a way to create a SpanQuery conveniently (both PayloadScoreQuery and SpanPayloadCheckQuery require a SpanQuery, not just a Query).  QueryBuilder.createSpanQuery() seemed the ticket, but alas it isn't public and also suffers from the troubles with TokenStream API hurdles that you mention - so I adapted it with the fixes that you spotted.\n\n\n\n\n\tThanks for the try-with-resources suggestion - implemented it locally (and running tests/precommit!) now but will commit that shortly.\n\n\n\n\n\tBack to query parsing - I'm definitely open to anything that will work, but again a SpanQuery is the main constraint here.  I don't quite see how subQuery parsing could be used here.  Any suggestions/improvements along these lines are more than welcome.  (my primary use case has been the payload() function so the query parsing beyond the quite useful as-is SpanTermQuery wasn't a big thrust)\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15994030",
            "date": "2017-05-02T23:41:38+0000",
            "content": "Commit 5d42177b9290b61c658154e42223408944cd4bc1 in lucene-solr's branch refs/heads/master from Erik Hatcher\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5d42177 ]\n\nSOLR-1485: improve TokenStream API usage "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15994032",
            "date": "2017-05-02T23:42:34+0000",
            "content": "Commit d496d17269f6acdc77fa06549ae3b4d91a05c321 in lucene-solr's branch refs/heads/branch_6x from Erik Hatcher\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d496d17 ]\n\nSOLR-1485: improve TokenStream API usage "
        },
        {
            "author": "David Smiley",
            "id": "comment-15994216",
            "date": "2017-05-03T03:16:17+0000",
            "content": "The docs look good as well as your changes.  Thanks Erik.\nI understand RE SpanTermQuery being sufficient for the use-cases at hand; and admittedly I'm not quite sure what use case would demand the flexibility of some sub-queryParser. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15994858",
            "date": "2017-05-03T13:32:44+0000",
            "content": "At the very least, if you want to do some lowercasing, or other token filtering, one could do that either before or after DelimitedPayloadTokenFilter, and the current implementation will at least match exact'ish phrases and payload score or check them - so it's actually not a bad first pass.  (At first I implemented it with simple space splitting, as *_dps/*_dpf/*_dpi do, but then added analysis to add more configurability). "
        }
    ]
}