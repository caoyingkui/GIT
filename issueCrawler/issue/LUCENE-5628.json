{
    "id": "LUCENE-5628",
    "title": "SpecialOperations.getFiniteStrings should not recurse",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.8.1",
            "4.9",
            "6.0"
        ]
    },
    "description": "Today it consumes one Java stack frame per transition, which when used by AnalyzingSuggester is per character in each token.  This can lead to stack overflows if you have a long suggestion.",
    "attachments": {
        "LUCENE-5628.patch": "https://issues.apache.org/jira/secure/attachment/12641603/LUCENE-5628.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13979020",
            "author": "Michael McCandless",
            "content": "Patch.  The method is more hairy than before ... but I think it's working.  I added some more tests for getFiniteStrings. ",
            "date": "2014-04-23T22:28:12+0000"
        },
        {
            "id": "comment-13979419",
            "author": "Simon Willnauer",
            "content": "I think it's worth doing the optimization here. A couple of comments\n\n\n\tcan we put the exit condition into the while block instead of at the end with a break I think it can just be while(string.length > 0)\n\tlooking at the impl of State I think we can just use an identity hashset or maybe even an array since the Ids are within known bounds to check the pathStates? You could even just us a bitset and mark the state ID as visited? Hmm now that I wrote it I see your comment  I will leave it here for dicsussion.\n\tSomewhat unrelated but I think the State implementation has a problem since it doen't override equlas but it should since it has an hashcode impl. I wonder if we either should remove the hashCode or add equals just for consistency?\n\tshould we rather throw IllegalState than IllegalArgument \n\tjust for readability it might be good to s/strings/finiteStrings/ I had a hard time to see when you do things on the string vs. strings\n\tis this a leftover ==> // a.getNumberedStates();\n\n\n\n ",
            "date": "2014-04-24T07:57:44+0000"
        },
        {
            "id": "comment-13979445",
            "author": "Robert Muir",
            "content": "Can we reduce the number of lines of code in the new method? It's not even comparable to the current code. How much of the loc is the cycle detection? Given the cost, this may not be worth it. This is expert shit and the user can add assert.isfinite to their code. How much of the loc is code optimization? Can the old code please be added to automatontestutil as slowxxx and compared against the new one with random automata? ",
            "date": "2014-04-24T08:23:55+0000"
        },
        {
            "id": "comment-13979452",
            "author": "Robert Muir",
            "content": "If we want to baby the user, and in not sure what user we have in mind here, just invoke isfinite. I don't like the code dup nor the precedence that unrelated code needs to deal with this.\n\nThis thing needs to get much shorter and simpler to go in. Can we make it slower to achieve that? I would make it 10 times slower if it removed 1/2 the code... Without hesitation. ",
            "date": "2014-04-24T08:33:37+0000"
        },
        {
            "id": "comment-13979519",
            "author": "Michael McCandless",
            "content": "Good feedback, thanks!\n\ncan we put the exit condition into the while block instead of at the end with a break I think it can just be while(string.length > 0)\n\nFixed.\n\nlooking at the impl of State I think we can just use an identity hashset or maybe even an array since the Ids are within known bounds to check the pathStates? You could even just us a bitset and mark the state ID as visited? Hmm now that I wrote it I see your comment  I will leave it here for dicsussion.\n\nI switched to IdentityHashSet.\n\nYeah I struggled w/ this, but the original method didn't set the state\nnumbers so I didn't want to change that.  Setting the numbers does a\nDFS on the automaton...\n\nSomewhat unrelated but I think the State implementation has a problem since it doen't override equlas but it should since it has an hashcode impl. I wonder if we either should remove the hashCode or add equals just for consistency?\n\nI removed State.hashCode.\n\nshould we rather throw IllegalState than IllegalArgument \n\nHmm, IAE felt right since you passed it an invalid (cyclic) argument?\n\njust for readability it might be good to s/strings/finiteStrings/ I had a hard time to see when you do things on the string vs. strings\n\nI changed to results.\n\nis this a leftover ==> // a.getNumberedStates();\n\nRemoved. ",
            "date": "2014-04-24T09:43:43+0000"
        },
        {
            "id": "comment-13979520",
            "author": "Michael McCandless",
            "content": "Can we reduce the number of lines of code in the new method? It's not even comparable to the current code. \n\nI'll see if I can simplify it somehow ...\n\nHow much of the loc is the cycle detection?\n\nThis is really a miniscule part of it: just look for whoever touches\nthe pathStates.\n\nHow much of the loc is code optimization?\n\nIt's not optimization; in fact I imagine this impl is slower.\n\nCan the old code please be added to automatontestutil as slowxxx and compared against the new one with random automata?\n\nGreat idea, I did that. ",
            "date": "2014-04-24T09:43:56+0000"
        },
        {
            "id": "comment-13979522",
            "author": "Michael McCandless",
            "content": "New patch. ",
            "date": "2014-04-24T09:44:56+0000"
        },
        {
            "id": "comment-13979847",
            "author": "Michael McCandless",
            "content": "New patch, with some simplification: I moved all the hairy logic about next label/transition into the PathNode.  I think this helps.\n\nI put a nocommit to use Stack instead of PathNode[] ... this would be simpler (push/pop instead of .get/.remove) ... the only backside is it would mean new Java object on each push vs now where it re-uses. ",
            "date": "2014-04-24T15:38:02+0000"
        },
        {
            "id": "comment-13988770",
            "author": "Michael McCandless",
            "content": "New patch, just adding some comments and removing the nocommit.  I think it's ready ... I plan to commit soon. ",
            "date": "2014-05-03T18:00:15+0000"
        },
        {
            "id": "comment-13989010",
            "author": "Robert Muir",
            "content": "OK i agree this is simpler.\n\nCan we remove the \"a.removeDeadTransitions()\" in the test? If this is really needed for the method to work, i think it should call it... ",
            "date": "2014-05-04T15:11:12+0000"
        },
        {
            "id": "comment-13989017",
            "author": "ASF subversion and git services",
            "content": "Commit 1592362 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1592362 ]\n\nLUCENE-5628: change getFiniteStrings to iterative impl ",
            "date": "2014-05-04T15:48:00+0000"
        },
        {
            "id": "comment-13989021",
            "author": "ASF subversion and git services",
            "content": "Commit 1592363 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1592363 ]\n\nLUCENE-5628: change getFiniteStrings to iterative impl ",
            "date": "2014-05-04T15:53:45+0000"
        },
        {
            "id": "comment-13989758",
            "author": "ASF subversion and git services",
            "content": "Commit 1592584 from Michael McCandless in branch 'dev/branches/lucene_solr_4_8'\n[ https://svn.apache.org/r1592584 ]\n\nLUCENE-5599, LUCENE-5600, LUCENE-5628: backport to 4.8.x ",
            "date": "2014-05-05T17:43:57+0000"
        }
    ]
}