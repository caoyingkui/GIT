{
    "id": "SOLR-1688",
    "title": "Inner class FieldCacheSources should be refactored into their own classes",
    "details": {
        "affect_versions": "1.4",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "While working on SOLR-1586 I noticed that outside of class level access (or package level), you can't really reference FieldCacheSources that are defined inside of their FieldType constituents (e.g., in the case of StrFieldSource as defined in StrField). What's more troubling is that the FieldType/FieldCacheSources are defined in an inconsistent fashion: some are done as inner classes, e.g., StrFieldSource and SortableFloatFieldSource, while others are defined as individual classes (e.g., FloatFIeldSource). This patch will make them all consistent and define each FieldCacheSource as an outside class, present in o.a.solr.search.function.",
    "attachments": {
        "SOLR-1688.Mattmann.122609.patch.txt": "https://issues.apache.org/jira/secure/attachment/12428983/SOLR-1688.Mattmann.122609.patch.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12794648",
            "date": "2009-12-26T21:02:01+0000",
            "content": "to handle SOLR-1586 using Grant's patch, we should commit SOLR-1688 which makes StrFieldSource accessible outside of package/private access. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12794664",
            "date": "2009-12-27T07:17:31+0000",
            "content": "Chris, isn't referring to it as a ValueSource instance enough for SOLR-1586?\n\n\nWhat's more troubling is that the FieldType/FieldCacheSources are defined in an inconsistent fashion: some are done as inner classes, e.g., StrFieldSource and SortableFloatFieldSource, while others are defined as individual classes (e.g., FloatFIeldSource).\n\nThat is not really a problem. The field types are always loaded by Solr so whether they are an inner class or independent does not matter too much. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12794688",
            "date": "2009-12-27T16:18:44+0000",
            "content": "Chris, isn't referring to it as a ValueSource instance enough for SOLR-1586? \n\nUnfortunately, no. Grant's last patch for SOLR-1586 created a StrFieldSource, which isn't visible outside of its class.\n\nThat is not really a problem. The field types are always loaded by Solr so whether they are an inner class or independent does not matter too much.\n\nIt's not a problem as much as it is inconsistent. Some FieldCacheSources are defined inline in their associated FieldType class, some are defined outside of it, for no rhyme or reason. This patch makes them all consistently defined in their own separate class, making it easier for extension, use and inheritance. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12794714",
            "date": "2009-12-27T19:07:04+0000",
            "content": "IMO, most of these should remain implementation details (i.e. not public)... they weren't thought out in sufficient detail to support as public classes (and there has been little reason to do so).\nIf we need StrValueSource to be public for another issue, then we should limit the change to that. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12794722",
            "date": "2009-12-27T19:49:38+0000",
            "content": "Hi Yonik:\n\nIt wasn't a huge deal for me regarding public or private for the FieldCacheSources. I had some weird Eclipse error that pointed out that StrFieldSource was a class defined inside of another java file (originally I thought it was an inner class, but later found out it wasn't) as part of SOLR-1586. That led me to looking at this issue, and like I said the troubling part isn't that it's an inner class, versus an outer class (although outer classes are certainly cleaner for anything that will be used outside of the package). The troubling part is that some of these classes, e.g., DoubleFieldSource, FloatFieldSource, are defined as outer, public classes in an entirely different package (o.a.solr.search.function), whereas some of them (e.g., StrFieldSource, SortableDoubleFieldSource) are defined as outer classes inside of their FieldType constituents. That's inconsistent.\n\nFurthermore, the base class, FieldCacheSource, and ultimately its parent, ValueSource, are both intrinsically tied to the o.a.solr.search.function package, and are both public outer classes defined in their own java file(s). This is also inconsistent.\n\nThe patch I attached associates all FieldCacheSources in the o.a.solr.search.function package (where the rest of them are defined and where their parents are also defined) and IMO fixes up these inconsistencies.\n\nCheers,\nChris "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12794727",
            "date": "2009-12-27T20:07:48+0000",
            "content": "The troubling part is that some of these classes, e.g., DoubleFieldSource, FloatFieldSource, are defined as outer, public classes\n\nPerhaps they should not have been public either.\nBut at this point... why mess with it?  \"consistency\"?  People shouldn't be grabbing or referencing specific implementations of ValueSource of field types - that's why the field type as a getValueSource().  For the rare expert level users creating their own FieldType implementations (and that should be a rare), it shouldn't be an issue. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12794729",
            "date": "2009-12-27T20:16:43+0000",
            "content": "\nBut at this point... why mess with it? \"consistency\"? \n\nYes, consistency. And the fact that applying this patch doesn't break anything, it just cleans it up. With respect to \"why mess with it\", I guess my question is: why not?\n\nFurthermore, like I said above, the placement of ValueSource and FieldCacheSource in the o.a.solr.search.function package suggests that these classes and their children likely belong in that package rather than o.a.solr.schema, or furthermore that some refactoring is necessary. This is an initial step towards that refactoring. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12794734",
            "date": "2009-12-27T20:26:25+0000",
            "content": "I'm against making all ValueSource classes public.  Some of them will clearly be implementations very specific to a FieldType, and those implementation details shouldn't be exposed unless needed.\n\nthe placement of ValueSource and FieldCacheSource in the o.a.solr.search.function package suggests that these classes and their children likely belong in that package\n\nNo, the implementation of FieldType.getValueSource() is up to that FieldType and it can make perfect sense to be co-located (esp if it's an implementation detail of the FieldType). "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12794737",
            "date": "2009-12-27T20:50:35+0000",
            "content": "\nI'm against making all ValueSource classes public. Some of them will clearly be implementations very specific to a FieldType, and those implementation details shouldn't be exposed unless needed. \n\nI don't get this especially when you yourself said most of these classes don't really have detailed implementations (which I can corroborate when I put the patch together for this issue looking at the code). Also, there is at least one other community request to do this, SOLR-1689, albeit for a few select ValueSources.\n\n\nNo, the implementation of FieldType.getValueSource() is up to that FieldType and it can make perfect sense to be co-located (esp if it's an implementation detail of the FieldType).\n\nThen why isn't ValueSource and FieldCacheSource in the o.a.solr.schema package? And more so, why is it OK for some and not OK for others, especially when none of the ValueSource implementation classes is greater than a few hundred lines of code, if that? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12794747",
            "date": "2009-12-27T22:11:10+0000",
            "content": "Then why isn't ValueSource and FieldCacheSource in the o.a.solr.schema package?\n\nHistorical - ValueSource came from function query... but it's become(ing) more useful and applicable.\nRhetorical question: should all implementations of Map be in the java.util package? \n\nAnd more so, why is it OK for some and not OK for others\n\nThink of it this way - some FieldType's may implement their getValueSource with a publicly defined ValueSource and others may not.  It's not the case that for a given FooFieldType that there should be a publicly usable FooValueSource.  There should never be any guarantee that a specific FieldType use a specific implementation of a ValueSource.  The only guarantee should be that it work.  And if that's the case, one should ask why all these value sources should be public? "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12794748",
            "date": "2009-12-27T22:30:11+0000",
            "content": "\nRhetorical question: should all implementations of Map be in the java.util package? \n\nIf they are defined as a \"core\" data structure part of the JDK, then I would say yes. It's not as black and white of a line as you make it out to be. You can have SOLR be entirely a plugin-based system, with nothing but configuration inside of SVN, or you can have every piece of code that interacts with SOLR be inside the SOLR SVN. Neither solution will work, you have to strike a balance. The same applies for code organization and using absolutes or extremes doesn't really illustrate much.\n\n\nThink of it this way - some FieldType's may implement their getValueSource with a publicly defined ValueSource and others may not. \n\nThis makes sense so long as there is a reason. Can you tell me the reason that e.g., StrFieldSource exists inside of StrField while  DoubleFieldSource exists outside of DoubleField? Or why the other 4 or 5 FieldSources that are defined inside of their own java file exist there, while the other 4 or 5 defined inside of the FieldType's java file exist there? What's the litmus test? I'm not sure I see one, which is why I created this issue. And let's be clear. Consistency, code style, maintainability are important issues and following a pattern in one situation while not following it in another (similar or same) situation is not a great example of style or consistency.\n\nIt's not the case that for a given FooFieldType that there should be a publicly usable FooValueSource. There should never be any guarantee that a specific FieldType use a specific implementation of a ValueSource. The only guarantee should be that it work. \n\nThe patch I put up still allows everything to work and doesn't change this requirement.\n\n\nAnd if that's the case, one should ask why all these value sources should be public?\n\nBecause it's more consistent, and thus, more maintainable. Because when you tell someone to modify one of the core FieldSources or ValueSources, they know where to look instead of, \"oh is this one inside of a class inside of o.a.solr.schema, or is this one in the o.a.solr.search.function package\"? You can argue that it doesn't take much time to make that determination, which I'll give you, but I'll argue back it isn't consistent. If there's not a good reason to make them all live in search.function or live inside of the FieldTypes in schema, and it's really a case-by-case reason, then I'd like to hear some of those case-by-cases.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12794782",
            "date": "2009-12-28T09:08:32+0000",
            "content": "\nIMO, most of these should remain implementation details (i.e. not public)... they weren't thought out in sufficient detail to support as public classes (and there has been little reason to do so).\nIf we need StrValueSource to be public for another issue, then we should limit the change to that. \n\n+1\n\nAs they say, lets not fix what ain't broken.\n\n\nIf they are defined as a \"core\" data structure part of the JDK, then I would say yes. It's not as black and white of a line as you make it out to be. You can have SOLR be entirely a plugin-based system, with nothing but configuration inside of SVN, or you can have every piece of code that interacts with SOLR be inside the SOLR SVN. Neither solution will work, you have to strike a balance. The same applies for code organization and using absolutes or extremes doesn't really illustrate much.\n\nChris, we are striving for balance and we are OK with the change to StrFieldSource. In this particular case, you seem to be pushing towards extremes in the name of consistency.\n\n\nCan you tell me the reason that e.g., StrFieldSource exists inside of StrField while DoubleFieldSource exists outside of DoubleField? Or why the other 4 or 5 FieldSources that are defined inside of their own java file exist there, while the other 4 or 5 defined inside of the FieldType's java file exist there? What's the litmus test?\n\nIt is not a public API and I guess that at the time it was written, there was no reason to make it one. It was convenient or a matter of personal style or most likely a random choice. There is no litmus test and there does not have to be one.\n\n\nBecause it's more consistent, and thus, more maintainable.\n\nActually it is the other way round. Once you make it public, it is harder to maintain. All changes should then be backward compatible as far as possible. The bottom line is that making all of them public is not needed. Your opinion is that it is broken because it is not consistent. My opinion is that it is OK and it does not matter. We shouldn't lean towards making something a public API in the name of consistency.\n\n\nBecause when you tell someone to modify one of the core FieldSources or ValueSources, they know where to look instead of, \"oh is this one inside of a class inside of o.a.solr.schema, or is this one in the o.a.solr.search.function package\"?\n\nMost IDEs have a way to goto the source of a particular class, otherwise there is grep. The point is that many (most?) of these classes don't need to be modified unless in very rare cases. If it becomes a common practice to modify them, then there is probably something wrong with our APIs and we need to re-think them. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12794833",
            "date": "2009-12-28T16:39:46+0000",
            "content": "Chris, we are striving for balance and we are OK with the change to StrFieldSource. In this particular case, you seem to be pushing towards extremes in the name of consistency.\n\nYes, I am, because it's better to be extremely consistent when you are developing a code base that's seen by thousands of developers around the world.\n\nIt is not a public API and I guess that at the time it was written, there was no reason to make it one. It was convenient or a matter of personal style or most likely a random choice. There is no litmus test and there does not have to be one.\n\nUm, actually it is a public API. ValueSource and FieldCacheSource are both public classes within the o.a.solr.search.function package. Anyone can write them. And if you're agreeing it was a random choice, why not turn it into a principled decision?\n\n\nActually it is the other way round. Once you make it public, it is harder to maintain. All changes should then be backward compatible as far as possible. The bottom line is that making all of them public is not needed. Your opinion is that it is broken because it is not consistent. My opinion is that it is OK and it does not matter. We shouldn't lean towards making something a public API in the name of consistency.\n\nActually it's not the other way around. Public APIs aren't harder to maintain. It's kind of a matter of debate. It's also mixing levels of granularity because public from an external (client) to SOLR server interface perspective is different from public at the code, library or function level as part of SOLR. Additionally, changes being backwards compatible is one of the many non-functional concerns \u2013 there are others. Ease of use, portability, maintainability, understandability, etc.You can't have a blanket policy for maximizing one, without affecting the others.\n\nLet's be clear. I'm not advocating that something be made a public API that isn't already public. ValueSource and FieldCacheSource are public classes. And note the difference between class and API. ValueSource and FieldCacheSource are not API s, they are Java classes (different levels of granularity). \n\nBecause of this class-level decision, the codebase itself contains inconsistent use of these 2 classes:\n\n\n\tas separate Java classes defined in a FieldType's Java file\n\tas Java classes defined in their own Java file that lives within o.a.solr.search.function\n\n\n\nAlso let's be clear also \u2013 I never said \"broken\", I said \"inconsistent\". If what you're saying is that you as a SOLR committer don't care about inconsistency, then I'm sorry to hear that. \n\n\nMost IDEs have a way to goto the source of a particular class, otherwise there is grep. The point is that many (most?) of these classes don't need to be modified unless in very rare cases. If it becomes a common practice to modify them, then there is probably something wrong with our APIs and we need to re-think them.\n\nIf you're advocating using grep or using an IDE's search functionality as opposed to just understanding where code should be located based on principled architectural design, then again, I'm sorry to hear that. Especially when the principled design comes at 0 cost. The patch I attached didn't break anything, didn't change any APIs, furthermore, didn't change any Java classes, didn't change anything. All I did was re-organize the code to be a bit more principled in its organization. I can explain why I would put all the code in o.a.solr.search.function. Can you explain why it's not? "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12799618",
            "date": "2010-01-13T06:45:37+0000",
            "content": "Hi All,\n\nYonik, what do you think on this one? The patch I put up at least follows a single policy and has rationale rather than the existing code which does not (see comments above). What's the compromise here? Let's get this cleaned up! \n\nCheers,\nChris "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12843924",
            "date": "2010-03-11T05:36:46+0000",
            "content": "Any comments on this guys? Compromise? Standoff? White flag?  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872448",
            "date": "2010-05-27T22:05:31+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043750",
            "date": "2011-06-03T16:46:52+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106480",
            "date": "2011-09-16T14:51:16+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234738",
            "date": "2012-03-21T18:09:07+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717429",
            "date": "2013-07-23T18:48:13+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971305",
            "date": "2014-04-16T12:57:43+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}