{
    "id": "SOLR-5170",
    "title": "Spatial multi-value distance sort via DocValues",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "spatial"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "The attached patch implements spatial multi-value distance sorting.  In other words, a document can have more than one point per field, and using a provided function query, it will return the distance to the closest point.  The data goes into binary DocValues, and as-such it's pretty friendly to realtime search requirements, and it only uses 8 bytes per point.",
    "attachments": {
        "SOLR-5170_spatial_multi-value_sort_via_docvalues.patch": "https://issues.apache.org/jira/secure/attachment/12598541/SOLR-5170_spatial_multi-value_sort_via_docvalues.patch",
        "SOLR-5170_spatial_multi-value_sort_via_docvalues.patch.txt": "https://issues.apache.org/jira/secure/attachment/12621868/SOLR-5170_spatial_multi-value_sort_via_docvalues.patch.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-13742648",
            "date": "2013-08-16T22:12:07+0000",
            "content": "\nThe first patch is not committable.\n\n\tThe biggest reason why is there's an awkward hack to work-around the fact that a Solr FieldType can't aggregate multiple values into a single BinaryDocValuesField. So I've got this UpdateRequestProcessor that works in concert with the field.  SOLR-4329\n\tSecondly it needs more tests. It's been working in quasi-production for many months, though.\n\tAnd thirdly, I'd prefer to see this mechanism integrated into the lucene spatial framework somehow.\n\n\n\nIf you want to know how to use it, look at the tests.  I'm providing this because I got permission to open-source it and people want this capability.  Once SOLR-4329 is addressed then I'll work on this code more to make it commit-worthy. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13742654",
            "date": "2013-08-16T22:18:27+0000",
            "content": "why use BINARY vs SORTED_SET? that has a much easier fit in solr to boot. its designed for multiple values... "
        },
        {
            "author": "David Smiley",
            "id": "comment-13742738",
            "date": "2013-08-17T00:07:54+0000",
            "content": "Hi Rob.\nThe other DocValues types are a better fit to Solr's API, yes.  Assuming each point is encoded into 8 bytes (2x4 binary encoded floats) and added as a value with SortedSetDocValuesField, this still means one lookup per point.  If there are a lot of points per document, then the overhead adds up (as Shai noted).  Granted I didn't measure this overhead, but I'd rather SOLR-4329 get addressed somehow so BinaryDocValues can be used elegantly and then users don't have to pay an unnecessary price per point dereference. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13742905",
            "date": "2013-08-17T11:14:22+0000",
            "content": "Err, that conversation is both wrong and totally irrelevant. Its based on some bogus apples and oranges faceting benchmarks those guys did before: where they spent lots of time optimizing that silly facet vint decode, whereas sortedset is the simplest thing that can work and was done in like 2 days.\n\nIve said it before, I think its good to reinvestigate removing the BINARY type completely. If i have to go optimize some loops somewhere in order to make that happen, fine, its worth it to me to remove this useless shit. \n\nI don't think you should refactor solr around broken assumptions and misleading benchmarks. "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13748318",
            "date": "2013-08-23T05:55:14+0000",
            "content": "David,\n\nHow many points is the limit when it \"adds up\"? Does it give an OOM exception? Or does it just take longer and longer to respond? \n\nIn most use cases there is almost no need to cache the geo spatial search results, since most users are running queries from multiple locations (with GEO IP) targeting. At least that is our use case. If the corpus of points is high, is there an approximation that can be use to reduce it and then run the Circle radius? For example fq=\n{!cache=false cost=10}\nlat:[X to Y] AND long:[X1 to Y1] and apply the fq=\n{!geofilt cost=100}\n or geodist ?\n\nWe have found that doing that speeds things up... Wonder if the code could just do that for us ?\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13748324",
            "date": "2013-08-23T06:11:12+0000",
            "content": "I'm slowly working on a benchmark using Google Caliper; but I have limited time on vacation at the moment.\n\nBill: \"it adds up\" is not a memory concern, it's speed/performance overhead.  And your reference to geofilt and caching is largely irrelevant \u2013 this is about sorting.  The \"cache\" in question (be it DocValues or whatever) is to put all points in memory, it's not distance sorted results that may or may not be likely to be re-used in another query. "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-13864738",
            "date": "2014-01-07T21:59:38+0000",
            "content": "I've been using this patch with some minor tweaks and solr 4.3.1 in production for about six months now. Since I was applying it again against 4.6 this morning, I figured I should attach my tweaks, and mention it passes tests against 4.6.\n\nThis does NOT address the design issues David raises in the initial comment. The changes vs the initial patchfile allow it to be applied against a greater range of solr versions, and brings it a little closer to feeling the same as geofilt's params. "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-13864740",
            "date": "2014-01-07T22:00:51+0000",
            "content": "Adds recipDistance scoring, lat/long is one param. "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-14048292",
            "date": "2014-06-30T23:20:34+0000",
            "content": "Updated to work with Solr 4.9 & LUCENE-5703.\n\nAny chance of realtime-friendly multi-value distance sorting getting into the mainline anytime soon? I've been building with this patch for getting close to a year now. "
        },
        {
            "author": "David Smiley",
            "id": "comment-14048437",
            "date": "2014-07-01T02:33:46+0000",
            "content": "Thanks for maintaining the patch, Jeff Wartes.  Sorry, I won't have time for awhile to get to this, which is kinda blocked by another issue ( SOLR-4329 ).  Going with the SortedSetDocValues approach is kinda tempting. "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-14509521",
            "date": "2015-04-23T18:19:18+0000",
            "content": "\nI got tired of maintaining a custom solr build process for the sole purpose of this patch at my work, especially given the deployment changes in Solr 5.0.\nSince this patch really just adds new classes, I pulled those files out into a freestanding repository that builds a jar, copied the necessary infrastructure to allow the tests to run, and posted that here:\n\nhttps://github.com/randomstatistic/SOLR-5170\n\nThis repo contains the necessary API changes to the patch to support Solr 5.0. I have not bothered to update the patch in Jira here with those changes, and going forward, I'll probably continue to only push changes to that repo unless someone asks otherwise. "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15812871",
            "date": "2017-01-09T21:17:21+0000",
            "content": "It's coming up on two years, and I'm aware there have been some significant changes to areas like docvalues and geospatial since the last update to this issue. \n\nWhat's the state of the world now? \nIf you have entities with multiple locations, and you want to filter and sort, is this patch still the highest-performance option available? I'm more willing to give up on the real-time-friendliness these days, if that changes the answer. "
        },
        {
            "author": "David Smiley",
            "id": "comment-15812936",
            "date": "2017-01-09T21:42:39+0000",
            "content": "The fastest is very likely \"LatLonDocValuesField\", currently hiding out in Lucene sandbox.  There are some really clever tricks it does.\n\nInterested in adding a Solr adapter for it? "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15816053",
            "date": "2017-01-10T20:20:44+0000",
            "content": "Well, yes, I'm interested. I've got enough other work projects going at the moment I'm not sure if I'll be able to dedicate much time in the next month or two, but I wouldn't mind trying to chip at it.\n\nI don't want to pollute this issue, so if you have a few minutes, and could drop me an email with any pointers about the code areas involved, or references to any prior art you're aware of, I expect that'd accelerate things a lot. Thanks. "
        },
        {
            "author": "David Smiley",
            "id": "comment-15838651",
            "date": "2017-01-25T21:52:20+0000",
            "content": "Jeff, I wound up doing this today; see SOLR-10039.  I plan to close this issue on the completion of that issue. "
        }
    ]
}