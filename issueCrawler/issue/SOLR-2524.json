{
    "id": "SOLR-2524",
    "title": "Adding grouping to Solr 3x",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.3"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Grouping was recently added to Lucene 3x. See LUCENE-1421 for more information.\nI think it would be nice if we expose this functionality also to the Solr users that are bound to a 3.x version.\nThe grouping feature added to Lucene is currently a subset of the functionality that Solr 4.0-trunk offers. Mainly it doesn't support grouping by function / query.\n\nThe work involved getting the grouping contrib to work on Solr 3x is acceptable. I have it more or less running here. It supports the response format and request parameters (expect: group.query and group.func) described in the FieldCollapse page on the Solr wiki.\nI think it would be great if this is included in the Solr 3.2 release. Many people are using grouping as patch now and this would help them a lot. Any thoughts?",
    "attachments": {
        "SOLR-2524.patch": "https://issues.apache.org/jira/secure/attachment/12479619/SOLR-2524.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Michael McCandless",
            "id": "comment-13035287",
            "date": "2011-05-18T11:00:24+0000",
            "content": "+1 this would be awesome Martijn!!\n\nIn general we should try hard to backport features we build on trunk, to 3.x, when feasible. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13035487",
            "date": "2011-05-18T16:56:10+0000",
            "content": "Attached the initial patch.\n\n\n\tPatch is based on what is in the trunk.\n\t\n\t\tIntegrated the grouping contrib collectors\n\t\tSame response formats.\n\t\tAll parameters except group.query and group.func are supported.\n\t\tComputed DocSet (for facetComponent and StatsComponent) is based the ungrouped result.\n\t\n\t\n\tAlso integrated the caching collector. For this I added the group.cache=true|false and group.cache.maxSize=[number] parameters.\n\n\n\nThings still todo:\n\n\tIntegrate AllGroupsCollector for total count based on groups.\n\tCreate a Solr Test for grouping\n\tCleanup / Refactor / java doc\n\n "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13035526",
            "date": "2011-05-18T17:59:34+0000",
            "content": "Awesome, that was fast!\n\nMaybe rename group.cache.maxSize -> .maxSizeMB?  (So it's clear what the units are).\n\nShould we default group.cache to true?  (It's false now?).\n\nWhen you get the top groups from collector2, should you pass in offset instead of 0?  (Hmm \u2013 maybe groupOffset?  It seems like you're using offset for both the first & second phase collectors?  Maybe I'm confused...).\n\nComputed DocSet (for facetComponent and StatsComponent) is based the ungrouped result.\n\nThis matches how Solr does grouping on trunk right? "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13035586",
            "date": "2011-05-18T18:56:13+0000",
            "content": "Maybe rename group.cache.maxSize -> .maxSizeMB? (So it's clear what the units are).\nYes that is a more descriptive name.\n\nShould we default group.cache to true? (It's false now?).\nThat makes sense. \n\nI think that if the cachedCollector.isCached() returns false we should put something in the response indication that the cache wasn't used because it hit the cache.maxSizeMB limit. Otherwise the nobody will no whether the cache was utilized.\n\nWhen I was playing around with the cache options I noticed that searching without cache (~350 ms) was faster then with cache (~500 ms) on a 10M index with 1711 distinct group values. This is not what I'd expect.\n\nWhen you get the top groups from collector2, should you pass in offset instead of 0? (Hmm \u2013 maybe groupOffset? It seems like you're using offset for both the first & second phase collectors? Maybe I'm confused...).\nI know that is confusing, but the DocSlice expects offset + len documents. So that was a quick of doing that. I will clean that up.\n\nThis matches how Solr does grouping on trunk right?\nYes it does. I'm already thinking about a new collector that collects all most relevant documents of all groups. This collector should produce something like an OpenBitSet. We can use the OpenBitSet to create a DocSet. I think this should be implemented in a different issue. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13035631",
            "date": "2011-05-18T20:10:21+0000",
            "content": "I think that if the cachedCollector.isCached() returns false we should put something in the response indication that the cache wasn't used because it hit the cache.maxSizeMB limit. Otherwise the nobody will no whether the cache was utilized.\n\n+1, and maybe log a warning?  Or is that going to be too much logging?\n\nWhen I was playing around with the cache options I noticed that searching without cache (~350 ms) was faster then with cache (~500 ms) on a 10M index with 1711 distinct group values. This is not what I'd expect.\n\nThat is worrisome!!  Was this a simple TermQuery?  Is it somehow possible Solr is already caching the queries results itself...?\n\nI'm already thinking about a new collector that collects all most relevant documents of all groups. This collector should produce something like an OpenBitSet. We can use the OpenBitSet to create a DocSet. I think this should be implemented in a different issue.\n\nCool! "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13035673",
            "date": "2011-05-18T21:07:51+0000",
            "content": "and maybe log a warning?\nI also think a log warning should be added too. If users don't want that they can reconfigure their logger not to log messages from the Grouping class.\n\nWas this a simple TermQuery\nNo a MatchDocAllQuery (:). I usually use that to maximize the number documents to group on. Trying this on a simple term query that results in 8M documents; the query with cache is a little bit (~5%) faster. For boolean queries the cache does pay off. Grouping with cache is 20% faster than without. Off course these are just numbers from my machine and my test index. \n\nIs it somehow possible Solr is already caching the queries results itself...?\nOnly the filterCache is used for any filter query in the fq param. The main query is not cached with the filterCache or QueryResultCache. This the same behaviour as in the trunk. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13036270",
            "date": "2011-05-19T16:07:42+0000",
            "content": "\nWas this a simple TermQuery\n\nNo a MatchDocAllQuery (\n\nAhh OK then that makes sense \u2013 MatchAllDocsQuery is a might fast query to execute   So the work done to cache it is going to be slower. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13037436",
            "date": "2011-05-21T19:27:40+0000",
            "content": "Attached an updated patch.\n\n\n\tAdded cache warning\n\tAdded counting based on groups. This can be controlled by group.totalCount parameter. Use GROUPED to get counts based on groups and UNGROUPED to get counts based on plain documents. Default is UNGROUPED.\n\tPorted the trunk grouping tests to 3x. The only part I couldn't port was the random testing. The API is different in 3x.\n\tAdded grouping by query (group.query). Porting this back to 3x was trivial.\n\tSecond pass caching is now enabled by default.\n\tChanged .cache.maxSize into .cache.maxSizeMB\n\n "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13037475",
            "date": "2011-05-21T22:32:18+0000",
            "content": "Will this also be applied to 4.0 and the 3.2 branch? "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13037480",
            "date": "2011-05-21T23:39:49+0000",
            "content": "OK. I am trying to understand group.totalCount=grouped... I am not seeing the facets change in Solr.\n\nUsing latest 3.2 branch, and patching it with your latest patch:\n\nhttp://localhost:8983/solr/select?q=*:*&group.field=inStock&group=true&facet=true&facet.field=manu&group.docSet=grouped&group.totalCount=GROUPED\n\n\n<lst name=\"facet_counts\">\n  <lst name=\"facet_queries\"/>\n    <lst name=\"facet_fields\">\n      <lst name=\"manu\">\n       <int name=\"inc\">8</int>\n       <int name=\"apache\">2</int>\n       <int name=\"belkin\">2</int>\n       <int name=\"canon\">2</int>\netc...\n\n\n\nBut in the result set above, I only see the following once:\n\n\n<str name=\"manu\">Belkin</str>\n\n\n\n\nI would assume the results for this field would be:\n\n\n<lst name=\"facet_counts\">\n  <lst name=\"facet_queries\"/>\n    <lst name=\"facet_fields\">\n      <lst name=\"manu\">\n       <int name=\"belkin\">1</int>\netc...\n\n\n\nSince it it grouped, and only belkin shows... Is there a parameter to do that?\n\n\n\n\n "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13037559",
            "date": "2011-05-22T10:27:50+0000",
            "content": "Will this also be applied to 4.0 and the 3.2 branch?\n\nSo the current plan is to commit this issue only for 3.2.\n\nSolr trunk already has its own grouping implementation, from which we've factored out a shared grouping module (see LUCENE-1421).  That module is available in trunk and 3.x, but since Solr already has grouping in trunk, and it has more features than the grouping module (specifically, that you can group by docvalues derived from a function query and by arbitrary query), Solr trunk will for now keep its own private impl.\n\nOnce we've factored out more stuff from Solr (function queries, LUCENE-2883, and I think also filter caches) then we'll fix the grouping module and also cutover Solr trunk to it.  This is the current thinking anyway... "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13037562",
            "date": "2011-05-22T10:42:33+0000",
            "content": "Will this also be applied to 4.0 and the 3.2 branch?\nThis patch will be applied on the 3x branch. This patch serves as basis for the work needed to make the trunk use the grouping module. But I think that will be addressed in a different issue.\n\nOK. I am trying to understand group.totalCount=grouped... I am not seeing the facets change in Solr.\nThat is because the group.totalCount parameter only has effect on the total count and not the facets.\n\nSo executing the same query with group.totalCount=GROUPED:\n\n<lst name=\"grouped\">\n   <lst name=\"inStock\">\n     <int name=\"matches\">2</int>\n     <arr name=\"groups\">\n        <lst>\n           <bool name=\"groupValue\">true</bool>\n\n\n\nSo executing the same query with group.totalCount=UNGROUPED (default):\n\n<lst name=\"grouped\">\n   <lst name=\"inStock\">\n      <int name=\"matches\">17</int>\n         <arr name=\"groups\">\n            <lst>\n               <bool name=\"groupValue\">true</bool>\n\n\nSo having facets based on groups is the next step . I haven't implemented this yet. But I will properly use the group.docSet parameter for that. Because it will not only have a effect on the FacetComponent, but also the StatsComponent. I think we should first focus on getting the current patch committed. And then tackle this issue. Also to implement this we also need a other group collector.   "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13037564",
            "date": "2011-05-22T10:45:57+0000",
            "content": "Patch looks awesome Martijn!\n\nAnd good job getting group-by-Query added back in!  So it's only\nmissing group-by-function-query-docvalues vs trunk.\n\nCan you add a Solr CHANGES entry?  This is a great addition\n(finally!).\n\nThen I think it's ready to commit once we resolve Bill's issue\nabove... "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13037572",
            "date": "2011-05-22T11:17:04+0000",
            "content": "Attached an updated patch. I added an entry in Solr's CHANGES.txt "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13037593",
            "date": "2011-05-22T12:42:23+0000",
            "content": "Looks great \u2013 I'll commit in a day or two.  Thanks Martijn! "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-13037594",
            "date": "2011-05-22T12:53:02+0000",
            "content": "Looks great \u2013 I'll commit in a day or two. Thanks Martijn!\n+1 - nice work guys "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13037745",
            "date": "2011-05-23T06:05:04+0000",
            "content": "Solr trunk already has its own grouping implementation, from which we've factored out a shared grouping module (see LUCENE-1421). That module is available in trunk and 3.x, but since Solr already has grouping in trunk, and it has more features than the grouping module (specifically, that you can group by docvalues derived from a function query and by arbitrary query), Solr trunk will for now keep its own private impl.\n\nFWIW: I'm a little wary of the idea that we might wind up with an alternate approach to the \"grouping\" functionality released in 3.2 then what would then later be released in 4.0 ... i haven't looked at the approach in branch enough to understand how they differ, but i'm concerned about the hypothetical possibilities that they might have subtly differnet behavior in edge cases, or different perf characteristics, or that 3.2 might add a feature that is hard to support in 4.0, etc....\n\nI say this only to raise it as a red flag to watch out for \u2013 not because i want to stop the progress on this issue.\n\nThe first question that sprang to mind when i saw this issue was: is backporting what solr already uses on trunk to the 3x branch out of the question?\n\nassuming it is, then i guess the main thing that would help ease my fears are if:\n\n1) we had identical Solr tests (at the request api level) on trunk and 3x to help sanity check that the two impls behave the same way\n2) the folks working on the grouping refactoring felt confident that by the time we get arround to releasing 4.0, the grouping refactoring would be at the point that the 3.2 impl and the 4.0 impl would be equivalent.\n\n\n\n "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13037778",
            "date": "2011-05-23T07:56:06+0000",
            "content": "Hi Hoss,\n\nis backporting what solr already uses on trunk to the 3x branch out of the question?\nMany folks have grouping like requirements. Nowadays they either have to use the trunk or patch Solr. I think that having grouping in a released version would be great.\n\nwe had identical Solr tests (at the request api level) on trunk and 3x to help sanity check that the two impls behave the same way\nI copied the grouping test from trunk to 3x. Only the random tests are not enabled. The general super test class (that other tests also use) is not compatible between trunk and 3x.\n\nthe folks working on the grouping refactoring felt confident that by the time we get arround to releasing 4.0, the grouping refactoring would be at the point that the 3.2 impl and the 4.0 impl would be equivalent.\nI totally agree. I haven't opened a Solr issue yet, but I will do that soon. Basically this new issue will be concerned with incorporating the grouping module into Solr trunk without the loss of the current grouping functionality. I think the at the time 4.0 is released the feature set Solr supports regarding to grouping might be larger then what is in a previous 3.x release. We can keep the response format and request parameters backward compatible. "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13038367",
            "date": "2011-05-24T03:34:28+0000",
            "content": "So once Lucene is patched to support POST facets in LUCENE-3097, are you planning on adding that into this (or a new ticket for Solr) ?\n\nThanks\n "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13038589",
            "date": "2011-05-24T14:38:59+0000",
            "content": "The only part I couldn't port was the random testing. The API is different in 3x.\n\nMartijn, could you shed some more light on this one...?  Like is there something in trunk's test infra that we should back port to 3.x...?  Maybe we should open a separate issue for this? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13038593",
            "date": "2011-05-24T14:42:41+0000",
            "content": "There is a little random testing framework in SolrTestCaseJ4, but only in trunk.\n\nI tried really quick (just a few minutes) to backport it and started chasing crazy things, so I agree we should open a separate issue for this. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13038617",
            "date": "2011-05-24T15:18:01+0000",
            "content": "So once Lucene is patched to support POST facets in LUCENE-3097, are you planning on adding that into this (or a new ticket for Solr) ?\nYes I'm!\n\nMaybe we should open a separate issue for this?\nI'll open a separate issue for back porting the SolrTestCaseJ4 random testing behaviour in 3x.  "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13039071",
            "date": "2011-05-25T11:11:10+0000",
            "content": "I created SOLR-2543 for back porting the trunk's version of SolrTestCaseJ4. \nUnfortunately the random grouping tests fails now. If I have fixed this I will update the patch. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13039100",
            "date": "2011-05-25T12:54:55+0000",
            "content": "I do agree this is a real risk, Hoss.  Ie, if 3.x Solr uses the\ngrouping module but trunk does not, it's not great.\n\nFor example, the grouping module is already faster than trunk Solr's\ngrouping impl (because of CachingCollector), and also adds a new\nrequest param (groups.cacheMaxMB).  Once LUCENE-3097 is in, we can\nenable 3.x Solr to count facets post-grouping, which'll be another new\ngrouping request param.  The single pass grouping collector is another\ngood improvement (though I don't know how Solr will take advantage of\nthis... it'd need control over \"doc blocks\" while indexing, which'd be\na major change).  The two impls will continue to diverge...\n\nThat said, the plan is definitely to get Solr 4.0 cutover to the\ngrouping module; it's just a matter of time.  I don't think we should\nship 4.0 until we've done so.\n\nThe only missing piece now is grouping by a FunctionQuery's DocValues.\nIf we do LUCENE-3099 (let a subclass customize the grouping \"key\"), or\nif we factor out the shared FQ module (LUCENE-2883), then we can\ncutover Solr trunk. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13039426",
            "date": "2011-05-25T23:41:40+0000",
            "content": "Attached a new patch with the random test succeeding. You need to have SOLR-2543 applied as well on your code base.\n\nThe only problem that I still have is that I have to invoke deleteCore() method at the end of the random test. If don't do that I get an Insane FieldCache failure. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13039442",
            "date": "2011-05-26T00:15:39+0000",
            "content": "In order to avoid double FC usage we need to make the GroupCollectors instantiate the proper FieldCache impl. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13039446",
            "date": "2011-05-26T00:22:37+0000",
            "content": "Right \u2013 the grouping module today always uses StringIndex/DocTermsIndex from the FC.\n\nBut once LUCENE-3099 is in, Solr can subclass the collectors and use MutableValue which pulls the \"right\" (typed according to the schema) entry from FC, so we can avoid the FC insanity.\n\nWe need LUCENE-3099 anyway to be able to group by FQ (and thus cutover Solr trunk to grouping module too).... "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13039968",
            "date": "2011-05-26T22:28:57+0000",
            "content": "Attached updated patch. The random grouping test also includes the use of cache.  "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13040373",
            "date": "2011-05-27T18:39:41+0000",
            "content": "Martijn, with this patch, Solr 3.x is able to return the total number of unique groups (using AllGroupsCollector), right?  (Ahh, I see: using the new group.totalCount parameter).\n "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13040377",
            "date": "2011-05-27T18:49:14+0000",
            "content": "Solr 3.x is able to return the total number of unique groups (using AllGroupsCollector), right? (Ahh, I see: using the new group.totalCount parameter).\nYes  That is the right parameter. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13040551",
            "date": "2011-05-28T05:26:42+0000",
            "content": "Shouldn't the \"fix version\" be 3.2 ?  It appears someone inadvertently used 3.2 for the \"affects version\" which is really more of a bug field than for new features. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13040567",
            "date": "2011-05-28T10:07:10+0000",
            "content": "Hi David, I think that as well. I removed the affected version and changed fix version to 3.3, since this issue is blocked by LUCENE-3099. I don't think we can fix this before 3.2 is released, since the vote has already started. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13040602",
            "date": "2011-05-28T13:51:26+0000",
            "content": "I was using this patch last week and didn't encounter problems. Why is it actually blocked by LUCENE-3099, vs. merely stands to benefit from improvements there when it happens? "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13040798",
            "date": "2011-05-29T12:44:23+0000",
            "content": "I was using this patch last week and didn't encounter problems.\n\nExcellent \u2013 thank you for testing \n\nWhy is it actually blocked by LUCENE-3099, vs. merely stands to benefit from improvements there when it happens?\n\nWell... Hoss is (rightly) nervous that we have divergent grouping\nimpls in trunk vs 3.x.\n\nThere are non-trivial differences... 3.x improves on trunk's impl:\n\n\n\tOptionally uses CachingCollector, so certain queries will be\n    substantially faster (adds new request param\n    group.cache.maxSizeMB)\n\n\n\n\n\tOptionally it's able to get total count of number of unique\n    groups (using AllGroupsCollector).\n\n\n\nBut, also, 3.x uses way more RAM than trunk's impl when grouping by a\nnon-term field, because the grouping module currently always pulls a\nStringIndex (but LUCENE-3099 will fix this!).\n\nHoss also wanted to see all of Solr trunk's grouping tests backported,\nand that is now done (thanks Martijn).\n\nWe could simply commit anyway, for 3.3, on the strong expectation that\nwe are going to cut trunk over to the grouping module before shipping\n4.0...?  Any objections?  This way 3.3 will have grouping, and we let\nthe feature \"bake\" on Jenkins daily testing instead of aging as a patch... "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13044190",
            "date": "2011-06-04T04:07:27+0000",
            "content": "Let's do it. "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13044192",
            "date": "2011-06-04T04:09:01+0000",
            "content": "Can you add the number of matches to the log?\n\nSOLR-2337 "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13051356",
            "date": "2011-06-17T22:11:48+0000",
            "content": "Updated patch to what is created in SOLR-2564. The only difference is that when grouping by field (group.field) and the field isn't a string field (String, TextField or another that can produce a StringIndex from fieldcache) then a SolrException is thrown indicating that grouping on that field is not supported. This is to prevent double cache usage.\n\nI think it is time to commit this patch!  "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13051393",
            "date": "2011-06-17T23:10:30+0000",
            "content": "Committed in revision 1137067. "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13051747",
            "date": "2011-06-20T00:23:55+0000",
            "content": "Question: Does this support the option of getting facet counts after grouping? I am getting lost in all the issues....\n\nThank you... "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13052114",
            "date": "2011-06-20T18:10:16+0000",
            "content": "Question: Does this support the option of getting facet counts after grouping? I am getting lost in all the issues....\n\nI don't think it does.  For that we need LUCENE-3097, which I think  is close. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13058958",
            "date": "2011-07-02T02:43:14+0000",
            "content": "Bulk close for 3.3 "
        },
        {
            "author": "Yuriy Akopov",
            "id": "comment-13063284",
            "date": "2011-07-11T10:51:26+0000",
            "content": "I suppose I'm late with these questions, but could you please acknowledge if the following is correct:\n\n1) The functionality from this patch was included into Solr 3.3, so no need to apply it to any version >= 3.3\n\n2) This patch (as well as the collapsing functionality in 3.3) doesn't allow calculation of facet numbers after collapsing. Faceting is still possible for collapsed results but the numbers returned for facets are always calculated before collapsing the results.\n\n3) In order to calculate facets after collapsing, LUCENE-3097 must be applied to Solr 3.3.\n\nThanks. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13063859",
            "date": "2011-07-12T12:49:09+0000",
            "content": "I believe all 3 are correct. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13064049",
            "date": "2011-07-12T18:07:26+0000",
            "content": "All 3 are correct. In order for post grouping facets LUCENE-3097 must be applied and it must be wired up into Solr. I expect this to happen in the coming days. "
        },
        {
            "author": "Yuriy Akopov",
            "id": "comment-13064408",
            "date": "2011-07-13T07:42:04+0000",
            "content": "Thanks Michael and Martij. I'll wait for that new release then. "
        },
        {
            "author": "Cameron",
            "id": "comment-13064918",
            "date": "2011-07-13T22:34:28+0000",
            "content": "Trying out this functionality. Not sure this is the place, but a couple more questions:\n\n1. How is group.query different from fq? For example, by adding: q=things&group=true&group.query=type:video, I'd expect all docs with type:video to be contained in a group, and the rest of the docs to fill out the rest of the results. Currently it behaves like fq, only returning a single group of docs\n\n2. Is there a way to have the result set \"wrap\" around a group? For example, if results 1-3 are non-grouped (the null group), then results 4-6 are grouped (type:video), and the rest are non-grouped again, assuming this is where they fall by score.\n\n3. group.query doesn't appear to obey the sort param?\n\n4. Specifying multiple group.query entries doesn't appear to work with group.main=true\n\n\nAgain, sorry if this isn't the correct forum, but if either of the above qualify as new functionality, I can properly create new tickets for them individually  "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13065923",
            "date": "2011-07-15T13:42:25+0000",
            "content": "I think the best place to ask questions like this is the solr-user list.\nHere are my answers:\n1. The fq filters the query result (q param) and if grouping is used all groups (fields, functions and queries). In your example this means that you have one group result with documents the match on things and type:video. Maybe the group.query can best be seen as a subquery of the main query (q & fq parameters). \n2. I'm not sure what you mean here. So based on the order in the query result you want to group?\n3. Well it should obay the sort param. If this is not the case then I think it is a bug.\n4. The group.main parameter renders the regular ungrouped result set. In this format only one group can be displayed. I believe the last group you specify (field, func or query) is actually returned / executed. "
        },
        {
            "author": "thomas menzel",
            "id": "comment-13181224",
            "date": "2012-01-06T10:23:02+0000",
            "content": "> 4. ... I believe the last group you specify (field, func or query) is actually returned / executed.\n\ni have found that this is the case as well. however, the wiki says (said): \n\nIf true, the result of the first field grouping command is used as the main result list in the response, using group.format=simple\n\ni have fixed the wiki to: last "
        }
    ]
}