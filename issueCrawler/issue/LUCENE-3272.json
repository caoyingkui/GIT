{
    "id": "LUCENE-3272",
    "title": "Consolidate Lucene's QueryParsers into a module",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/queryparser"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Lucene has a lot of QueryParsers and we should have them all in a single consistent place.  \n\nThe following are QueryParsers I can find that warrant moving to the new module:\n\n\n\tLucene Core's QueryParser\n\tAnalyzingQueryParser\n\tComplexPhraseQueryParser\n\tExtendableQueryParser\n\tSurround's QueryParser\n\tPrecedenceQueryParser\n\tStandardQueryParser\n\tXML-Query-Parser's CoreParser\n\n\n\nAll seem to do a good job at their kind of parsing with extensive tests.\n\nOne challenge of consolidating these is that many tests use Lucene Core's QueryParser.  One option is to just replicate this class in src/test and call it TestingQueryParser.  Another option is to convert all tests over to programmatically building their queries (seems like alot of work).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-07-01T03:01:11+0000",
            "content": "This is really important I think, we should eventually consolidate all the QPs across lucene-core, contrib, and solr into a module.\n\nI think its also important that we do this so that eventually we could hopefully move core queries into the queries module, and finally add all the cool stuff to the Lucene QP that is \"missing\" (positional stuff like NEAR, function queries, join, ...)\n\nI think most tests only use the QP for convenience, maybe just make a REALLY REALLY simple MockQueryParser that is basically a String.split() for these tests for convenience? Then it would analyze the terms and make a boolean query... anything else more complicated (e.g. phrasequery) could just be explicitly instantiated?\n\n ",
            "author": "Robert Muir",
            "id": "comment-13058191"
        },
        {
            "date": "2011-07-01T03:11:03+0000",
            "content": "... contrib, and solr into a module\n\nI'm not sure about the practicalities of consolidating Solr's QPs at the moment.  Most, if not all, are somehow directly tied to Solr's Schema concepts.  That in fact seems to be their advantage since the typing information is hugely beneficial.  With Lucene's FieldType work coming up, maybe some of it can be offloaded to those.  We can also work on inverting the APIs in some places, providing abstractions in others.\n\nThat all said, I'm not afraid of trying.\n\n\nI think most tests only use the QP for convenience, maybe just make a REALLY REALLY simple MockQueryParser that is basically a String.split() for these tests for convenience? Then it would analyze the terms and make a boolean query... anything else more complicated (e.g. phrasequery) could just be explicitly instantiated?\n\nSounds like a great plan (and a great first step). ",
            "author": "Chris Male",
            "id": "comment-13058198"
        },
        {
            "date": "2011-07-01T03:19:06+0000",
            "content": "\nWith Lucene's FieldType work coming up, maybe some of it can be offloaded to those. We can also work on inverting the APIs in some places, providing abstractions in others.\n\nI don't think we have to do all the work at once? Like, ideally however these problems are being solved (e.g. adding numericrange support to the QP is one example), we could eventually move the solr QPs to use this 'information' and maybe refactor how its own schema works... if it turns out stuff is really solr-specific and not generalizable then keep it in solr.\n\nBut I think as a start, we can consolidate what is in lucene core and contrib, thats a ton of work in itself.  ",
            "author": "Robert Muir",
            "id": "comment-13058200"
        },
        {
            "date": "2011-07-01T11:00:35+0000",
            "content": "Big +1!  We've needed query parsing factored out for a loooong time.  And cutting tests over to a new MockQP, and then simply moving (but not merging) all QPs together to a module, sounds like great first steps.\n\nNote that the FieldType work (at least as currently planned/targetted) isn't a schema \u2013 it's really just a nicer API for working with documents.  Ie, nothing is persisted, nothing checks that 2 docs have the fields / types, etc.\n\nStill, it would be great to pull Solr's QP in and somehow abstract the parts that require access to Solr's schema. ",
            "author": "Michael McCandless",
            "id": "comment-13058476"
        },
        {
            "date": "2011-07-01T19:35:20+0000",
            "content": "single module != single jar ... correct?\n\nsomeone writing a small form factor app that wants to use the basic Lucene QueryParser shouldn't have to load a jar containing every query parser provided by solr (and all of the dependencies they have) ",
            "author": "Hoss Man",
            "id": "comment-13058730"
        },
        {
            "date": "2011-07-01T20:19:23+0000",
            "content": "single jar, but you can customize: its open source.\n\nHoss I think you are looking at this the wrong way: this actually makes it way easier for someone writing a small form factor app that uses no query parser at all, or their own queryparser, or whatever.\n\nwe should do this to make the lucene core smaller, and then you plug in the modules you need (and maybe only selected parts from them, but thats your call).\n\nI don't think we need to provide X * Y * Z possibilities, nor do we need to provide 87 jar files.\n\n\nBut, this is just rehashing LUCENE-2323, where we already had this conversation. I think at the least we should put all these QPs into one place to make refactoring between them easier. Then we make a smaller amount of code for these small form factor apps you are so concerned about, with the messy duplication this is not possible now.\n\nI still stand by my comments in LUCENE-2323, and guess what, turns out I think I was right.\nLUCENE-1938 then refactored one of these queryparsers, removing 4000 lines of code but keeping the same functionality. ",
            "author": "Robert Muir",
            "id": "comment-13058769"
        },
        {
            "date": "2011-11-14T10:44:06+0000",
            "content": "can we close this issue? seems resolved? ",
            "author": "Simon Willnauer",
            "id": "comment-13149550"
        }
    ]
}