{
    "id": "SOLR-11695",
    "title": "JSON FacetModule needs equivilents for StatsComponent's \"count\" and \"missing\" features",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Facet Module"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "StatsComponent supports stats named \"count\" and \"missing\":\n\n\tcount: for the set of documents we're computing stats over, \"how many non-distinct values exist in those documents in the specified field?\" (or in the case of an arbitrary function: \"in how many of these documents does true==ValueSource.exist()\" ?)\n\t\n\t\tno to be confused with the number of unique values (aprox \"cardinality\" or exact \"countDistinct\")\n\t\n\t\n\tmissing: for the set of documents we're computing stats over, \"how many of those documents do not have any value in the specified field?\" (or in the case of an arbitrary function: \"in how many of thse documents does false==ValueSource.exist()\" ?)\n\n\n\n(NOTE: for a single valued field, these are essentially inveses of each other, but for multivalued fields \"count\" actaully returns the total number of \"value instances\" not just the number of docs that have at least one value)\n\nAFAICT there is no equivalent functionality supported by the JSON FacetModule, which will be a blocker preventing some users from migrating from using stats.field (or facet.pivot+stats.field) to json.facet.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-28T22:04:10+0000",
            "content": "We already use \"count\" for the number of documents in a bucket, so for the non-unique number of values, how about something like nvals or nvalues or numvals?\nFor a terms facet, there is missing:true which creates a missing bucket that has all sub-facets as well as the count.  But you're right that we should have a missing function as well (one could do it themselves as a query sub0facet of \"-field:[* TO *]\", but we should make it easier and more functional). ",
            "author": "Yonik Seeley",
            "id": "comment-16269554"
        },
        {
            "date": "2017-11-28T22:15:49+0000",
            "content": "We already use \"count\" for the number of documents in a bucket,...\n\nyeah, i'm not suggesting the original names were great, just that the equivilent functionality seems important \u2013 something like \"numvals(..)\" would probably be a lot better then \"count\"\n\nBut you're right that we should have a missing function as well (one could do it themselves as a query sub0facet of \"-field:[* TO *]\", but we should make it easier and more functional).\n\nHmmm... That specific syntax would only help in the case of simple fields \u2013 not complex functions (ie: stats.field={!func missing=true}min(fieldA,fieldB)).\n\nI suppose in general we could beef up the FuncQParser so it (had an option to) only matched docs where the function exists() and then maybe add some sort of \"not_exists()\" wrapper function \u2013 so you could combine them in a type : query facet to get the same results w/o needing any new functionality/syntax in JSON Faceting ... but yea, a more \"native\" and easier to use \"functional\" syntax for this concept in the JSON Facet syntax would certainly be a lot easier to explain to users (especially existing users we're trying to convince to migrate) ",
            "author": "Hoss Man",
            "id": "comment-16269574"
        },
        {
            "date": "2017-12-12T19:03:10+0000",
            "content": "Commit 53f2d4aa3aa171d5f37284eba9ca56d987729796 in lucene-solr's branch refs/heads/branch_7x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=53f2d4a ]\n\nBeef up testing of json.facet 'refine:simple' when dealing with 'Long Tail' terms\n\nIn an attempt to get more familiar with json.facet refinement, I set out to try and refactor/generalize/clone\nsome of the existing facet.pivot refinement tests to assert that json.facet could produce the same results.\nThis test is a baby step towards doing that: Cloning DistributedFacetPivotLongTailTest into\nDistributedFacetSimpleRefinementLongTailTest (with shared index building code).\n\nAlong the way, I learned that the core logic of 'refine:simple' is actually quite different then how facet.field\n& facet.pivot work (see discussion in SOLR-11733), so they do NOT produce the same results in many \"Long Tail\"\nSitautions.  As a result, many of the logic/assertions inDistributedFacetSimpleRefinementLongTailTest are very\ndiffernet then their counter parts in DistributedFacetPivotLongTailTest, with detailed explanations in comments.\n\nHopefully this test will prove useful down the road to anyone who might want to compare/contrast facet.pivot\nwith json.facet, and to prevent regressions in 'refine:simple' if/when we add more complex refinement\napproaches in the future.\n\nThere are also a few TODOs in the test related to some other small discrepencies between json.facet and\nstats.field that I opened along the way, indicating where the tests should be modified once those issues are\naddressed in json.facet...\n\n\n\tSOLR-11706: support for multivalued numeric fields in stats\n\tSOLR-11695: support for 'missing()' & 'num_vals()' (aka: 'count' from stats.field) numeric stats\n\tSOLR-11725: switch from 'uncorrected stddev' to 'corrected stddev'\n\n\n\n(cherry picked from commit 2990c88a927213177483b61fe8e6971df04fc3ed) ",
            "author": "ASF subversion and git services",
            "id": "comment-16288085"
        },
        {
            "date": "2017-12-12T19:03:23+0000",
            "content": "Commit 2990c88a927213177483b61fe8e6971df04fc3ed in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2990c88 ]\n\nBeef up testing of json.facet 'refine:simple' when dealing with 'Long Tail' terms\n\nIn an attempt to get more familiar with json.facet refinement, I set out to try and refactor/generalize/clone\nsome of the existing facet.pivot refinement tests to assert that json.facet could produce the same results.\nThis test is a baby step towards doing that: Cloning DistributedFacetPivotLongTailTest into\nDistributedFacetSimpleRefinementLongTailTest (with shared index building code).\n\nAlong the way, I learned that the core logic of 'refine:simple' is actually quite different then how facet.field\n& facet.pivot work (see discussion in SOLR-11733), so they do NOT produce the same results in many \"Long Tail\"\nSitautions.  As a result, many of the logic/assertions inDistributedFacetSimpleRefinementLongTailTest are very\ndiffernet then their counter parts in DistributedFacetPivotLongTailTest, with detailed explanations in comments.\n\nHopefully this test will prove useful down the road to anyone who might want to compare/contrast facet.pivot\nwith json.facet, and to prevent regressions in 'refine:simple' if/when we add more complex refinement\napproaches in the future.\n\nThere are also a few TODOs in the test related to some other small discrepencies between json.facet and\nstats.field that I opened along the way, indicating where the tests should be modified once those issues are\naddressed in json.facet...\n\n\n\tSOLR-11706: support for multivalued numeric fields in stats\n\tSOLR-11695: support for 'missing()' & 'num_vals()' (aka: 'count' from stats.field) numeric stats\n\tSOLR-11725: switch from 'uncorrected stddev' to 'corrected stddev'\n\n ",
            "author": "ASF subversion and git services",
            "id": "comment-16288089"
        }
    ]
}