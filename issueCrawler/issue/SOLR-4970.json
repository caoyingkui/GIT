{
    "id": "SOLR-4970",
    "title": "Collection communication for merging the facet query result from one collection to other collection",
    "details": {
        "affect_versions": "None",
        "status": "Reopened",
        "fix_versions": [],
        "components": [
            "SearchComponents - other"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Scenario: \n\nWe will have two categories of data, where one category will be the list of primary data (for example products) and the other collection (it could be spread across shards) holds the transaction data (for example product sales data). We have a search scenario where we need to show the products along with the number of sales for each product. \n\nWe can do flatten the schema with all data together, But if the primary data(it could be very less may be <10000) should be in one collection where as the transaction data(it could be in millions) in multiple shards, then we wish to have this feature where the request handler will search the data from one collection and the corresponding search results docs should pass to the next query for faceting and then before writing the response merge these together to appear the result as coming from one collection.",
    "attachments": {
        "collectioncomm.zip": "https://issues.apache.org/jira/secure/attachment/12589905/collectioncomm.zip",
        "Solr Collection communication.docx": "https://issues.apache.org/jira/secure/attachment/12589922/Solr%20Collection%20communication.docx"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13694642",
            "date": "2013-06-27T11:45:24+0000",
            "content": "Please discuss on solr-user mailing list before opening new issues. Post your problem on solr-user and we can help you to find a solution. "
        },
        {
            "author": "Jilani Shaik",
            "id": "comment-13694651",
            "date": "2013-06-27T12:06:50+0000",
            "content": "Yesterday, We have posted a mail in mailing lists dev@lucene.apache.org and solr-user@lucene.apache.org\n\nActually our organization is using Solr in some projects and similar scenario which I mentioned in description triggered us to implement this feature and we want to share the changes so that it can be improved further if it is useful.  "
        },
        {
            "author": "Jilani Shaik",
            "id": "comment-13694653",
            "date": "2013-06-27T12:11:12+0000",
            "content": "The implementation which we did is contrib approach. Created a new contrib structure as \"collectioncomm\" with a extended \"SolrDispacthFilter\" and custom JSON response writer. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13694660",
            "date": "2013-06-27T12:25:47+0000",
            "content": "Okay, I'm reopening this issue.\n\nYour use-case sounds similar to Block-join. See SOLR-3076 "
        },
        {
            "author": "Jilani Shaik",
            "id": "comment-13694721",
            "date": "2013-06-27T13:47:26+0000",
            "content": "Contains the files related to collection communication and response writer to merge the results.\n\nPlease have a look at these files and provide suggestions. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13694728",
            "date": "2013-06-27T13:59:07+0000",
            "content": "You need to generate a patch against trunk before anyone will review it. See http://wiki.apache.org/solr/HowToContribute\n\nBut before we go any further, can you describe your solution? It sounds like you join on unique-keys between two different solr collections? How well does it perform? Why do you need to extend SolrDispatchFilter and why does it need a custom JSON response writer?\n\nIt sounds like your solution works on top of Solr instead of integrating with solr internals. If it is the former than it would be difficult to ship it with Solr. "
        },
        {
            "author": "Jilani Shaik",
            "id": "comment-13694812",
            "date": "2013-06-27T15:44:41+0000",
            "content": "Internals of the solution  "
        },
        {
            "author": "Jilani Shaik",
            "id": "comment-13694813",
            "date": "2013-06-27T15:44:47+0000",
            "content": "\nBut before we go any further, can you describe your solution? It sounds like you join on unique-keys between two different solr collections? \n\n\tYes, currently unique-keys ( Please suggest if any option available)\nSolution: Please refer attached document.\nbase query will be get some products along with count of those products in transaction index.\n\n\n\nthe ultimate result will looks like as mentioned below\n\nsay index1\nproduct name1, product desc, ....\nproduct name2, product desc, ....\nproduct name3, product desc, ....\n\nsay index2\nproduct name1, customer name1, date of purchase,....,purchased quantity, amount\nproduct name1, customer name1, date of purchase,....,purchased quantity, amount\nproduct name2, customer name1, date of purchase,....,purchased quantity, amount\n\nresult with the custom request handler is as follows\nproduct name1, product desc, ...., 2( count - how many products purchased)\nproduct name2, product desc, ...., 1( count - how many products purchased)\n\n\n\n\nHow well does it perform? \n\n\tWe tested the same for 2000+ from one collection and almost 1 million docs from other collection. Performance wise no issue.\n\n\n\nWhy do you need to extend SolrDispatchFilter and why does it need a custom JSON response writer?\n\n\tCurrently this solution intercepts the request from client if the request handler name is defined in solrconfig.xml as mentioned in attached document.\nThen it will follow the same as dispatchfilter life cycle but before going to write the response to client it will go and execute the query defined in solrconfig.xml or using the params provided by the client and will make a request to solr to execute the second query and will fetch the result as namedList object and concatenate the response to first query response.\nIn custom response writer managed to get the data which is added and will append as a document content of first query result.\n\n\n\n\n\nIt sounds like your solution works on top of Solr instead of integrating with solr internals. If it is the former than it would be difficult to ship it with Solr. "
        }
    ]
}