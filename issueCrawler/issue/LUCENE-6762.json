{
    "id": "LUCENE-6762",
    "title": "CheckIndex cannot \"fix\" indexes that have individual segments with missing or corrupt .si files because sanity checks will fail trying to read the index initially.",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "Seems like we should still be able to partially recover by dropping these segments with CheckIndex.",
    "attachments": {
        "LUCENE-6762.patch": "https://issues.apache.org/jira/secure/attachment/12752759/LUCENE-6762.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14712250",
            "author": "Mike Drob",
            "date": "2015-08-26T00:34:26+0000",
            "content": "A stack trace representative of the issue (this is from LUCENE 4.4)\n\n\njava.io.FileNotFoundException:\u00a0/path/to/index/_879r.si\u00a0(No\u00a0such\u00a0file\u00a0or\u00a0directory)\n        at\u00a0java.io.RandomAccessFile.open(Native\u00a0Method)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at\u00a0java.io.RandomAccessFile.<init>(RandomAccessFile.java:241)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at\u00a0org.apache.lucene.store.MMapDirectory.openInput(MMapDirectory.java:193)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at\u00a0org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoReader.read(Lucene40SegmentInfoReader.java:50)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at\u00a0org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:334)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at\u00a0org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:380)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at\u00a0org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:812)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at\u00a0org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:663)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at\u00a0org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:376)\n        at\u00a0org.apache.lucene.index.CheckIndex.checkIndex(CheckIndex.java:382)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at\u00a0org.apache.lucene.index.CheckIndex.main(CheckIndex.java:1854)\n\n\n\nYou can fake out the sanity checks by copying some other *.si file in place, and initial impression is that the tool works. "
        },
        {
            "id": "comment-14715983",
            "author": "Mike Drob",
            "date": "2015-08-27T02:54:16+0000",
            "content": "I've almost got a patch ready for this, probably will finish it up tomorrow. "
        },
        {
            "id": "comment-14716721",
            "author": "Mike Drob",
            "date": "2015-08-27T14:06:39+0000",
            "content": "This is a moderately invasive patch into SegmentInfos, so please review carefully. Adds an option to skip missing segments (currently only used by CheckIndex)and a couple of additional printed messages relating to this error. "
        },
        {
            "id": "comment-14717465",
            "author": "Michael McCandless",
            "date": "2015-08-27T20:26:04+0000",
            "content": "LUCENE-5947 is a dup of this issue ... "
        },
        {
            "id": "comment-14717482",
            "author": "Michael McCandless",
            "date": "2015-08-27T20:34:55+0000",
            "content": "skipMissing is a spooky option; if accidentally mis-used it can make you think you have all segments if you forget to check the missingSegmentInfo ... can we make this new API package private and leave the public API unchanged?\n\nShouldn't we also catch NoSuchFileException?\n\nCan you have the precise exception that was hit, and print it to the user from CheckIndex? "
        },
        {
            "id": "comment-14717759",
            "author": "Mike Drob",
            "date": "2015-08-27T23:33:54+0000",
            "content": "I'll make the methods package-private and add NoSuchFileException.\n\nIf the user specifies verbose option, then I added that we pass the infoStream to SegmentInfos from CheckIndex. Current behaviour is to print just the missing segment name - do you think there is additional value in the full trace? "
        },
        {
            "id": "comment-14718469",
            "author": "Michael McCandless",
            "date": "2015-08-28T12:30:36+0000",
            "content": "do you think there is additional value in the full trace?\n\nI think possibly?  E.g. it shows which codec (well, SegmentInfoFormat) is being used to load the SI, if it's a crazy format that needs 3 separate files to write the SegmentInfo, we'd see which file was missing, etc.  Plus the rest of CheckIndex generally shows the full exception of \"what went wrong\"... "
        },
        {
            "id": "comment-14718505",
            "author": "Mark Miller",
            "date": "2015-08-28T12:51:35+0000",
            "content": "Note to give Taiki Sugawara credit for the original bug report on this in LUCENE-5947. "
        },
        {
            "id": "comment-14720011",
            "author": "Mike Drob",
            "date": "2015-08-28T15:33:52+0000",
            "content": "I noticed that in LUCENE-5947 Taiki got an java.io.EOFException on the missing file. Perhaps it is better to catch all of IOException on that read? "
        },
        {
            "id": "comment-14720270",
            "author": "Michael McCandless",
            "date": "2015-08-28T17:21:51+0000",
            "content": "Perhaps it is better to catch all of IOException on that read?\n\nI think that makes sense, but it's maybe a bit spooky, e.g. it could include transient IO issues like too-many-open-files, but again so would the rest of the code in CheckIndex ... so I guess that makes sense? "
        }
    ]
}