{
    "id": "LUCENE-6259",
    "title": "Remove dependencies from binary releases",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "In LUCENE-6247, one idea discussed to decrease the size of release artifacts was to remove the inclusion of dependencies from binary releases.  These jar files increase the size of the binary releases a lot, and the size is mostly in a couple modules (eg benchmark and spatial).\n\nI think most people consume lucene through maven. For those that do use the binary release, we can still make pulling the dependencies for these modules easy. We can add a generated README file in each module that has dependencies, with instructions indicating they need to download the dependencies, and then give the list of jar files they need to download, with exact links to maven (which we can extract from ivy?).",
    "attachments": {
        "dependencies.txt": "https://issues.apache.org/jira/secure/attachment/12699699/dependencies.txt",
        "Fetch.java": "https://issues.apache.org/jira/secure/attachment/12699700/Fetch.java"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14327080",
            "author": "Dawid Weiss",
            "date": "2015-02-19T07:45:31+0000",
            "content": "Since it's developers we're talking about you could even include a small script (ant? maven? sh?) that would fetch all of them automatically, much like the build does already  "
        },
        {
            "id": "comment-14327082",
            "author": "Ryan Ernst",
            "date": "2015-02-19T07:47:58+0000",
            "content": "The only reason I was leaning away from that is I wouldn't know what tools could be assumed on any system. I figured a list of URLs is easy enough for someone to consume and then use wget/curl or whatever themselves. "
        },
        {
            "id": "comment-14327085",
            "author": "Dawid Weiss",
            "date": "2015-02-19T07:50:27+0000",
            "content": "You've already made some assumptions anyway (maven, wget/ curl are not available on Windows for example). But sure, a list of (direct) URLs is also fine since it can be simply pasted into a browser... "
        },
        {
            "id": "comment-14327147",
            "author": "Jan H\u00f8ydahl",
            "date": "2015-02-19T09:16:32+0000",
            "content": "What about \"java -jar get.jar deps.txt\"\nThat would be 20 lines of code \nThe same program could download javadocs too.. "
        },
        {
            "id": "comment-14327602",
            "author": "Adrien Grand",
            "date": "2015-02-19T15:02:44+0000",
            "content": "+1 on removing dependencies from binary releases.\n\nI think we should just provide a list of URLs and then let users worry about what download tool they want to use, whether they should validate checksums, etc. "
        },
        {
            "id": "comment-14327608",
            "author": "Mark Miller",
            "date": "2015-02-19T15:09:34+0000",
            "content": "I think we should just provide a list of URLs\n\nYeah, I agree that is probably enough, especially to get something done now, but it wouldn't hurt if someone wanted to go through the effort to have some readable format and an optional 'java -jar get.jar deps.txt' possible on top of it. For people that are not consuming this from maven, it lessons the user experience impact to have a single command that can pull in what you need. If it was complicated, it probably wouldn't be worth maintaining, but seems pretty simple. "
        },
        {
            "id": "comment-14327628",
            "author": "Adrien Grand",
            "date": "2015-02-19T15:23:04+0000",
            "content": "If it was complicated, it probably wouldn't be worth maintaining, but seems pretty simple.\n\nActually I was thinking it might not be simple. For instance where should it put the files, what should it do if the file already exists, if the download fails in the middle, if the sha1 does not match, how it should report progress so that users understand what is happening if it gets stuck, etc. "
        },
        {
            "id": "comment-14327674",
            "author": "Mark Miller",
            "date": "2015-02-19T16:03:39+0000",
            "content": "I think you could certainly make it complicated, but I write it very simply - like a script.\n\nIf a download fails, the command fails.\n\nWe don't check sha1 - the user can and should do this themselves.\n\nI wouldn't report progress.\n\nI'd just use java to try and download the files - keep it simple, keep it dumb - but for 99% of the users, they run one command and have their jars. "
        },
        {
            "id": "comment-14327676",
            "author": "Dawid Weiss",
            "date": "2015-02-19T16:06:08+0000",
            "content": "> I wouldn't report progress.\n\nI voluntarily commit to contributing the download progress indicator (console).  "
        },
        {
            "id": "comment-14327700",
            "author": "Dawid Weiss",
            "date": "2015-02-19T16:31:16+0000",
            "content": "Here is my humble contribution \n\njava -cp . Fetch dependencies.txt\n\n "
        },
        {
            "id": "comment-14327799",
            "author": "Ryan Ernst",
            "date": "2015-02-19T17:53:31+0000",
            "content": "Dawid Weiss Where would you suggest we put this Fetch.java in our source tree? And do you think the class file should then be placed in the root of each module with dependencies (your -cp .)? I'll continue working on the txt file generation...but IMO for the limited cases this will be used for (remember only some modules have dependencies), I don't think we need to be more complicated than just letting the user grab the jars themselves.  But if you have a plan for where this could go in a non weird way (putting the .class in each module's root is weird to me) then go for it.  "
        },
        {
            "id": "comment-14327806",
            "author": "Mark Miller",
            "date": "2015-02-19T17:56:34+0000",
            "content": "putting the .class in each module's root is weird to me\n\nYeah, couldn't we just have it start at the root of the checkout and look for dependencies.txt files down the tree? "
        },
        {
            "id": "comment-14327813",
            "author": "Mark Miller",
            "date": "2015-02-19T18:00:00+0000",
            "content": "I don't think we need to be more complicated than just letting the user grab the jars themselves\n\nWe can just move this to a follow on JIRA issue. "
        },
        {
            "id": "comment-14328083",
            "author": "Dawid Weiss",
            "date": "2015-02-19T20:38:17+0000",
            "content": "I don't know, Ryan, I just wanted to implement that progress indicator so badly... Id\u00e9e fixe.\n\nAnyway, more seriously \u2013 I agree with Mark that this should be top-level and simply fetch libraries in their appropriate locations; don't know if you noticed the 'saveTo' directive:\n\n#@saveTo lib/lucene/\nhttp://repo1.maven.org/maven2/org/apache/lucene/lucene-core/4.10.3/lucene-core-4.10.3.jar\nhttp://repo1.maven.org/maven2/org/apache/lucene/lucene-memory/4.10.3/lucene-memory-4.10.3.jar\n\n\n\nIf the tool is simple enough then it can be even embedded in one of the JARs (like other command-line tools to upgrade the index, etc.). No harm there I think. "
        },
        {
            "id": "comment-14328725",
            "author": "selckin",
            "date": "2015-02-20T09:23:52+0000",
            "content": "I understand maven isn't very popular, but putting a pom somewhere that downloads all the deps when you execute 'mvn' would be very simple "
        },
        {
            "id": "comment-14329124",
            "author": "Jan H\u00f8ydahl",
            "date": "2015-02-20T16:28:59+0000",
            "content": "In favor of keeping it super simple at first. If we ever need more robust or advanced resolving, I think ivy-2.3.0.jar contains all we need to insert a maven coordinate and get all artifacts downloaded, even javadoc and sources. But that's for another jira. "
        },
        {
            "id": "comment-16603003",
            "author": "David Smiley",
            "date": "2018-09-04T12:48:09+0000",
            "content": "I'm glad to see there's overall consensus, but this didn't go anywhere. What's the bare minimum amount of work to do? \u00a0I'm guessing that would be a build step to automatically generate one\u00a0\"dependencies.txt\" file (a text file of URLs). I could do this step for\u00a0Lucene 8. "
        }
    ]
}