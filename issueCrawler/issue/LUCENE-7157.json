{
    "id": "LUCENE-7157",
    "title": "Geo3DPoint implementation should pay attention to the ordering of lat/lon points",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "The LatLonPoint API implementation pays attention to the order of the points; \"clockwise\" means one side of the polygon boundary, and \"counterclockwise\" means the complement.  We need to use that in Geo3DPoint and convert into whatever the underlying GeoPolygonFactory method requires.",
    "attachments": {
        "LUCENE-7157.diff": "https://issues.apache.org/jira/secure/attachment/12796685/LUCENE-7157.diff",
        "LUCENE-7157.patch": "https://issues.apache.org/jira/secure/attachment/12796842/LUCENE-7157.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15220433",
            "author": "Karl Wright",
            "date": "2016-03-31T18:48:01+0000",
            "content": "The key observation is that any sequence of polygon points can be viewed from two perspectives.  One perspective is from any point on one side of the boundary, and another perspective is from any point on the other side of the boundary.  It so happens that your choice of point doesn't matter because from that point you always describe the same area based on the ESRI rules; the points appear to go clockwise if the point you chose is inside the area and appear to go counterclockwise if outside the area, from wherever you look at it.\n\nIf you consider the point you choose to be a \"pole\" (through the center of the earth), and you assess the angle delta between the pole and the previous point and the next point as being positive when clockwise from the top of the pole and negative when counterclockwise, then you will get a total angle as you march around the polygon of +360 if the points are clockwise, and -360 if they are not.  The only requirement is that the point you choose for a pole is not actually on the edge of the polygon.  That turns out to be the hardest thing to reliably insure about this algorithm.\n\nThe choice of pole point has to be made so that the point does not lie on a polygon edge.  If we pick a random point, we can just proceed until it blows up, and then try a different point.  The way it blows up is by either having no calculable angle between the pole and a point, or by computing a delta from the last point that is exactly 180 degrees.\n\nI'm a bit nervous using a completely random pole point but I can't think of any algorithmic way to come up with a known-safe point. "
        },
        {
            "id": "comment-15221563",
            "author": "Karl Wright",
            "date": "2016-04-01T11:23:19+0000",
            "content": "I have an implementation of this; adding tests because it is fairly complex math and needs thorough testing.\n\nRobert Muir: The explanation you gave earlier that was effectively that the sense of polygon direction didn't matter in 2D for the ways you were using it was tantamount to saying that an area that was on one side of a polygon edge was effectively equivalent to its complement on the other side of the polygon edge.  On the face of it, that cannot be true, except maybe in a 2D world where objects are always considered less in extent than 180 degrees, and it requires special casing to cross date lines etc.  So it is possible you have a bug you are unaware of.\n\nI also looked at your Polygon class and I am sure you are aware that it contains a significant amount of 2D implementation detail.  I cannot use that for Geo3D.  I had expected it to contain only a specification for a polygon and nested holes.  Not sure if you wanted to do anything to separate the concerns but it seems like a class used at the API level should not have implementation detail in it.\n\n\n "
        },
        {
            "id": "comment-15221574",
            "author": "Robert Muir",
            "date": "2016-04-01T11:36:04+0000",
            "content": "You can use it, you are just \"offended\" at the additional 2D methods? Please ignore them! They do not hurt you. "
        },
        {
            "id": "comment-15221576",
            "author": "Robert Muir",
            "date": "2016-04-01T11:39:34+0000",
            "content": "Here is where forking the code (as mike suggests) goes wrong. I disagree with mike, we should not do this. This stuff needs to be sorted out before pushing to master. I don't want to have to deduplicate it later when it can be prevented right here and now. "
        },
        {
            "id": "comment-15221579",
            "author": "Karl Wright",
            "date": "2016-04-01T11:40:36+0000",
            "content": "No offense intended.  I was just surprised is all. "
        },
        {
            "id": "comment-15221580",
            "author": "Karl Wright",
            "date": "2016-04-01T11:44:33+0000",
            "content": "Hi Robert,\nI'm not sure what you are talking about?  The only thing that has been forked, near as I can tell, is the implementation of GeoUtils.checkLatitude() and GeoUtils.checkLongitude().  That's relatively constrained.  I have not yet even begun to try to add the API method that requires Polygon objects; I'm trying to wait until the dust settles before doing that. But I was confused about some aspects of your API and am trying to figure out where you are coming from. "
        },
        {
            "id": "comment-15221608",
            "author": "Robert Muir",
            "date": "2016-04-01T12:08:12+0000",
            "content": "A few things:\n1. the fact that polygon has some 2d methods in it. I think its far too much to ask for me to worry about \"2d and 3d at once\" with LUCENE-7153. It is important users can do queries without using gigabytes of RAM. And additional 2d methods on this class are really not in your way, just ignore them.\n2. the fact that mike suggested on LUCENE-7153 to fork the polygon class, but now I hear you don't like things about it, or it won't work for you (not sure which it really is: if its just some extra methods really bothering you but not hurting you, or if you really need changes). I think we should not do this forking, i do not agree with him there.\n3. the fact this polygon logic may have bugs. Both GeoPointField and LatLonPoint boldly declare that these lat/lon arrays must be in clockwise or counterclockwise order. That is what their javadocs say. So if things aren't working, then thats a bug but we need tests and stuff, not \"the math doesnt look right to me\".\n\nI don't mean to be terse but there are a lot of other bugs (e.g. this quantization happening at least in 2d land is an absolute disaster) and so problems where \"I dont like the way it looks\", well, to me thats not serious. "
        },
        {
            "id": "comment-15221625",
            "author": "Karl Wright",
            "date": "2016-04-01T12:25:06+0000",
            "content": "but now I hear you don't like things about it, or it won't work for you (not sure which it really is: if its just some extra methods really bothering you but not hurting you, or if you really need changes). I think we should not do this forking, i do not agree with him there.\n\nJust to clarify: the class allows access to the polygon information directly, without going through methods that compute things, so I'm good with using it as is.  If those accessor methods weren't there I wouldn't be good with it.  But that is, as you say, a detail, and it can be worked out in the future.\n\nI'm trying quite hard here to follow your lead on API since you seem to be the person who is setting that.  I was suddenly handed a huge concern about how the Geo3DPoint API's looked and an utterly non-negotiable requirement that they look identical to the 2D APIs, and I've been scrambling to keep up ever since.  Mike's proposal to fork the Polygon class was his attempt to be helpful here, but I'm not going forward anyhow until all required API classes are publicly available within spatial3d, however that is done.\n\nThe same APIs implemented by multiple people independently do need to be semantically consistent.  Where I see potential issues I thought it would be good to raise them.  So I'm raising them.  I'm not in a position to write tests for the 2D stuff right now that might show the issues \u2013 I do have a day job \u2013 but please don't shoot the messenger.\n\n "
        },
        {
            "id": "comment-15222377",
            "author": "Karl Wright",
            "date": "2016-04-01T21:40:51+0000",
            "content": "Still working on this problem.\n\nThere are two issues \u2013 one having to do with pole selection, and the other having to do with polygons spanning more than 180 degrees.  I'm introducing GeoConcavePolygon to help handle the latter case but I need to rework the GeoPolygonFactory method that breaks up non-convex polygons to generate these, and that is turning out to be algorithmically complex.  Probably will be working on it all weekend... "
        },
        {
            "id": "comment-15222731",
            "author": "Robert Muir",
            "date": "2016-04-02T05:37:22+0000",
            "content": "\nJust to clarify: the class allows access to the polygon information directly, without going through methods that compute things, so I'm good with using it as is. If those accessor methods weren't there I wouldn't be good with it. But that is, as you say, a detail, and it can be worked out in the future.\n\nThe intent of this class in my eyes, was just to be a holder class only. E.g. something solely for users so we don't have apis taking double[][] or anything like that from the user. As simple as possible without e.g. Polygon/MultiPolygon/LineString/Ring/Hole/Builder/Factory etc. So the idea was a XYZPoint.newPolygonQuery(String field, Polygon...). This makes simple things simple and complex things possible with minimal API surface area.\n\nI do think it makes sense for it to have checks up-front so that illegal polygons are not possible to create. I also think this should map towards standard representations (like GeoJSON and WKT and so on) and it does. Ideally its as minimal as that.\n\nHowever, it currently serves extra duties: its not just dealing with user input, but also being \"held\" by queries for e.g. equals and hashcode. This also means it should be strictly immutable to avoid traps with query-caching. And we have to be careful since we are using arrays. But maybe this is a duty it should really have? Because we've had a considerable number of equals/hashcode bugs in Points so far!\n\nFinally it contains the 2D logic (contains/intersects/etc) that we have today simply because that was the safest, easiest to test way to cutover the two different 2D geo impls (GeoPoint and LatLonPoint) over with support for holes and multiple rings. Previously these were static methods taking e.g. 8-10 parameters and it was hard to enforce basics things (like bounding box checks always used before expensive polygon methods). \n\nI hope these 2D methods don't stay here too, mainly because I think we can make better-performing impls that scale better for complex polygons (LUCENE-7159). So i'd hope we'd move away from those methods and then they would go away as part of that issue. But we cannot do such things until we have better edge case testing. Historically testing was done with epsilons and i am battling a ton of edge case bugs in even stuff like basic bounding box queries. \n\nMaybe in the meantime we could try to move them to another place in the same package instead. With this representation, things cannot arbitrarily nest, so maybe they could just be static methods that use nested loops?\n\n\nI'm trying quite hard here to follow your lead on API since you seem to be the person who is setting that. I was suddenly handed a huge concern about how the Geo3DPoint API's looked and an utterly non-negotiable requirement that they look identical to the 2D APIs, and I've been scrambling to keep up ever since. Mike's proposal to fork the Polygon class was his attempt to be helpful here, but I'm not going forward anyhow until all required API classes are publicly available within spatial3d, however that is done.\n\nI think Nick's issue LUCENE-7163 will fix your problem there. As far as \"utterly non-negotiable requirement that 3D look identical to 2D apis\", I don't see it that way. Instead I'll ask, why wouldn't we offer a basic api with just one class that covers the major operations you can do? We can always offer expert apis some other way.\n\nTo me what geo3d does is implementation detail: the user shouldn't even need to know that 3d math is being used.\n\nJust like I don't think users need to deal with radians, I don't think they should know about concaveness either. I understand that geo3d is different, but it needs to not unload the challenges of 3d-ness onto the user but instead use it behind the scenes. "
        },
        {
            "id": "comment-15222743",
            "author": "Robert Muir",
            "date": "2016-04-02T06:09:45+0000",
            "content": "Karl: i also would like to know if we solve your problem by refining docs to say: outer rings should be clockwise, holes counter-clockwise. It would be great to enforce this as well, if we had a simple static method that could check a Polygon[] and ensure everything is well-formed. We would have to fix some tests.\n\nKeep in mind i didn't introduce the docs that say either order is acceptable. I merely moved methods around, and either works at the moment because of that.  "
        },
        {
            "id": "comment-15222975",
            "author": "Karl Wright",
            "date": "2016-04-02T17:48:42+0000",
            "content": "The attached patch has a significant reworking of polygon construction.  It passes basic tests.  However, it failed beasting once, which I need to look into, plus there's a disabled test that exercises detection of clockwise/counterclockwise.\n\nAttaching mostly so I don't inadvertantly lose stuff, since my git abilities are still limited... "
        },
        {
            "id": "comment-15223052",
            "author": "Karl Wright",
            "date": "2016-04-02T21:54:06+0000",
            "content": "Updated patch. "
        },
        {
            "id": "comment-15223053",
            "author": "Michael McCandless",
            "date": "2016-04-02T21:55:22+0000",
            "content": "This is getting biggish ... I'll push to a branch. "
        },
        {
            "id": "comment-15223056",
            "author": "Michael McCandless",
            "date": "2016-04-02T21:59:10+0000",
            "content": "OK I pushed the current patch to branch lucene-7157! "
        },
        {
            "id": "comment-15223203",
            "author": "Karl Wright",
            "date": "2016-04-03T10:36:38+0000",
            "content": "No more hash-order dependencies, and fix some of the logical errors found so far. "
        },
        {
            "id": "comment-15223226",
            "author": "Karl Wright",
            "date": "2016-04-03T11:45:32+0000",
            "content": "Everything is now working.\nMichael McCandless: This is ready for review.  There are a number of improvements here for polygons in general \u2013 namely, faster computation of intersections and bounds, along with ability to handle concave polygons.  There is one algorithmic area of concern with how we figure out clockwise/counterclockwise directionality during the construction.  This code is problematic because it generates a random pole repeatedly until it finds one that works.  It may be possible in future revs to reduce the search area for a good pole, but I doubt the need for randomness will go away ever entirely. "
        },
        {
            "id": "comment-15223692",
            "author": "Karl Wright",
            "date": "2016-04-04T05:52:06+0000",
            "content": "Just like I don't think users need to deal with radians, I don't think they should know about concaveness either. I understand that geo3d is different, but it needs to not unload the challenges of 3d-ness onto the user but instead use it behind the scenes.\n\nWhile I agree in general, there is a specification problem, which is that if you describe any polygon on the face of the earth by a series of points, there are two possible areas you are in fact describing \u2013 one on one side of the polygon, and one on the other.  Geo3D has always required some means of specifying which area the user means, but through ways that were difficult to use.  ESRI uses clockwise/counterclockwise to allow the user to describe which area the user means, which is a lot cleaner, and that is what this ticket is about.\n\nThe Lucene API's will need to make similar functionality available somehow.  I had thought that they adhered to the ESRI mechanism but I'm now confused whether this was what you actually intended to do.  I would love to have some confirmation one way or another before proceeding to manifest the clockwise/counterclockwise functionality into the official Geo3DPoint API. "
        },
        {
            "id": "comment-15223710",
            "author": "Karl Wright",
            "date": "2016-04-04T06:15:00+0000",
            "content": "Here's the latest; not much different from before but iterates over the directional test to be sure its inherent pole choice algorithm is not a factor.\n\nBeasting passes for me too. "
        },
        {
            "id": "comment-15224065",
            "author": "Robert Muir",
            "date": "2016-04-04T12:56:27+0000",
            "content": "Karl can you please keep the jira discussion linear? I know it has an anti-feature where it can behave threaded, but I'm steering clear of that.\n\nplease, answer this question instead of complaining about the Polygon class. I am trying to make it work for you but it seems you are more interested in random computations from the earth's poles!\n\n\nKarl: i also would like to know if we solve your problem by refining docs to say: outer rings should be clockwise, holes counter-clockwise. "
        },
        {
            "id": "comment-15224084",
            "author": "Karl Wright",
            "date": "2016-04-04T13:09:38+0000",
            "content": "I am sorry about the non-linearity.  And forget the talk about \"poles\", that's an implementation issue and actually is not about \"earth's poles\" in any sense.  I am happy to explain but it's not relevant to the API question.\n\nKarl: i also would like to know if we solve your problem by refining docs to say: outer rings should be clockwise, holes counter-clockwise.\n\nRobert Muir: The answer is no.  The description \"inner\" and \"outer\" are orthogonal to which side of the polygon the user means.  Would you like an example?  Here you go.\n\nSuppose you have the following polygon edge (described as lat,lon tuples):\n\n(0.0, -150.0)\n(25.0, 0.0)\n(0.0, 150.0)\n(-25.0, 0.0)\n(0.0, -150.0) // return leg\n\nThe point (0.0, 0.0) should be considered \"inside\" the polygon if the points above are in clockwise order, meaning as they are stated above.  But if they are in counter clockwise order, then you are talking about the complementary area:\n\n(0.0, -150.0)\n(-25.0, 0.0)\n(0.0, 150.0)\n(25.0, 0.0)\n(0.0, -150.0) // return leg\n\n... and the point (0.0, 0.0) is NOT inside the polygon.  But the point (0.0, -180.0) is.\n\nSo, in my opinion, the API javadoc needs to change to reflect this.\n\nAs for \"holes\", I'm happy with whatever convention you want to adopt.  Either holes are the reverse order of where they are embedded, or it's the same order.  But order, once again, does matter, and we'd want to stick with a convention.\n\nThanks! "
        },
        {
            "id": "comment-15224147",
            "author": "Robert Muir",
            "date": "2016-04-04T13:49:13+0000",
            "content": "Karl by outer rings i mean, non-holes. Maybe i caused some confusion with my terminology.\n\nPolygons (except holes) -> clockwise\nholes -> counterclockwise.\n\nThis is already required or at least recommended by many standards. I don't think its too much for us to require so that we can use fast algorithms. I really do think it can solve this issue. "
        },
        {
            "id": "comment-15224167",
            "author": "Karl Wright",
            "date": "2016-04-04T13:56:29+0000",
            "content": "Hi Robert,\n\nYes I think the terminology is confusing, so perhaps we already agree.  If the outer polygon is always \"clockwise\" that effectively establishes the choice of what is inside and outside, and this works for me.\n "
        },
        {
            "id": "comment-15224194",
            "author": "Robert Muir",
            "date": "2016-04-04T14:08:00+0000",
            "content": "ok, i think we should start with a javadocs fix? I'm hesitant to introduce any checks at the moment (at least we could theoretically enforce some checks with respect to holes), because of performance issues with our current polygon stuff. But let's set the API right. "
        },
        {
            "id": "comment-15224198",
            "author": "Karl Wright",
            "date": "2016-04-04T14:09:28+0000",
            "content": "+1 for javadocs fix "
        },
        {
            "id": "comment-15224249",
            "author": "Robert Muir",
            "date": "2016-04-04T14:38:27+0000",
            "content": "here is a quick patch at the docs: just refining what we have now, which is essentially nothing. "
        },
        {
            "id": "comment-15224369",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T15:51:09+0000",
            "content": "Commit 1040fcbf422929d8faa721dfeea78d10319ce883 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1040fcb ]\n\nLUCENE-7157\nAdd and use clockwise/counterclockwise construction of geo polygons\n\nAll code in place but isn't working\n\nAdd GeoConcavePolygon, and make more efficient intersection code for GeoConvexPolygon\n\nFinish code, but it fails tests due to looping\n\nFix some problems\n\nFix typo\n\nGet one test to run at least\n\nGet it to work\n\nTurn off debugging\n\nGet rid of unused code\n\nFix beasting failure\n\nBoundary edges have to use sided planes that are inverted in order to constrain the intersections right.\n\nAdd test\n\nUse a more rigorous membership structure for bounding edges.\n\nFix bounding issue\n\nRemove dependence on hash order\n\nGet everything working again\n\nGet everything working\n\nRemove System.out "
        },
        {
            "id": "comment-15224402",
            "author": "Karl Wright",
            "date": "2016-04-04T16:07:20+0000",
            "content": "+1 to apply; I can do it (I think  ) "
        },
        {
            "id": "comment-15224420",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T16:15:34+0000",
            "content": "Commit ed6f2b0d0c2bd8023949fd6113b4900c249643b0 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ed6f2b0 ]\n\nLUCENE-7157: Update API javadoc and Polygon method visibilities "
        },
        {
            "id": "comment-15224821",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T18:58:27+0000",
            "content": "Commit c2c68ece23df8248d59b3db9798e19c7692174b0 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c2c68ec ]\n\nLUCENE-7157: Fix up javadoc "
        },
        {
            "id": "comment-15224823",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T18:58:29+0000",
            "content": "Commit 94f8e108131337304f89ceec430dc33a2f3d1fe4 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=94f8e10 ]\n\nLUCENE-7157: More javadoc fixes "
        },
        {
            "id": "comment-15224824",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T18:58:30+0000",
            "content": "Commit 9bef6c000b913ea2ac1efe93aacf21d477178392 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9bef6c0 ]\n\nLUCENE-7157: More javadoc fixes "
        },
        {
            "id": "comment-15225019",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T20:49:28+0000",
            "content": "Commit 0399eb4b671f57a7e98f32e5a263e48d2c91a746 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0399eb4 ]\n\nLUCENE-7157\nAdd and use clockwise/counterclockwise construction of geo polygons\n\nAll code in place but isn't working\n\nAdd GeoConcavePolygon, and make more efficient intersection code for GeoConvexPolygon\n\nFinish code, but it fails tests due to looping\n\nFix some problems\n\nFix typo\n\nGet one test to run at least\n\nGet it to work\n\nTurn off debugging\n\nGet rid of unused code\n\nFix beasting failure\n\nBoundary edges have to use sided planes that are inverted in order to constrain the intersections right.\n\nAdd test\n\nUse a more rigorous membership structure for bounding edges.\n\nFix bounding issue\n\nRemove dependence on hash order\n\nGet everything working again\n\nGet everything working\n\nRemove System.out "
        },
        {
            "id": "comment-15225021",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T20:49:30+0000",
            "content": "Commit 882d1d440972d8aeb68d9bc302e232ed38fa934a in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=882d1d4 ]\n\nLUCENE-7157: Update API javadoc and Polygon method visibilities "
        },
        {
            "id": "comment-15225022",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T20:49:31+0000",
            "content": "Commit e509eb6851f2fa8a9ae163073c0491e4895dfe8e in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e509eb6 ]\n\nLUCENE-7157: Fix up javadoc "
        },
        {
            "id": "comment-15225024",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T20:49:33+0000",
            "content": "Commit 76f9e55431175b8ee30c6161fefd2f6cf6df84c4 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=76f9e55 ]\n\nLUCENE-7157: More javadoc fixes "
        },
        {
            "id": "comment-15225025",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T20:49:34+0000",
            "content": "Commit 974dc158e4511310c756df9a55c7f36ea773be19 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=974dc15 ]\n\nLUCENE-7157: More javadoc fixes "
        },
        {
            "id": "comment-15230996",
            "author": "ASF subversion and git services",
            "date": "2016-04-07T20:29:36+0000",
            "content": "Commit 9bef6c000b913ea2ac1efe93aacf21d477178392 in lucene-solr's branch refs/heads/apiv2 from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9bef6c0 ]\n\nLUCENE-7157: More javadoc fixes "
        }
    ]
}