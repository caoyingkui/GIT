{
    "id": "LUCENE-7736",
    "title": "Expose some IndexReader stats via DoubleValuesSources",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "New Feature",
        "components": [],
        "fix_versions": [
            "7.2"
        ]
    },
    "description": "We have a number of ValueSource implementations that expose IndexReader stats (numDocs, termFreq, etc).  We should re-implement these as DoubleValuesSources, allowing them to be used in FunctionScoreQuery, etc.",
    "attachments": {
        "LUCENE-7736.patch": "https://issues.apache.org/jira/secure/attachment/12857291/LUCENE-7736.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15904768",
            "date": "2017-03-10T09:20:15+0000",
            "content": "Here is a patch, implementing all the IndexReader-specific ValueSources as DoubleValuesSource (or LongValuesSource, in the case of norms), and adding a couple of extra ones that were missing (docCount, sumDocFreq, numDeletedDocs).  The IndexReaderFunctions class is currently in the queries module, but it could easily be in core instead.\n\nI haven't added the Similarity-specific sources here (idf, tf) - they could maybe added directly to TFIDFSimilarity in another issue ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15905422",
            "date": "2017-03-10T17:12:07+0000",
            "content": "I like the termFreq and reader constant values sources, I can imagine them to be useful to users. Can you add equals/methods to these new impls (LUCENE-7723)? (I'm thinking that one easy way to make equals/hashcode work for them could be to simply make them singletons)\n\nDoubleValuesSource (or LongValuesSource, in the case of norms)\n\nWhy are only norms a LongValuesSource? Should termFreq, docFreq, maxDoc and numDocs be longs as well?\n\nI'm curious whether you have a use-case for the joinDocFreq values sources, it looks very expensive and a bit esoteric to me. I'm also unsure how useful exposing raw norms is given that the value is an implementation detail of the similarity?\n\nThe IndexReaderFunctions class is currently in the queries module, but it could easily be in core instead.\n\n+1 to keep in queries for now ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15962570",
            "date": "2017-04-10T08:15:35+0000",
            "content": "I tried a few different ways of making these sources immutable, including holding a weak hashmap of reader ids on them, but in the end I think the cleanest API is to have a rewrite(IndexReader) method on Double/LongValuesSource.  This requires a couple of changes elsewhere in the codebase - we already have a Sort.rewrite() method, but it wasn't being called by IndexSearcher or SortRescorer, for example - but I think ends up with things being neater.\n\nI removed norms() and joinDocFreq(); all int-valued IndexReader methods now return a DoubleValuesSource, as an int can fit into a double with no loss of precision.  IndexReaderFunctions.sumTotalTermFreq() returns a LongValuesSource, as it delegates to a long-valued function.  If a user wants to use this in an expression, or similar, then they'll need to explicitly cast using .toDoubleValuesSource().\n\nA nice extra feature here would be to wrap these up in a Bindings implementation for the expressions module, which would require moving back into core, but that's for a follow-up issue, I think. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15963148",
            "date": "2017-04-10T16:46:25+0000",
            "content": "+1 ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15963149",
            "date": "2017-04-10T16:46:25+0000",
            "content": "+1 ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15963159",
            "date": "2017-04-10T16:48:52+0000",
            "content": "Looking at how rewrite is handled again, I'm wondering whether we should try to detect double rewrite, which is most likely a usage bug? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15963177",
            "date": "2017-04-10T16:55:21+0000",
            "content": "all int-valued IndexReader methods now return a DoubleValuesSource, as an int can fit into a double with no loss of precision\n\nIt's all well and good that there is no loss of precision but if the data is a whole number then wouldn't LongValueSource be more fitting/appropriate? ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15963970",
            "date": "2017-04-11T07:45:05+0000",
            "content": "I'm wondering whether we should try to detect double rewrite\n\nSo have an AssertingDoubleValuesSource?  I like that idea, although I'm not sure where it would get injected into the tests.\n\nwouldn't LongValueSource be more fitting/appropriate?\n\nDoubleValuesSource is used in more places though (FunctionScoreQuery, Expressions module), so I think it's more useable this way.  I guess I see LongValuesSource as a convenience wrapper, and DoubleValuesSource as the core API. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15963972",
            "date": "2017-04-11T07:46:11+0000",
            "content": "I think it makes sense for these values sources to return doubles natively as their main use-case is to be used for scoring, which needs to produce floats? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15963986",
            "date": "2017-04-11T08:05:51+0000",
            "content": "So have an AssertingDoubleValuesSource? I like that idea, although I'm not sure where it would get injected into the tests.\n\nIt is indeed harder than with eg. AssertingWeight. I guess one option would be to unwrap instances of FunctionScoreQuery and FunctionMatchQuery in AssertingIndexSearcher.rewrite to replace the values source with an asserting instance. However, I can't think of an easy way to do something similar when values sources are used for eg. sorting. Another option would be to put those assertions directly into existing implementations. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15963988",
            "date": "2017-04-11T08:06:38+0000",
            "content": "I was thinking about this: Why do we need a static-method-only helper class (that should have a private constructor, please!)? Would it not be possible to add these methods as default impls to LeafReader? I have not looked into the details, but this looks more easy to understand. I agree the current code can be separate from core, but once we move to core, I'd add that to the LeafReaders. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15963993",
            "date": "2017-04-11T08:09:27+0000",
            "content": "Sorry, those methods are global (on IndexReader, so also composites). So LeafReader is the wrong place. Nuke my comment.\n\nNevertheless the IndexReaderFunctions class should be final and have private ctor. Did not find the ctor, as it was at the very end. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15963996",
            "date": "2017-04-11T08:14:49+0000",
            "content": "Also add @FunctionalInterface to ReaderFunction interface for consistency!  ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16209089",
            "date": "2017-10-18T09:51:32+0000",
            "content": "Patch bringing this up-to-date.  Relevant changes are:\n\n\tIndexReaderFunctions is final, and I moved the constructor to the top for Uwe's sake \n\tEverything implements hashCode and equals now, which means concrete implementations rather than anonymous classes.\n\tOne wrinkle here is that we can't compare closures, so IndexReaderDoubleValuesSource only uses its description field for comparisons.  These are all private implementations, and there's a comment to that effect, so I think this is OK.\n\n\n\nI haven't added anything about checking for double-rewrite, as it doesn't really matter for any of the current implementations - everything either rewrites to a constant, or returns itself. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16209309",
            "date": "2017-10-18T13:15:18+0000",
            "content": "Final patch, all tests + precommit pass ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16210111",
            "date": "2017-10-18T21:56:06+0000",
            "content": "Thanks Alan. I think those new functions are going to be useful.\n\nOne wrinkle here is that we can't compare closures, so IndexReaderDoubleValuesSource only uses its description field for comparisons. These are all private implementations, and there's a comment to that effect, so I think this is OK.\n\nI think this is incorrect as two instances that have been built on a different reader will be considered equals even though they produce different values? Let's pass things that are actually comparable to IndexReaderDoubleValuesSource or just live with the fact that two instances that do the same thing are considered unequal (which is ok imo as long as a.equals(b) returns true if a == b)?\n\nShould we use == rather than equals to know whether the source was rewritten? I don't like one more than the other but since queries already use == I'd rather like things to be consistent?\n\nDid you remove the if (boost == 1f) return expl; from FunctionScoreQuery on purpose? I know it is not necessary for correctness but I still like the fact that it makes the explanation easier to read in the default case that the boost is 1.\n\nIn TermFreqDoubleValuesSource could we just return an empty instance if the term is not found instead of having to do a null check for every document?\n\nIn lucene/queries/src/java/org/apache/lucene/queries/function/ValueSource.java you seem to be assuming that rewriting only once is enough? Is it true?\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16210722",
            "date": "2017-10-19T08:24:06+0000",
            "content": "two instances that have been built on a different reader will be considered equals\n\nThis is true, but there aren't really any circumstances under which it would happen.  Comparison for equality is done when building queries or sorts, and these are indexreader independent.  It's only after a rewrite that the values would actually be different, and the only callers of rewrite are internal lucene classes.  It would be nice to enforce this somehow by making rewrite() protected, but unfortunately I think it's called from different packages/modules so this won't work.\n\nShould we use == rather than equals\n\nWill do.\n\nDid you remove the if (boost == 1f) return expl; from FunctionScoreQuery on purpose?\n\nYes; just returning the straight DVS explanation breaks things when the overall query matches, but the value source has no value - we end up returning Explanation.noMatch() from a document that matches, but has a zero score.\n\nre TermFreqDoubleValuesSource that's a nice idea, I'll add a DoubleValues.EMPTY instance and use that.\n\nrewriting only once is enough\n\nYes!  Perhaps I should add some javadoc making that explicit.  I really dislike the 'rewrite until things stay the same' API on Query... ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16210758",
            "date": "2017-10-19T09:15:11+0000",
            "content": "Patch including Adrien's suggestions.  This also changes rewrite() to take an IndexSearcher rather than an IndexReader, which is more useful for a follow-up issue I'll open in a moment. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16211070",
            "date": "2017-10-19T13:52:02+0000",
            "content": "Your point about using the description for equals is correct, but I still find it fragile. I think it's important for equals to behave correctly and never return true for values sources that could return different values.\n\nLooking again at the patch, I think you forgot to update FunctionMatchQuery to make it rewrite the values source?\n\nI really dislike the 'rewrite until things stay the same' API on Query...\n\nLet's open an issue about fixing it? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16211308",
            "date": "2017-10-19T16:27:11+0000",
            "content": "I think it's important for equals to behave correctly and never return true for values sources that could return different values.\n\nAh, I see what you mean - if we had a FunctionMatchQuery that was cached across multiple IndexSearcher reopens it would potentially return the wrong values, because the underlying DoubleValues defined by the top-level index readers.  I'll change things back again.\n\nI think you forgot to update FunctionMatchQuery\n\nI did, thanks for picking it up... ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16211325",
            "date": "2017-10-19T16:38:27+0000",
            "content": "In fact, should all of these just always return false from equals() in order to prevent them being cached and reused incorrectly? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16249791",
            "date": "2017-11-13T16:30:58+0000",
            "content": "Updated to master; all reader-specific functions here now return 'false' from isCacheable() ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16253520",
            "date": "2017-11-15T14:29:41+0000",
            "content": "Commit 03afeb7766a39996de3c85e8a6ab24d2a352dd1c in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=03afeb7 ]\n\nLUCENE-7736: IndexReaderValues ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16253521",
            "date": "2017-11-15T14:29:43+0000",
            "content": "Commit fefc9899588de9979c5c0973fec575e6c44de126 in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fefc989 ]\n\nLUCENE-7736: CHANGES.txt ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16253801",
            "date": "2017-11-15T17:01:52+0000",
            "content": "Commit 2a4dd499bbd2f5ed1f481e17eeaee4f32b927185 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2a4dd49 ]\n\nLUCENE-7736: IndexReaderValues ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16253802",
            "date": "2017-11-15T17:01:54+0000",
            "content": "Commit e53ce592baf3db5bd6290955a8175f51d432b532 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e53ce59 ]\n\nLUCENE-7736: CHANGES.txt ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16262975",
            "date": "2017-11-22T17:36:09+0000",
            "content": "Commit 3f0b240853dac1e9fad3b29042d9aaf6e9f0e634 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3f0b240 ]\n\nLUCENE-7736: CoveringQuery needs to rewrite its ValuesSource. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16263011",
            "date": "2017-11-22T17:55:50+0000",
            "content": "Commit 6b621ea659b5a81f98a432b4c5b4f061947b4c41 in lucene-solr's branch refs/heads/branch_7x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6b621ea ]\n\nLUCENE-7736: CoveringQuery needs to rewrite its ValuesSource. ",
            "author": "ASF subversion and git services"
        }
    ]
}