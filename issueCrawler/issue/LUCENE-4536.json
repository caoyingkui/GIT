{
    "id": "LUCENE-4536",
    "title": "Make PackedInts byte-aligned?",
    "details": {
        "components": [],
        "fix_versions": [
            "4.1"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Task",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "PackedInts are more and more used to save/restore small arrays, but given that they are long-aligned, up to 63 bits are wasted per array. We should try to make PackedInts storage byte-aligned so that only 7 bits are wasted in the worst case.",
    "attachments": {
        "LUCENE-4536.patch": "https://issues.apache.org/jira/secure/attachment/12552097/LUCENE-4536.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-11-05T13:33:50+0000",
            "content": "Patch. I added a test so that two assumptions that were made by callers are still true, even if you are reading packed ints streams generated with 4.0 with this patch applied:\n\n\tafter reading all values of a Readeriterator, the IndexInput is positioned at the end of the stream,\n\tafter reading the last value of a direct Reader, the IndexInput is positioned at the end of the stream.\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13490621"
        },
        {
            "date": "2012-11-06T13:37:12+0000",
            "content": "This patch only changes the on-disk format right?  The specialized\nin-memory readers are still backed by native arrays\n(short[]/int[]/long[], etc.)?\n\nInstead of PackedInts.VERSION_CURRENT = 1 can we add\nVERSION_BYTE_ALIGNED = 1 and then set VERSION_CURRENT =\nVERSION_BYTE_ALIGNED?\n\nAlso, can we leave VERSION_START = 0 (ie don't rename that to\nVERSION_LONG_ALIGNED)?  But we should put a comment saying that one\nwas long aligned ...\n\nIe, in general, I think the version constants should be created once\nand then not changed (write once), and VERSION_CURRENT changes to\npoint to whichever is most recent.\n\nThat careful anonymous subclass in PackedInts to handle seeking to the\nend when the last value is read is sort of sneaky ... this should only\nkick in when reading the old (long-aligned) format right?  Can you add\nan assert checking that the version is VERSION_START?  Or ... maybe\n... we should not \"promise\" this (no trailing wasted bytes) in the\nAPI?  Or maybe we expose a new explicit method to \"seek to the end of\nthis packed ints\" or something (eg maybe \"skipTrailingBytes\"). ",
            "author": "Michael McCandless",
            "id": "comment-13491449"
        },
        {
            "date": "2012-11-06T13:53:06+0000",
            "content": "This patch only changes the on-disk format right? The specialized in-memory readers are still backed by native arrays (short[]/int[]/long[], etc.)?\n\nExactly.\n\nIe, in general, I think the version constants should be created once and then not changed (write once), and VERSION_CURRENT changes to point to whichever is most recent.\n\nOk, I'll change it.\n\nThat careful anonymous subclass in PackedInts to handle seeking to the end when the last value is read is sort of sneaky ... this should only kick in when reading the old (long-aligned) format right?\n\nThis only happens when reading the old format AND the number of bytes used to serialized the array is not a multiple of 8. I'll add an assert to make sure that this condition can only be true with the old format.\n\nOr ... maybe... we should not \"promise\" this (no trailing wasted bytes) in the API?\nOr maybe we expose a new explicit method to \"seek to the end of this packed ints\" or something (eg maybe \"skipTrailingBytes\").\n\nThese were my first ideas, but the truth is that I was very scared to break something (for example doc values rely on the assumption that after reading the last value of a direct array, the whole stream is consumed). Fixing PackedInts to make sure those assumptions are still true looked easier to me as I was able to create \"fake\" long-aligned packed ints and make sure that the whole stream was consumed after reading the last value.\n\nBut your option makes perfect sense to me and I will do it if you think it is cleaner.\n\nThanks for the review! ",
            "author": "Adrien Grand",
            "id": "comment-13491456"
        },
        {
            "date": "2012-11-06T14:34:33+0000",
            "content": "These were my first ideas, but the truth is that I was very scared to break something (for example doc values rely on the assumption that after reading the last value of a direct array, the whole stream is consumed).\n\nIt's hard to know what's best \n\nI like the explicitness / transparency / no sneaky code solution of\n.skipTrailingBytes().\n\nBut then I don't like that skipTrailingBytes would only be for back\ncompat (ie, we will remove it eventually, unless somehow we go back to\nwasted trailing bytes) ... annoying to add essentially a deprecated\nAPI.\n\nBut then really it's \"presumptuous\" of the consumers of PackedInts to\nexpect all bytes are consumed after iterating all values ... like\nthat's making a sometimes invalid assumption about the file format of\nPackedInts.\n\nAnd this is an internal API so we are free to change things ..\n\nBut net/net I think we should stick w/ your current patch? ",
            "author": "Michael McCandless",
            "id": "comment-13491479"
        },
        {
            "date": "2012-11-07T00:34:11+0000",
            "content": "New patch including Mike's suggestions:\n\n\tVERSION_LONG_ALIGNED renamed to VERSION_START,\n\tVERSION_CURRENT aliased to VERSION_BYTE_ALIGNED,\n\tadded an assert that the sneaky direct reader impl can only be instantiated if the stream has been produced with VERSION_START.\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13491987"
        },
        {
            "date": "2012-11-07T14:48:44+0000",
            "content": "Committed:\n\n\ttrunk: r1406651\n\tbranch 4.x: r1406660\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13492390"
        },
        {
            "date": "2013-03-22T16:19:19+0000",
            "content": "[branch_4x commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1406660\n\nLUCENE-4536: Make PackedInts on-disk format byte-aligned (merged from r1406651).\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13610584"
        }
    ]
}