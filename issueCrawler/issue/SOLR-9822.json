{
    "id": "SOLR-9822",
    "title": "Improve faceting performance with FieldCache (single-valued string counts only)",
    "details": {
        "components": [
            "Facet Module"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "7.0",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "This issue will try to specifically address the performance regressions of faceting on FieldCache fields observed in SOLR-9599.",
    "attachments": {
        "SOLR-9822_lambda.patch": "https://issues.apache.org/jira/secure/attachment/12841657/SOLR-9822_lambda.patch",
        "SOLR-9822.patch": "https://issues.apache.org/jira/secure/attachment/12841650/SOLR-9822.patch",
        "SOLR-9822_OrdValues.patch": "https://issues.apache.org/jira/secure/attachment/12841980/SOLR-9822_OrdValues.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-12-03T22:39:39+0000",
            "author": "Yonik Seeley",
            "content": "Here's a test patch just to experiment with performance.  It adds back an \"array style\" getOrd(int doc) to single valued fields in the FieldCache and uses that in dv faceting (currently just when computing counts only). ",
            "id": "comment-15718861"
        },
        {
            "date": "2016-12-03T23:00:41+0000",
            "author": "Yonik Seeley",
            "content": "Performance results of faceting on different fields...\nThe 3 versions tested were: Solr from 09/09, Solr from 12/03, Solr from 12/03 + patch\nSolr from 09/09 is used as the baseline (old_time):\n\n\n\n\n field cardinality \n 12/03/2016 new_time / old_time \n patch new_time/old_time \n\n\n10\n1.52\n0.97\n\n\n100\n1.52\n0.98\n\n\n1000\n1.54\n0.96\n\n\n10000\n1.54\n1.00\n\n\n100000\n1.45\n0.99\n\n\n1000000\n1.16\n0.99\n\n\n\n\n\nTwo takeaways:\n\n\tthe advanceExact changes that Adrien introduced had a positive impact vs the initial results in SOLR-9599... the worst-case dropped from 2x slower to 1.5x\n\tthe patch in this issue fully restores the lost performance (plus a little due to an additional minor optimization)\n\n ",
            "id": "comment-15718886"
        },
        {
            "date": "2016-12-03T23:06:24+0000",
            "author": "Yonik Seeley",
            "content": "Now that we've seen we can get the performance back for the FieldCache (for operations where we control the client at least), I'm going to experiment with potential ways to avoid special-casing everywhere that needs to use this by somehow encapsulating the specialization and perhaps allow customizations via passing lambdas. ",
            "id": "comment-15718894"
        },
        {
            "date": "2016-12-04T02:19:28+0000",
            "author": "Yonik Seeley",
            "content": "Attached is my attempt at using lambdas to factor out the specialized code and avoid duplication.  Unfortunately, it resulted in a 15% performance degredation vs the previous patch, which means it probably isn't inlining as hoped.  Anyone have any ideas on how to fix? ",
            "id": "comment-15719131"
        },
        {
            "date": "2016-12-04T03:52:23+0000",
            "author": "David Smiley",
            "content": "In FacetFieldProcessorByArrayDV.collectCounts, the lambda leads with if (ord >= 0) but why would it ever be less?  Even if it is superfluous, I doubt removing that would help.  I like the approach with the lambdas but it's a shame it isn't fast.  I'm skeptical there's something we're missing to make this approach faster; I suspect HotSpot wants to see the loop and code it calls clearly without some generic indirection point (be it a marker interface or lambda; whatever).\n\nI'm more interested in faceting performance without the FieldCache as I hope users use it less and less.  I think FC should be opt-in explicitly.   ",
            "id": "comment-15719247"
        },
        {
            "date": "2016-12-04T14:42:19+0000",
            "author": "Yonik Seeley",
            "content": "the lambda leads with if (ord >= 0) but why would it ever be less? \n\nThe code before the iterator switch-over had the same check since getOrd(doc) returned -1 for \"missing\".\nFor iterator style, ordValue() will never return -1 anymore, so the branch will be predictable in that case. ",
            "id": "comment-15720050"
        },
        {
            "date": "2016-12-06T15:52:47+0000",
            "author": "Yonik Seeley",
            "content": "Here's another approach (attached): an OrdValues wrapper (and factory method) that return specialized instances.  The loop is kept in the \"client\" code.  Quick performance testing show only about a 3% improvement over the lambda approach. ",
            "id": "comment-15725874"
        },
        {
            "date": "2016-12-06T16:40:14+0000",
            "author": "Yonik Seeley",
            "content": "I'm more interested in faceting performance without the FieldCache\n\nI'm afraid that probably less can be done there.  The crux of the issue is that what was one virtual method call to get an ord for a document is now two. ",
            "id": "comment-15725997"
        },
        {
            "date": "2016-12-06T18:49:42+0000",
            "author": "Yonik Seeley",
            "content": "I tried yet another approach of bulk gathering the id+ord in an array and then looping over that in the calling code, but it was much slower than the lambda (although still faster than current master w/o patching by 10%).  Still slow enough I won't bother attaching the patch.\n\nIn the spirit of progress over perfection, we should probably just commit the first approach (since it gives a 50% speedup in those cases.), but limited to the two call sites in that patch (in FacetFieldProcessorByArrayDV).  We shouldn't over-generalize the results found here.  It may be that a lambda-type approach will work better in other contexts, and those will need to be tested.  It's also the case that encapsulating this logic will make it easier to introduce/maintain additional optimizations such as actually using the skipping of the docvalues iterator when it's sparse vs our domain set). ",
            "id": "comment-15726360"
        },
        {
            "date": "2016-12-07T16:10:06+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ca5e736db1df0cdf35f1b039350bfd5a9cdfa102 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ca5e736 ]\n\nSOLR-9822: speed up single-valued string fieldcache counting in dv facet processor ",
            "id": "comment-15729123"
        },
        {
            "date": "2016-12-07T16:12:11+0000",
            "author": "Yonik Seeley",
            "content": "Since I don't know when I'm going to be able to get to the other cases, I committed the current fixes and changed the description of this issue to reflect that it only fixes a narrow case. ",
            "id": "comment-15729130"
        }
    ]
}