{
    "id": "SOLR-8808",
    "title": "SolrJ deleteById causes missing content stream exception",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "7.6",
            "master (8.0)"
        ],
        "affect_versions": "5.5",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "client.deleteById(new ArrayList<String>()); \n\n\n\nCauses\n\n\norg.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException: Error from server at http://127.0.0.1:50083/collection1: Error from server at http://127.0.0.1:50083/control_collection: missing content stream\n        at __randomizedtesting.SeedInfo.seed([6C4973F1A077B797:65D362791DA8A1AD]:0)\n        at org.apache.solr.client.solrj.impl.HttpSolrClient.executeMethod(HttpSolrClient.java:576)\n        at org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:240)\n        at org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:229)\n        at org.apache.solr.client.solrj.SolrRequest.process(SolrRequest.java:149)\n        at org.apache.solr.client.solrj.SolrClient.commit(SolrClient.java:482)\n        at org.apache.solr.client.solrj.SolrClient.commit(SolrClient.java:463)\n\n\n\nAlthough this is not a big issue, it had me puzzled for a while. A test unrelated to one i was working on started sending empty deletes. Causing above trace.\n\nPerhaps SolrJ should guard for empty input, just ignore and return.",
    "attachments": {
        "SOLR-8808.patch": "https://issues.apache.org/jira/secure/attachment/12793417/SOLR-8808.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-13T19:12:15+0000",
            "author": "Jason Gerlowski",
            "content": "+1 for this JIRA.\n\nSolrJ code tends to take a laissez-faire approach to validating inputs, which has a tendency for allowing odd errors to crop up down the line.  This is a good example of that.  Would love to see this get fixed here (and elsewhere in SolrJ at large, as a separate story).\n\nAnyone see any downsides to fixing this that I might be missing?\n ",
            "id": "comment-15192487"
        },
        {
            "date": "2016-03-14T22:23:14+0000",
            "author": "Jason Gerlowski",
            "content": "Uploaded patch contains changes to SolrClient.java.  It also adds a simple test to a few SolrClient related test-files that verify the behavior.\n\nOne aspect of this change that I hadn't thought about when I first saw it is that deleteById has an UpdateResponse return value.  Since this patch changes deleteByid to not send a request when no IDs were given, it's not super clear what the best value to return here is.  The patch I uploaded just returns a blank value type created via the no-arg ctor.\n\nThis means that in practice, a SolrJ user could call deleteById() and get a return value just fine.  But if they go to pull out the request timestamp, or the headers later on, they could get bitten by an NPE.  So while it looks like this patch is an obvious improvement, it really might just kick the can down the road a bit and lead to errors later on.\n\nThat said, I still think it's an improvement, and this is the right thing to do.  Just wanted to call it out in case anyone has a suggestion for getting around that limitation. ",
            "id": "comment-15194284"
        },
        {
            "date": "2018-10-12T21:23:39+0000",
            "author": "Jason Gerlowski",
            "content": "Picking this guy back up in a bit of time I have.  \n\nLooks like the missing content stream error is produced by all 4 SolrClient impl's in this case.\n\nThere's a few options for how we can handle this:\n\n1. Return a dummy response\n2. Head off the RSE by checking whether the list is null/empty initially and throwing a clearer exception (IllegalArgumentException)\n3. Correct the underlying request code in HttpSolrClient and ConcurrentUpdateSolrClient to handle this case.\n\nMy vote for fixing this is to (2).  We can make the exception message much better to clear up any potential confusion.  And since the behavior already throws an exception, the change won't risk breaking any clients.\n\nI initially liked the idea of returning a dummy response, but now that Solr's update API returns some useful data (the \"rf\" field) that people could be looking at and acting on, mocking up a dummy response seems a little sketchy. ",
            "id": "comment-16648458"
        },
        {
            "date": "2018-10-14T02:16:03+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 6d1b2e2f38a8979c65c1a208a0dd4cfc2de951ed in lucene-solr's branch refs/heads/master from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6d1b2e2 ]\n\nSOLR-8808: Add null/empty check to SolrClient.deleteByIds ",
            "id": "comment-16649217"
        },
        {
            "date": "2018-10-14T02:17:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 6f6e4b8368e5b913fbe9b070e4c8b82e0ca53920 in lucene-solr's branch refs/heads/branch_7x from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6f6e4b8 ]\n\nSOLR-8808: Add null/empty check to SolrClient.deleteByIds ",
            "id": "comment-16649219"
        }
    ]
}