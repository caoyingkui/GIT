{
    "id": "LUCENE-3610",
    "title": "Revamp spatial APIs that use primitives (or arrays of primitives) in their args/results so that they use strongly typed objects",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/spatial"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "My \"spatial awareness\" is pretty meek, but LUCENE-3599 seems like a prime example of the types of mistakes that are probably really easy to make with all of the Spatial related APIs that deal with arrays (or sequences) of doubles where specific indexes of those arrays (or sequences) have significant meaning: mainly latitude vs longitude.\n\nWe should probably reconsider any method that takes in double[] or multiple doubles to express latlon pairs and rewrite them to use the existing LatLng class \u2013 or if people think that class is too heavyweight, then add a new lightweight class to handle the strong typing of a basic latlon point instead of just passing around a double[2] or two doubles called \"x\" and \"y\" ...\n\n\npublic static final class SimpleLatLonPointInRadians {\n  public double latitude;\n  public double longitude;\n}\n\n\n\n...then all those various methods that expect lat+lon pairs in radians (like DistanceUtils.haversine, DistanceUtils.normLat, DistanceUtils.normLng, DistanceUtils.pointOnBearing, DistanceUtils.latLonCorner, etc...) can start having APIs that don't make your eyes bleed when you start trying to understand what order the args go in.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-30T00:47:10+0000",
            "content": "I think we should just avoid using \"x\" and \"y\", and use \"lat\" and \"lon\".\nThe error was in parameter naming only, but was never apparent to me because when I saw \"x\", I thought \"first parameter\" which is \"lat\" in a lat,lon pair (and this is why the params were always passed correctly... it didn't cause confusion until someone with more geo experience looked at it). ",
            "author": "Yonik Seeley",
            "id": "comment-13159714"
        },
        {
            "date": "2011-11-30T00:51:24+0000",
            "content": "That's one example ... some of the other methods i was mentioned deal with (either as an argument or as a result) two element arrays of doubles ... which one comes first in the array? ... you can't fix that by renaming the variable.\n\nin either case: is there really any downside against having a simple object that wraps the latlon pair so you always know which one is which?  is the RAM/GC overhead of an object like i described really significant compared to a double[2] ? ",
            "author": "Hoss Man",
            "id": "comment-13159718"
        },
        {
            "date": "2011-11-30T01:25:47+0000",
            "content": "in either case: is there really any downside against having a simple object that wraps the latlon pair so you always know which one is which?\n\nWe should always do lat first (and I believe we do).\n\nis the RAM/GC overhead of an object like i described really significant compared to a double[2] ?\n\nThe object (compared to a double[]) could actually be better - no array bounds checks.  If you're only talking about replacing double[2] w/ an object, I'm all for it.  Otherwise, it's case by case - it depends if it's going to be used in an inner loop. ",
            "author": "Yonik Seeley",
            "id": "comment-13159729"
        },
        {
            "date": "2013-07-23T18:44:21+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716923"
        },
        {
            "date": "2014-04-16T12:54:29+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970770"
        }
    ]
}