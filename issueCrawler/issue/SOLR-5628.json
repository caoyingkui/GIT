{
    "id": "SOLR-5628",
    "title": "Cloud test harness can cause index files to be deleted before IndexWriter is closed",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SolrCloud",
            "Tests"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "This bug was orriginally opened because Jenkins uncovered a test seed that causes a reproducible IndexWriter assertion failure in TestDistribDocBasedVersion on the 4x branch.\n\nMcCandless helped dig in and believe that something in the way the solr test framework is setup is causing the test to delete the index dirs before the IndexWriter is being closed. Meanwhile, the failures later reproduced in other seeds on both 4x and trunk \u2013 and it appears that recent changes caused the nature of the failure to change, so that now \u2013 in addition to the IndexWriter assertion failure \u2013 the test cleanup also stalls out and the test runner has to terminate some stalled threads.\n\nOne interesting factor about this test is that at the end of the test there were docs that had been added that were not committed \u2013 which is probably unusually for most tests, and may explain why more cloud tests aren't exhibiting similar symptoms more often.\n\nWhen a useless (from perspective of what the test is trying to verify) \"commit\" was added to the test, the failing seed stoped reproducing.\n\nAn example of how to reliably reproduce this problem on an (older version of) trunk...\n\n\nsvn update -r 1574381 && ant clean && cd solr/core && ant test  -Dtestcase=TestDistribDocBasedVersion -Dtests.seed=1249227945045A2E -Dtests.slow=true -Dtests.locale=ko_KR -Dtests.timezone=America/Monterrey -Dtests.file.encoding=ISO-8859-1\n\n\n\nOriginal email thread...\n\nhttps://mail-archives.apache.org/mod_mbox/lucene-dev/201401.mbox/%3Calpine.DEB.2.02.1401100930260.20275@frisbee%3E",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13869802",
            "date": "2014-01-13T18:32:22+0000",
            "content": "Comments from McCandless based on his investigation...\n\n\nOK, this seems to be a test bug: somehow, the main thread is removing\nthe entire index directory from the filesystem, before another thread\ncalls IW.close.\n\nI can see the test opens 5 IW instances, and then things run fine, and\nthen the 5 IWs are closed in sequence in a thread, but in the main\nthread is returning (randomized testing prints \"OK      20.1s |\nTestDistribDocBasedVersion.testDistribSearch\") before the last 2 IWs\nare closed.\n\nSo somewhere in the main thread, something is concurrently removing\nthe index directory before the last 2 IWs are closed.\n\nI tried passing -Dtests.leaveTemporary=true and the test still fails,\nso I don't think it's test-framework that's removing the index dir; I\nthink it's something somewhere in Solr's test infrastructure?\n\nProbably there is just a missing call somewhere to cleanly shutdown\nall cores before cleaning up?\n\nOK, indeed, I tried passing -Dsolr.test.leavedatadir=true (thanks\nRob!) and that makes the test pass.\n\nSo somewhere this test just needs to properly close things before\nremoving filesystem directories.\n\nHowever, when i attempted to add -Dsolr.test.leavedatadir=true -Dtests.leaveTemporary=true I could still reproduce the failure.\n\nMeanwhile, the specific behavior of the failure seems to have changed slightly between  r1556643 and r1557798\n\nHere's the failure on branch_4x as of r1556643 ...\n\n\n   [junit4]    > Throwable #1: com.carrotsearch.randomizedtesting.UncaughtExceptionError: Captured an uncaught exception in thread: Thread[id=137, name=Lucene Merge Thread #0, state=RUNNABLE, group=TGRP-TestDistribDocBasedVersion]\n   [junit4]    > Caused by: org.apache.lucene.index.MergePolicy$MergeException: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([791402573DC76F3C]:0)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:545)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:518)\n   [junit4]    > Caused by: java.lang.AssertionError\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter._mergeInit(IndexWriter.java:3807)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.mergeInit(IndexWriter.java:3791)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3644)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:405)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:482)Throwable #2: com.carrotsearch.randomizedtesting.UncaughtExceptionError: Captured an uncaught exception in thread: Thread[id=138, name=Lucene Merge Thread #0, state=RUNNABLE, group=TGRP-TestDistribDocBasedVersion]\n   [junit4]    > Caused by: org.apache.lucene.index.MergePolicy$MergeException: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([791402573DC76F3C]:0)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:545)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:518)\n   [junit4]    > Caused by: java.lang.AssertionError\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter._mergeInit(IndexWriter.java:3807)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.mergeInit(IndexWriter.java:3791)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3644)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:405)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:482)\n   [junit4] Completed in 29.76s, 1 test, 2 errors <<< FAILURES!\n   [junit4] \n   [junit4] \n   [junit4] Tests with failures:\n   [junit4]   - org.apache.solr.cloud.TestDistribDocBasedVersion (suite)\n   [junit4] \n   [junit4] \n   [junit4] JVM J0:     0.41 ..    31.03 =    30.62s\n   [junit4] Execution time total: 31 seconds\n   [junit4] Tests summary: 1 suite, 1 test, 2 suite-level errors\n\n\n\n... but if you then svn update to r1557798...\n\n\n   [junit4]   2> 167814 T9 ccr.ThreadLeakControl.checkThreadLeaks SEVERE 2 threads leaked from SUITE scope at org.apache.solr.cloud.TestDistribDocBasedVersion: \n   [junit4]   2> \t   1) Thread[id=113, name=searcherExecutor-42-thread-1, state=WAITING, group=TGRP-TestDistribDocBasedVersion]\n   [junit4]   2> \t        at sun.misc.Unsafe.park(Native Method)\n   [junit4]   2> \t        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n   [junit4]   2> \t        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n   [junit4]   2> \t        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)\n   [junit4]   2> \t        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)\n   [junit4]   2> \t        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1131)\n   [junit4]   2> \t        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n   [junit4]   2> \t        at java.lang.Thread.run(Thread.java:701)\n   [junit4]   2> \t   2) Thread[id=93, name=searcherExecutor-32-thread-1, state=WAITING, group=TGRP-TestDistribDocBasedVersion]\n   [junit4]   2> \t        at sun.misc.Unsafe.park(Native Method)\n   [junit4]   2> \t        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n   [junit4]   2> \t        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n   [junit4]   2> \t        at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)\n   [junit4]   2> \t        at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)\n   [junit4]   2> \t        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1131)\n   [junit4]   2> \t        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n   [junit4]   2> \t        at java.lang.Thread.run(Thread.java:701)\n\n...\n\n   [junit4] ERROR   0.00s | TestDistribDocBasedVersion (suite) <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: ERROR: SolrIndexSearcher opens=19 closes=17\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([791402573DC76F3C]:0)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.endTrackingSearchers(SolrTestCaseJ4.java:335)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.afterClass(SolrTestCaseJ4.java:139)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:701)Throwable #2: com.carrotsearch.randomizedtesting.ThreadLeakError: 2 threads leaked from SUITE scope at org.apache.solr.cloud.TestDistribDocBasedVersion: \n   [junit4]    >    1) Thread[id=113, name=searcherExecutor-42-thread-1, state=WAITING, group=TGRP-TestDistribDocBasedVersion]\n   [junit4]    >         at sun.misc.Unsafe.park(Native Method)\n   [junit4]    >         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n   [junit4]    >         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n   [junit4]    >         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1131)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n   [junit4]    >         at java.lang.Thread.run(Thread.java:701)\n   [junit4]    >    2) Thread[id=93, name=searcherExecutor-32-thread-1, state=WAITING, group=TGRP-TestDistribDocBasedVersion]\n   [junit4]    >         at sun.misc.Unsafe.park(Native Method)\n   [junit4]    >         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n   [junit4]    >         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n   [junit4]    >         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1131)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n   [junit4]    >         at java.lang.Thread.run(Thread.java:701)\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([791402573DC76F3C]:0)Throwable #3: com.carrotsearch.randomizedtesting.ThreadLeakError: There are still zombie threads that couldn't be terminated:\n   [junit4]    >    1) Thread[id=113, name=searcherExecutor-42-thread-1, state=WAITING, group=TGRP-TestDistribDocBasedVersion]\n   [junit4]    >         at sun.misc.Unsafe.park(Native Method)\n   [junit4]    >         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n   [junit4]    >         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n   [junit4]    >         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1131)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n   [junit4]    >         at java.lang.Thread.run(Thread.java:701)\n   [junit4]    >    2) Thread[id=93, name=searcherExecutor-32-thread-1, state=WAITING, group=TGRP-TestDistribDocBasedVersion]\n   [junit4]    >         at sun.misc.Unsafe.park(Native Method)\n   [junit4]    >         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n   [junit4]    >         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n   [junit4]    >         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1131)\n   [junit4]    >         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n   [junit4]    >         at java.lang.Thread.run(Thread.java:701)\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([791402573DC76F3C]:0)Throwable #4: com.carrotsearch.randomizedtesting.UncaughtExceptionError: Captured an uncaught exception in thread: Thread[id=137, name=Lucene Merge Thread #0, state=RUNNABLE, group=TGRP-TestDistribDocBasedVersion]\n   [junit4]    > Caused by: org.apache.lucene.index.MergePolicy$MergeException: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([791402573DC76F3C]:0)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:545)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:518)\n   [junit4]    > Caused by: java.lang.AssertionError\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter._mergeInit(IndexWriter.java:3817)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.mergeInit(IndexWriter.java:3801)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3654)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:405)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:482)Throwable #5: com.carrotsearch.randomizedtesting.UncaughtExceptionError: Captured an uncaught exception in thread: Thread[id=138, name=Lucene Merge Thread #0, state=RUNNABLE, group=TGRP-TestDistribDocBasedVersion]\n   [junit4]    > Caused by: org.apache.lucene.index.MergePolicy$MergeException: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([791402573DC76F3C]:0)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:545)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:518)\n   [junit4]    > Caused by: java.lang.AssertionError\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter._mergeInit(IndexWriter.java:3817)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.mergeInit(IndexWriter.java:3801)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3654)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:405)\n   [junit4]    > \tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:482)\n   [junit4] Completed in 171.33s, 1 test, 1 failure, 4 errors <<< FAILURES!\n   [junit4] \n   [junit4] \n   [junit4] Tests with failures:\n   [junit4]   - org.apache.solr.cloud.TestDistribDocBasedVersion (suite)\n   [junit4] \n   [junit4] \n   [junit4] JVM J0:     0.41 ..   172.56 =   172.15s\n   [junit4] Execution time total: 2 minutes 52 seconds\n   [junit4] Tests summary: 1 suite, 1 test, 5 suite-level errors\n\n\n\n\nThe key question being: what changed on 4x between these two versions that causes these zombie threads on top of the existing problem? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13869826",
            "date": "2014-01-13T18:50:19+0000",
            "content": "One thing that may be making this test special is that at the end of the test, docs have been added that are not committed \u2013 which may be why more cloud tests aren't exhibiting similar symptoms more often.\n\nI attempted to clone this test and then prune it down to try and distill out the bare bones of what was wrong, but ran into an interesting discovery: the exact same test class, with only the name changed, doesn't fail using the same seed.\n\n(note: i've verified the following steps on branch_4x both using r1556643 and r1557806)\n\n\nhossman@frisbee:~/lucene/4x_dev$ cat solr/core/src/test/org/apache/solr/cloud/TestDistribDocBasedVersion.java | perl -pe 's/TestDistribDocBasedVersion/TestUncommitedDocsInCloudTest/s' > solr/core/src/test/org/apache/solr/cloud/TestUncommitedDocsInCloudTest.java\nhossman@frisbee:~/lucene/4x_dev$ diff solr/core/src/test/org/apache/solr/cloud/TestDistribDocBasedVersion.java solr/core/src/test/org/apache/solr/cloud/TestUncommitedDocsInCloudTest.java\n37c37\n< public class TestDistribDocBasedVersion extends AbstractFullDistribZkTestBase {\n---\n> public class TestUncommitedDocsInCloudTest extends AbstractFullDistribZkTestBase {\n55c55\n<   public TestDistribDocBasedVersion() {\n---\n>   public TestUncommitedDocsInCloudTest() {\nhossman@frisbee:~/lucene/4x_dev$ ant clean && cd solr/core && ant test  -Dtestcase=TestUncommitedDocsInCloudTest -Dtests.seed=791402573DC76F3C -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=ar_IQ -Dtests.timezone=Antarctica/Rothera -Dtests.file.encoding=US-ASCII\n\n...\n\n   [junit4] JVM J0:     0.41 ..    32.98 =    32.56s\n   [junit4] Execution time total: 33 seconds\n   [junit4] Tests summary: 1 suite, 1 test\n     [echo] 5 slowest tests:\n[junit4:tophints] 231.44s | org.apache.solr.util.SimplePostToolTest\n[junit4:tophints] 203.23s | org.apache.solr.cloud.BasicDistributedZkTest\n[junit4:tophints] 126.58s | org.apache.solr.cloud.TriLevelCompositeIdRoutingTest\n[junit4:tophints] 111.38s | org.apache.solr.cloud.CollectionsAPIDistributedZkTest\n[junit4:tophints] 106.55s | org.apache.solr.cloud.BasicDistributedZk2Test\n\n "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13870084",
            "date": "2014-01-13T22:45:38+0000",
            "content": "the exact same test class, with only the name changed, doesn't fail using the same seed.\n\nThis is by design, Hoss. The input seed for a class is mangled with class name. See LuceneTestCase's header:\n\n@SeedDecorators({MixWithSuiteName.class}) // See LUCENE-3995 for rationale.\n\n\nand refer to LUCENE-3995 for  more.\n\nIn general, the seed is valid for repros only if nothing changes at the code level. It's much like uncertainty principle \u2013 if you change the tiniest bit that affects randomization the execution paths may (and should) change (a lot). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13870123",
            "date": "2014-01-13T23:34:59+0000",
            "content": "In general, the seed is valid for repros only if nothing changes at the code level\n\nYeah, i completely understand the value add ... it just caught me off guard and was really confusing and unexpected.  Makes it tricky to try and create new tests that reproduce the essence of individual random failures.\n\n(I tried to clone the failing test with a new name, and then run lots of random iters to find a seed that would fail so i could start pruning the test down to just it's essenace for reproducing, and after 300 loops of \"while ant test -Dtestcase=NewTestName ... ; do echo \"Still Going\" >> counter.txt; done\" i still hadn't found one so i gave up for now) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13922687",
            "date": "2014-03-06T16:13:21+0000",
            "content": "Commit 1574941 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1574941 ]\n\nSOLR-5628: work arround for this test to avoid whatever bug is in the cloud test framework "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13922694",
            "date": "2014-03-06T16:15:03+0000",
            "content": "I've edited the description to reflect the updated state of things, since i've been able to commit a work around to the original test that manifested the problem with the cloud test framework. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13922697",
            "date": "2014-03-06T16:17:19+0000",
            "content": "Commit 1574942 from hossman@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1574942 ]\n\nSOLR-5628: work arround for this test to avoid whatever bug is in the cloud test framework (merge r1574941) "
        }
    ]
}