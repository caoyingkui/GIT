{
    "id": "SOLR-9959",
    "title": "SolrInfoMBean-s category and hierarchy cleanup",
    "details": {
        "components": [
            "metrics"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "7.0",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Blocker"
    },
    "description": "SOLR-9947 changed categories of some of SolrInfoMBean-s, and it also added an alternative view in JMX, similar to the one produced by SolrJmxReporter.\n\nSome changes were left out from that issue because they would break the back-compatibility in 6.x, but they should be done before 7.0:\n\n\tremove the old JMX view of SolrInfoMBean-s and improve the new one so that it's more readable and useful.\n\tin many cases SolrInfoMBean.getName() just returns a FQCN, but it could be more informative - eg. for highlighter or query plugins this could be the symbolic name of a plugin that users know and use in configuration.\n\ttop-level categories need more thought. On one hand it's best to minimize their number, on the other hand they need to meaningfully represent the functionality of components that use them. SOLR-9947 made some cosmetic changes, but more discussion is necessary (eg. QUERY vs. SEARCHHANDLER)\n\twe should consider removing some of the methods in SolrInfoMBean that usually don't return any useful information, eg. getDocs, getSource() and getVersion().",
    "attachments": {
        "SOLR-9959.patch": "https://issues.apache.org/jira/secure/attachment/12860125/SOLR-9959.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-09T16:57:39+0000",
            "author": "Andrzej Bialecki",
            "content": "There's also considerable duplication of code responsible for reporting metrics in components that implement both SolrInfoMBean and SolrMetricProducer. We should investigate whether SolrInfoMBean.getStatistics() is needed at all - statistics reported by this method theoretically can be equally well reported using the metrics API. ",
            "id": "comment-15903382"
        },
        {
            "date": "2017-03-15T19:19:46+0000",
            "author": "Andrzej Bialecki",
            "content": "The first round of changes removed getDocs, getSource and getVersion, which rarely (if ever) provided any useful information. The old JMX reporting mechanism via JmxMonitoredMap has been removed as well in favor of the new JmxReporter.\n\nAfter initial investigation it looks like it's possible to completely replace SolrInfoMBean.getStatistics() with metrics. There will be some back-compat breakage (e.g. it's unlikely that the bean names will be preserved in the output of /admin/mbeans) but the benefit will be a great simplification of the code and bringing all statistics under the same metrics API umbrella. I'll continue making changes towards that goal.\n\nI created a branch jira/solr-9959 where I keep the current state of changes - I welcome all interested parties (Otis Gospodnetic, Walter Underwood, Yonik Seeley, Alan Woodward, others?) to review and chime in, the sooner the better  ",
            "id": "comment-15926798"
        },
        {
            "date": "2017-03-23T12:19:56+0000",
            "author": "Andrzej Bialecki",
            "content": "This second round removes SolrInfoMBean.getStatistics() and replaces it with metrics. Even though the diff is sizeable it was a pretty straightforward replacement. All tests and precommit pass.\n\nHowever, there are some aspects of this round of changes that may raise a few eyebrows  so please speak up if they concern you:\n\n\tback-compatibility is NOT preserved, in fact it's broken both at the level of Java APIs and REST APIs. I made sure that all statistics that were available via /admin/mbeans are also present in the metrics API, but metric paths are different from the /admin/mbeans paths, even though the metric names (their last elements) are almost always the same (I changed a few nonCamelCase names).\n\tSolrCache implementations used to return snapshots of their internal state as statistics, including optional details such as cache entries. This didn't play well with the metrics API, where all individual metrics should be registered in advance, and then unregistered when they are no longer necessary, because we didn't know when cache entries would be evicted. The solution was to implement a dynamic map-like metric MetricsMap that is registered as a single metric but returns a Map value. We may want to use the same approach for jetty metrics, too.\n\tmetrics API doesn't maintain the origin of metric instances, ie. the mapping back from a particular metric to a component that registered the metric is not supported. This makes it impossible to ask the API for all metrics for a component, which is what the /admin/mbeans used to provide. On the other hand, the /admin/metrics API provides a much more structured view of related metrics even if they come from different components.\n\n\n\nTODOs:\n\n\tSolrCore.infoRegistry used to be central to the JMX reporting. Now that this functionality has been separated to JmxReporter and metrics API it only serves a limited purpose as an informative registry of plugins (plugin lifecycle is not managed by this registry). This information is then provided via PluginInfoHandler and SolrInfoMBeanHandler. We should decide whether to add more useful information here or to remove it completely.\n\n ",
            "id": "comment-15938183"
        },
        {
            "date": "2017-03-23T12:21:29+0000",
            "author": "Andrzej Bialecki",
            "content": "Latest patch, which is sizeable - it's probably better to review this as individual commits in branch jira/solr-9959. ",
            "id": "comment-15938187"
        },
        {
            "date": "2017-03-24T12:10:54+0000",
            "author": "David Smiley",
            "content": "Since this back-compat break is for 7.0, I think it's fine.  (I didn't review the patch) ",
            "id": "comment-15940224"
        },
        {
            "date": "2017-03-28T01:56:51+0000",
            "author": "Hoss Man",
            "content": "\n\nI don't understand this comment...\n\n... This makes it impossible to ask the API for all metrics for a component, which is what the /admin/mbeans used to provide. On the other hand, the /admin/metrics API provides a much more structured view of related metrics even if they come from different components.\n\nWhy is this impossible?\n\nI see that on the jira/solr-9959 branch, using /admin/mbeans?stats=true (and the Plugin/Stats screen in the UI) is useless (the stats param is now completely ignored) but meanwhile if I go to /admin/metrics I can \"ask\" for all of the stats for all components (or filter the list a variety of ways) ... so why can't /admin/mbeans use the same code /admin/metrics to loop/filter over the reported metrics for each \"mbean\" ?\n\nSpecifically...\n\n\n\tSince I (as a user) can do these:\n\t\n\t\thttp://localhost:8983/solr/admin/metrics?group=solr.core.techproducts&prefix=CACHE\n\t\thttp://localhost:8983/solr/admin/metrics?group=solr.core.techproducts&prefix=CACHE.searcher.queryResultCache\n\t\n\t\n\tWhy can't I get the same info from these:\n\t\n\t\thttp://localhost:8983/solr/techproducts/admin/mbeans?stats=true&cat=CACHE\n\t\thttp://localhost:8983/solr/techproducts/admin/mbeans?stats=true&cat=CACHE&key=queryResultCache\n\t\n\t\n\n\n\n?\n\nI don't mind breaking back compat (particularly for internal java APIs) when needed to make overall improvements but in this case it seems like we're breaking HTTP request/param level APIs (and the Admin UI) unneccessarily if the underlying info is still accessible from /admin/metrics.\n\nAt worst it seems like maybe we could add a new SolrMetricManager.SuffixFilter to let /admin/mbeans \"search\" for metrics assocaited with the cat and key combo it's currently dealing with as it loops over items?\n\nBut AFAICT an even cleaner/simpler solution would be:\n\n\tadd a {{default MetricsMap getMetricsMap() \n{return null;}\n }} to SolrInfoBean (to replace getStatistics())\n\tany class implementing both SolrInfoBean and SolrMetricProducer could implement initializeMetrics(...) such that it keeps a private reference to a MetricsMap it registers & return that from getMetricsMap()\n\t\n\t\tmany of the SolrInfoBean classes already seem to be maintaining a private MetricsMap metricsMap; that is assigned in initializeMetrics(...) but never used (in the class) after that\n\t\n\t\n\t/admin/mbeans can call getMetricsMap() on each SolrInfoBean it loops over if stats=true\n\n\n\n(I realize even if we do this a lot of things available from /admin/metrics still wouldn't be available from /admin/mbeans?stats=true \u2013 but that's totally reasonable.  More significantly, this would \u2013 IIUC \u2013 let us ensure everything currently available from /admin/mbeans?stats=true is still available moving forward, minimizing breakage for existing consumers of /admin/mbeans.  If/when they want more advanced stuff, they can switch to /admin/metrics)\n\n\n\nOther misc quesions/comments about the branch in no particular order...\n\n\n\tin general it would be helpful if this branch/jira included a text file listing all the major release-note/ref-guide updates needed once this lands so people can fully grasp whats changing from a users perspective: /admin/mbeans vs /admin/metrics, enabling JMX, JMX config options no longer supported (see below), etc...\n\n\n\n\n\t/admin/metrics\n\t\n\t\tWhy doesn't /admin/metrics expose an param for the SolrMetricManager.RegexFilter ?\n\t\t\n\t\t\tMaybe it does and it's just not obvious?\n\t\t\n\t\t\n\t\t(When) Are we going to expose /admin/metrics via the Admin UI?\n\t\t\n\t\t\tEven if we \"fix\" the problems w/ /admin/mbeans?stats=true mentioned above (so that the Plugins/Stats screen starts working) having some sort of UI screen exposting all the metrics now supported seems like a good idea.\n\t\t\tIf we can't fix the /admin/mbeans?stats=true the way i suggested above, then adding a roughly equivilent UI screens using /admin/metrics seems like it should be a blocker for landing this branch.\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\tThis branch modifies the ivy.xml and IDE config files for dataimporthandler to have a compile dependency on io.dropwizard.metrics/metrics-core \u2013 but that doesn't actaully seem to be neccessary to compile/test DIH\n\t\n\t\ttemp/abandondoned API refactorying that needs reverted?\n\t\n\t\n\n\n\n\n\tLFUCache and FastLRUCache still have comments that refer to the (removed) getStatistics() method.\n\n\n\n\n\tI see this comment about fieldCache registration in SolrCore...\n\nSolrFieldCacheBean solrFieldCacheBean = new SolrFieldCacheBean();\n// XXX this should be registered at the CONTAINER level because it's not core-specific!\nsolrFieldCacheBean.initializeMetrics(metricManager, coreMetricManager.getRegistryName(), null);\ninfoRegistry.put(\"fieldCache\", solrFieldCacheBean);\n\n\n\t\n\t\tSince UninvertingReader is now a solr level class, and we're making non-compat changes for 7.0 anyway, why don't we:\n\t\t\n\t\t\tRegister a \"global\" new SolrFieldCacheBean() at the container level as the comment suggests we should.\n\t\t\tAdd a new verion of UninvertinterReader.getUninvertedStats(IndexReader) that filters the CacheEntry[] based on the IndexReader.CacheKey of the reader passed in ... and any of it's leaf readers!\n\t\t\t\n\t\t\t\tOr ... I suppose technically we should recursively use reader.getContext().getChildren() because there might be intermediate wrappers? maybe?\n\t\t\t\n\t\t\t\n\t\t\tuse the new UninvertinterReader.getUninvertedStats(IndexReader) in a new SolrFieldCacheBean(searcher.getIndexReader()) registered at the core/searcher level via CACHE.searcher.fieldCache (like all the other searcher/reader related caches)\n\t\t\n\t\t\n\t\tEven if we want to punt the idea for a new UninvertinterReader.getUninvertedStats(IndexReader) method to a new jira and wory about it later, I don't see any reason why this jira/branch shouldn't go ahead and move the fieldCache metrics to be a the container level (like the comment suggests)\n\t\t\n\t\t\tfor backcompat, we can still (for now) put a new SolrFieldCacheBean() in the infoRegistry of every core ... assuming we also fix /admin/mbeans?stats=true as i suggested above, then those fieldCache \"stats\" should still be available as they always have been /admin/mbean users.\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\tMetricType\n\t\n\t\tthis error (String) shouldn't be hardcoded, we should build it up from EnumSet.allOf(MetricType.class)...\n\n    } catch (IllegalArgumentException e) {\n      throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, \"Invalid metric type in: \" + types + \" specified. Must be one of (all, meter, timer, histogram, counter, gauge)\", e);\n    }\n\n\n\t\tWe could have a public static final String SUPPORTED_TYPES_MSG = ... in MetricType to create this String-ified list only once on class load.\n\t\n\t\n\n\n\n\n\tJMX, in general, doesn't seem to be working as documented (in the ref guide) for the examples on this branch\n\t\n\t\tie: bin/solr -e techproducts -Dcom.sun.management.jmxremote + jconsole shows no (solr) level metrics/stats.\n\t\tIt appears this is because (on this branch) solr metrics are only exposed via JMX if there is a SolrJmxReporter configured in solr.xml ?\n\t\t\n\t\t\tif so this is a pretty big change, and definitely needs some docs/release noting it.\n\t\t\tIt also raises some big questions:\n\t\t\t\n\t\t\t\tShould solr/server/solr/solr.xml be updated to include SolrJmxReporter so it works with the examples ?\n\t\t\t\tAt a minimum should it be updated to conditionally set a reporter based on sysprops by bin/solr based on ENABLE_REMOTE_JMX_OPTS ?\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\tPersonally, I think we should consider implicitly registering a SolrJmxReporter based on the same criteria that are currently checked on master when an empty <jmx/> is found: null!=JmxUtil.findFirstMBeanServer()\n\t\t\n\t\t\tthat way if users configure a JMX MBeanServer via bin/solr or solr.in.sh options, they'll automatically get Solr Metrics exposed via JMX\n\t\t\tthe only reason the very legacy JmxMonitoredMap based code was written to require <jmx/> before doing any of this was in case a user was deplying Solr to an appserver along with many other apps, and you only wanted JMX stats from your appserver or other apps \u2013 but not Solr.\n\t\t\t\n\t\t\t\tThat ship has sailed and I don't think we need to worry about it.\n\t\t\t\tif people start bin/solr with options to enable JMX, let's go ahead and expose Solr Metrics via JMX\n\t\t\t\tif, for some reason, some users really want jetty level JMX stats, but not solr level JMX, then let's offer some type of option to disable Solr level JMX metric reporting ... perhaps a NoopSolrJmxReporter they can be configure in solr.xml ?\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\n\tSolrConfig & JmxMonitoredMap\n\t\n\t\twith these changes, it's very clear that <jmx .../> configuration in solrconfig.xml is now deliberately ignored, but...\n\t\t\n\t\t\tnearly all of the sample (and many of the test) solrconfig.xml files on this branch still include/document <jmx .../> and it's varous options.  All of that still needs cleaned up on this branch before merging to master.\n\t\t\tat a minimum: if a <jmx/> XML node is found in a solrconfig.xml file, Solr should log a WARN/ERROR w/message indicating that syntax is no longer supported & being ignored (and give people a pointer to the new way to configure JMX)\n\t\t\n\t\t\n\t\thow much of the existing config options that <jmx .../> supports are/should be available with SolrJmxReporter in solr.xml ?\n\t\tthe old style config supported per-core agentId, serviceUrl, or rootName attributes...\n\t\t\n\t\t\trootName doesn't seem to be supported in SolrJmxReporter\n\t\t\t\n\t\t\t\tthis is probably fine.\n\t\t\t\tthat option dates back to deploying multiple solr.war files to a single appserver, something we're not supporting anymore\n\t\t\t\n\t\t\t\n\t\t\tthe agentId option was created to address the possibility of multiple JMX MBeanServers existing in the JVM on startup (possible because multiple apps each launched their own) and this way you could deterministicly indicate which one Solr should service it's stats from.\n\t\t\t\n\t\t\t\tit looks like this is currently supported by SolrJmxReporter, but i'm not sure if it needs to be? i guess it doesn't hurt?\n\t\t\t\n\t\t\t\n\t\t\thow serviceUrl is handled is something I'm more on the concerned about...\n\t\t\t\n\t\t\t\tthe use case motivation of supporting this attribute in the <jmx ... /> config syntax was that the JVM might/might-not be configured to service a platform level MBeanServer and serve jVM metrics, but each individual core could individually run it's own MBeanServer (w/it's own port & security options) \u2013 to better isolate what stats diff JMX clients could see.\n\t\t\t\tThis serviceUrl feature never really evolved with SolrCloud, but perhaps now is the time when it should?\n\t\t\t\tAs implemented in SolrJmxReporter this appears (AFAICT) to now only be configurable at a \"container wide\" level (in solr.xml)\n\t\t\t\tIt would be nice if there was a way to configure multiple JMX MBeanServer instances (on each solr node) that only expose metrics from specific collections (such that metrics from those collections would not be available via the platform MBeanServer even if it was enabled via started by the command line options).\n\t\t\t\t\n\t\t\t\t\tNot sure if/where/how it would make sense to expose some configuration like this, or even if it's worth pursuing (let alone pursuing right now) but I wanted to point out the original point of serviceUrl in case anyone has any ideas.\n\t\t\t\t\tCould we perhaps enhance the SolrMetricReporter base class so that all types of reporters could be configured with inclusion/exclusion rules based on collection name?\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\tTesting JMX w/solr.xml changes...\n\t\n\t\tI manually modified solr/server/solr/solr.xml to include a SolrJmxReporter to continue to test JMX support\n\t\tWith this change, using bin/solr -e techproducts -Dcom.sun.management.jmxremote + jconsole did start to expose a lot of metrics via JMX \u2013 but many of the solr realated MBeans exposed don't seem very useful...\n\t\t\n\t\t\tNotably: when I went to look at the CACHE related MBeans (ex: filterCache), each one was exposing only a single \"Attribute\" named \"Value\" (with MBeanAttributeValueInfo.Type==Object) which appears to contain the toString (or perhaps an array of name=value strings?) of the various cache stats (ie: lookups, cumulative_lookups, hitratio, etc...)\n\t\t\tThis is vastly different from master where this sort of toString info is used as the MBean's Description but each one of those individual \"metrics\" are exposed as individual MBean Attributes with the expected MBeanAttributeValueInfo.Type (Long, Long, Float, etc...)\n\t\t\tEven in the single \"Value\" Attribute that is exposed, some really useful info currently available as MBean Attributes seems to be missing, notably: \"description\" (from the toString()), and \"name\" (the class implementing the cache)\n\t\t\tNot being able to access the individual (strongly typed!) cache \"stats\" as MBean Attributes seems like a major step backwards?\n\t\t\n\t\t\n\t\tperplexingly, w/ the modified solr.xml file, running bin/solr -e techproducts (NOTE: no command line args to use JMX) still caused Solr to run an MBeanServer that I could connect to with jconsole and use to view the same solr metrics.\n\t\t\n\t\t\tpresumably this is because of the this code in SolrJmxReporter which doesn't really make sense to me....\n\n      ManagementFactory.getPlatformMBeanServer(); // Ensure at least one MBeanServer is available.\n\n\n\t\t\tSetting asside my earlier suggestions that we should consider changing our \"default\" behavior when bin/solr / solr.in.sh is configured to run the JVM with JMX enabled, this code as is doesn't follow the existing precendent of JmxMonitoredMap to be a no-op unless:\n\t\t\t\n\t\t\t\tan MBeanServer is started at the process/appserver level (ie: command line args)\n\t\t\t\tan agentId or serviceUrl is explicitly configured\n\t\t\t\n\t\t\t\n\t\t\tIn general it seems like the the intended where/how/why to configure Solr to publish metrics via JMX is now fairly confusing...\n\t\t\t\n\t\t\t\tif the intent here is that moving forward users must configure a SolrJmxReporter in solr.xml, and they must configure a serviceUrl at that point to control access, then we definitely need to think through how we're deprecating/replacing the various things bin/solr currently does with ENABLE_REMOTE_JMX_OPTS=true (and if/how serviceUrl's can support configuration of things like com.sun.management.jmxremote.local.only, etc...  \u2013 i have no idea if they can)\n\t\t\t\n\t\t\t\n\t\t\tMy 2cents: expanding on my suggestion above regarding solr's default JMX behavior...\n\t\t\t\n\t\t\t\tI think all calls to ManagementFactory.getPlatformMBeanServer() should be removed from SolrJmxReporter, and that class should be a No-Op unless: either agentId/serviceUrl is explicitly configured OR an already existing MBeanServer is found (via JmxUtil.findFirstMBeanServer())\n\t\t\t\tI think that if no metrics reporters (or perhaps specifically no SolrJmxReporter instances?) are configured in solr.xml, CoreContainer (or some equivilent) should check JmxUtil.findFirstMBeanServer() and implicily register an SolrJmxReporter instance if the MBeanServer is non-null.\n\t\t\t\tthat way command line JVM options (should be) the end all be decider as to whether a Platform MBeanServer is launched, and if so: then Solr metrics be exposed via JMX by default.  If users want something more fancy they can override with explicit SolrJmxReporter / SolrJmxNoopReporter configurations\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\tother uses of ManagementFactory.getPlatformMBeanServer() ...\n\t\n\t\tI see now that as part of the earlier metrics work, SolrDispatchFilter was also modified to call ManagementFactory.getPlatformMBeanServer() \u2013 evidently so that the Metrics API can access JVM level MBeans?\n\t\t\n\t\t\tThis explains why (on both this branch and on master) running bin/solr is all it takes to be able to connect to the process via jconsole \u2013 even w/o solr.xml changes or command line args requesting that the JVM enable JMX services.\n\t\t\tI don't think it's a good idea for Solr to be forcing the JVM to spin up MBeanServer instances & accepting JMX connections, w/o the user running/configuring solr explicitly requesting that \u2013 particularly in the case of this SolrDispatchFilter code which seems to run even if the user doesn't care about metrics/JMX at all!\n\t\t\tIt seems like the BufferPoolMetricSet and OperatingSystemMetricSet classes used in SolrDispatchFilter should probably be using the various *MXBean impls available directly from ManagementFactory w/o needing an MBeanServer to be running\n\t\t\t\n\t\t\t\tsee examples of doing this in SystemInfoHandler\n\t\t\t\n\t\t\t\n\t\t\tbut if an MBeanServer is really the only way to bridge these type of OS/JVM level info into the metrics code then at a minimum we should change SolrDispatchFilter to also use JmxUtil.findFirstMBeanServer() and if the MBeanServer returned is null skip registering these metrics (in their place: log an info message, and/or register a simple String constnat metric, that certain metrics are only available if JMX is enabled)\n\t\t\n\t\t\n\t\tIn general, I think it's a really bad idea for any (non-test) Solr level code to be calling ManagementFactory.getPlatformMBeanServer() ... we should probably consider marking it as a forbidden-api!\n\t\n\t\n\n\n\n\n\tI'm -1 on removing TestJmxIntegration\n\t\n\t\tif we need to change the JMX ObjectNames we look for to match the new metrics based code, and/or change the test init to ensure SolrJmxReporter is used by the CoreContainer (depending on what decisions are made about default behavior) \u2013 then so be it.\n\t\tbut it seems really important to have a simple test like this sanity checking some simple Solr metrics via a JMX MBeanServer\n\t\t\n\t\t\tYes i see CollectionsAPIDistributedZkTest and SolrJmxReporterTest...\n\t\t\t\n\t\t\t\tCollectionsAPIDistributedZkTest is trusting the JMX stats to check that instanceDirs don't collide, not doing anything to ensure that JMX is reutrning expected values.   (Independent of the current Jira, this test should almost certaily be re-written to check this some other way)\n\t\t\t\tSolrJmxReporterTest creates some random metrics \u2013 that's not really a good integration test of the metrics/JMX code to check that external clients can find specific Solr metrics like Searcher's \"numDocs\" (or filterCache's \"lookups\"), or that the values of those metrics are updated when expected (and to the expected value) based on actions that happen in solr (ie: docs added to the index, queries executed with an fq, etc...)\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\tRequestHandlersTest\n\t\n\t\ttestStatistics has been removed, but why isn't there a new equivilent replacement test/asserts using some internal metrics API?\n\t\n\t\n\n\n\n\n\tCollectionsAPIDistributedZkTest\n\t\n\t\tNote this change...\n\n         } catch (Exception e) {\n+          log.info(e.toString());\n           // ignore, just continue - probably a \"category\" or \"source\" attribute\n           // not found\n         }\n\n\n\t\tif this comment is still valid: then logging the exception here seems like shot term debuging code that should not be committed\n\t\tif this comment is no longer valid based on the other changes in the loop above this, then the comment should be deleted\n\t\tif the log message is still useful, then it should log the Exception (w/stack trace), not the toString()\n\t\n\t\n\n\n\n\n\tMetricUtils\n\t\n\t\tall of these (newly) public methods should have javadocs explaining their function / intended purpose\n\t\n\t\n\n\n\n\n\tSolrCore\n\t\n\t\tusing _notset_ and _auto_ as special values here for the collection & shardId metrics seems like a really bad idea.  In both cases...\n\t\t\n\t\t\tif we're not in cloud mode, then it seems like we shouldn't report a collection name or a shardId as part of the metrics at all\n\t\t\tif we're in cloud mode, then isn't it an error if either collection name or shardId are null?\n\t\t\t\n\t\t\t\teven if there is some situation i'm not thinking of where these might be legitimately null (in cloud mode), can't/shouldn't we just return NULL for these metric instead of trying to use magic string values that client code might missinterpret?\n\t\t\t\tif NULL isn't an option, then throwing an exception seems better then using magic strings that might be missinterpreted/missused by client code\n\t\t\t\tIE: I'd rather some automated client code get a failure trying to access the metric named \"collection\" then get a value that the client code might try to use down the line to query for a collection and gets a weird 404 error later.\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\n\n ",
            "id": "comment-15944393"
        },
        {
            "date": "2017-03-28T13:29:17+0000",
            "author": "Andrzej Bialecki",
            "content": "Wow, thanks Hoss for a really thorough review!\nWhy is this impossible?\nEverything's possible, it's just bits and bytes  but it's not always convenient. Components that register metrics are free to do so under different categories and keys, and in fact some of them already do register metrics under eg. CORE, DIRECTORY, and INDEX (from one component) - that's why I wrote that there's no natural 1:1 mapping from metric name back to a component that registered it - we would have to maintain this in a separate structure (which we can do, but it takes some additional space). So it's not true that exactly the same info is still available from /admin/metrics as in /admin/mbeans?stats=true.\n\nusing /admin/mbeans?stats=true (and the Plugin/Stats screen in the UI) is useless\nThis can be replaced in the UI with a view of /admin/metrics, split by registry and category - but as explained above it won't map back 1:1 to specific components. Since /admin/mbeans is centered around individual mbeans we can't easily get back per-mbean stats unless we maintain some additional mapping, no matter what filtering criteria we use.\n\nOne way to minimize this back-compat breakage would be to pretend that all metrics under a specific CATEGORY.key map back to a particular component. This holds true for 90% of metrics and it would allow us to populate back the \"stats\" output from mbeans.\n\nOther comments:\n\n\tagreed on adding some release note  / guide material on this branch. I usually do this as a separate JIRA once the code is stable, but I can equally well put it in a file.\n\tI'll add support for using regex filters in /admin/metrics\n\tI added metrics-core as a dep. to DIH because IntelliJ complained about not being able to access it when registering a MetricsMap, which is a Gauge - I guess it wants to be able to access all parent classes of the classes referenced here?\n\tMetricType and SolrCore notset / auto are issues inherited from master, I can fix them here or in a separate issue.\n\tMBeanServer creation and back-compat sysprop and solrconfig options - very good points, we should make it work in a similar way, eg. instantiating the reporter and server when a <jmx/> element is present even if no explicit SolrJmxReporter config is present.\n\t\n\t\tsome of the metrics that we really wanted to report (eg. number of open file descriptors) used to be accessible via reflection, which is a no-no in JDK 9 - but they are exposed via platform MBeans. If we need to be more careful about starting up the server then we have to make these metrics optional (which unfortunately also means that we can't depend on them being always present).\n\t\n\t\n\ttest changes - good points, I'll work on that.\n\n\n\nCACHE related MBeans (ex: filterCache),\nI knew it would be contentious  That's the thing I mentioned above about MetricsMap - and in fact if you click on this string representation in JConsole it will expand to a proper map. The pro of this approach is that we don't have to manage the lifecycle of cacheEntry -> metric registration, the con is that we lose the type info. ",
            "id": "comment-15945158"
        },
        {
            "date": "2017-03-28T23:02:29+0000",
            "author": "Hoss Man",
            "content": "\nSo it's not true that exactly the same info is still available from /admin/metrics as in /admin/mbeans?stats=true.\n\nSure \u2013 i wasn't suggesting that the exact same info was available (with the exact same names) \u2013 my point is that as things stand on the branch, from a users point of view:\n\n\tadmin/mbeans is virtually useless\n\tthe stats=true param was explicitly removed\n\tthere is no obviously straight forward replacement for users (particularly for the UI, and in conjunction with the diff) option.\n\n\n\nmeanwhile, as a developer: there seems to be a relatively straight forward way to keep most of the existing admin/mbeans functionality working (probably requiring clients to only some make some minor tweaks to the \"stat\" names they expect from each \"key\" in the infoRegistry) for the foreseeable future \u2013 so why not make it work...\n\n\n\tadd a default MetricsMap getMetricsMap() {return null;} to SolrInfoBean (to replace getStatistics())\n\tany class implementing both SolrInfoBean and SolrMetricProducer could implement initializeMetrics(...) such that it keeps a private reference to a MetricsMap it registers & return that from getMetricsMap()\n\t\n\t\tmany of the SolrInfoBean classes already seem to be maintaining a private MetricsMap metricsMap; that is assigned in initializeMetrics(...) but never used (in the class) after that\n\t\n\t\n\t/admin/mbeans can call getMetricsMap() on each SolrInfoBean it loops over if stats=true\n\n\n...that seems easier then implementing equivalent Admin UI functionality based on admin/metrics (particularly in combination with the \"diff\" support) and would have other wins for other existing programtica consumers of /admin/mbeans\n\nI added metrics-core as a dep. to DIH because IntelliJ complained about not being able to access it when registering a MetricsMap, which is a Gauge - I guess it wants to be able to access all parent classes of the classes referenced here?\n\nI don't know about IntelliJ orwhat it was trying to do, but you may want to double check that - it definitely wasn't needed in ivy (i tried removing it and everything compiled fine) \n\n...very good points, we should make it work in a similar way, eg. instantiating the reporter and server when a <jmx/> element is present even if no explicit SolrJmxReporter config is present. \n\nTo be clear: the <jmx/> element is solrconfig.xml specific, and the existing \"default\" logic is (whne no <jmx/> exists) is probably not the best given solr is now a standalone app.\n\nIt seems like moving forward it makes sense to keep metrics reporters like SolrJmxReporter configured at the solr.xml/container level \u2013 so moving forward with 7.0 and on, I definitely don't think we should use exactly the same defaults as how it's worked in the past.  We can let our defaults be driven by the existince of an existing MBeanServer created by the JVM based on startup options, but we definitely should NOT be calling ManagementFactory.getPlatformMBeanServer() and forcing the JVM to create a platform MBeanServer.\n\nsome of the metrics that we really wanted to report (eg. number of open file descriptors) used to be accessible via reflection, which is a no-no in JDK 9 - but they are exposed via platform MBeans. If we need to be more careful about starting up the server then we have to make these metrics optional (which unfortunately also means that we can't depend on them being always present).\n\nPlease note there is an important difference between the platform MBeans APIs and the (virtually identical) platform MXBeans APIS ... i'm not an expert but one thing i do know is that accessing the platform MBeans requires an MBeanServer, but you can access MXBeans directly from the individual static methods in ManagementFactory\n\nHence my point about taking a look at SystemInfoHandler: it uses ManagementFactory.getOperatingSystemMXBean(); to fetch and OperatingSystemMXBean (as well as using Class.forName() to try and load some JVM vendor specific MXBeans as well) which gives access to all the same info as an OperatingSystemMBean currently used in the OperatingSystemMetricSet \u2013 w/o needing an MbeanServer to be running.  This bean introspection code works in jdk9 just fine...\n\n\n...\n  <str name=\"name\">Linux</str>\n  <str name=\"arch\">amd64</str>\n  <int name=\"availableProcessors\">4</int>\n  <double name=\"systemLoadAverage\">0.74</double>\n  <str name=\"version\">3.19.0-51-generic</str>\n  <long name=\"committedVirtualMemorySize\">4325052416</long>\n  <long name=\"freePhysicalMemorySize\">3611639808</long>\n  <long name=\"freeSwapSpaceSize\">16437768192</long>\n  <double name=\"processCpuLoad\">0.010957238841522514</double>\n  <long name=\"processCpuTime\">11510000000</long>\n  <double name=\"systemCpuLoad\">0.19951374172457412</double>\n  <long name=\"totalPhysicalMemorySize\">16513077248</long>\n  <long name=\"totalSwapSpaceSize\">16860049408</long>\n  <long name=\"maxFileDescriptorCount\">65536</long>\n  <long name=\"openFileDescriptorCount\">170</long>\n...\n\n\n\nSimilar info about BufferPools (the other place SolrDispatchFilter.setupJvmMetrics() uses the MBeanServer) should be available via BufferPoolMXBean , see example of how to get a list of these in the javadocs: https://docs.oracle.com/javase/7/docs/api/java/lang/management/BufferPoolMXBean.html\n\n... The pro of this approach is that we don't have to manage the lifecycle of cacheEntry -> metric registration, the con is that we lose the type info.\n\nLosing type info for cache metrics is inconvinient, but losing and the ability to monitor individual cache metrics as individual JMX Attributes seems like a big loss. ",
            "id": "comment-15946139"
        },
        {
            "date": "2017-04-04T16:32:22+0000",
            "author": "Andrzej Bialecki",
            "content": "Latest patch which fixes most of the problems identified in the review:\n\n\tadmin/mbeans and admin/plugins stats are back, and consequently they are visible in the UI.\n\tJMX reporting is turned on only when MBean server is specified or running.\n\tmetrics reported using MetricsMap provide now type-specific attributes via JMX.\n\n ",
            "id": "comment-15955352"
        },
        {
            "date": "2017-04-04T23:31:27+0000",
            "author": "Hoss Man",
            "content": "\n(NOTE: comments below are in a mishmash order as i jumped around the code, so they can be somewhat redundent as i re-thought about diff concepts while looking at diff classes)\n\n\n\tSolrJmxReporter\n\t\n\t\tshould these really be warnings, or just info?\n\t\t\n\t\t\tlog.warn(\"No serviceUrl or agentId was configured, using first MBeanServer.\", mBeanServer);\n\t\t\tlog.warn(\"No JMX server found. Not exposing Solr metrics via JMX.\");\n\t\t\t....in the prior code, warning might have made sense \u2013 but in the new code,  seems like it should only be a warning if agentId is specified, or if serviceUrl can't be created?\n\t\t\n\t\t\n\t\tit didn't occur to me the last time i reviewed this code, but if it's possible for people to configure multiple SolrJmxReporter instances in solr.xml, then we should almost certainly support rootName like JmxMonitorMap did, otherwise won't the multiple SolrJmxReporter instances overwrite eachother if they use the same MBeanServer?\n\t\t\n\t\t\tsee related comments below regarding JmxObjectNameFactory\n\t\t\n\t\t\n\t\tas for why a person might want to configure multiple SolrJmxReporter instances, that goes back to my previous question about if/why we should support serviceUrl in SolrJmxReporter...\n\t\t\n\t\t\tsince SolrJmxReporter is now at the container level, the only value i see is if there's a way to configure Reporters to filter which collections they expose\n\t\t\tso people might configure multiple SolrJmxReporter instances w/diff serviceUrls that expose the metrics for diff solr collections to diff end consumers\n\t\t\tis this currently possible?\n\t\t\n\t\t\n\t\tNOTE: there is some sort of bug \u2013 i didn't trace down the root cause \u2013 causing multiple SolrJmxReporter instances to be inited on startup,\n\t\t\n\t\t\trun bin/solr -e techproducts -Dcom.sun.management.jmxremote and very early in the logs you'll see...\n\nINFO  - 2017-04-04 22:46:40.787; [   ] org.apache.solr.core.SolrXmlConfig; Loading container configuration from /home/hossman/lucene/dev/solr/example/techproducts/solr/solr.xml\nINFO  - 2017-04-04 22:46:40.833; [   ] org.apache.solr.core.SolrXmlConfig; MBean server found: com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617, but no JMX reporters were configured - adding default JMX reporter.\nWARN  - 2017-04-04 22:46:41.252; [   ] org.apache.solr.metrics.reporters.SolrJmxReporter; No serviceUrl or agentId was configured, using first MBeanServer.\nINFO  - 2017-04-04 22:46:41.269; [   ] org.apache.solr.metrics.reporters.SolrJmxReporter; JMX monitoring enabled at server: com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617\nWARN  - 2017-04-04 22:46:41.269; [   ] org.apache.solr.metrics.reporters.SolrJmxReporter; No serviceUrl or agentId was configured, using first MBeanServer.\nINFO  - 2017-04-04 22:46:41.270; [   ] org.apache.solr.metrics.reporters.SolrJmxReporter; JMX monitoring enabled at server: com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617\nWARN  - 2017-04-04 22:46:41.270; [   ] org.apache.solr.metrics.reporters.SolrJmxReporter; No serviceUrl or agentId was configured, using first MBeanServer.\nINFO  - 2017-04-04 22:46:41.276; [   ] org.apache.solr.metrics.reporters.SolrJmxReporter; JMX monitoring enabled at server: com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617\n\n\n\t\t\tand later in the logs, once the techproducts core is added...\n\nWARN  - 2017-04-04 22:46:43.608; [   x:techproducts] org.apache.solr.metrics.reporters.SolrJmxReporter; No serviceUrl or agentId was configured, using first MBeanServer.\nINFO  - 2017-04-04 22:46:43.609; [   x:techproducts] org.apache.solr.metrics.reporters.SolrJmxReporter; JMX monitoring enabled at server: com.sun.jmx.mbeanserver.JmxMBeanServer@66d3c617\n\n\n\t\t\tisn't there only suppose to be ONE (implicit) SolrJmxReporter ? ... and why would a/each new core cause a new SolrJmxReporter to be created/init'ed ?\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\n\tJmxObjectNameFactory\n\t\n\t\tNOTE: i realize some of these comments aren't specific to changes on this branch, but i noticed them while reviewing the JMX stuff a bit more...\n\t\tI'm confused as to why the \"reporter\" name is being include in all the ObjectNames ?\n\t\t\n\t\t\tit's going to be the same for every bean reported by the (same) SolrJmxReporter (so pracitcally speaking with teh default implicit SolrJmxReporter instance there's this weird \"default\" somewhere in the hierarchical drill down of every MBean)\n\t\t\tif we expect there to be multiple SolrJmxReporter instances (thus needing to disambiguate the beans), then that's exactly what the point of rootName was inthe existing code \u2013 and giving each reporter it's own prefix/hierarchy in the MBean server seems better then having their beans intermixed and needing to look for the \"reporter\" attribute of the name to disambiguate\n\t\t\t\n\t\t\t\tso i would suggest either we should add the rootName option to SolrJmxReporter, OR perhaps automatically use the (sanitized) reporter name as the prefix of all the MBean names (in place of \"solr:\" in the current names (although at first glance i'm not even clear on where that's currently coming from ... i don't see domain being set?)\n\t\t\t\teither way, the if/when we add the implicit default SolrJmxReporter it should still use an effective rootName/prefix/domain/reportName/whatever of \"solr\" in it's ObjectNames\n\t\t\t\n\t\t\t\n\t\t\tif we don't expect there to be multiple SolrJmxReporter instances, then it seems silly to bother putting \"reporter\" in the name at all\n\t\t\n\t\t\n\t\tlikewise: i don't understand why SolrJmxReporter is passing this.hashCode() as an \"instance\" property to include in all ofthe ObjectNames\n\t\t\n\t\t\t(assuming we fix the bug mentioned above about multiple SolrJmxReporter instances being init'ed automatically on startup) all MBeans registered by the same JmxObjectNameFactory will have the same \"instance\" value \u2013 so there doesn't seem to be any need for it in the name\n\t\t\t\n\t\t\t\tand even worse then the \"reporter\" name, this is something that will change every time the node is restarted, making it impossible for JMX clients to programatically access (expected) objects at \"known\" names\n\t\t\t\n\t\t\t\n\t\t\tthe commit when this was added is 4249c8: It's not 100% clear but I suspect the reason relates to the part of the commit msg that mentions \"multiple core containers in a JVM\"\n\t\t\t\n\t\t\t\tfor end users that doesn't seem like a use case we should really worry much about since we're not viewing solr as a \"WAR\" but a standalone app.\n\t\t\t\t\n\t\t\t\t\tif we did want to worry about this use case, then that's exactly what setting the rootName on JmxMonitoredMap enabled users to do in the past to avoid collisions \u2013 and we could likewise support that on SolrJmxReporter (or by using the reporter name as the prefix as suggested above) and the burden is on these advanced users to configure the SolrJmxReporter's in their multiple CoreContainer instances with unique names\n\t\t\t\t\n\t\t\t\t\n\t\t\t\tif the concern is about our (cloud) test code (and having unique ObjectNames even when we're spinning up multiple jetty+CoreContainer instance in a single JVM process) then it seems like we should really solve that in our test code/scaffolding and not \"pollute\" the JMX MBean names usres see in production with numeric values that unique every time hte process is restarted.\n\t\t\t\t\n\t\t\t\t\tfirst idea that comes to mind: the solr.xml files used in cloud tests (where we want to do JMX testing) can explicitly declare a SolrJmxReporter (rather then getting the implicit default) using a rootName/prefix/domain/reportName/whatever that includes{{\"\\${hostPort}\"}} ?\n\t\t\t\t\tCloud tests that aren't explicitly planning on checking JMX metrics (ie: don't force the creation of the platform MBeanServer before creating the MiniSolrCluster) don't need to worry about it\n\t\t\t\t\n\t\t\t\t\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\n\n\tOperatingSystemMetricSet + MetricsUtils.addMXBeanMetrics (vs. SystemInfoHandler)\n\t\n\t\tis there anyway we can refactor this so we're not copy/pasting so much code from SystemInfoHandler?\n\t\t\n\t\t\tmaybe a doOperatingSystemMXBeanIterator utility method somewhere that takes in a lambda to run for each bean property?\n\t\t\n\t\t\n\t\tat a minimum: we should staticly declare the list of class names we try once and re-use in both places \u2013 so if we ever add more (new JVMs, OpenJDK renames the com.sun.* MXBeans, etc..) we don't overlook one list.\n\t\n\t\n\n\n\n\n\n\tJvmMetricsTest\n\t\n\t\twon't some of these tests fail on some (non-oracle) JVMs where those platform specific OS metrics may not be available?\n\t\teven if we hardcode a list of expected metrics, the test should probably group them based on the MXBean they are expected from (java.*.OperatingSystemMXBean vs com.sun..OperatingSystemMXBean vs com.sun.*.UnixOperatingSystemMXBean etc...) and only check them (against the solr metrics API) if that source MXBean class can be found in the current classpath\n\t\n\t\n\n\n\n\n\n\tSolrInfoBean\n\t\n\t\tgetMetrics() might be a missleadingly simplistic name for what this method does?\n\t\t\n\t\t\tperhaps something like getMetricsSnapshot() (since it's a snapshot of the current values)\n\t\t\tor getSimplifiedMetricsMap() ?\n\t\t\tor maybe getMetricsAsSimpleStats() since that's the ultimate end purpose (ie: describe the usage, not the internals)\n\t\t\n\t\t\n\t\tif getMetricRegistry() is going to default to return null, then shouldn't getMetricNames() also default to return null; ?\n\t\tin general can we please beef up the javadocs of getMetricNames & registerMetricName to make their relationship and intended use more obvious (that was the most confusing part for me of reading through the recent changes)...\n\t\t\n\t\t\twhen/who calls registerMetricName (IIUC: metrics manager via callback when a SolrInfoBean register a new metric)\n\t\t\twhen/who calls getMetricNames & why (IIUC: by default, registerMetricName calls method to populate the map when new metrics are registered, and by default getMetrics() calls to read from the map to convert metrics to their simplified form)\n\t\t\n\t\t\n\t\twe may also want to make it clear in these javadocs that SolrInfoBeans can/should override these various methods to prevent some/all metric names from being added to this map if they don't want them exposed as part of the \"SolrInfoBean stats\" (ie: some plugins might want to only expose a handful a simple numeric/string stats via /admin/mbeans because of the limited API, but via the metrics reporting they report a lot more robust things.\n\t\n\t\n\n\n\n\n\n\t/admin/mbeans\n\t\n\t\tthere's still a small disconnect between the expected/existing structure of what /admin/mbeans returns and the code currently on the branch (which breaks the admin UI) ... there's an extra \"map\" with a single key (which looks like the global metric name?), whose value is a map with the actual stats as\n\t\t\n\t\t\tmaster: http://localhost:8983/solr/techproducts/admin/mbeans?stats=true&key=queryResultCache&indent=true&wt=json&cat=CACHE \n\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":0},\n  \"solr-mbeans\":[\n    \"CACHE\",{\n      \"queryResultCache\":{\n        \"class\":\"org.apache.solr.search.LRUCache\",\n        \"version\":\"1.0\",\n        \"description\":\"LRU Cache(maxSize=512, initialSize=512)\",\n        \"src\":null,\n->      \"stats\":{\n          \"lookups\":1,\n          \"hits\":0,\n          \"hitratio\":0.0,\n          \"inserts\":1,\n          \"evictions\":0,\n          \"size\":1,\n          \"warmupTime\":0,\n          \"cumulative_lookups\":1,\n          \"cumulative_hits\":0,\n          \"cumulative_hitratio\":0.0,\n          \"cumulative_inserts\":1,\n          \"cumulative_evictions\":0}}}]}\n\n\n\t\t\tbranch: http://localhost:8983/solr/techproducts/admin/mbeans?stats=true&key=queryResultCache&indent=true&wt=json&cat=CACHE \n\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":0},\n  \"solr-mbeans\":[\n    \"CACHE\",{\n      \"queryResultCache\":{\n        \"class\":\"org.apache.solr.search.LRUCache\",\n        \"description\":\"LRU Cache(maxSize=512, initialSize=512)\",\n->      \"stats\":{\"CACHE.searcher.queryResultCache\":{              // NOTE: NESTED MAP\n            \"lookups\":3,\n            \"hits\":2,\n            \"cumulative_evictions\":0,\n            \"size\":1,\n            \"hitratio\":0.67,\n            \"evictions\":0,\n            \"cumulative_lookups\":3,\n            \"cumulative_hitratio\":0.67,\n            \"warmupTime\":0,\n            \"inserts\":1,\n            \"cumulative_inserts\":1,\n            \"cumulative_hits\":2}}}}]}\n\n\n\t\t\n\t\t\n\t\tI'm not entirely sure if this is a bug in SolrInfoMBeanHandler or SolrInfoBean.getMetrics() or MetricUtils.convertMetrics\n\t\t\n\t\t\tI'm guessing maybe the expectation is that SolrInfoBean.getMetrics() should be unwinding the map returned by MetricUtils.convertMetrics ?\n\t\t\t\n\t\t\t\tBecause IIUC getMetrics() should know that based on it's usage of convertMetrics there should only be one key in the map returned?\n\t\t\t\n\t\t\t\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\tMBeansHandlerTest\n\t\n\t\tsince we're still using /admin/mbeans in the UI, this test sshould prbably added back to the branch\n\t\ti suspect as is it probably would hav caught the map-in-a-map bug as part of it's \"diff\" checking\n\t\twe should also go ahead and beef it up to do a simple spot check of an explicit cache stat value to verify has the correct NamedList/Map structure for accessing individual stat values.\n\t\n\t\n\n\n\n\n\tMetricUtils\n\t\n\t\teven if these methods aren't public (anymore), it's helpful to have javadocs so future developers understand the intent of a method (and don't acidently missues/break them in the future)\n\t\n\t\n\n\n\n\n\tStatsReloadRaceTest\n\t\n\t\tthis smells bad...\n\n    // this is not guaranteed to exist right away after core reload - there's a\n    // small window between core load and before searcher metrics are registered\n    if (metrics.get(key) != null) {\n      assertTrue(metrics.get(key) instanceof Long);\n    }\n\n\n...shouldn't we at least poll that != null check in a loop to ensure eventually the metrics are available and have the correct type?  (otherwise the test won't be useful in the event that something breaks down the road)\n\t\n\t\n\n\n\n\n\n\tDisabling JMX for solr, but having it on for the JVM\n\t\n\t\tnow that SolrXmlConfig implicitly adds a SolrJmxReporter if (at least) one is not declared, don't we need a NoopSolrJmxReporter extends SolrJmxReporter (or marker interface) option so people who only want JVM level JMX metrics don't have to deal with the overhead of Solr level metrics in JMX?\n\t\tthat would also eliminate the need for the private int jmxReporter hack in SolrMetricsIntegrationTest & similar tests\n\t\t\n\t\t\tjust include a NoopSolrJmxReporter in the solr-*reporter.xml files\n\t\t\tor maybe the tests are just simpler this way with the extra \"+1\" ? ... not sure how i feel.\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\n ",
            "id": "comment-15956053"
        },
        {
            "date": "2017-04-05T09:45:26+0000",
            "author": "Andrzej Bialecki",
            "content": "Again, thanks a lot for the detailed review, most of these issues are straightforward to fix.\n\nSome clarification only about how reporters are now configured in solr.xml: each <reporter> element defines a configuration and not an instance. The config can specify multiple groups or registry names, or registry name prefixes that it applies to, and for each matching unique registry name a separate reporter instance will be created. This indeed allows you to configure per-collection reporters that report to different destinations, or multiple reporters for the same collection that report to different destinations. So the multiple reporter instances that you saw are normal and expected.\n\nJmxObjectNameFactory uses registry name as domain (if domain is not set), and it also inserts reporter's name (as configured in the plugin config) in the hierarchy, so for each reporter instance and for each registry the hierarchy is unique. This should not require the \"instance\" attribute - I added it to solve conflicts for MiniSolrCloudCluster where multiple reporters with the same name and for the same registry name were created under different classloaders, but I agree with you about the unpredictability of the name hierarchy that it creates, so I'll change it.\n\nNew patch coming shortly. ",
            "id": "comment-15956597"
        },
        {
            "date": "2017-04-05T16:56:44+0000",
            "author": "Hoss Man",
            "content": "\nThe config can specify multiple groups or registry names, or registry name prefixes that it applies to, and for each matching unique registry name a separate reporter instance will be created.\n\nok ... seems weird, but i'll take your word for it that it's expected ... my main concern was that we weren't excessively and unneccessarily \"re-registering\" equivilent MBeans with the MBean server every time a (seemingly duplicate) SolrJmxReporter was created ... if you're saying that's not happening then i'll take your word for it.\n\nJmxObjectNameFactory uses registry name as domain (if domain is not set), and it also inserts reporter's name (as configured in the plugin config) in the hierarchy, so for each reporter instance and for each registry the hierarchy is unique.\n\nI'm not sure i follow \u2013 largely because i'm still not really clear what you mean by \"registry name\" and \"domain\" \u2013 to be clear about what I saw (as an end user) and what i'm suggesting:\n\n\n\tSample current ObjectNames (with implicit default reporter) ...\n\t\n\t\tsolr:dom1=core,dom2=techproducts,reporter=default,instance=6fd59eb3,category=CACHE,name=fieldCache\n\t\tsolr:dom1=core,dom2=techproducts,reporter=default,instance=6fd59eb3,category=SEARCHER,scope=searcher,name=maxDoc\n\t\tsolr:dom1=node,reporter=default,instance=4007f65e,category=CONTAINER,scope=threadPool,name=coreContainerWorkExecutor.completed\n\t\n\t\n\tSuggested replacement ObjectNames for the same MBeans (with implicit default JMX reporter) ...\n\t\n\t\tsolr:dom1=core,dom2=techproducts,category=CACHE,name=fieldCache\n\t\tsolr:dom1=core,dom2=techproducts,category=SEARCHER,scope=searcher,name=maxDoc\n\t\tsolr:dom1=node,category=CONTAINER,scope=threadPool,name=coreContainerWorkExecutor.completed\n\t\n\t\n\tSuggested replacement ObjectNames for the same MBeans (with explicitly configured JMX reporter using reporter name \"HOSSJMX\") ...\n\t\n\t\tHOSSJMX:dom1=core,dom2=techproducts,category=CACHE,name=fieldCache\n\t\tHOSSJMX:dom1=core,dom2=techproducts,category=SEARCHER,scope=searcher,name=maxDoc\n\t\tHOSSJMX:dom1=node,category=CONTAINER,scope=threadPool,name=coreContainerWorkExecutor.completed\n\t\n\t\n\n ",
            "id": "comment-15957234"
        },
        {
            "date": "2017-04-06T09:50:46+0000",
            "author": "Andrzej Bialecki",
            "content": "SolrMetricManager.registerReporter takes care of registering only a single reporter for a given hierarchy, using among others the reporter's name as a key.\n\nOn the change to ObjectNames: \"instance\" is gone in the latest patch. I think it's more confusing to use reporter's name as JMX domain than to always use \"solr\" for mbeans reported by Solr. \"Registry name\" that I referred to is the name of a metric registry where metrics are maintained, and each SolrCore (and each CoreContainer) gets its own unique registry eg. \"solr.core.techproducts.shard1.replica1\", and the \"solr.\" prefix is enforced. This is already a hierarchical name, so it makes sense to use it at the top level of hierarchy. Then, since you can configure multiple reporters for each registry, it stands to reason that the next element in the hierarchy should be the reporter's name, and finally followed by the metric name. ",
            "id": "comment-15958673"
        },
        {
            "date": "2017-04-06T11:15:27+0000",
            "author": "Andrzej Bialecki",
            "content": "Regarding the disabling of JMX reporting from Solr but not from JVM - I think a more elegant approach is a boolean flag \"enabled\" in a SolrJmxReporter config - if the config is present in solr.xml but the flag is false then this turns off the reporter, no need for yet another class. ",
            "id": "comment-15958757"
        },
        {
            "date": "2017-04-07T00:20:54+0000",
            "author": "Hoss Man",
            "content": "\n\nOn the change to ObjectNames: \"instance\" is gone in the latest patch. I think it's more confusing to use reporter's name as JMX domain than to always use \"solr\" for mbeans reported by Solr. \"Registry name\" that I referred to is the name of a metric registry where metrics are maintained, and each SolrCore (and each CoreContainer) gets its own unique registry eg. \"solr.core.techproducts.shard1.replica1\", and the \"solr.\" prefix is enforced. This is already a hierarchical name, so it makes sense to use it at the top level of hierarchy. Then, since you can configure multiple reporters for each registry, it stands to reason that the next element in the hierarchy should be the reporter's name, and finally followed by the metric name.\n\nI'm sorry \u2013 but that still just doesn't make any sense to me.\n\nFor an \"inside looking out\" perspective, as someone who really understands the metrics code and the reporting internals, it might make a lot of sense to you to put the \"registry\" hierarchy first, and then put the reporter name after that \u2013 but from \"outside looking in\" perspective of an end user who is monitoring solr via a JMX client, I don't see how that helps them at all.\n\nHere's some use cases I'm imagining...\n\nAssume a basic setup, w/o any explicitly configured metrics reporters, and JMX is enabled at the JVM level so the implicit SolrJmxReporter starts up:  If I'm using a JMX tool like jconsole, and I'm drilling looking at MBeans and browsing the info that's availale.  As I drill down evetually \u2013 For every MBean I encounter \u2013 there is at some seemingly arbitrary (to me) point in the hierarchy a reporter=default aspect of it's name, making the hierarchy one level deeper ... for no aparent reason.\n\nNow let's asume that there are multiple SolrJmxReporter configurations defined in solr.xml (that I as the outside user may not know/care about that) that are filtering/limiting what metrics are reported to the local MBeanServer....\n\n\tname=\"CACHE_STATS\" is only exposing (all) the metrics from all the internal CACHE s\n\tname=\"QUERY_TIMES\" is only exposing the requestTime metrics from all QUERY handlers\n\n\n\n...so now ss i'm drilling down into the hierarchy of MBeans, how does it help me that at some (again seemingly arbitrary) point in the hierarchy, every object has either reporter=CACHE_STATS in it's name, or reporter=QUERY_TIMES in it's name?  Even if there was overlap in filtering, such that some metrics were being redundently exposed by both reporters, how does it help me if the disambuiation of those (otherwise identical) MBeans happens at some point in the middle of the hierarchical ObjectName.  If those portions of the name were at the begining then at least I (as an outside user) would have some visibility into the \"sets\" of metrics that this Solr instance was making available, so right off the bat i could choose to drill down into \"QUERY_TIMES\" or \"CACHE_STATS\" depending on what I'm interested in.\n\nThat idea \u2013 grouping the metrics together at the top level / begining of the ObjectName \u2013 is really the only use case I can think of where including the \"reporter\" in the ObjectName is particularly beneficial to the end users.  Given that you've added back the rootName config option, that use case has another solution, and I'm starting to think that we should just eliminate the \"reporter\" part of the name completely.  Any ObjectName collision that might result from multiple (overlapping) SolrJmxReporter should still ultimately be pointing to the same MBean ... so what's the upside of including the \"reporter\" portion of the name?\n\nCan you help me understand your position by giving me an example usecase where it would be helpful to the person monitoring Solr (via JMX) that these reporter names are in the \"middle\" of the ObjectName instead of at the begining?\n\n\n\nFWIW: I actually tried to cobble together that situation I described above, with two SolrJmxReporter configurations exposing a diff subset of metrics, based on what I saw in some test configurations.  This is what I had in my solr.xml...\n\n  <metrics>\n    <reporter class=\"org.apache.solr.metrics.reporters.SolrJmxReporter\" name=\"FOO\">\n      <str name=\"filter\">QUERY\\./select.*requests</str>\n    </reporter>\n    <reporter class=\"org.apache.solr.metrics.reporters.SolrJmxReporter\" name=\"BAR\">\n      <str name=\"filter\">CACHE.*</str>\n    </reporter>\n  </metrics>\n\n\n...but it failed because SolrJmxReporter doesn't have a setFilter method, and neither does the base class \u2013 it seems like only some special case reporters support filtering?  Shouldn't that be a general purpose feature of all reporters?  As is i'm not sure how to do the type of filtering ab previously described to limit what can be exposed via JMX?\n\nWhich leads me to another concern / problem...\n\n\n\n\nThe config can specify multiple groups or registry names, or registry name prefixes that it applies to, and for each matching unique registry name a separate reporter instance will be created.\n\nok ... seems weird, but i'll take your word for it that it's expected ... my main concern was that we weren't excessively and unneccessarily \"re-registering\" equivilent MBeans with the MBean server every time a (seemingly duplicate) SolrJmxReporter was created ... if you're saying that's not happening then i'll take your word for it.\n\nSetting aside my above comment about not being clear how someone would configure the diff prefixes for (multiple) SolrJmxReporter declarations, this notion that multiple SolrJmxReporter instances will be created from a single config as needed for each \"registry\" didn't sit will with me yesterday ... and today I finally realized why: serviceUrl\n\nFor the default behavior of connecting to the first existing MBeanServer, or if an explicit agentId is configured, then creating multiple SolrJmxReporter instances for a single <reporter> config is fine \u2013 because ultimately the same MbeanServer is still going to be used by each of them.  But as things stand today you can't use the serviceUrl option because then each SolrJmxReporter instance will (attempt) to create it's own MBeanServer instance bound to the same service url \u2013 and only the first one will win.\n\nOn master, if you've got rmiregistry 9999 running in the background, then you can replace <jmx /> in the techproducts sample solrconfig.xml and everything works fine...\n\n\n  <jmx serviceUrl=\"service:jmx:rmi:///jndi/rmi://localhost:9999/solrjmx\" />\n\n\n\n...Solr binds to that URL and you can then run jconsole service:jmx:rmi:///jndi/rmi://localhost:9999/solrjmx and it will happily connect to that service URL and you've got stats about the techproduct core.\n\nBut if you try the same (effective) config on this branch, then you get all sorts of errors on startup because multiple JMXConnectorServer instances are trying to bind to the same RMI URL...\n\n\n  <metrics>\n    <reporter class=\"org.apache.solr.metrics.reporters.SolrJmxReporter\" name=\"BAR\">\n      <str name=\"serviceUrl\">service:jmx:rmi:///jndi/rmi://localhost:9999/solrjmx</str>\n    </reporter>\n  </metrics>\n\n\n\n\nWARN  - 2017-04-06 23:57:08.411; [   ] org.apache.solr.metrics.reporters.SolrJmxReporter; findMBeanServerForServiceUrl(%s) exception: %s\njava.io.IOException: Cannot bind to URL [rmi://localhost:9999/solrjmx]: javax.naming.NameAlreadyBoundException: solrjmx [Root exception is java.rmi.AlreadyBoundException: solrjmx]\n        at javax.management.remote.rmi.RMIConnectorServer.newIOException(RMIConnectorServer.java:827)\n        at javax.management.remote.rmi.RMIConnectorServer.start(RMIConnectorServer.java:432)\n        at org.apache.solr.util.JmxUtil.findMBeanServerForServiceUrl(JmxUtil.java:56)\n        at org.apache.solr.metrics.reporters.SolrJmxReporter.init(SolrJmxReporter.java:94)\n        at org.apache.solr.metrics.SolrMetricManager.loadReporter(SolrMetricManager.java:773)\n        at org.apache.solr.metrics.SolrMetricManager.loadReporters(SolrMetricManager.java:741)\n        at org.apache.solr.core.CoreContainer.load(CoreContainer.java:529)\n...\nWARN  - 2017-04-06 23:57:08.424; [   ] org.apache.solr.metrics.reporters.SolrJmxReporter; findMBeanServerForServiceUrl(%s) exception: %s\njava.io.IOException: Cannot bind to URL [rmi://localhost:9999/solrjmx]: javax.naming.NameAlreadyBoundException: solrjmx [Root exception is java.rmi.AlreadyBoundException: solrjmx]\n        at javax.management.remote.rmi.RMIConnectorServer.newIOException(RMIConnectorServer.java:827)\n        at javax.management.remote.rmi.RMIConnectorServer.start(RMIConnectorServer.java:432)\n        at org.apache.solr.util.JmxUtil.findMBeanServerForServiceUrl(JmxUtil.java:56)\n        at org.apache.solr.metrics.reporters.SolrJmxReporter.init(SolrJmxReporter.java:94)\n        at org.apache.solr.metrics.SolrMetricManager.loadReporter(SolrMetricManager.java:773)\n        at org.apache.solr.metrics.SolrMetricManager.loadReporters(SolrMetricManager.java:741)\n        at org.apache.solr.core.CoreContainer.load(CoreContainer.java:530)\n...\nWARN  - 2017-04-06 23:57:08.430; [   ] org.apache.solr.metrics.reporters.SolrJmxReporter; findMBeanServerForServiceUrl(%s) exception: %s\njava.io.IOException: Cannot bind to URL [rmi://localhost:9999/solrjmx]: javax.naming.NameAlreadyBoundException: solrjmx [Root exception is java.rmi.AlreadyBoundException: solrjmx]\n        at javax.management.remote.rmi.RMIConnectorServer.newIOException(RMIConnectorServer.java:827)\n        at javax.management.remote.rmi.RMIConnectorServer.start(RMIConnectorServer.java:432)\n        at org.apache.solr.util.JmxUtil.findMBeanServerForServiceUrl(JmxUtil.java:56)\n        at org.apache.solr.metrics.reporters.SolrJmxReporter.init(SolrJmxReporter.java:94)\n        at org.apache.solr.metrics.SolrMetricManager.loadReporter(SolrMetricManager.java:773)\n        at org.apache.solr.metrics.SolrMetricManager.loadReporters(SolrMetricManager.java:741)\n        at org.apache.solr.core.CoreContainer.load(CoreContainer.java:531)\n...\nWARN  - 2017-04-06 23:57:10.636; [   x:techproducts] org.apache.solr.metrics.reporters.SolrJmxReporter; findMBeanServerForServiceUrl(%s) exception: %s\njava.io.IOException: Cannot bind to URL [rmi://localhost:9999/solrjmx]: javax.naming.NameAlreadyBoundException: solrjmx [Root exception is java.rmi.AlreadyBoundException: solrjmx]\n        at javax.management.remote.rmi.RMIConnectorServer.newIOException(RMIConnectorServer.java:827)\n        at javax.management.remote.rmi.RMIConnectorServer.start(RMIConnectorServer.java:432)\n        at org.apache.solr.util.JmxUtil.findMBeanServerForServiceUrl(JmxUtil.java:56)\n        at org.apache.solr.metrics.reporters.SolrJmxReporter.init(SolrJmxReporter.java:94)\n        at org.apache.solr.metrics.SolrMetricManager.loadReporter(SolrMetricManager.java:773)\n        at org.apache.solr.metrics.SolrMetricManager.loadReporters(SolrMetricManager.java:741)\n        at org.apache.solr.metrics.SolrCoreMetricManager.loadReporters(SolrCoreMetricManager.java:86)\n        at org.apache.solr.core.SolrCore.<init>(SolrCore.java:889)\n        at org.apache.solr.core.SolrCore.<init>(SolrCore.java:855)\n        at org.apache.solr.core.CoreContainer.create(CoreContainer.java:975)\n...\t\n\n\n\nSo either the MBeanServer \"creation\" needs to be refactored to ensure it only happens once for a given <reporter> configuration, or we need to rethink the question of if/how we're going to support serviceUrl at all?\n\n(Off the top of my head: maybe if you want to specify a serviceUrl, you must also conifgure an agentId and JmxUtil can first search for and existing MBeanServer with that agentId, if one exists it will use it, if not then it will create a new MBeanServer it binds to that serviceUrl and sets the agentId on so future \"instances\" of the same SolrJmxReporter config will find it. ... ????)\n\n\n\nRegarding the disabling of JMX reporting from Solr but not from JVM - I think a more elegant approach is a boolean flag \"enabled\" in a SolrJmxReporter config - if the config is present in solr.xml but the flag is false then this turns off the reporter, no need for yet another class.\n\n+1\n\nWe should be able to have a test that's working, right? Something like...\n\n\n// force at least one local MBeanServer,\n// this would normally cause implicit SolrJmxReporter\nManagementFactory.getPlatformMBeanServer(); \n\ninitSolrWithSolrXmlThatHasSolrJmxReporterUsingEnableEqualsFalse();\nfor(MBeanServer server : MBeanServerFactory.findMBeanServer(null)) {\n  assertNoMBeansWithPrefix(\"solr\", server);\n}\n\n ",
            "id": "comment-15960052"
        },
        {
            "date": "2017-04-10T20:16:51+0000",
            "author": "Andrzej Bialecki",
            "content": "Latest patch with fixes:\n\n\treporters that instantiate clients for the same remote service (JMX, Graphite, Ganglia) now use a local URI->instance registry for client reuse.\n\tJMX reporter supports now \"rootName\" to separate JMX hierarchies coming from different reporter configs.\n\treporter name no longer is in the object name hierarchy\n\treporters now support multiple prefix filters, for example:\n\n<reporter name=\"foo\" class<span class=\"code-quote\">\"...SolrJmxReporter\">\n <str name=\"filter\">CORE.fs</str>\n <str name=\"filter\">UPDATE</str>\n</reporter>\n\n\n\tall reporters now support \"enabled\" flag, which allows turning them off while keeping their config present.\n\n ",
            "id": "comment-15963443"
        },
        {
            "date": "2017-04-11T17:39:08+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e30cc70fddcdd6fddb5eedf9f38e77fcb3f33bd1 in lucene-solr's branch refs/heads/master from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e30cc70 ]\n\nSOLR-9959: SolrInfoMBean-s category and hierarchy cleanup. ",
            "id": "comment-15964690"
        },
        {
            "date": "2017-04-12T08:41:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 3ba4e73a9052b94d0d878fcd2fdd5f050232a41d in lucene-solr's branch refs/heads/master from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3ba4e73 ]\n\nSOLR-9959 Increase the timeout to allow searcher to register metrics. ",
            "id": "comment-15965558"
        },
        {
            "date": "2017-05-05T20:35:18+0000",
            "author": "Michael Braun",
            "content": "Andrzej Bialecki  noticed with this commit it fixed an issue where CoreContainer.shutdown() wasn't previously closing the jvm and jetty group reporters, so they would leak (and do on 6.5.1). Any chance this can get backported to the 6.5.x and 6.6 branches?  ",
            "id": "comment-15998917"
        },
        {
            "date": "2017-05-08T10:28:02+0000",
            "author": "Andrzej Bialecki",
            "content": "Michael Braun - sure, I filed this as SOLR-10631. ",
            "id": "comment-16000571"
        },
        {
            "date": "2017-09-20T16:03:30+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 2351e3ef1fb44e3a234781fdb5c0589630ee5063 in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2351e3e ]\n\nSOLR-9959: Ref Guide changes for JMX and metric name changes ",
            "id": "comment-16173405"
        },
        {
            "date": "2017-09-20T16:03:55+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 839cb9081cbcda171dd872b5c271d8e2ec72081a in lucene-solr's branch refs/heads/branch_7x from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=839cb90 ]\n\nSOLR-9959: Ref Guide changes for JMX and metric name changes ",
            "id": "comment-16173407"
        },
        {
            "date": "2017-09-20T16:07:47+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 70bffbdf13af5c371d9afe6e9e4159864876af6c in lucene-solr's branch refs/heads/branch_7_0 from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=70bffbd ]\n\nSOLR-9959: Ref Guide changes for JMX and metric name changes ",
            "id": "comment-16173415"
        }
    ]
}