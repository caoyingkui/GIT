{
    "id": "SOLR-453",
    "title": "Solr may send invalid HTTP error responses on exceptions",
    "details": {
        "affect_versions": "1.2",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Cannot Reproduce"
    },
    "description": "Solr sends error messages to the client via HttpServlet.sendError, with the message parameter comprised of both the error message and the stack trace.\n\nI don't know if this is an issue with other servlet containers, but when Tomcat generates the response it uses the message parameter for both the HTTP 500 status line and the generated error message itself; the problem with this is that, according to the HTTP 1.1 RFC (http://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html#sec6.1), the \"reason phrase\" cannot contain CRs or LFs. The stack trace does.\n\nI suspect the reason this wasn't reported earlier is that the Java library's HTTP client (URL.openConnection) appears to be lax when parsing the HTTP response and will accept the error message without flinching. Contrariwise the .NET HttpWebRequest object will, unless configured for unsafe header parsing, throw an exception (\"The server committed a protocol violation. Section=ResponseStatusLine\"). Wireshark also does not recognize this as an HTTP response and will show the packets as \"TCP segment[s] of a reassembled PDU\".\n\nI'm attaching a patch that uses HttpServlet.setStatus instead and then writes the stack trace to the response stream, but I think a longer-term solution is to have the response formatters handle the body formatting (similar to the work done by Hoss Man on SOLR-141 here: http://issues.apache.org/jira/browse/SOLR-141). At any rate, I suppose that whether or not to write the stack trace should be a configurable option for security reasons.",
    "attachments": {
        "SolrErrorHandling-1.2.0.patch": "https://issues.apache.org/jira/secure/attachment/12372813/SolrErrorHandling-1.2.0.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tomer Gabel",
            "id": "comment-12557320",
            "date": "2008-01-09T16:54:05+0000",
            "content": "Patch that corrects the error handling behavior described in this bug for Solr 1.2.0. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12557343",
            "date": "2008-01-09T17:26:34+0000",
            "content": "but response.setStatus(int sc, java.lang.String sm) is deprecated\n\nDeprecated. As of version 2.1, due to ambiguous meaning of the message parameter. To set a status code use setStatus(int), to send an error with a description use sendError(int, String). Sets the status code and message for this response.\n\n\nusing sendError(code,error) is supposed to format the message in HTML for you.  There are no restrictions on \\n... \n\nbut it looks like you are saying Tomcat does not format the message as HTML?\n\nOne advantage of using sendError is that it lets you configure the error page formatting in web.xml.  With SOLR-141, I will still want to optionally allow the webapp container to format the error.  \n "
        },
        {
            "author": "Tomer Gabel",
            "id": "comment-12557370",
            "date": "2008-01-09T18:33:26+0000",
            "content": "I know it's deprecated, but I couldn't figure out another way to modify the status description (HTTP \"reason phrase\"). I'm a Java newbie, though, and might have missed something really fundamental \n\nTomcat does both, actually, which is to say it sends the value in the message parameter both as the HTTP status description and rendered as HTML in the response body.\n\nI can see why sendError would be (theoretically) better, however I don't see any way to attach a stack trace that would be compatible with Tomcat (which I've come to understand is one of the most popular servlet containers).  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12557375",
            "date": "2008-01-09T18:50:53+0000",
            "content": "so what error do you actually see?  Does the reason phrase with a '\\n' break something in particular?\n\nUnless this has real functional consequences, I'm tempted to say this should be fixed with SOLR-141, and that SOLR-141 needs to leave an option for sendError() "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12557376",
            "date": "2008-01-09T18:52:45+0000",
            "content": "\ni don't have tomcat handy to test this with at the moment, but if the description is accurate, it seems like a clear cut tomcat bug ... the javadocs for HttpServletREspose.sendError(int,String) are very clear \u2013 we're using it correctly.\n\nJetty seems to handle newlines a right way (i'm not impling there is only one right way) ...by stripping out newlines (and any characters remotely questionable) when building up the HTTP Status line.\n\nSomeone may want to followup on the tomcat list and see what they have to say about it (it would be easy to create a non-solr test case ... a four line servlet could demonstrate this problem...\n\n\nimport javax.servlet.http.*;\npublic class BrokenHttpStatusLineServlet extends HttpServlet {\n  public void doGet (HttpServletRequest req, HttpServletResponse res) {\n     sendError(500,\"This\\nmesg\\ncontains\\nUNSAFE\\ncharacters\\n\\n\\n\\n\\n\");  }  }\n\n "
        },
        {
            "author": "Tomer Gabel",
            "id": "comment-12557381",
            "date": "2008-01-09T19:06:35+0000",
            "content": "You're probably right about this being a Tomcat bug, but the servlet API is anything but clear about this. See http://java.sun.com/products/servlet/2.3/javadoc/javax/servlet/http/HttpServletResponse.html#sendError(int,%20java.lang.String):\n\nSends an error response to the client using the specified status clearing the buffer. The server defaults to creating the response to look like an HTML-formatted server error page containing the specified message, setting the content type to \"text/html\", leaving cookies and other headers unmodified. If an error-page declaration has been made for the web application corresponding to the status code passed in, it will be served back in preference to the suggested msg parameter.\n\nIt doesn't say anything about what's allowed or not inside the message. I guess deprecating setStatus didn't really clear up the ambiguity  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12557384",
            "date": "2008-01-09T19:09:09+0000",
            "content": "i just rememberd i had a tomcat 6.0.14 instance setup from apachecon, and i cannot reproduce this.\n\ntomcat seems to be correctly stripping the newlines when generating the HTTP status reason (admitedly, it does leave the tab characters in palce which is a little weird, but not illegal)\n\nTomer: which version of tomcat are you using?\n\n\nchrish@asimov:/var/tmp/ac-demo$ curl -o /dev/null -sD - \"http://localhost:8080/books-solr/select?q=a&start=-1\"\nHTTP/1.1 500 null  java.lang.NullPointerException       at org.apache.solr.search.SolrQueryParser.getFieldQuery(SolrQueryParser.java:73)       at org.apache.lucene.queryParser.QueryParser.Term(QueryParser.java:1092)         at org.apache.lucene.queryParser.QueryParser.Clause(QueryParser.java:979)       at org.apache.lucene.queryParser.QueryParser.Query(QueryParser.java:907)        at org.apache.lucene.queryParser.QueryParser.TopLevelQuery(QueryParser.java:896)        at org.apache.lucene.queryParser.QueryParser.parse(QueryParser.java:146)        at org.apache.solr.search.QueryParsing.parseQuery(QueryParsing.java:94)         at org.apache.solr.request.StandardRequestHandler.handleRequestBody(StandardRequestHandler.java:109)    at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:77)         at org.apache.solr.core.SolrCore.execute(SolrCore.java:658)     at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:191)      at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:159)     at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)    at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)    at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)  at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)  at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)    at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263)  at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)  at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584)      at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)      at java.lang.Thread.run(Thread.java:595)\nServer: Apache-Coyote/1.1\nContent-Type: text/html;charset=utf-8\nContent-Length: 6976\nDate: Wed, 09 Jan 2008 19:07:46 GMT\nConnection: close\n\nchrish@asimov:/var/tmp/ac-demo$ \n\n\n\nTake the cat to the vet to prove it's not just my shell...\n\n\nchrish@asimov:/var/tmp/ac-demo$ curl -o /dev/null -sD - \"http://localhost:8080/books-solr/select?q=a&start=-1\" | cat -vet\nHTTP/1.1 500 null  java.lang.NullPointerException ^Iat org.apache.solr.search.SolrQueryParser.getFieldQuery(SolrQueryParser.java:73) ^Iat org.apache.lucene.queryParser.QueryParser.Term(QueryParser.java:1092) ^Iat org.apache.lucene.queryParser.QueryParser.Clause(QueryParser.java:979) ^Iat org.apache.lucene.queryParser.QueryParser.Query(QueryParser.java:907) ^Iat org.apache.lucene.queryParser.QueryParser.TopLevelQuery(QueryParser.java:896) ^Iat org.apache.lucene.queryParser.QueryParser.parse(QueryParser.java:146) ^Iat org.apache.solr.search.QueryParsing.parseQuery(QueryParsing.java:94) ^Iat org.apache.solr.request.StandardRequestHandler.handleRequestBody(StandardRequestHandler.java:109) ^Iat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:77) ^Iat org.apache.solr.core.SolrCore.execute(SolrCore.java:658) ^Iat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:191) ^Iat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:159) ^Iat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235) ^Iat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206) ^Iat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233) ^Iat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175) ^Iat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128) ^Iat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102) ^Iat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109) ^Iat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:263) ^Iat org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844) ^Iat org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:584) ^Iat org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447) ^Iat java.lang.Thread.run(Thread.java:595) ^M$\nServer: Apache-Coyote/1.1^M$\nContent-Type: text/html;charset=utf-8^M$\nContent-Length: 6976^M$\nDate: Wed, 09 Jan 2008 19:08:42 GMT^M$\nConnection: close^M$\n^M$\nchrish@asimov:/var/tmp/ac-demo$\n\n "
        },
        {
            "author": "Tomer Gabel",
            "id": "comment-12559082",
            "date": "2008-01-15T15:34:53+0000",
            "content": "Sorry for the delay, but I wanted to check this properly and had to download and build curl for that.\nI verified the behavior described against my own machine (standard apache-tomcat-6.0.14.zip as downloadable from http://tomcat.apache.org/download-60.cgi, running on Windows Vista Business 32-bit) and against our demo server:\n\n\ndemo@devapp1:~$ cat /proc/version\nLinux version 2.6.22-14-server (buildd@crested) (gcc version 4.1.3 20070929 (prerelease) (Ubuntu 4.1.2-16ubuntu2)) #1 SMP Sun Oct 14 22:09:15 GMT 2007\n\n\n\nThe Tomcat version running on the Linux server is apache-tomcat-6.0.14.tar.gz downloadable from the same location.\n\ncurl does not exhibit the symptoms I mentioned (indeed newlines are replaced with tabs), however any HttpWebRequests sent from a .NET program will fail as outlined above. I'll try and capture the TCP traffic with curl but it'll take a while (you can't capture localhost traffic with Windows and I don't have a spare machine at the moment), but I'll hazard a guess that the behavior is similar to Java's URL.openConnection...\nCan one of the Linux guys around here try and capture localhost traffic generated using curl? I wonder what the returning TCP packets contain. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12599645",
            "date": "2008-05-25T03:01:42+0000",
            "content": "I'll mark this issue as \"Cannot Reproduce\" \u2013 it looks like solr sends a valid error message.  In the future, it would be nice to have the response writer formant the output.  SOLR-141 "
        }
    ]
}