{
    "id": "SOLR-152",
    "title": "Dismax should not require 'q'",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.2"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "using fq=xxx should be sufficient to make a valid query\n\nsee:\nhttp://www.nabble.com/dismax-without-q%3D-tf3198431.html#a8880594",
    "attachments": {
        "SOLR-152-DismaxNoQ.patch": "https://issues.apache.org/jira/secure/attachment/12350732/SOLR-152-DismaxNoQ.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12471603",
            "date": "2007-02-09T07:16:13+0000",
            "content": "past discussion (along with my concerns about what it means semanticly to not have a \"q\") are in this thread...\n\nhttp://www.nabble.com/DisMax-and-null-query-strings-tf2321023.html#a6457790\n\n...at the time what was discussed was having the absence of a \"q\" param would result in the \"main\" query being a MatchAllDocs \u2013 the intent being that having a \"q\" tells dismax what you want your superset to be, and not having a \"q\" tells it to default to everything.  (since there is no easy syntax for telling dismax to match all like there is in the standard handler)\n\n\nThis patch takes a different approach: defaulting to nothing (so no matter how many FQs you add, you still get nothing) ... that doesn't really seem that usefull to me \u2013 sure it eliminates the exception, but it doesn't gain the user functionality they didn't have before.\n\n(this behavior isn't obvious when looking at the test in the patch, because the test config has a default \"bf\" which is being used even when the \"q\" isn't)\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12471606",
            "date": "2007-02-09T07:26:59+0000",
            "content": "> (this behavior isn't obvious when looking at the test in the patch, because the test config has a default \"bf\" which is being used even when the \"q\" isn't) \n\naaaaah.  I've been struggling to figure out why it worked on one index and not another!\n\nI see your point on it not making sense...  It is probably beter for the client to send a 'q' that will match everything if that is what it is after.\n\nBut it should throw a 400 exception!\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12471607",
            "date": "2007-02-09T07:38:32+0000",
            "content": "> I see your point on it not making sense... It is probably beter for the client to send a 'q' that > will match everything if that is what it is after.\n\ni agree... but i don't think it makes sense to try and add some special syntax to the \"q\" ... it probably makes more sense to add a new \"matchall\" param \u2013 if there is no q, and matchall=true then use a MatchAllDocs instead \u2013 if neither are set, throw an exception\n\n(that way matchall can be set in the solrconfig as either a default or an invariant)\n\n> But it should throw a 400 exception!\n\nno disagreement there ... improving the error messages in error input cases is sometihng we need to do a lot of in Solr (most of hte focus in the past was on good behavior for good input) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12471608",
            "date": "2007-02-09T07:46:16+0000",
            "content": "\n> \n> (that way matchall can be set in the solrconfig as either a default or an invariant)\n> \n\nthats good! then you can set:\n\n <requestHandler name=\"dismax\" class=\"solr.DisMaxRequestHandler\" >\n    <lst name=\"defaults\">\n     <str name=\"q\">\n        matchall\n     </str>\n     ...\n\nproblem solved. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12471609",
            "date": "2007-02-09T07:51:39+0000",
            "content": "don't you mean...\n\n <requestHandler name=\"dismax\" class=\"solr.DisMaxRequestHandler\" >\n    <lst name=\"defaults\">\n       <str name=\"matchall\">true</str>\n       ...\n\n? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12471610",
            "date": "2007-02-09T07:53:56+0000",
            "content": "danm, i was hoping you would not notice.  There is no delete button around here. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12471614",
            "date": "2007-02-09T08:03:52+0000",
            "content": "using the matchall parameter "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12471770",
            "date": "2007-02-09T17:57:09+0000",
            "content": "i haven't looked at the latest patch yet, but it occured to me on the train this morning that a better mechanism then matchall=\n{true}\n|\n{false}\n would be altq=\n{lucene-standard-syntax-query}\n\nwith the psuedoe code being...\n\n   Query mainUserQuery = null;\n   if ( params.get(Q) is not empty ) \n{\n      mainUserQuery = dismaxParse( params.get(Q) )\n  }\n else if ( params.get(ALTQ) is not empty ) \n{\n      mainUserQuery = SolrQueryParser.parse(  params.get(ALTQ) );\n  }\n  if ( null == mainUserQuery) \n{\n     throw NoQueryStringException;\n  }\n\n\n...that way people that want a MatchAllDocs fallback can put altq=: in their defaults or UIR ... but if they want it with a different boost (because they are using BF and BQ) they can do that, or if their index is heavily partitioned by doctype and they only want certain types of docs to be included in the set when no Q is specified they can use \"altq=doctype:(product blog)\"\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12471775",
            "date": "2007-02-09T18:11:28+0000",
            "content": "Or perhaps annotating the q parameter to avoid the explosion of parameters?\n\nq=<!lucene>:\n\nhttp://www.nabble.com/Using-HTTP-Post-for-Queries-tf3039973.html#a8483387 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12471810",
            "date": "2007-02-09T20:46:37+0000",
            "content": "\n>> q=<!lucene>: \n\none of the major focuses of dismax is to take the hassle out of front end client code needing to \"preprocess\" user queries ... an approach like this would require that the client notice when no query is specified, and set teh q appropraitely (it would also probably require that the client allways put \"<!dismax>\" in front of most input to \"escape\" the possibility of a user searching on something like \"<!lucene>\"\n\nat a broader level: annotating the \"q\" doesn't really address the issue of letting the \"solrconfig owner\" specify what the behavior should be: an extra param can be baked into the config, but a prefix on a user query can not. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12471814",
            "date": "2007-02-09T21:01:15+0000",
            "content": "> an approach like this would require that the client notice when no query is specified, and set teh q appropraitely\n\nI'm not sure I understand... wouldn't defaulting still work the same way?\n\n <requestHandler name=\"dismax\" class=\"solr.DisMaxRequestHandler\" >\n    <lst name=\"defaults\">\n       <str name=\"q\">[!lucene]:</str> \n\nI thought you were proposing an altq that would work just like q, but it would be in lucene query syntax.\nWhat happens when one one wants XML syntax?\nBut as you say,  the dismax syntax is special...  in that context, either an altq or q.type param would make sense.   Then, the altq could actually have the optional annotations about what type of query it is (if/when we get around to that). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12471815",
            "date": "2007-02-09T21:03:17+0000",
            "content": ">> at a broader level: annotating the \"q\" doesn't really address the issue of letting the \"solrconfig owner\" specify what >> the behavior should be: an extra param can be baked into the config, but a prefix on a user query can not.\n\nto clarify, the default in the solrconfig could of course be <str name=\"q\"><!lucene>:</str> ... but if the client has to prepend <!dismax> on the front of user input anyway, it can't do it blindly (or it might send an \"empty\" query of \"<!dismax>\" and defeat the point of the default)\n\nwith an extra param, the lcient doesn't even have to know anything special is happening when hte user provides an epty string \u2013 it doesn't even have to check to see if hte user has provided an empty string "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12471846",
            "date": "2007-02-09T22:09:07+0000",
            "content": "whoops ... looks like comment collision ... yeah, i'm thinking altq would be in \"solr standard syntax\" and if at soem point we add anotations about query syntax it would support them.\n\n(a q.type param wouldn't really solve this problem ... a default Q of \": in the solorconfig would requre a defualt QTYPE of \"standard\" or something ... whch means clients clients sending a \"q\" in the simple dismax syntaxwould have to allways specify q.type=dismax, unless q was blank in which case overriding the q.type would break the default q ... so we're back where we started: the client code needing ot look at the users iput and change something about the request if it's blank) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12474889",
            "date": "2007-02-22T00:23:31+0000",
            "content": "I've committed a variation on Ryan's latest patch that:\n\n  1) changes from the matchall=true syntax to a q.alt=: syntax\n  2) adds documentaiton about the new param\n  3) demonstrates the new param in the example solrconfig.xml "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12589318",
            "date": "2008-04-15T23:44:45+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tMarked (\"Resolved\" or \"Closed\") and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\tWas listed in the CHANGES.txt for 1.2\n\n\n\nThe Fix Version for all 39 issues found was set to 1.2, email notification\nwas suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this\n(hopefully) unique string: 20080415hossman2 "
        }
    ]
}