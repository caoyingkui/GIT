{
    "id": "LUCENE-6417",
    "title": "Upgrade ANTLR to version 4.5",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/expressions"
        ],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "I would like to upgrade ANTLR from 3.5 to 4.5.  This version adds several features that will improve the existing grammars.  The main improvement would be the allowance of left-hand recursion in grammar rules which will reduce the number of rules significantly for expressions.\n\nThis change will require some code refactoring to the existing expressions work.",
    "attachments": {
        "LUCENE-6471.patch": "https://issues.apache.org/jira/secure/attachment/12746950/LUCENE-6471.patch",
        "LUCENE-6417.patch": "https://issues.apache.org/jira/secure/attachment/12748962/LUCENE-6417.patch",
        "LUCENE-6417-cleanups.patch": "https://issues.apache.org/jira/secure/attachment/12749461/LUCENE-6417-cleanups.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14639933",
            "author": "Jack Conradson",
            "date": "2015-07-24T05:05:50+0000",
            "content": "This patch contains the code necessary to upgrade to ANTLR 4.5.\n\nThe following changes are included:\n\n\tUpdated the build.xml and ivy.xml to use ANTLR 4.5 instead of the prior version.\n\tModified the grammar to use only two parser rules including a left-hand recursive rule for the majority of the language.  Simplified the lexer rules.\n\tUsed the provided visitor pattern classes ANTLR 4.5 provides to move through the ANTLR parse tree.  The JavascriptCompiler nows inherits from a JavascriptBaseVisitor class.  While this does add some extra methods, it's also a well-known design pattern that can be easily modified by future contributors.  This allows for easy use of new rule context objects, so that some tokens may be ignored that aren't necessary.  Note that ANTLR 4.5 no longer has ASTs because it does not allow for tree rewriting.  The provided parse tree required some changes to the compiler since the root nodes now contain 3 children with something like '2' ' - ' '3' rather than tokens such as ' - ' with 2 children.\n\tMoved all error handling out of the grammar file making the grammar language agnostic.  Error handling is now part of separate java classes.\n\n "
        },
        {
            "id": "comment-14642091",
            "author": "Michael McCandless",
            "date": "2015-07-26T20:59:47+0000",
            "content": "Thanks Jack Conradson, it looks like a lot changed between ANTLR 3.5 and 4.5!\n\nI confirmed tests pass with your patch, then I ran ant run-antlr in the expressions module and tests still pass.  I don't understand all the changes but I trust you do!  Is this ready to be committed?  Maybe Robert Muir wants to review this...\n\nI'll fix the jar licenses/sha1 issues, but ant precommit is angry about this:\n\n\n-ecj-javadoc-lint-src:\n    [mkdir] Created dir: /tmp/ecj949391657\n [ecj-lint] Compiling 21 source files to /tmp/ecj949391657\n [ecj-lint] ----------\n [ecj-lint] 1. ERROR in /l/antlr/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptParserErrorStrategy.java (at line 72)\n [ecj-lint] \t* @throws RecognitionException\n [ecj-lint] \t          ^^^^^^^^^^^^^^^^^^^^\n [ecj-lint] Javadoc: Description expected after this reference\n [ecj-lint] ----------\n [ecj-lint] 1 problem (1 error)\n\n\n\nWhat description should I add...? "
        },
        {
            "id": "comment-14642092",
            "author": "Uwe Schindler",
            "date": "2015-07-26T21:03:33+0000",
            "content": "Hi Jack, I will tomorrow look into the ASM parts. I rewrote that after the code donation from A9 with Robert. I just want to make sure the Java Bytecode is created in most efficient way  Did you change the code in general or is this just moving the byte code generator fragments around in the code? "
        },
        {
            "id": "comment-14642111",
            "author": "Uwe Schindler",
            "date": "2015-07-26T22:05:27+0000",
            "content": "Ah, I would replace the old-style Java 1.0 java.util.Stack by java.util.ArrayDeque (which is not synchronized). This implements Deque, which basically a generalization of array-based stack: \n\n\nDeque<Type> typeStack = new ArrayDeque<>();\n\n "
        },
        {
            "id": "comment-14652029",
            "author": "Jack Conradson",
            "date": "2015-08-03T16:00:44+0000",
            "content": "Sorry, Mike and Uwe, for the delayed response.  I was actually on vacation the previous week.  I'll fix the pre-commit and make the suggested changes.  The ASM did not change at all (other than by mistake  ), I was just forced to re-organize the ASM generation code into smaller chunks for the Antlr 4.5 visitor.  Thanks for reviewing the patch! "
        },
        {
            "id": "comment-14652085",
            "author": "Jack Conradson",
            "date": "2015-08-03T16:48:53+0000",
            "content": "Attached an updated patch.  I think precommit passes now other than the license issue.  Also converted the Stack to an ArrayDeque. "
        },
        {
            "id": "comment-14653277",
            "author": "Uwe Schindler",
            "date": "2015-08-04T08:34:34+0000",
            "content": "Thanks Jack! I am fine with the patch! Only the Deque<Type> declaration should be final (no new patch needed).\n\nAbout the assembly: I was expecting this, I just wanted to make sure that the refactoring caused no changes. Maybe dump the class files to disk for old and new and compare afterwards - but if tests work as expected, we should be quite safe - maybe we need some random stuff here (with lots of recursions).\n\nRobert and I dumped the class files when we refactored this 2 years ago. "
        },
        {
            "id": "comment-14653282",
            "author": "Uwe Schindler",
            "date": "2015-08-04T08:44:57+0000",
            "content": "I will take care of this issue! Thanks for reporting.\n\nI would also suggest to update ASM to 5.0.x in the future, especially because we can then create Java 8 class files in trunk (which is not really needed as we use no default interface methods, but might be good idea). "
        },
        {
            "id": "comment-14653336",
            "author": "Uwe Schindler",
            "date": "2015-08-04T09:11:38+0000",
            "content": "I will do precommit tests and then commit this patch (including the final Deque later today). "
        },
        {
            "id": "comment-14653868",
            "author": "Jack Conradson",
            "date": "2015-08-04T16:04:45+0000",
            "content": "Thanks for picking this up, Uwe.  Please let me know if you need anything else from me. "
        },
        {
            "id": "comment-14654321",
            "author": "Uwe Schindler",
            "date": "2015-08-04T20:40:27+0000",
            "content": "I fixed the build now to have all required license files (will attach patch).\n\nWe still have one problem: The ANTLR code has now many subclasses which miss javadocs. Our Javadocs-Linter now breaks on precommit with:\n\n\n-documentation-lint:\n     [echo] checking for broken html...\n    [jtidy] Checking for broken html (such as invalid tags)...\n   [delete] Deleting directory C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-lusolr1\\lucene\\build\\jtidy_tmp\n     [echo] Checking for broken links...\n     [exec]\n     [exec] Crawl/parse...\n     [exec]\n     [exec] Verify...\n     [exec]\n     [exec] file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptVisitor.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/expressions.js.JavascriptParser.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.AddsubContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolandContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolcompContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BooleqneContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolorContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwandContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BworContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwshiftContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwxorContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.CompileContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.ConditionalContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.ExternalContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.MuldivContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.NumericContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.PrecedenceContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.UnaryContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.CompileContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.ConditionalContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolorContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolcompContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.NumericContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.AddsubContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.UnaryContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.PrecedenceContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.MuldivContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.ExternalContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwshiftContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BworContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolandContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwxorContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwandContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BooleqneContext.html\n     [exec]\n     [exec] file:///build/docs/expressions/org/apache/lucene/expressions/js/package-summary.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/expressions.js.JavascriptParser.html\n     [exec]\n     [exec] file:///build/docs/expressions/org/apache/lucene/expressions/js/package-use.html\n     [exec]   BROKEN LINK: file:///build/docs/core/org/apache/lucene/expressions.js.JavascriptParser.html\n     [exec]\n     [exec] file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptCompiler.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.AddsubContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolandContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolcompContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BooleqneContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolorContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwandContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BworContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwshiftContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwxorContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.CompileContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.ConditionalContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.ExternalContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.MuldivContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.NumericContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.PrecedenceContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.UnaryContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.CompileContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.PrecedenceContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.NumericContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.ExternalContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.UnaryContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.MuldivContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.AddsubContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwshiftContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolcompContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BooleqneContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwandContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BwxorContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BworContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolandContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.BoolorContext.html\n     [exec]   BROKEN LINK: file:///build/docs/expressions/org/apache/lucene/expressions/js/JavascriptParser.ConditionalContext.html\n     [exec]\n     [exec] Broken javadocs links were found!\n\n\n\nIndeed the problem is: The main class is package protected, but the inner classes generated by ANTLR are public, which violates visibility. We should also make them package protected. I am not sure how to do that without regular expressions in \"ant regenerate\". "
        },
        {
            "id": "comment-14654325",
            "author": "Uwe Schindler",
            "date": "2015-08-04T20:49:22+0000",
            "content": "Updated patch with all required license file changes, sha1 sums and changes to Solr's Ivy to use correct antlr version.\n\nThis still has the visibility problem causing javadocs to fail. I will check out whats possible. Jack Conradson, if you know how to make the inner classes package protected, please tell me, as I have a svn checkout ready to commit, I just need to fix the visibility problem in Javadocs. "
        },
        {
            "id": "comment-14654358",
            "author": "Uwe Schindler",
            "date": "2015-08-04T21:18:52+0000",
            "content": "I was trying to fix this, but the problem is: those inner classes are now part of public APIs (the visitors). So we must either make all visitor interfaces and the implementations hidden, which required impl methods pkg-protected, too (which is impossible to java: interface implementations have to be public). Alternatively we should remove the package private stuff completely and make everything public. But this f*cks up the API, because we wanted to have the whole ANT-stuff package private and therefore hidden from javadocs as implementation detail. Using the visitor interfaces, this is now impossible.\n\nSorry, I cannot commit this in this stage... We have to take care of this first. Just generate the Javadocs then look at JavascriptCompiler's Javadoc and you will see the problem. "
        },
        {
            "id": "comment-14654409",
            "author": "Jack Conradson",
            "date": "2015-08-04T21:46:38+0000",
            "content": "Hey Uwe, I understand the problem.  I need to give this some thought as I don't have a good solution off the top of my head. "
        },
        {
            "id": "comment-14654495",
            "author": "Jack Conradson",
            "date": "2015-08-04T22:47:24+0000",
            "content": "Uwe, would it be possible to move the implemented visitor methods from the JavascriptCompiler into a private static inner class inside of the JavascriptCompiler to hide them properly and then make all the other public classes package protected through regexs like we already do for some of the classes in the build.xml file?  Would this satisfy the requirements of keeping all the ANTLR methods hidden or is there more that I'm missing?\n\nThe other option that I can think of is to go back to parsing the raw tree again, but I prefer to avoid this if possible due to changes in the tree structures between ANTLR 3 and 4.\n\nPlease let me know what you think. "
        },
        {
            "id": "comment-14654538",
            "author": "Robert Muir",
            "date": "2015-08-04T23:40:41+0000",
            "content": "nobody wants it, but a heavy regex solution can work "
        },
        {
            "id": "comment-14654604",
            "author": "Jack Conradson",
            "date": "2015-08-05T00:57:33+0000",
            "content": "Robert Muir then maybe the best solution is to drop the visitor and parse the tree as before?  As a possible third option, I checked to see if it was possible to easily modify the string template files used to generate the code from the grammars, but there's no easy way to point to a custom one.  We might be able to still do this, but it would either be through some fragile classes that I don't anticipate were meant to be overridden or by injecting a custom template file into a copied version of the antler 4 jar \u2013 definitely not a pretty solution. "
        },
        {
            "id": "comment-14655068",
            "author": "Uwe Schindler",
            "date": "2015-08-05T09:32:05+0000",
            "content": "Hi,\nthere is actually a solution without any additional regexes. The main problem are not the inner autogenerated *Context classes. They can stay public, because the outer class is pkg private. The problem are more interfaces and their implementations using those private classes in public signatures.\n\nThe problem here is the following: JavascriptCompiter is public API but it implements an interface using pkg private classes in method signatures. This causes issues, because all methods implementing an interface must be public  Because JavascriptCompiter is public those methods get visible to everybody, but their signatures use pkg-protected (sub-)classes. This breaks visibility and Javadocs linting fails (404 not found errors).\n\nThe solution is the following:\n\n\tmake JavascriptErrorHandlingLexer, JavascriptParserErrorStrategy pkg private (its impl detail)\n\tmake JavascriptVisitor interface pkg-private (this one is the main issue)\n\tthe problem is now that JavaScriptCompiler implements JavascriptVisitor (through extending JavascriptBaseVisitor), and therefore all implemented methods get public (which is bad). The workaround is the following: Make the actual visitor implementation not part of public API, instead create the visitor (that extends JavascriptBaseVisitor) inside JavascriptCompiler as anonymous, private instance and call the visit method on it, but not extend the BaseVisitor and the \"bad\" interface directly in the top-level class. Because it will get an anonymous inner class it has access to all methods/fields of JavascriptCompiler, but the implemented interface and abstract class keeps private. You can move most methods handling the visiting process into the anonymous inner class. On top-level you just have the compiler (as before).\n\n\n\nI have not much time today to implement this, but this might work. Jack Conradson: If you work on this, can you use my patch as base? I already solved the license issues, so precommit passes, except the visibility problems.\n\nFinally, the VariableContext should be pkg-private, too - it was made public in some earlier commit, but it does not need to be public at all (I think?). "
        },
        {
            "id": "comment-14658327",
            "author": "Jack Conradson",
            "date": "2015-08-05T14:59:07+0000",
            "content": "Uwe, this sounds like a reasonable solution.  I'll try to get a new patch up later today.  Thanks for all the feedback so far.  I'm fairly confident the VariableContext is meant to be used outside of the package for help parsing variables into their individual pieces \u2013\n\nx.y.z --> x and y and z as individual pieces\nmap['string'].t --> map and string and t\n\nSo it doesn't make sense to have it be package-private. "
        },
        {
            "id": "comment-14658667",
            "author": "Uwe Schindler",
            "date": "2015-08-05T18:45:00+0000",
            "content": "I'm fairly confident the VariableContext is meant to be used outside of the package for help parsing variables into their individual pieces\n\nOK. I just have not seen any method signature taking the context, so I had the feeling its internal only. But thats unrelated to this issue. "
        },
        {
            "id": "comment-14659252",
            "author": "Jack Conradson",
            "date": "2015-08-06T00:26:25+0000",
            "content": "Attached a new patch with the requested changes.  All classes should be package-private now except for VariableContext and the JavascriptCompiler.  The ANTLR visitor is now encapsulated in an anonymous inner class to hide the implementation details of the compiler. "
        },
        {
            "id": "comment-14659644",
            "author": "Uwe Schindler",
            "date": "2015-08-06T07:48:57+0000",
            "content": "Thanks Jack,\nI will look into this later. I am out of office at the moment! But from my quick inspection, this looks really fine!\nUwe "
        },
        {
            "id": "comment-14660801",
            "author": "Uwe Schindler",
            "date": "2015-08-06T21:13:15+0000",
            "content": "Hi,\npatch looks good. I did some minor changes at the visibility of the JavascriptCompiler fields to prevent acess$X methods (Eclipse warning about synthetic access) and imported everything successfully into subversion. I also changed the visibility of the error listeners/handlers to pkg private, the javadocs now look identical to before.\n\n\"ant precommit\" passes and all maven dependencies are fine.\n\n\"ant regenerate\" recreates the files without overriding my visibility changes.\n\nI will run all tests tomorrow and commit, it's too late now. Thanks Jack! "
        },
        {
            "id": "comment-14660824",
            "author": "Jack Conradson",
            "date": "2015-08-06T21:25:30+0000",
            "content": "Thanks again, Uwe, for all the feedback and taking the time to get the patch into Lucene. "
        },
        {
            "id": "comment-14661424",
            "author": "ASF subversion and git services",
            "date": "2015-08-07T07:10:42+0000",
            "content": "Commit 1694614 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1694614 ]\n\nLUCENE-6417: Upgrade ANTLR used in expressions module to version 4.5 "
        },
        {
            "id": "comment-14661427",
            "author": "ASF subversion and git services",
            "date": "2015-08-07T07:17:25+0000",
            "content": "Commit 1694615 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1694615 ]\n\nMerged revision(s) 1694614 from lucene/dev/trunk:\nLUCENE-6417: Upgrade ANTLR used in expressions module to version 4.5 "
        },
        {
            "id": "comment-14661428",
            "author": "Uwe Schindler",
            "date": "2015-08-07T07:17:41+0000",
            "content": "Thanks Jack! "
        },
        {
            "id": "comment-14661647",
            "author": "ASF subversion and git services",
            "date": "2015-08-07T10:58:54+0000",
            "content": "Commit 1694650 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1694650 ]\n\nLUCENE-6417: Add missing licenses/checksums in 5.x (Solr had no antlr4 in 5.x - no presto parser) "
        },
        {
            "id": "comment-14679084",
            "author": "Uwe Schindler",
            "date": "2015-08-09T10:30:25+0000",
            "content": "I have some cleanups for the ANTLR stuff (build.xml):\n\n\tRemove useless regular expressions\n\tDon't copy-paste always the same, use a patternset for the files to edit\n\tremove the \n{.tokens}\n files after regenerating, they are not needed\n\trename the grammar Javascript.g to Javascript.g4 (the ANTLR documentation suggests g4 for the new grammar files, so editors can detect the type correctly)\n\n "
        },
        {
            "id": "comment-14679085",
            "author": "Uwe Schindler",
            "date": "2015-08-09T10:30:37+0000",
            "content": "Reopening for some fixes. "
        },
        {
            "id": "comment-14679088",
            "author": "ASF subversion and git services",
            "date": "2015-08-09T10:46:16+0000",
            "content": "Commit 1694865 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1694865 ]\n\nLUCENE-6417: Cleanup ANTLR code generator "
        },
        {
            "id": "comment-14679089",
            "author": "ASF subversion and git services",
            "date": "2015-08-09T10:47:52+0000",
            "content": "Commit 1694866 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1694866 ]\n\nMerged revision(s) 1694865 from lucene/dev/trunk:\nLUCENE-6417: Cleanup ANTLR code generator "
        },
        {
            "id": "comment-14679117",
            "author": "ASF subversion and git services",
            "date": "2015-08-09T12:10:32+0000",
            "content": "Commit 1694876 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1694876 ]\n\nLUCENE-6417: Make JavascriptCompiler completely stateless (thanks to visitor pattern) "
        },
        {
            "id": "comment-14679119",
            "author": "ASF subversion and git services",
            "date": "2015-08-09T12:13:02+0000",
            "content": "Commit 1694879 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1694879 ]\n\nLUCENE-6417: make params final (for Java 7) "
        },
        {
            "id": "comment-14679120",
            "author": "ASF subversion and git services",
            "date": "2015-08-09T12:14:36+0000",
            "content": "Commit 1694880 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1694880 ]\n\nMerged revision(s) 1694876,1694879 from lucene/dev/trunk:\nLUCENE-6417: Make JavascriptCompiler completely stateless (thanks to visitor pattern) "
        },
        {
            "id": "comment-14679122",
            "author": "Uwe Schindler",
            "date": "2015-08-09T12:15:44+0000",
            "content": "I just committed a change to make JavaScriptCompiler completely stateless, this was non-ideal before, but thanks to separate visitor this is now much more elegant. "
        },
        {
            "id": "comment-14679209",
            "author": "ASF subversion and git services",
            "date": "2015-08-09T16:45:25+0000",
            "content": "Commit 1694897 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1694897 ]\n\nLUCENE-6417: remove useless import "
        },
        {
            "id": "comment-14679210",
            "author": "ASF subversion and git services",
            "date": "2015-08-09T16:46:35+0000",
            "content": "Commit 1694898 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1694898 ]\n\nMerged revision(s) 1694897 from lucene/dev/trunk:\nLUCENE-6417: remove useless import "
        }
    ]
}