{
    "id": "SOLR-1787",
    "title": "Add ability to configure behavior of cache miss to CachedSqlEntityProcessor",
    "details": {
        "affect_versions": "1.5",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "The CachedSqlEntityProcessor currently builds a cache of rows it sees as it goes, so later requests for that same key can be served from data that has already been fetched. The primary query could be written to fetch all possible rows, which would then be set into the cache on the first request for a row. In that case the database would only receive another query when there is a cache miss. However, the query it would execute is the one that pulls all rows, negating any performance gain.\n\nThis patch adds the ability to configure behavior on cache miss with the \"onCacheMiss\" attribute on an \"entity\" tag in the data-config.xml file. The current behavior is the default, corresponding to the setting onCacheMiss=\"fill\". Any other value explicitly given for onCacheMiss will cause cache misses to be ignored - no query will be made to the db to fulfill them.\n\nI've encountered two cases where this capability is useful:\n\n1. Relatively small datasets, such as category id -> category name mappings, which will not change during the course of indexing.\n2. Queries which are heavy on db resources per-query, particularly if the query for an individual record is slow, and can't be fixed easily on the db side for whatever reason.",
    "attachments": {
        "solr-1787.patch": "https://issues.apache.org/jira/secure/attachment/12436641/solr-1787.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Michael Henson",
            "id": "comment-12836976",
            "date": "2010-02-22T23:09:23+0000",
            "content": "First draft patch. Fairly straightforward. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12837251",
            "date": "2010-02-23T14:29:09+0000",
            "content": "is pre-warming done in this patch? "
        },
        {
            "author": "Michael Henson",
            "id": "comment-12837424",
            "date": "2010-02-23T20:12:57+0000",
            "content": "There isn't any new code to make a pre-warming call. The design relies on filling the cache on the first call to getAllNonCachedRows().\n\nI'm also relying on the synchronize block of ThreadedEntityProcessorWrapper.nextRow() to block other threads while the cache filling query runs. It looks like I'm missing some aspect of multi-threading because I get SQLException's with \"could not execute query\" when I have threads=\"3\" on the root entity. "
        },
        {
            "author": "Michael Henson",
            "id": "comment-12838052",
            "date": "2010-02-24T22:49:17+0000",
            "content": "The SQLException issue looks like it's an issue with my desktop machine's ability to maintain a connection to our database rather than the code itself. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12838208",
            "date": "2010-02-25T06:46:18+0000",
            "content": "you can change the title of the issue so that it reflects what is the actual requirement "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872613",
            "date": "2010-05-27T22:09:13+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043677",
            "date": "2011-06-03T16:46:28+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106415",
            "date": "2011-09-16T14:50:58+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412122",
            "date": "2012-07-11T22:26:04+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429812",
            "date": "2012-08-07T03:43:16+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13445566",
            "date": "2012-08-31T01:39:47+0000",
            "content": "\n\tThere is no indication that anyone is actively working on this issue, so removing 4.0 from the fixVersion.\n\tAssigning in hopes he can assess the current patch to possible revisit the issue\n\n "
        },
        {
            "author": "James Dyer",
            "id": "comment-13446021",
            "date": "2012-08-31T14:54:17+0000",
            "content": "SOLR-2382 added support for pluggable cache implementations, which might be able to better support Michael's 2 use-cases for this, making this feature less needed.  Also, the patch is very much out of date and lacks unit tests.  Given an apparent lack of interest on this one, I would make it \"won't fix\" unless anyone objects. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13447723",
            "date": "2012-09-04T14:33:10+0000",
            "content": "Closing as this is an old issue with little activity.  This can be reopened if someone wants to pursue this again later. "
        }
    ]
}