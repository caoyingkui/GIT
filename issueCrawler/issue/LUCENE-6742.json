{
    "id": "LUCENE-6742",
    "title": "Fix SnowballFilter for Lovins & Finnish (and others that use reflection)",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/analysis"
        ],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "While reviewing the warnings (LUCENE-6740) I noticed the following:\nThe LovinsStemmer and the FinnishStemmer from the snowball package cannot work at all. Indeed Robert Muir added a comment to the test referring to: http://article.gmane.org/gmane.comp.search.snowball/1139\n\nThe bug is the following: The Among class looks up the method to call via reflection. But the stemmer compiler creates all these methods as private. As  AccessibleObject#setAccessible() is called nowhere (we also don't want this), the SnowballProgram main class cannot call the method. Unfortunately it completely supresses all reflection errors and returns false. SnowballProgram then thinks, the called private boolean r_A() method returned false and so the whole snowball algorithm breaks.\n\nAlso the snowball stemmer classes had a bug: methodObject is a static instance of the Stemmer, and Among calls the private method then on wrong object. So when fixing the above, this would fail again (because the stemmer changes a static singleton object, not itsself!). We also need to change the object in SnowballProgram to use \"this\" when calling the method.\n\nThere are several possibilities to solve the private methods problem:\n\n\tcall AccessibleObject.setAccessible(true) -> we don't want this! Never Ever! \n\tpatch the whole Snowball-generated classes to make those methods \"public\". This is a huge patch and shows many internals => no way\n\tSince Java 7 we can use a cool trick, my favourite: MethodHandles\n\n\n\nThe MethodHandles trick can be done the following way:\n\n\tChange the Among class to get a MethodHandles.Lookup in its ctor (instead of the broken static SnowballProgram instance methodObject). This lookup is used to lookup the method by name. This Lookup Object must be private to our implementing class (the one that defines the private methods). If this is the case, we can get a method handle and call the method (from anywhere, because we \"own\" it).\n\treplace the (already broken) methodObject in every stemmer to instead be the correct MethodHandles.Lookup of the implementing class containing the private method. This has 2 effects: The class to get the lookup gets all access rights to the class calling it (so we can access private methods) and also sees all methods.\n\n\n\nThe second part is done by a new Ant task: ant patch-snowball. Whenever you add a new Snowball stemmer, copy the java file generated by the snowball compiler to the ext directory and call the ant task. It will patch the methodObject declaration (and also add a @SuppressWarnings(\"unused\") for convenience).\n\nI reenabled the dictionary tests and the whole stemmer works. There are also no issues with security managers, because we do nothing security sensitive (all is our own stuff, no setAccessible).\n\nAnd finally: LovinsStemmer and FinnishStemmer got insanely fast (and correct, of course).",
    "attachments": {
        "LUCENE-6742-Java8.patch": "https://issues.apache.org/jira/secure/attachment/12750699/LUCENE-6742-Java8.patch",
        "LUCENE-6742.patch": "https://issues.apache.org/jira/secure/attachment/12750678/LUCENE-6742.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14698490",
            "author": "Uwe Schindler",
            "date": "2015-08-15T23:47:20+0000",
            "content": "Here is the patch. To test the ANT task, revert all changes in org/tartarus/snowball/ext and run ant patch-snowball from the analysis/common module. "
        },
        {
            "id": "comment-14698497",
            "author": "Uwe Schindler",
            "date": "2015-08-16T00:13:29+0000",
            "content": "Small fixes to patcher (charset). "
        },
        {
            "id": "comment-14698503",
            "author": "Robert Muir",
            "date": "2015-08-16T00:50:43+0000",
            "content": "Big +1, I love that it fixes the correctness issues here.\n\nAs a followup, i would like to sync us up to snowball on github, since right now its difficult to add new stemmers (see the Lithuanian issue). It would be good to commit this one first and then we can iterate on that. "
        },
        {
            "id": "comment-14698504",
            "author": "Robert Muir",
            "date": "2015-08-16T00:57:01+0000",
            "content": "We should also send this fix as a PR to snowball, I think its important since it fixes problems with correctness. If you don't have time, let me know and I can try to do it. "
        },
        {
            "id": "comment-14698507",
            "author": "Uwe Schindler",
            "date": "2015-08-16T01:09:22+0000",
            "content": "Yes, we should do this! Interestingly, the source code of their java impl is still on revision 503 (one after ours, but no changes at all). So their generator code does not fit their java impl...: https://github.com/snowballstem/snowball/tree/master/java/org/tartarus/snowball\n\nThe code their SnowballCompiler generated was in fact \"correct\", but the SnowballProgram algorithm was broken. "
        },
        {
            "id": "comment-14698626",
            "author": "Uwe Schindler",
            "date": "2015-08-16T11:20:54+0000",
            "content": "New patch. I also added some documentation to Javadocs and README.txt how to get the \"revision 502\" from Github (I added the commit hash link).\n\nRobert Muir: Can you check if the version 502 as linked works for regenerating? In the comments you mentioned that the stemmers were also patched. As we already have the \"snowball-patch\" command, we may also add more regexes to fix the compiled classes and adapt API (if thats easy). "
        },
        {
            "id": "comment-14698628",
            "author": "Uwe Schindler",
            "date": "2015-08-16T11:25:54+0000",
            "content": "For completeness I also played around with rewriting more of the Among call for Java 8. This may be a the most elegant solution, as it has no reflection at all, but requires heavy pathcing (and only works with Java 8):\n\n\n\tAmong now takes a functional interface as last parameter to the ctor (or null, if no function, previously empty string)\n\tThe compiled classes use XxxStemmer::r_XX method references (Java 8). This ensures correctness already at compile time! This required most patching!\n\tSnowballProgramm now just uses the functional interface to call the method (if not null).\n\n\n\nActually, its much less code, speed should be the same like the Java 7 MethodHandles solution, but more elegant and safe at compile time.\n\nI would like to commit the Java 7 version to trunk and 5.x, but leave the Java 8 version here as \"example\", how to implement the C function pointers in Java (Java 8's method references are nothing more than \"safe\" C function pointers!). "
        },
        {
            "id": "comment-14698636",
            "author": "Robert Muir",
            "date": "2015-08-16T12:06:33+0000",
            "content": "Sorry, there is no revision 502 anymore. Now there is only shitty git. So its difficult to regenerate the stemmers. That needs to be another issue. "
        },
        {
            "id": "comment-14698643",
            "author": "Uwe Schindler",
            "date": "2015-08-16T12:40:44+0000",
            "content": "The revision 502 is still there. See the github link in my patch. This is exactly rev 502 from the old svn.\n\nI added it to rwadme and comments.\n\nyou should be able to download it and use it. Just don't use HEAD. "
        },
        {
            "id": "comment-14698651",
            "author": "Robert Muir",
            "date": "2015-08-16T13:08:10+0000",
            "content": "But as i already said, regeneration is broken today in trunk if you do that. it should really be a separate issue. "
        },
        {
            "id": "comment-14698662",
            "author": "Uwe Schindler",
            "date": "2015-08-16T13:24:03+0000",
            "content": "I agree. I just pointed the documentation in my latest patch to the revision 502 which has now a differenbt GIT ID: https://github.com/snowballstem/snowball/tree/e103b5c257383ee94a96e7fc58cab3c567bf079b\nThis lists the following as commit message:\ngit-svn-id: svn+userv://snowball.tartarus.org/snowball/trunk/snowball@502 633ccae0-01f4-0310-8c99-d3591da6f01f\nClearly referring to rev 502. Theoretically it should be possible to use this exact github variant (click on \"Download ZIP\" on the right-bottom) for regenerate: https://github.com/snowballstem/snowball/archive/e103b5c257383ee94a96e7fc58cab3c567bf079b.zip\n\nI will open a separate issue to donate our changes back to Snowball (so we have access to inner char[]),... and also fix the C code to generate the MethodHandles.lookup() that I patched in. Maybe the snowball people also want the much more safe Java 8 method reference implementation, but this is all separate.\n\nWe should also investigate later if the linear scan through all amongs is really the best idea, maybe we can improve that, too - but also at snowball's repo.\n\nFinally: The Java 8 patch is just for reference how it could look like - but there is too many patching of generated files in it. So I would stay with the MethodHandles variant thats bugfree and fast, it just uses still the \"string names\" of the private methods, but works perfectly. I just attached the patch here to \"save my work\" and show you, Robert Muir, how the compiled result could look like. "
        },
        {
            "id": "comment-14698688",
            "author": "ASF subversion and git services",
            "date": "2015-08-16T14:22:39+0000",
            "content": "Commit 1696147 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1696147 ]\n\nLUCENE-6742: Lovins & Finnish implementation of SnowballFilter was fixed to behave exactly as specified. A bug in the snowball compiler caused differences in output of the filter in comparison to the original test data. In addition, the performance of those filters was improved significantly "
        },
        {
            "id": "comment-14698691",
            "author": "ASF subversion and git services",
            "date": "2015-08-16T14:25:57+0000",
            "content": "Commit 1696148 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1696148 ]\n\nMerged revision(s) 1696147 from lucene/dev/trunk:\nLUCENE-6742: Lovins & Finnish implementation of SnowballFilter was fixed to behave exactly as specified. A bug in the snowball compiler caused differences in output of the filter in comparison to the original test data. In addition, the performance of those filters was improved significantly "
        },
        {
            "id": "comment-14698692",
            "author": "Uwe Schindler",
            "date": "2015-08-16T14:26:12+0000",
            "content": "Thanks Robert for review! "
        }
    ]
}