{
    "id": "SOLR-10109",
    "title": "SoftAutoCommitTest is too fragile.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Test",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In my beast test runs it has failed 7% of the time, then 3% of the time, then when I started using hardware with 8 cores instead of 16, 40% of the time (unless something else also shifted). That gives it a test rating of 'screwy'.",
    "attachments": {
        "SOLR-10109.testSoftAndHardCommitMaxTimeRapidAdds.patch": "https://issues.apache.org/jira/secure/attachment/12876723/SOLR-10109.testSoftAndHardCommitMaxTimeRapidAdds.patch",
        "SoftAutoCommitTest.2017-05-02.3983.log.txt": "https://issues.apache.org/jira/secure/attachment/12876650/SoftAutoCommitTest.2017-05-02.3983.log.txt",
        "SoftAutoCommitTest.2017-02-25.2938.log.txt": "https://issues.apache.org/jira/secure/attachment/12876651/SoftAutoCommitTest.2017-02-25.2938.log.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-02-09T22:02:19+0000",
            "content": "Commit d7d3d5a4fd4b6c3f2ed50c6492153f4b5b715530 in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d7d3d5a ]\n\nSOLR-10109: SoftAutoCommitTest is too fragile, harden the hell out of it. ",
            "author": "ASF subversion and git services",
            "id": "comment-15860291"
        },
        {
            "date": "2017-02-09T22:10:21+0000",
            "content": "This class is my old friend (5 years ago going by AutoCommitTest). I have dozens of tiny commits trying to straighten out it's odd wonders by simply pushing on timeout limits.\n\nIt's always been a fail happy test, though I think sometimes it's been better and other times worse. It's trying too hard to test shortish timings I think. It also looks like SOLR-10110 really made what was going on in this test even worse.\n\nAnyway, for the last half a day I battled it from 40-50% fails in 30 to 1 fail in 30 to 1 fail in 60 to a couple fails in 200 until now when I've gotten out a few 200 run beastings with no fails.\n\nDoes not mean they don't exist, but I'm praying there is some improvement.\n ",
            "author": "Mark Miller",
            "id": "comment-15860300"
        },
        {
            "date": "2017-02-10T00:35:27+0000",
            "content": "Commit 40cc8cb85a93a74de8ba7a69858a1e0a9cf05f0a in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=40cc8cb ]\n\nSOLR-10109: Capture 'free' commits and improve a couple timeouts. ",
            "author": "ASF subversion and git services",
            "id": "comment-15860466"
        },
        {
            "date": "2017-02-20T00:19:40+0000",
            "content": "Commit f45a3711b182c49a8c9b04cfcb6b3052505deaef in lucene-solr's branch refs/heads/master from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f45a371 ]\n\nSOLR-10109: SoftAutoCommitTest is too fragile. ",
            "author": "ASF subversion and git services",
            "id": "comment-15873891"
        },
        {
            "date": "2017-02-22T16:11:33+0000",
            "content": "Commit 86973ca4f661c0fc44fefc6f4f9d9f8b545c5007 in lucene-solr's branch refs/heads/branch_6x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=86973ca ]\n\nSOLR-10109: SoftAutoCommitTest is too fragile, harden the hell out of it. ",
            "author": "ASF subversion and git services",
            "id": "comment-15878580"
        },
        {
            "date": "2017-02-22T16:11:37+0000",
            "content": "Commit 8d8ed80a3267d6f6274ea52c2e40e78e9796d8bc in lucene-solr's branch refs/heads/branch_6x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8d8ed80 ]\n\nSOLR-10109: Capture 'free' commits and improve a couple timeouts. ",
            "author": "ASF subversion and git services",
            "id": "comment-15878581"
        },
        {
            "date": "2017-02-22T16:11:40+0000",
            "content": "Commit 953fe9de34613fa8c77fc8449378e569adf9659a in lucene-solr's branch refs/heads/branch_6x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=953fe9d ]\n\nSOLR-10109: SoftAutoCommitTest is too fragile. ",
            "author": "ASF subversion and git services",
            "id": "comment-15878582"
        },
        {
            "date": "2017-07-11T16:21:24+0000",
            "content": "\nMark Miller: Since your commit in feb, the number of jenkins failures for SoftAutoCommitTest has dropped noticeably \u2013 well done!\n\nThere have only been 2 jenkins failures, since then \u2013 I don't have the full logs, but i'm attaching the bodies of the jenkins emails.  In both cases, the failure was the same assertion in testSoftAndHardCommitMaxTimeRapidAdds...\n\n\njava.lang.AssertionError: 2: hard wasn't fast enough\n        at __randomizedtesting.SeedInfo.seed([FF159C05808D08C6:A300323C6B0F49BE]:0)\n        at org.junit.Assert.fail(Assert.java:93)\n        at org.junit.Assert.assertTrue(Assert.java:43)\n        at org.junit.Assert.assertNotNull(Assert.java:526)\n        at org.apache.solr.update.SoftAutoCommitTest.testSoftAndHardCommitMaxTimeRapidAdds(SoftAutoCommitTest.java:382)\n\n\n\nIf you look at the timing info from the logs, and do some simple math, the problem seems clear...\n\n\n   [junit4]   2> 2824567 INFO  (TEST-SoftAutoCommitTest.testSoftAndHardCommitMaxTimeRapidAdds-seed#[FF159C05808D08C6]) [    ] o.a.s.SolrTestCaseJ4 ###Starting testSoftAndHardCommitMaxTimeRapidAdds\n   [junit4]   2> 2832001 INFO  (TEST-SoftAutoCommitTest.testSoftAndHardCommitMaxTimeRapidAdds-seed#[FF159C05808D08C6]) [    ] o.a.s.u.p.LogUpdateProcessorFactory [collection1]  webapp=null path=null params={}{add=[5000 (1566326219147837440)]} 0 2424\n   [junit4]   2> 2832002 INFO  (TEST-SoftAutoCommitTest.testSoftAndHardCommitMaxTimeRapidAdds-seed#[FF159C05808D08C6]) [    ] o.a.s.u.p.LogUpdateProcessorFactory [collection1]  webapp=null path=null params={}{add=[5001 (1566326221690634240)]} 0 0\n   [junit4]   2> 2832003 INFO  (TEST-SoftAutoCommitTest.testSoftAndHardCommitMaxTimeRapidAdds-seed#[FF159C05808D08C6]) [    ] o.a.s.u.p.LogUpdateProcessorFactory [collection1]  webapp=null path=null params={}{add=[5002 (1566326221690634241)]} 0 0\n   [junit4]   2> 2832003 INFO  (TEST-SoftAutoCommitTest.testSoftAndHardCommitMaxTimeRapidAdds-seed#[FF159C05808D08C6]) [    ] o.a.s.u.p.LogUpdateProcessorFactory [collection1]  webapp=null path=null params={}{add=[5003 (1566326221691682816)]} 0 0\n   [junit4]   2> 2832004 INFO  (TEST-SoftAutoCommitTest.testSoftAndHardCommitMaxTimeRapidAdds-seed#[FF159C05808D08C6]) [    ] o.a.s.u.p.LogUpdateProcessorFactory [collection1]  webapp=null path=null params={}{add=[5004 (1566326221691682817)]} 0 0\n   [junit4]   2> 2832506 INFO  (commitScheduler-7474-thread-1) [    ] o.a.s.u.DirectUpdateHandler2 start commit{,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=true,prepareCommit=false}\n   [junit4]   2> 2832509 INFO  (commitScheduler-7474-thread-1) [    ] o.a.s.s.SolrIndexSearcher Opening [Searcher@1d85065c[collection1] main]\n   [junit4]   2> 2832509 INFO  (commitScheduler-7474-thread-1) [    ] o.a.s.u.DirectUpdateHandler2 end_commit_flush\n   [junit4]   2> 2832511 INFO  (searcherExecutor-7470-thread-1) [    ] o.a.s.c.SolrCore [collection1] Registered new searcher Searcher@1d85065c[collection1] main{ExitableDirectoryReader(UninvertingDirectoryReader(Uninverting(_1(7.0.0):c1) Uninverting(_2(7.0.0):c1) Uninverting(_3(7.0.0):c1) Uninverting(_4(7.0.0):c5)))}\n   [junit4]   2> 2833207 INFO  (commitScheduler-7473-thread-1) [    ] o.a.s.u.DirectUpdateHandler2 start commit{,optimize=false,openSearcher=false,waitSearcher=true,expungeDeletes=false,softCommit=false,prepareCommit=false}\n\n\n\nIf you compare the timstamp when the first doc finished being added (2832001) with the timstamp of when the hard commit started (2833207) then that's almost exactly the 1200ms hardCommitWaitMillis (2833207 - 2832001 = 1206) and it's understandable that only 1 hard commit happened since all of the docs were added in under 12 seconds.  But the test requires the fast5start timestamp before adding the first document, and as we can see from the add=[5000 (1566326219147837440)]} 0 2424 log line that request was stalled for 2.4seconds \u2013 which probably explains why the test thread thinks the 5 adds took longer then 12seconds and expects more then 1 hardCommit.  (it's not clear since the test does actaully log fast5start or fast5end)\n\n\nI think the right fix is to do something like this...\n\n\n// record pre/post times for start/stop to account for flux in when add\n// recorded by commit tracker for first/last doc in the set\nfinal long preStart = System.nanoTime();\nassertU(adoc(\"id\",5000));\nfinal long postStart = System.nanoTime();\nassertU(adoc(\"id\",5001));\nassertU(adoc(\"id\",5002));\nassertU(adoc(\"id\",5003));\nfinal long preEnd = System.nanoTime();\nassertU(adoc(\"id\",5004));\nfinal long postEnd = System.nanoTime();\n\nfinal long minTime = preEnd - postStart;\nfinal long maxTime = postEnd - preStart;\n\n// NOTE: explicitly useing truncated division of longs to round down for \"min\" values\nfinal long minExpectedSoft = Math.max(1, minTime / softCommitWaitMillis);\nfinal long minExpectedHard = Math.max(1, minTime / hardCommitWaitMillis);\n\n// round up for \"max\" values\nfinal long maxExpectedSoft = Math.max(1, Math.ceil(((double)maxTime) / softCommitWaitMillis);\nfinal long maxExpectedHard = Math.max(1, Math.ceil(((double)maxTime) / hardCommitWaitMillis);\n\n// TODO....\n// now assert we can poll each type for the minExpectedFoo and not get nulls\n// then accept that we *might* have up to 'maxExpectedFoo-minExpectedFoo' non-null values as well\n\n\n\n\nUnless I'm missing something, that would preserve the spirit of the test, and account for possible slow machine lag as well.  I'll start working on a patch (and include some nocommit random sleeps to help test for the possibility of this lag) but in the meantime if you see any flaws in this approach please ping me ASAP.\n\n ",
            "author": "Hoss Man",
            "id": "comment-16082459"
        },
        {
            "date": "2017-07-12T00:00:59+0000",
            "content": "\n... I'll start working on a patch (and include some nocommit random sleeps to help test for the possibility of this lag) ...\n\nI'm attaching what I wrote up, but even as I was working on it I started having doubts which were verified the first time i ran it with the random sleeps in place: The minExpectedFoo calculations are fundementally assuming that the \"lag\" is even between the updates.  If we imagine a machine where the first 4 docs are added w/o any lag, but then the CPU stalls the main test thread for ~4 * the autoCommit value before adding the final document, the math i suggested will assumethere must be a min of 3 commits, but in reality it makes sense that only 2 commits would have happened.\n\nI think the \"correct\" assertions we should be able to make are...\n\n\n\tthere must be a minimum of 1 each hard/soft commit\n\t\n\t\tthe (non-null) timestamps of these commits reported by the monitor must be less then the \"after add\" time (recorded by the test thread) of the first doc + the autoCommit value + some fudge\n\t\n\t\n\tthere may be additional commits of each type...\n\t\n\t\tthe upper limit on the # of additional commits allowed can be determined by dividing the total add duration (recorded by the test thread) by the autoCommit values for each type\n\t\tif we poll a monitor for that type of commit and find a non-null timestamp:\n\t\t\n\t\t\tthe timestamp must be less then the last timestamp (from the same monitor) + the autoCommit value + some fudge\n\t\t\n\t\t\n\t\tif we poll a monitor for that type of commit and find a null timestamp:\n\t\t\n\t\t\tthere better not be any more commits of that type later if we keep polling\n\t\t\n\t\t\n\t\n\t\n\n\n\nThis is sort of along the lines of what the existing (in master) loop logic for i <= expectedSoft does \u2013 in terms of treating i == 1 as required \u2013 except that:\n\n\tit only asserts that all commit timestamps are within the expected range of the last doc added \u2013 not the previous commit\n\tthe existing i <= expectedHard loop doesn't have similar logic / accounting.\n\n\n\n\nI'll experiment with this idea. ",
            "author": "Hoss Man",
            "id": "comment-16083228"
        },
        {
            "date": "2017-07-12T02:07:20+0000",
            "content": "I'll experiment with this idea.\n\nAs written, I had the valid assertions mixed up in that comment \u2013 but I think i've got them correct in this version of the patch.\n\n(still hammering on it with randomized sleep delays, but so far so good)\n\nMark Miller - what do you think?\n ",
            "author": "Hoss Man",
            "id": "comment-16083317"
        },
        {
            "date": "2017-07-13T18:40:24+0000",
            "content": "Commit d8990db302f5922f4db8138eac00cd77d24e14dc in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d8990db ]\n\nSOLR-10109: harden up the assertions in SoftAutoCommitTest.testSoftAndHardCommitMaxTimeRapidAdds ",
            "author": "ASF subversion and git services",
            "id": "comment-16086191"
        },
        {
            "date": "2017-07-13T18:41:53+0000",
            "content": "I've committed (the cleaned up version of) my patch \u2013 ONLY TO MASTER \n\nWe can keep an eye on it for a bit, and if there are no obvious signs of problems with the (slower) jenkins builds on master vs the other branches then backport. ",
            "author": "Hoss Man",
            "id": "comment-16086194"
        },
        {
            "date": "2017-08-09T01:30:52+0000",
            "content": "Commit d85ed6274e4295d932009f68d546111f18363d07 in lucene-solr's branch refs/heads/branch_7x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d85ed62 ]\n\nSOLR-10109: harden up the assertions in SoftAutoCommitTest.testSoftAndHardCommitMaxTimeRapidAdds ",
            "author": "ASF subversion and git services",
            "id": "comment-16119281"
        },
        {
            "date": "2017-08-09T01:31:45+0000",
            "content": "Commit e55b01324be63e3770527c2fbf764e1f2ad3e039 in lucene-solr's branch refs/heads/branch_7_0 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e55b013 ]\n\nSOLR-10109: harden up the assertions in SoftAutoCommitTest.testSoftAndHardCommitMaxTimeRapidAdds ",
            "author": "ASF subversion and git services",
            "id": "comment-16119283"
        },
        {
            "date": "2017-08-09T01:52:24+0000",
            "content": "I did not see any failure since Chris Hostetter (Unused) last commit on master.  ",
            "author": "Cao Manh Dat",
            "id": "comment-16119303"
        }
    ]
}