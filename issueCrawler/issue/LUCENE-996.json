{
    "id": "LUCENE-996",
    "title": "Parsing mixed inclusive/exclusive range queries",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "2.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The current query parser doesn't handle parsing a range query (i.e. ConstantScoreRangeQuery) with mixed inclusive/exclusive bounds.",
    "attachments": {
        "lucene-996.patch": "https://issues.apache.org/jira/secure/attachment/12365743/lucene-996.patch",
        "LUCENE-996.patch": "https://issues.apache.org/jira/secure/attachment/12393832/LUCENE-996.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-09-13T15:35:27+0000",
            "content": "Potential fix for revision 574260. ",
            "author": "Andrew Schurman",
            "id": "comment-12527145"
        },
        {
            "date": "2007-09-13T18:01:32+0000",
            "content": "\nso this changes the query syntax such that foo:\n{a TO z] and foo:[a TO z}\n are now legal ... the querysyntax docs should be modified to mention this in the patch as well.\n\none hitch: this seems to break backwards compatibility for anyone who has previously subclassed QueryParser and overridden the getRangeQuery(String, String, String, boolean) method ... if someone defines that method in their query parser, it will now never be called \u2013 even if they don't take advantage of the new syntax.\n\noff the top of my head, one way to remain backwards compatible is to have a deprecated getRangeQuery(String, String, String, boolean) method which does the same thing it currently does, and have the new getRangeQuery(String, String, String, boolean, boolean) method call it if the booleans have the same value ... if they don't have the same value then do the new stuff.  document that people subclassing QueryParser that want to override RangeQueries only need to override the double boolean method. ",
            "author": "Hoss Man",
            "id": "comment-12527204"
        },
        {
            "date": "2007-09-14T19:49:12+0000",
            "content": "Your absolutely right, I had a problem with the Solr src extending this method. I don't think there is a nice way to cover all the bases here, but I've updated the code help alleviate the problem.\n\nI believe the only thing that isn't covered is parsing foo:{a TO bat] with useOldRangeQueries=false. Classes that extend will still get a query back, but it might not be what they expect. ",
            "author": "Andrew Schurman",
            "id": "comment-12527614"
        },
        {
            "date": "2007-09-15T00:43:06+0000",
            "content": "there's nothing wrong with requiring people who want to take advantage of new syntax to use new code.  ",
            "author": "Hoss Man",
            "id": "comment-12527667"
        },
        {
            "date": "2008-11-13T00:39:40+0000",
            "content": "Needs the queryparser piece still. That patch looks a little noisy, but I'll take a crack at it. ",
            "author": "Mark Miller",
            "id": "comment-12647142"
        },
        {
            "date": "2008-11-13T02:22:11+0000",
            "content": "Bit of a pain catching everything that was slightly off, but I think we want this, especially since RangeQuery accepts separate start/end point inclusive/exclusive now.\n\nPatch brings everything up to trunk, but definitely still needs a strong look over. I'll come back to it in a few days. ",
            "author": "Mark Miller",
            "id": "comment-12647165"
        },
        {
            "date": "2008-11-16T16:42:01+0000",
            "content": "Missed that the new tests didn't patch, so I've merged and fixed them. Looks pretty good now except that a contrib test fails - those that overrode the deprecated  protected Query getRangeQuery(String field, String part1, String part2, boolean inclusive) are being left out in the cold.\n\nOnce that is addressed, I think this patch looks pretty good. ",
            "author": "Mark Miller",
            "id": "comment-12647994"
        },
        {
            "date": "2008-12-04T12:29:24+0000",
            "content": "Because this requires changing a callback or two in the queryparser, its probably easier to put it into 3 than 2.9. ",
            "author": "Mark Miller",
            "id": "comment-12653280"
        },
        {
            "date": "2009-08-25T08:06:20+0000",
            "content": "Issue LUCENE-1823 includes syntax for >=, <=, = :\n\n\tInstead of \"foo:[a TO z}\" the query would be \"foo >a AND foo <=z\"\n\tinstead of \"foo:{a TO z]\" the query would be  \"foo >= a AND foo <z\"\n\n\n\nIs that good enough?\n ",
            "author": "Luis Alves",
            "id": "comment-12747283"
        },
        {
            "date": "2010-10-22T15:30:24+0000",
            "content": "I didn't realize there was already a patch for this!\nAnyway, I just implemented my own changes to the grammar (attached). ",
            "author": "Yonik Seeley",
            "id": "comment-12923885"
        },
        {
            "date": "2010-10-22T20:01:27+0000",
            "content": "OK, here's the full patch.\nRather than try to maintain back compat for overriders that only works half of the time and silently fails the other half, I took a different approach that will make their compile fail (since lucene4 isn't a drop in replacement for any previous impl).\n ",
            "author": "Yonik Seeley",
            "id": "comment-12923998"
        },
        {
            "date": "2010-10-22T20:41:43+0000",
            "content": "Committed. ",
            "author": "Yonik Seeley",
            "id": "comment-12924016"
        }
    ]
}