{
    "id": "SOLR-6693",
    "title": "Start script for windows fails with 32bit JRE",
    "details": {
        "components": [
            "scripts and tools"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "4.10.4",
            "5.0",
            "6.0"
        ],
        "affect_versions": "4.10.2",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Reproduce:\n\n\tInstall JRE8 from www.java.com (typically C:\\Program Files (x86)\\Java\\jre1.8.0_25)\n\tRun the command bin\\solr start -V\n\n\n\nThe result is:\n\\Java\\jre1.8.0_25\\bin\\java was unexpected at this time.\n\nReason\nThis comes from bad quoting of the %SOLR% variable. I think it's because of the parenthesis that it freaks out. I think the same would apply for a 32-bit JDK because of the (x86) in the path, but I have not tested.\n\nTip: You can remove the line @ECHO OFF at the top to see exactly which is the offending line\n\nSolution\nQuoting the lines where %JAVA% is printed, e.g. instead of\n\n  @echo Using Java: %JAVA%\n\n\nthen use\n\n  @echo \"Using Java: %JAVA%\"\n\n\n\nThis is needed several places.",
    "attachments": {
        "solr.cmd": "https://issues.apache.org/jira/secure/attachment/12696478/solr.cmd",
        "solr.cmd.patch": "https://issues.apache.org/jira/secure/attachment/12696482/solr.cmd.patch",
        "SOLR-6693-lucene_solr_4_10.patch": "https://issues.apache.org/jira/secure/attachment/12701194/SOLR-6693-lucene_solr_4_10.patch",
        "SOLR-6693.patch": "https://issues.apache.org/jira/secure/attachment/12679820/SOLR-6693.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-11-03T21:13:16+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "After fixing the echo problems, the next hurdle occurs:\nJava 1.7 or later is required to run Solr.\n\nEven if I have Java8 (32bit). After some debugging, I found that the syntax -version:x.y does not work on 32-bit java for Windows, it prints the error even if you have the right version.\n\nSo the question then is, should the script enforce 64bit Java and print a more useful message if not found? Or is there a way to fix the version testing under 32-bit Java on Windows? It would perhaps be good to print a warning for 32-bit Java since you should use 64bit if possible ",
            "id": "comment-14195096"
        },
        {
            "date": "2014-11-04T08:51:28+0000",
            "author": "Daniel Collins",
            "content": "Jan, quoting issue aside, the -version syntax does seem to work in Windows even for 32-bit JVMs?\n\n\nC:\\Users\\dcollins53>\"C:\\Program Files (x86)\\Java\\jre1.8.0_20\\bin\\java\" -version:1.8 -version\njava version \"1.8.0_20\"\nJava(TM) SE Runtime Environment (build 1.8.0_20-b26)\nJava HotSpot(TM) Client VM (build 25.20-b23, mixed mode)\n\nC:\\Users\\dcollins53>\"C:\\Program Files\\Java\\jre1.8.0_20\\bin\\java\" -version:1.8 -version\njava version \"1.8.0_20\"\nJava(TM) SE Runtime Environment (build 1.8.0_20-b26)\nJava HotSpot(TM) 64-Bit Server VM (build 25.20-b23, mixed mode)\n\n\n\nI confess I don't have any Java 7 JVMs any more, but Java 8 32-bit does seem to be printing the right output.  Whether the solr.cmd script is handling it correctly, I haven't checked, but it should be possible to get that to work. ",
            "id": "comment-14195893"
        },
        {
            "date": "2014-11-04T11:53:30+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "On my windows 8.1 (running in VmWare on my Mac) I get\n\nC:\\>\"C:\\Program Files (x86)\\Java\\jdk1.8.0_25\\bin\\java\" -version:1.8 -version\nError: Unable to locate JRE meeting specification \"1.8\"\nC:\\>\"C:\\Program Files (x86)\\Java\\jdk1.8.0_25\\jre\\bin\\java.exe\" -version:1.8 -version\nError: Unable to locate JRE meeting specification \"1.8\"\nC:\\>echo %JAVA_HOME%\n\"C:\\Program Files (x86)\\Java\\jdk1.8.0_25\\jre\"\n\n ",
            "id": "comment-14196029"
        },
        {
            "date": "2014-11-04T13:24:07+0000",
            "author": "Daniel Collins",
            "content": "Strange, I'm on Windows 7, and with a slightly older Java8 VM, but I can't see why any of those things would affect the results.\nI confess my usual resolution to any oddities with Java VMs on Windows is to uninstall and re-install the JVM (often twice!) which usually seems to \"deal\" with it... Its not pretty or scientific but it seems to help.\n\n ",
            "id": "comment-14196087"
        },
        {
            "date": "2014-11-04T13:49:02+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "On the same Windows, this works with 64bit Java\n\nC:\\>\"C:\\Program Files\\Java\\jdk1.8.0\\bin\\java\" -version:1.8 -version\njava version \"1.8.0_20\"\nJava(TM) SE Runtime Environment (build 1.8.0_20-b26)\nJava HotSpot(TM) 64-Bit Server VM (build 25.20-b23, mixed mode)\n\n ",
            "id": "comment-14196107"
        },
        {
            "date": "2014-11-04T22:22:06+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "After uninstalling all Javas and reinstalling only JDK 32-bit, the version command works. Must be some Win registry mess? Btw. Do any of you know what the C:\\Windows\\System32\\java.exe file is? Is it placed there by Oracle installer? ",
            "id": "comment-14196964"
        },
        {
            "date": "2014-11-04T22:28:47+0000",
            "author": "Mark Miller",
            "content": "On a bit of reading, I believe it's part of the windows jdk/jre install and that it acts like /bin/java might - it will be found on the path and it looks in the registry to launch the configured java executable. ",
            "id": "comment-14196977"
        },
        {
            "date": "2014-11-04T22:30:05+0000",
            "author": "Mark Miller",
            "content": "http://mindprod.com/jgloss/javaexe.html#MULTIPLES ",
            "id": "comment-14196984"
        },
        {
            "date": "2014-11-05T09:13:08+0000",
            "author": "Daniel Collins",
            "content": "Yeah, I was half-joking and half-serious when I suggested JVM re-install.\nWindows JVM installs always seem somewhat prone to needing a re-install from time to time, The C:\\Windows\\System32\\java.exe always seems to favour the \"last\" JVM you installed as well, so if you have (for example) a Java 7 and Java 8 JVM installed, and then you update your Java 7 JVM, that becomes the new \"default\". You have to re-update Java 8 to update that magic version of java.exe.\n\nIt always makes me glad to get back to Linux every time I have to use Windows, at least there applications get installed into directories, if they are on your path (or I explicitly run them), they get used, if they aren't, they don't.  It makes so much more sense that way  ",
            "id": "comment-14197967"
        },
        {
            "date": "2014-11-06T10:07:06+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "First patch\n\n\tFixes echo print of variable containing unsafe chars like )\n\tDetects Java version, JRE/JDK and 32/64bit\n\tPrints warning if 32 bit or if no support for -server arg\n\n\n\nAll in all, this patch lets Windows users test Solr even if they only have a 32bit JRE installed, but the warnings will urge them to choose another JVM for production. ",
            "id": "comment-14200043"
        },
        {
            "date": "2014-11-11T10:24:05+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Experiencing a weird behavior on a Windows where I have several JVMs installed. When calling e.g. \"C:\\Program Files\\Java\\jdk1.6.0_45\\bin\\java.exe\" -version:1.8 -version it somehow finds my 1.8 install and uses that. Shell output:\n\n\nC:\\>\"C:\\Program Files\\Java\\jdk1.6.0_45\\bin\\java.exe\" -version\njava version \"1.6.0_45\"\nJava(TM) SE Runtime Environment (build 1.6.0_45-b06)\nJava HotSpot(TM) 64-Bit Server VM (build 20.45-b01, mixed mode)\n\nC:\\>\"C:\\Program Files\\Java\\jdk1.6.0_45\\bin\\java.exe\" -version:1.7 -version\njava version \"1.7.0_71\"\nJava(TM) SE Runtime Environment (build 1.7.0_71-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 24.71-b01, mixed mode)\n\nC:\\>\"C:\\Program Files\\Java\\jdk1.6.0_45\\bin\\java.exe\" -version:1.7+ -version\njava version \"1.8.0_25\"\nJava(TM) SE Runtime Environment (build 1.8.0_25-b18)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\n\nC:\\>\"C:\\Program Files\\Java\\jdk1.6.0_45\\bin\\java.exe\" -version:1.8 -version\njava version \"1.8.0_25\"\nJava(TM) SE Runtime Environment (build 1.8.0_25-b18)\nJava HotSpot(TM) 64-Bit Server VM (build 25.25-b02, mixed mode)\n\n\n\nSo the -version:x.y flag cannot be used to detect the version of that particular executable. Cannot reproduce this behavior on my Mac, probably because there is no central registry listing all installed Javas. So we have a few choices for Windows:\n\nA) Do not require JAVA_HOME to be set, but instead try simply calling java -version:1.7+ when starting Solr\nB) Use JAVA_HOME and parse Java version from the -version output\n\nThoughts? ",
            "id": "comment-14206246"
        },
        {
            "date": "2014-11-11T11:07:15+0000",
            "author": "jmlucjav",
            "content": "I never install the JRE in my dev hosts, what I do is: install the jdk, copy the jdk dir to another place A, set JAVA_HOME pointing to A, then uninstall the jdk, this way I have several 'clean' jdks I can use by changing JAVA_HOME and PATH, nothing in the registry (well, only browser plugin related stuff but this is another matter).\n\nWith this setup of mine, the  -version:x.y syntax does not work, seems it specifically looks for a JRE:\n\n\njava -version\njava version \"1.7.0_60\"\nJava(TM) SE Runtime Environment (build 1.7.0_60-b19)\nJava HotSpot(TM) 64-Bit Server VM (build 24.60-b09, mixed mode)\n\n\n\n\njava -version:1.7+\nError: Unable to locate JRE meeting specification \"1.7+\"\n\n\n\nso if possible I would avoid using \n\n-version:x.y \n ",
            "id": "comment-14206293"
        },
        {
            "date": "2014-11-11T11:16:14+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Proposed logic: If JAVA_HOME is set, check its version by string parsing and fail if wrong ver. If no JAVA_HOME then simply attempt java -version:1.7+ and if ok, start Solr with that option. ",
            "id": "comment-14206304"
        },
        {
            "date": "2014-11-11T11:22:33+0000",
            "author": "jmlucjav",
            "content": "sounds good to me ",
            "id": "comment-14206308"
        },
        {
            "date": "2014-12-01T22:07:23+0000",
            "author": "Timothy Potter",
            "content": "I've added Java version parsing to the script to determine if specific JVM flags should be enabled, but I think we can re-use this approach to solve this issue (with a little refactoring). I can do the work, but I don't have a 32-bit windows environment to test with.\n\n@REM Add Java version specific flags if needed\nset JAVAVER=\nset JAVA_MAJOR=\nset JAVA_BUILD=0\n\n\"%JAVA%\" -version 2>&1 | findstr /i \"version\" > javavers\nset /p JAVAVEROUT=<javavers\ndel javavers\nfor /f \"tokens=3\" %%g in (\"!JAVAVEROUT!\") do (\n  set JAVAVER=%%g\n  set JAVAVER=!JAVAVER:\"=!\n  for /f \"delims=_ tokens=1-3\" %%v in (\"!JAVAVER!\") do (\n    set JAVA_MAJOR=!JAVAVER:~0,3!\n    set /a JAVA_BUILD=%%w\n  )\n)\nIF \"!JAVA_MAJOR!\"==\"1.7\" (\n  set \"GC_TUNE=%GC_TUNE% -XX:CMSFullGCsBeforeCompaction=1 -XX:CMSTriggerPermRatio=80\"\n  IF !JAVA_BUILD! GEQ 40 (\n    IF !JAVA_BUILD! LEQ 51 (\n      set \"GC_TUNE=!GC_TUNE! -XX:-UseSuperWord\"\n      @echo WARNING: Java version !JAVAVER! has known bugs with Lucene and requires the -XX:-UseSuperWord flag. Please consider upgrading your JVM.\n    )\n  )\n)\n\n ",
            "id": "comment-14230544"
        },
        {
            "date": "2015-02-04T15:04:51+0000",
            "author": "Christopher Hewitt",
            "content": "Occurs in Windows 7, 32bit jre (or jdk), e.g. C:\\Program Files (x86)\\Java\\jdk1.7.0_60;\n\nIt actually comes from proper escaping/encapsulation of parentheses within variables, and the nested IF's ():\n\nIF \"%verbose%\"==\"1\" (\n  @echo Using Solr root directory: %SOLR_TIP%\n  @echo Using Java: %JAVA%\n\n  \"%JAVA%\" -version\n)\n\n\n\nA parenthesis in either %SOLR_TIP% or %JAVA% would break this code. However:\n\nIF \"%verbose%\"==\"1\" (\n  @echo Using Solr root directory: \"%SOLR_TIP%\"\n  @echo Using Java: \"%JAVA%\"\n\n  \"%JAVA%\" -version\n)\n\n\nDoes work..\n\nAlso in this:\n\n\"%JAVA_HOME%\"\\bin\\java -version does not work in the version check, (returns help --?) however:\n\"%JAVA_HOME%\\bin\\java\" -version does. ",
            "id": "comment-14305203"
        },
        {
            "date": "2015-02-04T15:20:10+0000",
            "author": "Christopher Hewitt",
            "content": "Attached new solr.cmd:\n\nThis fixes the problems as per my previous comment:\n\n\tJRE in parenthesis directory\n\t\"%JAVA_HOME%\"\\bin\\java version info\n\tSolr in parenthesis directory\n\n\n\nNo requirement for JRE/JDK in 64bit environment: Program Files (x86) is supported ",
            "id": "comment-14305242"
        },
        {
            "date": "2015-02-04T18:21:04+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Thanks for the patch. Which version of Solr is it for? ",
            "id": "comment-14305659"
        },
        {
            "date": "2015-02-04T18:24:19+0000",
            "author": "Christopher Hewitt",
            "content": "Ah, sorry... Forgot to mention.. This is for the current release of Solr... 4.10.3 ",
            "id": "comment-14305669"
        },
        {
            "date": "2015-02-04T18:33:43+0000",
            "author": "Timothy Potter",
            "content": "We should get this into 5.0 ... I can migrate the patch for the solr.cmd in 5.0 unless you're going to pick it up Jan H\u00f8ydahl? ",
            "id": "comment-14305681"
        },
        {
            "date": "2015-02-04T19:44:28+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Timothy Potter, feel free! ",
            "id": "comment-14305826"
        },
        {
            "date": "2015-02-05T20:43:43+0000",
            "author": "Timothy Potter",
            "content": "Here's a patch for trunk that incorporates Jan H\u00f8ydahl's patch from Nov-06 (sorry I overlooked that previously and there was some very good stuff in it) and Christopher Hewitt's patch from earlier this week. It also fixes SOLR-7047.\n\nWe would like to get this into the 5.0 release, but I'm not comfortable doing that without someone else trying this patch out in their environment. I tested with a JRE installed in c:\\Program Files (x86)\\Java\\jre7 and solr installed in: c:\\solr (5.0).\n\nPlease review / try this out ASAP and let me know if there are any other issues. ",
            "id": "comment-14307952"
        },
        {
            "date": "2015-02-05T21:14:05+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Thanks for bringing this forward, Timothy Potter\n\nHave not tested the patch, but please do not use the resolve_java_version function from my earlier patch. As noted in this comment it will not test whether your specific Java is a certain version, but use the registry to see if it finds ANY Java in the system satisfying the requirements.\n\nSo I propose you continue using the java -version string parsing you started on, perhaps extending it a bit. ",
            "id": "comment-14308010"
        },
        {
            "date": "2015-02-05T22:04:33+0000",
            "author": "Timothy Potter",
            "content": "Thanks for the heads-up on the issues with resolve_java_version Jan H\u00f8ydahl ... From what I can tell, the best approach is to use my java -version string parsing as you suggested, but still use some of your -d64 and -server checking. Cooking up a new patch now ... ",
            "id": "comment-14308082"
        },
        {
            "date": "2015-02-06T15:18:11+0000",
            "author": "Timothy Potter",
            "content": "Updated patch that does the following:\n\n\n\tUses basic parsing of the output from java -version to determine the version; this addresses the issue Jan found about Windows using whatever from the registry\n\n\n\n\n\tVerifies java.exe exists in %JAVA_HOME%\\bin\n\n\n\n\n\tWarns user if -server or -d64 are not supported (great addition from Jan)\n\n\n\n\n\tWorks with spaces and parens in Java and Solr paths\n\n\n\nWhen I backport this to branch5x, I'll have to update the script to verify Java 7 instead of 8 ... Please give this a good review / test as we need to cut 5.0 ASAP. ",
            "id": "comment-14309287"
        },
        {
            "date": "2015-02-09T15:07:22+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1658423 from Timothy Potter in branch 'dev/trunk'\n[ https://svn.apache.org/r1658423 ]\n\nSOLR-6693: bin\\solr.cmd doesn't support 32-bit JRE/JDK running on Windows due to parenthesis in JAVA_HOME ",
            "id": "comment-14312326"
        },
        {
            "date": "2015-02-09T15:12:29+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1658426 from Timothy Potter in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1658426 ]\n\nSOLR-6693: bin\\solr.cmd doesn't support 32-bit JRE/JDK running on Windows due to parenthesis in JAVA_HOME ",
            "id": "comment-14312338"
        },
        {
            "date": "2015-02-09T15:15:02+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1658428 from Timothy Potter in branch 'dev/branches/lucene_solr_5_0'\n[ https://svn.apache.org/r1658428 ]\n\nSOLR-6693: bin\\solr.cmd doesn't support 32-bit JRE/JDK running on Windows due to parenthesis in JAVA_HOME ",
            "id": "comment-14312339"
        },
        {
            "date": "2015-02-23T05:00:45+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "id": "comment-14332575"
        },
        {
            "date": "2015-02-26T22:56:07+0000",
            "author": "Steve Rowe",
            "content": "Reopening to backport to 4.10.4 ",
            "id": "comment-14339355"
        },
        {
            "date": "2015-02-26T23:04:04+0000",
            "author": "Steve Rowe",
            "content": "Backported patch.\n\nI tested on Win 7 with 32-bit Oracle JDK 1.7.0_72.  Without this patch, bin\\solr start fails for me on the lucene_solr_4_10 branch in the same way as in the issue description.\n\nWith this patch, under both 32-bit 1.7.0_72 and 64-bit 1.7.0_25, the following worked for me:\n\n\n\tbin\\solr start / bin\\solr stop -all\n\tbin\\solr start / bin\\solr stop -p 8983\n\tbin\\solr start / bin\\solr start    (appropriate error printed)\n\tbin\\solr start / bin\\solr -i\n\n\n\nCommitting shortly. ",
            "id": "comment-14339371"
        },
        {
            "date": "2015-02-26T23:06:44+0000",
            "author": "Steve Rowe",
            "content": "Committed to lucene_solr_4_10. ",
            "id": "comment-14339376"
        },
        {
            "date": "2015-02-26T23:08:36+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1662596 from Steve Rowe in branch 'dev/branches/lucene_solr_4_10'\n[ https://svn.apache.org/r1662596 ]\n\nSOLR-6693: bin\\solr.cmd doesn't support 32-bit JRE/JDK running on Windows due to parenthesis in JAVA_HOME (merged branch_5x r1658426) ",
            "id": "comment-14339379"
        },
        {
            "date": "2015-03-05T15:36:27+0000",
            "author": "Michael McCandless",
            "content": "Bulk close for 4.10.4 release ",
            "id": "comment-14348909"
        }
    ]
}