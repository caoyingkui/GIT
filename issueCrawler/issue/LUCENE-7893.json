{
    "id": "SOLR-11022",
    "title": "SynonymGraphFilterFactory proximity search error",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "6.6",
        "status": "Open",
        "type": "Bug",
        "components": [
            "query parsers"
        ],
        "fix_versions": []
    },
    "description": "There seems to be an issue when doing proximity searches that include terms that have multi-word synonyms.\n\nExample:\nconsider there's is configured in synonyms.txt\n(\ngrand mother, grandmother\ngrandfather, granddad\n)\nand there's an indexed field with: (My mother and my grandmother went...)\n\nProximity search with: (\"mother grandmother\"~8)\nwon't return the file, while (\"father grandfather\"~8) does return the analogous file.\n\nI am not a developer of Solr, so pardon if I am wrong, but I ran it with debug=query and saw that when proximity searches are done with multi-term synonyms, the called function is spanNearQuery: \n\"parsedquery\":\"SpanNearQuery(spanNear([laudo:mother,\nspanOr([laudo:grand mother, laudo:grandmother])],0, true))\"\n\nwhile proximity searches with one-term synonyms are executed with:\n\"MultiPhraseQuery(laudo:\\\"father (grandfather granddad)\\\"~10)\"\n\nNote that the SpanNearQuery is called with a slope parameter of 0, no matter what is passed after the tilde. So if I search the exact phrase it does match.\n\n\nHere is my field-type, just in case:\n<fieldType name=\"text_pt_synonyms_ascii_minimal_lightStem\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n\n    <analyzer type=\"index\">\n\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" format=\"snowball\" words=\"lang/stopwords_pt.txt\" ignoreCase=\"true\"/>\n        <filter class=\"solr.PortugueseLightStemFilterFactory\"/>\n</analyzer>\n\n    <analyzer type=\"query\">\n\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/><filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" format=\"snowball\" words=\"lang/stopwords_pt.txt\" ignoreCase=\"true\"/><filter class=\"solr.ASCIIFoldingFilterFactory\" preserveOriginal=\"true\"/>\n        <filter class=\"solr.SynonymGraphFilterFactory\" expand=\"true\" ignoreCase=\"true\" synonyms=\"synonyms_radex.txt\"/>\n        <filter class=\"solr.PortugueseLightStemFilterFactory\"/>\n</analyzer>\n\n</fieldType>",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16076177",
            "date": "2017-07-06T08:48:30+0000",
            "content": "I am not able to replicate with 6.6 nor master.\nIn my testing with the QueryBuilder, the slop is correctly applied and the final query is the following (with slop=8):\n\n\nspanNear([spanOr([spanNear([text:grand, text:mother], 0, true), text:mother]), text:grandmother], 8, true)\n\n\n\nNote that the inner span near query for the multi-words synonym \"grand mother\" do have a slop of 0 to return only *true* multi-words synonym matches of \"grand mother\" even if the parent slop is 8.\n ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16077049",
            "date": "2017-07-06T18:44:07+0000",
            "content": "Hello, thank you for the feedback!\nHave you tried searching directly through the Solr RESTfull HTTP API, instead of the QueryBuilder? That is where I am getting trouble\n\nMy query:\nhttp://localhost:8983/solr/CORE/select?indent=true&df=laudo&q=\"mother grandmother\"~10&wt=json&start=0&debug=query&sow=false\n\nThe entire debug (like yours, but with 0 slop):\n\n\"debug\":{\n    \"rawquerystring\":\"\\\"grandmother mother\\\"~10\",\n    \"querystring\":\"\\\"grandmother mother\\\"~10\",\n    \"parsedquery\":\"SpanNearQuery(spanNear([spanOr([spanNear([laudo:grand, laudo:mother], 0, true), laudo:grandmother]), laudo:mother], 0, true))\",\n    \"parsedquery_toString\":\"spanNear([spanOr([spanNear([laudo:grand, laudo:mother], 0, true), laudo:grandmother]), laudo:mother], 0, true)\",\n    \"QParser\":\"LuceneQParser\"}}\n\nthank you ",
            "author": "Diogo Guilherme Le\u00e3o Edelmuth"
        },
        {
            "id": "comment-16077050",
            "date": "2017-07-06T18:45:48+0000",
            "content": "\n\tI do escape the quotes in the http request. Just not here for clarity\n\n ",
            "author": "Diogo Guilherme Le\u00e3o Edelmuth"
        },
        {
            "id": "comment-16077354",
            "date": "2017-07-06T23:37:22+0000",
            "content": "Ok I checked the Solr code and the problem is that the slop is only applied to phrase and multi_phrase query. \nThis specific issue is in SolrQueryParser#getFieldQuery which applies the phrase slop to phrase and multi_phrase query but not on SpanNearQuery.\nSpanNearQuery are used when the analysis creates a graph token stream from the quoted terms.\nDiogo Guilherme Le\u00e3o Edelmuth are you interested in providing a patch for Solr ? ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16077360",
            "date": "2017-07-06T23:44:35+0000",
            "content": "I am sorry, but I am a beginner using the API (can't program in Java) :/\nMaybe in the future I will be able to contribute ",
            "author": "Diogo Guilherme Le\u00e3o Edelmuth"
        },
        {
            "id": "comment-16402325",
            "date": "2018-03-16T18:35:09+0000",
            "content": "\u00a0\n\nHi, Jim Ferenczi,\n\n\u00a0\n\nIs the following file the reason for this error?\u00a0\n\n[lucene-solr/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java|https://github.com/apache/lucene-solr/blob/83753d0a2ae5bdd00649f43e355b5a43c6709917/solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java]\n\n\u00a0\n\nIt just seems to be leaving the SpanNearQuery out.\n\nIf so, could we not just add the following, so that it also applies the slop to SpanNearQuery?:\n\n\u00a0\n\nelse if (query instanceof SpanNearQuery) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 SpanNearQuery snq = (SpanNearQuery)query;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (slop != snq.getSlop()) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 query = new SpanNearQuery.Builder(snq).setSlop(slop).build();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\n\nSpanNearQuery seems to have the same method for applying the slop.\n\n\u00a0\n\nHere is how the code is today:\n\n/**\n\u00a0\u00a0 * Base implementation delegates to {@link #getFieldQuery(String,String,boolean,boolean)}.\n\u00a0\u00a0 * This method may be overridden, for example, to return\n\u00a0\u00a0 * a SpanNearQuery instead of a PhraseQuery.\n\u00a0\u00a0 *\n\u00a0\u00a0 */\n\u00a0 protected Query getFieldQuery(String field, String queryText, int slop)\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 throws SyntaxError {\n\u00a0\u00a0\u00a0 Query query = getFieldQuery(field, queryText, true, false);\n\u00a0\n\u00a0\u00a0\u00a0 // only set slop of the phrase query was a result of this parser\n\u00a0\u00a0\u00a0 // and not a sub-parser.\n\u00a0\u00a0\u00a0 if (subQParser == null) {\n\u00a0\u00a0\u00a0\u00a0\u00a0 if (query instanceof PhraseQuery) {         <<==============================\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 PhraseQuery pq = (PhraseQuery) query;\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 Term[] terms = pq.getTerms();\n\u00a0 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0int[] positions = pq.getPositions();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 PhraseQuery.Builder builder = new PhraseQuery.Builder();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 for (int i = 0; i < terms.length; ++i) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 builder.add(terms[i], positions[i]);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 builder.setSlop(slop);\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 query = builder.build();\n\u00a0\u00a0\u00a0\u00a0\u00a0 } else if (query instanceof MultiPhraseQuery) {    <<========================\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n\u00a0\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 if (slop != mpq.getSlop()) {\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 }\n\u00a0\u00a0\u00a0 return query;\n\u00a0 }\n\n\n\u00a0\n\nThanks for the attention again! ",
            "author": "Diogo Guilherme Le\u00e3o Edelmuth"
        }
    ]
}