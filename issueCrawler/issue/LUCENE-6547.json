{
    "id": "LUCENE-6547",
    "title": "Add dateline crossing support to GeoPointInBBox and GeoPointDistance Queries",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "The current GeoPointInBBoxQuery only supports bounding boxes that are within the standard -180:180 longitudinal bounds. While its perfectly fine to require users to split dateline crossing bounding boxes in two, GeoPointDistanceQuery should support distance queries that cross the dateline.  Since morton encoding doesn't support unwinding this issue will add dateline crossing to GeoPointInBBoxQuery and GeoPointDistanceQuery classes.",
    "attachments": {
        "LUCENE-6547.patch": "https://issues.apache.org/jira/secure/attachment/12738926/LUCENE-6547.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14581129",
            "author": "Nicholas Knize",
            "date": "2015-06-10T21:44:17+0000",
            "content": "Initial patch (diff from trunk) that adds dateline crossing support to GeoPointInBBoxQuery. Randomized testing not yet updated to beast test this feature and still need to add dateline crossing support to GeoPointDistanceQuery. "
        },
        {
            "id": "comment-14582424",
            "author": "Nicholas Knize",
            "date": "2015-06-11T19:46:44+0000",
            "content": "This turned out to not be as difficult as originally thought. This update is ready for review and should probably preempt LUCENE-6532. Patch includes:\n\n\n\tDateline crossing support for GeoPointInBBoxQuery and GeoPointDistanceQuery (GeoPointDistanceQuery uses ECEF Cartesian System for secant checks)\n\tUpdated unit test to include randomized testing of GeoPointDistanceQuery\n\tSplit GeoUtils into separate GeoDistanceUtils, GeoProjectionUtils, and GeoUtils class files\n\tSuccessfully Beast tested several times using 100 iterations\n\tUpdated javadocs to include known limitations and performance implications for dateline crossing queries.\n\n\n\nAll future performance improvements can be done in separate enhancement issues. "
        },
        {
            "id": "comment-14583436",
            "author": "Nicholas Knize",
            "date": "2015-06-12T14:12:12+0000",
            "content": "Removed unnecessary haversine computations from rectCrossesCircle.  This is based on comments/discussion in LUCENE-6532. "
        },
        {
            "id": "comment-14583531",
            "author": "Michael McCandless",
            "date": "2015-06-12T14:56:05+0000",
            "content": "Thanks Nicholas Knize!\n\nLooks like we no longer get exc if we pass invalid lat or lon to\nGeoPointInBBoxQuery?  Can we get that back (e.g. if I pass\nlat=1000.0).\n\nCan we revert the changes to GeoPointInPolygonQuery now (since\nGeoPointDistanceQuery now extends GeoPointInBBoxQuery instead)?\n\nSeems like GeoPointTermsEnum.min/maxLat could still be final?\n\nHmm in GeoPointTermsEnum, for the dateline split case, I'm worried how\nwe overwrite minLon/maxLon, because in the accept method we then check\nminLon/maxLon but at that point it will be from the 2nd bbox?  Isn't\nthis possibly wrong / buggy (why is test not failing)?\n\nAnother way to handle this \"crosses dateline\" would be to use the\nrewrite method?  Ie, rewrite to BQ, SHOULD'ing the 2 queries?  It\ncould be simpler that way?  Then the query itself, terms enum, etc.,\ndon't have to deal with this case.\n\nDo we still need circleToPoly?  It's unused now right?  Hmm the\njavadocs for GeoPointDistanceQuery are stale?\n\nCan we fix the random test to more strongly separate out the cases its\ntesting?  E.g. make a separate \"tolerateRadiusIgnorance\" and\n\"tolerateBBoxIgnorance\" methods, make separate code for verifying the\nradius vs bbox/poly cases, etc.?  We can e.g. factor out a\n\"getMatchingDocs\" method that returns the FixedBitSet. "
        },
        {
            "id": "comment-14583543",
            "author": "Michael McCandless",
            "date": "2015-06-12T15:10:51+0000",
            "content": "Hmm does this also fix polygon queries that cross the dateline? "
        },
        {
            "id": "comment-14583576",
            "author": "Michael McCandless",
            "date": "2015-06-12T15:32:09+0000",
            "content": "I opened LUCENE-6560 for BKD \"point in bbox\" query, showing how we could use the rewrite method so the \"low level\" query doesn't have to see 2 rects. "
        },
        {
            "id": "comment-14586191",
            "author": "Nicholas Knize",
            "date": "2015-06-15T15:27:40+0000",
            "content": "Updated patch to include review feedback from Michael McCandless:\n\n\n\n\tAdded back validation check for lat/lons passed to GeoPointInBBoxQuery.\n\tReverted changes made to GeoPointInPolygonQuery.\n\tChanged GeoPointTermsEnum.min/maxLat back to final\n\tChanged dateline split logic for GeoPointInBBox and GeoPointDistance query to rewrite using BQ SHOULD.\n\tKeeping circleToPoly utility method, for now, for testing PointInPolygon query performance (this can maybe go away later?)\n\tUpdated GeoPointDistanceQuery javadocs\n\n\n\nCan we fix the random test to more strongly separate out the cases its testing?\n\nWill get this in either the next iteration, or maybe a separate 'improve GeoPointField Testing' issue?  "
        },
        {
            "id": "comment-14587008",
            "author": "Nicholas Knize",
            "date": "2015-06-15T22:07:22+0000",
            "content": "Updated patch to fix a bounding box range bug. "
        },
        {
            "id": "comment-14587850",
            "author": "Michael McCandless",
            "date": "2015-06-16T10:54:27+0000",
            "content": "Thanks Nicholas Knize!\n\nAdded back validation check for lat/lons passed to GeoPointInBBoxQuery.\n\nThanks, but is this really right? \n\nI can see it being considered \"OK\" to pass \"invalid\" lat (goes over a\npole) or lon (when it crosses the date line) with the expectation that\nthe API normlalizes it?  Maybe?\n\nE.g. it makes it easier for client code to e.g. do bbox search for +/-\n0.5 lat/lon from a given center w/o having to special case the\ndateline itself... or a distance query too.\n\nIn any event, whatever we decide is the \"right\" behavior, can you add\n\"testInvalidXXX\" test cases that show we are in fact throwing excs for\nthe invalid cases?\n\nWill get this in either the next iteration, or maybe a separate 'improve GeoPointField Testing' issue?\n\nOK we can do it separately, but I think it's pretty important to keep\ntestRandom approachable: testRandoms have a tendency to become\ndisastrous over time (have a look at TestGrouping.testRandom if you\ndon't believe me!).\n\nIt seems like there's some dup code, e.g. computeBBox is in both\nGeoPointDistanceQuery and GeoPointDistanceQueryImpl?\n\nCan you extend testRandom to test date-line wrapping?  I did this in\nTestBKDTree so I think for now we can just copy those changes over and\nrefactor later?\n\nI'll look more at the patch ... "
        },
        {
            "id": "comment-14588206",
            "author": "Nicholas Knize",
            "date": "2015-06-16T15:25:07+0000",
            "content": "Awesome feedback Mike!\n\nI can see it being considered \"OK\" to pass \"invalid\" lat (goes over a pole) or lon (when it crosses the date line) with the expectation that the API normlalizes it?\n\nThat's only for PointDistance searching. If the radius crosses (after adding delta lat/lon) the coordinates are normalized and the Spherical intersection is used.  There's a TODO in there to investigate whether its worth adding the math to \"split\" the circle into semi-circles at dateline and use BQ.  I don't think it is. \n\n...can you add \"testInvalidXXX\" test cases that show we are in fact throwing excs for the invalid cases?\n\n++ good idea\n\nIt seems like there's some dup code, e.g. computeBBox is in both GeoPointDistanceQuery and GeoPointDistanceQueryImpl?\n\nThere is. I noticed this as a side effect from the refactor. I've removed it and will have that in the next patch (which includes switching PointDistance radius over to meters instead of Km).\n\nI think it's pretty important to keep testRandom approachable: testRandoms have a tendency to become disastrous over time.\n\n+++ agree. I can work it in this issue. No need to split into separate issues since this is all sandboxed anyway?\n\nCan you extend testRandom to test date-line wrapping? \n\nYes. This is important. I've got it pretty thoroughly tested in ES, but some beasting is definitely needed. "
        },
        {
            "id": "comment-14591497",
            "author": "Michael McCandless",
            "date": "2015-06-18T08:47:36+0000",
            "content": "That's only for PointDistance searching.\n\nAhh, OK; I wasn't sure when we should tolerate out-of-bounds lat/lon (and do the \"wrapping\" ourselves) and when we shouldn't.\n\nNo need to split into separate issues since this is all sandboxed anyway?\n\nOK, thanks.  I can help here too (make testRandom more approachable)...\n\nI took another look at the patch and I think besides these small test issues we should commit it for 5.3; it's already plenty large enough: it adds a new query (GeoPointDistance), it fixes queries to handle dateline wrapping, it refactors the GeoUtils APIs into three sources.\n\nThe last patch doesn't compile now because of the BQ Builder API changes... "
        },
        {
            "id": "comment-14602907",
            "author": "Nicholas Knize",
            "date": "2015-06-26T13:53:33+0000",
            "content": "Updated patch to include the following:\n\n\n\tFixed rewrite methods to use new BQ Builder API changes\n\tRemoved computeBBox duplicate code\n\tUpdated randomized test to include larger ranges (this should include the occasional dateline wrapping but I'll add some randomization for explicit dateline wrap testing)\n\tSplit tolerateIgnorance into two explicit methods for PointDistance and BBox\n\tAdded geohash string utility methods to GeoUtils to support use-cases using geohash string representations (converts to/from geohash)\n\tAdded getter utility methods to all three query classes to support third-party refactoring to new GeoPointField type (e.g., elasticsearch)\n\n "
        },
        {
            "id": "comment-14604363",
            "author": "Michael McCandless",
            "date": "2015-06-27T20:52:47+0000",
            "content": "Added geohash string utility methods to GeoUtils to support use-cases using geohash string representations (converts to/from geohash)\n\nCool!  But can we add tests for these new methods?\n\nUpdated randomized test to include larger ranges (this should include the occasional dateline wrapping but I'll add some randomization for explicit dateline wrap testing)\n\nWait: these queries can't handle large ranges right?  I.e. the query\n(and this test) can now take way too long to run?  This is why we\nhad to restrict the tested range before...\n\nSeparately, I don't think this means testRandom will sometimes test\nthe dateline ... it still has checks to swap lon0/lon1 when lon0 >\nlon1.\n\nI think we can keep the \"tiny testing area\", but just randomly locate\nit near the dateline some of the time, and then do the min/max swap\n\"in reverse\"?\n\nFor now I put back the small testing area ... testing was sometimes\ntaking forever ...\n\nI'll try to tweak the patch to make the randomized test more\nunderstandable. "
        },
        {
            "id": "comment-14604394",
            "author": "Michael McCandless",
            "date": "2015-06-27T22:05:25+0000",
            "content": "Here's a new patch, starting from Nicholas Knize's last patch, and trying to\nmake the verify method more approachable (I really don't want this to\nturn into another TestGrouping.testRandom!)\n\nIn doing this I think I found a couple test bugs:\n\n\n\tThe polygon query test was supposed to only pass the \"too big\"\n    bbox as the bbox args, and the \"original\" bbox as the polygon\n\n\n\n\n\ttolerateRadiusErrors should not need lat1/lon1?  It should only\n    need a single point, not two points?  How can these\n    randomly generated values matter? (The query doesn't get them).\n    I left a nocommit in this patch about that ...\n\n\n\nCan we remove the separate bbox from GeoPointInPolygonQuery's ctor?\nThis seems very trappy (what if you pass the wrong bbox?), and any\nperf gains should be negligible in the limit (of bigger and bigger\nindices)? "
        },
        {
            "id": "comment-14609167",
            "author": "Nicholas Knize",
            "date": "2015-06-30T22:12:17+0000",
            "content": "Updated patch continuing from Michael McCandless last patch. Updates:\n\n\n\tAddresses LUCENE-6562 to share ranges across segments. To guard against OOM exceptions the ranges needed to be purged once all segments have been visited. See GeoPointTermQuery line 87 for this check.\n\tRemoved GeoHash string methods from GeoUtils. I'm going to move this into a separate issue for better tracking and reviewing.\n\tUpdated javadocs\n\n\n\nWait: these queries can't handle large ranges right? \n\nLarge ranges were previously discouraged because it takes on the order of ~2secs to correctly compute the ranges for large search areas. Since this occurred for every segment large search over large data was quite time consuming. Reusing ranges across segments has brought this down to the amount of time it takes to compute the ranges.\n\nCan we remove the separate bbox from GeoPointInPolygonQuery's ctor?\n\nYes! I believe so. The intent was to improve performance for detailed polygons (those with many vertices) by providing precomputed or cached bounding boxes rather than having the query recompute. Might be worth benchmarking to be certain whether we want to take away this utility. Sure it can be used maliciously, maybe good documentation can raise awareness? "
        },
        {
            "id": "comment-14610054",
            "author": "Michael McCandless",
            "date": "2015-07-01T12:48:05+0000",
            "content": "Thanks Nick!\n\nAddresses LUCENE-6562 to share ranges across segments. To guard against OOM exceptions the ranges needed to be purged once all segments have been visited. See GeoPointTermQuery line 87 for this check.\n\nOK, it looks like this patch also absorbed the latest patch on\nLUCENE-6562?  It's clever how you clear ranges after the last segment!\n\nUnfortunately I think it's unsafe ... e.g. if IndexSearcher is using\nan executor, multiple threads can call getTermsEnum I think ... and\nalso, in the cached case, on opening a new NRT reader, I think the\nquery would only see e.g. the 1 or 2 new segments.\n\nNet/net I'm worried about the complexity of getting this working\ncorrectly; I think for now it's best/simpler to just re-compute the ranges\nper segment?\n\nWe should anyway try to keep the issue separate from this one...\n\n\nCan we remove the separate bbox from GeoPointInPolygonQuery's ctor?\n\nYes! I believe so. The intent was to improve performance for detailed polygons (those with many vertices) by providing precomputed or cached bounding boxes rather than having the query recompute. Might be worth benchmarking to be certain whether we want to take away this utility. Sure it can be used maliciously, maybe good documentation can raise awareness?\n\nBut that cost will be miniscule compared to the overall query execution time right?\n\nE.g. to filter just a single \"borderline\" hit, we also must walk the full polygon?  Multiplied by the number of borderline hits ...\n\nIt just strikes me as such a trivial optimization that it's not worth polluting the API over ... APIs are hard enough as it is   And e.g. I've already screwed it up at least once when I passed an invalid bbox before (when working on the test).\n\n\nLarge ranges were previously discouraged because it takes on the order of ~2secs to correctly compute the ranges for large search areas. Since this occurred for every segment large search over large data was quite time consuming. Reusing ranges across segments has brought this down to the amount of time it takes to compute the ranges.\n\nOK that's a good improvement but I think large ranges are still very dangerous for this query?  E.g. the query will suddenly take ... 10s of MBs heap to hold its ranges as well?  Maybe (separately!) we could improve how we store the ranges in RAM, e.g. use two PrefixCodedTerms or something.\n\nI think, like AutomatonQuery, we need to place a default limit on the number of ranges?  User can increase it if they know what they are doing...\n\nI put this nocommit in my last patch:\n\n// nocommit why on earth are we needing to pass lat1/lon1 here   the query doesn't get these...\n\nAny idea how to fix?  maxLat/maxLon cannot possibly matter here: they are randomly generated and not used by the query, yet they are used by radiusQueryCanBeWrong.  This must be a test bug? "
        },
        {
            "id": "comment-14613676",
            "author": "Uwe Schindler",
            "date": "2015-07-04T10:36:41+0000",
            "content": "Unfortunately I think it's unsafe ... e.g. if IndexSearcher is using an executor, multiple threads can call getTermsEnum I think ... and also, in the cached case, on opening a new NRT reader, I think the query would only see e.g. the 1 or 2 new segments.\n\nYes it is! You would need a ThreadLocal. The better approach may be to use a new RewriteMethod temporarily per Query#rewrite(). "
        },
        {
            "id": "comment-14630743",
            "author": "Nicholas Knize",
            "date": "2015-07-17T04:23:43+0000",
            "content": "Adding updated patch with following changes:\n\n\n\treverting unsafe reuse of ranges across segments (save for LUCENE-6562)\n\tremoved lineCrossesCircle in favor of more accurate (and dateline agnostic) lineCrossesSphere method\n\taddressed buggy radiusQueryCanBeWrong\n\n "
        },
        {
            "id": "comment-14632093",
            "author": "Michael McCandless",
            "date": "2015-07-17T23:23:03+0000",
            "content": "Thanks Nicholas Knize!  Patch looks good .. it didn't apply to current trunk (I think you need to svn up?), but I resolved it, and fixed a few code style issues ({ } around single-statement ifs), removed some unused AttributeSource atts args.  I'll commit soon! "
        },
        {
            "id": "comment-14632183",
            "author": "ASF subversion and git services",
            "date": "2015-07-18T01:00:23+0000",
            "content": "Commit 1691659 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1691659 ]\n\nLUCENE-6547: add GeoPointDistanceQuery and fix GeoPointInBBoxQuery to handle dateline crossing "
        },
        {
            "id": "comment-14632187",
            "author": "ASF subversion and git services",
            "date": "2015-07-18T01:05:27+0000",
            "content": "Commit 1691660 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1691660 ]\n\nLUCENE-6547: add GeoPointDistanceQuery and fix GeoPointInBBoxQuery to handle dateline crossing "
        },
        {
            "id": "comment-14632188",
            "author": "Michael McCandless",
            "date": "2015-07-18T01:06:44+0000",
            "content": "Thanks Nicholas Knize!\n\nThe test was very slow with the * 1000 random radius ... I'm not sure why?  I decreased that to * 100 and dropped the iters to make it reasonable again. "
        },
        {
            "id": "comment-14632329",
            "author": "ASF subversion and git services",
            "date": "2015-07-18T08:21:31+0000",
            "content": "Commit 1691701 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1691701 ]\n\nLUCENE-6547: side-step OOME "
        },
        {
            "id": "comment-14632331",
            "author": "ASF subversion and git services",
            "date": "2015-07-18T08:22:11+0000",
            "content": "Commit 1691702 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1691702 ]\n\nLUCENE-6547: side-step OOME "
        },
        {
            "id": "comment-14635860",
            "author": "Nicholas Knize",
            "date": "2015-07-21T21:41:40+0000",
            "content": "The test was very slow with the * 1000 random radius ... I'm not sure why? \n\nThere were unnecessary ranges being computed for the GeoPointDistance query. This has been fixed in the latest patch for LUCENE-6685. "
        },
        {
            "id": "comment-14713136",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:52+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}