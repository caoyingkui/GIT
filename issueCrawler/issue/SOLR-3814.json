{
    "id": "SOLR-3814",
    "title": "Partial document update silently breaks multi-valued constraint",
    "details": {
        "affect_versions": "4.0-BETA",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "1) Download the tutorial, start solr, and post to it the file solr.xml as explained in the tutorial.\n2) query : and verify that you have one document in solr with id SOLR1000\n3) copy the xml file and create a partial update command for that document. I used something like this:\n\n<add>\n<doc>\n  <field name=\"id\">SOLR1000</field>\n  <field name=\"manu\" update=\"set\">new value</field>\n</doc>\n</add>\n\n4) Post this document to solr. It will succeed.\n5) Query : again, and you will notice something strange. There is still one document, but in the results the field price_c appears twice, even though it is not a multi-valued field.\n\n<result name=\"response\" numFound=\"1\" start=\"0\">\n  <doc>\n    <str name=\"id\">SOLR1000</str>\n    ...\n    <float name=\"price\">0.0</float>\n    <arr name=\"price_c\">\n      <str>0.0,USD</str>\n      <str>0,USD</str>\n    </arr>\n  </doc>\n</result>\n\n6) change the value in the xml that you just sent (e.g. \"new value2\") and post it again to solr. Now solr throws an exception:\n\n\nSEVERE: org.apache.solr.common.SolrException: ERROR: [doc=SOLR1000] multiple values encountered for non multiValued field price_c\n: [0.0,USD, 0,USD]\n        at org.apache.solr.update.DocumentBuilder.toDocument(DocumentBuilder.java:242)\n        at org.apache.solr.update.AddUpdateCommand.getLuceneDocument(AddUpdateCommand.java:76)\n        at org.apache.solr.update.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:208)\n        at org.apache.solr.update.processor.RunUpdateProcessor.processAdd(RunUpdateProcessorFactory.java:61)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(UpdateRequestProcessor.java:51)\n        at org.apache.solr.update.processor.DistributedUpdateProcessor.doLocalAdd(DistributedUpdateProcessor.java:414)\n        at org.apache.solr.update.processor.DistributedUpdateProcessor.versionAdd(DistributedUpdateProcessor.java:535)\n        at org.apache.solr.update.processor.DistributedUpdateProcessor.processAdd(DistributedUpdateProcessor.java:315)\n        at org.apache.solr.update.processor.LogUpdateProcessor.processAdd(LogUpdateProcessorFactory.java:100)\n        at org.apache.solr.handler.loader.XMLLoader.processUpdate(XMLLoader.java:230)\n        at org.apache.solr.handler.loader.XMLLoader.load(XMLLoader.java:157)\n        at org.apache.solr.handler.UpdateRequestHandler$1.load(UpdateRequestHandler.java:92)\n        at org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:74)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1656)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:454)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:275)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1337)\n\nI am trying to use the partial update feature in my current project, and this is a showstopper for us right now.\n\nThanks,\nYoni",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yoni Amir",
            "id": "comment-13451642",
            "date": "2012-09-09T18:17:49+0000",
            "content": "I think this happens because price_c is the destination of a copyField tag, but it is also stored.\nSo on the first post one instance of this field is created.\nOn the second post (the first update) solr constructs a document with one price_c field. Then it applies the copying and creates another such field, and it manages to save the document without an error.\n\nOn the third post (the second update), when solr loads the document from the index, it detects the error.\n\nI'd expect the copy field to override previous values in this case.\nHowever, if price_c was both multi-valued and stored, I don't know what would be the correct behavior. I expect that typically it makes sense to delete the old values. However, it is possible that some of the values were originally posted into that field, rather than copied from other fields ... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13451682",
            "date": "2012-09-09T21:22:43+0000",
            "content": "This has already been fixed via SOLR-3743 "
        },
        {
            "author": "Yoni Amir",
            "id": "comment-13451871",
            "date": "2012-09-10T10:31:33+0000",
            "content": "Are you sure it is a duplicate?\nI don't fully understand all the solr features, but I know that I wasn't using solr cloud nor real-time get (at least not explicitly), and I committed all the requests, so I don't know if the tlog and real-time get were involved here. "
        },
        {
            "author": "Dana Cohen",
            "id": "comment-13478095",
            "date": "2012-10-17T18:15:20+0000",
            "content": "this is still an issue for me.  i can reproduce the same error without using real-time get or solr cloud.\nthis may need to be reopened? "
        }
    ]
}