{
    "id": "LUCENE-7251",
    "title": "remove LatLonGrid",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "This crutch doesn't speed up most polygons anymore, only some very complex ones with many components/holes.\n\nInstead as a simple step, we can use a tree of components (organized by bounding box x-intervals just like edges). This makes things less trappy for crazy polygons like the russia one.\n\nSynthetic polygons from luceneUtil\n\n\n\nvertices\nold QPS\nnew QPS\n\n\n5\n40.5\n43.8\n\n\n50\n33.1\n32.8\n\n\n500\n31.9\n31.9\n\n\n5000\n29.4\n29.6\n\n\n50000\n20.4\n22.8\n\n\n500000\n4.0\n6.9\n\n\n\n\nReal polygons (33 london districts: http://data.london.gov.uk/2011-boundary-files)\n\n\n\nvertices\nold QPS\nnew QPS\n\n\navg 5.6k\n113.8\n105.4\n\n\n\n\nRussia geonames polygon (> 1000 components, crosses dateline, hugs poles, you name it)\n\n\n\nvertices\nold QPS\nnew QPS\n\n\n11598\n1.17\n5.35\n\n\n\n\n\nThe grid hurts russia (keeping it around -> 4 QPS), and you can see it also hurts all the synthetic ones. Those london boundaries hit a sweet spot where it helps just a tad but, I think we should remove it and its startup cost along with it.\n\nWe can probably organize the tree better to be more efficient with many components: for contains() we could just pack them all into one poly. But i'm worried what this will do for relations (there would be fake edges between components i think?), and it would be complicated.",
    "attachments": {
        "LUCENE-7251.patch": "https://issues.apache.org/jira/secure/attachment/12800425/LUCENE-7251.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15255895",
            "author": "Robert Muir",
            "date": "2016-04-25T04:57:34+0000",
            "content": "Updated patch. Baseline performance has changed, and I improved some things and re-ran. Component bounding boxes are organized in both dimensions (kdtree style) which helps a bit, but seems less trappy too. I also pulled all the slow stuff completely out of Polygon.java and implemented this for GeoPointField, too.\n\nI put MHPS (millions hits per second) in these numbers so we can better see how fast things are/should be. E.G. russia looks slow if you look at QPS, but the query also returns many more docs than the london districts.\n\nPoints:\nSynthetic polygons from luceneUtil\n\n\n\nvertices\nold QPS\nnew QPS\nold MHPS\nnew MHPS\n\n\n5\n45.5\n49.0\n57.0\n61.4\n\n\n50\n37.6\n38.2\n63.8\n64.8\n\n\n500\n36.3\n35.1\n61.8\n59.7\n\n\n5000\n33.6\n32.2\n57.1\n54.9\n\n\n50000\n22.5\n24.7\n38.3\n42.0\n\n\n500000\n4.0\n7.2\n6.8\n12.3\n\n\n\n\nReal polygons (33 london districts: http://data.london.gov.uk/2011-boundary-files)\n\n\n\nvertices\nold QPS\nnew QPS\nold MHPS\nnew MHPS\n\n\navg 5.6k\n115.2\n110.9\n9.4\n9.1\n\n\n\n\nRussia geonames polygon (> 1000 components, crosses dateline, hugs poles, you name it)\n\n\n\nvertices\nold QPS\nnew QPS\nold MHPS\nnew MHPS\n\n\n11598\n1.21\n5.84\n4.2\n20.5\n\n\n\n\n\nGeoPoints:\nSynthetic polygons from luceneUtil\n\n\n\nvertices\nold QPS\nnew QPS\nold MHPS\nnew MHPS\n\n\n5\n18.8\n18.7\n23.5\n23.4\n\n\n50\n13.4\n14.5\n22.8\n24.6\n\n\n500\n5.2\n13.3\n8.9\n22.6\n\n\n5000\n0.7\n11.9\n1.3\n20.2\n\n\n\n\nReal polygons (33 london districts: http://data.london.gov.uk/2011-boundary-files)\n\n\n\nvertices\nold QPS\nnew QPS\nold MHPS\nnew MHPS\n\n\navg 5.6k\n1.5\n29.3\n0.1\n2.4\n\n\n\n\nRussia geonames polygon (> 1000 components, crosses dateline, hugs poles, you name it)\n\n\n\nvertices\nold QPS\nnew QPS\nold MHPS\nnew MHPS\n\n\n11598\n0.3\n2.6\n0.9\n9.2\n\n\n\n "
        },
        {
            "id": "comment-15256173",
            "author": "Michael McCandless",
            "date": "2016-04-25T10:00:28+0000",
            "content": "Wow \n\n+1 "
        },
        {
            "id": "comment-15256335",
            "author": "Robert Muir",
            "date": "2016-04-25T13:28:39+0000",
            "content": "I investigated the russia poly just out of curiousity, and made it simpler by removing a lot of \"hard stuff from it\", just to see the overhead of having e.g. 1k components, holes, crossing dateline, etc:\n\n\tRemoved all islands and reduced to the one 4.4k \"big part of russia\" left of dateline: 24.75 MHPS/7.2 QPS\n\tSame as above but with its 3 holes removed: 25.88 MHPS/7.5 QPS\n\n\n\nSo the current 20.5 MHPS/5.84 QPS is reasonable IMO as far as what this patch tries to solve for \"many components\".  \n\nYou can inspect this monster visually here: http://www.geonames.org/2017370/russian-federation.html "
        },
        {
            "id": "comment-15256877",
            "author": "ASF subversion and git services",
            "date": "2016-04-25T19:39:00+0000",
            "content": "Commit 837264a42ebe3e6091a64b2d0410ee7c63eebb1f in lucene-solr's branch refs/heads/master from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=837264a ]\n\nLUCENE-7251: remove LatLonGrid, remove slow polygon methods, speed up multiple components "
        },
        {
            "id": "comment-15256895",
            "author": "ASF subversion and git services",
            "date": "2016-04-25T19:51:45+0000",
            "content": "Commit 26ccf25a459c0cc73d623155178291e10adc4efb in lucene-solr's branch refs/heads/branch_6x from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=26ccf25 ]\n\nLUCENE-7251: remove LatLonGrid, remove slow polygon methods, speed up multiple components "
        },
        {
            "id": "comment-15277193",
            "author": "Hoss Man",
            "date": "2016-05-09T22:20:37+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        }
    ]
}