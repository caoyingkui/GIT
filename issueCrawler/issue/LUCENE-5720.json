{
    "id": "LUCENE-5720",
    "title": "Optimize on disk packed integers part 2",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.9",
            "6.0"
        ]
    },
    "description": "These are heavily optimized for the in-RAM case (for example FieldCache uses PackedInts.FAST to make it even faster so), but for the docvalues case they are not: we always essentially use COMPACT, we have only one decoder that must solve all the cases, even the complicated ones, we use BlockPackedWriter for all integers (even if they are ordinals), etc.",
    "attachments": {
        "LUCENE-5720.patch": "https://issues.apache.org/jira/secure/attachment/12647695/LUCENE-5720.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14014255",
            "author": "Robert Muir",
            "content": "Here's my first stab. this adds a fastestDirectBits(float overhead) versus trying to integrate with the existing one, because the logic is different when dealing with the directory API.\n\nWe can probably improve this stuff more for 5.0, e.g. the directory api was always geared at sequential access and we might be able to introduce some API changes later to speed it up more: but this seems like a safe win. ",
            "date": "2014-05-30T21:42:46+0000"
        },
        {
            "id": "comment-14014261",
            "author": "Robert Muir",
            "content": "I tried to hack luceneutil up for a performance test, not sure wikipedia 'title' is the best, but i tried on 1M:\n\nSize: 500KB increase in docvalues data (5.7MB -> 6.2MB)\nNote that in context, the entire index is 385MB (no stored fields or vectors), so the 500KB docvalues increase is negligible.\n\n20% improvement in sort performance. ",
            "date": "2014-05-30T21:49:57+0000"
        },
        {
            "id": "comment-14014509",
            "author": "Robert Muir",
            "content": "With file formats and javadocs. ",
            "date": "2014-05-31T04:18:06+0000"
        },
        {
            "id": "comment-14014697",
            "author": "Adrien Grand",
            "content": "+1 ",
            "date": "2014-05-31T15:38:40+0000"
        },
        {
            "id": "comment-14014935",
            "author": "Michael McCandless",
            "content": "+1 ",
            "date": "2014-06-01T08:13:33+0000"
        },
        {
            "id": "comment-14015309",
            "author": "Robert Muir",
            "content": "Updated patch: since we are using these for numerics (and in those cases high BPV is common, e.g. floats/doubles/etc), i added 'byte' cases for bpv > 32 (40,48,56,64). I changed the upgrade logic, to try to go to byte first, then nibble. \n\nThis means it also works like the in-ram one: if you pass FASTEST it always goes to some multiple of a byte. ",
            "date": "2014-06-02T10:44:23+0000"
        },
        {
            "id": "comment-14015313",
            "author": "Adrien Grand",
            "content": "+1 to the updated patch ",
            "date": "2014-06-02T10:53:39+0000"
        },
        {
            "id": "comment-14015335",
            "author": "ASF subversion and git services",
            "content": "Commit 1599180 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1599180 ]\n\nLUCENE-5720: Optimize DirectPackedReader's decompression ",
            "date": "2014-06-02T12:09:11+0000"
        },
        {
            "id": "comment-14015339",
            "author": "ASF subversion and git services",
            "content": "Commit 1599182 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1599182 ]\n\nLUCENE-5720: Optimize DirectPackedReader's decompression ",
            "date": "2014-06-02T12:22:05+0000"
        }
    ]
}