{
    "id": "SOLR-7207",
    "title": "PKI based security implementation for security in Solr",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Won't Fix",
        "priority": "Major"
    },
    "description": "Historically, Solr has always stayed away from securing any operations and we even allow GET operation on an HTTP end point to manipulate almost anything inside a Solr cluster\n\nWe can categorize the operations such as\n\n\tLoading executable (runtime jars) SOLR-7126\n\tconf files SOLR-6736\n\tschema API\n\tconfig API\n\tcollections API\n\t/update/* operation to any collection\n\n\n\nSOLR-7126 has solved this problem using PKI where the public keys can be uploaded to /keys/exe and all jars loaded are verified using one of the public keys. \n\nA similar scheme can be used for other operations as well. We can add keys to other  directories and use them to verify other operations. The only catch is , that we will need to send all the payload via POST\n\nThe advantage of this scheme is that Solr does not need to manage any credentials or take care of storing anything secretly. It just needs a few public keys to be stored in ZK and security will kick in automatically. External solutions can build on top of these and provide authentication etc",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-09T14:41:45+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Fort Knox security\u2122 \n\nPerhaps a more user friendly and well-known form of HTTP API security is API keys. If enforced, all requests would need to contain a key e.g. http://localhost:8983/update?commit=true&apikey=baa57bd6995e5e92b52dbf62cfca65330f9aafeb The key processing could be pluggable through an ApiKeySecurityFactory with a simple impl shipping as default. More advanced impls could do authentication, fine-grained authorization such as path-based, IP-based, and such factories could delegate to components outside of Solr too.\n\nWe don't need to choose either PKI based or ApiKey based, both could be supported if required, but to my taste PKI feels a bit too heavy-weight for this purpose. ",
            "id": "comment-14353045"
        },
        {
            "date": "2015-03-09T16:08:55+0000",
            "author": "Noble Paul",
            "content": "Using an API key means 2 things\n\n\tYou should keep the key secret. In Solr we keep everything publicly viewable\n\tWe will have to force users to use HTTPS ?\n\n\n\nCorrect me if I am wrong\nPKI is not really heavyweight. If you can secure your private key and sign your request everything else will be simple. We can keep the public keys truly viewable for everyone and the communication can continue to be over simple HTTP ",
            "id": "comment-14353152"
        },
        {
            "date": "2015-03-10T07:26:31+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Yes you'd probably want to combine with HTTPS, which is not a bad idea anyway when allowing traffic from outside your DC. Typically ApiKeys are also combined with IP checking to further reduce attack surface. Keys need to be kept secret, but probably not more than a file with proper permissions.\n\nHow would you make sure that an unencrypted, PKI signed payload with e.g. <delete><query>:</query></delete> cannot be sniffed and replayed by an attacker? The payload signature hash will be the same every time for the same payload, will it not?\n\nAlso, Solr already supports PKI through SSL certificate based auth. What we lack is a way to authorize operations. After discussions in SOLR-4470 it was quite clear that we should strive to push all enforcing of security outside of Solr, e.g. to the container. That is why that patch adds URL pattern authorization as test-code which manually must be deployed to container by the user. Or perhaps we should consider a \"Solr Shield\" approach  ",
            "id": "comment-14354462"
        },
        {
            "date": "2015-03-10T08:04:27+0000",
            "author": "Noble Paul",
            "content": "Yes you'd probably want to combine with HTTPS, which is not a bad idea anyway when allowing traffic from outside your DC\n\nSetting up Solr in HTTPS is a pain and not efficient because all our communication happens over that port. The fact that we will only need security \n\nTypically ApiKeys are also combined with IP checking to further reduce attack surface\n\nIPs can be faked , right?\n\nHow would you make sure that an unencrypted, PKI signed payload with e.g. <delete><query>:</query></delete> cannot be sniffed and replayed by an attacker? The payload signature hash will be the same every time for the same payload, will it not?\n\nYes, I'm thinking of adding an optional timestamp attributes to all write operations . Any operation that is older than a few seconds (configurable) would be rejected. Most people who use the APIs in the intranet may not worry about sniffing , but those who use the APIs over the internet can use this.\nexample:\n\n<delete>\n<_ts_>3454354646576</_ts_>\n<query>:</query>\n</delete>\n\n\n\nOur clients will have (SolrJ or the bin/post) will have options to initialize with a private key and the rest can be taken care of automatically\n\nThe reason for this idea was to have a tiered approach to security which you can opt in/out whenever you wish to an existing cluster without impacting any other operation. I can just say that loading executable  and , config alone needs to be secure and all you nee to do is upload a couple of public keys to a specified directory in ZK. We don't need to rely on external services. Relying on external systems is fine but this leads to a proliferation of recipes. This is exactly what happened when we had a .war file that could be deployed to any container and we are now at the mercy of the container\n\nMy suggestion is we should have a built in security mechanism that is reasonably secure and APIs to extend the security to other external tools.\n\nThis particular solution can be build on that API, where external solutions can also rely on\n\n\n\n\n\n\n\n\n ",
            "id": "comment-14354499"
        },
        {
            "date": "2015-03-11T10:18:26+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "More questions about the PKI solution.\nA) The project aims to support most Solr actions through the Admin UI. How can the PKI based solution be wired so that an OPS-user with his public key stored in Solr/ZK can e.g. delete a core or upload documents, while others cannot?\nB) OPS personnel use curl or in-house tools for various Solr management tasks. If those are not an option anymore, won't people request PKI aware CLI tooling for all our APIs?\nC) Some users need to authenticate queries as well, so user A can only query collection A and user B can only query collection B. Do you see the PKI solution as extendable to SEARCH operations in the future? Or would that require queries to be POSTed too? ",
            "id": "comment-14356672"
        },
        {
            "date": "2015-03-11T10:59:54+0000",
            "author": "Noble Paul",
            "content": "The project aims to support most Solr actions through the Admin UI. How can the PKI based solution be wired so that an OPS-user with his public key stored in Solr/ZK can e.g. delete a core or upload documents, while others cannot?\n\nWe will have to provide an option of client side (JavaScript) signing in our UI. see example here http://kjur.github.io/jsrsasign/sample-rsasign.html\n\nOPS personnel use curl or in-house tools for various Solr management tasks. If those are not an option anymore, won't people request PKI aware CLI tooling for all our APIs?\n\nThis WILL work with curl , you just have to sign he payload file using openssl. see this feature that already supports it.  SOLR-7126 . Most scripting tools will let you run openssl commands and create a signature. Or if you use SolrJ, we will automatically make this work. You will have to explicitly enable security for any of these , for others , everything else is same\n\nSome users need to authenticate queries as well, so user A can only query collection A and user B can only query collection B. \n\nThe querying/updating security will have to be enabled on a per collection basis. That will be a collection property and we will let users configure any set of keys for any collection. \nDo you see the PKI solution as extendable to SEARCH operations in the future? Or would that require queries to be POSTed too?\n\nYou are right . Search can also be supported . As you said , all secure commands must go through POST/PUT only\n ",
            "id": "comment-14356716"
        },
        {
            "date": "2015-12-14T10:36:06+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Closing as won't fix, as we ended up implementing Auth and Authz plugins instead. And inter-node communication already uses PKI. ",
            "id": "comment-15055791"
        }
    ]
}