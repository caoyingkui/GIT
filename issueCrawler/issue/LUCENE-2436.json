{
    "id": "LUCENE-2436",
    "title": "FilterIndexReader doesn't delegate everything necessary",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Some new methods like fields() aren't delegated by FilterIndexReader, incorrectly resulting in the IndexReader base class method being used.  We should audit all current IndexReader methods to determine which should be overridden and delegated.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-05-02T22:22:46+0000",
            "content": "We could perhaps use some fancy reflection in a test to determine if FilterIndexReader overrides everything it needs to? ",
            "author": "Yonik Seeley",
            "id": "comment-12863207"
        },
        {
            "date": "2010-05-03T06:00:19+0000",
            "content": "Reflection police says: +1\n\nGood idea, its something like our final assertments for TokenStreams and Analyzers in tests. I think about it.\nYou can use VirtualMethod from utils package to assert this! ",
            "author": "Uwe Schindler",
            "id": "comment-12863242"
        },
        {
            "date": "2010-05-03T06:11:43+0000",
            "content": "FWIW, there's a test I wrote for ParallelWriter to ensure it overrides all of IndexWriter methods:\n\n\nprivate String normalizeMethodName(Method method) {\n  String mstr = method.toGenericString();\n  int orgIdx = mstr.indexOf(\"org\");\n  int nameIdx = mstr.indexOf(method.getName());\n  String normalizedName = mstr.substring(0, orgIdx) + mstr.substring(nameIdx);\n  return normalizedName;\n}\n\t\n@Test\npublic void testIndexWriterOverrides() throws Exception {\n  // The following methods are not overridden by ParallelWriter, usually\n  // because they are trivial, or PW has nothing special to do with them.\n  Set<String> methodsNotOverridden = new HashSet<String>();\n  methodsNotOverridden.add(normalizeMethodName(IndexWriter.class.getMethod(\"getConfig\")));\n  methodsNotOverridden.add(normalizeMethodName(IndexWriter.class.getMethod(\"getInfoStream\")));\n  methodsNotOverridden.add(normalizeMethodName(IndexWriter.class.getMethod(\"message\", String.class)));\n  \t  \n  Set<String> pwMethods = new HashSet<String>();\n  for (Method m : ParallelWriter.class.getDeclaredMethods()) {\n    String normName = normalizeMethodName(m);\n    int mod = m.getModifiers();\n    if (!Modifier.isPrivate(mod) && !Modifier.isFinal(mod) && !Modifier.isStatic(mod)) {\n      pwMethods.add(normName);\n    }\n  }\n  \t\t\n  for (Method m : IndexWriter.class.getDeclaredMethods()) {\n    int mod = m.getModifiers();\n    if (!Modifier.isPrivate(mod) && !Modifier.isFinal(mod) && !Modifier.isStatic(mod)) {\n      String normName = normalizeMethodName(m);\n      if (!methodsNotOverridden.contains(normName)) {\n        assertTrue(\"ParallelWriter does not override \" + normName, pwMethods.contains(normName));\n      } else if (pwMethods.contains(normName)) {\n        fail(\"mothod \" + normName + \" is set as not overridden by ParallelWriter, but it is. Remove it from methodsNotOverridden set.\");\n      }\n    }\n  }\n}\n\n\n\nI don't know what VirtualMethod is, but this test allows for specifying some methods that are ok not to be overridden. normalizeMethodName ignores the FQDN of the method, which obviously changes when you override it. Take a look - might give you something to start with. ",
            "author": "Shai Erera",
            "id": "comment-12863246"
        },
        {
            "date": "2010-05-03T06:21:26+0000",
            "content": "VirtualMethod is the sophisticated\u2122 tool we use for delegating to overriden deprecated methods. It has all the checks you do inside, only the enumerations are missing.\n\nThe code for the checks is almost finished...  The rest is just the getDeclaredMethods() iteration. ",
            "author": "Uwe Schindler",
            "id": "comment-12863248"
        },
        {
            "date": "2010-05-03T09:42:44+0000",
            "content": "+1 for a test to catch this  ",
            "author": "Michael McCandless",
            "id": "comment-12863285"
        },
        {
            "date": "2012-05-23T20:20:59+0000",
            "content": "This was fixed by the IndexReader to AtomucReader refactoring a while ago. ",
            "author": "Uwe Schindler",
            "id": "comment-13281873"
        }
    ]
}