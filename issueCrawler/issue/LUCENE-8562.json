{
    "id": "LUCENE-8562",
    "title": "Speed up merging segments of points with data dimensions",
    "details": {
        "components": [
            "core/index"
        ],
        "status": "Resolved",
        "resolution": "Fixed",
        "fix_versions": [
            "master (8.0)",
            "7.7"
        ],
        "affect_versions": "master (8.0),                                            7.7",
        "labels": "",
        "priority": "Major",
        "type": "Improvement"
    },
    "description": "Currently when merging segments of points with data dimensions, all dimensions are sorted and carried over down the tree even though only indexing dimensions are needed to build the BKD tree. This is needed so leaf node data can be compressed by common prefix.\n\nBut when using MutablePointValues, this ordering is done at the leaf level so we can se a similar approach from data dimensions and delay the sorting at leaf level. This seems to speed up indexing time as well as reduce the storage needed for building the index.",
    "attachments": {
        "LUCENE-8562.patch": "https://issues.apache.org/jira/secure/attachment/12947739/LUCENE-8562.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16683090",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n -1 \n  test4tests  \n   0m  0s \n  The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 32s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 30s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 30s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 30s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 30s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 30s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  13m 37s \n  core in the patch passed.  \n\n\n  \n   \n  16m 51s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8562 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12947739/LUCENE-8562.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-137-generic #163~14.04.1-Ubuntu SMP Mon Sep 24 17:14:57 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 52998fa \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_191 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/122/testReport/ \n\n\n modules \n C: lucene/core U: lucene/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/122/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-11-12T00:35:06+0000"
        },
        {
            "id": "comment-16692087",
            "author": "Adrien Grand",
            "content": "+1 to not sort data dimensions. Do we really need the call to PathSlice dataSlice = switchToHeap(slices[0], toCloseHeroically), it should already have been called earlier? For simplicity maybe we should only compute the common prefix length on data dimensions and not even try to use data dimensions as a \"sortedDim\"?\n ",
            "date": "2018-11-19T18:28:51+0000"
        },
        {
            "id": "comment-16692805",
            "author": "Ignacio Vera",
            "content": "Do we really need the call to PathSlice dataSlice = switchToHeap(slices[0], toCloseHeroically), it should already have been called earlier?\n\nYou need to be careful because you don't want to sort a slice that it is shared between nodes of the tree. I attach a different implementation that tries to reuse one of the existing path slices.\n\n\nFor simplicity maybe we should only compute the common prefix length on data dimensions and not even try to use data dimensions as a \"sortedDim\"\n\nNot sure if this works. I think for common prefix to work you need all dimensions to be computed but not 100% sure. The note thing of this implementation is that the result is the same regardless you are spilling into a file or you are using MutablePointValues. We can look into this further.\n\n ",
            "date": "2018-11-20T07:56:56+0000"
        },
        {
            "id": "comment-16694430",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n -1 \n  test4tests  \n   0m  0s \n  The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 32s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 28s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 28s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 28s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 28s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 28s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  13m 39s \n  core in the patch passed.  \n\n\n  \n   \n  17m  0s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8562 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12948817/LUCENE-8562.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-137-generic #163~14.04.1-Ubuntu SMP Mon Sep 24 17:14:57 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 492c344 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_191 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/123/testReport/ \n\n\n modules \n C: lucene/core U: lucene/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/123/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-11-21T09:09:35+0000"
        },
        {
            "id": "comment-16694461",
            "author": "Adrien Grand",
            "content": "I think for common prefix to work you need all dimensions to be computed but not 100% sure\n\nRight, computing common prefixes is important. I was only considering removing the logic that computes the cardinality of the leading uncommon byte and potentially selects data dimensions as a \"sortedDim\" as this adds some tricky code. ",
            "date": "2018-11-21T09:28:49+0000"
        },
        {
            "id": "comment-16694484",
            "author": "Ignacio Vera",
            "content": "I got you, I will play with the idea. ",
            "date": "2018-11-21T09:43:56+0000"
        },
        {
            "id": "comment-16694530",
            "author": "Ignacio Vera",
            "content": "Removing that logic makes test unhappy. In particular if we have the same values in the index dimensions but different values in the data dimensions, then it will fail when writing block packed values::\n\nint prefixLenSum = Arrays.stream(commonPrefixLengths).sum();\nif (prefixLenSum == packedBytesLength)\n{ \n   out.writeByte((byte) -1); }\nelse {\n  assert commonPrefixLengths[sortedDim] < bytesPerDim;\n...\n}\n\nThe assert complains as the commonPrefixLengths for the sorted dimension is equal to bytesPerDim. ",
            "date": "2018-11-21T10:27:38+0000"
        },
        {
            "id": "comment-16694531",
            "author": "Ignacio Vera",
            "content": "Attached a new patch. There was an error in the previous in the way slice paths where chosen. ",
            "date": "2018-11-21T10:28:45+0000"
        },
        {
            "id": "comment-16694575",
            "author": "Adrien Grand",
            "content": "I think we could just fix the assert.  OK let's get this in as-is, I agree with you that it has the merit of compressing the same way as today. We can look later into simplifying this. ",
            "date": "2018-11-21T11:31:26+0000"
        },
        {
            "id": "comment-16694667",
            "author": "Ignacio Vera",
            "content": "Let's try another iteration . I have realised that the only thing we need to do is to adjust the commonPrefixLength of the sorted dimension. It does not seem to have much effect on the compression and it does simplify the patch. Attached this approach. ",
            "date": "2018-11-21T12:45:57+0000"
        },
        {
            "id": "comment-16695751",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n -1 \n  test4tests  \n   0m  0s \n  The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 30s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 28s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 28s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 28s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 28s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 28s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  14m 18s \n  core in the patch passed.  \n\n\n  \n   \n  17m 25s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8562 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12949042/LUCENE-8562.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-137-generic #163~14.04.1-Ubuntu SMP Mon Sep 24 17:14:57 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 67cdd21 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_191 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/124/testReport/ \n\n\n modules \n C: lucene/core U: lucene/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/124/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-11-22T10:15:25+0000"
        },
        {
            "id": "comment-16696498",
            "author": "Ignacio Vera",
            "content": "Having a closer look to the situation when no calculating the cardinality for data dimensions, the only case where we need to be careful is when the sortedDim ==\u00a0bytesPerDim. In that case we need to check if data dimensions contain different values (commonPrefixLengths[dataDim] != bytesPerDim) and in this approach we use the first occurrence as sortedDim. ",
            "date": "2018-11-23T08:20:31+0000"
        },
        {
            "id": "comment-16697223",
            "author": "Adrien Grand",
            "content": "Thanks Ignacio. I would expect this new code path to be quite rare so I'm not sure it is worth optimizing to the point of reusing a slice that isn't shared. Let's maybe remove the following lines?\n\n\n+              //find a slice that is not shared between nodes of the tree.\n+              for (int i = 0; i < numIndexDims; i++) {\n+                if (slices[i].start == 0 && slices[i].count == ((HeapPointWriter) slices[i].writer).maxSize) {\n+                  dataDimPathSlice = slices[i];\n+                  break;\n+                }\n+              }\n\n ",
            "date": "2018-11-23T14:42:03+0000"
        },
        {
            "id": "comment-16697238",
            "author": "Ignacio Vera",
            "content": "I agree that this path should be extremely rare on real world data. Patch updated. ",
            "date": "2018-11-23T14:52:35+0000"
        },
        {
            "id": "comment-16697639",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n -1 \n  test4tests  \n   0m  0s \n  The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 31s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 30s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 30s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 30s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 30s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 30s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  13m 57s \n  core in the patch passed.  \n\n\n  \n   \n  17m  6s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8562 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12949303/LUCENE-8562.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-137-generic #163~14.04.1-Ubuntu SMP Mon Sep 24 17:14:57 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 2da72ad \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_191 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/125/testReport/ \n\n\n modules \n C: lucene/core U: lucene/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/125/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-11-24T04:37:44+0000"
        },
        {
            "id": "comment-16698610",
            "author": "Adrien Grand",
            "content": "+1\n\nDouble checking: do we already have tests for the case that all index dimensions have the same value but not data dimensions? ",
            "date": "2018-11-26T08:33:07+0000"
        },
        {
            "id": "comment-16698779",
            "author": "Ignacio Vera",
            "content": "testOneDimEqual and\u00a0testOneDimTwoValues\u00a0eventually hits that case when index dimensions is equal to 1.\u00a0 Shall we add a test for higher dimensions? ",
            "date": "2018-11-26T11:01:56+0000"
        },
        {
            "id": "comment-16698913",
            "author": "Adrien Grand",
            "content": "+1 that would be nice ",
            "date": "2018-11-26T13:21:44+0000"
        },
        {
            "id": "comment-16698964",
            "author": "Ignacio Vera",
            "content": "Added test for special case when index dimensions are equal but data dimensions are not equal. ",
            "date": "2018-11-26T13:51:55+0000"
        },
        {
            "id": "comment-16700073",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 29s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 32s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 32s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 32s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 32s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 32s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  14m 24s \n  core in the patch passed.  \n\n\n  \n   \n  17m 28s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8562 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12949498/LUCENE-8562.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-137-generic #163~14.04.1-Ubuntu SMP Mon Sep 24 17:14:57 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 68c0774 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_191 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/126/testReport/ \n\n\n modules \n C: lucene/core U: lucene/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/126/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-11-27T08:51:30+0000"
        },
        {
            "id": "comment-16700086",
            "author": "Adrien Grand",
            "content": "+1 ",
            "date": "2018-11-27T09:00:45+0000"
        },
        {
            "id": "comment-16700113",
            "author": "ASF subversion and git services",
            "content": "Commit 72ca4488d1313ffd2b9b8cf43027f7677022e80f in lucene-solr's branch refs/heads/master from iverase\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=72ca448 ]\n\nLUCENE-8562: Speed up merging segments of points with data dimensions by only sorting on the indexed dimensions ",
            "date": "2018-11-27T09:28:49+0000"
        },
        {
            "id": "comment-16700114",
            "author": "ASF subversion and git services",
            "content": "Commit a66da411c97b59e6ff6f3a3319f91de5a97e752d in lucene-solr's branch refs/heads/branch_7x from iverase\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a66da41 ]\n\nLUCENE-8562: Speed up merging segments of points with data dimensions by only sorting on the indexed dimensions ",
            "date": "2018-11-27T09:29:12+0000"
        },
        {
            "id": "comment-16700145",
            "author": "ASF subversion and git services",
            "content": "Commit 72ca4488d1313ffd2b9b8cf43027f7677022e80f in lucene-solr's branch refs/heads/jira/http2 from iverase\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=72ca448 ]\n\nLUCENE-8562: Speed up merging segments of points with data dimensions by only sorting on the indexed dimensions ",
            "date": "2018-11-27T09:56:57+0000"
        },
        {
            "id": "comment-16701540",
            "author": "Adrien Grand",
            "content": "Indexing speed went from 39k docs/s to 67 (+70%) on the nightly benchmarks, not bad.  http://people.apache.org/~mikemccand/geobench.html#index-times ",
            "date": "2018-11-28T08:49:07+0000"
        },
        {
            "id": "comment-16705899",
            "author": "Michael McCandless",
            "content": "Wow! ",
            "date": "2018-12-01T16:29:40+0000"
        }
    ]
}