{
    "id": "SOLR-1354",
    "title": "Pass HTTP request parameters through to XSL scripts",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "It is not possible to create a standard web application with the Solr distribution without coding in XSL, Ruby, HTML/Javascript etc.\n\nThis patch is an experiment that allows you to configure an RSS 2.0 feed through HTTP parameters. To do this, it supplies:\n1) a change to XSLTWriter.java to pass an HTTP parameter named 'tr.name' through as an XSL parameter called 'name'. The XSL script must then declare 'name' as a global parameter.\n2) example/solr/conf/xslt/rss2.xsl - a mostly complete implementation of RSS 2.0.\n3) a sample <requestHandler> in example/solr/conf/solrconfig.xml which configures solr/rss2 as an RSS feed for the sample electronics store in example/solr. This <requestHandler> supplies all parameters for the RSS feed.",
    "attachments": {
        "rss2.patch": "https://issues.apache.org/jira/secure/attachment/12416012/rss2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Lance Norskog",
            "id": "comment-12741157",
            "date": "2009-08-10T00:16:04+0000",
            "content": "This experiment has two aims:\n1) It should be possible to send in an HTTP request that creates an RSS2.0 feed for any Solr index.\n2) The rss2.xsl script should give a handy starting point for other XSL scripts, giving an easily altered style for XSL's weirdly limited tools.\n\nParameters are name 'tr.param='. This convention made sense as 'tr=' gives the name of the XSL script.\n\nThere a few holes in the RSS 2.0 implementation. They are listed in the header text of rss2.xsl. The RSS2.0 standard is from http://cyber.law.harvard.edu/rss/rss.html by Dave Winer. (Yeah, yeah.) An ATOM 1.0 version is left as an exercise for the unwary.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12744774",
            "date": "2009-08-18T23:12:56+0000",
            "content": "Lance: the topic of XSL params came up once upon a time, and before anyone ever got around to implementing it, someone pointed out that using echoParams you could get all of the params into the XML so that the template had access to them.\n\nyou've already written the code to convert params to xsl:params ... using echoParams still seems like it's more generally useful, because it can work with any param, and allows for multi-valued params as well (giving the tempalte the power to use the first, or all).\n\nIs there any significant advantage you see to adding xsl:param support that echoParams can't handle? "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12744943",
            "date": "2009-08-19T07:52:53+0000",
            "content": "Ow! Heck. The multi-valued param feature is a good point. \n\nOne problem that came up is localization - fetching the local dateformat and formatting dates in the RSS feed according to the caller's locale.  This would require pulling the incoming HTTP headers and feeding them to the XSL as parameters.\n\nAre there other request handlers that could use parameters? For example, the Velocity handler? How can it localize Velocity applications without the HTTP local header? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12747382",
            "date": "2009-08-25T12:48:54+0000",
            "content": "Currently the Velocity handler does not deal with HTTP headers.\n\nIt would be nice (and handy) to have HTTP headers pass through the SolrParams somehow.  It would be easy enough to pass them through as regular parameters, but should their name get prefixed (eg Accept header being named \"_http_Accept\" or something like that)?\n\nHowever, it is debatable how this should work... should the client to Solr (arguably NOT the users browser directly) translate any useful header information into standard Solr get parameters? "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12757705",
            "date": "2009-09-20T00:12:04+0000",
            "content": "Hoss-\n\nThe XML response format only includes the params given on the HTTP url, not the params acquired defaults/invariants/appends.\n\nEchoparams does not show the defaults/invariants/appends. This is good, because these additional parameters are a security feature that allows you to expose certain search features to customers.\n\nSo, the solrconfig.xml in the patch sets various RSS parameters and these cannot be brought into the output XML document. \n\nSo, to make an RSS/ATOM/etc. xsl script that is programmable through params, the XSL transformer really must explicitly pass the parameters. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12757706",
            "date": "2009-09-20T00:17:21+0000",
            "content": "Erik-\n\nThere are two places in the chain where this could happen:\n1) solrconfig.xml has the variable substitute syntax.\n2) inside each output transformer.\n\nInside solrconfig is interesting because then http headers can automatically become search terms. This would be really handy with the language/locale field. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12757771",
            "date": "2009-09-20T22:35:31+0000",
            "content": "Lance - echoparams=all indeed does echo out invariants and appends from the request handler config.  So your comment about security isn't accurate.  Also, the entire solrconfig.xml is available over HTTP through the file request handler anyway, making everything there exposed (which could be turned off, yes).\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13631183",
            "date": "2013-04-13T21:31:25+0000",
            "content": "SPRING_CLEANING_2013 JIRAS Seems from the comments that this isn't a problem. "
        }
    ]
}