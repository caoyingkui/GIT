{
    "id": "SOLR-3667",
    "title": "Solr::fieldNorm() gives weired values with CustomSimilarity.",
    "details": {
        "affect_versions": "3.6",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "I have only seen floats being \"smaller\" int values like \"13.33\" becoming \"12.00\", it is a very strange behavior. It behaves the same if the boost is on the keyword field...\n\nExample of update data:\n\n<add>\n\t<doc boost=\"13.33\">\n\t\t<field name=\"keyword\">test one</field>\n\t\t<field name=\"ranking\">13.33</field>\n\t</doc>\n\t<doc boost=\"10.00\">\n\t\t<field name=\"keyword\">test two</field>\n\t\t<field name=\"ranking\">10.00</field>\n\t</doc>\n</add>\n\n\n\nExample of solr response, ranking is what I have tried to give both the document boost and field boost individualy.\n\n<result>\n\t<doc>\n\t\t<float name=\"score\">12.0</float>\n\t\t<str name=\"keyword\">test one</str>\n\t\t<float name=\"ranking\">12.0</float>\n\t</doc>\n\t<doc>\n\t\t<float name=\"score\">10.0</float>\n\t\t<str name=\"keyword\">test two</str>\n\t\t<float name=\"ranking\">10.0</float>\n\t</doc>\n</result>\n<lst name=\"debug\">\n\t<lst name=\"explain\">\n\t\t<str name=\"1\">\n\t\t12.0 = (MATCH) fieldWeight(keyword:test in 0), product of:\n\t\t  1.0 = tf(termFreq(keyword:test)=1)\n\t\t  1.0 = idf(docFreq=2, maxDocs=2)\n\t\t  12.0 = fieldNorm(field=keyword, doc=0)\n\t\t</str>\n\t\t<str name=\"2\">\n\t\t10.0 = (MATCH) fieldWeight(keyword:test in 0), product of:\n\t\t  1.0 = tf(termFreq(keyword:test)=1)\n\t\t  1.0 = idf(docFreq=2, maxDocs=2)\n\t\t  10.0 = fieldNorm(field=keyword, doc=0)\n\t\t</str>\n\t</lst>\n</lst>\n\n\n\nMy CustomSimilarity class:\nCustomSimilarity.java\nimport org.apache.lucene.index.FieldInvertState;\nimport org.apache.lucene.search.DefaultSimilarity;\n\npublic class CustomSimilarity extends DefaultSimilarity {\n\n\tpublic CustomSimilarity() {\n\t\tsuper();\n\t}\n\n\tpublic float tf(int freq) {\n\t\treturn (float) 1.0;\n\t}\n\n\tpublic float idf(int docFreq, int numDocs) {\n\t\treturn (float) 1.0;\n\t}\n\n\tpublic float computeNorm(String field, FieldInvertState state) {\n\t\treturn state.getBoost();\n\t}\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13421352",
            "date": "2012-07-24T12:27:52+0000",
            "content": "please see the documentation on norms on the lucene website: they are lossy. "
        },
        {
            "author": "Tim Kornhammar",
            "id": "comment-13421404",
            "date": "2012-07-24T13:41:06+0000",
            "content": "I've searched a lot for that information and all I needed where the keyword lossy...\n\nIf it isn't a bug, how come the score can be a float with precision but the boost which would be a part of the score cannot?\n\nAlso the docs about encodeNormValue() says \"The encoding uses a three-bit mantissa, a five-bit exponent, and the zero-exponent point at 15, thus representing values from around 7x10^9 to 2x10^-9 with about one significant decimal digit of accuracy.\" so how is it lossy?\n\n\nMy current solution is to use:\nq={!boost b=ranking}keyword:test\n\nAnd by letting computeNorm() return 1.\n\nBut that should lead be a performance loss, to change the scoring at search time so not really the best solution..? "
        }
    ]
}