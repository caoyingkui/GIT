{
    "id": "LUCENE-4511",
    "title": "TermsFilter might return wrong results if a field is not indexed or not present in the index",
    "details": {
        "components": [
            "modules/other"
        ],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "4.0,                                            4.1,                                            6.0",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "TermsFilter returns if a term returns null from AIR#terms(term) while it should just continue. I will upload a test & fix shortly",
    "attachments": {
        "LUCENE-4511.patch": "https://issues.apache.org/jira/secure/attachment/12551187/LUCENE-4511.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-10-29T13:43:44+0000",
            "content": "here is a patch & testcase ",
            "author": "Simon Willnauer",
            "id": "comment-13486014"
        },
        {
            "date": "2012-10-29T13:56:13+0000",
            "content": "Nice catch!\n\nHmm should we set lastField = field (and termsEnum = null) before continue (so we don't keep calling fields.terms() on the non-existent field), and then change that bogus if to check if termsEnum != null?\n ",
            "author": "Michael McCandless",
            "id": "comment-13486021"
        },
        {
            "date": "2012-10-29T16:01:52+0000",
            "content": "here is a new patch basically rewriting the TermsFilter. I switch to a Term array rather than a treemap and made the filter immutable. I really don't like if you can cache this filter somehow and its mutable. I also moved the most of the work (figuring out when to reset the terms enum and when a field changes to the ctor rather than doing it for each segment.  I also added some more tests ",
            "author": "Simon Willnauer",
            "id": "comment-13486104"
        },
        {
            "date": "2012-10-29T17:20:09+0000",
            "content": "Wow, this looks good!  We could also make an outer array w/ one entry (holding field name & array of terms I guess) per field, instead of the array of booleans marking the transition.\n\nHmm, but, you are calling terms.iterator once per term in each field?  Can we call that only once per field instead?\n\nAt some point/density it may be worth union-ing the terms into an A and using Terms.intersect ... we've talked about doing that before ... but we should do that separately. ",
            "author": "Michael McCandless",
            "id": "comment-13486165"
        },
        {
            "date": "2012-10-29T17:34:30+0000",
            "content": "new patch - moving the terms.iterator call into the block that checks if the field changed. I also remove copying the bytes which doesn't make sense here really. \n\nI don't think we should keep the fields around because then comparison always needs the previous and that makes the loop more complex. \n\nI also added a comment regarding the automaton idea.\n\nthis is ready to go IMO.  ",
            "author": "Simon Willnauer",
            "id": "comment-13486182"
        },
        {
            "date": "2012-10-30T11:13:19+0000",
            "content": "here is a new patch making this entire thing a bit more cache friendly but more complex. I changed the internal representation to serialized bytes and parallel arrays optimized for single field multiple terms case. This filters i often used with a large number of terms in a single field and usually cached for best performance. I also changed the class to be final and added a lot more tests.\n ",
            "author": "Simon Willnauer",
            "id": "comment-13486812"
        },
        {
            "date": "2012-10-30T20:41:28+0000",
            "content": "if nobody objects I will commit the current patch tomorrow. ",
            "author": "Simon Willnauer",
            "id": "comment-13487212"
        },
        {
            "date": "2012-10-30T21:18:11+0000",
            "content": "Do we need to check for the \"no terms provided\" case (throw IAE)?  Else we seem to make a TermsAndField w/ null field?  Or is that harmless (matches no docs)...?  Maybe we need a test for it ...\n\nI think the ArrayUtil.grow can be a < not a <=?  Should we shrink the byte[] down in the end?\n\nCan we rename .terms -> .termBytes?\n\nTypo: \"don't use case we could pollute the cache here easily\" --> \"don't use cache since we could pollute the cache here easily\"\n\nTypo?: \"no freq if we don't need them\" -> \"no freq since we don't need them\"\n\nMaybe equals should also compare the hashCode first (since we compute/cache it up front)?\n\nShould currentTermsAndField be renamed to lastTermsAndField?  It's always the last \"completed\" field right?\n\nHmm I suddenly realized: I think this code is doing the same thing that FrozenBufferedDeletes does (see PrefixCodedTerms ... which takes even fewer bytes since it shares prefixes).  Maybe we should just use that? ",
            "author": "Michael McCandless",
            "id": "comment-13487249"
        },
        {
            "date": "2012-10-31T00:45:55+0000",
            "content": "+1 to these improvements.\n\nAnother typo: \"to optimize for this case and to be fitler-cache friendly we \" -> \"filter-cache\" ",
            "author": "Chris Male",
            "id": "comment-13487417"
        },
        {
            "date": "2012-10-31T09:11:44+0000",
            "content": "here is a new patch fixing the issues reported by mike & chris! thanks for reviewing. \n\nRegarding PrefixCodedTerms I don't think this buys us much here since usecases are not likely to share prefixes? For IDs (delete terms) this is more likely though). \n\nI think its ready, I will commit later today or tomorrow if nobody objects. ",
            "author": "Simon Willnauer",
            "id": "comment-13487628"
        },
        {
            "date": "2012-10-31T12:55:42+0000",
            "content": "Regarding PrefixCodedTerms I don't think this buys us much here since usecases are not likely to share prefixes? \n\nWell I suspect TermsFilter is often used with many terms, at which\npoint prefix coding will usually reduce memory required.\n\nDo you have a sense of how many terms typical ElasticSearch usage\nuses?  Seems like it must be highish since we're compacting terms into\nsingle byte[] in the first place.\n\nIt would also be nice to reusing existing same code instead of\ninventing yet another way to pack terms into bytes (hrm:\nFieldCache/DocValues is yet another place where we do this).\n\nBut I agree we don't need to improve that now ... we can refactor\nlater ... progress not perfection.\n\nHmm maybe add an explicit test for the \"no terms provided\" case?\n(Maybe I missed it ...).  Also: maybe this should not be IAE but\nrather just return a filter accepting nothing?  (I think this is\nwhat current one does today). Ie, just don't add lastTermsAndField\nif previousField is null in the ctor).\n\nOtherwise +1 to the new patch.  Thanks Simon! ",
            "author": "Michael McCandless",
            "id": "comment-13487733"
        },
        {
            "date": "2012-10-31T13:09:34+0000",
            "content": "Well I suspect TermsFilter is often used with many terms, at which\npoint prefix coding will usually reduce memory required.\n\nthe main point here is reducing # of objects really. In lucene we often focus on reducing the memory footprint but even if we don't safe much here we are still friendly in terms of GC which is my main concern. so that is also why I don't care too much about the prefix coded stuff. Yet we should consolidate this. I will open another issue.\n\nHmm maybe add an explicit test for the \"no terms provided\" case?\nI will add one before I commit. I don't think we should be smart here. Its likely a bug if nothing is provided. ",
            "author": "Simon Willnauer",
            "id": "comment-13487742"
        },
        {
            "date": "2012-10-31T13:19:17+0000",
            "content": "Wasn't there another patch available that uses AutomatonTermsEnum with MTQ to provide the same functionality? The Automaton was this Dahizuk-Mihov-thingie. Maybe we can make a MultiTermQuery out of this one (the Filter is then incuded by the rewrite mode, too)? ",
            "author": "Uwe Schindler",
            "id": "comment-13487756"
        },
        {
            "date": "2012-10-31T13:27:05+0000",
            "content": "Ah uwe, too late. I already hit enter on the backport. you are referring to LUCENE-3893 I think this is useful lets see where it goes. ",
            "author": "Simon Willnauer",
            "id": "comment-13487764"
        },
        {
            "date": "2012-10-31T13:46:14+0000",
            "content": "It is not a problem, I was on vacation, so I only followed the mailing list on my mobile phone... We should in all cases port this automaton from the tests into core/query-module. I think the main issue is: Some tests in corre use it, but maybe we can move those tests to the module. Or we move TermsFilter to core... ",
            "author": "Uwe Schindler",
            "id": "comment-13487775"
        },
        {
            "date": "2013-03-22T16:21:40+0000",
            "content": "[branch_4x commit] Simon Willnauer\nhttp://svn.apache.org/viewvc?view=revision&revision=1404132\n\nLUCENE-4511: TermsFilter might return wrong results if a field is not indexed or not present in the index ",
            "author": "Commit Tag Bot",
            "id": "comment-13610617"
        }
    ]
}