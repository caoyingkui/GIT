{
    "id": "LUCENE-270",
    "title": "\"and\" should be used in query syntax, not \"AND\"",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/website"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Incomplete",
        "status": "Closed"
    },
    "description": "I found I must use \"and\" in query syntax, not \"AND\".\n\nI wonder why \"AND\" appeared in your document in website. It is misleading.\n\nCheers\nFred",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2004-09-01T18:45:13+0000",
            "content": "Can you show us some code?  I am using Lucene with AND right now, and it's\nworking for me.  What version of Lucene are you using? (although AND should work\nin all of them, I'm curious).  I'll mark this report WORKSFORME.  If you have\nsome code that shows that AND indeed does not work, please reopen the bug.\nYou can also look at Lucene's unit tests that use AND, and compare them with\nyour code. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321872"
        },
        {
            "date": "2004-09-02T04:12:50+0000",
            "content": "Attached is three methods in several Java classes, getDocument, getQueryString \nand getHits.\n\nPlease refer method getDocument for document format I used to save Lucene \ndocumet.\n\nI used getQueryString() to produce Lucene search query string, and use getHits \nto get search result.\n\nIn the following code, it will return none if I use \"AND\" but return what I \nexpected if I use \"and\".\n\n\n  public Document getDocument(HttpServletRequest request) \n{\n    Document document=new Document();\n    document.add(Field.Keyword(\"type\", LuceneDoc.STOCK_ITEM));\n    document.add(Field.Keyword(\"stockItemCode\", getStockItemCode()));\n    document.add(Field.Text(\"shortDesc\", shortDesc));\n    document.add(Field.Text(\"longDesc\", longDesc));\n\n    return document;\n  }\n\n\n  /**\n\n\tLuceneDoc.STOCK_ITEM=stockItem\n\tdefault field=shortDesc\n   */\n  public String getQueryString() \n{\n    String quotedSearchQuery=\"(\"+searchString+\")\";\n    return \"type:\"+LuceneDoc.STOCK_ITEM+\" and (\"+\n        quotedSearchQuery+\" or longDesc:\"+quotedSearchQuery+\")\";\n  }\n\n\n\n  //queryField has been set to \"shortDesc\"  \n  protected Page getHits(int start, int count) {\n    try {\n      QueryParser qp=new QueryParser(queryField, new StandardAnalyzer());\n      qp.setOperator(QueryParser.DEFAULT_OPERATOR_OR);\n      Query q=qp.parse(queryString);\n\n      Searcher searcher=getSearcher(indexPath);\n      Hits hits=searcher.search(q);\n\n      Collection documents=new ArrayList();\n      for (int i=start; i<hits.length() && i<(start+count); i++) \n{\n        documents.add(hits.doc(i));\n      }\n\n      searcher.close();\n\n      return new Page(documents, start, count, hits.length());\n    } catch (ParseException ex) \n{\n      throw new IndexException(ex.getMessage());\n    } catch (IOException ex) {      throw new IndexException(ex.getMessage());    }\n  } ",
            "author": "Fred",
            "id": "comment-12321873"
        },
        {
            "date": "2004-09-02T06:34:33+0000",
            "content": "Unfortunately, I can't run this code and try it out for obvious reasons, so I\ncan't help you properly.  If you can provide something I can run, I may be able\nto help.  However, that \"qp.setOperator(QueryParser.DEFAULT_OPERATOR_OR);\" looks\nsuspicious.  What happens if you don't use that (e.g. comment it out)? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321874"
        },
        {
            "date": "2004-09-07T04:50:59+0000",
            "content": "Seems like there was no further reply. Feel free to re-open this if the \nproblem persists and you have a self-contained test case that demonstrates the \nproblem. \n ",
            "author": "Daniel Naber",
            "id": "comment-12321875"
        },
        {
            "date": "2004-09-07T05:38:56+0000",
            "content": "Yes, It is fine to me now. The problem disappeared when I use Jakarta commons-\nlang 2.0 two days ago.\n\nThanks\n\nBest\nFred ",
            "author": "Fred",
            "id": "comment-12321876"
        },
        {
            "date": "2004-09-30T04:19:49+0000",
            "content": "I wish to reopen this issue. Lucene gives different results when using \"and\" \nand \"AND\". Bellow is the runable class IndexItems and SearchItems.\n\npackage test;\n\nimport java.io.IOException;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\n\npublic class IndexItems {\n  public static void main(String[] args) throws IOException {\n    try \n{\n      IndexWriter writer = new IndexWriter(\"/test/index\", new StandardAnalyzer\n(), true);\n      indexDocs(writer);\n\n      writer.optimize();\n      writer.close();\n\n      System.out.println(\"index finished.\");\n\n    }\n catch (IOException e) \n{\n      System.out.println(\" caught a \" + e.getClass() +\n       \"\\n with message: \" + e.getMessage());\n    }\n  }\n\n  private static void indexDocs(IndexWriter writer)\n    throws IOException \n{\n    Document document=new Document();\n\n    document.add(Field.Keyword(\"type\", \"stockSingle\"));\n    document.add(Field.Text(\"desc\", \"test single 1\"));\n    writer.addDocument(document);\n\n    document.add(Field.Keyword(\"type\", \"stockSingle\"));\n    document.add(Field.Text(\"desc\", \"test single 2\"));\n    writer.addDocument(document);\n\n    document.add(Field.Keyword(\"type\", \"stockSingle\"));\n    document.add(Field.Text(\"desc\", \"test single 3\"));\n    writer.addDocument(document);\n  }\n}\n\npackage test;\n\nimport java.io.IOException;\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.search.Searcher;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.Hits;\nimport org.apache.lucene.queryParser.QueryParser;\n\npublic class SearchItems {\n  public static void main(String[] args) {\n    try \n{\n      Searcher searcher = new IndexSearcher(\"/test/index\");\n      Analyzer analyzer = new StandardAnalyzer();\n\n      QueryParser qp=new QueryParser(\"desc\", new StandardAnalyzer());\n//      Query query1=qp.parse(\"(type:stockSingle) test\");\n//      Query query2=qp.parse(\"type:stockSingle and test\");\n      Query query1=QueryParser.parse(\"type:stockItem AND desc:test\", \"desc\", \nnew StandardAnalyzer());\n      Query query2=QueryParser.parse(\"type:stockItem and desc:test\", \"desc\", \nnew StandardAnalyzer());\n\n      Hits hits = searcher.search(query1);\n      System.out.println(\"search using AND: \"+hits.length() + \" total matching \ndocuments\");\n\n      hits = searcher.search(query2);\n      System.out.println(\"search using and: \"+hits.length() + \" total matching \ndocuments\");\n\n      searcher.close();\n    }\n catch (Exception e) \n{\n      System.out.println(\" caught a \" + e.getClass() +\n                         \"\\n with message: \" + e.getMessage());\n    }\n  }\n} ",
            "author": "Fred",
            "id": "comment-12321877"
        },
        {
            "date": "2004-09-30T05:11:39+0000",
            "content": "\"and\" is just a word (often a stopword), \"AND\" is an operator. I don't \nconsider that a bug.  ",
            "author": "Daniel Naber",
            "id": "comment-12321878"
        },
        {
            "date": "2004-09-30T07:43:49+0000",
            "content": "The result running SearchItems is listed below. Why search \nquery \"type:stockSingle AND desc:test\" returns 0?\n\n\nsearch using AND: 0 total matching documents\nsearch using and: 3 total matching documents ",
            "author": "Fred",
            "id": "comment-12321879"
        },
        {
            "date": "2004-09-30T15:10:28+0000",
            "content": "You index \"stockSingle\" but search for \"stockItem\", that won't give any hits. Also, you \nshould probably not use StandardAnalyzer to search on Keyword fields. Furthermore, \nyou only create one Document object (not three). \n ",
            "author": "Daniel Naber",
            "id": "comment-12321880"
        },
        {
            "date": "2004-10-01T05:41:11+0000",
            "content": "Thanks Daniel. I fixed the mistakes you mentioned, and my problem comes to \nthis. If I used Field.Keyword to store \"type:stockSingle\", I can not find the \ndocument using query \"type:stockSingle AND test\"; If I use Field.Text to \nstore \"type:stockSingle\", I can find the document!\n\nThe Lucene document says the Keyword is index, why can not I search it? ",
            "author": "Fred",
            "id": "comment-12321881"
        },
        {
            "date": "2004-10-01T13:20:09+0000",
            "content": "Fred, feel free to post the code which shows the problem to the user list.  ",
            "author": "Daniel Naber",
            "id": "comment-12321882"
        },
        {
            "date": "2004-10-06T16:53:37+0000",
            "content": "Daniel, do I just post message to lucene-user@jakarta.apache.org?\n\nRegards\nFred ",
            "author": "Fred",
            "id": "comment-12321883"
        },
        {
            "date": "2004-10-06T18:49:08+0000",
            "content": "Yes (you need to be subscribed to post I think). \n ",
            "author": "Daniel Naber",
            "id": "comment-12321884"
        }
    ]
}