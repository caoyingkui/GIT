{
    "id": "LUCENE-6601",
    "title": "Change FilteredQuery.FilterStrategy to use the two-phase iteration API",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Task"
    },
    "description": "We could change FilterStrategy so that instead of being a factory of scorers, it would just rewrite filters in such a way that they can decide which of the iterator or random-access API should be used.",
    "attachments": {
        "LUCENE-6601.patch": "https://issues.apache.org/jira/secure/attachment/12741607/LUCENE-6601.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14599383",
            "author": "Adrien Grand",
            "date": "2015-06-24T13:14:51+0000",
            "content": "Here is a patch against 5.x:\n\n\tFilteredQuery always rewrites to a BooleanQuery\n\tFilterStrategy was changed to have a single method that rewrites the filter to a wrapper that can decide to either use the iterator API or the random-access API to implement the scorer\n\tQUERY_FIRST_FILTER_STRATEGY and LEAP_FROG_QUERY_FIRST_STRATEGY are now the same thing and use the iterator API, which one is iterated first depends on the cost API\n\tQUERY_FIRST_FILTER_STRATEGY applies the filter as an approximation\n\tRANDOM_ACCESS_FILTER_STRATEGY applies cheap filters using the iterator API. However a change is that costly filters are now applied as an approximation instead of acceptDocs. If the query is a simple term query, this doesn't make any difference, but in case of more sophisticated queries, Lucene will now execute the \"cheap\" components of the query before the filter.\n\n\n\nThis way FilteredQuery does not use acceptDocs anymore, which means we could backport LUCENE-6553 to 5.x. "
        },
        {
            "id": "comment-14601140",
            "author": "ASF subversion and git services",
            "date": "2015-06-25T13:19:13+0000",
            "content": "Commit 1687514 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1687514 ]\n\nLUCENE-6601: Make FilteredQuery.FilterStrategy leverage the two-phase iteration API instead of the acceptDocs parameter of the Scorer API. "
        },
        {
            "id": "comment-14601150",
            "author": "ASF subversion and git services",
            "date": "2015-06-25T13:23:52+0000",
            "content": "Commit 1687515 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1687515 ]\n\nLUCENE-6601: Backport CHANGES entries to trunk. "
        },
        {
            "id": "comment-14601392",
            "author": "Joel Bernstein",
            "date": "2015-06-25T15:42:42+0000",
            "content": "I believe this ticket caused this test failure:\n\nBuild: http://jenkins.thetaphi.de/job/Lucene-Solr-5.x-Linux/13026/\nJava: 32bit/jdk1.9.0-ea-b60 -server -XX:+UseSerialGC\n\n1 tests failed.\nFAILED:  org.apache.solr.search.TestHashQParserPlugin.testHashPartition\n\nError Message:\nQuery  does not implement createWeight\n\nStack Trace:\njava.lang.UnsupportedOperationException: Query  does not implement createWeight\n        at __randomizedtesting.SeedInfo.seed([ABA75E60C74B5463:7A1A7F85FC21ED08]:0)\n        at org.apache.lucene.search.Query.createWeight(Query.java:79)\n        at org.apache.lucene.search.IndexSearcher.createWeight(IndexSearcher.java:851)\n        at org.apache.lucene.search.ConstantScoreQuery.createWeight(ConstantScoreQuery.java:117)\n        at org.apache.solr.search.HashQParserPlugin$HashQuery.createWeight(HashQParserPlugin.java:151)\n\n\n\n\n ant test  -Dtestcase=TestHashQParserPlugin -Dtests.method=testHashPartition -Dtests.seed=3CDD0F5BDDF9D8B3 -Dtests.slow=true -Dtests.locale=iw_IL -Dtests.timezone=Pacific/Johnston -Dtests.asserts=true -Dtests.file.encoding=UTF-8 "
        },
        {
            "id": "comment-14601415",
            "author": "Joel Bernstein",
            "date": "2015-06-25T15:50:42+0000",
            "content": "The failure is due to the removal of the createWeight method from the Filter class.\n\nI'll need to find a different way to implement:\nat org.apache.solr.search.HashQParserPlugin$HashQuery.createWeight(HashQParserPlugin.java:151) "
        },
        {
            "id": "comment-14601428",
            "author": "Adrien Grand",
            "date": "2015-06-25T15:57:28+0000",
            "content": "The contract of the Query API is that you first need to call rewrite as long as rewrite returns a different query (see IndexSearcher.rewrite), and this will give you a Query that supports createWeight. So in this particular case, I think we just need to make sure to call rewrite first? I already committed such a change and it makes the test pass, please let me know if it somehow changes the behaviour of this HashQParser in an undesired way? "
        },
        {
            "id": "comment-14601453",
            "author": "Joel Bernstein",
            "date": "2015-06-25T16:13:02+0000",
            "content": "Ok, thanks for the explanation and fix. I'll make sure to call rewrite before createWeight in the future. "
        },
        {
            "id": "comment-14713145",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:54+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}