{
    "id": "SOLR-8474",
    "title": "Test Framework for functional testing Angular UI",
    "details": {
        "components": [
            "Admin UI"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.4",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "The Solr UI has no tests. This is less than ideal. This ticket is aimed at facilitating discussion around such a test framework for functional/end-to-end testing components within the Angular UI.\n\nHaving a unit testing framework will encourage developers of the UI to make more modular, and thus hopefully cleaner, code, as well as providing a means to identify regressions.\n\nFor functional testing, I am proposing a Karma/Protractor/Jasmine combination.\n\nKarma runs the tests, as with the Unit testing framework, Protractor interacts with the pages effectively via a programmable browser (click here, enter there, confirm that) whilst Jasmine provides a BDD style syntax for constructing the tests themselves.\n\nMy proposal is that, for functional tests, we will fire up a full Solr server via the existing test framework, then invoke Karma/Protractor within that context. That will mean that the functional tests will be interacting with a real Solr instance, presumably with real data in it.\n\nKarma/Protractor/Jasmine can be installed by npm, which would become a dependency for the Lucene/Solr build process, as for SOLR-8473.\n\nAs with SOLR-8473, there will be a dependency on either Chrome (and a UI such as X) or a UI-less browser such as PhantomJS.",
    "attachments": {
        "SOLR-8474.zip": "https://issues.apache.org/jira/secure/attachment/12780192/SOLR-8474.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-01T15:57:37+0000",
            "author": "Upayavira",
            "content": "Attaching first pass at test frameworks for Admin UI. This patch includes both unit test and functional test code, with a sample test for each.\n\nUnpack this zip into the /solr dir, so that the files end up in /solr/webapp/.\n\nThe tests make use of npm to execute. Make sure that you have the latest NodeJS installed (from the node website, not from brew or apt), then:\n\n\n\tfor unit tests: npm test\n\tfor functional tests: npm run protractor\n\n\n\nThis will create an instance of Chrome within which to execute the tests.\n\nNote that the functional tests assume a core/collection called \"index\" which has a field type of 'text_en'. ",
            "id": "comment-15076321"
        },
        {
            "date": "2016-01-01T16:20:29+0000",
            "author": "Upayavira",
            "content": "The above functional test makes assumptions about the server that is in place when the test is run. For example, some tests may test the core admin UI, and others the collections API, and thus will require different Solr servers running.\n\nI propose, for now, to create two tests - a SolrCloudAdminUITest and a StandaloneSolrAdminUITest - and see whether they can manage with a single solrconfig/schema pair between them - either an existing one, or a special set used just for these tests. If the tests require collections/data, they can set that up from the Javascript code directly.\n\nSomehow (to be decided/explored) I will have these two Java tests call specific subsets of the Javascript functional tests (the cloud and non-cloud specific ones).\n ",
            "id": "comment-15076326"
        },
        {
            "date": "2016-01-05T05:22:56+0000",
            "author": "David Smiley",
            "content": "Why must NodeJS be installed from the official site and not brew or apt? ",
            "id": "comment-15082402"
        },
        {
            "date": "2016-01-05T06:05:04+0000",
            "author": "Upayavira",
            "content": "Because apt/brew have an older version, and the Protractor tool requires Node 4.0+ as i understand it. I don't immediately recall the specific versions, but installing the official version from the node site is what made these frameworks all start working. ",
            "id": "comment-15082454"
        }
    ]
}