{
    "id": "LUCENE-6811",
    "title": "AnalyzingInfixSuggester cannot be used in more than one thread",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "5.3",
        "components": [
            "modules/other"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Currently AnalyzingInfixSuggester always opens an index writer, even if the suggester will be used entirely in read-only mode. I was trying to serve suggestions out of the same index in a multithreaded setup, but I could only create one suggester per index per process because of this design.\n\nI've created a GitHub project to demonstrate the bug: https://github.com/lukhnos/lucene-analyzing-infix-suggester-bug\n\nTo run the demo:\n\n\n./gradlew build\njava -jar build/libs/lucene-analyzing-infix-suggester-bug.jar\n\n\n\nThe exception reads:\n\n\nException in thread \"Thread-1\" java.lang.RuntimeException: org.apache.lucene.store.LockObtainFailedException: Lock held by this virtual machine: <INDEX DIR>/write.lock\n    at org.lukhnos.lucenestudy.AnalyzingInfixSuggesterBug$1SuggestReader.run(AnalyzingInfixSuggesterBug.java:65)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.lucene.store.LockObtainFailedException: Lock held by this virtual machine: <INDEX DIR>/write.lock\n    at org.apache.lucene.store.NativeFSLockFactory.obtainFSLock(NativeFSLockFactory.java:127)\n    at org.apache.lucene.store.FSLockFactory.obtainLock(FSLockFactory.java:41)\n    at org.apache.lucene.store.BaseDirectory.obtainLock(BaseDirectory.java:45)\n    at org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:775)\n    at org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.<init>(AnalyzingInfixSuggester.java:251)\n    at org.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.<init>(AnalyzingInfixSuggester.java:163)\n    at org.lukhnos.lucenestudy.AnalyzingInfixSuggesterBug$1SuggestReader.run(AnalyzingInfixSuggesterBug.java:51)\n    ... 1 more\n\n\n\nTo work around this problem, I'm currently using my own modified \"read only\" AnalyzingInfixSuggester, in which I commented out the index writer creation code in the constructor. Then, in the lookup method, I also commented out the part where we get an EarlyTerminatingSortingCollector out of the index writer, so that only a TopFieldCollector is used.\n\nI was wondering if a read-only mode can be added to AnalyzingInfixSuggester, or at least the contract of getIndexWriterConfig can be changed \u2013 since one will have to subclass to use a different index writer config anyway \u2013 such that if one returns null in getIndexWriterConfig, the suggester will operate in read-only mode, and so no index writer is created. Of course an error will have to be thrown if any build or update methods are called in such mode.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14902031",
            "author": "Varun Thacker",
            "date": "2015-09-22T06:26:29+0000",
            "content": "Hi Lukhnos Liu ,\n\nThe lookup implementation is thread safe. So you should reuse the suggester across threads. "
        },
        {
            "id": "comment-14902740",
            "author": "Lukhnos Liu",
            "date": "2015-09-22T14:48:07+0000",
            "content": "Hi Varun Thacker,\n\nThanks for the reply. My use case involves having different threads serving a number of different suggestion indices, so threads may need to acquire/release different suggesters. Does that mean that I should look into org.apache.lucene.search.ReferenceManager<G> to manage such reference-counted resources? "
        },
        {
            "id": "comment-15182595",
            "author": "Lukhnos Liu",
            "date": "2016-03-07T05:17:14+0000",
            "content": "According to Varun's comment the issue can be addressed by reusing the thread-safe suggester. "
        }
    ]
}