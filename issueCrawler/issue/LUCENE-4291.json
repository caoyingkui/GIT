{
    "id": "LUCENE-4291",
    "title": "consider reducing jflex buffer sizes",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Task",
        "fix_versions": [
            "4.0-BETA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spinoff from SOLR-3684.\n\nMost lucene tokenizers have some buffer size, e.g. in CharTokenizer/ICUTokenizer its char[4096].\n\nBut the jflex tokenizers use char[16384] by default, which seems overkill. I'm not sure we really see any performance bonus by having such a huge buffer size as a default.\n\nThere is a jflex parameter to set this: I think we should consider reducing it.\n\nIn a configuration like solr, tokenizers are reused per-thread-per-field,\nso these can easily stack up in RAM.\n\nAdditionally CharFilters are not reused so the configuration in e.g.\nHtmlStripCharFilter might not be great since its per-document garbage.",
    "attachments": {
        "LUCENE-4291.patch": "https://issues.apache.org/jira/secure/attachment/12539313/LUCENE-4291.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-08-06T15:33:48+0000",
            "content": "+1.  \n\nFor tokenizers, the buffer needs to be able to hold a token (and its trailing context, if lookahead is used), but nothing more.  16k tokens are likely extremely rare.  4k seems reasonable to me - it's still way bigger than most people are likely to hit over normal text input.\n\nHTMLStripCharFilter is a bit different, since it buffers HTML constructs rather than tokens.  In the face of malformed input (e.g. an opening angle bracket '<' with no closing angle bracket '>'), the scanner might buffer the entire remaining input.  In contrast, LegacyHTMLStripCharFilter, the pre-JFlex implementation, limits this kind of buffering, to 8k max chars IIRC. ",
            "author": "Steve Rowe",
            "id": "comment-13429198"
        },
        {
            "date": "2012-08-06T15:42:23+0000",
            "content": "\nFor tokenizers, the buffer needs to be able to hold a token (and its trailing context, if lookahead is used), but nothing more. 16k tokens are likely extremely rare. 4k seems reasonable to me - it's still way bigger than most people are likely to hit over normal text input.\n\nYes, I think its reasonable too: especially since maxTokenLength is 255 by default.\n\n\nHTMLStripCharFilter is a bit different, since it buffers HTML constructs rather than tokens. In the face of malformed input (e.g. an opening angle bracket '<' with no closing angle bracket '>'), the scanner might buffer the entire remaining input. In contrast, LegacyHTMLStripCharFilter, the pre-JFlex implementation, limits this kind of buffering, to 8k max chars IIRC.\n\nOK, I can leave this one alone. We can revisit if we can make CharFilters reusable (not simple to do cleanly today). Its not as much of an issue since nothing is hanging on to it.\n\nI'll work up a patch. ",
            "author": "Robert Muir",
            "id": "comment-13429203"
        },
        {
            "date": "2012-08-06T16:00:47+0000",
            "content": "Here's a patch: with regenerations.\n\nNote that, by default 'ant jflex' gave me an error for all the includes (as of jflex r612).\n\nSo thats why you see changes like:\n\n-%include src/java/org/apache/lucene/analysis/charfilter/HTMLCharacterEntities.jflex\n+%include HTMLCharacterEntities.jflex\n\n\n\nIt seems jflex now expects these file paths to be relative to the input file? ",
            "author": "Robert Muir",
            "id": "comment-13429213"
        },
        {
            "date": "2012-08-06T16:08:26+0000",
            "content": "It seems jflex now expects these file paths to be relative to the input file?\n\nGerwin Klein recently fixed JFlex issue 3420809, with exactly this change. ",
            "author": "Steve Rowe",
            "id": "comment-13429221"
        },
        {
            "date": "2012-08-06T16:21:29+0000",
            "content": "OK thanks, that explains it! I'd like to commit this if there are no objections. ",
            "author": "Robert Muir",
            "id": "comment-13429231"
        },
        {
            "date": "2012-08-06T16:27:18+0000",
            "content": "I'd like to commit this if there are no objections.\n\n+1, patch looks good. ",
            "author": "Steve Rowe",
            "id": "comment-13429234"
        }
    ]
}