{
    "id": "SOLR-6203",
    "title": "cast exception while searching with sort function and result grouping",
    "details": {
        "affect_versions": "4.7,                                            4.8",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "After upgrading from 4.5.1 to 4.7+, a schema including a \"*\" dynamic field as text gets a cast exception when using a sort function and result grouping.  \n\nRepro (with example config):\n\n\tAdd \"*\" dynamic field as a TextField, eg:\n\n<dynamicField name=\"*\" type=\"text_general\" multiValued=\"true\" />\n\n\n\tCreate  sharded collection\n\ncurl 'http://localhost:8983/solr/admin/collections?action=CREATE&name=test&numShards=2&maxShardsPerNode=2'\n\n\n\tAdd example docs (query must have some results)\n\tSubmit query which sorts on a function result and uses result grouping:\n\n{\n  \"responseHeader\": {\n    \"status\": 500,\n    \"QTime\": 50,\n    \"params\": {\n      \"sort\": \"sqrt(popularity) desc\",\n      \"indent\": \"true\",\n      \"q\": \"*:*\",\n      \"_\": \"1403709010008\",\n      \"group.field\": \"manu\",\n      \"group\": \"true\",\n      \"wt\": \"json\"\n    }\n  },\n  \"error\": {\n    \"msg\": \"java.lang.Double cannot be cast to org.apache.lucene.util.BytesRef\",\n    \"code\": 500\n  }\n}\n\n\n\n\n\nSource exception from log:\n\nERROR - 2014-06-25 08:10:10.055; org.apache.solr.common.SolrException; java.lang.ClassCastException: java.lang.Double cannot be cast to org.apache.lucene.util.BytesRef\n    at org.apache.solr.schema.FieldType.marshalStringSortValue(FieldType.java:981)\n    at org.apache.solr.schema.TextField.marshalSortValue(TextField.java:176)\n    at org.apache.solr.search.grouping.distributed.shardresultserializer.SearchGroupsResultTransformer.serializeSearchGroup(SearchGroupsResultTransformer.java:125)\n    at org.apache.solr.search.grouping.distributed.shardresultserializer.SearchGroupsResultTransformer.transform(SearchGroupsResultTransformer.java:65)\n    at org.apache.solr.search.grouping.distributed.shardresultserializer.SearchGroupsResultTransformer.transform(SearchGroupsResultTransformer.java:43)\n    at org.apache.solr.search.grouping.CommandHandler.processResult(CommandHandler.java:193)\n    at org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:340)\n    at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:218)\n    at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n  ...\n\n\n\nIt looks like serializeSearchGroup is matching the sort expression as the \"*\" dynamic field, which is a TextField in the repro.",
    "attachments": {
        "README": "https://issues.apache.org/jira/secure/attachment/12764794/README",
        "SOLR-6203.patch": "https://issues.apache.org/jira/secure/attachment/12764795/SOLR-6203.patch",
        "SOLR-6203-unittest.patch": "https://issues.apache.org/jira/secure/attachment/12652515/SOLR-6203-unittest.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Nate Dire",
            "id": "comment-14044167",
            "date": "2014-06-25T23:14:14+0000",
            "content": "Attached a patch with an addition to DistributedQueryComponentCustomSortTest that triggers  the exception. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14059132",
            "date": "2014-07-11T18:21:04+0000",
            "content": "I haven't looked into this, but i remember similar issues were problematic with normal distributed sorting in older versions of Solr, but this should have largely been resolved by SOLR-5354 \u2013 see in particular this comment & subsequent commit...\nhttps://issues.apache.org/jira/browse/SOLR-5354?focusedCommentId=13835891&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13835891\nhttps://svn.apache.org/r1547430\n\n..apparently we're still missing a place in the grouping code that should be looking at SortSpec.getSchemaFields() and isn't. "
        },
        {
            "author": "Judith",
            "id": "comment-14493264",
            "date": "2015-04-13T23:23:36+0000",
            "content": "Hello, has anybody looked into this? I have tried to take Hoss Man's advice, but my tests are still failing. This is my first dive into Solr code and I am only guessing how things fit together. I don't think it's worth posting my code, but here is the list of source files I have stumbled across and modified; if some other files are calling out for modification, please let me know! Thanks in advance for any suggestions.\n\n./solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java\n\n./solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java\n\n./solr/core/src/java/org/apache/solr/search/grouping/distributed/command/SearchGroupsFieldCommand.java\n\n./solr/core/src/java/org/apache/solr/search/grouping/distributed/command/TopGroupsFieldCommand.java\n\n./solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/TopGroupsResultTransformer.java\n\n./solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/SearchGroupsResultTransformer.java\n\n./solr/core/src/java/org/apache/solr/search/grouping/distributed/shardresultserializer/ShardResultTransformer.java\n\n./solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/SearchGroupShardResponseProcessor.java\n\n./solr/core/src/java/org/apache/solr/search/grouping/distributed/responseprocessor/TopGroupsShardResponseProcessor.java\n\n./solr/core/src/java/org/apache/solr/search/grouping/GroupingSpecification.java\n\n./solr/core/src/java/org/apache/solr/search/QParser.java "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-14941441",
            "date": "2015-10-02T17:26:16+0000",
            "content": "Hello, all.  I have created a patch based on Hoss Man's advice.  I added some unit tests and tested in my company's dev environment but have not tested with live traffic.  I will upload the patch along with a README file summarizing the changes.\n\nThis is my first patch; apologies in advance if I am doing something wrong, but please let me know!  \n\nThanks,\nJudith "
        },
        {
            "author": "Judd Krishef",
            "id": "comment-15531054",
            "date": "2016-09-28T22:23:25+0000",
            "content": "Hello, does anybody know if this issue has been resolved in Solr 6.1 or if there is a workaround?\n\nThanks in advance. "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15565762",
            "date": "2016-10-11T15:30:02+0000",
            "content": "Taking a look as part of https://www.meetup.com/New-England-Search-Technologies-NEST-Group/events/233492535/ today. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15565827",
            "date": "2016-10-11T15:57:09+0000",
            "content": "Commit 2bbca4c512ca8a4ec6be167bc11822bc9a6e6113 in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2bbca4c ]\n\n(part of) SOLR-6203: ResponseBuilder.setSortSpec arg name tweak. (Judith Silverman via Christine Poerschke) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15565836",
            "date": "2016-10-11T16:00:41+0000",
            "content": "Commit ca625ea5660b93fa56f4af55bfbf06024d64e184 in lucene-solr's branch refs/heads/branch_6x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ca625ea ]\n\n(part of) SOLR-6203: ResponseBuilder.setSortSpec arg name tweak. (Judith Silverman via Christine Poerschke) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15579056",
            "date": "2016-10-16T01:13:08+0000",
            "content": "Commit a4a314d1602458cd7427b337d32eca60049c72da in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a4a314d ]\n\nSOLR-6203: in QueryComponent rename groupSortStr to sortWithinGroupStr (so that name and meaning match) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15579072",
            "date": "2016-10-16T01:28:20+0000",
            "content": "Commit e87072bc5abb6b7c6f7a6e494d9360814689dffd in lucene-solr's branch refs/heads/branch_6x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e87072b ]\n\nSOLR-6203: in QueryComponent rename groupSortStr to sortWithinGroupStr (so that name and meaning match) "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15585885",
            "date": "2016-10-18T16:19:36+0000",
            "content": "Attaching variant of the original unittest patch using \"id\" instead of \"text\" for the \"group.field\" and with diff taken from the top-level directory. "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15585894",
            "date": "2016-10-18T16:23:12+0000",
            "content": "Hello Nate Dire and Judith Silverman,\n\nThanks for reporting this issue in detail and attaching test case and code change patches.\n\nI started looking at this last week but only now got around to writing comments here, apologies for the delay.\n\n\n\tThe original SOLR-6203-unittest.patch still applies cleanly but running\n\ncd solr/core\nant test -Dtestcase=DistributedQueryComponentCustomSortTest\n\n\ngives\n\n... unexpected docvalues type SORTED_SET for field 'text' (expected=SORTED). Re-index with correct docvalues type. ...\n\n\nerror. I have not looked into the details for that error but simply changing\n\n- ... \"group.field\", \"text\" ...\n+ ... \"group.field\", \"id\" ...\n\n\nin the test patch again produces the java.lang.Double cannot be cast to org.apache.lucene.util.BytesRef exception.\n\n\n\n\n\tThe original SOLR-6203.patch could no longer be applied cleanly, that is of course nothing to worry about though since the patch is over a year old by now.\n\t\n\t\tI have separated out some parts of the patch into the micro commits above and into the linked SOLR-9627 patch.\n\t\tTrying to graft everything from your patch onto the current master branch seemed to work at first but then tests were failing and so i backtracked, to what your README mentions as the first step i.e. storing SortSpecs rather than Sorts in GroupingSpecification. There was also the\nTODO eliminate GroupingSpec's (Group)Offset and (Group)Limit fields and get those values from its SortSpecs.\ncomment in your patch and i pulled that into scope for the SOLR-9660 sub-step because i think it will make the subsequent code changes here easier.\n\t\t\n\t\t\tThe tests for the SOLR-9660 sub-step are still failing, extra pairs of eyes and reviews of the patch are very welcome. The SOLR-9649 discovery is also unexpected and perhaps figuring out the latter will help with fixing the former.\n\t\t\n\t\t\n\t\n\t\n\n "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15607409",
            "date": "2016-10-26T04:47:35+0000",
            "content": "Christine, thanks for taking an interest in SOLR-6203.  I will be happy to lend a pair of eyes but it will take a while for me to remind myself how the patch worked and to catch up with the changes to Solr since 4.10.  I do have some elementary questions about the patch for SOLR-9660 which I will post under that jira.  Thanks again. "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15706695",
            "date": "2016-11-29T22:08:57+0000",
            "content": "Just a quick note for the log here to say that SOLR-9660 and SOLR-9783 have been committed to master, the former includes step (1) from Judith's README file and the latter should help with step (2) i.e. passing around SortSpecs rather than plain Sorts.\n\nI myself at the moment don't have a chunk of time to continue with the next logical part of step (2) but if I had time then I would next go and change signatures where needed (and only where needed) so that the SortSpecs become available where they will be used later (signature changes only for now, actual use would be a subsequent step). And if there's obvious non-trivial code duplication (in the code that will need to be changed later) then I would factor out utility methods to reduce the duplication. In case anyone else wants to pursue the same incremental approach in the meantime, I've started jira/solr-6203 working branch (with one small commit) for which pull requests could be opened or alternatively if preferred then i'd be happy to review any new patch files attached to this ticket. "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15709543",
            "date": "2016-11-30T19:38:08+0000",
            "content": "Thanks for the update, Christine.  I am happy to pursue your incremental approach.  I have made a patch to your branch in which I uncommented a couple of your signature changes and modified calls to the affected methods to use the new signatures.  I also took this opportunity to  start standardizing field and method names related to the field variously known throughout the codebase as \"sortWithinGroup\" and \"withinGroupSort\".  The latter fits better with related field and method names, and since we are already deprecating GroupingSpecification's accessors for Sorts in favor of accessors of  SortSpecs, this seems to me like a good time to make the change.  I renamed the new public accessors and also renamed private fields in all the files I was already modifying for this commit.  If you approve of this change, I will rename private fields in other files.  In the meantime, I will keep going in the direction you indicated.                           \nThanks,        \nJudith  "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15710884",
            "date": "2016-12-01T04:53:52+0000",
            "content": "Hi, in tonight's patch I finished uncommenting your new signatures and made the changes necessary to get the code to compile and the existing tests to pass. "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15713080",
            "date": "2016-12-01T21:04:54+0000",
            "content": "Hi Judith, thanks for your patch(es). I've not had any time yet to take a closer look but have gone and applied the latest patch to the working branch plus two comments/replies to two of your comments/questions. Hope that helps. "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15715697",
            "date": "2016-12-02T17:16:30+0000",
            "content": "Hi, Christine, thanks for updating the branch and replying to my           questions.  Re the one about rb.getSortSpec() in\nSearchGroupShardResponseProcessor.java:  it's already confusing to this newbie that the master code base has two Sorts (rb.getSortSpec().getSort() and rb.getGroupingSpec().getGroupSort()) in play at the same time in a grouped search (to say nothing of the within-group Sort), and by the time we're finished with this branch we will have not only two Sorts but two full-fledged SortSpecs.  If we can do something at this early stage to make it clear which is to be used for what, or to consolidate them, I'm in favor. \nThanks,\nJudith "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15716061",
            "date": "2016-12-02T19:40:13+0000",
            "content": "Hi Judith.\n\n...  it's already confusing ... that the master code base has two Sorts (rb.getSortSpec().getSort() and rb.getGroupingSpec().getGroupSort()) in play at the same time in a grouped search (to say nothing of the within-group Sort) ...\n\nYes, that's a very fair point and looking beyond the scope of this bug fix ticket here it would be good if confusing code can be made less confusing.\n\n... the one about rb.getSortSpec() in SearchGroupShardResponseProcessor.java: ...\n\n\n\tActually it's then not just about SearchGroupShardResponseProcessor (SGSRP) really but we can question not just why SGSRP uses both rb.getGroupingSpec().getGroupSort[Spec]() and rb.getSortSpec() but why anything uses both rb.getGroupingSpec().getGroupSortSpec().get...() and rb.getSortSpec().get...() - and from a quick look around all the places concerned have access to rb and so have the possibility of using either.\n\n\n\n\n\tOkay, then the next logical question is \"Is there a difference between the two?\" and a very cursory lookaround finds QueryComponent.java and\n\nGroupingSpecification groupingSpec = new GroupingSpecification();\nrb.setGroupingSpec(groupingSpec);\n\nfinal SortSpec sortSpec = rb.getSortSpec();\n\n//TODO: move weighting of sort\nfinal SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n...\ngroupingSpec.setGroupSortSpec(groupSortSpec);\n\n\n\n\n\n\n\tSo based on that it seems that:\n\t\n\t\tthe \"TODO: move weighting of sort\" could help get rid of GroupingSpecification's groupSort[Spec]\n\t\tsince SearchGroupShardResponseProcessor.process uses (as you say) only the offset and count part of ss the\n\n-    SortSpec ss = rb.getSortSpec();\n-    Sort groupSort = rb.getGroupingSpec().getGroupSort();\n+    SortSpec groupSortSpec = rb.getGroupingSpec().getGroupSortSpec();\n\n\nchange you propose should work and be a small step towards making the code less confusing.\n\t\n\t\n\n\n\nCode reading and 'thinking aloud' done - does that kind of make sense?\n\nPS: I am not suggesting we get rid of GroupingSpecification's groupSort[Spec] here/at this time nor to pursue the \"//TODO: move weighting of sort\" here/at this time. But both would be worthwhile and yes here at this time we can stop using rb.getSortSpec() in SearchGroupShardResponseProcessor.process as you suggested.\n\nHave a good weekend!\n\nChristine "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15716091",
            "date": "2016-12-02T19:49:35+0000",
            "content": "Created SOLR-9821 to separately (at some point) pursue the \"QueryComponent.prepareGrouping: //TODO: move weighting of sort\" mentioned above. "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15716678",
            "date": "2016-12-02T22:06:45+0000",
            "content": "Hi, yes, that does indeed make sense, not that I have a clear idea of what \"weighting of sort\" does.  And on that topic:\n\nI've had more time this week to work on this jira than I will have in the foreseeable future, so I'm forging ahead rather than sensibly waiting for your comments.  I started calling new utility functions that make use of SortSpec's SchemaFields, but my updated unit tests kept failing with the same old \"java.lang.Double cannot be cast to org.apache.lucene.util.BytesRef\" error, and I got to wondering about the call to schema.getFileOrNull() in the new implWeightSortSpec() function from the SOLR-9660 patch.  That function allows the dynamic '*' field to lay claim to schema fields which SortSpecParsing carefully protected from it, just as it does when called by the XXXResultTransformer functions we are gearing up to modify.\n\nI have only the vaguest understanding of what the weightSort()/rewrite()/createWeight() functions are all about.  Do they actually affect which SchemaField a SortField should be associated to?  I tweaked implWeightSortSpec() to leave SchemaFields alone except in the case that nullEquivalent kicks in, and all unit tests (including new ones testing the use of the new utility functions) now pass.  For now, I'm posting a patch to our branch containing just the tweak to implWSS() and a little cleanup (removing my questions and your replies).      \n\nHave a good weekend yourself!  Thanks,\nJudith "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15723659",
            "date": "2016-12-05T23:04:35+0000",
            "content": "Hi, Christine.  I'm posting what I have so far; please review at your    \nconvenience.  This afternoon's patch includes the changes from the       \npatch of Dec. 3.  I added calls to two new utility functions (which      \nturned out to be identical, so if you approve them, they should be       \ncombined and put in a good place) and copied over unit tests from last   \nyear's patch, which pass.                                                \n\nCheers,                                                                  \nJudith "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15773321",
            "date": "2016-12-23T17:24:01+0000",
            "content": "... since we are already deprecating GroupingSpecification's accessors for Sorts in favor of accessors of SortSpecs, this seems to me like a good time to make the change. I renamed the new public accessors ...\n\nhttps://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bc8936a just added the rename under the SOLR-9660 ticket which as you say was already concerned with those accessors. "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15773348",
            "date": "2016-12-23T17:39:48+0000",
            "content": "... new utility functions (which turned out to be identical ... combined and put in a good place ...\n\nSOLR-9890 proposes a combined version in a new place. What do you think? "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15773821",
            "date": "2016-12-23T22:41:17+0000",
            "content": "Hi, I see, you are separating the refactoring from the bug fix.  I like the new name and the new place. "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15881896",
            "date": "2017-02-24T03:59:17+0000",
            "content": "Hi, Christine, are there changes you would like me to make to the patch dated 05Dec16? As I recall, your commit of 23Dec16 took us part of the way toward that patch. \nDo my concerns about SOLR_9660 (02Dec16 above) make sense?\nThanks,\nJudith "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15883546",
            "date": "2017-02-24T21:25:40+0000",
            "content": "Hi Judith,\n\nThanks for following up on this ticket!\n\nI've tried to remind myself about where we had left things by applying your Dec5th patch to the jira/solr-6203 working branch and then merging in the master branch changes including the SOLR-9890 piece. After resolving the merges \"it compiles\" but i haven't run any tests or anything.\n\nFrom your Dec 2nd comments:\n\n... I got to wondering about the call to schema.getFileOrNull() in the new implWeightSortSpec() function from the SOLR-9660 patch. That function allows the dynamic '*' field to lay claim to schema fields which SortSpecParsing carefully protected from it, just as it does when called by the XXXResultTransformer functions we are gearing up to modify. ...\n\nMerging the master branch into the working branch didn't help too much with jogging my memory, but this sounds like a very good lead.\n\nThe schema.getFileOrNull() let's the dynamic '*' field claim 'sqrt(popularity) desc' (or is it only 'popularity'?) from the sort whereas in SortSpecParsing there's the // short circuit test for a really simple field name ... // let's try it as a function instead logic which protects the sort from being misinterpreted as a '*' dynamic field.\n\nThat is how I read your comment combined with the code, are we on the same page on this point? Assuming we are, and I think we are, then yes your weightSort/rewrite/createWeight and implWeightSortSpec observations and questions make sense to me.\n\nSo, following in that direction, the 'solution under consideration' is then:\n\n\tpass SortSpec rather than just Sort around (much of that already done via linked preparatory refactors)\n\thave the ShardResultTransformer classes use the SortSpec's SchemaField objects because\n\t\n\t\tthe Sort's SortField requires use of IndexSchema.getFieldOrNull for conversion into a SchemaField object\n\t\tIndexSchema.getFieldOrNull does not protect the sort function from being misinterpreted as a '*' dynamic field\n\t\tthe SortSpec's SchemaField objects require no conversion\n\t\tthe SortSpec's SchemaField objects originally came from SortSpecParsing which afforded protection from the '*' dynamic field\n\t\n\t\n\n\n\nDoes that summary make sense so far? Assuming it does, then on to the 'complication and remaining questions':\n\n\tQueryComponent didn't just use the Sort 'as it is' but it does this (not fully understood by us) 'weighting of sort' thing\n\t'weighting of sort' is a SolrIndexSearcher thing\n\tas part of the SOLR-9660 refactor QueryComponent doing 'weighting of sort' became 'weighting of sort spec' which is still a SolrIndexSearcher thing\n\t'weighting of sort spec' needs to consider the SchemaField objects in the sort spec\n\t\n\t\tquestion 1: is it fair to assume that the SchemaField objects of the original and the rewritten/weighted sort match?\n\t\tquestion 2: if rewriting/weighting turns the original sort into a null sort, what should the SchemaField objects be for the rewritten/weighted sort spec?\n\t\n\t\n\n\n\nRight, okay, that was a lot of writing, thank you for reading this far \n\nDoes it sort of (no pun intended) help sum up where we think we are here?\n\nIf it does then the next step (not for today) will be to find answers to the two open questions and decide on how to proceed with the patch/working branch.\n\nHave a nice weekend!\n\nChristine "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15884541",
            "date": "2017-02-26T05:10:25+0000",
            "content": "Hi, Christine, thanks for the quick response.                                                                                                                   \n\nThe code in QueryComponent.java which calls weightSort() in the                                                                    \nnon-grouped case (as opposed to the grouped case we are trying to fix)\nproceeds to iterate through sortSpec.getSchemaFields()                                                                        without modifying that (immutable) list of SchemaFields at all:\n\n       ...\n      SortSpec sortSpec = rb.getSortSpec();                                                                                        \n      Sort sort = searcher.weightSort(sortSpec.getSort());                                                                         \n\n      SortField[] sortFields = sort==null ? new SortField[]\n{SortField.FIELD_SCORE}\n : sort.getSort();                               \n      List<SchemaField> schemaFields = sortSpec.getSchemaFields();                                                                 \n\n      for (int fld = 0; fld < schemaFields.size(); fld++) {                                                                        \n             SchemaField schemaField = schemaFields.get(fld);                                                                           \n             FieldType ft = null == schemaField? null : schemaField.getType();  \n        ...\n\n\nOn the basis of that code, I would tentatively answer your questions as follows:                                                                \n\nQuestion #1: yes                                                                                                                   \nQuestion #2: the original SchemaField object(s) (I suspect that rewrite/weight does                                                                   not turn a non-null into a null)                                                                       \n\nThe SortSpecParser adds a null to the SchemaFields list for any                                                                    \nSortField that doesn't correspond to a plain old field,                                                                            \ni.e. SortFields corresponding to ValueSource and FunctionQueries---                                                                \nexactly the ones the weightSort()/rewrite()/createWeight() business is used to                                                                    \nsupport, if I understand correctly (cf. SOLR-2533). (Sorts by score                                                                \nand lucene docid also get null schemaFields.)                                                                                      \n\nMy understanding is that any SortField actually modified by rewrite() is                                                               \nassociated to a null SchemaField to begin with, and that it would be                                                                    \ninappropriate to replace that null with something else when we call                                                                 rewrite() on the SortField.  Our new utility functions will see that null\nand refrain from marshalling/unmarshalling.\n\nCheers,\nJudith "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15940486",
            "date": "2017-03-24T14:51:56+0000",
            "content": "Hi, Christine.  Last weekend I merged from master through commit                                              \ne7d9db9d6c4dccc158b52d535 to my local copy of our branch and ran 'ant                                         \nclean test' twice.  There were two failures the first time and none the                                       \nsecond.  Here are the tests that failed:                                                                      \n\n   org.apache.solr.cloud.CollectionsAPIDistributedZkTest.testTooManyReplicas                                  \n   org.apache.solr.cloud.OnlyLeaderIndexesTest.test                                                           \n\nThe two tests modified on our branch, TestDistributedGrouping and                                             \nDistributedQueryComponentCustomSortTest, both passed both times.  I am                                        \nattaching a patch for the second of these in which I remove some                                              \nduplicated test cases and add some new ones.                                                                  \n\nIf you are holding out for an authoritative answer to your questions                                          \nfrom 24Feb17, is there someone we could ask?                                                                  \n\nThanks,                                                                                                       \nJudith          "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15970458",
            "date": "2017-04-16T17:47:42+0000",
            "content": "Hi, Christine.  I merged from master though commit 00f0c30 to my fork of the jira/solr-6203 branch, resolved a conflict in TopGroupsFieldCommand.java, and committed. Unit tests all pass, including those added in previous commits to test the fix of the bug which is the subject of this jira.\nI closed the outstanding pull request and opened another.  Is there anything else I can do to help move things along?\nThanks,\nJudith "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15971773",
            "date": "2017-04-17T22:46:10+0000",
            "content": "Today's patch is based on commit 66715a476 to master in the lucene-solr repo (Mon Apr 17 11:08:53 2017).  All unit tests pass, including those added in this patch which test the functionality this patch is designed to fix. "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15972725",
            "date": "2017-04-18T13:57:50+0000",
            "content": "The restriction of yesterday's patch to SolrIndexSearcher.java is independent of the rest of the patch and addresses a defect introduced in SOLR-9660 (discussed above).  That defect affects the value of an class member which is not used in the present master, but it breaks unit tests on the jira/solr-6203 branch if that branch's change to SolrIndexSearcher.java is reverted. "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15973156",
            "date": "2017-04-18T17:50:22+0000",
            "content": "Hi Judith, thanks for merging master into working branch and resolving the merge conflict. Sorry I'd gone rather silent here (and otherwise busy elsewhere). Alright, let's see if we can wrap this ticket up here soon, git branches will definitely help I think \n\nHow about this:\n\n\tLet's switch to your https://github.com/jitka18/lucene-solr/tree/jira/solr-6203 fork of the apache:jira/solr-6203 branch as the definitive working branch.\n\t\n\t\tNo need to attach further .patch files to this ticket here (we'll just do one 'final' one with the final fix in the end).\n\t\tNo further updates to the apache:jira/solr-6203 working branch (would it be clearer to delete it right away now or only in the end?).\n\t\n\t\n\n\n\n\n\tNext step:\n\t\n\t\tCould you merge the latest master into the jitka18:jira/solr-6203 and open a pull request into apache:master - this will help us 'see' what the changes overall are.\n\t\tI will add another rename change to SOLR-10394 to help us tell apart actual changes from mostly-rename changes.\n\t\tI will take a look at and run the tests.\n\t\n\t\n\n "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-15980240",
            "date": "2017-04-23T03:21:33+0000",
            "content": "Hi, Christine.  I consolidated the DistributedQueryComponentCustomSortTest tests as you suggested and updated my pull request to your branch.\nCheers,\nJudith "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-16004618",
            "date": "2017-05-10T12:37:35+0000",
            "content": "Hi, Christine.  I have accepted your pull request to my branch, thanks.\nJudith "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-16005038",
            "date": "2017-05-10T17:13:07+0000",
            "content": "Thanks Judith! Returning to this, the ss vs. groupSortSpec refactor thing just tripped me up again, so have gone and split it out to SOLR-10659 for clarity. Hope that makes sense. "
        },
        {
            "author": "Judith Silverman",
            "id": "comment-16005412",
            "date": "2017-05-10T21:01:09+0000",
            "content": "Short and sweet.\nI see from the diff that we still haven't standardized nomenclature in the master branch:\n   \"Sort withinGroupSort = rb.getGroupingSpec().getSortWithinGroup();\"\nI thought you had already split out a patch for that, but I must be thinking of something else.\nThanks,\nJudith "
        },
        {
            "author": "Gavin",
            "id": "comment-16574152",
            "date": "2018-08-09T01:01:41+0000",
            "content": "Move issue from deprecated 'In  Progress' back to 'Open' "
        }
    ]
}