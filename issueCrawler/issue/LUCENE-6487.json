{
    "id": "LUCENE-6487",
    "title": "Add WGS84 capability to geo3d support",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/spatial"
        ],
        "labels": "",
        "fix_versions": [
            "5.3"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "WGS84 compatibility has been requested for geo3d.  This involves working with an ellipsoid rather than a unit sphere.  The general formula for an ellipsoid is:\n\nx^2/a^2 + y^2/b^2 + z^2/c^2 = 1",
    "attachments": {
        "LUCENE-6487.patch": "https://issues.apache.org/jira/secure/attachment/12735037/LUCENE-6487.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14547124",
            "author": "Karl Wright",
            "date": "2015-05-17T10:44:02+0000",
            "content": "What I propose to do is introduce a planet model, as follows:\n\n\npublic class PlanetModel {\n  \n  // Surface of the planet:\n  // x^2/a^2 + y^2/b^2 + z^2/c^2 = 1.0\n  // Scaling factors are a,b,c.\n  public final double inverseA;\n  public final double inverseB;\n  public final double inverseC;\n  public final double inverseASquared;\n  public final double inverseBSquared;\n  public final double inverseCSquared;\n  // We do NOT include radius, because all computations in geo3d are in radians, not meters.\n  \n  /** Planet model corresponding to sphere. */\n  public static final PlanetModel SPHERE = new PlanetModel(1.0,1.0,1.0);\n  /** Planet model corresponding to WGS84 */\n  public final static double WGS84_FLATTENING = 1.0/298.257223563;\n  // For WGS84, the flattening is applied how?  Given we still want to scale by mean earth radius in meters, what gets scaled\n  // and how?  Ask Nicholas.\n  public static final PlanetModel WGS84 = new PlanetModel(1.0 - WGS84_FLATTENING, 1.0 - WGS84_FLATTENING, 1.0);\n  \n  public PlanetModel(final double a, final double b, final double c) {\n    this.inverseA = 1.0 / a;\n    this.inverseB = 1.0 / b;\n    this.inverseC = 1.0 / c;\n    this.inverseASquared = inverseA * inverseA;\n    this.inverseBSquared = inverseB * inverseB;\n    this.inverseCSquared = inverseC * inverseC;\n  }\n  \n}\n\n\n\n[~nknize@gmail.com], is this correct "
        },
        {
            "id": "comment-14547923",
            "author": "Karl Wright",
            "date": "2015-05-18T12:13:57+0000",
            "content": "I'm making good progress on this work.  The only code remaining that needs functional updating is the bounds computation, which will probably take a couple of days.  I also need some help from Nicholas making sure that the ellipsoid coefficients are in fact correct for WGS84, and writing some WGS-specific tests.\n\nI'm attaching a preliminary patch, which contains all the structural changes necessary, plus everything other than the code listed above.  It is for reference/review purposes only and should not yet be committed. "
        },
        {
            "id": "comment-14549462",
            "author": "Karl Wright",
            "date": "2015-05-18T22:58:10+0000",
            "content": "Updating the patch with \"completed\" functionality, although incompletely tested and with a known problem.  Specifically, paths are specified with a half-width for the straight segments, and that's been specified as an angle to date.  That's fine, but with an ellipsoid, a pair of planes describing the corridor in that way might well fail to line up with the circles at the waypoints.  We really need to determine the bounding planes in a different manner to be consistent.  Something I will need to work out.\n "
        },
        {
            "id": "comment-14549874",
            "author": "Karl Wright",
            "date": "2015-05-19T06:31:30+0000",
            "content": "Updated patch, which deals properly with some ellipsoid issues around \"circles\" and paths.  So now once again there are no known functional problems and we're back to adding tests.\n\nStill need to come up with the \"proper\" WGS84 ellipsoid; I think we want the scaling factors such that if you multiply all points by the mean earth radius you get the proper points in meters.   "
        },
        {
            "id": "comment-14550239",
            "author": "Karl Wright",
            "date": "2015-05-19T11:08:53+0000",
            "content": "Fix arc distance computation and geopoint computation. "
        },
        {
            "id": "comment-14550600",
            "author": "Karl Wright",
            "date": "2015-05-19T15:16:40+0000",
            "content": "Add more tests "
        },
        {
            "id": "comment-14551293",
            "author": "Karl Wright",
            "date": "2015-05-19T21:48:32+0000",
            "content": "Hmm.\n\nTrying to introduce a random test for WGS84 using the same infrastructure as for a SPHERE, and getting the following:\n\n\n   [junit4]   1> bbox=GeoSouthLatitudeZone: {toplat=-1.5024863073176973(-86.08612418550003)}\n   [junit4]   1> spatialRect=Rect(minX=82.0,maxX=92.0,minY=-86.0,maxY=-72.0), circleShape=Geo3dShape{planetmodel=PlanetModel: {a=1.0011188180710464, b=1.0011188180710464, c=0.9977622539852008}, shape=GeoCircle: {center=[X=0.026984641212903917, Y=0.06253120083527987, Z=-0.9954507743974911], radius=1.1693705988362009(67.00000000000001)}}\n   [junit4]   1> bboxshape=Rect(minX=-180.0,maxX=180.0,minY=-90.0,maxY=-86.07612418550002)\n   [junit4] FAILURE 0.17s | Geo3dWSG84ShapeRectRelationTest.testFailure <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([DEB9AAFD9D348562:B6045911A704E7CD]:0)\n   [junit4]    > \tat org.apache.lucene.spatial.spatial4j.Geo3dWSG84ShapeRectRelationTest.testFailure(Geo3dWSG84ShapeRectRelationTest.java:87)\n\n\n\nThe failure is because Spatial4j thinks that bboxShape.relate(spatialRect) == SpatialRelation.DISJOINT, which seems to be the case:\n\n\nspatialRect=Rect(minX=82.0,maxX=92.0,minY=-86.0,maxY=-72.0)\n\n\n\nand\n\n\nbboxshape=Rect(minX=-180.0,maxX=180.0,minY=-90.0,maxY=-86.07612418550002)\n\n\n\nDebugging now... "
        },
        {
            "id": "comment-14551630",
            "author": "Karl Wright",
            "date": "2015-05-20T01:37:14+0000",
            "content": "Found the issue, but it will take me some reworking of bounds computations to fix it properly. "
        },
        {
            "id": "comment-14552720",
            "author": "Karl Wright",
            "date": "2015-05-20T17:34:24+0000",
            "content": "Fixing all remaining bugs and adding a random test for WGS84 model as well.\n\nNote that I had to give up on having an ellipsoid with different scaling factors for x and y.  This is because a \"latitude slice\" is not actually a slice on such worlds, and therefore GeoBBox's don't actually work.\n\nThere is one more change I'd like to explore having to do with consistent determination of GeoPath width.  After that I will try to get someone's attention so this can be committed. "
        },
        {
            "id": "comment-14552746",
            "author": "Karl Wright",
            "date": "2015-05-20T17:44:56+0000",
            "content": "Ok, all done. "
        },
        {
            "id": "comment-14553274",
            "author": "Karl Wright",
            "date": "2015-05-20T22:48:50+0000",
            "content": "Note that the general ellipsoid treatment will be some percentage slower than the prior sphere treatment.  The critical parts (e.g. shape membership) are unchanged, but the following have taken a small hit:\n\n\n\tinitial setup of objects, e.g. computing points from lat/lon\n\tcomputing the bounds of shapes\n\tcomputing the arc distance between two points\n\n\n\nI have not added a \"surface distance\" abstraction at this time, in part because there is no accurate ellipsoidal calculation I can find, only approximations.  So distance measures continue to be computed as arc distances, normal distances, or direct (linear) distances.  Should an accurate surface calculation become available this can readily be added.\n\n(Further research shows that computing elliptical curve distances are in fact part of a class of problem under the name of \"elliptic integrals\", which has only numeric solutions.  So it is unlikely that we will be implementing this in geo3d soon.) "
        },
        {
            "id": "comment-14555951",
            "author": "Karl Wright",
            "date": "2015-05-22T10:31:43+0000",
            "content": "Update patch according to comments from dsmiley "
        },
        {
            "id": "comment-14555985",
            "author": "Karl Wright",
            "date": "2015-05-22T11:06:22+0000",
            "content": "Patch correcting a random test failure.  The bounding box slop between spatial4j and geo3d needs to be larger to handle WGS84. "
        },
        {
            "id": "comment-14557551",
            "author": "Karl Wright",
            "date": "2015-05-23T22:07:27+0000",
            "content": "Fixed problem with GeoPaths on ellipsoids; also implemented some suggestions from David Smiley. "
        },
        {
            "id": "comment-14558567",
            "author": "David Smiley",
            "date": "2015-05-25T22:56:50+0000",
            "content": "Karl, I looked over your latest patch and made some modifications as follows (now attached to this issue):\n\n\n\tGeoBaseBBox.isShapeInsideBBox: added optimization to exit early if found some inside & outside\n\tPlanetModel.hashCode: optimize to not create new Double instances\n\tPlanetModel.toString(): prints SPHERE or WGS84 if applicable\n\tPlanetModel: added javadoc.\n\tGeo3dWGS84ShapeRectRelationTest: removed tabs\n\tI refactored the two tests extending RandomizedShapeTestCase to a new Geo3dShapeRectRelationTestCase because they share so much in common.\n\n\n\n\"ant precommit\" now passes.  Tests pass... though I'd like to run some more iterations which I'll do later.\n\nOther comments:\n\nGeoPoint.magnitude is a bit confusing to me\u2026 it seems it\u2019s lazy initialized.  I think it could use comments to this effect?  And why is there a computeMagnitude() method distinct from super.magnitude() which also \u201ccomputes\u201d the magnitude?  I\u2019m not saying I think there\u2019s a bug in all this, just that, at a minimum, there should be clarifying comments because it\u2019s confusing.\n\nGeo3dShapeRectRelationTestCase.geoPointToSpatial4jPoint (something I wrote) is probably wrong since it uses \u2018x\u2019 and \u2018y\u2019 as if it\u2019s lon & lat when it\u2019s not; and it doesn\u2019t use \u2018z\u2019.  How should this be rewritten? "
        },
        {
            "id": "comment-14558619",
            "author": "Karl Wright",
            "date": "2015-05-26T02:20:25+0000",
            "content": "GeoPoint.magnitude is a bit confusing to me\u2026 it seems it\u2019s lazy initialized. I think it could use comments to this effect? And why is there a computeMagnitude() method distinct from super.magnitude() which also \u201ccomputes\u201d the magnitude?\n\nTwo different kinds of magnitude.  One is the inverse ellipsoid magnitude (computeMagnitude()) and the other is the classic root-of-squares linear magnitude.  I can change the method name to clarify this and add comments accordingly.\n\nGeo3dShapeRectRelationTestCase.geoPointToSpatial4jPoint (something I wrote) is probably wrong since it uses \u2018x\u2019 and \u2018y\u2019 as if it\u2019s lon & lat when it\u2019s not; and it doesn\u2019t use \u2018z\u2019. How should this be rewritten?\n\nI can propose code if you like, but basically what you do is this: (1) compute the inverse magnitude (im), then (2) lat = im * asin(z), (3) lon = atan2(y,x).\n\nI can code up all of this stuff if you want to propose a good way to deliver it.\n "
        },
        {
            "id": "comment-14558666",
            "author": "David Smiley",
            "date": "2015-05-26T03:50:10+0000",
            "content": "I can propose code if you like, but basically what you do is this: (1) compute the inverse magnitude (im), then (2) lat = im * asin(z), (3) lon = atan2(y,x).\n\nIt'd be great if a GeoPoint could compute this \u2013 after all it takes lat & lon parameters.\n\nI can code up all of this stuff if you want to propose a good way to deliver it.\n\nDo you mean, how literally should you provide the code?  Whatever you'd like (patch, ReviewBoard, GitHub PR).\n\np.s. I ran a lot more iterations and no errors  "
        },
        {
            "id": "comment-14558879",
            "author": "Karl Wright",
            "date": "2015-05-26T08:49:03+0000",
            "content": "Applying your patch against trunk yields:\n\n\n    [mkdir] Created dir: C:\\wip\\lucene\\lucene-6487\\lucene\\build\\spatial\\classes\\java\n    [javac] Compiling 106 source files to C:\\wip\\lucene\\lucene-6487\\lucene\\build\\spatial\\classes\\java\n    [javac] C:\\wip\\lucene\\lucene-6487\\lucene\\spatial\\src\\java\\org\\apache\\lucene\\spatial\\spatial4j\\geo3d\\GeoDegenerateHorizontalLine.java:27: error: cannot find symbol\n    [javac] public class GeoDegenerateHorizontalLine extends GeoBaseBBox {\n    [javac]                                                  ^\n    [javac]   symbol: class GeoBaseBBox\n    [javac] C:\\wip\\lucene\\lucene-6487\\lucene\\spatial\\src\\java\\org\\apache\\lucene\\spatial\\spatial4j\\geo3d\\GeoDegenerateLatitudeZone.java:26: error: cannot find symbol\n    [javac] public class GeoDegenerateLatitudeZone extends GeoBaseBBox {\n    [javac]                                                ^\n    [javac]   symbol: class GeoBaseBBox\n    [javac] C:\\wip\\lucene\\lucene-6487\\lucene\\spatial\\src\\java\\org\\apache\\lucene\\spatial\\spatial4j\\geo3d\\GeoDegenerateLongitudeSlice.java:25: error: cannot find symbol\n    [javac] public class GeoDegenerateLongitudeSlice extends GeoBaseBBox {\n    [javac]                                                  ^\n    [javac]   symbol: class GeoBaseBBox\n    [javac] C:\\wip\\lucene\\lucene-6487\\lucene\\spatial\\src\\java\\org\\apache\\lucene\\spatial\\spatial4j\\geo3d\\GeoDegenerateVerticalLine.java:25: error: cannot find symbol\n    [javac] public class GeoDegenerateVerticalLine extends GeoBaseBBox {\n    [javac]                                                ^\n    [javac]   symbol: class GeoBaseBBox\n    [javac] C:\\wip\\lucene\\lucene-6487\\lucene\\spatial\\src\\java\\org\\apache\\lucene\\spatial\\spatial4j\\geo3d\\GeoLatitudeZone.java:25: error: cannot find symbol\n    [javac] public class GeoLatitudeZone extends GeoBaseBBox {\n    [javac]                                      ^\n    [javac]   symbol: class GeoBaseBBox\n    [javac] C:\\wip\\lucene\\lucene-6487\\lucene\\spatial\\src\\java\\org\\apache\\lucene\\spatial\\spatial4j\\geo3d\\GeoLongitudeSlice.java:27: error: cannot find symbol\n    [javac] public class GeoLongitudeSlice extends GeoBaseBBox {\n    [javac]                                        ^\n    [javac]   symbol: class GeoBaseBBox\n    [javac] C:\\wip\\lucene\\lucene-6487\\lucene\\spatial\\src\\java\\org\\apache\\lucene\\spatial\\spatial4j\\geo3d\\GeoNorthLatitudeZone.java:25: error: cannot find symbol\n    [javac] public class GeoNorthLatitudeZone extends GeoBaseBBox {\n    [javac]                                           ^\n    [javac]   symbol: class GeoBaseBBox\n    [javac] C:\\wip\\lucene\\lucene-6487\\lucene\\spatial\\src\\java\\org\\apache\\lucene\\spatial\\spatial4j\\geo3d\\GeoNorthRectangle.java:28: error: cannot find symbol\n    [javac] public class GeoNorthRectangle extends GeoBaseBBox {\n...\n\n\n\nClearly we are out of sync again.\n\nI'm attaching a new patch with my changes, but they do not include your changes for that reason.\n "
        },
        {
            "id": "comment-14558956",
            "author": "Karl Wright",
            "date": "2015-05-26T10:25:07+0000",
            "content": "Suggestion:\n(1) Create a branch.  It's the only way to really do extensive changes with svn.\n(2) Commit my changes.\n(3) Make your changes and commit those.\n(4) We can iterate as needed.\n\nAlso, FWIW, the only three files I touched were:\nPlane.java\nVector.java\nGeoPoint.java\n "
        },
        {
            "id": "comment-14558975",
            "author": "Karl Wright",
            "date": "2015-05-26T11:12:42+0000",
            "content": "Also, when I copy the GeoBaseBBox.java class into place, and delete the old GeoBBoxBase class, I still get:\n\n\n    [javac] C:\\wip\\lucene\\lucene-6487\\lucene\\spatial\\src\\test\\org\\apache\\lucene\\spatial\\spatial4j\\Geo3dShapeRectRelationTest.java:34: error: class Geo3dShapeSphereModelRectRelationTest is public, should be declared in a file named Geo3dShapeSphereModelRectRelationTest.java\n    [javac] public class Geo3dShapeSphereModelRectRelationTest extends Geo3dShapeRectRelationTestCase {\n    [javac]        ^\n    [javac] 1 error\n\n\n\nI'm assuming you intended to copy the former class into the latter but somehow overwrote the former?  I'll try that and see if I can get it to build... "
        },
        {
            "id": "comment-14559001",
            "author": "Karl Wright",
            "date": "2015-05-26T11:48:38+0000",
            "content": "Resolved outstanding build issues from David's patch and added what was requested. "
        },
        {
            "id": "comment-14560411",
            "author": "ASF subversion and git services",
            "date": "2015-05-27T04:54:51+0000",
            "content": "Commit 1681907 from David Smiley in branch 'dev/branches/lucene6487'\n[ https://svn.apache.org/r1681907 ]\n\nLUCENE-6487: Geo3D with WGS84 in-progress with David's mods\n(PlanetModel, and refactor of Geo3dShapeRectRelationTestCase) "
        },
        {
            "id": "comment-14560413",
            "author": "David Smiley",
            "date": "2015-05-27T04:56:29+0000",
            "content": "Suggestion: (1) Create a branch., ...\n\nGreat suggestion \u2013 I did those steps.\n\nIt's a shame the patch didn't deal well with the rename of GeoBaseBBox. "
        },
        {
            "id": "comment-14560971",
            "author": "ASF subversion and git services",
            "date": "2015-05-27T13:34:56+0000",
            "content": "Commit 1682021 from David Smiley in branch 'dev/branches/lucene6487'\n[ https://svn.apache.org/r1682021 ]\n\nLUCENE-6487: Geo3D with WGS84 patch from Karl: GeoPoint.getLat & getLon. "
        },
        {
            "id": "comment-14560979",
            "author": "David Smiley",
            "date": "2015-05-27T13:42:46+0000",
            "content": "This looks ready to me.  I do have a couple lingering thoughts (not blockers):\n\n\tMight it make sense for Vector to to have it's x, y, and z, plus GeoPoint's magnitude as floats instead of doubles?   I was just thinking the objects are comparatively heavy compared to a lat-lon based Point.\n\tIt'd be nice if there was some random round-trip tests from lat & lon to GeoPoint to back again, checking the result is within a tolerance.\n\n\n\nNicholas Knize do you have an interest in reviewing the Geo3d lucene6487 branch with respect to WGS84 support? "
        },
        {
            "id": "comment-14561176",
            "author": "Karl Wright",
            "date": "2015-05-27T15:51:21+0000",
            "content": "Simple round-trip tests are trivial, but I won't get to one today, and I agree that it is not a blocker for commit.  We can create a separate ticket if you go ahead and merge.\n\nre doubles vs. floats: Well, the actual (x,y,z) value needs to be accurate to within 1e-12 in order to properly specify various planes etc throughout the module.  So I'd be cautious about deliberately reducing precision, since geopoint extends vector and plane does too.  We can experiment but...  once again, I think a separate ticket would be in order. "
        },
        {
            "id": "comment-14562909",
            "author": "Karl Wright",
            "date": "2015-05-28T13:37:07+0000",
            "content": "I added a test (and actually found a typo when I did that!) so that was a good call.  "
        },
        {
            "id": "comment-14563967",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T00:20:02+0000",
            "content": "Commit 1682357 from David Smiley in branch 'dev/branches/lucene6487'\n[ https://svn.apache.org/r1682357 ]\n\nLUCENE-6487: Geo3D with WGS84 patch from Karl: fix bug in GeoPoint.getLongitude with test\nfrom https://reviews.apache.org/r/34744/diff/raw/ "
        },
        {
            "id": "comment-14564075",
            "author": "ASF subversion and git services",
            "date": "2015-05-29T02:07:56+0000",
            "content": "Commit 1682359 from David Smiley in branch 'dev/branches/lucene6487'\n[ https://svn.apache.org/r1682359 ]\n\nLUCENE-6487: Geo3D with WGS84: randomize GeoPointTest lat-lon round-trip "
        },
        {
            "id": "comment-14564550",
            "author": "Karl Wright",
            "date": "2015-05-29T10:40:31+0000",
            "content": "Hi David,\n\nThis test is now wrong, and will blow up whenever a point is chosen at the poles:\n\n\n    final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n    final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n    final GeoPoint p1 = new GeoPoint(PlanetModel.SPHERE, pLat, pLon);\n    assertEquals(pLat, p1.getLatitude(), 1e-12);\n    assertEquals(pLon, p1.getLongitude(), 1e-12);\n    final GeoPoint p2 = new GeoPoint(PlanetModel.WGS84, pLat, pLon);\n    assertEquals(pLat, p2.getLatitude(), 1e-12);\n    assertEquals(pLon, p2.getLongitude(), 1e-12);\n\n\n\nThe conversion at the pole will produce a longitude value always of zero, not what went into it. "
        },
        {
            "id": "comment-14564741",
            "author": "David Smiley",
            "date": "2015-05-29T12:59:07+0000",
            "content": "Thanks!  Instead what I should measure is that the distance between the original point and the round-trip point is close to 0. "
        },
        {
            "id": "comment-14564851",
            "author": "David Smiley",
            "date": "2015-05-29T14:01:57+0000",
            "content": "I rewrote the test; and indirectly test the arcDistance somewhat since it calls that.  Can you try this?  It seems my error epsilons are too tiny.  Or maybe you see something the matter.\n\n  @Test\n  public void testConversion() {\n    testPointRoundTrip(PlanetModel.SPHERE, 90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.SPHERE, -90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.WGS84, 90, 0, 1e-12);\n    testPointRoundTrip(PlanetModel.WGS84, -90, 0, 1e-12);\n\n    final double pLat = (randomFloat() * 180.0 - 90.0) * DistanceUtils.DEGREES_TO_RADIANS;\n    final double pLon = (randomFloat() * 360.0 - 180.0) * DistanceUtils.DEGREES_TO_RADIANS;\n    testPointRoundTrip(PlanetModel.SPHERE, pLat, pLon, 1e-12);\n    testPointRoundTrip(PlanetModel.WGS84, pLat, pLon, 1e-6);//bigger error tolerance\n  }\n\n  protected void testPointRoundTrip(PlanetModel planetModel, double pLat, double pLon, double epsilon) {\n    final GeoPoint p1 = new GeoPoint(planetModel, pLat, pLon);\n    final GeoPoint p2 = new GeoPoint(planetModel, p1.getLatitude(), p1.getLongitude());\n    double dist = p1.arcDistance(p2);\n    assertEquals(0, dist, epsilon);\n  }\n\n\n "
        },
        {
            "id": "comment-14565926",
            "author": "Karl Wright",
            "date": "2015-05-30T10:22:14+0000",
            "content": "I'll have a look.  Please bear in mind that trig functions and their inverses, if done in sequence enough, may well wander pretty far off of the original values, so there may be nothing wrong with your test.  But I will make sure of that. "
        },
        {
            "id": "comment-14565944",
            "author": "Karl Wright",
            "date": "2015-05-30T10:54:40+0000",
            "content": "Ok, what I find is that because the arc distance is in effect taking a\nsquare root, instead of 1e-12 the error should always be 1e-6. That is\njust the way the math works.\n\nKarl\n\nSent from my Windows Phone\nFrom: Karl Wright (JIRA)\nSent: 5/30/2015 6:22 AM\nTo: dev@lucene.apache.org\nSubject: [jira] [Commented] (LUCENE-6487) Add WGS84 capability to geo3d\nsupport\n\n    [ https://issues.apache.org/jira/browse/LUCENE-6487?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=14565926#comment-14565926\n]\n\nKarl Wright commented on LUCENE-6487:\n-------------------------------------\n\nI'll have a look.  Please bear in mind that trig functions and their\ninverses, if done in sequence enough, may well wander pretty far off\nof the original values, so there may be nothing wrong with your test.\nBut I will make sure of that.\n\n\n\n\n\u2013\nThis message was sent by Atlassian JIRA\n(v6.3.4#6332)\n\n---------------------------------------------------------------------\nTo unsubscribe, e-mail: dev-unsubscribe@lucene.apache.org\nFor additional commands, e-mail: dev-help@lucene.apache.org "
        },
        {
            "id": "comment-14566312",
            "author": "ASF subversion and git services",
            "date": "2015-05-31T02:50:22+0000",
            "content": "Commit 1682667 from David Smiley in branch 'dev/branches/lucene6487'\n[ https://svn.apache.org/r1682667 ]\n\nLUCENE-6487: Geo3D with WGS84: fix GeoPointTest to test via distance "
        },
        {
            "id": "comment-14568897",
            "author": "Karl Wright",
            "date": "2015-06-02T10:20:11+0000",
            "content": "Hi David,\n\nAs far as I am concerned, this is ready to be committed to trunk.\n\nIf you are waiting for Nicholas, I fully agree, but he's on paternity leave so it may be quite some time.  Might be better to commit and revise later, if needed. "
        },
        {
            "id": "comment-14569073",
            "author": "ASF subversion and git services",
            "date": "2015-06-02T13:11:40+0000",
            "content": "Commit 1683100 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1683100 ]\n\nLUCENE-6487: Geo3D with WGS84 option (Merged from lucene6487 + CHANGES.txt) "
        },
        {
            "id": "comment-14569075",
            "author": "ASF subversion and git services",
            "date": "2015-06-02T13:16:11+0000",
            "content": "Commit 1683102 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1683102 ]\n\nLUCENE-6487: Geo3D with WGS84 option "
        },
        {
            "id": "comment-14569082",
            "author": "David Smiley",
            "date": "2015-06-02T13:19:46+0000",
            "content": "If you are waiting for Nicholas, I fully agree, but he's on paternity leave so it may be quite some time. Might be better to commit and revise later, if needed.\n\nCommitted now.\n\nIt was a nice-to-have, plus I was/am busy.\n\nThanks again for WGS-84 support!  You made it look so easy  "
        },
        {
            "id": "comment-14569123",
            "author": "ASF subversion and git services",
            "date": "2015-06-02T13:55:42+0000",
            "content": "Commit 1683115 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1683115 ]\n\nLUCENE-6487: Fix Java 8 reference to Double.hashCode  (use IntelliJ generated hashCode instead) "
        },
        {
            "id": "comment-14713332",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:27+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}