{
    "id": "SOLR-54",
    "title": "Invalid XML response returned when adding a  document with a field not declared in solrconfig.xml",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Below we have a documents with three fields. One of them 'aaa'\nis not defined in solrconfig.xml:\n\n<add>\n <doc>\n   <field name=\"type\">invoice</field>\n   <field name=\"aaa\">bbb</field>\n   <field name=\"internal_id\">10E3B793A84559081D1EF0BA6BD0BB5E1417573EC5D</field>\n </doc>\n</add>\n\nWe get an error that resembles an xml but it is not because it has no root tag:\n\n<result status=\"400\">ERROR:unknown field 'aaa'</result><result status=\"1\">org.xmlpull.v1.XmlPullParserException: expected START_TAG or END_TAG not END_DOCUMENT (position: END_DOCUMENT seen ...</doc>\\n</add>\\n... @9:1)\n   at org.xmlpull.mxp1.MXParser.nextTag(MXParser.java:1083)\n   at org.apache.solr.core.SolrCore.update(SolrCore.java:681)\n   at org.apache.solr.servlet.SolrUpdateServlet.doPost(SolrUpdateServlet.java:52)\n   at javax.servlet.http.HttpServlet.service(HttpServlet.java:709)\n   at javax.servlet.http.HttpServlet.service(HttpServlet.java:802)\n   at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:252)\n   at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:173)\n   at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:213)\n   at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:178)\n   at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:126)\n   at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:105)\n   at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:107)\n   at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:148)\n   at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:869)\n   at org.apache.coyote.http11.Http11BaseProtocol$Http11ConnectionHandler.processConnection(Http11BaseProtocol.java:664)\n   at org.apache.tomcat.util.net.PoolTcpEndpoint.processSocket(PoolTcpEndpoint.java:527)\n   at org.apache.tomcat.util.net.LeaderFollowerWorkerThread.runIt(LeaderFollowerWorkerThread.java:80)\n   at org.apache.tomcat.util.threads.ThreadPool$ControlRunnable.run(ThreadPool.java:684)\n   at java.lang.Thread.run(Thread.java:595)\n</result>",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Mike Klaas",
            "id": "comment-12447612",
            "date": "2006-11-07T03:15:50+0000",
            "content": "Previous patch was a little brain dead when it came to handling errors in multi-doc add commands.  Now it will only send a single <result> on success or error.\n\nThis code could be cleaned up considerably if it were not important to try to \"clean up\" the xml stream by continuing to read on error (SolrCore:699).  I could see this being useful if solr could continue adding documents after erroring out on one, but we read to the send of the stream anyway.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12447619",
            "date": "2006-11-07T03:54:43+0000",
            "content": ">This code could be cleaned up considerably if it were not important to try to \"clean up\" the xml stream\n\nWe could change this behavior if we wish to... I never documented multiple docs per add because I hadn't figured out how I wanted to handle errors, etc.  Given that it's an error case, no one will probably be depending on the current behavior yet. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12447620",
            "date": "2006-11-07T04:07:39+0000",
            "content": "I'd be in favour of that.  Currently, the clean up doesn't work, as readDoc doesn't always leave xpp in a reasonable state if an error occurs (this is teh source of the seconds exception in the above traceback) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12447626",
            "date": "2006-11-07T04:31:30+0000",
            "content": "Fine by me... seems impossible to clean up in all circumstances anyway,  so trying isn't worth much.\nPeople seeking precise error control can do single doc adds and just use multiple persistent connections to cover the latency. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12447629",
            "date": "2006-11-07T04:49:48+0000",
            "content": "SOLR-65 is a related issue where this may wind up getting addressed as a side effect of some other changes (Mike's comments reflect a patch available there) "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12448333",
            "date": "2006-11-09T00:47:40+0000",
            "content": "Fixed as part of SOLR-65 "
        }
    ]
}