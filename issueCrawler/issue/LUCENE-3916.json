{
    "id": "LUCENE-3916",
    "title": "Consider different query and index segmentation for Japanese",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Kuromoji today uses search mode segmentation both at query and index time.\n\nThe benefit with search mode segmentation is that it segments compounds such as \u95a2\u897f\u56fd\u969b\u7a7a\u6e2f (Kansai International Airport) into \u95a2\u897f (Kansai), \u56fd\u969b (international), \u7a7a\u6e2f (airport), and leaves the compound \u95a2\u897f\u56fd\u969b\u7a7a\u6e2f as a synonym to \u95a2\u897f.\n\nThis segmentation allows us to get a match for \u7a7a\u6e2f (airport), which is good for recall and we'd get good precision when searching for the compound \u95a2\u897f\u56fd\u969b\u7a7a\u6e2f because of IDF.\n\nHowever, if we search for the compound \u95a2\u897f\u56fd\u969b\u7a7a\u6e2f (Kansai International Airport) our query becomes (by default) an OR-query with terms \u95a2\u897f (Kansai), \u95a2\u897f\u56fd\u969b\u7a7a\u6e2f (Kansai International Airport), \u56fd\u969b (international) and \u7a7a\u6e2f (airport).\n\nThis behaviour is by-design when using OR as the default operator, but this also has the effect of returning generic hits like \u7a7a\u6e2f (airport) when the user searches for something very specific like \u95a2\u897f\u56fd\u969b\u7a7a\u6e2f (Kansai International Airport) \u2013 and these hits are also highlighted.\n\nThis doesn't necessarily mean that ranking is flawed per se, but a user or application might prefer precision over recall.  In order to favour precision, we can consider using normal mode segmentation for queries, but retain search mode segmentation on the indexing side.\n\nDoes anyone have any general opinion on this?  What would we do for other language in the case of compound splitting?\n\nPerhaps this can be dealt with as a documentation issue with a comment in schema.xml while keeping the current behaviour?\n\nMany thanks for any input.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-25T14:27:01+0000",
            "content": "For the case of compound splitting, split-and-keep is better then just splitting \n(what kuromoji did until recently), and I think the issues you see are mainly highlighting issues.\n\nAnd yes, its true that using search mode at index time is really no different than\nadding synonyms for the compounds, but I don't think we should change the default\nconfiguration for japanese to one that uses different index and search analysis:\nthats not ideal for an example.\n\nUsing different index and search analysis is really expert: I know the solr example\ndoes this with its english field type, and 90% of the time I think users will just\nscrew things up worse, I see this in crazy examples on the user lists all the time.\n\nA commented out note about how this acts just like synonyms and can be done purely\nonly at index-time might be good though.\n\nIn the future, now that we can split-and-keep, we could also consider at adding support\nfor LUCENE-2892 (SOLR-2477), where if a user asks for a phrase explicitly, we don't decompound.\n\nBut still the tradeoff for this stuff is that if we make sophisticated examples\nwith different chains, chances are that any time a user modifies these chains\nthey are just gonna screw up their analysis badly.  ",
            "author": "Robert Muir",
            "id": "comment-13237878"
        },
        {
            "date": "2012-03-28T18:32:03+0000",
            "content": "Thanks a lot, Robert.\n\nI've added a comment about about this in schema.xml as part of SOLR-3276.  I'm resolving this issue.\n ",
            "author": "Christian Moen",
            "id": "comment-13240610"
        }
    ]
}