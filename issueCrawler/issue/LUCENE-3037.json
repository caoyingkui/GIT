{
    "id": "LUCENE-3037",
    "title": "TestFSTs.testRealTerms produces a corrupt index",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "seems to be prox/skip related: the test passes, but the checkindex upon closing fails.\n\nant test-core -Dtestcase=TestFSTs -Dtests.seed=-4012305283315171209:0 -Dtests.multiplier=3 -Dtests.nightly=true -Dtests.linedocsfile=c:/data/enwiki.random.lines.txt.gz\n\nNote: to get the enwiki.random.lines.txt.gz you have to fetch it from hudson (warning 1 gigabyte file).\nyou also have to run the test a few times to trigger it.\n\nill upload the index this thing makes to this issue.",
    "attachments": {
        "index.7z.001": "https://issues.apache.org/jira/secure/attachment/12476671/index.7z.001",
        "index.7z.002": "https://issues.apache.org/jira/secure/attachment/12476672/index.7z.002",
        "index.7z.003": "https://issues.apache.org/jira/secure/attachment/12476673/index.7z.003",
        "LUCENE-3037.patch": "https://issues.apache.org/jira/secure/attachment/12476740/LUCENE-3037.patch",
        "LUCENE-3037_test.patch": "https://issues.apache.org/jira/secure/attachment/12476729/LUCENE-3037_test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-04-18T20:54:52+0000",
            "content": "see https://hudson.apache.org/hudson/job/Lucene-trunk/1533/testReport/junit/org.apache.lucene.util.automaton.fst/TestFSTs/testRealTerms/ for the exception. ",
            "author": "Robert Muir",
            "id": "comment-13021252"
        },
        {
            "date": "2011-04-19T00:05:49+0000",
            "content": "attached is the broken segment (3 files).\n\ni played around with disabling d&penum/skipper reuse to figure out why we have a bad offset in the skip, but i didnt get anywhere... ",
            "author": "Robert Muir",
            "id": "comment-13021349"
        },
        {
            "date": "2011-04-19T12:45:34+0000",
            "content": "I think this is an off-by-one, lots of terms pass thru checkindex fine, but then the problematic term happens to have df=1000... this segment has skipInterval=10 ",
            "author": "Robert Muir",
            "id": "comment-13021562"
        },
        {
            "date": "2011-04-19T13:03:58+0000",
            "content": "here's a much faster (fails in 2 seconds) test case. \n\nI noticed with this one, it fails with StandardPostingsReader, so I think the problem is general to multi-level skipping.\n\nThe patch forces our random skip interval to be [2,10] instead of [2,64], thus causing us to test higher skiplevels more than usual.\n\nant test-core -Dtestcase=TestLongPostings -Dtestmethod=testLongPostings -Dtests.seed=7951749419575219720:5894148324166575802 -Dtests.codec=MockRandom ",
            "author": "Robert Muir",
            "id": "comment-13021571"
        },
        {
            "date": "2011-04-19T13:26:30+0000",
            "content": "again the same pattern here, it fails when docFreq is a skipInterval^N, in this case docFreq=243, skipInterval=3 ",
            "author": "Robert Muir",
            "id": "comment-13021578"
        },
        {
            "date": "2011-04-19T15:15:22+0000",
            "content": "the problem is in our computation of number of skip Levels:\nin this case: Math.log(243) / Math.log(3) == 0.499999999999, which is floored to 4, but there are really 5 skipLevels here.\n\nAttached is a patch to use StrictMath, which fixes the bug. Maybe there is a cleaner way though... I don't like the floating point math here? ",
            "author": "Robert Muir",
            "id": "comment-13021621"
        },
        {
            "date": "2011-04-19T15:19:32+0000",
            "content": "by the way, existing indexes (all with skipInterval=16) are unaffected. ",
            "author": "Robert Muir",
            "id": "comment-13021622"
        },
        {
            "date": "2011-04-19T16:08:53+0000",
            "content": "I'll commit this patch for now, but keep the issue open in case someone is willing to write an integer version here (which would be greatly preferred!) ",
            "author": "Robert Muir",
            "id": "comment-13021636"
        },
        {
            "date": "2011-04-19T17:51:02+0000",
            "content": "Committed revision 1095147 ",
            "author": "Robert Muir",
            "id": "comment-13021684"
        },
        {
            "date": "2011-04-19T18:01:42+0000",
            "content": "I don't know how applicable is this, but \n\nfloor(log(n)/log(m)) = p\n\ncan be transformed into a simple equation: find first 'p' for which n <= m^p is true. Assuming m^p grows quickly, this can be computed in a tight loop, quite fast and with an exact result. ",
            "author": "Dawid Weiss",
            "id": "comment-13021690"
        },
        {
            "date": "2011-04-19T18:07:04+0000",
            "content": "hi dawid, thanks, i used this:\n\n/** returns x == 0 ? 0 : Math.floor(Math.log(x) / Math.log(base)) */\n static int log(int x, int base) {\n    int ret = 0;\n    while (x >= base) {\n      x /= base;\n      ret++;\n    }\n    return ret;\n }\n\n\n\ni did a quick test and this seems faster than our old calculation, but speed isn't particularly important here though: when initting the skipper at this place we are doing i/o... its more important that the calculation isnt wrong. ",
            "author": "Robert Muir",
            "id": "comment-13021692"
        },
        {
            "date": "2011-04-19T18:49:06+0000",
            "content": "This should be even faster:\n\n public static int log(int x, int base) {\n   assert base>=2;\n   int ret = 0;\n   long n = base; // needs to be a long to avoid overflow\n   while (x >= n) {\n     n *= base;\n     ret++;\n   }\n   return ret;\n }\n\n ",
            "author": "Yonik Seeley",
            "id": "comment-13021714"
        },
        {
            "date": "2011-04-19T18:52:07+0000",
            "content": "Hi Yonik: looks good, you want to just commit it? ",
            "author": "Robert Muir",
            "id": "comment-13021716"
        },
        {
            "date": "2011-04-19T19:11:38+0000",
            "content": "committed.\n\nRobert, your instinct to avoid floating point was good.  StrictMath would not have eliminated all of the errors.\nFor example log(380204032,52) using StrictMath still returns 4, while the integer versions correctly return 5. ",
            "author": "Yonik Seeley",
            "id": "comment-13021738"
        },
        {
            "date": "2011-04-19T19:17:36+0000",
            "content": "yeah, strictmath didnt really help that much actually, it only fixed a few cases but many were still broken.\n\nlog(1000, 10) with strictmath is another example, it will still be 2 instead of 3.\n\npersonally I really like that we eliminated the floating point stuff here, maybe we should think about backporting to 3.x. It should be safe, as there aren't any problems with a base of 16. ",
            "author": "Robert Muir",
            "id": "comment-13021742"
        },
        {
            "date": "2011-04-19T20:04:36+0000",
            "content": "I implemented the theoretically O(log log n) complexity algorithm described here and compared timing for Robert's, Yonik's, and my implementation.  Yonik's is fastest .\n\nTimings (log1 is Robert's, log2 is Yonik's, and log3 is mine):\n\nlog1: 2384ms for 100000000 iterations.\nlog2: 1068ms for 100000000 iterations.\nlog3: 1697ms for 100000000 iterations.\n\n\n\nHere's the test, which also compares log2 and log3 against log1 for correctness, or at least consistency (-Xmx4g required to avoid OOMs with 100M iterations):\n\n  public void testLogMethodPerformance() {\n    Random r = new Random();\n    int iterations = 100000000;\n    int[] docFreqs = new int[iterations];\n    int[] skipIntervals = new int[iterations];\n    int[] log1Results = new int[iterations];\n    int[] log2Results = new int[iterations];\n    int[] log3Results = new int[iterations];\n    for (int i = 0 ; i < iterations ; ++i) {\n      docFreqs[i] = r.nextInt(1000000000);\n      skipIntervals[i] = r.nextInt(1023) + 2;\n    }\n    long start = System.currentTimeMillis();\n    for (int i = 0 ; i < iterations ; ++i) {\n      log1Results[i] = MultiLevelSkipListReader.log(docFreqs[i], skipIntervals[i]);\n    }\n    long stop = System.currentTimeMillis();\n    System.err.println(\"log1: \" + (stop - start) + \"ms for \" + iterations + \" iterations.\");\n\n    start = System.currentTimeMillis();\n    for (int i = 0 ; i < iterations ; ++i) {\n      log2Results[i] = MultiLevelSkipListReader.log2(docFreqs[i], skipIntervals[i]);\n    }\n    stop = System.currentTimeMillis();\n    System.err.println(\"log2: \" + (stop - start) + \"ms for \" + iterations + \" iterations.\");\n\n    start = System.currentTimeMillis();\n    for (int i = 0 ; i < iterations ; ++i) {\n      log3Results[i] = MultiLevelSkipListReader.log3(docFreqs[i], skipIntervals[i]);\n    }\n    stop = System.currentTimeMillis();\n    System.err.println(\"log3: \" + (stop - start) + \"ms for \" + iterations + \" iterations.\");\n    \n    for (int i = 0 ; i < iterations ; ++i) {\n      assertEquals(log1Results[i], log2Results[i]);\n      assertEquals(log1Results[i], log3Results[i]);\n    }\n  }\n\n\n\nHere's my implementation:\n\n\n  public static int log3(int x, int b) {\n    long b_lo = 1;\n    long b_hi = b;\n    long b_mid;\n    int lo = 0;\n    int hi = 1;\n    int mid;\n    // Bracket the solution by recursively squaring the base\n    // until the result exceeds x\n    while (b_hi < x) {\n      b_lo = b_hi;\n      b_hi *= b_hi;\n      lo = hi;\n      hi <<= 1;\n    }\n    // Find the solution by performing a binary search between\n    // the bracketing values (lo,hi) found above\n    while (hi - lo > 1) {\n      mid = (lo + hi) >> 1;\n      // b_mid = b_lo * b**(mid-lo)\n      // Java has no integer pow() method - use a loop instead.\n      // Yes, Math.pow(double,double) would work, but it's slower than this.\n      b_mid = b_lo;\n      for (int i = 0 ; i < mid - lo ; ++i) {\n        b_mid *= b;\n      }\n      if (b_mid > x) {\n        hi = mid;\n        b_hi = b_mid;\n      } else if (b_mid < x) {\n        lo = mid;\n        b_lo = b_mid;\n      } else {\n        return mid;\n      }\n    }\n    return b_hi == x ? hi : lo;\n  }\n\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13021757"
        },
        {
            "date": "2011-04-19T20:39:30+0000",
            "content": "Guys, again keep in mind that this log calculation is less than one-thousandth of the time spent in this skipper init.... ",
            "author": "Robert Muir",
            "id": "comment-13021778"
        },
        {
            "date": "2011-04-19T20:44:17+0000",
            "content": "The original method was waaaaaaaaay slower.  I added this to my test:\n\n\n  int[] log0Results = new int[iterations];\n  ...\n  start = System.currentTimeMillis();\n  for (int i = 0 ; i < iterations ; ++i) {\n    log0Results[i] = (docFreqs[i] == 0 \n                   ? 0 : (int) Math.floor( StrictMath.log(docFreqs[i]) \n                                         / StrictMath.log(skipIntervals[i])));\n  }\n  stop = System.currentTimeMillis();\n  System.err.println(\"log0: \" + (stop - start) + \"ms for \" + iterations + \" iterations.\");\n\n\n\nResult:\n\n\nlog0: 17933ms for 100000000 iterations.\nlog1: 2420ms for 100000000 iterations.\nlog2: 1139ms for 100000000 iterations.\nlog3: 1697ms for 100000000 iterations.\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13021783"
        },
        {
            "date": "2011-04-19T20:45:25+0000",
            "content": "Guys, again keep in mind that this log calculation is less than one-thousandth of the time spent in this skipper init....\n\nYeah, just having fun. ",
            "author": "Steve Rowe",
            "id": "comment-13021786"
        },
        {
            "date": "2011-04-19T20:51:51+0000",
            "content": "I know! can you speed up the rest of the skipping too \n ",
            "author": "Robert Muir",
            "id": "comment-13021794"
        },
        {
            "date": "2011-04-19T20:57:43+0000",
            "content": "can you speed up the rest of the skipping too \n\nWell, the code I posted is slower, so I'm afraid that if history is any guide here, I can only promise pessimization... ",
            "author": "Steve Rowe",
            "id": "comment-13021798"
        }
    ]
}