{
    "id": "LUCENE-2195",
    "title": "Speedup CharArraySet if set is empty",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "CharArraySet#contains(...) always creates a HashCode of the String, Char[] or CharSequence even if the set is empty. \ncontains should return false if set it empty",
    "attachments": {
        "LUCENE-2195.patch": "https://issues.apache.org/jira/secure/attachment/12429653/LUCENE-2195.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-01-07T16:32:05+0000",
            "content": "here is a patch ",
            "author": "Simon Willnauer",
            "id": "comment-12797675"
        },
        {
            "date": "2010-01-07T17:01:59+0000",
            "content": "Updated patch. This patch does not count==0 check in contains(Object) as the o.toString() could return null and the NPE would be silently swallowed if the set is empty. \nThe null check and NPE are necessary to yield consistent behavior no matter if the set is empty or not. ",
            "author": "Simon Willnauer",
            "id": "comment-12797684"
        },
        {
            "date": "2010-01-07T17:06:21+0000",
            "content": "Simon I like it. this is useful for things like empty stopword sets, so we do not hash every input token unnecessarily. ",
            "author": "Robert Muir",
            "id": "comment-12797686"
        },
        {
            "date": "2010-01-07T17:22:39+0000",
            "content": "Seems that this patch would just slow things down (slightly) for the common case, and for correctly written code.\nIf one really wants to optimize the case of an empty set, shouldn't that be done at a higher level (i.e. don't put the stop filter in the chain, don't create a set at all, etc).\n\nSo I think we should skip both the null checks and the ==0 checks and leave it as is. ",
            "author": "Yonik Seeley",
            "id": "comment-12797692"
        },
        {
            "date": "2010-01-07T17:33:03+0000",
            "content": "Yonik, I disagree. I would rather see contains() comparisons against empty sets than this kind of if (set != null && set.contains())... i see this code around a lot.\n\nit does not matter, it is the same. ",
            "author": "Robert Muir",
            "id": "comment-12797698"
        },
        {
            "date": "2010-01-07T17:37:51+0000",
            "content": "It's not quite the same - no method call for set != null.\nBut my point stands - this is optimization for the very uncommon case at the expense of the common case.  This specific instance isn't too big of a deal (it's a predictable branch at least), but as a matter of principle we should avoid going down those roads. ",
            "author": "Yonik Seeley",
            "id": "comment-12797701"
        },
        {
            "date": "2010-01-07T17:56:28+0000",
            "content": "well then something must be decided: either we use null sets,remove use of EMPTY_SET all over the place, and have if set != null scattered all over the place, or we go this route. \n\ni do not care either way but we should not be using EMPTY_SET in various tokenstreams without this patch, else we unnecessarily hash every input token for no good reason. ",
            "author": "Robert Muir",
            "id": "comment-12797710"
        },
        {
            "date": "2010-01-07T18:23:59+0000",
            "content": "I changed my patch to please Yonik who has performance concerns as well as robert who wants to use EMTPY_SET instead of set == null checks. \nI agree with robert that I would rather have an empty set instead of null asssigned if the set is omitted or if the default set is empty. Yet, I subclassed UnmodifiableCharArraySet and added a specailized implementation for EMPTY_SET that checks for null to throw the NPE and otherwise always returns false for all contains(...) methods.\nThis class is final and the overhead for the method call should be very small.\n\n ",
            "author": "Simon Willnauer",
            "id": "comment-12797722"
        },
        {
            "date": "2010-01-14T22:54:33+0000",
            "content": "any comments on the latest patch? ",
            "author": "Simon Willnauer",
            "id": "comment-12800405"
        },
        {
            "date": "2010-01-16T17:09:02+0000",
            "content": "Simon i made a few changes (i like the idea of simply a special EmptyCharArraySet so this does not slow down anything else and alleviates any concerns)\n\n\n\tI do not think unmodifiableset should have a no-arg ctor, so instead i pushed this up to emptychararrayset\n\ti do not think emptychararrayset need override and throw uoe for removeAll or retainAll, and i don't think the tests were correct in assuming it will throw uoe. it will not throw uoe for say, removeAll only because it is empty. it will just do nothing.\n\n\n\nnow the emptychararrayset conforms with AbstractCollation.remove/retainAll:\nNote that this implementation will throw an UnsupportedOperationException if the iterator returned by the iterator method does not implement the remove method and this collection contains one or more elements in common with/not present with the specified collection. ",
            "author": "Robert Muir",
            "id": "comment-12801225"
        },
        {
            "date": "2010-01-16T18:38:46+0000",
            "content": "I do not think unmodifiableset should have a no-arg ctor, so instead i pushed this up to emptychararrayset\nok I'm fine with that.\n\n\ni do not think emptychararrayset need override and throw uoe for removeAll or retainAll, and i don't think the tests were correct in assuming it will throw uoe. it will not throw uoe for say, removeAll only because it is empty. it will just do nothing.\n\nYou are right, this should only throw this exception if the set contains it and the Iterator does not implement remove()\n\n     * Note that this implementation throws an\n     * <tt>UnsupportedOperationException</tt> if the iterator returned by this\n     * collection's iterator method does not implement the <tt>remove</tt>\n     * method and this collection contains the specified object.\n\n\n\nsame is true for AbstractSet#removeAll()  & retainAll()\n\nThanks for updating it. I think this is good to go though! \n ",
            "author": "Simon Willnauer",
            "id": "comment-12801252"
        },
        {
            "date": "2010-01-17T22:09:31+0000",
            "content": "Thanks for updating it. I think this is good to go though! \n\nme too, if no one objects I will commit in a few days. ",
            "author": "Robert Muir",
            "id": "comment-12801528"
        },
        {
            "date": "2010-01-25T07:49:01+0000",
            "content": "Committed revision 902723.\n\nThanks Simon! ",
            "author": "Robert Muir",
            "id": "comment-12804429"
        }
    ]
}