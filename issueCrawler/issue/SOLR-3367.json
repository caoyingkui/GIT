{
    "id": "SOLR-3367",
    "title": "Show Logging Events in Admin UI",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "Admin UI"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We can show logging events in the Admin UI.",
    "attachments": {
        "SOLR-3367.patch": "https://issues.apache.org/jira/secure/attachment/12523644/SOLR-3367.patch",
        "SOLR-3367.png": "https://issues.apache.org/jira/secure/attachment/12524404/SOLR-3367.png"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-13255799",
            "date": "2012-04-17T18:22:55+0000",
            "content": "I think it makes sense to have the logging page first show events, and only show the levels as a second step.\n\nIn SOLR-3358, the logging events are returned as a SolrDocumentList so that we can have a unified UI if the events come from a search or the simple RAM buffer "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13258911",
            "date": "2012-04-21T18:33:24+0000",
            "content": "First Version of the UI attached.\n\nTBD:\n\n\tToggle-Option for trace information\n\tColor-Coding for different Levels\n\tKind of 'Auto Refresh'\n\n "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13259153",
            "date": "2012-04-22T15:35:40+0000",
            "content": "TBD:\n\n\n\tToggle-Option for trace information\n\tColor-Coding for different Levels\n\tKind of 'Auto Refresh'\n\n\n\nAbout the Auto-Refresh Option .. I'm not really sure, would we like to have that? If so, will it be enough to have it enabled/disabled (like Autoload on Schema-Browser), or is there a need for additional settings like polling-interval and things like this? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13259325",
            "date": "2012-04-23T00:54:14+0000",
            "content": "Great start!  A few comments:\n\n\n\tcolor scale \u2013 I don't follow the color coding scheme.  I would expect something where red is severe and blue is just info.  something like: http://www.mediacollege.com/lighting/colour/colour-temperature.html\n\n\n\n\n\tFor ordering events \u2013 I like older events on the top and newer ones at the bottom.  For Auto Refresh, just keep adding rows at the bottom.  I don't think we need a \"Load new Events\" button \u2013 just put a spinner at the bottom and refresh every 5/10? seconds.  similar to jenkins\n\n\n\n\n\trather then \"~logging/config\"  maybe \"~logging/level\" since this does not really configure your logging\n\n\n\nI like it "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13259757",
            "date": "2012-04-23T17:37:57+0000",
            "content": "So, how about this one?\n\nThe Handling of Auto-Scrolling right now is a bit poor, bit i'll have a look at the jenkins-one, that is really smooth. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13259794",
            "date": "2012-04-23T18:12:35+0000",
            "content": "better \u2013 some things to consider\n\n\ti don't think it is necessary to grey out the older events\n\trather then showing the long date form in Last Check, how about one that matches the format in the Time column\n\tthis patch is missing the 'logging.html' file\n\n\n\nWhat do you think about adding something like:\n\n#content #logging #viewer thead th.message\n{\n  width:100%;\n}\n\n\nand giving the rest more padding \u2013 this way the layout will stay consistent when you open an exception.\n\nTo show exceptions... what about adding a whole row with <td colspan=\"4\"> and letting you click anywhere on the row to show it?  Perhaps a right-aligned column/icon to show that it has a trace?\n\n\n\n\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13260107",
            "date": "2012-04-24T00:18:39+0000",
            "content": "The auto-update continues to check even when you are not on the page!\n\nOnce I navigate away from logging page, I still see requests going to the logging handler! "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13262426",
            "date": "2012-04-26T07:21:03+0000",
            "content": "New Version, includes all Remarks "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13262428",
            "date": "2012-04-26T07:24:29+0000",
            "content": "To show exceptions... what about adding a whole row with <td colspan=\"4\"> and letting you click anywhere on the row to show it?\n\nI've included two Versions, one with the colspan and one without (you'll find these at lines 340-350). I like the one without colspan, because i find it easier to \"follow\" the list to the next row - but i'm also fine using the other one. just let me know which one we'd like to have :> "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13269912",
            "date": "2012-05-07T19:19:37+0000",
            "content": "looks good stefan \u2013 i commited this in r1335204, but think we can continue making it better.\n\nThe biggest thing I notice when using this with my real data/errors is that most severe errors are really big/wide \u2013 this is why i like the colspan version better.  Looking at it more, I think it would be even better if we could use the 2nd level tab space (Viewer vs Level) as well.\n\nWhat do you think about putting \"Level\" as a sub-menu under \"Logging\" in the far left panel?  This would give the viewer as much width as possible.\n\nCan the 'Level' menu only show up when Logging is selected?  similar to the options that show up when you select a core?\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13269916",
            "date": "2012-05-07T19:21:55+0000",
            "content": "looks like we re missing the \"information-white.png\" "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13270070",
            "date": "2012-05-07T22:48:07+0000",
            "content": "I added the missing Icon in r1335229 - it's mentioned in the patch, but because it's a binary file, it's not fully included .\n\nThe biggest thing I notice when using this with my real data/errors is that most severe errors are really big/wide\nHm, i played a bit around, but i didn't get such a huge stacktrace? Would you mind attaching one (as plain text), that i can check this one?\n\nWhat do you think about putting \"Level\" as a sub-menu under \"Logging\" in the far left panel? This would give the viewer as much width as possible.\n\nCan the 'Level' menu only show up when Logging is selected? similar to the options that show up when you select a core?\nHm, never thought about that ;o i just continued the Navigation-Logic which we used for f.e the Plugins. Will open a separate Ticket for that and start moving the Sub-Navigation for all \"global\" Items out to the left Panel - good idea! "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13270080",
            "date": "2012-05-07T23:15:40+0000",
            "content": "dooh \u2013 attached the screenshot to the wrong issue.  This is what I see for errors on a small (ish) screen:\n\n\nDo you need stacktrace for this?  just putting in ?test=true should get you one too "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13276740",
            "date": "2012-05-16T13:44:44+0000",
            "content": "Hm, i think we should open another Issue for this, or do you think otherwise?\n\nBecause, if you check the difference between:\n\n\n{\n\ttime: \"2012-05-16T13:25:03.679Z\",\n\tlevel: \"SEVERE\",\n\tlogger: \"org.apache.solr.handler.admin.LoggingHandler\",\n\tmessage: \"error (with exception)\",\n\ttrace: \"java.lang.RuntimeException: test\n\t\tat org.apache.solr.handler.admin.LoggingHandler.handleRequestBody(LoggingHandler.java:75)\n\t\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n\t\t...\"\n}\n\n(from /solr/admin/logging?wt=json&since=0&test=true)\n\nand\n\n\n{\n\ttime: \"2012-05-16T13:26:10.722Z\",\n\tlevel: \"SEVERE\",\n\tlogger: \"org.apache.solr.core.SolrCore\",\n\tmessage: \"org.apache.solr.common.SolrException: Can not find: schema.not [/opt/solr-trunk/solr/example/solr/./conf/schema.not]\n\t\tat org.apache.solr.handler.admin.ShowFileRequestHandler.showFromFileSystem(ShowFileRequestHandler.java:229)\n\t\tat org.apache.solr.handler.admin.ShowFileRequestHandler.handleRequestBody(ShowFileRequestHandler.java:122)\n\t\t...\"\n}\n\n(from /solr/collection1/admin/file?file=schema.not&contentType=text/xml;charset=utf-8)\n\nit is pretty clear why your screen looks like what it looks *g it's just one big fat text-message, even the latest revision will not be able to display that in a good fashion.\n\nthe difference seems to be: throwing a new exception (directly) vs. calling a log.xy(), passing a exception as parameter, but can we (and should we?) change this behaviour? "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13396244",
            "date": "2012-06-18T20:58:25+0000",
            "content": "Ryan, would you mind to have a look at my last comment? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13396271",
            "date": "2012-06-18T21:23:51+0000",
            "content": "ya, i see the difference.  Obviously it is best if we can change the messages so they are reasonably short, but this is not realistic for all error messages.  (yes, we should open an issue for this specific error, but it is not an easy fix)\n\nWhatever format we pick should be able to support short or long messages (i think)\n\nPerhaps overflow:hidden?  or an option to toggle overflow:hidden?\n\n\n "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13396976",
            "date": "2012-06-19T18:43:03+0000",
            "content": "Ah, perhaps i was not clear .. or just misunderstood your last comment?\n\nThe Length of the Message (itself) is not really a problem .. we could either use overflow:hidden, like you're already suggesting .. or break on whitespaces - that will both work.\n\nMy Point is about the Fact that second one contains the complete stacktrace as message-key. If we can split them, so that we have a message and a trace (like the first one) for every entry - that would be great .. but don't know if that would be possible? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13397038",
            "date": "2012-06-19T20:18:48+0000",
            "content": "the issue is that some exceptions take the output of 'cause' exceptions and put it in the message body\n\nthrow new RuntimeException( \"error \"+cause );\n\n\nvs\n\nthrow new RuntimeException( \"error message\", cause );\n\n\n\nThe UI should look OK regardless of how people create the error message, but yes keeping the cause as a trace element is much nicer.  This is just an easy way to make a very long message string.\n "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13397765",
            "date": "2012-06-20T18:50:04+0000",
            "content": "Ah okay, makes sense. So, what about the following:\n\nIf the Record contains a trace-Index, everything is great - otherwise we take the message (which in this case will contain the whole thing) and split on the first newline .. using the former part as new message and the latter as trace.\n\nI have to check if this works for only a few / most / or perhaps all exceptions i can get ;>\n\nWill create a new Ticket for this. "
        },
        {
            "author": "Antony Stubbs",
            "id": "comment-13417257",
            "date": "2012-07-18T17:05:33+0000",
            "content": "This functionality appears to break when using LogBack instead of the default setup.. Is there a known way to make it work with logback? Looks like a cool feature. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13417331",
            "date": "2012-07-18T18:14:07+0000",
            "content": "See SOLR-3358 for how to do this with log4j \u2013 implementing a LogBack version should be similarly straightforward "
        },
        {
            "author": "Andreas Hubold",
            "id": "comment-13453919",
            "date": "2012-09-12T11:45:42+0000",
            "content": "This feature is broken in Solr 4.0-BETA - at least with certain schema.xml files. See SOLR-3829. "
        }
    ]
}