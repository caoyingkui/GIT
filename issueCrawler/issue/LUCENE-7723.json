{
    "id": "LUCENE-7723",
    "title": "LongValuesSource/DoubleValuesSource impls should implement equals/hashCode",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Task",
        "components": [],
        "fix_versions": [
            "7.0"
        ]
    },
    "description": "Given that we embed values sources in queries and sorts, from which we expect that they have working equals/hashCode, we should also implement equals/hashCode on LongValuesSource/DoubleValuesSource impls.",
    "attachments": {
        "LUCENE-7723.patch": "https://issues.apache.org/jira/secure/attachment/12866855/LUCENE-7723.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16000442",
            "date": "2017-05-08T08:47:11+0000",
            "content": "Here's a first-pass patch for this.  The main issue is going to be what to do with the function and scoringFunction sources, as there doesn't seem to be an easy way to compare lambdas for equality (see failing test in the patch) - Uwe Schindler do you have any suggestions? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16001363",
            "date": "2017-05-08T19:15:42+0000",
            "content": "The problem is that you have 2 different lambdas, so they are by default \"different\". If you compare instances of functional interfaces, thy are only identical if they are the same instance... The test would work, if you would declare the lambda once and pass it on both sides of the equals.\n\nTo make the whole thing more complicated: Lambdas without captures should compare to each other if declared once. So that means if you have a method that returns a functional interface instance and this functional instance does not depend on anything from the outside (like function parameters, local variables), it would be a singleton and the method would return the same each time. But as soon as the lambda refers to variables outside the lambda, it gets a caturing one (capturing the external variables). Then every instance is different, because it creates an object instance (it cannot reuse as the captured variables are final fields inside the lambda implementation class). So you should never rely on equalness or sameness for lambdas. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16027868",
            "date": "2017-05-28T17:15:13+0000",
            "content": "Thinking this over, I'm tempted to move the function and scoringFunction ValuesSources to the test module and not try and implement equals/hashCode() for them.  They're fairly esoteric, and clients are far more likely to use something like the expressions module for this sort of thing. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16038881",
            "date": "2017-06-06T13:28:50+0000",
            "content": "Here's a patch adding abstract equals(), hashCode() and toString() to LongValuesSource and DoubleValuesSource, and moving the function() and scoringFunction() DVS implementations to test code. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16054290",
            "date": "2017-06-19T16:32:11+0000",
            "content": "Any objections to me committing this? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16064954",
            "date": "2017-06-27T14:54:22+0000",
            "content": "Commit 1a278ae89bee3072803abe2387091df9942e96af in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1a278ae ]\n\nLUCENE-7723: Add hashCode and equals to DoubleValuesSource ",
            "author": "ASF subversion and git services"
        }
    ]
}