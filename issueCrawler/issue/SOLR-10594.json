{
    "id": "SOLR-10594",
    "title": "Revise SolrConfigHandler.reloadLock after SolrCloudExampleTest fix",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "SOLR-10588 fixed SolrCloudExampleTest by introducing ill dependency SolrCore --> SolrConfigHandler.reloadLock let's think how we can design it better. And it's also worth to think about overall flow: core reload is triggered by Zk listener and SolrConfigHandler see SOLR-10588",
    "attachments": {
        "SOLR-10594.patch": "https://issues.apache.org/jira/secure/attachment/12866748/SOLR-10594.patch",
        "SOLR-10594 no reload on config GET.patch": "https://issues.apache.org/jira/secure/attachment/12866157/SOLR-10594%20no%20reload%20on%20config%20GET.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-03T08:04:25+0000",
            "content": "silently ignoring a reload is not safe. If a reload is requested, just wait till the current reload completes and ensure that the expected state (if there is one) is achieved .  ",
            "author": "Noble Paul",
            "id": "comment-15994445"
        },
        {
            "date": "2017-05-03T10:34:44+0000",
            "content": "SOLR-10594 no reload on config GET.patch it's wondering but looks like it passes all existing tests.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-15994644"
        },
        {
            "date": "2017-05-06T22:27:29+0000",
            "content": "SOLR-10594.patch drops SolrConfigHandler.reloadLock, and reload triggering on handleGET keeping all existing tests green. I suppose even concurrent config updates (which we probably don't have a test for) will work on SOLR-10594.patch relying on Zk listening only.\n\nNoble Paul, are you fine to have it committed?   ",
            "author": "Mikhail Khludnev",
            "id": "comment-15999612"
        },
        {
            "date": "2017-05-07T20:06:39+0000",
            "content": "ant beast -Dbeast.iters=10  -Dtestcase=*ConfigHandler*\nis fine, core tests are fine too.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16000033"
        },
        {
            "date": "2017-05-10T19:33:06+0000",
            "content": "Noble Paul \nCould you check the last patch? It should work for two concurrent updates as follows: \n\n\tZookeeper will order updates, assigns versions and send watcher events in order.\n\tSince SolrCore.reload() is protected with the own synchronised section, cores are reloaded twice in the same correct order.\nTherefore, if we remove reload on GET from SolrConfigHandler and reloadLock from it, we will at least correctly handle two concurrent config updates. That's really enough I suppose, and I'm just not sure about ordering between the second and the third updates, but it might work too. \nThe current code is probably exposed to the risk you mentioned, anyway. And it's not really possible to step back to pre https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=commitdiff;h=cbd3b02 since that behaviour caused two core reload on single update and breaks a plenty of CLI/example tests. It was like this: test applied config change, got confirmation and stop the instance, while the second redundant reload occurs. And it seems like it's not easy to make reload safe for shutdown.   \n\n\n\nWould you mind if I commit the last patch? ",
            "author": "Mikhail Khludnev",
            "id": "comment-16005269"
        },
        {
            "date": "2017-05-17T11:20:36+0000",
            "content": "Noble Paul, I think I can commit next week if there are no new concerns nor vetoes.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16013864"
        },
        {
            "date": "2017-06-03T19:56:43+0000",
            "content": "adding CHANGES to  SOLR-10594.patch, will commit shortly.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16036072"
        },
        {
            "date": "2017-06-03T20:22:16+0000",
            "content": "it hangs TestBulkSchemaConcurrent ",
            "author": "Mikhail Khludnev",
            "id": "comment-16036082"
        },
        {
            "date": "2017-06-05T19:16:12+0000",
            "content": "well, that TestBulkSchemaConcurrent failure doesn't reproduce on the patched core anymore. Anyway, let's move reloadLock from handler to SolrCore, it should look much better and keep existing logic.     ",
            "author": "Mikhail Khludnev",
            "id": "comment-16037425"
        }
    ]
}