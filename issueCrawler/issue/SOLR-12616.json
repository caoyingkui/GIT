{
    "id": "SOLR-12616",
    "title": "Track down performance slowdowns with ExportWriter",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "streaming expressions"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.5",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Just to be clear for users glancing through this Jira : The performance slowdown is currently on an unreleased version of Solr so no versions are affected by this.\n\nWhile doing some benchmarking for\u00a0SOLR-12572 , I compared the export writers performance against Solr 7.4 and there seems to be some slowdowns that have been introduced. Most likely this is because of SOLR-11598\n\nIn an 1 shard 1 replica collection with 25M docs. We issue the following query\u00a0\n\n/export?q=*:*&sort=id desc&fl=id\n\nSolr 7.4 took 8:10 , 8:20 and 8:22 in the 3 runs that I did\n\nMaster took 10:46\n\nAmrit's done some more benchmarking so he can fill in with some more numbers here.",
    "attachments": {
        "SingleSortValue-1.png": "https://issues.apache.org/jira/secure/attachment/12934657/SingleSortValue-1.png",
        "DefaultCode-2.png": "https://issues.apache.org/jira/secure/attachment/12934656/DefaultCode-2.png",
        "DefaultCode-1.png": "https://issues.apache.org/jira/secure/attachment/12934655/DefaultCode-1.png",
        "SOLR-12616.patch": "https://issues.apache.org/jira/secure/attachment/12934375/SOLR-12616.patch",
        "SingleSortValue-2.png": "https://issues.apache.org/jira/secure/attachment/12934658/SingleSortValue-2.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-04T03:48:30+0000",
            "content": "Patch which\u00a0tests SingleValueSortDoc vs\u00a0SortDoc\u00a0\n\nIndexed 25M docs onto a 1 shard X 1 replica collection.\u00a0\n\nquery\u00a0-\u00a0/export?q=:&fl=id&sort=id desc\u00a0\n\nWith\u00a0 -Dtest.export.writer.optimized=true\u00a0=\u00a07m13 ,\u00a07m23\n\nWithout\u00a0-Dtest.export.writer.optimized=true\u00a0=\u00a010m27 ,\u00a010m31\u00a0\n\n\u00a0\n\nFor both SortDoc and\u00a0SingleValueSortDoc\n\nlessThan get's called 33049246584 times\nsetValues get's called 11220331053 times ",
            "author": "Varun Thacker",
            "id": "comment-16569031"
        },
        {
            "date": "2018-08-07T02:30:25+0000",
            "content": "I can't seem to track down the difference b/w\u00a0SortDoc and SingleValueSortDoc and why\u00a0SingleValueSortDoc is so much faster.\n\nI tried another round of experiments where I assumed SortDoc will only have one sort field and modified the following functions to mimic\u00a0SingleValueSortDoc . The only difference at this point from SingleValueSortDoc\u00a0is that sortValues is still an array of length one VS a variable. The speed difference still exists\u00a0\n\n  public void setValues(SortDoc sortDoc) {\n    this.docId = sortDoc.docId;\n    this.ord = sortDoc.ord;\n    this.docBase = sortDoc.docBase;\n    sortValues[0].setCurrentValue((sortDoc.sortValues[0]));\n  }\n\n  public boolean lessThan(Object o) {\n    if(docId == -1) {\n      return true;\n    }\n    int comp = sortValues[0].compareTo(sd.sortValues[0]);\n    if(comp == -1) {\n      return true;\n    } else if (comp == 1) {\n      return false;\n    } else {\n      return docId+docBase > sd.docId+sd.docBase;\n    }\n  }\n\n\n\nTo bring back the old performance the one approach we could take is still keep the specialized classes for upto 4 sort fields by doing this in the export writer\n\nif (sortValues.length == 1) {\n  return new SingleValueSortDoc(sortValues[0]);\n} else if (sortValues.length == 2) {\n  return new DoubleValueSortDoc(sortValues[0]);\n} ... for 3 and 4 sort fields .. \n else {\n  return new SortDoc(sortValues);\n}\n\n\n\n\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16571042"
        },
        {
            "date": "2018-08-07T14:29:32+0000",
            "content": "Thanks Varun for such detailed analysis and feedback on the issue. I see SOLR-11598 resulted in slowness. Benchmarks done at my end also validates an approx 10-18% slowdowns in overall processing of export results.\n\nI digged deeper and found the actual function which is slow, but have no idea of reason. Let me share the analysis first:\n\nFor query Q1, single sort, with SingleValueSortDoc introduced again, taking 4 mins, while vanila master branch code taking 4:45 mins. I attached a sampler on solr server and attaching screenshots in the jira for the respective export query executions.\n\nIf you see screenshots: SingleSortValue-2 and DefaultSortValue-2, the only significant difference (around 33 secs) between the processing times of respective executions is setCurrentValue(docId), which we haven't touched.\nSingleSortValue: setCurrentValue(docId): 148 secs\nDefaultCode: setCurrentValue(docId): 181 secs\n\nI have analyzed the code properly enough to conclude we are not making extra / unnecessary calls  for setCurrentValue, we know the exact line number which is causing the slowness: ExportWriter:235 ",
            "author": "Amrit Sarkar",
            "id": "comment-16571751"
        },
        {
            "date": "2018-08-08T18:04:20+0000",
            "content": "Patch which adds back\u00a0SingleValueSortDoc/ DoubleValueSortDoc/ TripleValueSortDoc/ QuadValueSortDoc classes. The speed is back to the original speed after doing some tests.\n\n\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16573611"
        },
        {
            "date": "2018-08-08T20:28:11+0000",
            "content": "Commit e9f3a3ce1d482bd90ba8aca6e8cb7fe6c86756eb in lucene-solr's branch refs/heads/master from Varun Thacker\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e9f3a3c ]\n\nSOLR-12616: Optimize Export writer upto 4 sort fields to get better performance. This was removed in SOLR-11598 but brought back in the same version ",
            "author": "ASF subversion and git services",
            "id": "comment-16573820"
        },
        {
            "date": "2018-08-08T20:30:24+0000",
            "content": "Commit 13b9e28f9dbb0d117d8758c37d8df7d4c17a9edc in lucene-solr's branch refs/heads/branch_7x from Varun Thacker\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=13b9e28f ]\n\nSOLR-12616: Optimize Export writer upto 4 sort fields to get better performance. This was removed in SOLR-11598 but brought back in the same version\n\n(cherry picked from commit e9f3a3c) ",
            "author": "ASF subversion and git services",
            "id": "comment-16573824"
        },
        {
            "date": "2018-08-10T09:13:47+0000",
            "content": "Commit e9f3a3ce1d482bd90ba8aca6e8cb7fe6c86756eb in lucene-solr's branch refs/heads/jira/http2 from Varun Thacker\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e9f3a3c ]\n\nSOLR-12616: Optimize Export writer upto 4 sort fields to get better performance. This was removed in SOLR-11598 but brought back in the same version ",
            "author": "ASF subversion and git services",
            "id": "comment-16575995"
        }
    ]
}