{
    "id": "SOLR-11386",
    "title": "Extracting learning to rank features fails when word ordering of EFI argument changed.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "contrib - LTR"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.5.1",
        "resolution": "Workaround",
        "status": "Resolved"
    },
    "description": "I'm getting some extremely strange behavior when trying to extract features for a learning to rank model. The following query incorrectly says all features have zero values:\n\n\nhttp://gss-test-fusion.usersys.redhat.com:8983/solr/access/query?q=added couple of fiber channel&rq={!ltr model=redhat_efi_model reRankDocs=1 efi.case_summary=the efi.case_description=added couple of fiber channel efi.case_issue=the efi.case_environment=the}&fl=id,score,[features]&rows=10\n\n\n\nBut this query, which simply moves the word \"added\" from the front of the provided text to the back, properly fills in the feature values:\n\n\nhttp://gss-test-fusion.usersys.redhat.com:8983/solr/access/query?q=couple of fiber channel added&rq={!ltr model=redhat_efi_model reRankDocs=1 efi.case_summary=the efi.case_description=couple of fiber channel added efi.case_issue=the efi.case_environment=the}&fl=id,score,[features]&rows=10\n\n\n\nThe explain output for the failing query can be found here:\n\nhttps://gist.github.com/manisnesan/18a8f1804f29b1b62ebfae1211f38cc4\n\nand the explain output for the properly functioning query can be found here:\n\nhttps://gist.github.com/manisnesan/47685a561605e2229434b38aed11cc65",
    "attachments": {
        "solr_efi_examples.zip": "https://issues.apache.org/jira/secure/attachment/12892413/solr_efi_examples.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-09-21T17:49:44+0000",
            "content": "\nHi Michael,\n\nThanks for reporting this strange behaviour! Saw your post on the mailing list yesterday but was unable to try out the http://gss-test-fusion.usersys.redhat.com:8983 links you shared (and perhaps am not meant to be able to try them anyhow).\n\nEveryone is investigating things differently of course, but here's a few things I might try (and perhaps you've already tried them too), in more or less this order:\n\n\n\tThe gist for the broken scenario shows\n\n...\n... efi.case_description=added couple of fiber channel efi.case_issue= ...\n...\n\n\nwhereas the gist for the working scenario shows\n\n...\n... efi.case_description=couple of fiber channel added  efi.case_issue= ...\n...\n\n\nwith the latter have an extra space before the efi.case_issue= - just curious if that might be relevant or not.\n\n\n\n\n\tIt seems that perhaps the efi.case_description being multi-term has something to do with it.\n\t\n\t\tIf it's just one term does it work then (I'd guess so) and is it the addition of the second or subsequent terms that results in the strange behaviour?\n\t\tDo the terms matter maybe? I'd guess not but worth just trying out.\n\t\tThe efi.case_description is accompanied by efi.case_summary and efi.case_issue and efi.case_environment - and that should work and the order should not matter - but it might be worth exploring if changing of the order ( or removing of the accompanying efi s) brings any insights.\n\t\t\n\t\t\tSpecifically I'm wondering if the efi.case_description 'grabbed' the subsequent efi s (but did not grab them when there was the extra space) and then the subsequent efi s being missing causes the strange behavior. (If that is so then obviously it would be helpful to receive a better error message or something from Solr.)\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\tCould the example be transferred to and reproduced with Solr's techproducts example. https://lucene.apache.org/solr/guide/6_6/learning-to-rank.html#LearningToRank-QuickStartExample\n\n\n\n\n\tAddition of a test case e.g. in TestExternalFeatures.java to reproduce the strange behavior.\n\n ",
            "author": "Christine Poerschke",
            "id": "comment-16175189"
        },
        {
            "date": "2017-09-21T19:05:53+0000",
            "content": "Thanks for the reply, Christine Poerschke. After further investigation, I think the issue is the multi-term EFI arguments. The query I thought was working is actually only returning the extracted feature values corresponding to the first term. So:\n\n\nhttp://gss-test-fusion.usersys.redhat.com:8983/solr/access/query?q=couple of fiber channel added&rq={!ltr model=redhat_efi_model reRankDocs=1 efi.case_summary=the efi.case_description=of fiber channel added couple efi.case_issue=the efi.case_environment=the}&fl=id,score,[features]&rows=10\n\n\n\nis the same as:\n\n\nhttp://gss-test-fusion.usersys.redhat.com:8983/solr/access/query?q=couple of fiber channel added&rq={!ltr model=redhat_efi_model reRankDocs=1 efi.case_summary=the efi.case_description=of efi.case_issue=the efi.case_environment=the}&fl=id,score,[features]&rows=10\n\n\n\n(i.e., all zeros because \"of\" is a stop word). And:\n\n\nhttp://gss-test-fusion.usersys.redhat.com:8983/solr/access/query?q=couple of fiber channel added&rq={!ltr model=redhat_efi_model reRankDocs=1 efi.case_summary=the efi.case_description=fiber channel added couple of efi.case_issue=the efi.case_environment=the}&fl=id,score,[features]&rows=10\n\n\n\nis the same as:\n\n\nhttp://gss-test-fusion.usersys.redhat.com:8983/solr/access/query?q=couple of fiber channel added&rq={!ltr model=redhat_efi_model reRankDocs=1 efi.case_summary=the efi.case_description=fiber efi.case_issue=the efi.case_environment=the}&fl=id,score,[features]&rows=10\n\n\n\nThis is an example of how we're defining the features:\n\n\n    {\n        \"store\": \"redhat_efi_feature_store\",\n        \"name\": \"case_description_issue_tfidf\",\n        \"class\": \"org.apache.solr.ltr.feature.SolrFeature\",\n        \"params\": {\n            \"q\": \"{!field f=issue_tfidf}${case_description}\"\n        }\n    }\n\n ",
            "author": "Michael A. Alcorn",
            "id": "comment-16175297"
        },
        {
            "date": "2017-09-22T13:31:30+0000",
            "content": "I think this has nothing to do with the LTR plugin. \nThe problem here should be just the way you use the local params, \nto properly pass multi term local params in Solr you need to use ' : \n\nefi.case_description='added couple of fiber channel' \n\nThis should work. \nIf not only the first term will be passed as a local param and then passed in the efi map to LTR. \nThe same should apply to the request parameter I guess. ",
            "author": "Alessandro Benedetti",
            "id": "comment-16176417"
        },
        {
            "date": "2017-09-22T15:13:29+0000",
            "content": "Thanks for the reply, Alessandro Benedetti. Unfortunately, using single quotes did not fix the query. In fact, it causes queries that were previously returning non-zero features to return all zero values, e.g.:\n\n\nhttp://gss-test-fusion.usersys.redhat.com:8983/solr/access/query?q=couple of fiber channel added&rq={!ltr model=redhat_efi_model reRankDocs=1 efi.case_summary=the efi.case_description='fiber channel added couple of' efi.case_issue=the efi.case_environment=the}&fl=id,score,[features]&rows=10\n\n\n\nAlso, the Solr documentation doesn't mention anything about using single quotes with local parameters. ",
            "author": "Michael A. Alcorn",
            "id": "comment-16176572"
        },
        {
            "date": "2017-09-22T15:58:15+0000",
            "content": "According to your solr feature definition and your efi (efi.case_description), that is equivalent to a phrase query :\n\nissue_tfidf:\"fiber channel added couple of\"\n\nIs this what you were expecting for that feature? ",
            "author": "Alessandro Benedetti",
            "id": "comment-16176620"
        },
        {
            "date": "2017-09-22T16:53:37+0000",
            "content": "Alessandro Benedetti - yes. actually, this is not what I want, I apologize. I want a multi-term query where the order of the tokens does not influence the score. ",
            "author": "Michael A. Alcorn",
            "id": "comment-16176708"
        },
        {
            "date": "2017-09-22T17:28:31+0000",
            "content": "And just to clarify what I observed with the quoting behavior,:\n\n\nhttp://gss-test-fusion.usersys.redhat.com:8983/solr/access/query?q=couple of fiber channel added&rq={!ltr model=redhat_efi_model reRankDocs=1 efi.case_summary=the efi.case_description=fiber channel added couple of efi.case_issue=the efi.case_environment=the}&fl=id,score,[features]&rows=10\n\n\n\nand:\n\n\nhttp://gss-test-fusion.usersys.redhat.com:8983/solr/access/query?q=couple of fiber channel added&rq={!ltr model=redhat_efi_model reRankDocs=1 efi.case_summary=the efi.case_description=fiber efi.case_issue=the efi.case_environment=the}&fl=id,score,[features]&rows=10\n\n\n\nreturn identical non-zero values for the features while:\n\n\nhttp://gss-test-fusion.usersys.redhat.com:8983/solr/access/query?q=couple of fiber channel added&rq={!ltr model=redhat_efi_model reRankDocs=1 efi.case_summary=the efi.case_description='fiber channel added couple of' efi.case_issue=the efi.case_environment=the}&fl=id,score,[features]&rows=10\n\n\n\nreturns all zero values for the features. Strangely,:\n\n\nhttp://gss-test-fusion.usersys.redhat.com:8983/solr/access/query?q=couple of fiber channel added&rq={!ltr model=redhat_efi_model reRankDocs=1 efi.case_summary=the efi.case_description='fiber' efi.case_issue=the efi.case_environment=the}&fl=id,score,[features]&rows=10\n\n\n\n(using a single term with single quotes) returns identical feature values to the first two queries. ",
            "author": "Michael A. Alcorn",
            "id": "comment-16176770"
        },
        {
            "date": "2017-09-22T17:41:38+0000",
            "content": "I just set up a local install of Solr 6.6.0 with a toy data set and tested multi-term EFI arguments using single quotes and it worked as expected. The issue seems to be isolated to older Solr versions. We'll upgrade our development version and see if that fixes it. ",
            "author": "Michael A. Alcorn",
            "id": "comment-16176795"
        },
        {
            "date": "2017-10-13T17:05:29+0000",
            "content": "I was incorrect. The issue persists in Solr 6.6.0, however, I believe I've discovered a workaround. If you use:\n\n\n    {\n        \"store\": \"redhat_efi_feature_store\",\n        \"name\": \"case_description_issue_tfidf\",\n        \"class\": \"org.apache.solr.ltr.feature.SolrFeature\",\n        \"params\": {\n            \"q\":\"{!dismax qf=text_tfidf}${text}\"\n        }\n    }\n\n\n\ninstead of:\n\n\n    {\n        \"store\": \"redhat_efi_feature_store\",\n        \"name\": \"case_description_issue_tfidf\",\n        \"class\": \"org.apache.solr.ltr.feature.SolrFeature\",\n        \"params\": {\n            \"q\": \"{!field f=issue_tfidf}${case_description}\"\n        }\n    }\n\n\n\nyou can then use single quotes to incorporate multi-term arguments as Alessandro Benedetti suggested. ",
            "author": "Michael A. Alcorn",
            "id": "comment-16203861"
        },
        {
            "date": "2017-10-16T17:02:41+0000",
            "content": "Alessandro Benedetti - the attached files provide a minimum working example demonstrating the unexpected behavior.  ",
            "author": "Michael A. Alcorn",
            "id": "comment-16206197"
        },
        {
            "date": "2017-10-16T17:11:09+0000",
            "content": "I should also clarify that I do not want a phrase query, i.e., the order of the tokens should not matter (I'm still learning the Solr jargon). ",
            "author": "Michael A. Alcorn",
            "id": "comment-16206223"
        },
        {
            "date": "2017-10-17T11:40:15+0000",
            "content": "So :\n1) I tried to build a test from your examples and I can not reproduce the issue :\norg.apache.solr.ltr.feature.TestExternalFeatures\n\n@Test\n  public void featureExtraction_multiTermEfi_shouldScoreFeature() throws Exception {\n    final SolrQuery query = new SolrQuery();\n    query.setQuery(\"*:*\");\n    query.add(\"rows\", \"1\");\n\n    final String docs0fv_csv = FeatureLoggerTestUtils.toFeatureVector(\n        \"occurrences\",\"2.3\", \"originalScore\",\"1.0\");\n\n    query.remove(\"fl\");\n    query.add(\"fl\", \"score,fvalias:[fv store=fstore3 efi.myOcc=2.3]\");\n    query.add(\"rq\", \"{!ltr reRankDocs=10 model=externalmodel efi.user_query='w1 w2 w3' efi.myOcc=2.3}\");\n    assertJQ(\"/query\" + query.toQueryString(), \"/response/docs/[0]/fvalias=='\"+docs0fv_csv+\"'\");\n\n  }\n\n\n\nI set a breakpoint at org/apache/solr/ltr/feature/SolrFeature.java:143, and I see a proper macro expansion .\nWould be great if you can contribute a test like that, that shows the wrong behaviour\n\n2) If you want all the clauses of your query to match mandatory, but you don't care about the keyword positions your dismax query should do the trick :\nThe mm parameter speciifes the minimum should match and the default value of mm is 100% (meaning that all clauses must match). ",
            "author": "Alessandro Benedetti",
            "id": "comment-16207523"
        },
        {
            "date": "2017-11-01T18:26:52+0000",
            "content": "To close the loop on this, the issue is that the FieldQParser automatically converts multiple terms into phrases. ",
            "author": "Michael A. Alcorn",
            "id": "comment-16234526"
        }
    ]
}