{
    "id": "SOLR-11600",
    "title": "Add Constructor to SelectStream which takes StreamEvaluators as argument. Current schema forces one to enter a stream expression string only",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "SolrJ",
            "streaming expressions"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "6.6.1,                                            7.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The use case is to be able able to supply stream evaluators over a rollup stream in the following manner, but with instead with Strongly typed objects and not steaming-expression strings.\n\n\n\ncurl --data-urlencode 'expr=select(\nid,\ndiv(sum(cat1_i),sum(cat2_i)) as metric1,\ncoalesce(div(sum(cat1_i),if(eq(sum(cat2_i),0),null,sum(cat2_i))),0) as metric2,\nrollup(\nsearch(col1, q=*:*, fl=\"id,cat1_i,cat2_i,cat_s\", qt=\"/export\", sort=\"cat_s asc\"),\nover=\"cat_s\",sum(cat1_i),sum(cat2_i)\n))' http://localhost:8983/solr/col1/stream\n\n\n\n\nthe current code base does not allow one to provide selectedEvaluators in a constructor, so one cannot prepare their select stream via java code:\n\n\npublic class SelectStream extends TupleStream implements Expressible {\n    private static final long serialVersionUID = 1L;\n    private TupleStream stream;\n    private StreamContext streamContext;\n    private Map<String, String> selectedFields;\n    private Map<StreamEvaluator, String> selectedEvaluators;\n    private List<StreamOperation> operations;\n\n    public SelectStream(TupleStream stream, List<String> selectedFields) throws IOException {\n        this.stream = stream;\n        this.selectedFields = new HashMap();\n        Iterator var3 = selectedFields.iterator();\n\n        while(var3.hasNext()) {\n            String selectedField = (String)var3.next();\n            this.selectedFields.put(selectedField, selectedField);\n        }\n\n        this.operations = new ArrayList();\n        this.selectedEvaluators = new HashMap();\n    }\n\n    public SelectStream(TupleStream stream, Map<String, String> selectedFields) throws IOException {\n        this.stream = stream;\n        this.selectedFields = selectedFields;\n        this.operations = new ArrayList();\n        this.selectedEvaluators = new HashMap();\n    }",
    "attachments": {
        "SOLR-11600.patch": "https://issues.apache.org/jira/secure/attachment/12896269/SOLR-11600.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-06T21:00:26+0000",
            "content": "Uploaded first draft patch without tests. It can be coded better. The thing to notice is: we have to pass our own StreamFactory everytime we make request from SolrJ. \n\nPretty sure Joel will have better solution than this. ",
            "author": "Amrit Sarkar",
            "id": "comment-16240885"
        },
        {
            "date": "2017-11-19T12:44:08+0000",
            "content": "Examples are listed under https://lucene.apache.org/solr/guide/6_6/streaming-expressions.html#StreamingExpressions-StreamingRequestsandResponses and http://joelsolr.blogspot.in/2015/04/the-streaming-api-solrjio-basics.html.\n\nI have cooked one example against master branch, which strictly required httpClient::4.5.3\n\n\npackage stream.example;\n\nimport org.apache.solr.client.solrj.SolrServerException;\nimport org.apache.solr.client.solrj.io.SolrClientCache;\nimport org.apache.solr.client.solrj.io.Tuple;\nimport org.apache.solr.client.solrj.io.eval.DivideEvaluator;\nimport org.apache.solr.client.solrj.io.stream.CloudSolrStream;\nimport org.apache.solr.client.solrj.io.stream.SelectStream;\nimport org.apache.solr.client.solrj.io.stream.StreamContext;\nimport org.apache.solr.client.solrj.io.stream.TupleStream;\nimport org.apache.solr.client.solrj.io.stream.expr.StreamFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport java.io.IOException;\nimport java.lang.invoke.MethodHandles;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class QuerySolr {\n\n    private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n\n    static StreamFactory streamFactory = new StreamFactory()\n            .withCollectionZkHost(\"collection1\",\"localhost:9983\")\n            .withFunctionName(\"select\", SelectStream.class)\n            .withFunctionName(\"search\", CloudSolrStream.class)\n            .withFunctionName(\"div\", DivideEvaluator.class);\n\n    public static void main(String args[]) throws IOException, SolrServerException {\n\n        SelectStream stream = (SelectStream)streamFactory\n                .constructStream(\"select(\\n\" +\n                        \"  search(collection1, fl=\\\"id,A_i,B_i\\\", q=\\\"*:*\\\", sort=\\\"id asc\\\"),\\n\" +\n                        \"  id as UNIQUE_KEY,\\n\" +\n                        \"  div(A_i,B_i) as divRes\\n\" +\n                        \")\");\n\n        attachStreamFactory(stream);\n\n        List<Tuple> tuples = getTuples(stream);\n        for (Tuple tuple : tuples) {\n            log.info(\"tuple: \" + tuple.getMap());\n            System.out.println(\"tuple: \" + tuple.getMap());\n        }\n        System.exit(0);\n    }\n\n    private static void attachStreamFactory(TupleStream tupleStream) {\n        StreamContext context = new StreamContext();\n        context.setSolrClientCache(new SolrClientCache());\n        context.setStreamFactory(streamFactory);\n        tupleStream.setStreamContext(context);\n    }\n\n    private static List<Tuple> getTuples(TupleStream tupleStream) throws IOException {\n        tupleStream.open();\n        List<Tuple> tuples = new ArrayList();\n        for(;;) {\n            Tuple t = tupleStream.read();\n            if(t.EOF) {\n                break;\n            } else {\n                tuples.add(t);\n            }\n        }\n        tupleStream.close();\n        return tuples;\n    }\n}\n\n\n\nI need System.exit(0); to terminate the program, so pretty sure some httpclient is not getting closed properly or such.\n\nAlso, the patch above is absolutely not required to make this work, we can move forward with above examples and streams can be constructed without adding constructors to each stream source, decorators or evaluators. The only condition is we have to pass our own streamFactory.\n\nHope it helps.\n\nP.S. Please disregard the PATCH, it serves no purpose. ",
            "author": "Amrit Sarkar",
            "id": "comment-16258474"
        },
        {
            "date": "2017-11-20T17:41:19+0000",
            "content": "Meanwhile I had a second look on the description of yours again; you are aspiring proper Java constructors. Well it is bit challenging considering it StreamOperation is an interface and not exactly class which we can pass incoming raw string value. I will see what can be done.  ",
            "author": "Amrit Sarkar",
            "id": "comment-16259537"
        },
        {
            "date": "2017-11-21T13:51:24+0000",
            "content": "Some of early Streaming API class have constructors that can be used directly. The current direction though is to move away from people using the Streaming API java classes directly. This is mainly because it's just too difficult to support the java classes directly because it doubles the documentation, tests etc...\n\nIt's also quite tricky to actually use the Java API directly and Streaming Expressions are much easier to work with. \n\nOne of the things to consider is looking at where the Streaming Expressions can become more type safe. Each expression has it's own set of rules for the parameters that it accepts so we can get very specific with how type safety is handled. We could also add a command to the /stream handler to just compile the expression and not run, to see what errors occur at compile time.\n ",
            "author": "Joel Bernstein",
            "id": "comment-16260755"
        },
        {
            "date": "2017-11-21T14:34:30+0000",
            "content": "Thank you Joel Bernstein for the explanation; \n\nEach expression has it's own set of rules for the parameters that it accepts so we can get very specific with how type safety is handled\nI completely understand this by the following example\n\nreplace( fieldA, add( fieldB, if( eq(fieldC,0), 0, 1)))\n\n\nThis nested evaluation and operation is not possible to create with current Java constructors available, as the constructors of evaluators and operations have most just one type of constructor with StreamExpression (StreamExpressionParameter interface) parameter which the evaluators or operators doesn't implement (they implement Expressible interface).\n\n  public AddEvaluator(StreamExpression expression, StreamFactory factory) throws IOException{\n    super(expression, factory);\n    \n    if(containedEvaluators.size() < 1){\n      throw new IOException(String.format(Locale.ROOT,\"Invalid expression %s - expecting at least one value but found %d\",expression,containedEvaluators.size()));\n    }\n  }\n\n\n\nTo accomodate the above request, strongly types java objects for all, we need to create rule-based constructors for all the evaluators and operators, so that those can be used in SelectStream. ",
            "author": "Amrit Sarkar",
            "id": "comment-16260797"
        },
        {
            "date": "2017-11-21T20:31:09+0000",
            "content": "There is an approach in Java that you can use to build the expressions so you don't have to use the strings directly.\n\nThe approach is to use the StreamExpression classes to construct the expression:\n\nStreamExpression\nStreamExpressionParameter\nStreamExpressionNamedParameter\nStreamExpressionValue\n\nIf you take a look at the toExpression method of many of the Streams you'll see how a TupleStream turns itself into a StreamExpression.\n\nYou can think of Streaming Expressions as having three representations:\n\n1) String Expression: used as the query language and serialization format.\n2) StreamExpression: intermediate format that can become a string or a TupleStream\n3) TupleStream: these are the compiled stream objects.\n\nAt Alfresco we have code that uses the StreamExpression classes to build expressions and compile them to TupleStreams. This has worked quite well for us.\n\n\n\n\n\n ",
            "author": "Joel Bernstein",
            "id": "comment-16261446"
        }
    ]
}