{
    "id": "LUCENE-1721",
    "title": "IndexWriter to allow deletion by doc ids",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "It would be great if IndexWriter would allow for deletion by doc ids as well. It makes sense for cases where a \"query\" has been executed beforehand, and later, that query needs to be applied in order to delete the matched documents.\n\nMore information here: http://www.nabble.com/Delete-by-docId-in-IndexWriter-td24239930.html",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2009-06-29T10:18:16+0000",
            "content": "This is a frequently requested feature, and I agree it'd be useful, but the problem is docID is in general not usable in the context of a writer since docIDs shift when segments that have deletions are committed. ",
            "author": "Michael McCandless",
            "id": "comment-12725109"
        },
        {
            "date": "2009-06-29T12:02:29+0000",
            "content": "how about a delete method on the IndexWriter that takes a segment number and a document id\n\nit would also be required to add methods to the IndexReader to get the segment number and local document id for a docid, but this should then work just fine ",
            "author": "Tim Smith",
            "id": "comment-12725140"
        },
        {
            "date": "2009-06-29T12:06:04+0000",
            "content": "i suppose even that approach would cause problems if segments merge between getting the segment number/local doc pair and actuallly asking for the delete ",
            "author": "Tim Smith",
            "id": "comment-12725141"
        },
        {
            "date": "2009-07-06T16:22:23+0000",
            "content": "Right, a merge can commit at any time.\n\nSince a writer can change docIDs at any time, it's never safe for something outside to hold onto docIDs; this is what's good about delete by Term and by Query: they are \"late binding\", ie, only resolve to docID at the exact moment deletion is done. ",
            "author": "Michael McCandless",
            "id": "comment-12727610"
        },
        {
            "date": "2009-07-06T16:44:53+0000",
            "content": "One thing that would be nice to see is a boolean return value from \"deleteByTerm\" that would indicate if any documents will actually be deleted (or even more, the count of docs that would be deleted)\n\nThis would allow an application to perform more optimal commits/optimizes. If the index only receives deletes that do not match the index, the application can be aware of this and prevent performing a commit (thereby removing the need for application specific cache loading/analytics/etc performed after a \"noop\" commit).  This is extremely useful in the event where TONS of deletes will be received, but very few updates with frequent commit intervals\n\nobviously, this is rather impractical as this would require opening a SegmentReader for each and every segment for each delete given the current implementation of handling deletes (causing this special delete to be extremely slow) ",
            "author": "Tim Smith",
            "id": "comment-12727614"
        },
        {
            "date": "2009-07-06T16:58:02+0000",
            "content": "obviously, this is rather impractical as this would require opening a SegmentReader for each and every segment for each delete given the current implementation of handling deletes (causing this special delete to be extremely slow)\n\nRight - seems better to be handled at the application level.  Solr used to do it's own delete handling before switching to using Lucene's delete-by-term - something like that would give you more control.\n\nIf the index only receives deletes that do not match the index, the application can be aware of this and prevent performing a commit (thereby removing the need for application specific cache loading/analytics/etc performed after a \"noop\" commit).\n\nSounds like you could perhaps use reopen() or the NRT (near realtime) patches - get a new reader, see what segments changed (if any). ",
            "author": "Yonik Seeley",
            "id": "comment-12727620"
        },
        {
            "date": "2009-07-06T17:04:14+0000",
            "content": "Sounds like you could perhaps use reopen() or the NRT (near realtime) patches - get a new reader, see what segments changed (if any).\n\nYeah, i'm aware of all these (and will take advantage of them once 2.9 is out), but some custom caches may not work on a per segment basis (may be much slower when evaluated this way, or may not be able to be constructed in the first place without full index as a context)\n\nwas just throwing out that use case, as it is one i have run into and is one closely related to wanting to delete documents by internal id. ",
            "author": "Tim Smith",
            "id": "comment-12727623"
        },
        {
            "date": "2009-07-06T17:48:17+0000",
            "content": "I'm still of the somewhat naive opinion delete by doc id is\npossible simply using IR.deleteDocument on a IW.getReader. The\nreason is we can maintain a doc id mapping/genealogy as segments\nare merged. We'd simply keep a chain of child readers in a\nreader, a delete would cascade through it.\n\nI'm curious as to what other use cases there are for this, maybe\nediting field caches?  ",
            "author": "Jason Rutherglen",
            "id": "comment-12727639"
        },
        {
            "date": "2009-07-06T17:52:17+0000",
            "content": "but some custom caches may not work on a per segment basis\n\nJust because you get a new IndexReader doesn't mean you have to use it, if not enough (or nothing) changed. ",
            "author": "Yonik Seeley",
            "id": "comment-12727641"
        },
        {
            "date": "2009-07-06T17:55:28+0000",
            "content": "Absolutely nothing would have to have actually changed in order to reuse an old IndexReader.\nIs there a simple way to identify if this is true? Or at least to identity if the commit/optimize resulted in absolutely no change? reliably? ",
            "author": "Tim Smith",
            "id": "comment-12727646"
        },
        {
            "date": "2009-07-06T18:36:44+0000",
            "content": "Absolutely nothing would have to have actually changed in order to reuse an old IndexReader.\n\nRight - see the javadoc for reopen() then... it currently says that if nothing has changed, you get the same IndexReader instance back. ",
            "author": "Yonik Seeley",
            "id": "comment-12727683"
        },
        {
            "date": "2009-07-06T18:49:31+0000",
            "content": "That looks like its pretty close, and is definitely better than assuming the index changed, but still not \"exactly\" what would be desired (at least by me).\nlooks IndexReader.reopen() will give a new IndexReader instance even if there are no \"actual\" changes to the index (deletes/new segments) in the event that some background merges were performed. This can result in a new IndexReader being opened (via reopen()) even if no content changed. (while this will be a more optimal search index, it will invalidate caches that will then need to be reloaded) \n\na return status from commit would be more desirable\nsuch a status could list the number new documents, deleted documents, and new segments/merged segments, and so on\nThat way, an application could choose what criteria would facilitate opening a new index\n(this is going even more off topic though) ",
            "author": "Tim Smith",
            "id": "comment-12727695"
        },
        {
            "date": "2009-07-07T13:37:12+0000",
            "content": "reopen() actually doesn't do the trick\n\nthe following situation will always result in reopen() returning a different IndexReader instance (at least in 2.4):\n\n\tcommit()\n\topen IndexReader\n\tdelete(docid not in index)\n\tcommit() - creates new segments_N file (even though no files actually changed)\n\treopen() IndexReader - returns new instance, because of new segments_N file\n\n ",
            "author": "Tim Smith",
            "id": "comment-12728098"
        },
        {
            "date": "2009-07-07T13:43:14+0000",
            "content": "This is presumably a MultiReader that is returned... can you check to see if it contains the same segment reader instances (it should)?  ",
            "author": "Yonik Seeley",
            "id": "comment-12728100"
        },
        {
            "date": "2009-07-07T13:50:20+0000",
            "content": "I'm working in lucene 2.4, so i don't have access to the \"child\" IndexReaders\nhowever i'm 99.99999% positive this is the case (or some similar event) (especially as my index is optimized at this point)\n\nmy next though was to inspect the IndexCommit for each and validate that they contain the same exact files (with same exact timestamps)\nthis is just more work (need to save of the IndexCommit at open time to make sure the timestamps will be captured at open time, then compare that with the new one (and there's no convenience method on IndexCommit for this type of equality check) ",
            "author": "Tim Smith",
            "id": "comment-12728104"
        },
        {
            "date": "2009-07-07T13:56:32+0000",
            "content": "Looks like its actually a SegmentReader\n\nold index:   org.apache.lucene.index.SegmentReader@f38cf0\nnew index: org.apache.lucene.index.SegmentReader@7bfc04\n\ni guess that in 2.4, if you have an optimized index, and you call reopen(), you will always get a new SegmentReader instance (so the == check isn't really valid)\ni guess this is a non-issue in 2.9 (opened index is never a SegmentReader, even in the optimized case) ",
            "author": "Tim Smith",
            "id": "comment-12728109"
        },
        {
            "date": "2009-07-07T14:08:16+0000",
            "content": "Actually, it looks like i am seeing 2 separate segments at reopen() time (_3, then _4), however at this time my index should have been optimized\nwill track this down (probably just a problem with my test) ",
            "author": "Tim Smith",
            "id": "comment-12728113"
        },
        {
            "date": "2009-07-07T14:23:05+0000",
            "content": "found my problem, i wasn't doing a commit() after the optimize() call, so an index opened after optimize() was not the optimized index\nreopen() works like a champ now\nthe javadoc for optimize() isn't fully clear on these semantics ",
            "author": "Tim Smith",
            "id": "comment-12728120"
        },
        {
            "date": "2009-07-07T15:14:07+0000",
            "content": "IndexReader.reopen() solves my use case for wanting this functionality\n\nI suppose if anyone else has a use case for this functionality, they should add it ",
            "author": "Tim Smith",
            "id": "comment-12728141"
        },
        {
            "date": "2013-04-13T21:11:54+0000",
            "content": "SPRING_CLEANING_2013 JIRAS looks to be resolved. ",
            "author": "Erick Erickson",
            "id": "comment-13631164"
        },
        {
            "date": "2013-04-16T10:58:40+0000",
            "content": "IndexWriter now has .tryDeleteDocument (LUCENE-4203), which deletes by IndexReader + document ID when possible (ie, as long as a merge has not merged away that reader).  ",
            "author": "Michael McCandless",
            "id": "comment-13632747"
        }
    ]
}