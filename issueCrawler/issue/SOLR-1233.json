{
    "id": "SOLR-1233",
    "title": "Remove restriction that /select cannot be used for /-prefixed request handlers via qt",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently /select?qt=/whatever is blocked by SolrDispatchFilter.  It makes life a lot easier to make general requests to any request handler (for example in SOLR-1230 where dataimport.jsp needs to request to arbitrary handler names).",
    "attachments": {
        "SOLR-1233.patch": "https://issues.apache.org/jira/secure/attachment/12411224/SOLR-1233.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-12721780",
            "date": "2009-06-19T13:23:42+0000",
            "content": "This patch removes the restriction on /select on hitting /-prefixed request handlers. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12721788",
            "date": "2009-06-19T14:00:11+0000",
            "content": "Committed.  \n\nThe Solr wiki is broken for saving at the time of writing, but this blurb belongs on the SolrSecurity page:\n\n== Request Handler Paths ==\n\nSolr provides access to request handlers through a general purpose /select?qt=request_handler_name URL.  Prior to [\"Solr1.4\"] (via SOLR-1233), request handlers named with a leading forward-slash like /select?qt=/request_handler_name could not be used, but had to be requested using /request_handler_name.  [\"Solr1.4\"] removes the forward-slash restriction and allows /select to work with any request handler name.  Externally blocking access to /select is recommended in environments where only path-based access to request handlers is warranted. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775781",
            "date": "2009-11-10T15:52:08+0000",
            "content": "Bulk close for Solr 1.4 "
        },
        {
            "author": "David Smiley",
            "id": "comment-13169425",
            "date": "2011-12-14T15:18:27+0000",
            "content": "Seriously?! I was just about to report a security oriented bug that the likes of this is supported:\n  http://localhost:8983/solr/select?qt=/dataimport&command=full-import\nAnd get this... (as I say with a fiendish chuckle):\n  http://localhost:8983/solr/select?qt=/update&stream.body=%3Cd%3E%3Cdelete%3E%3Cquery%3E*%3A*%3C%2Fquery%3E%3C%2Fdelete%3E%3Ccommit%2F%3E%3C%2Fd%3E\n\nBooyaaa!  All your data is gone.\n\nAnd no, disabling remote streaming in the schema won't save you this time.\n\nUsers expect /select to do a search and I don't think there should be any if's and's or but's about that expectation.  I don't really like the qt parameter and think people should prefix their request handlers with a slash and access them directly, but I don't expect to change anyone's mind here.  But if qt starts with a slash, then I think it should ideally not work, or for backwards compatibility sake, only support it if the target request handler has the same class as the current request handler. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13169431",
            "date": "2011-12-14T15:36:52+0000",
            "content": "And I was hoping to find a way to disable this vulnerability in the solrconfig.xml... thinking that perhaps I could lock down qt with invariants, but that doesn't work.  Presumably qt is special.  I hate qt. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13169477",
            "date": "2011-12-14T15:57:15+0000",
            "content": "I found a solution, which is to disable qt by changing the default search handler named=\"search\" to be name=\"/select\":\n<requestHandler name=\"/select\" class=\"solr.SearchHandler\">\ninstead of:\n<requestHandler name=\"search\" class=\"solr.SearchHandler\" default=\"true\"> "
        },
        {
            "author": "David Smiley",
            "id": "comment-13187504",
            "date": "2012-01-17T07:12:26+0000",
            "content": "I created issue SOLR-3040 which updates the admin UI to NOT use the qt parameter for working with the DIH. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13215810",
            "date": "2012-02-24T18:51:03+0000",
            "content": "I'm very surprised that I am the only one commenting on this issue. FWIW, in other private communication channels, I know there is support for what I want here among at least some committers.\n\nI haven't yet looked at the code involved for suggestions here; I'm speaking based on how I think things should work and not work, based on intuitiveness and security.  In general I feel it is best practice to use '/' leading request handler names and not use \"qt\", but I don't hate it enough when used in limited (search-only) circumstances to propose its demise.  But if someone proposes its deprecation that then I am +1 for that.\n\nHere is my proposal:\n\n\tSolr should error if the parameter \"qt\" is supplied with a leading '/'.  (trunk only)\n\tSolr should only honor \"qt\" if the target request handler extends solr.SearchHandler.\n\tThe new admin UI should only use 'qt' when it has to. For the query screen, it could present a little pop-up menu of handlers to choose from, including \"/select?qt=mycustom\" for handlers that aren't named with a leading '/'.  This choice should be positioned at the top.\n\n\n\nAnd before I forget, me or someone should investigate if there are any similar security problems with the shards.qt parameter.  Perhaps shards.qt can abide by the same rules outlined above.\n\nDoes anyone foresee any problems with this proposal?\n\nOn a related subject, I think the notion of a default request handler is bad \u2013 the default=\"true\" thing.  Honestly I'm not sure what it does, since I noticed Solr trunk redirects '/solr/' to the new admin UI at '/solr/#/'.  Assuming it doesn't do anything useful anymore, I think it would be clearer to use <requestHandler name=\"/select\" class=\"solr.SearchHandler\"> instead of what's there now.  The delta is to put the leading '/' on this request handler name, and remove the \"default\" attribute. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13215820",
            "date": "2012-02-24T19:01:06+0000",
            "content": "I decided to move this discussion to a new issue: SOLR-3161\nPlease comment there, not here. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13215821",
            "date": "2012-02-24T19:01:44+0000",
            "content": "For background, in the original RequestHandler design, we disallowed qt with leading '/' for security reasons.\n\nWhile solr does not internally support security, we need to make sure that it does not prevent standard path based security.\n\n+1 to put the restriction back\n "
        }
    ]
}