{
    "id": "SOLR-4300",
    "title": "Possible race condition in CoreContainer.getCore() when lazily loading cores.",
    "details": {
        "affect_versions": "4.1,                                            6.0",
        "status": "Closed",
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Yonik pointed out in SOLR-1028 that there is a possible race condition here, he's right not to my surprise. Calling it a \"blocker\" for now so we make a decision on it rather than let it fall through the cracks. I should be able to get a patch up tonight (Sunday).\n\nThat said, there's potential here to introduce deadlocks, is it worth rushing into 4.1?",
    "attachments": {
        "SOLR-4300.patch": "https://issues.apache.org/jira/secure/attachment/12564653/SOLR-4300.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13552407",
            "date": "2013-01-14T03:05:30+0000",
            "content": "Definitely a race condition. This patch includes a test case that fails before the patch and succeeds after the patch. All tests pass.\n\nThe question is whether or not this should be put into the 4.1 release, or held until 4.2. Of course I have the usual programmer's pride and want any of my code included in a release to be as good as I can make it, but I'm also aware of the hazards of including changes like this late in the game. Not sure this will be widely enough used to warrant the risk....\n\nI don't think there is an infinite loop here (the sleep), but then I always think my code is perfect. I think that if a core fails to load, the finally block will allow other threads to continue. They'll fail also assuming the underlying cause isn't fixed (say the lazily-loaded core configurations are mal-formed XML). But that's not something I think should be addressed in the code. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13554325",
            "date": "2013-01-15T20:54:39+0000",
            "content": "OK, I'm going to commit this this evening or tomorrow morning for both trunk, 4.1 & 4.x unless there are objections. I'll take another detailed pass over the code before I do on the theory that anything stupid will be clearer after not looking at it for a while.\n\nMy fears of deadlock are probably overblown. People don't get to the code in question unless they're defining lazily-loaded cores, so \"It shouldn't affect anyone not using the new functionality\" (tm).\n "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13554579",
            "date": "2013-01-16T00:50:21+0000",
            "content": "[trunk commit] Erick Erickson\nhttp://svn.apache.org/viewvc?view=revision&revision=1433778\n\nFix for SOLR-4300, possible race condition when loading lazy cores "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13554628",
            "date": "2013-01-16T01:49:03+0000",
            "content": "trunk: r - 1433778\n4.x:   r - 1433790\n4.1:   r - 1433787 "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13554633",
            "date": "2013-01-16T01:52:10+0000",
            "content": "[branch_4x commit] Erick Erickson\nhttp://svn.apache.org/viewvc?view=revision&revision=1433790\n\nfix for SOLR-4300, race condition when loading lazy cores from multiple threads "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13554741",
            "date": "2013-01-16T04:50:01+0000",
            "content": "Jenkins is unhappy:\n\n\nBuild: http://jenkins.thetaphi.de/job/Lucene-Solr-trunk-MacOSX/92/\nJava: 64bit/jdk1.7.0 -XX:+UseSerialGC\n\n1 tests failed.\nFAILED:  junit.framework.TestSuite.org.apache.solr.core.TestLazyCores\n\nError Message:\nClean up static fields (in @AfterClass?), your test seems to hang on to approximately 13,549,312 bytes (threshold is 10,485,760). Field reference sizes (counted individually):   - 14,228,288 bytes, static java.util.List org.apache.solr.core.TestLazyCores._theCores   - 720 bytes, private static java.lang.String[] org.apache.solr.core.TestLazyCores._necessaryConfs   - 280 bytes, public static org.junit.rules.TestRule org.apache.solr.SolrTestCaseJ4.solrClassRules   - 240 bytes, protected static java.lang.String org.apache.solr.SolrTestCaseJ4.testSolrHome   - 128 bytes, private static java.lang.String org.apache.solr.SolrTestCaseJ4.factoryProp   - 64 bytes, private static java.lang.String org.apache.solr.SolrTestCaseJ4.coreName\n\nStack Trace:\njunit.framework.AssertionFailedError: Clean up static fields (in @AfterClass?), your test seems to hang on to approximately 13,549,312 bytes (threshold is 10,485,760). Field reference sizes (counted individually):\n - 14,228,288 bytes, static java.util.List org.apache.solr.core.TestLazyCores._theCores\n...\n\n\n\nI can reproduce this on my Mac.\n\nAfter applying the patch below converting the static field _theCores into a local variable of the only method it's used in, I was able to successfully run ant test -Dtestcase=TestLazyCores -Dtests.dups=100:\n\n\nIndex: solr/core/src/test/org/apache/solr/core/TestLazyCores.java\n===================================================================\n--- solr/core/src/test/org/apache/solr/core/TestLazyCores.java\t(revision 1433815)\n+++ solr/core/src/test/org/apache/solr/core/TestLazyCores.java\t(working copy)\n@@ -248,10 +248,10 @@\n     }\n   }\n \n-  static List<SolrCore> _theCores = new ArrayList<SolrCore>();\n   // Test case for SOLR-4300\n   @Test\n   public void testRace() throws Exception {\n+    final List<SolrCore> _theCores = new ArrayList<SolrCore>();\n     final CoreContainer cc = init();\n     try {\n\n\n\nI'll commit this shortly. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13554748",
            "date": "2013-01-16T05:03:55+0000",
            "content": "Committed the above patch to TestLazyCores on trunk, branch_4x and lucene_solr_4_1. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13554749",
            "date": "2013-01-16T05:04:23+0000",
            "content": "[trunk commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1433823\n\nSOLR-4300: In TestLazyCores, convert static field into local variable to avoid post-test memory retention "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13554753",
            "date": "2013-01-16T05:14:17+0000",
            "content": "[branch_4x commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1433824\n\nSOLR-4300: In TestLazyCores, convert static field into local variable to avoid post-test memory retention "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13554991",
            "date": "2013-01-16T12:37:26+0000",
            "content": "Duh. Thanks Steve! Some days I'm the pigeon and some days I'm the statue... Sigggghhh. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13565715",
            "date": "2013-01-29T19:47:55+0000",
            "content": "I haven't had a chance to check out the whole patch in context... but if we get a chance to revisit at any point, it would probably be nicer to use a mechanism other than sleep/poll.  Either wait/notify or Future would seem to fit the bill. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13565773",
            "date": "2013-01-29T20:32:23+0000",
            "content": "It turns out that this code was already done for SOLR-4196, of course that's not checked in yet. I'll see if I can do one of these in that code.\n\nErick "
        }
    ]
}