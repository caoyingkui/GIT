{
    "id": "LUCENE-3221",
    "title": "improve docvalues integration with scoring",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "New Feature",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently, the flexscoring branch is limited by the fact that you can at most index one single byte per-document for scoring within Similarity.\n\nI added a simple test, showing how in your app itself you can index a per-document value (such as a boost) and then use it in scoring: http://svn.apache.org/repos/asf/lucene/dev/branches/flexscoring/lucene/src/test/org/apache/lucene/search/TestDocValuesScoring.java\n\nHowever, I think we should generalize this mechanism (note, names of classes can be changed to whatver makes sense).\nIn Similarity, instead of byte computeNorm(FieldInvertState), I think we should have void computeNorm(StatsWriter, FieldInvertState).\n\nThen a Similarity can ask the StatsWriter for instance(s), where an instance is something like a (name, type, aggregates) pair.\nName would be a simple name like \"boost\" that the sim later uses to retrieve this docvalue. type would be something like int8/int32/varint/byte.\naggregates could at first be a boolean or whatever, I think at first we should allow for the sum be be written (e.g. to provide sum and average).\nThis would support aggregate statistics such as 'total number of tokens in index' and 'average length'.\n\nso an example of the new computeNorm or whatever we call it would be\n\n  void computeNorm(StatsWriter writer, FieldInvertState state) {\n    writer.getReference(\"length\", INT32, Aggregates.YES).write(state.numTokens);\n    writer.getReference(\"boost\", FLOAT32, Aggregates.NO).write(state.boost);\n    ...\n  }\n\n\n\nSo these docvalues field names that the Sim writes, I think the sim should be able to reference them with \"relative\" names like length and boost.\nWhatever we do behind the scenes is an implementation detail.\n\nAlso for this to work, I think we need to add int8, int16, int32, ... types to docvalues, and maybe we should add hasArray()/getArray(). I think\nthe existing compressed INTS should be kept, but maybe renamed to varint or something like that. This could still be useful, for example if someone\nwants to have \"real document lengths\" for bm25, but they don't really need a full 32-bit range, they can make the tradeoff to use packed integers\nand load less into ram... but that should be the sim's choice to make.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}