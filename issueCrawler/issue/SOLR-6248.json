{
    "id": "SOLR-6248",
    "title": "MoreLikeThis Query Parser",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [
            "query parsers"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "MLT Component doesn't let people highlight/paginate and the handler comes with an cost of maintaining another piece in the config. Also, any changes to the default (number of results to be fetched etc.) /select handler need to be copied/synced with this handler too.\n\nHaving an MLT QParser would let users get back docs based on a query for them to paginate, highlight etc. It would also give them the flexibility to use this anywhere i.e. q,fq,bq etc.\n\nA bit of history about MLT (thanks to Hoss)\n\nMLT Handler pre-dates the existence of QParsers and was meant to take an arbitrary query as input, find docs that match that \nquery, club them together to find interesting terms, and then use those \nterms as if they were my main query to generate a main result set.\n\nThis result would then be used as the set to facet, highlight etc.\n\nThe flow: Query -> DocList(m) -> Bag (terms) -> Query -> DocList(y)\n\nThe MLT component on the other hand solved a very different purpose of augmenting the main result set. It is used to get similar docs for each of the doc in the main result set.\n\nDocSet(n) -> n * Bag (terms) -> n * (Query) -> n * DocList(m)\n\nThe new approach:\n\nAll of this can be done better and cleaner (and makes more sense too) using an MLT QParser.\n\nAn important thing to handle here is the case where the user doesn't have TermVectors, in which case, it does what happens right now i.e. parsing stored fields.\n\nAlso, in case the user doesn't have a field (to be used for MLT) indexed, the field would need to be a TextField with an index analyzer defined. This analyzer will then be used to extract terms for MLT.\n\nIn case of SolrCloud mode, '/get-termvectors' can be used after looking at the schema (if TermVectors are enabled for the field). If not, a /get call can be used to fetch the field and parse it.",
    "attachments": {
        "SOLR-6248.patch": "https://issues.apache.org/jira/secure/attachment/12657444/SOLR-6248.patch",
        "SOLR-6248-4x.patch": "https://issues.apache.org/jira/secure/attachment/12691937/SOLR-6248-4x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Molloy",
            "id": "comment-14068501",
            "date": "2014-07-21T13:27:03+0000",
            "content": "Would that approach also support sending in text that isn't in the index? This is the main reason we're using the MLT handler, which we need to be distributed (thus SOLR-5480). but if we can have a single approach for both, I agree that not maintaining 2 configurations (and 2 handlers in the code) would be much better. Let me know if I can help out. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14070897",
            "date": "2014-07-22T21:08:25+0000",
            "content": "What do you mean by \"text that isn't in the index\"? If you mean pseudo-random text to find documents similar to that? Yes, it would handle that. "
        },
        {
            "author": "Steve Molloy",
            "id": "comment-14071645",
            "date": "2014-07-23T12:10:24+0000",
            "content": "I meant passing in text as parameter as opposed to finding it in the index. With current MLT handler (not component), you can pass it in as body or stream.body to get documents similar to the text you pass in. In our case, we use it to find documents in one collection similar to a document found in another, or to some text directly provided by user. So, I know that at some point the SearchHandler started rejecting search requests with stream body, which would prevent this unless it could be achieved in another way. That's why I'm asking.  "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14071753",
            "date": "2014-07-23T14:05:27+0000",
            "content": "I don't think this would really work across 2 collections straight out of the box, but yes, as long as you have 'text' to pass, that is exactly what this parser would take. In other words, for now, it would more or less maintain the same mechanism of the handler (but in a manner that makes it work under SolrCloud mode). "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14072379",
            "date": "2014-07-23T21:35:46+0000",
            "content": "Added mlt qparser, works in single and cloud mode. Added support for numeric id. \nResult of mlt written as query result - not in MoreLikeThis. Added tests to call in single and cloud modes. "
        },
        {
            "author": "Steve Molloy",
            "id": "comment-14073275",
            "date": "2014-07-24T15:02:10+0000",
            "content": "I'd like to give this a spin, but looking at the attached patch, it's unclear how to pass in text. The parsers seem to be looking at \"id\" parameter, I haven't seen any reference to stream.body. What parameter would be used to pass in text to be analyzed and for which to return similar documents? "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14073671",
            "date": "2014-07-24T21:18:10+0000",
            "content": "With current implementation in patch mlt qparser can match document by unique field configured in schema and find similar document out of it. Parser syntax now look like \n\n{!mlt id=17 qf=lowerfilt}lowerfilt:*\n\n where id is value of unique field configure (not \"id\" column in schema), qf is matched fields to search.\n\nAbout passing text this parser can be extended with text parameter, search document by this term and look for similar document using existing implementation. "
        },
        {
            "author": "Steve Molloy",
            "id": "comment-14074360",
            "date": "2014-07-25T12:54:33+0000",
            "content": "In this case it cannot replace the current MoreLikeThisHandler implementation which can analyze incoming text (as opposed to searching for a matching document in the index) in order to find similar documents in the index. Being able to query by unique field and returning similar documents is already covered by the MoreLikeThisComponent if you use rows=1 to get a single document and its set of similar ones. The use case that forces the MoreLikeThisHandler currently (at least that I know of) is really this on-the-fly analysis of text that is nowhere in the index. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14074514",
            "date": "2014-07-25T16:09:04+0000",
            "content": "My bad, this was my mistake. The last time I'd looked at this patch was about 10 months ago.\n\nThis works like a component but also lets you paginate and do other stuff with it.\nLet me check out if accepting text would make sense here (or if we could have something on similar lines).  "
        },
        {
            "author": "Upayavira",
            "id": "comment-14142063",
            "date": "2014-09-20T15:59:37+0000",
            "content": "I also, after a conversation with Hoss, have knocked up a MLTQuery parser.\n\nI very much doubt your query parser will allow you to pass in a stream.body, because the first few lines of o.a.s.handler.component.SearchHandler.handleRequestBody() say:\n\n\nif (req.getContentStreams() != null && req.getContentStreams().iterator().hasNext()) {\n    throw new SolrException(ErrorCode.BAD_REQUEST, \"Search requests cannot accept content streams\");\n}\n\n\n\nThis needs to be removed for stream.body to be available to the query parser.\n\nI can post my patch later if anyone is interested. It doesn't have any tests yet. My next task is to work out how to make it work across cores (recommend docs in one core based upon docs in another).\n\nRegarding the patch in this ticket, I'm curious why you needed a SolrCloud specific query parser? Is it because the doc you are using might be in a different shard?\n\nAlso, it appears from a cursory look that LWMoreLikeThis is a fork of Lucene's MoreLikeThis class. Is there a reason that is needed, and if so, why isn't it still in Lucene?\n\nI expect to be working on my own version this week, and if what I produce can be useful to others (via this ticket or otherwise), I'd be happy to contribute it.\nThx!\n "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14181023",
            "date": "2014-10-23T05:09:33+0000",
            "content": "Updated patch. I'm keeping it simple for now (and we can always get more advanced stuff come in later).\n\nHere's the format:\n{!mlt id=docId qf=fieldNames}\n\nThe users can also pass the min/max word length, mintf, mindf as a local params.\nI'll just update another patch which asserts against the parsedQuery from the query response (debug) to validate that the final query is actually generated using the passed documentId.\n\nAlso, the changes MoreLikeThis changes are now in the exiting Lucene MoreLikeThis class. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14184662",
            "date": "2014-10-26T20:52:38+0000",
            "content": "For now, I think this should be good to go. It'd be nice if someone takes a look though.\n\nI've refactored stuff from the last patch and fixed a few things too. Added a test for cloud mode to assert for parse queries from the debug response. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14186323",
            "date": "2014-10-28T04:01:24+0000",
            "content": "Anshum Gupta - your latest patch does not have the new files (need to svn add them).   This new qparser, IMO, should be registered automatically in QParserPlugin, so it doesn't need to be registered in solrconfig.xml manually.\n\nOverall looks great (looking back and previous patches to see the new files)!  +1 "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14186379",
            "date": "2014-10-28T05:19:28+0000",
            "content": "Erik Hatcher Thanks for looking at it. I merged the changes into MoreLikeThis.java instead of duplicating code (so the files are actually gone). The patch has everything that's required but yes I'll have this automatically registered in QParserPlugin. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14186478",
            "date": "2014-10-28T06:50:49+0000",
            "content": "Patch that auto registers the mlt QParser in the QParserPlugin. Also, Query equality test for the same. I plan to commit it tomorrow morning. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14186568",
            "date": "2014-10-28T08:27:40+0000",
            "content": "Another updated patch that fixes precommit issues.\nThe precommit still fails due to another (unrelated) commit. Shall fix that one tomorrow morning before I commit this. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14186775",
            "date": "2014-10-28T12:54:07+0000",
            "content": "doesn't it make sense to put an example query in the description ? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14186848",
            "date": "2014-10-28T13:51:21+0000",
            "content": "I guess it is good to go "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14187205",
            "date": "2014-10-28T18:12:32+0000",
            "content": "Commit 1634937 from Anshum Gupta in branch 'dev/trunk'\n[ https://svn.apache.org/r1634937 ]\n\nSOLR-6248: MoreLikeThis QParser that works in standalone/cloud mode "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-14187217",
            "date": "2014-10-28T18:20:56+0000",
            "content": "Anshun, very cool stuff here!\n\n{!mlt id=docId qf=fieldNames}\n\nI assume this is not the Lucene DocID but the document's UniqueKey field value? Also, must we query the correct shard for it to work? "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14187220",
            "date": "2014-10-28T18:23:57+0000",
            "content": "Commit 1634939 from Anshum Gupta in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1634939 ]\n\nSOLR-6248: MoreLikeThis QParser that works in standalone/cloud mode (merge from trunk) "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14187234",
            "date": "2014-10-28T18:31:22+0000",
            "content": "Thanks Markus Jelsma. This is indeed the documents` unique key field value.\nAlso, I don't think you'd need to target the correct shard as, in case of Cloud mode, it uses the /get handler.\n\nThis has a lot of room for improvements/enhancements but I thought this was a good point to start with. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14187241",
            "date": "2014-10-28T18:34:28+0000",
            "content": "Noble Paul Thanks for looking at the patch.\nI've added a sample query in there. Also, there's basic description as a part of the package.html.\n\nI'll also be adding the usage in the ref guide. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14187244",
            "date": "2014-10-28T18:37:06+0000",
            "content": "Commit 1634941 from Anshum Gupta in branch 'dev/trunk'\n[ https://svn.apache.org/r1634941 ]\n\nSOLR-6248: Removing svn:keywords that got auto-added with the commit hook. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14187247",
            "date": "2014-10-28T18:38:07+0000",
            "content": "Commit 1634942 from Anshum Gupta in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1634942 ]\n\nSOLR-6248: Removing svn:keywords that got auto-added with the commit hook. (merge from trunk) "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14189235",
            "date": "2014-10-29T23:10:03+0000",
            "content": "After a discussion with Hoss, I'm changing the format of the query parser. It wouldn't have an 'id' key in the request i.e. the new request would look like:\n\n{!mlt qf=fieldname}docId\n\nThis would eliminate the need to document/maintain and track a new parameter name. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14189236",
            "date": "2014-10-29T23:10:18+0000",
            "content": "Commit 1635329 from Anshum Gupta in branch 'dev/trunk'\n[ https://svn.apache.org/r1635329 ]\n\nSOLR-6248: Changing the format of mlt query parser "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14189268",
            "date": "2014-10-29T23:23:33+0000",
            "content": "Commit 1635336 from Anshum Gupta in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1635336 ]\n\nSOLR-6248: Changing request format for mlt queryparser (merge from trunk) "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14197154",
            "date": "2014-11-04T23:48:10+0000",
            "content": "A few more improvements to the query parser. An additional test too for a fix that's a part of the patch. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14197204",
            "date": "2014-11-05T00:21:45+0000",
            "content": "Commit 1636784 from Anshum Gupta in branch 'dev/trunk'\n[ https://svn.apache.org/r1636784 ]\n\nSOLR-6248: Fixing an exception in case of missing qf "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14197237",
            "date": "2014-11-05T00:45:46+0000",
            "content": "Commit 1636788 from Anshum Gupta in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1636788 ]\n\nSOLR-6248: Fixing an exception in case of missing qf (merge from trunk) "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-14275150",
            "date": "2015-01-13T12:44:37+0000",
            "content": "Patch for 4.10!  "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-14276908",
            "date": "2015-01-14T13:37:35+0000",
            "content": "Hi Anshum - ive uploaded a new patch. This adds a NPE check in retrieveTerms(Map<String, Collection<Object>> fields) in MoreLikeThis.java. \n\nIn CloudMLTQParser i added a check if the requested document exists and returns an 404, you get a NPE otherwise. I also added support for glob there. One assert in the unit test uses that glob feature.\n\nTests pass \n\nI haven't added support for it in the single parser.\n\nMarkus "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14277640",
            "date": "2015-01-14T20:45:11+0000",
            "content": "Markus Jelsma Thanks for the patch for 4.10 but that can't go in. It's a new feature and will be released with 5.0 (sometime really soon).\nI haven't looked at the patch yet but users who are running 4.10 and want to use this patch are free to do so.\n\nWe can work on getting the bug fixes/tests into 5x now though. Can you provide a patch for trunk/5x for the tests/fixes? "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332874",
            "date": "2015-02-23T05:02:22+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}