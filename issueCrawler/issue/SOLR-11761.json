{
    "id": "SOLR-11761",
    "title": "Query parsing with comments fail in org.apache.solr.parser.QueryParser",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.2.1,                                            6.6.2,                                            master (8.0)",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Repro:\n\norg.apache.solr.parser.QueryParser queryParser = ...\nqueryParser.parse(\"/* foo */ bar\"); // works fine\nqueryParser.parse(\"/*\"); // fails with SyntaxError, which is correct.\nqueryParser.parse(\"/* foo */ bar\"); // Fails with SyntaxError. This is the bug\nqueryParser.parse(\"bar\"); // works fine\nqueryParser.parse(\"/* foo */ bar\"); // Still failing with SyntaxError\n\nThe last parse call will continue to fail for expressions containing comments. Only way to work around that I've found it to create a new instance of QueryParser.",
    "attachments": {
        "SOLR-11761.patch": "https://issues.apache.org/jira/secure/attachment/12905021/SOLR-11761.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-12-14T19:15:38+0000",
            "content": "Full repro code on master:\n\nTestSolrQueryParser.java\n  @Test public void testCommentsAfterSyntaxError() throws Exception {\n    SolrQueryRequest req = req();\n    QParserPlugin qParserPlugin = req.getCore().getQueryPlugin(\"lucene\");\n    QParser qParser =  qParserPlugin.createParser(null, null, null, req);\n    SolrQueryParser parser = new SolrQueryParser(qParser, \"text\");\n    \n    expectThrows(SyntaxError.class, () -> parser.parse(\"/*\"));\n    parser.parse(\"/* comment */ term\");\n  }\n\n\n\nproduces:\n\n\norg.apache.solr.parser.ParseException: Encountered \"<EOF>\" at line 1, column 18.\nWas expecting one of:\n    <NOT> ...\n    \"+\" ...\n    \"-\" ...\n    <BAREOPER> ...\n    \"(\" ...\n    \"*\" ...\n    <QUOTED> ...\n    <TERM> ...\n    <PREFIXTERM> ...\n    <WILDTERM> ...\n    <REGEXPTERM> ...\n    \"[\" ...\n    \"{\" ...\n    <LPARAMS> ...\n    \"filter(\" ...\n    <NUMBER> ...\n    <TERM> ...\n    \n\tat org.apache.solr.parser.QueryParser.generateParseException(QueryParser.java:885)\n\tat org.apache.solr.parser.QueryParser.jj_consume_token(QueryParser.java:767)\n\tat org.apache.solr.parser.QueryParser.Query(QueryParser.java:167)\n\tat org.apache.solr.parser.QueryParser.TopLevelQuery(QueryParser.java:131)\n\tat org.apache.solr.parser.SolrQueryParserBase.parse(SolrQueryParserBase.java:254)\n\t... 40 more\n\n\n\nAFAICT because of the way QParsers work, SolrQueryParser instances are never required to parse more than one query. AFAICT there are no tests attempting that.  Nevertheless I can think of no good reason for a parser (SolrQueryParser or any other) to hold onto state from previous queries like this; we should fix it. ",
            "author": "Steve Rowe",
            "id": "comment-16291390"
        },
        {
            "date": "2018-01-08T05:55:38+0000",
            "content": "org.apache.solr.parser.QueryParser has two ReInit methods. I have found that if org.apache.solr.search.SolrQueryParser calls the other ReInit method and with a new org.apache.solr.parser.QueryParserTokenManager object, then the parser properly re-initializes itself. Patch with my fix and Steve Rowe's test attached. ",
            "author": "Kai Chan",
            "id": "comment-16315707"
        }
    ]
}