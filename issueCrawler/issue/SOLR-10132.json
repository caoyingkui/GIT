{
    "id": "SOLR-10132",
    "title": "Support facet.matches to cull facets returned with a regex",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "faceting"
        ],
        "type": "New Feature",
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "6.4.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I recently ran into a case where I really wanted to only return the next level of a hierarchical facet, and while I was able to do that with a coordinated set of dynamic fields, it occurred to me that this would have been much much easier if I could have simply used PathHierarchyTokenizer and written\n\n&facet.matches=\"/my/current/prefix/[^/]+$\"\n\nthereby limiting the returned facets to the next level down and not return the  additional  N levels I didn't (yet) want to display (numbering in the thousands near the top of the tree). I suspect there are other good use cases, and the patch seemed relatively tractable.",
    "attachments": {
        "SOLR-10132.patch": "https://issues.apache.org/jira/secure/attachment/12852479/SOLR-10132.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-02-14T03:12:49+0000",
            "content": "Initial patch with some tests, but not ready since I still need to figure out what to do with the check for numeric facets (see question in comment patch). ",
            "author": "Gus Heck",
            "id": "comment-15864948"
        },
        {
            "date": "2017-02-16T16:16:35+0000",
            "content": "... still need to figure out what to do with the check for numeric facets ...\n\nSomething like this might be hacky but should work:\n\npublic class RegexBytesRefFilter extends SubstringBytesRefFilter {\n\n  final private String regex;\n  final private Pattern compiled;\n\n  public RegexBytesRefFilter(String regex) {\n    super(regex, false);\n    this.regex = regex;\n    this.compiled = Pattern.compile(regex);\n  }\n\n  @Override\n  protected boolean includeString(String term) {\n    Matcher m = compiled.matcher(term);\n    return m.matches();\n  }\n\n}\n\n\n\nIn SOLR-9914 we were puzzled by the check also, perhaps its removal could be considered (outside the scope of this ticket) i.e. just disallow/throw if any contains (or matches or other string-matching) is used with numeric facets? ",
            "author": "Christine Poerschke",
            "id": "comment-15870204"
        },
        {
            "date": "2017-02-17T16:36:28+0000",
            "content": "Ok I'll use the suggested, somewhat hackish workaround... opened https://issues.apache.org/jira/browse/SOLR-10155 for the review of this check ",
            "author": "Gus Heck",
            "id": "comment-15872078"
        },
        {
            "date": "2017-02-17T19:31:36+0000",
            "content": "revised patch with inheritance from SubstringBytesRefFilter ",
            "author": "Gus Heck",
            "id": "comment-15872370"
        },
        {
            "date": "2017-02-21T09:58:34+0000",
            "content": "Proposing revised patch which avoids use of Predicate<BytesRef> MATCH_ALL = input -> true; because e.g. in DocValuesFacets.java#L187-L192 the predicate is used like this\n\nif (termFilter != null) {\n  final BytesRef term = si.lookupOrd(startTermIndex+i);\n  if (!termFilter.test(term)) {\n    continue;\n  }\n}\n\n\nand a non-null MATCH_ALL predicate would thus incur the si.lookupOrd call cost only to then arrive at the 'yes it matches' answer. What do you think?\n\n\n\nproposed next steps:\n\n\tSOLR-10155 to go ahead first, then here rebase patch on top of it\n\tSimpleFacetsTest.testSimpleFacetCounts is already very long i.e. SimpleFacetsTest.java#L540-L783 - how about having a separate test for the new parameter logic e.g. similar to the testFacetExclude and testFacetContainsAndExclude methods added in SOLR-9912\n\tcheck javadocs and that ant precommit passes\n\n ",
            "author": "Christine Poerschke",
            "id": "comment-15875712"
        },
        {
            "date": "2017-02-22T12:21:39+0000",
            "content": "Hmm, would it be possible to test like this:\n\n\nif (termFilter != SimpleFacets.MATCH_ALL) {\n  final BytesRef term = si.lookupOrd(startTermIndex+i);\n  if (!termFilter.test(term)) {\n    continue;\n  }\n}\n\n\n\nI'm generally not fond of null except when representing an unknown primitive value (boxed of course), which is why I tried to eliminate it. It's not very self documenting, and retaining it  the list + switch you have added or a string of if/else checking as in the original code, plus and a lot of other reasons. http://www.yegor256.com/2014/05/13/why-null-is-bad.html is more eloquent than I on this... \n\nPerhaps it should be named MATCH_ALL_TERMS however, to avoid sounding like it has something to do with MatchAllDocsQuery() ",
            "author": "Gus Heck",
            "id": "comment-15878097"
        },
        {
            "date": "2017-02-27T18:57:02+0000",
            "content": "re: null vs. SimpleFacets.MATCH_ALL_TERMS - SOLR-9914 refactored the \"contains\" check which was a null or non-null String into a null or non-null SubstringBytesRefFilter object and that change isn't yet part of an official release. On that basis, yes, I think MATCH_ALL_TERMS instead of null would make sense. And for clarity, could I suggest making that change separately from the facet.matches feature addition here - what do you think? ",
            "author": "Christine Poerschke",
            "id": "comment-15886319"
        },
        {
            "date": "2017-09-16T13:44:30+0000",
            "content": "Finally getting back to this. From the looks of things, the MATCH_ALL_TERMS idea has missed the boat. There are several tests now that break when I try to implement that and the above statement about \"yet part of an official release\" has changed too, so I think now returning null as before is the only path forward. Working on a new patch (that returns null here). Tests are working including broken out test, also added javadoc. Also the new ascii doc stuff has come in since the last patch here so I probably should add some documentation for this feature too, now that that is something I can do myself . Should I do the patch vs trunk since it seems I just barely missed the boat for 7? ",
            "author": "Gus Heck",
            "id": "comment-16168923"
        },
        {
            "date": "2017-09-18T11:00:57+0000",
            "content": "Hi Gus, thanks for returning to this!\n\n... the MATCH_ALL_TERMS idea has missed the boat. ...  so I think now returning null as before is the only path forward. ...\n\nI agree.\n\n... Also the new ascii doc stuff has come in since the last patch here so I probably should add some documentation for this feature too, now that that is something I can do myself . ...\n\nYes please.\n\n... Should I do the patch vs trunk since it seems I just barely missed the boat for 7?\n\nYes please. Almost always patches would be against trunk/master and then from there any back porting would be done via cherry-pick to the branches, branch_7x at present. ",
            "author": "Christine Poerschke",
            "id": "comment-16169878"
        },
        {
            "date": "2017-09-18T16:27:28+0000",
            "content": "Patch returning null, with separated test, and doc. I'd rather not have the newExcludeButesRefFilter, method but unfortunately it is protected access, so I'm not sure if it can be eliminated. See comment in patch to this effect. ",
            "author": "Gus Heck",
            "id": "comment-16170248"
        },
        {
            "date": "2017-09-29T12:53:55+0000",
            "content": "Any thoughts on this? ",
            "author": "Gus Heck",
            "id": "comment-16185771"
        },
        {
            "date": "2017-10-05T13:38:38+0000",
            "content": "The only remaining question is whether or not newExcludeBytesRefFilter was intentionally protected access, or if that's just a result of the mood that the ide was in that particular day... If it's to be left in as a protected method the current patch is good to go (perhaps delete my comment). If there's any reasonable scenario where it might have already been relied upon of course it stays regardless (for back compatibility), but it's pretty new and pretty deep, so maybe not?. ",
            "author": "Gus Heck",
            "id": "comment-16192888"
        },
        {
            "date": "2017-10-10T15:20:06+0000",
            "content": "Thanks Gus for updating the patch! I today finally returned to this.\n\nPlease find attached slightly revised patch with changes as follows:\n\n\n\tRegexBytesRefFilter now no longer extends SubstringBytesRefFilter but just implements Predicate<BytesRef> (previously extending SubstringBytesRefFilter was helpful/needed but with SOLR-10155 that changed)\n\n\n\n\n\tAdded javadocs for newExcludeBytesRefFilter, as you say, they were missing in the existing code. (in conjunction with SOLR-9800 the method allows for (say) a custom facet component which uses not excluded terms passed in a parameter but use of (say) an exclusion list stored in ZooKeeper)\n\n\n\n\n\tminor style/format tweaks\n\n\n\n\n\tIn the testFacetMatch method the\n\nnew String[]{\"\", \"uif\"}\n\n\nline puzzled me and it should be\n\nnew String[]{\"facet.method\", \"uif\"}\n\n\ninstead I think.\n\n\n\n\n\tIn the test there was\n\n, \"*[count(//lst[@name='trait_s']/int)=2]\"\n, \"//lst[@name='trait_s']/int[@name='Tool'][.='2']\"\n, \"//lst[@name='trait_s']/int[@name='Obnoxious'][.='2']\"             \n, \"*[count(//lst[@name='trait_s']/int[@name='Pig'])=0]\"\n\n\nand wasn't sure if the \"Pig\" line's presence is intended and clear without a comment, so removed it.\n\n\n\n\n\tFacetParams.FACET_MATCH \"match\" is now FacetParams.FACET_MATCHES \"matches\" since the latter was in the .adoc and seems clearer - what do you think?\n\n ",
            "author": "Christine Poerschke",
            "id": "comment-16198816"
        },
        {
            "date": "2017-10-30T18:22:04+0000",
            "content": "Commit b8bcaf92465eed8477baf9932bea624b6b7830f8 in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b8bcaf9 ]\n\nSOLR-10132: A new optional facet.matches parameter to return facet buckets only for terms that match a regular expression. (Gus Heck, Christine Poerschke) ",
            "author": "ASF subversion and git services",
            "id": "comment-16225481"
        },
        {
            "date": "2017-10-31T13:16:57+0000",
            "content": "Commit e6ec82249f909b25f33c2fd8bff75326b87bf115 in lucene-solr's branch refs/heads/branch_7x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e6ec822 ]\n\nSOLR-10132: A new optional facet.matches parameter to return facet buckets only for terms that match a regular expression. (Gus Heck, Christine Poerschke) ",
            "author": "ASF subversion and git services",
            "id": "comment-16226767"
        },
        {
            "date": "2017-10-31T13:48:18+0000",
            "content": "I had been meaning to get back to this, but it got lost in the shuffle, thanks for getting it in.  ",
            "author": "Gus Heck",
            "id": "comment-16226817"
        },
        {
            "date": "2017-11-03T21:23:00+0000",
            "content": "Thanks Gus! ",
            "author": "Christine Poerschke",
            "id": "comment-16238413"
        }
    ]
}