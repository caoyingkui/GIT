{
    "id": "SOLR-6629",
    "title": "Watch /collections zk node on all nodes",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The main clusterstate.json is refreshed/used as a poor substitute for informing all nodes about new or deleted collections even when the collection being created or deleted has state format > 1. When we move away from state format 1 then we should do away with this workaround and start watching the /collections zk node on all nodes.",
    "attachments": {
        "SOLR-6629.patch": "https://issues.apache.org/jira/secure/attachment/12750912/SOLR-6629.patch",
        "SOLR-6629-new.patch": "https://issues.apache.org/jira/secure/attachment/12752044/SOLR-6629-new.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-03T19:59:38+0000",
            "author": "Scott Blum",
            "content": "Might get some love as part of SOLR-5756 ",
            "id": "comment-14652385"
        },
        {
            "date": "2015-08-10T18:27:16+0000",
            "author": "Scott Blum",
            "content": "Now that SOLR-5756 is landed, can we flesh this ticket out some more?\nDoes this boil down to \"watchChildren on /collections at all times, and actively manage the lazy-loaded collection state list\"? ",
            "id": "comment-14680507"
        },
        {
            "date": "2015-08-10T18:40:26+0000",
            "author": "Noble Paul",
            "content": "yes ",
            "id": "comment-14680535"
        },
        {
            "date": "2015-08-10T21:13:22+0000",
            "author": "Scott Blum",
            "content": "Note: LegacyClusterStateWatcher.refreshAndWatch() is what currently triggers refreshLazyFormat2Collections().  In other words, refreshes on the lazy collection set are tied to changes in shared clusterstate.json.  A better solution would be to do a child watch on /collections instead and completely decouple the lazy collection set from changes to clusterstate.json.  This might also involve tracking down any overseer code that forces a now-unnecessary clusterstate.json mutation purely as a signal. ",
            "id": "comment-14680780"
        },
        {
            "date": "2015-08-13T19:11:25+0000",
            "author": "Scott Blum",
            "content": "First pass.  ZkStateWriterTest is failing, but I need guidance on whether the test expectations still make sense, or whether I'm not tracking the batching correctly now. ",
            "id": "comment-14695777"
        },
        {
            "date": "2015-08-14T18:55:16+0000",
            "author": "Scott Blum",
            "content": "Second pass, I think this is actually in a good state (ALL TESTS PASSING).  We do need to chat through the new handling of lazyCollections some more, but I thought I would present to you a working version in code of what I was talking about.\n\nWe should also consider optimizing lazyCollectionState to do temporary caching (cache for 2 seconds?) to avoid hitting ZK rapidly in succession. ",
            "id": "comment-14697552"
        },
        {
            "date": "2015-08-17T21:10:31+0000",
            "author": "Scott Blum",
            "content": "Added another patch, demonstrating the Lazy Collection caching. ",
            "id": "comment-14700238"
        },
        {
            "date": "2015-08-18T23:44:10+0000",
            "author": "Scott Blum",
            "content": "Shalin Shekhar Mangar ping for review ",
            "id": "comment-14702178"
        },
        {
            "date": "2015-08-20T19:20:17+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Patch wasn't applying cleanly to trunk so I updated it. This one should apply cleanly.\n\nThanks Scott. Overall looks great to me!\n\nA few comments:\n\n\tIn ZkStateReader#refreshCollectionList, how do you ensure that a stateFormat=1 collection which is not interesting to us, isn't put into the lazyCollectionStates map? Or does it not matter because constructState() will always give priority to the ones in shared cluster state?\n\tnit - The variables in ZkStateWriter \"wasPreviouslyState1\" and \"isCurrentlyState1\" were confusing me so I renamed them to \"wasPreviouslyStateFormat1\" and \"isCurrentlyStateFormat1\"\n\n ",
            "id": "comment-14705593"
        },
        {
            "date": "2015-08-20T19:28:42+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "In ZkStateReader#refreshCollectionList, how do you ensure that a stateFormat=1 collection which is not interesting to us, isn't put into the lazyCollectionStates map? Or does it not matter because constructState() will always give priority to the ones in shared cluster state?\n\nHmm, answering my own question, this indeed looks deliberate and seems like a clever way of avoiding the ZK exists call for state.json! ",
            "id": "comment-14705599"
        },
        {
            "date": "2015-08-20T20:19:12+0000",
            "author": "Scott Blum",
            "content": "Should fix the test break. ",
            "id": "comment-14705685"
        },
        {
            "date": "2015-08-21T19:53:47+0000",
            "author": "Scott Blum",
            "content": "Removed lazy collection caching behavior.  All tests pass on trunk for me. ",
            "id": "comment-14707366"
        },
        {
            "date": "2015-08-24T15:33:25+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Scott Blum - did you upload the right patch? I still see caching in LazyCollectionRef. ",
            "id": "comment-14709456"
        },
        {
            "date": "2015-08-24T17:52:14+0000",
            "author": "Scott Blum",
            "content": "Nope, I screwed it up, sorry!  Correct patch attached. ",
            "id": "comment-14709724"
        },
        {
            "date": "2015-08-25T05:46:42+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I added javadocs and comments in a few places. This is ready. I'll commit shortly. ",
            "id": "comment-14710625"
        },
        {
            "date": "2015-08-25T05:56:36+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1697562 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1697562 ]\n\nSOLR-6629: Watch /collections zk node on all nodes ",
            "id": "comment-14710641"
        },
        {
            "date": "2015-08-25T13:13:49+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1697670 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1697670 ]\n\nSOLR-6629: Watch /collections zk node on all nodes ",
            "id": "comment-14711236"
        },
        {
            "date": "2015-08-25T13:14:22+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Scott! ",
            "id": "comment-14711238"
        },
        {
            "date": "2015-08-25T15:08:56+0000",
            "author": "Scott Blum",
            "content": "Yay! ",
            "id": "comment-14711411"
        }
    ]
}