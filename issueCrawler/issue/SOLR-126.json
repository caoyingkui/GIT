{
    "id": "SOLR-126",
    "title": "Auto-commit documents after time interval",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.2"
        ],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "If an index is getting updated from multiple sources and needs to add documents reasonably quickly, there should be a good solr side mechanism to help prevent the client from spawning multiple overlapping <commit/> commands.\n\nMy specific use case is sending each document to solr every time hibernate saves an object (see SOLR-20).  This happens from multiple machines simultaneously.  I'd like solr to make sure the documents are committed within a second.",
    "attachments": {
        "AutocommitingUpdateRequestHandler.patch": "https://issues.apache.org/jira/secure/attachment/12349871/AutocommitingUpdateRequestHandler.patch",
        "AutoCommit.patch": "https://issues.apache.org/jira/secure/attachment/12349894/AutoCommit.patch",
        "SOLR-126-ClosePending.patch": "https://issues.apache.org/jira/secure/attachment/12350400/SOLR-126-ClosePending.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12468482",
            "date": "2007-01-30T03:34:49+0000",
            "content": "I'm not sure the best design for this problem, as a quick way to get something working NOW without modifying UpdateHandler, I made a custom UpdateHandler (extended from XmlUpdateRequestHandler) that starts a timer and executes <commit/> after a configured time.\n\n\n\t- - - - -\n\n\n\nThe auto-commit logic should probably be in the UpdateHandler along with the exiting CommitTracker.  The existing CommitTracker lets you specify a number of documents it should keep before indexing.  \n\nFor a time limit, I think we need to run a thread - I know that is bad for webapps, but I'm not sure there is any other option.  In this example, I used:\n\nfinal ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);\n\nthen:\n\nscheduler.schedule( this, interval, TimeUnit.MILLISECONDS );\n\nIs this a reasonable approach?  Is there any other threading/timing mechanism to consider?\nShould this be applied directly to the UpdateHandler and configured along with \n\n <autoCommit> \n   <maxDocs>10000</maxDocs>\n   <maxTime>10000</maxTime> <!-- milliseconds -->\n </autoCommit>\n\nor should it be a custom request handler (as implemented in this attachment)?\n\n "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12468485",
            "date": "2007-01-30T03:49:49+0000",
            "content": "A few high-level comments:\n\n\tcommitTer/commitTing.  It seems pedantic to gripe about spelling, but making it right really helps in finding things at a later date.\n\t\"autoCommitAfter\" doesn't particularly document the semantics, which are \"autocommit interval upper bound\".  The reason that this is important is that we'll want to implement \"autocommit interval lower bound\" at some point (and/or \"autocommit after idle time\").\n\tI think this would fit pretty easily into the existing committracker (just gut the time-based things that are already there).   Unless there is any reason why this should be limited to a custom handler?\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12468493",
            "date": "2007-01-30T04:15:44+0000",
            "content": "> \n> A few high-level comments:\n>  - commitTer/commitTing.  It seems pedantic to gripe about spelling,...\n\nyes, thanks.  I'm notoriously bad anywhere spellcheck can't help (and often where it does!)  Please fix or point out anything, it does make it much easier to find in the future.\n\n>  - \"autoCommitAfter\" doesn't particularly document the semantics,...\n\nperhaps:\n\n <autoCommit>\n   <maxDocs>10000</maxDocs>\n   <maxTime>10000</maxTime> \n  <!--\n   In the future we may add:\n   <minTime>10000</minTime> \n   <idleTime>10000</idleTime> \n  -->\n </autoCommit>\n\n\n> > Unless there is any reason why this should be limited to a custom handler?\n> \n\nYes, it should probably go in the UpdateHandler\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12468497",
            "date": "2007-01-30T04:40:35+0000",
            "content": "Thanks for tackling this Ryan, this is much needed functionality (planned since inception but never coded!)\nThis should definitely go into the existing committracker/updatehandler.\n\nTimer/TimerTask for the timers?  Haven't used them myself... are they appropriate?\n\nSome future issues (i.e. a different JIRA issue)... one setting may make perfect sense when doing incremental updates, to enforce a minimum \"freshness\" and take the burden of commit off of the clients.  When building an index from scratch, you want to do it as quickly as possible, and not do commits all the time (or even expose a partial index to searches).\nPerhaps something like &autocommit=false in the update params?\nIt might even be nice to be able to change the mergeFactor for a complete index build vs incremental updates.\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12468499",
            "date": "2007-01-30T04:53:38+0000",
            "content": "> \n> Timer/TimerTask for the timers?  Haven't used them myself... are they appropriate?\n> \n\nI'm no expert on this, but it looks like Java5 added:\n\nhttp://java.sun.com/j2se/1.5.0/docs/api/java/util/concurrent/ScheduledExecutorService.html\n\nit does everything Timer/TimerTask did - I'm not sure (and can't seem to find) if the difference is just syntax or something more profound.\n\n\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12468505",
            "date": "2007-01-30T05:47:46+0000",
            "content": "Another future idea along the lines of &autocommit=true/false, is supporting clients with different timeliness needs.\nFor example, a client could send an update request, telling solr that a commit should be done within 5 minutes.\n&maxwait=300 or something like that.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12468507",
            "date": "2007-01-30T05:51:32+0000",
            "content": "ScheduledExecutorService: Yeah, I'd start with that by default... the Java5 concurrency stuff is much better in general. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12468561",
            "date": "2007-01-30T10:37:41+0000",
            "content": "I just posted AutoCommit.patch \n\nThis patch modifies DirectUpdateHandler2.CommentTracker to automatically commit a after a certain period.  As written, It should never start multiple commits at the same time.\n\nI think this is ready to go.   "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12469187",
            "date": "2007-01-31T20:36:13+0000",
            "content": "Ryan: looking good!  A few comments:\n\n\n\tYou notify the tracker that the document is added before actually adding the document.  This is okay-commit() cannot run until addDoc() is complete-but it does mean that the autocommit maxTime is measured from the start of the document being added until after it has been processed.  I'm not sure it matters in practice.\n\n\n\n\n\tsimilarly, didCommit() is invoked before the searcher is warmed.  Autocommits will never occur simulatneously (as you note; due to synchronization of run()), but they could be invoked continually if warming takes a long time.\n\n\n\n\n\tIf 250ms is a small enough time to not care about, does it make sense to force the user to specify the time in milliseconds?\n\n\n\nThese are all relatively minor things--if no one else has any thoughts this can probably be committed soon.   "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12469204",
            "date": "2007-01-31T21:33:52+0000",
            "content": "> \n>  - You notify the tracker that the document is added before actually adding the document.  This is okay-commit() cannot run until addDoc() is complete-but it does mean that the autocommit maxTime is measured from the start of the document being added until after it has been processed.  I'm not sure it matters in practice.\n> \n\nI'm looking at it from the client perspective.  The timer should start as soon as close to the request time as possible.\n\n\n> - similarly, didCommit() is invoked before the searcher is warmed.  Autocommits will never occur simulatneously (as you note; due to synchronization of run()), but they could be invoked continually if warming takes a long time.\n> \n\nI just left at were it was in the existing code.  I think it makes sense  because the searcher has the proper data at that point - a second commit wont change the results.\n\nAlso, it will not start a new autocommit until the first has warmed the searcher anyway:\n\n  CommitUpdateCommand command = new CommitUpdateCommand( false );\n  command.waitFlush = true;\n  command.waitSearcher = true; \n\n\n>  - If 250ms is a small enough time to not care about, does it make sense to force the user to specify the time in milliseconds?\n> \n\nThis is trying to avoid is the case where 100 documents are added at the same time with maxDocs=10.  We don't want to commit 10 times, so it waits 1/4 sec. (could be shorter or longer in my opinion)\n\nIf anyone is worried about the timing, they should use maxTime, not maxDocs\n "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12469559",
            "date": "2007-02-01T19:42:06+0000",
            "content": "Committed in r502328.  Thanks!\n\nRyan, the last comment of mine was about the units of time that <maxTime> was specified in--the old version had the time specified in seconds and the parameter name was <maxSec>.  I committed it the way it stands in the patch; if anyone has a strong opinion, this can be changed before being closed. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12469663",
            "date": "2007-02-02T04:55:39+0000",
            "content": "\nIt looks like the test solrconfi.xml got commited with some mangled xml comments:\n\n <!-- autocommit pending docs if certain criteria are met \n    <autoCommit> \n      <maxDocs>10000</maxDocs>\n      <maxTime>3600000</maxTime> <!-- one hour in milliseconds -->  \n    </autoCommit>\n    -->\n\nso it fails the tests\n\nit needs to be:\n\n <!-- autocommit pending docs if certain criteria are met -->\n    <autoCommit> \n      <maxDocs>10000</maxDocs>\n      <maxTime>3600000</maxTime> <!-- one hour in milliseconds -->  \n    </autoCommit>\n\nthanks!\nryan\n\n "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12471550",
            "date": "2007-02-09T01:21:10+0000",
            "content": "extra patch committed in r505114 "
        }
    ]
}