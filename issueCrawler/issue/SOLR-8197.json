{
    "id": "SOLR-8197",
    "title": "Make zero counts in heatmap PNG transparent",
    "details": {
        "components": [
            "spatial"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "It would be useful to have transparent zero values so that I can overlay the image as a layer on a map.\n\nThe change just requires altering two methods in SpatialHeatmapFacets.java as follows:\n\n\nstatic void writeCountAtColumnRow(BufferedImage image, int rows, int c, int r, int val)\n{\n      image.setRGB(c, rows - 1 - r, val == 0 ? 0 : val ^ 0xFF_00_00_00);\n}\n\nstatic int getCountAtColumnRow(BufferedImage image, int rows, int c, int r)\n{\n      int val = image.getRGB(c, rows - 1 - r);\n      return val == 0 ? 0 : val ^ 0xFF_00_00_00;\n}",
    "attachments": {
        "transparency.patch": "https://issues.apache.org/jira/secure/attachment/12768420/transparency.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-12-08T16:23:34+0000",
            "author": "Neil Ireson",
            "content": "Is there any chance this could get considered for inclusion into the code. At the moment every time I update my Solr I have to recompile the distribution with this patch.\n\nIt's a small change and as far as I can see it doesn't really have any negative impact. If you wanted to maintain the current visual result you can display the PNG on a black background.\n\nN ",
            "id": "comment-16283793"
        },
        {
            "date": "2017-12-08T18:17:15+0000",
            "author": "David Smiley",
            "content": "I completely overlooked this issue; sorry about that.\n\nI'm not so sure we should do this.\n\nFirstly, the PNG format here was purely intended for it's compression, not for final rendering.  One example of why it's poor to render directly is that values in excess of 16M will start to fade the image due to the abuse of the alpha channel in order to shove an integer into a RGBA.  Secondly, note that that Solr doesn't offer any ways to make this image pretty (e.g. apply a readable color scale) whatsoever (the assumption is the client will do that).    I am curious about your real-world experience rendering it; can you share your experience?  Do you consume this data from a web client?\n\nSecondly, this is a back-compat break.  It could be addressed but it's awkward.\n\nThirdly, your patch maps 0 to 0 but I'm guessing this means the integer count value that currently maps to 0 (16M?) is lost.  We could fix that though.\n\nAt some point I'd love to add a new format \u2013 UTFGrid ",
            "id": "comment-16283968"
        },
        {
            "date": "2018-01-04T14:54:06+0000",
            "author": "Neil Ireson",
            "content": "Thanks for the reply.\n\nOriginally I developed a system to explore UK crime statistics, more recently this is being used to plot (100+ million) GPS points from a mobile tracking app. The heatmap is used to show stop and transition points for various types of users and transportation. I was using the fact Solr could send PNG to handle the case when the local client or communication speed is limiting the responsiveness of the UI. The user can chose where the image is created. However due to the sensitivity of the tracking data we use a proxy NodeJS server between the client and Solr server, so I could remove the functionality to directly present the Solr PNG and instead provide the option to create the heatmap image on the proxy server. \n\nThat said I think mapping zero to the transparent value would be useful for anyone who wishes to display the PNG, as a \"cheap\" way to view the heatmap. \n ",
            "id": "comment-16311428"
        }
    ]
}