{
    "id": "LUCENE-1257",
    "title": "Port to Java5",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index",
            "core/other",
            "core/query/scoring",
            "core/queryparser",
            "core/search",
            "core/store",
            "(3)",
            "core/termvectors",
            "modules/analysis",
            "modules/examples"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.0"
        ],
        "affect_versions": "3.0",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "For my needs I've updated Lucene so that it uses Java 5 constructs. I know Java 5 migration had been planned for 2.1 someday in the past, but don't know when it is planned now. This patch against the trunk includes :\n\n\n\tmost obvious generics usage (there are tons of usages of sets, ... Those which are commonly used have been generified)\n\tPriorityQueue generification\n\treplacement of indexed for loops with for each constructs\n\tremoval of unnececessary unboxing\n\n\n\nThe code is to my opinion much more readable with those features (you actually know what is stored in collections reading the code, without the need to lookup for field definitions everytime) and it simplifies many algorithms.\n\nNote that this patch also includes an interface for the Query class. This has been done for my company's needs for building custom Query classes which add some behaviour to the base Lucene queries. It prevents multiple unnnecessary casts. I know this introduction is not wanted by the team, but it really makes our developments easier to maintain. If you don't want to use this, replace all /Queriable/ calls with standard /Query/.",
    "attachments": {
        "LUCENE-1257-BooleanScorer_2.patch": "https://issues.apache.org/jira/secure/attachment/12422445/LUCENE-1257-BooleanScorer_2.patch",
        "LUCENE-1257-IndexDeleter.patch": "https://issues.apache.org/jira/secure/attachment/12422488/LUCENE-1257-IndexDeleter.patch",
        "LUCENE-1257-FieldCacheRangeFilter.patch": "https://issues.apache.org/jira/secure/attachment/12422627/LUCENE-1257-FieldCacheRangeFilter.patch",
        "LUCENE-1257_contrib_benchmark_2.patch": "https://issues.apache.org/jira/secure/attachment/12423024/LUCENE-1257_contrib_benchmark_2.patch",
        "LUCENE-1257_contrib_memory.patch": "https://issues.apache.org/jira/secure/attachment/12423143/LUCENE-1257_contrib_memory.patch",
        "LUCENE-1257_o_a_l_demo.patch": "https://issues.apache.org/jira/secure/attachment/12424383/LUCENE-1257_o_a_l_demo.patch",
        "LUCENE-1257-CloseableThreadLocal.patch": "https://issues.apache.org/jira/secure/attachment/12422517/LUCENE-1257-CloseableThreadLocal.patch",
        "LUCENE-1257-DisjunctionMaxQuery-more_type_safety.patch": "https://issues.apache.org/jira/secure/attachment/12422388/LUCENE-1257-DisjunctionMaxQuery-more_type_safety.patch",
        "LUCENE-1257_unnecessary_casts.patch": "https://issues.apache.org/jira/secure/attachment/12422713/LUCENE-1257_unnecessary_casts.patch",
        "LUCENE-1257-iw.patch": "https://issues.apache.org/jira/secure/attachment/12422485/LUCENE-1257-iw.patch",
        "LUCENE-1257_o_a_l_search.patch": "https://issues.apache.org/jira/secure/attachment/12422489/LUCENE-1257_o_a_l_search.patch",
        "LUCENE-1257-NormalizeCharMap.patch": "https://issues.apache.org/jira/secure/attachment/12422438/LUCENE-1257-NormalizeCharMap.patch",
        "LUCENE-1257-BufferedDeletes_DocumentsWriter.patch": "https://issues.apache.org/jira/secure/attachment/12422440/LUCENE-1257-BufferedDeletes_DocumentsWriter.patch",
        "LUCENE-1257_contrib_smartcn.patch": "https://issues.apache.org/jira/secure/attachment/12423588/LUCENE-1257_contrib_smartcn.patch",
        "LUCENE-1257-FieldCacheImpl.patch": "https://issues.apache.org/jira/secure/attachment/12422605/LUCENE-1257-FieldCacheImpl.patch",
        "instantiated_fieldable.patch": "https://issues.apache.org/jira/secure/attachment/12421198/instantiated_fieldable.patch",
        "LUCENE-1257_org_apache_lucene_index.patch": "https://issues.apache.org/jira/secure/attachment/12422472/LUCENE-1257_org_apache_lucene_index.patch",
        "LUCENE-1257_unnnecessary_casts_2.patch": "https://issues.apache.org/jira/secure/attachment/12422942/LUCENE-1257_unnnecessary_casts_2.patch",
        "LUCENE-1257-org_apache_lucene_document.patch": "https://issues.apache.org/jira/secure/attachment/12422484/LUCENE-1257-org_apache_lucene_document.patch",
        "LUCENE-1257-StringBuffer.patch": "https://issues.apache.org/jira/secure/attachment/12421074/LUCENE-1257-StringBuffer.patch",
        "LUCENE-1257_contrib_misc.patch": "https://issues.apache.org/jira/secure/attachment/12423145/LUCENE-1257_contrib_misc.patch",
        "LUCENE-1257_o.a.l.store.patch": "https://issues.apache.org/jira/secure/attachment/12422493/LUCENE-1257_o.a.l.store.patch",
        "LUCENE-1257-DocFieldProcessorPerThread.patch": "https://issues.apache.org/jira/secure/attachment/12422457/LUCENE-1257-DocFieldProcessorPerThread.patch",
        "LUCENE-1257_contrib_ant.patch": "https://issues.apache.org/jira/secure/attachment/12424552/LUCENE-1257_contrib_ant.patch",
        "LUCENE-1257_javacc_upgrade.patch": "https://issues.apache.org/jira/secure/attachment/12422635/LUCENE-1257_javacc_upgrade.patch",
        "LUCENE-1257_analysis.patch": "https://issues.apache.org/jira/secure/attachment/12422516/LUCENE-1257_analysis.patch",
        "LUCENE-1257_o.a.l.queryParser.patch": "https://issues.apache.org/jira/secure/attachment/12422509/LUCENE-1257_o.a.l.queryParser.patch",
        "LUCENE-1257-MTQWF.patch": "https://issues.apache.org/jira/secure/attachment/12422624/LUCENE-1257-MTQWF.patch",
        "LUCENE-1257_lucil.patch": "https://issues.apache.org/jira/secure/attachment/12424528/LUCENE-1257_lucil.patch",
        "LUCENE-1257_messages.patch": "https://issues.apache.org/jira/secure/attachment/12421205/LUCENE-1257_messages.patch",
        "shinglematrixfilter_generified.patch": "https://issues.apache.org/jira/secure/attachment/12421197/shinglematrixfilter_generified.patch",
        "LUCENE-1257_contrib_highlighting.patch": "https://issues.apache.org/jira/secure/attachment/12422739/LUCENE-1257_contrib_highlighting.patch",
        "LUCENE-1257_BooleanFilter_Generics.patch": "https://issues.apache.org/jira/secure/attachment/12422431/LUCENE-1257_BooleanFilter_Generics.patch",
        "LUCENE-1257_queryParser_jj.patch": "https://issues.apache.org/jira/secure/attachment/12422628/LUCENE-1257_queryParser_jj.patch",
        "LUCENE-1257_more_unnecessary_casts.patch": "https://issues.apache.org/jira/secure/attachment/12422723/LUCENE-1257_more_unnecessary_casts.patch",
        "LUCENE-1257_swing_wikipedia_wordnet_xmlqp.patch": "https://issues.apache.org/jira/secure/attachment/12424429/LUCENE-1257_swing_wikipedia_wordnet_xmlqp.patch",
        "LUCENE-1257_lucli.patch": "https://issues.apache.org/jira/secure/attachment/12424522/LUCENE-1257_lucli.patch",
        "LUCENE-1257_heavy.patch": "https://issues.apache.org/jira/secure/attachment/12424583/LUCENE-1257_heavy.patch",
        "LUCENE-1257-Document.patch": "https://issues.apache.org/jira/secure/attachment/12421174/LUCENE-1257-Document.patch",
        "LUCENE-1257-IndexDeletionPolicy_IndexFileDeleter.patch": "https://issues.apache.org/jira/secure/attachment/12422505/LUCENE-1257-IndexDeletionPolicy_IndexFileDeleter.patch",
        "LUCENE-1257-o.a.l.util.patch": "https://issues.apache.org/jira/secure/attachment/12422501/LUCENE-1257-o.a.l.util.patch",
        "LUCENE-1257-CompoundFileReaderWriter.patch": "https://issues.apache.org/jira/secure/attachment/12422453/LUCENE-1257-CompoundFileReaderWriter.patch",
        "LUCENE-1257-TopDocsCollector.patch": "https://issues.apache.org/jira/secure/attachment/12422609/LUCENE-1257-TopDocsCollector.patch",
        "LUCENE-1257_contrib_benchmark.patch": "https://issues.apache.org/jira/secure/attachment/12422914/LUCENE-1257_contrib_benchmark.patch",
        "LUCENE-1257-WordListLoader.patch": "https://issues.apache.org/jira/secure/attachment/12422437/LUCENE-1257-WordListLoader.patch",
        "LUCENE-1257-CheckIndex.patch": "https://issues.apache.org/jira/secure/attachment/12422452/LUCENE-1257-CheckIndex.patch",
        "LUCENE-1257_o_a_l_index_test.patch": "https://issues.apache.org/jira/secure/attachment/12422502/LUCENE-1257_o_a_l_index_test.patch",
        "LUCENE-1257_o_a_l_search_spans.patch": "https://issues.apache.org/jira/secure/attachment/12422491/LUCENE-1257_o_a_l_search_spans.patch",
        "LUCENE-1257-DirectoryReader.patch": "https://issues.apache.org/jira/secure/attachment/12422456/LUCENE-1257-DirectoryReader.patch",
        "LUCENE-1257_precendence_parser.patch": "https://issues.apache.org/jira/secure/attachment/12423146/LUCENE-1257_precendence_parser.patch",
        "LUCENE-1257-SegmentInfos.patch": "https://issues.apache.org/jira/secure/attachment/12422443/LUCENE-1257-SegmentInfos.patch",
        "LUCENE-1257-BooleanQuery.patch": "https://issues.apache.org/jira/secure/attachment/12422444/LUCENE-1257-BooleanQuery.patch",
        "LUCENE-1257-ConcurrentMergeScheduler.patch": "https://issues.apache.org/jira/secure/attachment/12422454/LUCENE-1257-ConcurrentMergeScheduler.patch",
        "lucene1257surround1.patch": "https://issues.apache.org/jira/secure/attachment/12421192/lucene1257surround1.patch",
        "LUCENE-1257_MultiFieldQueryParser.patch": "https://issues.apache.org/jira/secure/attachment/12422629/LUCENE-1257_MultiFieldQueryParser.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-04-02T08:29:43+0000",
            "content": "Patch against the trunk ",
            "author": "C\u00e9dric Champeau",
            "id": "comment-12584456"
        },
        {
            "date": "2009-10-01T13:29:21+0000",
            "content": "This patch is bit outdated.\n\nI will try to fix a lot of these things. Simple are:\n\n\n\tremove new NumberSubType(value) and replace by value (autoboxing), which is faster, because allocation overhead removed\n\treplace StringBuffer by StringBuilder globally (it is never used in more than one thread)\n\n\n\nAddition of generics is little more work, I started in other issues (NumericRangeQuery, AttributeSource). ",
            "author": "Uwe Schindler",
            "id": "comment-12761212"
        },
        {
            "date": "2009-10-01T22:22:57+0000",
            "content": "A first patch that replaces StringBuffer -> StringBuilder almost everywhere (created using find/grep/sed). Some classes were left out (auto-generated classes by JavaCC).\n\nThere are still some special cases in contrib: some public/protected methods use StringBuffer as param/return type. These should be reverted - or break backwards in 3.0? Any comments? ",
            "author": "Uwe Schindler",
            "id": "comment-12761370"
        },
        {
            "date": "2009-10-02T21:46:11+0000",
            "content": "Updated patch. It removes some replacements in snowball and other contribs, where StringBuffer appears in public API.\n\nAll other occurences should be correctly replaced (mostly toString() impls).\n\nI will commit this soon, too, as the patch may get outdated very fast. ",
            "author": "Uwe Schindler",
            "id": "comment-12761737"
        },
        {
            "date": "2009-10-02T22:06:08+0000",
            "content": "Small fix in highlighter public API. ",
            "author": "Uwe Schindler",
            "id": "comment-12761745"
        },
        {
            "date": "2009-10-02T22:11:52+0000",
            "content": "StringBuffer changes committed revision: 821185\n\nI hope nobody has merge problems now... I keep this issue open as umbrella for further Java 1.5 changes. ",
            "author": "Uwe Schindler",
            "id": "comment-12761747"
        },
        {
            "date": "2009-10-02T22:15:59+0000",
            "content": "There are still some special cases in contrib: some public/protected methods use StringBuffer as param/return type. These should be reverted - or break backwards in 3.0? Any comments?\n\nI vote to move to StringBuilder anyway if its in Contrib. Though probably not with Snowball, since we don't really write/maintain that code. ",
            "author": "Mark Miller",
            "id": "comment-12761748"
        },
        {
            "date": "2009-10-02T22:22:43+0000",
            "content": "I already committed tha non-public-API changes. Maybe we add the other StringBuilders in contrib on separate issues. For highlighter I modified the public API of TextFragment to use CharSequence and deprecated the StringBuffer ctor. Maybe we can do this like this elsewhere, too. ",
            "author": "Uwe Schindler",
            "id": "comment-12761754"
        },
        {
            "date": "2009-10-02T22:23:21+0000",
            "content": "I vote to move to StringBuilder anyway if its in Contrib. Though probably not with Snowball, since we don't really write/maintain that code.\n\nActually I patched the Snowball stemmer code to get ridth of the use of reflection. So what we use is an altered version of their code. I tried to get Dr Porter to commit those changes for years but it's still the same. Based on this I think we could just keep going with our own stuff in there as long we keep a record of what we have done in case we want to merge with their trunk.  ",
            "author": "Karl Wettin",
            "id": "comment-12761755"
        },
        {
            "date": "2009-10-02T23:21:41+0000",
            "content": "Generification of Document. It makes now clear what getFields() returns really. This was very bad documented. Now its a List<Fieldable>. ",
            "author": "Uwe Schindler",
            "id": "comment-12761774"
        },
        {
            "date": "2009-10-03T00:27:34+0000",
            "content": "Actually I patched the Snowball stemmer code to get ridth of the use of reflection. So what we use is an altered version of their code. I tried to get Dr Porter to commit those changes for years but it's still the same. Based on this I think we could just keep going with our own stuff in there as long we keep a record of what we have done in case we want to merge with their trunk. \n\nOkay - lets do it then. Testing the English version, its actually almost twice as fast with a StringBuilder.\n\nI bet it would be almost twice as fast or better again if we could get rid of that nasty reflection ...\n\nedit\n\nWait ... do you mean you got rid of some of the reflection or did we lose your changes? I'm seeing some nasty slow reflection in there still ...\n\nedit\n\nerr... looks like perhaps its only hit once though and then reused.. maybe not so nasty. My first time looking at this code, so I'm sure you can clear it up ... ",
            "author": "Mark Miller",
            "id": "comment-12761785"
        },
        {
            "date": "2009-10-03T09:17:37+0000",
            "content": "Generification of Document. It makes now clear what getFields() returns really. This was very bad documented. Now its a List<Fieldable>. \n\nCommitted revision: 821277 ",
            "author": "Uwe Schindler",
            "id": "comment-12761836"
        },
        {
            "date": "2009-10-03T09:34:34+0000",
            "content": "Somewhat off-topic but in the course of porting to Java 5 I would suggest IndexWriter etc. to implement java.io.Closeable. ",
            "author": "Timo Nentwig",
            "id": "comment-12761839"
        },
        {
            "date": "2009-10-03T09:42:54+0000",
            "content": "Good idea! ",
            "author": "Uwe Schindler",
            "id": "comment-12761841"
        },
        {
            "date": "2009-10-03T09:52:25+0000",
            "content": "For the record, there is still some usage of StringBuffer in contrib/surround. Fortunately not in public API, only internal, and in some protected method parameters. ",
            "author": "Paul Elschot",
            "id": "comment-12761843"
        },
        {
            "date": "2009-10-03T10:26:31+0000",
            "content": "I know, protected is also public from the API side (one could subclass and use one of the protected methods), because of that I left it out for the beginning. This is why you should always think about making as most as possible (package-)private. ",
            "author": "Uwe Schindler",
            "id": "comment-12761852"
        },
        {
            "date": "2009-10-03T11:08:28+0000",
            "content": "StringBuffer to StringBuilder patch for conrib/surround ",
            "author": "Paul Elschot",
            "id": "comment-12761855"
        },
        {
            "date": "2009-10-03T11:13:56+0000",
            "content": "I would not expect that the protected methods in contrib/surround that are affected by this patch are actually overridden by other code. So formally this is an API change, but I don't think it is worth mentioning in other places than here. ",
            "author": "Paul Elschot",
            "id": "comment-12761856"
        },
        {
            "date": "2009-10-03T11:26:36+0000",
            "content": "Lets add a changes.txt entry in contrib about a BW break. ",
            "author": "Uwe Schindler",
            "id": "comment-12761859"
        },
        {
            "date": "2009-10-03T11:33:56+0000",
            "content": "patch with changes.txt ",
            "author": "Uwe Schindler",
            "id": "comment-12761860"
        },
        {
            "date": "2009-10-03T11:46:51+0000",
            "content": "Wait ... do you mean you got rid of some of the reflection or did we lose your changes? I'm seeing some nasty slow reflection in there still ...\n\nMy changes was to the abstract Snowball stemmer class. I simply added an abstract method and got rid of the reflection in the Lucene filter. \n\nOne could argue that we should update the Snowball compiler rather than updating the Java code it renders. But honestly I think we should just update the rendered code and then report any improvement found to the Snowball ml and keep track of it in the package readme.\n\nerr... looks like perhaps its only hit once though and then reused.. maybe not so nasty. My first time looking at this code, so I'm sure you can clear it up ...\n\nIt could still be rather expensive per stem at query time. I vote for getting rid of it if we can. I'll throw an eye at it. ",
            "author": "Karl Wettin",
            "id": "comment-12761862"
        },
        {
            "date": "2009-10-03T13:09:32+0000",
            "content": "Generification of Document. It makes now clear what getFields() returns really. This was very bad documented. Now its a List<Fieldable>.\n\nThis broke InstantiatedIndex in the trunk. Patch and commit is on the way. ",
            "author": "Karl Wettin",
            "id": "comment-12761870"
        },
        {
            "date": "2009-10-03T13:13:35+0000",
            "content": "how that? ",
            "author": "Uwe Schindler",
            "id": "comment-12761872"
        },
        {
            "date": "2009-10-03T13:14:03+0000",
            "content": "Generified ShingleMatrixFilter ",
            "author": "Karl Wettin",
            "id": "comment-12761873"
        },
        {
            "date": "2009-10-03T13:17:59+0000",
            "content": "Generified ShingleMatrixFilter\n\nCommitted in rev 821311 ",
            "author": "Karl Wettin",
            "id": "comment-12761874"
        },
        {
            "date": "2009-10-03T13:19:54+0000",
            "content": "how that?\n\nIt asserted that a Document contained a List<Field> rather than List<Fieldable> in ctor(IndexReader) , which I actually think is true at that point using that code. ",
            "author": "Karl Wettin",
            "id": "comment-12761875"
        },
        {
            "date": "2009-10-03T13:21:38+0000",
            "content": "Fix for InstantiadexIndex compile error caused by code committed in revision 821277\nList<Fieldable> rather than List<Field> ",
            "author": "Karl Wettin",
            "id": "comment-12761876"
        },
        {
            "date": "2009-10-03T13:24:11+0000",
            "content": "Fix for InstantiadexIndex compile error caused by code committed in revision 821277\n\nCommitted in rev 821315 ",
            "author": "Karl Wettin",
            "id": "comment-12761877"
        },
        {
            "date": "2009-10-03T13:24:13+0000",
            "content": "Ah ok, the list is Fieldable. That was exactly the problem with Document, it was not documented, what was inside \n\nJust commit it. ",
            "author": "Uwe Schindler",
            "id": "comment-12761878"
        },
        {
            "date": "2009-10-03T15:14:22+0000",
            "content": "changes o.a.l.messages (back) to varargs syntax to match the java 5 MessageFormat and removes ugly Object[] {} wrappers. ",
            "author": "Robert Muir",
            "id": "comment-12761899"
        },
        {
            "date": "2009-10-03T23:12:57+0000",
            "content": "Committed Revision: 821443 (Change some occurrences of StringBuffer in public/protected APIs of contrib/surround to StringBuilder) ",
            "author": "Uwe Schindler",
            "id": "comment-12761970"
        },
        {
            "date": "2009-10-03T23:37:13+0000",
            "content": "Committed revision: 821447 (o.a.l.messages vararg conversion) ",
            "author": "Uwe Schindler",
            "id": "comment-12761975"
        },
        {
            "date": "2009-10-04T09:53:47+0000",
            "content": "Uwe, thanks for adding the changes.txt entry and committing the contrib/surround StringBuffer to StringBuilder patch. ",
            "author": "Paul Elschot",
            "id": "comment-12762012"
        },
        {
            "date": "2009-10-05T09:58:11+0000",
            "content": "err... looks like perhaps its only hit once though and then reused.. maybe not so nasty. My first time looking at this code, so I'm sure you can clear it up ...\n\nMark, are you referring to the reflection in Among? Those are pretty tough to get rid of.\n\nI think we should replace the StringBuffers in the stemmers if nobody else minds. But I think we should do that in another issue. I also found a bit of ASL headers in some of the classes. Suppose they have been added automatically at some point. These classes are all BSD. ",
            "author": "Karl Wettin",
            "id": "comment-12762131"
        },
        {
            "date": "2009-10-07T14:58:20+0000",
            "content": "Not sure if that's the right issue, but still.\n\nAmongst other stuff Java5 introduced for-each loops, which can replace lots of for/while constructs with more readable ones.\nShould I post the patch with all such loops converted? ",
            "author": "Earwin Burrfoot",
            "id": "comment-12763083"
        },
        {
            "date": "2009-10-07T15:02:14+0000",
            "content": "Also, we can remove tons of boxing/unboxing, auto(un)boxing calls the very same valueOf(), nnnValue() methods for us. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12763087"
        },
        {
            "date": "2009-10-10T07:56:15+0000",
            "content": "eclipse has a code cleanup tool that can easily do all this automatically. It can also make all possible fields/variables final, something I would like to recommend as well. ",
            "author": "Timo Nentwig",
            "id": "comment-12764315"
        },
        {
            "date": "2009-10-16T18:42:26+0000",
            "content": "\n\tDisjunctionMaxQuery.java - some of the casts are not necessary now that the members are made type-safe.\n\n ",
            "author": "Karthik K",
            "id": "comment-12766649"
        },
        {
            "date": "2009-10-16T18:54:24+0000",
            "content": "Committed revision: 826035 ",
            "author": "Uwe Schindler",
            "id": "comment-12766657"
        },
        {
            "date": "2009-10-17T06:52:08+0000",
            "content": "\n\tBooleanFilter ( internal data structures conformed to generics )\n\n ",
            "author": "Karthik K",
            "id": "comment-12766842"
        },
        {
            "date": "2009-10-17T07:11:22+0000",
            "content": "Generify signatures.  ",
            "author": "Karthik K",
            "id": "comment-12766848"
        },
        {
            "date": "2009-10-17T08:07:56+0000",
            "content": "I am working on it, I already fixed the missing SegmentInfo clone cast. Was there any other change in the SegmentInfo patch? ",
            "author": "Uwe Schindler",
            "id": "comment-12766858"
        },
        {
            "date": "2009-10-17T08:38:22+0000",
            "content": "again we have the date sorting bug in JIRA because of am/pm. Can someone change JIRA to use ISO 8601 datstamps in its filelist and everywhere? krrrrrrrrrr.\n\nKay kay: please wait one hour with posting more patches, otherwise I will loose track. ",
            "author": "Uwe Schindler",
            "id": "comment-12766861"
        },
        {
            "date": "2009-10-17T09:54:46+0000",
            "content": "Committed:\n   LUCENE-1257-SegmentInfos.patch 2009-10-17 12:59 AM Kay Kay 6 kB \n   LUCENE-1257-BufferedDeletes_DocumentsWriter.patch 2009-10-17 12:44 AM Kay Kay 5 kB \n   LUCENE-1257-NormalizeCharMap.patch 2009-10-17 12:15 AM Kay Kay 1 kB \n   LUCENE-1257-WordListLoader.patch 2009-10-17 12:11 AM Kay Kay 3 kB \n   LUCENE-1257-BooleanScorer_2.patch 2009-10-17 01:39 AM Kay Kay 4 kB \n   LUCENE-1257-BooleanQuery.patch 2009-10-17 01:31 AM Kay Kay 5 kB \n   LUCENE-1257_BooleanFilter_Generics.patch 2009-10-16 11:52 PM Kay Kay 4 kB \n\nI also made BooleanQuery Iterable<BooleanClause> for easy usage in advanced for loops. Also added some @Override there.\n\nRevision: 826213 - Thanks Kay Kay! ",
            "author": "Uwe Schindler",
            "id": "comment-12766869"
        },
        {
            "date": "2009-10-17T15:39:15+0000",
            "content": "Thanks Uwe for helping with the patches.  ",
            "author": "Karthik K",
            "id": "comment-12766931"
        },
        {
            "date": "2009-10-17T19:15:37+0000",
            "content": "Committed:\n   LUCENE-1257-DocFieldProcessorPerThread.patch 2009-10-17 09:40 AM Kay Kay 4 kB \n   LUCENE-1257-DirectoryReader.patch 2009-10-17 09:12 AM Kay Kay 8 kB \n   LUCENE-1257-ConcurrentMergeScheduler.patch 2009-10-17 08:56 AM Kay Kay 2 kB \n   LUCENE-1257-CompoundFileReaderWriter.patch 2009-10-17 08:52 AM Kay Kay 3 kB \n   LUCENE-1257-CheckIndex.patch 2009-10-17 08:48 AM Kay Kay 6 kB \n\nI also added some more generics to FilterIndexReader, MultiReader, ParallelReader (commitUserData, getFieldNames).\n\nRevision: 826290 - Thanks Kay Kay. ",
            "author": "Uwe Schindler",
            "id": "comment-12766948"
        },
        {
            "date": "2009-10-17T19:16:13+0000",
            "content": "Kay Kay: You can also provide only one combined patch instead of separate ones. ",
            "author": "Uwe Schindler",
            "id": "comment-12766949"
        },
        {
            "date": "2009-10-18T05:04:38+0000",
            "content": "Patch across a good number of files in org.apache.lucene.index ( generify )  ",
            "author": "Karthik K",
            "id": "comment-12767011"
        },
        {
            "date": "2009-10-18T09:28:11+0000",
            "content": "Whitespace-cleanup of your patch. See also http://www.lucidimagination.com/search/document/62fe00098351dbe3/whitespace_inside_generics_parameters for how Lucene should format generics parameters.\n\nI will apply when all tests are run. Thank you for the hard work, that not really fun to convert all this  ",
            "author": "Uwe Schindler",
            "id": "comment-12767029"
        },
        {
            "date": "2009-10-18T09:51:54+0000",
            "content": "Committed LUCENE-1257_org_apache_lucene_index.patch\nAt revision: 826389 ",
            "author": "Uwe Schindler",
            "id": "comment-12767033"
        },
        {
            "date": "2009-10-18T14:55:32+0000",
            "content": "More set of patches in org.apache.lucene.document .  ",
            "author": "Karthik K",
            "id": "comment-12767070"
        },
        {
            "date": "2009-10-18T15:13:57+0000",
            "content": "More set of patches in org.apache.lucene.document\n\nYou mean not only document?\n\nI looked through it: The o.a.l.util.cache is not ideal: The whole classes should take a <K,V> parameter for the cache and not be fixed to <Object,Object>. This was on my list to fix, so I would leave out the whole cache package in this patch and fix it myself. ",
            "author": "Uwe Schindler",
            "id": "comment-12767072"
        },
        {
            "date": "2009-10-18T15:49:50+0000",
            "content": "\n\tMostly with IndexWriter\n\n ",
            "author": "Karthik K",
            "id": "comment-12767082"
        },
        {
            "date": "2009-10-18T16:19:43+0000",
            "content": "Attached is a new patch with a correct generified o.a.l.util.cache package. Now only the usage of this SimpleLRUCache should also be generified.\n\nKay Kay: Do you want to do this or should I do it? ",
            "author": "Uwe Schindler",
            "id": "comment-12767086"
        },
        {
            "date": "2009-10-18T16:21:00+0000",
            "content": "Uwe: Please feel free to go ahead and do it and commit it, that I can pick up the diff.  ",
            "author": "Karthik K",
            "id": "comment-12767087"
        },
        {
            "date": "2009-10-18T16:21:53+0000",
            "content": "IndexDelete (Policy) and stuff ",
            "author": "Karthik K",
            "id": "comment-12767088"
        },
        {
            "date": "2009-10-18T17:39:05+0000",
            "content": "o.a.l.search package - generified ",
            "author": "Karthik K",
            "id": "comment-12767097"
        },
        {
            "date": "2009-10-18T17:52:28+0000",
            "content": "o.a.l.search.spans - generics added ",
            "author": "Karthik K",
            "id": "comment-12767102"
        },
        {
            "date": "2009-10-18T19:42:13+0000",
            "content": " Attached is a new patch with a correct generified o.a.l.util.cache package. Now only the usage of this SimpleLRUCache should also be generified.\n\nKay Kay: Do you want to do this or should I do it?\n\nRevised patch attached that address issue with SimpleLRUCache as well  ",
            "author": "Karthik K",
            "id": "comment-12767116"
        },
        {
            "date": "2009-10-18T20:15:28+0000",
            "content": "\n\tMapOfSets\n\tFieldCacheSanityChecker\n\n ",
            "author": "Karthik K",
            "id": "comment-12767123"
        },
        {
            "date": "2009-10-18T21:11:45+0000",
            "content": "Looks good!\n\nCommitted (with some modifications and additions from my last patch):\n   LUCENE-1257-o.a.l.util.patch 2009-10-18 01:15 PM Kay Kay 10 kB \n   LUCENE-1257-org_apache_lucene_document.patch 2009-10-18 12:42 PM Kay Kay 29 kB \n   LUCENE-1257_o.a.l.store.patch 2009-10-18 11:04 AM Kay Kay 12 kB \n   LUCENE-1257_o_a_l_search_spans.patch 2009-10-18 10:52 AM Kay Kay 16 kB \n   LUCENE-1257_o_a_l_search.patch 2009-10-18 10:39 AM Kay Kay 28 kB \n   LUCENE-1257-IndexDeleter.patch 2009-10-18 09:21 AM Kay Kay 13 kB \n   LUCENE-1257-iw.patch 2009-10-18 08:49 AM Kay Kay 19 kB \n\nThanks Kay Kay!\n\nAt revision: 826527 ",
            "author": "Uwe Schindler",
            "id": "comment-12767131"
        },
        {
            "date": "2009-10-18T21:19:08+0000",
            "content": "o.a.lucene.index in src/test  ",
            "author": "Karthik K",
            "id": "comment-12767132"
        },
        {
            "date": "2009-10-18T21:22:46+0000",
            "content": "Patch resubmitted confirming to generics code guidelines  ",
            "author": "Karthik K",
            "id": "comment-12767133"
        },
        {
            "date": "2009-10-18T21:36:04+0000",
            "content": "I think test code rewrite is not so important now. I think first I have to remove the rest of the deprecations and fix the test bug (see java-dev mail).\n\nI ran the compilation with unchecked warnings turned on, only 38 warnings for core. I think the rest in core should be doable now  JUHU! ",
            "author": "Uwe Schindler",
            "id": "comment-12767136"
        },
        {
            "date": "2009-10-18T21:37:30+0000",
            "content": "IndexFileDeleter\nIndexDeletePolicy \n ",
            "author": "Karthik K",
            "id": "comment-12767137"
        },
        {
            "date": "2009-10-18T21:38:46+0000",
            "content": " I think test code rewrite is not so important now. I think first I have to remove the rest of the deprecations and fix the test bug (see java-dev mail).\n\nI ran the compilation with unchecked warnings turned on, only 38 warnings for core. I think the rest in core should be doable now JUHU!\n\n\nOk - Makes sense. It would be nice to get it down to 0 soon.. ",
            "author": "Karthik K",
            "id": "comment-12767138"
        },
        {
            "date": "2009-10-18T21:54:38+0000",
            "content": "IndexFileDeleter, IndexDeletePolicy \n\nLast patch makes sense, its better to use abstract base class! Committed.\n\nWith generified ThreadLocal I get now 73 warnings, some more  ",
            "author": "Uwe Schindler",
            "id": "comment-12767140"
        },
        {
            "date": "2009-10-18T21:57:54+0000",
            "content": "o.a.l.queryParser  ",
            "author": "Karthik K",
            "id": "comment-12767141"
        },
        {
            "date": "2009-10-18T22:21:51+0000",
            "content": "Analyzer  (generified ) \n\nOther Analyzers. \n\nFirst cut version of the patch. If Analyzer<T> is ok - then other analyzers can be ported soon to this as well.  ",
            "author": "Karthik K",
            "id": "comment-12767145"
        },
        {
            "date": "2009-10-18T22:28:05+0000",
            "content": "First cut version of the patch. If Analyzer<T> is ok - then other analyzers can be ported soon to this as well.\n\nThat's unneeded. Analyzer always return a TokenStream and Tokenizer is a subclass of TokenStream. This makes no sense.\n\nFrom your patch, it seems that you want to generify the setPreviousTokenStream method. This shoudl not take Object, it should take TokenStream as param. But this has nothing to do with Java 5.\n\nRobert Muir knows more, he implemented this caching. ",
            "author": "Uwe Schindler",
            "id": "comment-12767149"
        },
        {
            "date": "2009-10-18T23:00:45+0000",
            "content": "LUCENE-1257_o.a.l.queryParser.patch\n\nThis is hard to generify, because parts of the API are provided by javacc. You can only patch the .jj file but only parts not automatically generated by javacc.\n\nI would keep this classes as they are and maybe update javacc's param to generate 1.5 code. I will look into this. ",
            "author": "Uwe Schindler",
            "id": "comment-12767152"
        },
        {
            "date": "2009-10-18T23:23:28+0000",
            "content": "\nLUCENE-1257_o.a.l.queryParser.patch\n\nThis is hard to generify, because parts of the API are provided by javacc. You can only patch the .jj file but only parts not automatically generated by javacc.\n\nI would keep this classes as they are and maybe update javacc's param to generate 1.5 code. I will look into this.\n\nI updated the parser generator task to use Java 1.5. If you want to generify the other parts of QueryParser, update the .jj file and regenerate the java files. I will do this tomorrow. Will go to bed now. ",
            "author": "Uwe Schindler",
            "id": "comment-12767155"
        },
        {
            "date": "2009-10-18T23:23:29+0000",
            "content": "\nFrom your patch, it seems that you want to generify the setPreviousTokenStream method. This shoudl not take Object, it should take TokenStream as param. But this has nothing to do with Java 5.\n\ncheck out LUCENE-1794 for some related discussion.\n\nThere are a few things that come to mind:\n\n\tfor reusable token streams, an analyzer needs to reset the chain: .reset(), but it also needs to call reset(Reader) which is only applicable to Tokenizer. This is why you see private classes like SavedStreams being used.\n\tbecause .tokenStream() takes a fieldname as an argument, some analyzers have special field-specific behavior. To reuse for these analyzers can be more complex, for example QueryAutoStopWordAnalyzer sets/gets a map.\n\n ",
            "author": "Robert Muir",
            "id": "comment-12767156"
        },
        {
            "date": "2009-10-18T23:27:20+0000",
            "content": "Robert: Thanks!\n\nBut we should not generify the wole analyzer class just because we have some internal helper API that may be generified. We are OK with casts from Object downto the actual type here. A type param in Analyzer is strange and confusing for outstanding developers. ",
            "author": "Uwe Schindler",
            "id": "comment-12767157"
        },
        {
            "date": "2009-10-18T23:30:06+0000",
            "content": "Uwe, I agree. I think if we want to improve this reusability in the future, we should look at doing something similar to what Shai Erera proposed, a subclass of Analyzer that does the common SavedStreams behavior.\n\nBut I think Analyzer should still have Object, so the special cases like QueryAutoStopWord can be implemented. ",
            "author": "Robert Muir",
            "id": "comment-12767158"
        },
        {
            "date": "2009-10-18T23:33:35+0000",
            "content": "So we just generify the ThreadLocal to <Object> or <?> and finito. I had that in mind.\n\nAs noted before: the generic type param Kay Kay added has nothing to do with the Analyzer itsself, only with its internal impl. So do not make it public! The Object returning save/get method is just a very special helper. And this down-cast is not \"unsafe\" as long as you do not reuse the method from somewhere outside of Analyzer. ",
            "author": "Uwe Schindler",
            "id": "comment-12767160"
        },
        {
            "date": "2009-10-19T00:41:38+0000",
            "content": "updated analysis patch. \nI did not touch StopFilter or StopAnalyzer due to some mixed CharArraySet / Set<String> usage... any ideas on this one Uwe? ",
            "author": "Robert Muir",
            "id": "comment-12767177"
        },
        {
            "date": "2009-10-19T01:31:51+0000",
            "content": "Classes affected: \n\n\n\tTermInfosReader\n\tSegmentReader\n\tFieldsReader\n\n\n ",
            "author": "Karthik K",
            "id": "comment-12767188"
        },
        {
            "date": "2009-10-19T06:33:54+0000",
            "content": "I did not touch StopFilter or StopAnalyzer due to some mixed CharArraySet / Set<String> usage... any ideas on this one Uwe? \n\nI am hanging on that, too. See also LUCENE-1987 and LUCENE-1989. As this set needs no type safety (when it is implemented by CharArraySet) it does not matter if the contains methods uses char[] or String or even Object. It always compares the string representation of the tested value. As CharArraySet is defined as Set<Object>, we should define all these as Set<Object> in StopFilter. Or declare them as CharArraySet and convert the anonyous Set<?> to CharArraySet in the ctor (I would prefer this). ",
            "author": "Uwe Schindler",
            "id": "comment-12767225"
        },
        {
            "date": "2009-10-19T08:08:00+0000",
            "content": "I removed some unneeded patches. ",
            "author": "Uwe Schindler",
            "id": "comment-12767240"
        },
        {
            "date": "2009-10-19T08:14:59+0000",
            "content": "Comitted:\n   LUCENE-1257-CloseableThreadLocal.patch 2009-10-18 06:31 PM Kay Kay 4 kB \n   LUCENE-1257_analysis.patch 2009-10-18 05:41 PM Robert Muir 8 kB \n\nAt revision: 826601 ",
            "author": "Uwe Schindler",
            "id": "comment-12767241"
        },
        {
            "date": "2009-10-19T08:20:54+0000",
            "content": "One note: I do not want to apply any test-related generics patches, as it makes it harder to port patches to the backwards branch currently.\nAs soon as all deprecations are removed, we could start with fixing the tests. Before removing all deprecations it may often be needed to also apply changes to the backwards branch, which is Java 1.4 for backwards testing with 2.9. ",
            "author": "Uwe Schindler",
            "id": "comment-12767242"
        },
        {
            "date": "2009-10-19T20:47:13+0000",
            "content": "\n\tFieldValueHitQueue\n\tTopDocsCollector\n\tTopScoreDocsCollector\n\tTopFieldHitsCollector\n\n ",
            "author": "Karthik K",
            "id": "comment-12767533"
        },
        {
            "date": "2009-10-19T22:55:42+0000",
            "content": "better generification of MultiTermQueryWrapperFilter (no more casts in sub-classes). ",
            "author": "Uwe Schindler",
            "id": "comment-12767599"
        },
        {
            "date": "2009-10-19T22:59:21+0000",
            "content": "Committed:\n   LUCENE-1257-MTQWF.patch 2009-10-19 10:55 PM Uwe Schindler 5 kB \n   LUCENE-1257-TopDocsCollector.patch 2009-10-19 08:47 PM Kay Kay 8 kB \n   LUCENE-1257-FieldCacheImpl.patch 2009-10-19 08:23 PM Kay Kay 8 kB \n\n(with some modifications in FieldCacheImpl, where Class was not generified to Class<?>).\n\nAt revision: 826857 ",
            "author": "Uwe Schindler",
            "id": "comment-12767603"
        },
        {
            "date": "2009-10-19T23:27:06+0000",
            "content": "\n\n\n I updated the parser generator task to use Java 1.5. If you want to generify the other parts of QueryParser, update the .jj file and regenerate the java files. I will do this tomorrow. Will go to bed now.\n\n\n\n\n\nWhat's the version of javacc being used/suggested currently ( the latest release seems to be 5.0 ) . ",
            "author": "Karthik K",
            "id": "comment-12767611"
        },
        {
            "date": "2009-10-19T23:41:32+0000",
            "content": "FieldCacheRangeFilter generified + type safe accessor methods.\n\nCommitted revision: 826883 ",
            "author": "Uwe Schindler",
            "id": "comment-12767615"
        },
        {
            "date": "2009-10-19T23:43:44+0000",
            "content": "What's the version of javacc being used/suggested currently ( the latest release seems to be 5.0 ) .\n\nFrom BUILD.txt (I suggest to use this version 4.1, e.g. 4.2 has a bug that corrupts the parser somehow):\n\nStep 3) Install JavaCC\n\nBuilding the Lucene distribution from the source does not require the JavaCC\nparser generator, but if you wish to regenerate any of the pre-generated\nparser pieces, you will need to install JavaCC. Version 4.1 is tested to\nwork correctly.\n\n  http://javacc.dev.java.net\n\nFollow the download links and download the zip file to a temporary\nlocation on your file system.\n\nAfter JavaCC is installed, create a build.properties file\n(as in step 2), and add the line\n\n  javacc.home=/javacc\n\nwhere this points to the root directory of your javacc installation\n(the directory that contains bin/lib/javacc.jar). ",
            "author": "Uwe Schindler",
            "id": "comment-12767617"
        },
        {
            "date": "2009-10-19T23:45:32+0000",
            "content": "QueryParser.jj patch separately for generics  ",
            "author": "Karthik K",
            "id": "comment-12767618"
        },
        {
            "date": "2009-10-19T23:50:30+0000",
            "content": "MultiFieldQueryParser  ",
            "author": "Karthik K",
            "id": "comment-12767621"
        },
        {
            "date": "2009-10-20T00:06:20+0000",
            "content": "common-build.xml , build comments match those in build.txt  ",
            "author": "Karthik K",
            "id": "comment-12767630"
        },
        {
            "date": "2009-10-20T16:07:19+0000",
            "content": "Committed:\n   LUCENE-1257_javacc_upgrade.patch 2009-10-20 12:06 AM Kay Kay 0.8 kB \n   LUCENE-1257_MultiFieldQueryParser.patch 2009-10-19 11:50 PM Kay Kay 3 kB \n   LUCENE-1257_queryParser_jj.patch 2009-10-19 11:45 PM Kay Kay 6 kB \n\nAlso removed deprecated API from QueryParser.\n\nAt revision: 827717 ",
            "author": "Uwe Schindler",
            "id": "comment-12767852"
        },
        {
            "date": "2009-10-20T20:34:36+0000",
            "content": "Remove unnecessary cast across the codebase (as a result of generification)  ",
            "author": "Karthik K",
            "id": "comment-12767930"
        },
        {
            "date": "2009-10-20T21:45:30+0000",
            "content": "Thanks! Much cleaner code. \u2013 Committed revision: 827811 ",
            "author": "Uwe Schindler",
            "id": "comment-12767953"
        },
        {
            "date": "2009-10-20T22:02:41+0000",
            "content": "Migrates to Java 5 enums in core and contrib. All tests pass.\nDeprecates o.a.l.util.Parameter. It probably can be removed. ",
            "author": "DM Smith",
            "id": "comment-12767965"
        },
        {
            "date": "2009-10-20T22:17:15+0000",
            "content": "DM Smith: Can you open a new issue. This is more complicated because of backwards compatibility, so a separate issue would be great.\n\nI like your code rewrite (it could even be done with Parameter in the same way). By the way: Java5's Enum is also Serializable, so no problem. ",
            "author": "Uwe Schindler",
            "id": "comment-12767977"
        },
        {
            "date": "2009-10-20T22:31:25+0000",
            "content": "I've moved the patch for Java 5 enums to its own issue: LUCENE-1998 ",
            "author": "DM Smith",
            "id": "comment-12767986"
        },
        {
            "date": "2009-10-21T08:48:54+0000",
            "content": "Created a new issue out of clone invariance patch: LUCENE-2000 ",
            "author": "Uwe Schindler",
            "id": "comment-12768136"
        },
        {
            "date": "2009-10-21T13:39:47+0000",
            "content": "Committed:\n\n\tLUCENE-1257_more_unnecessary_casts.patch\n\tRemove the rest of unchecked warnings. I added a TODO, where I do not understand the code and not for sure know, whats inside the collections. This could be fixed some time later. But the core code now compiles without any unchecked warning.\n\n\n\nRevision: 828011 ",
            "author": "Uwe Schindler",
            "id": "comment-12768234"
        },
        {
            "date": "2009-10-23T11:54:36+0000",
            "content": "Committed:\n   LUCENE-1257_contrib_benchmark.patch 2009-10-22 05:53 PM Kay Kay 56 kB \n   LUCENE-1257_unnnecessary_casts_2.patch 2009-10-22 08:16 PM Kay Kay 22 kB \n\nRevision: 829013\n\nWith the highlighter patch I will wait until LUCENE-2003 is done to not break the patch of Mark. ",
            "author": "Uwe Schindler",
            "id": "comment-12769186"
        },
        {
            "date": "2009-10-25T10:16:50+0000",
            "content": "Committed:\n   LUCENE-1257_contrib_benchmark_2.patch 2009-10-23 03:36 PM Kay Kay 22 kB \n   LUCENE-1257_contrib_highlighting.patch \n\nKay Kay, if you want usage of Class.forName() correct generics without casts, you have to do it that way:\n\n\nMyClass instance = Class.forName(nameOfClassToInstantiate).asSubclass(MyClass.class).newInstance()\n\n\n\nSame applies to other usages of Class<?>. I modified your benchmark changes to do this pattern.\n\nRevision: 829524 ",
            "author": "Uwe Schindler",
            "id": "comment-12769778"
        },
        {
            "date": "2009-10-25T14:25:29+0000",
            "content": "\nI modified your benchmark changes to do this pattern.\n\nThanks for the heads up. Future patches take care of the same.  ",
            "author": "Karthik K",
            "id": "comment-12769827"
        },
        {
            "date": "2009-10-28T23:24:00+0000",
            "content": "Committed:\n   LUCENE-1257_precendence_parser.patch 2009-10-25 02:35 PM Kay Kay 9 kB \n   LUCENE-1257_contrib_misc.patch 2009-10-25 02:24 PM Kay Kay 18 kB \n   LUCENE-1257_contrib_memory.patch 2009-10-25 02:02 PM Kay Kay 26 kB \n\nI had to fix some small things (one extended for-loop removed, because loop variable had to be global). Also moved the AnalyzerUtil/SynonyMap to wordnet contrib (see LUCENE-1904). Also converted the stop words in PatternAnalyzer to CharArraySet/Set<?> like in other analyzers.\n\nAt revision: 830790 ",
            "author": "Uwe Schindler",
            "id": "comment-12771194"
        },
        {
            "date": "2009-10-29T15:51:14+0000",
            "content": "generics patch for smartcn. \n\ntype safety is useful here, it found a problem in the javadocs  ",
            "author": "Robert Muir",
            "id": "comment-12771454"
        },
        {
            "date": "2009-10-29T21:50:44+0000",
            "content": "Robert: I think you can commit it yourself, I am away now  Looks good on a diagonal view... Even you have the stopwords set with <?> - like everywhere else. I trust you! ",
            "author": "Uwe Schindler",
            "id": "comment-12771642"
        },
        {
            "date": "2009-10-29T21:55:01+0000",
            "content": "Uwe, thanks for taking a look. i think theres some complex hashmaps mapping Integer to ArrayList where i could have used ? extends List instead of ArrayList, but its internally used anyway, so I didn't bother.\n\nI'll commit the patch shortly. ",
            "author": "Robert Muir",
            "id": "comment-12771643"
        },
        {
            "date": "2009-10-29T22:30:49+0000",
            "content": "Committed LUCENE-1257_contrib_smartcn.patch, revision 831121. ",
            "author": "Robert Muir",
            "id": "comment-12771662"
        },
        {
            "date": "2009-11-09T18:57:29+0000",
            "content": "generics patch for a couple of files  ",
            "author": "Karthik K",
            "id": "comment-12775073"
        },
        {
            "date": "2009-11-10T02:11:26+0000",
            "content": "contrib/swing,contrib/wikipedia,contrib/wordnet,contrib/xml-query-parser ",
            "author": "Robert Muir",
            "id": "comment-12775251"
        },
        {
            "date": "2009-11-10T10:18:41+0000",
            "content": "Committed:\n   LUCENE-1257_swing_wikipedia_wordnet_xmlqp.patch 2009-11-10 02:11 AM Robert Muir 24 kB \n   LUCENE-1257_o_a_l_demo.patch 2009-11-09 06:57 PM Kay Kay 1 kB \n\nAt revision: 834414 ",
            "author": "Uwe Schindler",
            "id": "comment-12775366"
        },
        {
            "date": "2009-11-10T22:33:17+0000",
            "content": "lucli  generics  ",
            "author": "Karthik K",
            "id": "comment-12776125"
        },
        {
            "date": "2009-11-10T23:09:29+0000",
            "content": "I revised this patch and did some minor cleanups in lucil. \n\n\tChanged while(iterator.hasNext()) to java 5 loops.\n\tadded suppress warnings\n\tchanged some sysouts to messag()\n\n ",
            "author": "Simon Willnauer",
            "id": "comment-12776143"
        },
        {
            "date": "2009-11-10T23:17:59+0000",
            "content": "simon, cool, I think it would be good if we were consistent with generics formatting tho:\n\n\npublic static <K, V extends Comparable<V>> Map.Entry<K,V>[]\n\n\n\nI think it should be K,V with no space? ",
            "author": "Robert Muir",
            "id": "comment-12776155"
        },
        {
            "date": "2009-11-10T23:23:15+0000",
            "content": "I think for such complex thing, sometimes spaces may be good  But for the typical <K,V>, <String,String> and so on it is hard. There are already some in AttributeSource like this.\n\nBy the way, I uploaded a new Eclipse code style during ApacheCon to wiki. ",
            "author": "Uwe Schindler",
            "id": "comment-12776157"
        },
        {
            "date": "2009-11-10T23:25:27+0000",
            "content": "Oh god:\n\n+  @SuppressWarnings(\"unchecked\")\n+  public static <K, V extends Comparable<V>> Map.Entry<K,V>[]\n+    getSortedMapEntries(Map<K,V> m) {\n+    Set<Map.Entry<K, V>> set = m.entrySet();\n+    Map.Entry<K,V>[] entries =\n+       set.toArray(new Map.Entry[set.size()]);\n+    Arrays.sort(entries, new Comparator<Map.Entry<K,V>>() {\n+      public int compare(Map.Entry<K, V> o1, Map.Entry<K, V> o2) {\n+        V v1 = o1.getValue();\n+        V v2 = o2.getValue();\n+        return v2.compareTo(v1); //descending order\n\n\n\nWhat's that g. It needs suppress warnings because of the array creation? ",
            "author": "Uwe Schindler",
            "id": "comment-12776161"
        },
        {
            "date": "2009-11-10T23:27:49+0000",
            "content": "I think for such complex thing, sometimes spaces may be good But for the typical <K,V>, <String,String> and so on it is hard. There are already some in AttributeSource like this. \n\nSimon/Uwe I wasn't trying to be picky, more for my own knowledge.\nContrib formatting is insanity anyway, so I don't object to any patch that introduces type safety  ",
            "author": "Robert Muir",
            "id": "comment-12776166"
        },
        {
            "date": "2009-11-11T00:02:16+0000",
            "content": "I am not sure what the consensus w.r.t warnings are - but as much as possible leaving out SuppressWarnings would be better so that it is transparent in the future to address should the dependent library change. \n ",
            "author": "Karthik K",
            "id": "comment-12776180"
        },
        {
            "date": "2009-11-11T00:05:58+0000",
            "content": "Committed:\n   LUCENE-1257_lucil.patch 2009-11-10 11:09 PM Simon Willnauer 11 kB \n\nAt revision: 834720 - Thanks Simon & Kay ",
            "author": "Uwe Schindler",
            "id": "comment-12776183"
        },
        {
            "date": "2009-11-11T00:08:21+0000",
            "content": "Kay Kay: We only have SuppressWarnings at some places in core, marked with a big TODO (will be done when flex indeixng comes). The \"wanted\" @SuppressWarnings are only at places, where generic Arrays are created. There is no way to fix this (see Sun Generics Howto). ",
            "author": "Uwe Schindler",
            "id": "comment-12776184"
        },
        {
            "date": "2009-11-11T02:04:38+0000",
            "content": "contrib ant ",
            "author": "Karthik K",
            "id": "comment-12776239"
        },
        {
            "date": "2009-11-11T02:15:28+0000",
            "content": "generics in benchmark, spellcheck, spatial, snowball, and queries.\ni didn't finish MoreLikeThis in contrib/queries so it still needs to be done. ",
            "author": "Robert Muir",
            "id": "comment-12776241"
        },
        {
            "date": "2009-11-11T08:33:10+0000",
            "content": "I replace my previous patch with this much larger patch.\n\nsome of it is autogen but I reviewed/corrected ",
            "author": "Robert Muir",
            "id": "comment-12776376"
        },
        {
            "date": "2009-11-11T12:14:36+0000",
            "content": "I removed also the suppresswarnings and generified TermsHash code. I also added more generics to the changes you already did (because Eclipse is not able to automatically add generics inside generics, e.g. Map<X,Collection<Y>>).\n\nThis patch also contains the ant task.\n\nWill commit, when all tests finished. ",
            "author": "Uwe Schindler",
            "id": "comment-12776429"
        },
        {
            "date": "2009-11-11T12:20:01+0000",
            "content": "Committed:\n   LUCENE-1257_heavy.patch 2009-11-11 12:14 PM Uwe Schindler 69 kB (contains LUCENE-1257_contrib_ant.patch)\n\nAt revision: 834847 - Thanks Robert, Kay, me ",
            "author": "Uwe Schindler",
            "id": "comment-12776430"
        },
        {
            "date": "2009-11-13T08:24:47+0000",
            "content": "Robert: Is there anything else in contrib to convert? If no, I would close this issue for now.\n\nIf we find further Java5 conversions after release of 3.0, we can open new issues. ",
            "author": "Uwe Schindler",
            "id": "comment-12777419"
        },
        {
            "date": "2009-11-13T11:01:25+0000",
            "content": "If we find further Java5 conversions after release of 3.0, we can open new issues.\nUwe, I agree, I think you should close the issue. ",
            "author": "Robert Muir",
            "id": "comment-12777449"
        },
        {
            "date": "2009-11-13T11:12:21+0000",
            "content": "We gonna reopen it in 3.0 anyway so just go ahead and close for now! ",
            "author": "Simon Willnauer",
            "id": "comment-12777454"
        },
        {
            "date": "2009-11-13T11:39:29+0000",
            "content": "Closed for 3.0. Further updates of tests and internal APIs may follow for 3.1 in a new issue. ",
            "author": "Uwe Schindler",
            "id": "comment-12777466"
        },
        {
            "date": "2009-11-13T23:16:21+0000",
            "content": "\n\n\n  Further updates of tests and internal APIs may follow for 3.1 in a new issue\n\n\n\n\n\n \t LUCENE-2065 in place for 3.1 to address remaining changes.   ",
            "author": "Karthik K",
            "id": "comment-12777731"
        }
    ]
}