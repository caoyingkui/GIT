{
    "id": "LUCENE-666",
    "title": "TERM1 OR NOT TERM2 does not perform as expected",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.0.0",
        "resolution": "Unresolved",
        "status": "Reopened"
    },
    "description": "test:\n    [junit] Testsuite: org.apache.lucene.search.TestAornotB\n    [junit] Tests run: 3, Failures: 1, Errors: 0, Time elapsed: 0.39 sec\n\n    [junit] ------------- Standard Output ---------------\n    [junit] Doc1 = A B C\n    [junit] Doc2 = A B C D\n    [junit] Doc3 = A   C D\n    [junit] Doc4 =   B C D\n    [junit] Doc5 =     C D\n    [junit] -------------------------------------------------\n    [junit] With query \"A OR NOT B\" we expect to hit\n    [junit] all documents EXCEPT Doc4, instead we only match on Doc3.\n    [junit] While LUCENE currently explicitly does not support queries of\n    [junit] the type \"find docs that do not contain TERM\" - this explains\n    [junit] not finding Doc5, but does not justify elimnating Doc1 and Doc2\n    [junit] -------------------------------------------------\n    [junit]  the fix shoould likely require a modification to QueryParser.jj\n    [junit]  around the method:\n    [junit]  protected void addClause(Vector clauses, int conj, int mods, Query q)\n    [junit] Query:c:a -c:b hits.length=1\n    [junit] Query Found:Doc[0]= A C D\n    [junit] 0.0 = (NON-MATCH) Failure to meet condition(s) of required/prohibited clause(s)\n    [junit]   0.6115718 = (MATCH) fieldWeight(c:a in 1), product of:\n    [junit]     1.0 = tf(termFreq(c:a)=1)\n    [junit]     1.2231436 = idf(docFreq=3)\n    [junit]     0.5 = fieldNorm(field=c, doc=1)\n    [junit]   0.0 = match on prohibited clause (c:b)\n    [junit]     0.6115718 = (MATCH) fieldWeight(c:b in 1), product of:\n    [junit]       1.0 = tf(termFreq(c:b)=1)\n    [junit]       1.2231436 = idf(docFreq=3)\n    [junit]       0.5 = fieldNorm(field=c, doc=1)\n\n    [junit] 0.6115718 = (MATCH) sum of:\n    [junit]   0.6115718 = (MATCH) fieldWeight(c:a in 2), product of:\n    [junit]     1.0 = tf(termFreq(c:a)=1)\n    [junit]     1.2231436 = idf(docFreq=3)\n    [junit]     0.5 = fieldNorm(field=c, doc=2)\n\n    [junit] 0.0 = (NON-MATCH) Failure to meet condition(s) of required/prohibited clause(s)\n    [junit]   0.0 = match on prohibited clause (c:b)\n    [junit]     0.6115718 = (MATCH) fieldWeight(c:b in 3), product of:\n    [junit]       1.0 = tf(termFreq(c:b)=1)\n    [junit]       1.2231436 = idf(docFreq=3)\n    [junit]       0.5 = fieldNorm(field=c, doc=3)\n\n    [junit] Query:c:a (-c:b) hits.length=3\n    [junit] Query Found:Doc[0]= A B C\n    [junit] Query Found:Doc[1]= A B C D\n    [junit] Query Found:Doc[2]= A C D\n    [junit] 0.3057859 = (MATCH) product of:\n    [junit]   0.6115718 = (MATCH) sum of:\n    [junit]     0.6115718 = (MATCH) fieldWeight(c:a in 1), product of:\n    [junit]       1.0 = tf(termFreq(c:a)=1)\n    [junit]       1.2231436 = idf(docFreq=3)\n    [junit]       0.5 = fieldNorm(field=c, doc=1)\n    [junit]   0.5 = coord(1/2)\n\n    [junit] 0.3057859 = (MATCH) product of:\n    [junit]   0.6115718 = (MATCH) sum of:\n    [junit]     0.6115718 = (MATCH) fieldWeight(c:a in 2), product of:\n    [junit]       1.0 = tf(termFreq(c:a)=1)\n    [junit]       1.2231436 = idf(docFreq=3)\n    [junit]       0.5 = fieldNorm(field=c, doc=2)\n    [junit]   0.5 = coord(1/2)\n\n    [junit] 0.0 = (NON-MATCH) product of:\n    [junit]   0.0 = (NON-MATCH) sum of:\n    [junit]   0.0 = coord(0/2)\n\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testFAIL(org.apache.lucene.search.TestAornotB):   FAILED\n    [junit] resultDocs =A C D expected:<3> but was:<1>\n    [junit] junit.framework.AssertionFailedError: resultDocs =A C D expected:<3> but was:<1>\n    [junit]     at org.apache.lucene.search.TestAornotB.testFAIL(TestAornotB.java:137)\n\n\n    [junit] Test org.apache.lucene.search.TestAornotB FAILED",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--TestAornotB.java": "https://issues.apache.org/jira/secure/attachment/12339818/ASF.LICENSE.NOT.GRANTED--TestAornotB.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-08-30T11:21:35+0000",
            "content": "I am not sure on this, so others should definitely contribute, but here's my take:\n\nThe QueryParser (QP) is not really designed to handle this case and there is some misunderstanding as to what theuse of multiple boolean operators in a single clause.\n\nI don't think the QP is designed to handle two boolean operators between 2 terms.  Thus, the above query really doesn't make sense, but the QP doesn't really prevent it either.  Logically, A OR NOT B is equivalent to just searching for A.  However, the QP, from what I can tell, only looks at the last operator before the B term and builds it clause based on that, thus building the query A NOT B, which then yields the results as above.\n\nI am not sure if there is something to fix here other than the documentation.  I suppose we could throw a Parse Exception if we detected 2 or more boolean operators between terms, but I am not that familiar with JavaCC, so I am not 100% sure.  ",
            "author": "Grant Ingersoll",
            "id": "comment-12431541"
        },
        {
            "date": "2006-08-30T18:52:12+0000",
            "content": "LUCENE-25 specifically relates to stop words, but the large problem is QueryParser generating BooleanQueries containing \"invalid\" clauses ",
            "author": "Hoss Man",
            "id": "comment-12431654"
        },
        {
            "date": "2006-08-31T02:10:46+0000",
            "content": "I propose that we throw a ParseException - it seems very straightforward to do - any comments / concerns / objections? ",
            "author": "Dejan Nenov",
            "id": "comment-12431761"
        },
        {
            "date": "2006-08-31T05:45:42+0000",
            "content": "A ParseException when \n\"A OR NOT B\" is found might make sense, but what about \"A AND NOT B\" ... that (to me anyway) means \"+A -B\" which is valid.\n ",
            "author": "Hoss Man",
            "id": "comment-12431793"
        },
        {
            "date": "2006-08-31T17:09:30+0000",
            "content": "I think the idea of a parse exception is good. The issue is relatively subtle.  A user can relatively easily generate a query that ignores terms. Doing that silently is just asking for people to spend a lot of time trying to understand why they aren't getting something they expect.\n\nThe question is whether it's feasible to detect that an invalid query has been entered. The problem is of course having to ever enumerate all documents. But with multilevel queries (sums of products of sums, etc.), it's not immediately obvious from the parse tree whether that is  being attempted or not.\n\na(b  + !c) is okay but (a+!d)(b + !c) isn't. Basically you can't do a term-by-term analysis of a multilevel query and decide. It's a global property of the query.\n\nIt one reduces the multilevel query to a two level sum-of-products form (i.e., distribute all AND operations over all OR operaitons), you can inspect the result. If any term does not contain a positive term, the query is invalid. But going from multilevel to two level can generate an exponential number of terms. Maybe not an issue in IR, but it makes me nervous.\n\nI would think that somewhere between query parsing and search execution, the invalidity of a query would have to pop out but I haven't delved into this path enough to know where that might happen.\n\nIf no one's looking at this (generating an exception somewhere) and no one knows of any reason it's not possible, I'll look ...\n\nOn a related topic, and maybe a naive question, has anyone considered keeping a posting that contains all documents? Is it really that hard to do in Lucene today? That would remove this restriction. Perhaps the issue then is that the combination of the number of valid use cases combined with the number of times it would cause people trouble because they were using it invalidly means it's not a good idea? I can come up with some potentially interesting queries, especially when you combine with other features like facets. \"Tell me the facet breakdown of all documents that don't contain the word microsoft ...\" In many places, !microsoft is not such a terribly big set and can be computed with about the same effort that microsoft can. (Is that true?) ",
            "author": "Steven Parkes",
            "id": "comment-12431921"
        },
        {
            "date": "2007-01-25T10:46:01+0000",
            "content": "Any chance this may be addressed in 2.0? ",
            "author": "Dejan Nenov",
            "id": "comment-12467324"
        },
        {
            "date": "2007-12-19T03:05:51+0000",
            "content": "For Dejan Nenov - please use this new email address:\n\nd [at] panaton [dot] com\n\nAfter 10 years dejannenov@jollyobject.com is being overwhelmed by spam.\n\n\u2013 \nDejan Nenov\nmobile: +1-415-999-4450\ndejannenov@jollyobject.com\ndejannenov@rocketmail.com\nSkype: dejannenov ",
            "author": "Dejan Nenov",
            "id": "comment-12553213"
        },
        {
            "date": "2009-10-20T13:07:35+0000",
            "content": "Can we rewrite the query (A OR NOT B) to NOT(NOT(A) AND B) to solve this issue? ",
            "author": "Siddharth Gargate",
            "id": "comment-12767802"
        },
        {
            "date": "2011-01-25T16:03:05+0000",
            "content": "Sorry, misunderstood the issue! ",
            "author": "Uwe Schindler",
            "id": "comment-12986462"
        }
    ]
}