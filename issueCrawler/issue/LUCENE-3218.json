{
    "id": "LUCENE-3218",
    "title": "Make CFS appendable",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "3.4,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently CFS is created once all files are written during a flush / merge. Once on disk the files are copied into the CFS format which is basically a unnecessary for some of the files. We can at any time write at least one file directly into the CFS which can save a reasonable amount of IO. For instance stored fields could be written directly during indexing and during a Codec Flush one of the written files can be appended directly. This optimization is a nice sideeffect for lucene indexing itself but more important for DocValues and LUCENE-3216 we could transparently pack per field files into a single file only for docvalues without changing any code once LUCENE-3216 is resolved.",
    "attachments": {
        "LUCENE-3218_test_fix.patch": "https://issues.apache.org/jira/secure/attachment/12483427/LUCENE-3218_test_fix.patch",
        "LUCENE-3218_tests.patch": "https://issues.apache.org/jira/secure/attachment/12483423/LUCENE-3218_tests.patch",
        "LUCENE-3218_3x.patch": "https://issues.apache.org/jira/secure/attachment/12483419/LUCENE-3218_3x.patch",
        "LUCENE-3218.patch": "https://issues.apache.org/jira/secure/attachment/12483191/LUCENE-3218.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-20T18:50:45+0000",
            "content": "first sketch still some nocommits - this patch includes the latest patch from LUCENE-3201 which made the CFS part of directory. This patch adds write support to the CompoundFileDirectory. The CFWriter tries to write files directly to the CFS if possible like when no other file is currently open for writing it opens a stream directly on the CFS. Yet, this change also adds a new file to the CFS (.cfe) which only holds the entry table which makes all seeks unneeded (plays better with AppendingCodec).\n\nI currently don't use it during indexing since we decided after flush if we use CFS or not. Yet this might change with this optimization but I will leave this to another issue.\n ",
            "author": "Simon Willnauer",
            "id": "comment-13052152"
        },
        {
            "date": "2011-06-20T21:07:58+0000",
            "content": "Patch looks cool!\n\nSo the CFW will take the first output opened against it and let it write\ndirectly into the \"actual\" CFS file, and then if another file is\nopened while that first one is still open, the 2nd file will write to\nseparate file and then will copy in on close.  We may want to delegate\nthe separate files too?  So that on close they copy themselves into\nthe CFS and remove the original?  This way IW won't have to separately\ncreate CFS in the end.\n\nSomehow we need IW to add the biggest sub-file first...\n\ns/compund/compound\n\nCFW.close should assert currentOutput != null (and, if we delegate sep\nentries, that they are also all closed)?\n\nYou might need to sync the CompoundFileWriter.this.currentOutput test\n/ setting to null?  Though... Lucene is always single threaded in\nwriting files for the same segment, today anyway.\n\nCan we make a separate createCompoundOutput?  (Ie, instaed of passing\nOpenMode to openCompoundInput).  And: I'm assuming a given compound\noutput can only be opened once, appended to / separate files copied\ninto, closed and then never opened again for writing?  (Ie, still\n\"write once\" at the file level). ",
            "author": "Michael McCandless",
            "id": "comment-13052222"
        },
        {
            "date": "2011-06-21T10:46:14+0000",
            "content": "next iteration - seems close. \n\n\n\tmoved CFW to o.a.l.store and made package private.\n\tadded createCompoundOutput to Directory instead of passing OpenMode\n\tadded write support to CompundFileDirectory\n\tSeparately written file are appended during close if possible (no other file is currently written directly to the CF). If files is locked append happens once that file is closed.\n\tIW uses Directory methods only, addFile has been converted to Directory#copy\n\n\n\n\nonce thing which still bugs me is the setAbortCheck on CFDirectory.. I wonder if we can solve that differently, ideas? ",
            "author": "Simon Willnauer",
            "id": "comment-13052468"
        },
        {
            "date": "2011-06-21T14:23:22+0000",
            "content": "updated patch NOW containing all files \n\nsorry for the missing files in the last patch ",
            "author": "Simon Willnauer",
            "id": "comment-13052586"
        },
        {
            "date": "2011-06-21T14:46:12+0000",
            "content": "Patch looks great!\n\nCan we name it createCompoundOutput?  Emphasizes that we are\nwrite-once (this file shouldn't exist), and matches createOutput.\n\nOn checkAbort... we could not send that to the CFW and instead call\ncheckAbort in the outer loops?  (Ie, where we .copy the files in).\nThe existing CFW already only checks once-per-file anyway...\n\nMaybe instead of asserts for the mis-use of the CFD API (eg no\nentries, something is still open), we should make these real\nexceptions (ie, thrown even when assertions are off)?\n\nThis comment looks stale (in CFW.java)?:\n\n      // Close the output stream. Set the os to null before trying to\n      // close so that if an exception occurs during the close, the\n      // finally clause below will not attempt to close the stream\n      // the second time.\n\n\n\nopenCompoundOutput needs javadoc.\n\nCFD.createOutput's jdoc says Not Implememented but it is.\n\nThe new test cases in TestCompoundFile names its file d.csf  Column\nstride fields lives on!!  Too many tlas... ",
            "author": "Michael McCandless",
            "id": "comment-13052597"
        },
        {
            "date": "2011-06-21T15:16:53+0000",
            "content": "final patch. \n\n\tfixed javadocs + several javadoc warnings\n\trenamed openCompoundOutput to createCompoundOutput\n\tfixed file extensions in test CSF LOL!!\n\tcopyFileEntry now deletes files that are separately written once copied into the CFS.\n\tconverted asserts to exceptions in CFW\n\n\n\nI plan to commit this today if nobody objects. ",
            "author": "Simon Willnauer",
            "id": "comment-13052615"
        },
        {
            "date": "2011-06-21T15:54:23+0000",
            "content": "Committed in revision 1138063.\nI will try to backport this to 3.x if possible ",
            "author": "Simon Willnauer",
            "id": "comment-13052633"
        },
        {
            "date": "2011-06-22T09:16:26+0000",
            "content": "here is a patch against 3.x. I had to change one test in lucene/backwards and remove some tests from there which used the CFW / CFR.\n\nA review would be good here! ",
            "author": "Simon Willnauer",
            "id": "comment-13053140"
        },
        {
            "date": "2011-06-22T10:26:12+0000",
            "content": "Hi Simon, currently this attached patch fails... not sure why yet.\n\nBut I think we should resolve this tests issue before backporting ",
            "author": "Robert Muir",
            "id": "comment-13053152"
        },
        {
            "date": "2011-06-22T10:53:45+0000",
            "content": "thank you robert, while this has actually been tested since its in the base class though its now cleaner. The test failure came from RAMDirectory simply overriding existing files. I added an explicit check for it. ",
            "author": "Simon Willnauer",
            "id": "comment-13053172"
        },
        {
            "date": "2011-06-22T11:09:32+0000",
            "content": "Thanks Simon, I feel better now that we get our open-files-for-write tracking back. ",
            "author": "Robert Muir",
            "id": "comment-13053181"
        },
        {
            "date": "2011-06-22T13:14:19+0000",
            "content": "backported to 3.x - thanks guys ",
            "author": "Simon Willnauer",
            "id": "comment-13053240"
        },
        {
            "date": "2011-08-18T08:22:05+0000",
            "content": "See LUCENE-3374, LUCENE-3380.\n\nThere are some serious traps here with how the CFE files are created for \"delegator\"-like Directory impls such as FileSwitchDirectory and NRTCachingDirectory.\n\nWith such dirs that might have policies the writer is \"backdooring\" their decision about where files should go since it only has a reference to the \"sub\" directory.\n\nI think this is non-intuitive and we should do something to try to prevent surprises. ",
            "author": "Robert Muir",
            "id": "comment-13086877"
        },
        {
            "date": "2011-08-18T08:55:03+0000",
            "content": "Can CFS reading/writing not take a parent directory, instead of:\n\nCompoundFileDirectory(Directory parent, ....)\n\nI think it should be\nCompoundFileDirectory(IndexInput cfs, IndexInput cfe)\n\nAnd directory.createOutput etc should take both filenames, this would remove this backdooring completely. ",
            "author": "Robert Muir",
            "id": "comment-13086896"
        },
        {
            "date": "2011-08-19T13:20:01+0000",
            "content": "Maybe we can avoid making a separate _X.cfe file?\n\nWe did this because previously the CFS stored the header in the front of the file (I think)?\n\nCould we, instead, put the header at the end of the file, but place a long pointer at the start of the file saying where the header is located (I'd rather not rely on file.length())?  Then we could have a single (_X.cfs) file again and we can not use the Dir impl for delegation? ",
            "author": "Michael McCandless",
            "id": "comment-13087700"
        },
        {
            "date": "2011-08-19T13:30:40+0000",
            "content": "We did this because previously the CFS stored the header in the front of the file (I think)?\nis this really the problem here? I mean this problem is in FileSwitch / NRT Directory. The CFS uses a directory to write files, I would expect that if we use for instance NRT directory it gets the NRT directory instead of either of of its sub directories. its not really a CFS problem IMO and we should rather fix the actual directory rather than reverting the small optimization having the header in a separate file. i think we should prevent the seek if not absolutely necessary. ",
            "author": "Simon Willnauer",
            "id": "comment-13087702"
        },
        {
            "date": "2011-08-19T13:34:38+0000",
            "content": "I don't fully grok Robert's concern, but with regards to Mike's suggestion of\ninlining the metadata: Why not put that file pointer at the very end of the\nfile?  So that the read-time sequence of actions is: seek to 8 bytes before the\nend, read the file pointer, seek back to beginning of metadata.\n\nThat way you don't need to seek backwards during writing, which IIRC used to\nbe an issue for Hadoop. ",
            "author": "Marvin Humphrey",
            "id": "comment-13087704"
        },
        {
            "date": "2011-08-19T13:48:02+0000",
            "content": "This is definitely not a bug in the directory, and its a serious issue (i think a blocker for release myself).\n\nI'll try to explain the issue again a little better than I did on https://issues.apache.org/jira/browse/LUCENE-3380?focusedCommentId=13086872&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13086872\n\nThis is just an example of the API problem, with FileSwitchDirectory.\n\nIn Lucene we have FileSwitchDirectory which is a Directory that lets you \"switch\" between 2 different directory implementations based on file extension.\nSo conceptually it looks like this:\n\n\nFileSwitchDirectory extends Directory {\n  Directory a;\n  Directory b;\n  Set extensions; // these are the file extensions that go to \"a\", all other ones are handled by \"b\"\n}\n\n\n\nImagine you configure this directory to put all \"*.cfs\" in \"a\", and everything else in \"b\".\n\nSo when FileSwitchDirectory is asked where to put \"1.cfs\", it forwards the request to \"a\".\n\nBut the \"1.cfe\" file is actually wrongly created in \"a\" also, causing FileNotFoundExceptions later when the file is to be read, because its in the wrong directory. This is because of how the compound file mechanism works now, it calls a.createOutput(\"1.cfe\") instead of fileswitchdirectory.createOutput(\"1.cfe\").\n\nSo this is a serious problem for any Directories that delegate responsibility like this, not just the ones in Lucene. ",
            "author": "Robert Muir",
            "id": "comment-13087712"
        },
        {
            "date": "2011-08-19T13:51:46+0000",
            "content": "Thanks Robert for explaining this again, I agree 100% with you, the current cfe/cfs discussion is really serious and the current impl is heavy broken. ",
            "author": "Uwe Schindler",
            "id": "comment-13087716"
        },
        {
            "date": "2011-08-19T13:52:53+0000",
            "content": "\nMaybe we can avoid making a separate _X.cfe file?\n\n+1, this sounds great (however it can be done, ideally with Marvin's idea to support appendable-only filesystems also), and would end the confusion here. ",
            "author": "Robert Muir",
            "id": "comment-13087719"
        },
        {
            "date": "2011-08-19T13:58:00+0000",
            "content": "i think we should prevent the seek if not absolutely necessary.\n\nYou have a very small optimization here that only affects opening the CFS.\n\nBut because we need to fix the wrong behaviour in FileSwitch (and also NRTCaching dir, which is in my opinion more serious!!!!), FileSwitch and NRTCachingDir now use the default CompoundFileImpl. If you wrap MMapDir by FileSwitch or NRTCaching, the whole custom impl of the compound file in MMap that speeds up even further is obsolete, as not used (you can use the compound file with really no slowdown at all as we can map parts of the CFS file into memeory and need no offset calculations and can also save mapping costs).\n\nThis is gone now, just because a one-time seek at opening time is prevented. ",
            "author": "Uwe Schindler",
            "id": "comment-13087723"
        },
        {
            "date": "2011-08-19T14:01:46+0000",
            "content": "Right, the fix I applied is really a hack, but I didnt want to leave our codebase broken while we figure this out.\n\nIts not just a problem from a performance perspective, I think its just bad to make assumptions about how the inner directory works.\nIn this case with fileswitchdirectory etc, it really should be fully delegating this stuff down, and be clueless about how its implemented by the underlying sub directory. ",
            "author": "Robert Muir",
            "id": "comment-13087724"
        },
        {
            "date": "2011-08-19T15:27:06+0000",
            "content": "\nWhy not put that file pointer at the very end of the\nfile? So that the read-time sequence of actions is: seek to 8 bytes before the\nend, read the file pointer, seek back to beginning of metadata.\n\nI would rather not rely on metadata (file length) when reading, only the contents of the file.\n\nI think append-only filesystems (eg HDFS) can make their own impl that uses the file length instead (like AppendingCodecc). ",
            "author": "Michael McCandless",
            "id": "comment-13087760"
        },
        {
            "date": "2011-08-19T15:42:24+0000",
            "content": "Anyone have opinions on 3.x? \n\nI think it might be wise to think about pulling these CFS changes (LUCENE-3201, too) back from 3.x and instead\ngive things some time to settle in trunk?\n\nWe could always then backport at a later release, but we got lucky here that we still haven't released anything. ",
            "author": "Robert Muir",
            "id": "comment-13087769"
        },
        {
            "date": "2011-08-19T20:54:19+0000",
            "content": "I think append-only filesystems (eg HDFS) can make their own impl that uses the file length instead (like AppendingCodecc).\n\nAppendingCodec solves only one issue, that of postings and SegmentInfos. I'm worried that adding seek+rewrite tricks in other places that are not under the control of Codec or under any other configurable implementation (such as CFS) will ultimately prevent the efficient use of Lucene on Hadoop. Unless we put those places under the control of a Codec (or some other configurable interface). ",
            "author": "Andrzej Bialecki",
            "id": "comment-13087963"
        },
        {
            "date": "2011-08-19T21:04:31+0000",
            "content": "The trick with the latest updates to compound files is that the CompoundFileWriter/Reader is returned by the directory implementation - and this is broken and the discussion is about this.\nSo this would be the place, where you theoretically could completely make another CFS on-disk format or e.g. write the stuff to a ZIP file \n\nSee here: https://builds.apache.org/job/Lucene-3.x/javadoc/core/org/apache/lucene/store/Directory.html#createCompoundOutput(java.lang.String) ",
            "author": "Uwe Schindler",
            "id": "comment-13087972"
        },
        {
            "date": "2011-08-19T21:28:54+0000",
            "content": "personally I think we should try to be append only on general. So eventually this is about creating the cfe and cfs file from the \"right\" directory. What we could do to use the parent ie. FileSwitchDir etc. is add a protected method that allows passing the parent dir to the createCompoundOutput / openCompoundInput which is then in turn used to create the actual files. We can call this method from the public createCompoundOutput / openCompoundInput versions with \"this\" as the directory to create files. How does that sound? Lemme know if I miss something... ",
            "author": "Simon Willnauer",
            "id": "comment-13087987"
        },
        {
            "date": "2011-08-19T21:34:51+0000",
            "content": "I disagree, we don't need to compensate for hadoop's problems. ",
            "author": "Robert Muir",
            "id": "comment-13087993"
        },
        {
            "date": "2011-08-19T21:39:13+0000",
            "content": "If we want append only, we should also remove seek methods from IndexOutput... I DISAGREE, too! ",
            "author": "Uwe Schindler",
            "id": "comment-13087998"
        },
        {
            "date": "2011-08-19T21:48:52+0000",
            "content": "\nSo eventually this is about creating the cfe and cfs file from the \"right\" directory.\n\nThat's not the only issue: while that is the primary reason I reopened this issue I also have concerns about the API being complicated and non-intuitive.\n\nMaking the API even more complicated because Filesystem X can only write WingDings or cannot seek doesn't seem to be a good solution to me. ",
            "author": "Robert Muir",
            "id": "comment-13088005"
        },
        {
            "date": "2011-08-19T23:30:10+0000",
            "content": "When looking into the CompoundFileDirectory code I also found a small bug in version handling.\nreadEntries() reads the first VInt and uses it for version checking (if negative). This check has 2 problems:\n\n\tif the VInt is smaller then FORMAT_CURRENT it should throw IndexTooNewException\n\tthe comparison should not be against FORMAT_CURRENT itsself (this constant should only be used for writing CFS files), it should compare against real version numbers. This would otherwise break on later additions of new formats.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13088067"
        },
        {
            "date": "2011-08-20T09:05:17+0000",
            "content": "I think the situation here is too complicated already, we are discussing all kinds of complicated stuff and I dont think \"appendable\" CFS is worth any of this.\n\nI think we should back out these CFS changes for now. ",
            "author": "Robert Muir",
            "id": "comment-13088166"
        },
        {
            "date": "2011-08-20T16:06:12+0000",
            "content": "I think we should back out these CFS changes for now.\n\n+1\n\nGenerally if we add a cool optimization and it turns out that optimization risks even just apparent index corruption and/or adds scary traps / confusing complexity to the API I think we should pull the change and iterate on the issue / branch until these problems are addressed?\n\nWe had a similar experience with copyBytes, but that time it was real corruption.\n\nOptimizations aren't worth such risks I think, especially if it's only an index-time opto? ",
            "author": "Michael McCandless",
            "id": "comment-13088206"
        },
        {
            "date": "2011-08-21T06:13:12+0000",
            "content": "I think we should back out these CFS changes for now.\n\n-1 \n\nI think we are over reacting here, especially robert gets too crazy about this. Honestly I think CFS should be detached from directory and we should make it a delegating directory if at all. That way we would always operate on the right directory, can safely create two files and keep Directory itself clean. We can still add the ability to partially map a certain file (offset, length) into memory like we do now in the specialized CFS Dirs. This entire think is not a problem of appending at all IMO. \n\nhow does that sound? I think this would solve all the problems we are having and keeps it appendable.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13088321"
        },
        {
            "date": "2011-08-21T10:19:08+0000",
            "content": "Hi when thinking about the whole stuff one more time again, I may have a solution to again decouple CFS from the parent directory, so one can create any CFS using one single class (but perhaps the factory in directory is still an idea to make it customizable). There are several solutions, but most of them have customization problems:\n\n\tThe current approach was discussed already, nothing more to say\n\tA possibility to make it possible for MMap to map certain parts of the file is to move the getIndexInputSlice up to the abstract Directory base class and make the default implementation the current CFIndexInput from the default CFS impl. This would be even backwards compatible. So the CFS impl can simply ask the parent directory it warps for a slice. The problem here is easy: Current CFS impl opens the CFS file exactly one time and consumes exactly one file handle. The slices work on the same file handle. If we move the slice handling up to the directory, the \"state\" is gone, so handling the all-the-time open CFS file cannot be managed anymore. When using a new file handle for each slice, we gain nothing (CFS is to reduce file handles).\n\tLast night I had one idea that might fix this issue. Lets move the slice handling into the abstract IndexInput base class, again the default impl would simply use the current CFIndexInput to return a slice. In the case of MMapIndexInput it would simply return a remapped slice on the current file handle. The only thing that would change is that the RAF would kept open the wohle time (like MMapCFDirectory does), in contrast to curren, where th RAF is closed directly after mapping. This approach would allow it for the CFS impl to simply ask it parant directory for an IndexInput to handle the SFC file itsself and for each sub-slice ask this IndexInput for this.\n\n\n\nThe last approach seems reasonable, but we need some more checks how to implement that. The last approach keeps both \"features\" of CFS:\n\n\tOne OS file handle\n\tpossibility for certain directory implementations to return sliced IndexInputs in an optimal way. The current IndexInput have a clone method, in this case we would need a similar method, where you can give offset and length.\n\n\n\nOn the other hand, we can remove the \"factory\" for CFS files from directory, we can go back to a simple new CFSDirectory(parentDirectory, cfsName).\n\nDoes this sound reasonable? ",
            "author": "Uwe Schindler",
            "id": "comment-13088335"
        },
        {
            "date": "2011-08-21T10:30:17+0000",
            "content": "None of this is reasonable.\n\nWhen something goes wrong with an optimization, and multiple people ask for you to back it out, back it out.\n\nthen later we can discuss how to re-implement it.\n ",
            "author": "Robert Muir",
            "id": "comment-13088338"
        },
        {
            "date": "2011-08-21T10:47:27+0000",
            "content": "But we can still consider this as solutions to solve the issue later? I just dont want to make suggestions with lots of brainwork and sleepless nights involved, if it's not considered and just be backed out with \"None of this is reasonable.\". ",
            "author": "Uwe Schindler",
            "id": "comment-13088344"
        },
        {
            "date": "2011-08-21T13:09:31+0000",
            "content": "I think both Simon's and Uwe's ideas are good and should be explored!  With all these ideas we will find a clean way to get CFS reading/writing integrated into Directory.\n\nBut I think that exploration should just be outside of trunk and 3.x, eg on a branch.  Once we iterate to a good point again we can commit it back to trunk, let it bake/age, then merge back to 3.x if it seems stable. ",
            "author": "Michael McCandless",
            "id": "comment-13088359"
        },
        {
            "date": "2011-08-21T14:40:41+0000",
            "content": "+1 on backing out of 3.x at least - this is our stable branch...I can't imagine this optimization belongs in our stable branch given all of this discussion... ",
            "author": "Mark Miller",
            "id": "comment-13088379"
        },
        {
            "date": "2011-08-21T15:43:08+0000",
            "content": "its all yours do whatever you think needs to be done. have fun  ",
            "author": "Simon Willnauer",
            "id": "comment-13088392"
        },
        {
            "date": "2011-08-21T15:45:39+0000",
            "content": "None of this is reasonable.\nyour unreasonable comments here are totally counter productive IMO. Just my $0.05  ",
            "author": "Simon Willnauer",
            "id": "comment-13088395"
        },
        {
            "date": "2011-08-21T17:37:16+0000",
            "content": "Isn't there a lot of middle ground here? Why don't we just back out of 3.x for now and keep pushing towards a consensus implementation on trunk? ",
            "author": "Mark Miller",
            "id": "comment-13088411"
        },
        {
            "date": "2011-08-22T12:11:05+0000",
            "content": "FYI - I backed out the changes from 3.x  ",
            "author": "Simon Willnauer",
            "id": "comment-13088640"
        },
        {
            "date": "2011-08-22T14:33:34+0000",
            "content": "Showuld we send an email to java-user as the index format in the stable branch changed by this (indexes with new CFS files can no longer be read)? ",
            "author": "Uwe Schindler",
            "id": "comment-13088734"
        },
        {
            "date": "2011-08-22T16:17:48+0000",
            "content": "Showuld we send an email to java-user as the index format in the stable branch changed by this (indexes with new CFS files can no longer be read)?\nI will do ",
            "author": "Simon Willnauer",
            "id": "comment-13088796"
        },
        {
            "date": "2011-08-22T16:21:58+0000",
            "content": "here is a rough patch against trunk that detaches CFDirectory from other dir impls but still extends Directory. all optimizations still remain while always the top-level directory is used to create / open the CFS. \nI didn't follow uwes last approach since I could figure out when to close the RAF reference since like in the MMap case we want to forcefully unmap the file and therefor would also need to close the RAF reference in the base stream. I use a helper construct (IndexInputHandle - yes need to find a better name) that can only be pulled from another directory (protected). So this is private to the directory impls but solves our cases here nicely I think.\n\nstill rough but its a start. ",
            "author": "Simon Willnauer",
            "id": "comment-13088799"
        },
        {
            "date": "2011-08-22T17:12:47+0000",
            "content": "Hi Simon,\n\nthanks for taking care. This looks really nice and easier to understand. I agree, the problem with the RAF open file is hard to manage (especially when to close it).\n\nOne small suggestion: Currently the CFS file is opened twice: One time to read the contents and a second time to read the actual files using the handle (and for new format to read the CFE file, but thats unavoidable - once we nuke old index support in Lucene 5, we can always open the cfe first and read the contents, but until then we need to do both). Why not open the IndexInputHandle at the beginning and then simply request a full slice for the directory initialization (or ideally only that part that contains the directory)? The slice can then be closed afterwards as before.\n\nSo very cool work!\nGreetings from Berkeley! ",
            "author": "Uwe Schindler",
            "id": "comment-13088826"
        },
        {
            "date": "2011-08-22T17:39:07+0000",
            "content": "\nThis looks really nice and easier to understand.\n\nI agree! At a glance, it seems this design looks much better to and avoids the sneaky delegation problems.\n\nOnly one minor thing glancing at the patch: in MockDirectoryWrapper, can we track that the handle is actually closed? ",
            "author": "Robert Muir",
            "id": "comment-13088838"
        },
        {
            "date": "2011-08-23T08:21:55+0000",
            "content": "next iteration\n\n\n\tremoved 3.4 support for the current format (cfe file) in SI\n\tregenerated the BW test indices (not in the patch)\n\tadd javadoc for IndexInputHandle\n\tadded IndexInputHandle#openFullSlice to get a slice spanning the entire file.\n\tTrack indexInputHandle instances in MockDirectoryWrapper to ensure they are closed.\n\tUse the IndexInputHandle ie. the underlying file handle to create all streams in CFS (uwes suggestion - thanks for that)\n\n\n\nI didn't include the generated indices for bw tests in the patch for size / readability. Yet, if you want to run the tests you need to generate them otherwise TestBackwardsCompatibility will fail.\n\nthis seems close, the question is if we want to backport this to 3.x too? ",
            "author": "Simon Willnauer",
            "id": "comment-13089343"
        },
        {
            "date": "2011-08-23T18:12:14+0000",
            "content": "This approach looks nice!  Maybe rename IndexInputHandle to\nIndexInputProvider?  IndexInputSlicer?  SliceCreator?\n\nMaybe rename CSIndexInput -> SlicedIndexInput?\n\nIn SimpleFSDir we may as well move that static Descriptor class out?\nRather than having to import it to itself. ",
            "author": "Michael McCandless",
            "id": "comment-13089631"
        },
        {
            "date": "2011-08-23T18:19:37+0000",
            "content": "this seems close, the question is if we want to backport this to 3.x too?\n\nWhy don't we get it committed to trunk and let it chill for a while, let it hit random testing for a while, get used by adventurous users, and then make the decision? ",
            "author": "Mark Miller",
            "id": "comment-13089639"
        },
        {
            "date": "2011-08-23T18:33:25+0000",
            "content": "Why don't we get it committed to trunk and let it chill for a while, let it hit random testing for a while, get used by adventurous users, and then make the decision?\n+1 ",
            "author": "Simon Willnauer",
            "id": "comment-13089651"
        },
        {
            "date": "2011-08-23T18:34:16+0000",
            "content": "I don't really like the name IndexInputHandle what about\n\n\tIndexInputFactory\n\tIndexInputProducer\n\tIndexInputSlicer\n\n\n\nmore ideas? ",
            "author": "Simon Willnauer",
            "id": "comment-13089653"
        },
        {
            "date": "2011-08-24T06:21:43+0000",
            "content": "I would also rename CFIndexInput to SliceIndexInput, it's private so does not matter, but wozuld be nice to have.\n\nOtherwise I agree with committing to trunk. As far as I see, the format did not change in trunk, so once we get this back into 3.x we are at the state pre-revert? ",
            "author": "Uwe Schindler",
            "id": "comment-13090023"
        },
        {
            "date": "2011-08-24T08:28:20+0000",
            "content": "new patch, I renamed IndexInputHandle to IndexInputSlicer and made the createSlicer method public otherwise Directory impls outside of o.a.l.store can not delegate to it.\n\nI would also rename CFIndexInput to SliceIndexInput, it's private so does not matter, but wozuld be nice to have.\n\ndone\n\nOtherwise I agree with committing to trunk. As far as I see, the format did not change in trunk, so once we get this back into 3.x we are at the state pre-revert?\n\nyes that's true.\n\nI think is ready to commit, if nobody objects I am going to commit this later today. ",
            "author": "Simon Willnauer",
            "id": "comment-13090084"
        },
        {
            "date": "2011-08-24T16:05:53+0000",
            "content": "I committed this to trunk. I will leave this issue open until we decide to backport to 3.x.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13090320"
        },
        {
            "date": "2011-10-07T19:33:25+0000",
            "content": "not a blocker, it was pulled from 3.x (and fixed in trunk) ",
            "author": "Robert Muir",
            "id": "comment-13123107"
        },
        {
            "date": "2011-11-04T22:07:06+0000",
            "content": "I am closing this - we are not backporting this to 3.x and its committed & stable on trunk ",
            "author": "Simon Willnauer",
            "id": "comment-13144396"
        }
    ]
}