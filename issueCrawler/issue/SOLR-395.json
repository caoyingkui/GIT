{
    "id": "SOLR-395",
    "title": "Spell-check should return frequencies of word and suggestions",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "spellchecker"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "When issuing a spell-check, the word being searched for might be present in the index with a very low frequency (i.e. a misspelling that made it's way into the index). It might therefore be helpful if the client receives the frequency of the word plus the frequencies of each of the suggestions.\nThis feature should be optional (using a URL param).",
    "attachments": {
        "extended_results.diff": "https://issues.apache.org/jira/secure/attachment/12368848/extended_results.diff",
        "returnFrequencies.patch": "https://issues.apache.org/jira/secure/attachment/12368426/returnFrequencies.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mike Krimerman",
            "id": "comment-12537766",
            "date": "2007-10-25T22:44:51+0000",
            "content": "patch for returning frequencies for word and suggestions.\nLucene's suggestions are sorted by distance first and frequency second (if applicable).\n\nThe patch adds two fields:\n\n\ta frequency field for the word\n\ta list of frequencies (same length as the suggestion list).\n\n\n "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12537775",
            "date": "2007-10-25T23:13:13+0000",
            "content": "These two issues should probably be combined into one patch "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12537778",
            "date": "2007-10-25T23:15:17+0000",
            "content": "Might it be better to rename the fields \"queryFreq\"/\"suggestionFreqs\"?  (or something more different that \"frequency\" + \"frequencies\") "
        },
        {
            "author": "Scott Tabar",
            "id": "comment-12537958",
            "date": "2007-10-26T13:38:09+0000",
            "content": "I will be making changes to SOLR-375 to display the frequency for the word that is being checked instead of using the boolean exists.  This should not be conditional by a parameter, but should be part of the default results as is the exists modification currently has been implemented.\n\nIt would not be a problem to incorporate these changes in to JIRA-375 and also for me to add additional unit tests to cover the frequency modifications.\n\nMike (both), do you have any other suggestions to enhance the SpellCheckerRequestHandler?\n\nNot running this code, but just reviewing the patch, it appears like the frequency list is parallel and separate to the suggestion list.  This is great from the perspective of backwards compatibility, but would it make more sense to alter the suggestion list's data structure to make a stronger tie or relationship to the word that is be suggested?  Right now only the frequency is of interest, but if additional information can be provided, say the value of \"distance\", then there would be a logical place for it, otherwise we would have yet another \"list\" of \"values\".  Having an organized data structure could be more conducive to using Java's \"for each\" or Prototype's \"each\" construct without needing to track index values in to one array or the other.  I realize this may be more a matter of preference on style, but nows the time to make a change if it is so desired. \n\nOne idea of integrating the frequency of the suggestion is to make the frequency an attribute on the <str> tag such as <str frequency=\"1283\">happy</str>.  This may help with backwards compatibility but there is not much support for the addition of attributes within Solr so that could prevent its use. \n "
        },
        {
            "author": "Mike Krimerman",
            "id": "comment-12538061",
            "date": "2007-10-26T19:18:40+0000",
            "content": "The separate list of frequencies is indeed for backwards compatibility, it seems preferable to do as you suggested and add a frequency for each suggestion if backwards compatibility is not an issue.\nIf the distance can be added it would be a nice addition. Lucene sorts the suggestion list by distance first and frequency second. \n\nRegarding the XML formatting, that would be nice addition. However I was under the impression that Solr uses only tag-elements (and not attributes) for responses. How would the frequency be returned if a JSON or Python response is requested?\n\nAnother nice addition might be to implement the decision of the prominent suggestion; however that might require some heuristics and not be generic. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12538064",
            "date": "2007-10-26T19:28:21+0000",
            "content": "If the extra data is only present when some parameter is present, backward compatibility is not affected.\n "
        },
        {
            "author": "Mike Krimerman",
            "id": "comment-12539477",
            "date": "2007-11-01T22:27:32+0000",
            "content": "The attached patch combines patches for issues 375, 395, 401 and some more:\n\n\t(375) Adds the exist property for a single word spell-check - whether the word exists in dictionary\n\tAdds the sp.query.onlyMorePopular option for returning suggestions that are more popular than query word(s)\n\tThe sp.query.extendedResults implies a multi-word query plus returning frequencies for each word in query and for each suggestion.\n\t(401) A minimum threshold for adding words to the spell-check dictionary as percent/100 of documents where word should appear.\n\tArguments prefixed with the 'sp' prefix, backwards compatibility remains.\n\t\n\t\tsp.dictionary.indexDir - backwards compatible with spellcheckerIndexDir\n\t\tsp.dictionary.termSourceField - backwards compatible with termSourceField\n\t\tsp.dictionary.threshold - threshold for words to enter dictionary\n\t\tsp.query.suggestionCount - backwards compatible with suggestionCount\n\t\tsp.query.accuracy - backwards compatible with accuracy\n\t\tsp.query.onlyMorePopular - only more popular suggestions\n\t\tsp.query.extendedResults - multi-word query and a response with frequencies\n\t\n\t\n\t(375) A unit-test file, extended and modified to test 401\n\tFormatted extended-results to be more friendly for Python/Ruby\n\n\n\n "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12539480",
            "date": "2007-11-01T22:38:00+0000",
            "content": "Since this patch essentially subsumes SOLR-401 and SOLR-375.  I'll mark them as closed to move discussion here.\n\nNice patch!  (here my bias is showing given that I helped Mike develop it off-line).\n\nDo any of the original spellcheck contributors have comments about this new direction?  I like that:\n\n\tspellcheck parameters share a common prefix, and\n\tthe new format is extensible: new data can be added to the suggestions without breaking compatibility.\n\n\n\nIf not, I'll commit in a day or so. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12539612",
            "date": "2007-11-02T15:20:28+0000",
            "content": "> the new format is extensible: new data can be added to the suggestions without breaking compatibility.\n\nThat's always a good thing... could you give an example of the new format for those of us too lazy to try it out ourselves? "
        },
        {
            "author": "Mike Krimerman",
            "id": "comment-12539653",
            "date": "2007-11-02T18:01:58+0000",
            "content": "The new format produces output as (querying for pithon+progremming, extendedResults=true):\n\n \n<response>\n    <lst name=\"responseHeader\">\n        <int name=\"status\">0</int>\n        <int name=\"QTime\">173</int>\n    </lst>\n    <lst name=\"result\">\n        <lst name=\"pithon\">\n            <int name=\"frequency\">5</int>\n            <lst name=\"suggestions\">\n                <lst name=\"python\">\n                    <int name=\"frequency\">18785</int>\n                </lst>\n            </lst>\n        </lst>\n        <lst name=\"progremming\">\n            <int name=\"frequency\">0</int>\n            <lst name=\"suggestions\">\n                <lst name=\"programming\">\n                    <int name=\"frequency\">70997</int>\n                </lst>\n                <lst name=\"progressing\">\n                    <int name=\"frequency\">1930</int>\n                </lst>\n                <lst name=\"programing\">\n                    <int name=\"frequency\">597</int>\n                </lst>\n                <lst name=\"progamming\">\n                    <int name=\"frequency\">113</int>\n                </lst>\n                <lst name=\"reprogramming\">\n                    <int name=\"frequency\">344</int>\n                </lst>\n            </lst>\n        </lst>\n    </lst>\n</response>\n\n\nIn this example the best suggestions are the first ones. Some queries may return a suggestion which is very close to the query word, but with relatively low frequency (Lucene sorts results by distance first). In that case suggestions that are somewhat farther but with a much higher frequency should be chosen. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12539661",
            "date": "2007-11-02T18:34:55+0000",
            "content": "a python example\n\n{\n  'responseHeader': {\n    'status':0,\n    'QTime':16\n  },\n  'result':{\n    'pithon':{\n      'frequency':5,\n      'suggestions':['python',{'frequency':18785}]\n    },\n    'haus':{\n      'frequency':482,\n      'suggestions':['hats',{'frequency':6794},'hans',\n{'frequency':5986},'haul',{'frequency':3152},'haas',\n{'frequency':1054},'hays',{'frequency':533}]\n    },\n    'endication':{\n      'frequency':0,\n      'suggestions':['indication',{'frequency':9634},'syndication',\n{'frequency':17777},'dedication',{'frequency':4470},'medication',\n{'frequency':3746},'indications',{'frequency':2783}]\n    }\n  }\n}\n\n "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12540265",
            "date": "2007-11-05T20:14:48+0000",
            "content": "Committed!  Thanks Mike and Scott. "
        }
    ]
}