{
    "id": "LUCENE-6037",
    "title": "PendingTerm cannot be cast to PendingBlock",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "4.3.1",
        "components": [
            "core/codecs"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Critical",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "the error as follows:\njava.lang.ClassCastException: org.apache.lucene.codecs.BlockTreeTermsWriter$PendingTerm cannot be cast to org.apache.lucene.codecs.BlockTreeTermsWriter$PendingBlock\n        at org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter.finish(BlockTreeTermsWriter.java:1014)\n        at org.apache.lucene.index.FreqProxTermsWriterPerField.flush(FreqProxTermsWriterPerField.java:553)\n        at org.apache.lucene.index.FreqProxTermsWriter.flush(FreqProxTermsWriter.java:85)\n        at org.apache.lucene.index.TermsHash.flush(TermsHash.java:116)\n        at org.apache.lucene.index.DocInverter.flush(DocInverter.java:53)\n        at org.apache.lucene.index.DocFieldProcessor.flush(DocFieldProcessor.java:81)\n        at org.apache.lucene.index.DocumentsWriterPerThread.flush(DocumentsWriterPerThread.java:493)\n        at org.apache.lucene.index.DocumentsWriter.doFlush(DocumentsWriter.java:480)\n        at org.apache.lucene.index.DocumentsWriter.postUpdate(DocumentsWriter.java:378)\n        at org.apache.lucene.index.DocumentsWriter.updateDocuments(DocumentsWriter.java:413)\n        at org.apache.lucene.index.IndexWriter.updateDocuments(IndexWriter.java:1283)\n        at org.apache.lucene.index.IndexWriter.addDocuments(IndexWriter.java:1243)\n        at org.apache.lucene.index.IndexWriter.addDocuments(IndexWriter.java:1228)",
    "attachments": {
        "\u5c4f\u5e55\u5feb\u7167 2014-11-04 \u4e0a\u53489.48.17.png": "https://issues.apache.org/jira/secure/attachment/12679110/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202014-11-04%20%E4%B8%8A%E5%8D%889.48.17.png"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14191585",
            "author": "Michael McCandless",
            "date": "2014-10-31T08:30:21+0000",
            "content": "Hmm, not good.  Can you provide some details about how you hit this?  Or maybe a small test case showing it? "
        },
        {
            "id": "comment-14191617",
            "author": "zhanlijun",
            "date": "2014-10-31T09:05:19+0000",
            "content": "I have multiple threads to operator IndexWriter.addDocuments()\uff0cand it very hard to reproduce the error after it run many hours "
        },
        {
            "id": "comment-14192362",
            "author": "Michael McCandless",
            "date": "2014-10-31T20:02:17+0000",
            "content": "Which JVM/OS are you using?  Any customizations to Lucene, its default settings, codecs, etc.? "
        },
        {
            "id": "comment-14192959",
            "author": "zhanlijun",
            "date": "2014-11-01T04:40:29+0000",
            "content": "\nI have customized the lucene-spatial module, and there is no error when I use only one thread to operator IndexWriter.addDocuments.\n\njava environment\uff1a\njava version \"1.7.0_21\"\nJava(TM) SE Runtime Environment (build 1.7.0_21-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 23.21-b01, mixed mode)\n\nOS environment\uff1a\nLinux version 2.6.32-431.20.3.el6.mt20140703.x86_64  (gcc version 4.4.7 20120313 (Red Hat 4.4.7-4) (GCC) ) #1 SMP "
        },
        {
            "id": "comment-14193159",
            "author": "David Smiley",
            "date": "2014-11-01T13:30:44+0000",
            "content": "Although the lucene-spatial module changes are likely unrelated to the bug here, could you please summarize what sorts of customizations you did? "
        },
        {
            "id": "comment-14193740",
            "author": "zhanlijun",
            "date": "2014-11-02T06:53:39+0000",
            "content": "       Lucene-spatial module changes are unrelated to the bug, because the bug also happens when I use the native lucene-spatial module. \n       lucene-spatial module is widely used in mobile internet applications of china. I have an application scenario is to calculate the distance between the user and all POIs in the city. However, when the number of POIs in one city more than 100000, the distance calculation of lucene becomes very slow (more than 10ms). Lucene use spatial4j HaversineRAD to calculate the distance, and I have do a test on my computer (2.9GHz Intel Core i7, 8GB mem)\nPOI num\t|  time\n50000      \t|  7ms\n100000\t        |  14ms\n1000000\t|  144ms\n      I did some simplified the distance calculation formula. This simplification greatly improve the computational efficiency under the premise of maintaining the use of precision. Here is the result of the test.\n            test point pair                               | disSimplify(meter)\t        |  distHaversineRAD(meter)\t  |  diff(meter)\n(39.941, 116.45) (39.94, 116.451)\t | 140.0242769266660    | 140.02851671981400\t          |  0.0\n(39.96 116.45) (39.94, 116.40)\t | 4804.113098854450    | 4804.421153907680\t          |  0.3\n(39.96, 116.45) (39.94, 117.30)\t | 72438.90919479560\t| 72444.54071519510\t          |  5.6\n(39.26, 115.25) (41.04, 117.30)\t | 263516.676171262\t| 263508.55921886700\t          |  8.1\n\nPOI num\t|  time\n50000\t        | 0.1\n100000\t        | 0.3\n1000000\t      | 4 "
        },
        {
            "id": "comment-14193742",
            "author": "zhanlijun",
            "date": "2014-11-02T07:06:56+0000",
            "content": "org.apache.lucene.codecs.BlockTreeTermsWriter$TermsWriter.finish(BlockTreeTermsWriter.java:1014). The code is \n \"final PendingBlock root = (PendingBlock) pending.get(0);\"\n\nplease tell me in which cases pending.get (0) is PendingTerm type? "
        },
        {
            "id": "comment-14194130",
            "author": "zhanlijun",
            "date": "2014-11-03T00:30:14+0000",
            "content": "I found the cause of the problem. \nI have a application scenario that add a same document to the index by using indexwriter.addDocuments(). In order to improve the efficiency of indexing, I make the document into a static variable.  This way running very well in a single-threaded environment, however, when I use multiple-threads to operator indexwriter.addDocuments(), it cause the error. \n\nThe solution: I make a new document for each thread, and the error would no longer be reappeared. "
        },
        {
            "id": "comment-14195127",
            "author": "Michael McCandless",
            "date": "2014-11-03T21:25:03+0000",
            "content": "Hmm are you sure this was just a multi-threaded issue?  I don't see how [illegally] sharing a single Document across threads would lead to this exception. "
        },
        {
            "id": "comment-14195557",
            "author": "zhanlijun",
            "date": "2014-11-04T01:53:40+0000",
            "content": "Hi Michael\n     I am sure that this will lead to the issue. I just make the following\nchanges to the code, the program is no retrieval the issue.\n\n\n "
        },
        {
            "id": "comment-15322508",
            "author": "Adrien Grand",
            "date": "2016-06-09T13:38:16+0000",
            "content": "Closing: I don't see further progress being made on this issue. "
        },
        {
            "id": "comment-16516862",
            "author": "Khindikaynen Aleksey",
            "date": "2018-06-19T09:28:35+0000",
            "content": "I'm able to reproduce this issue quite stable with Lucene .NET 4.8 beta 5. I'm not sharing a single Document instance across threads - just adding documents to the index in multiple threads. As far as i know, Lucene .NET is a line-by-line port of Java Lucene version. Could it help if I share a sample illustrating this issue with Lucene .NET? "
        }
    ]
}