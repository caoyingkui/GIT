{
    "id": "LUCENE-3969",
    "title": "Use all (non-deprecated) analysis ctors in TestRandomChains",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA",
            "3.6.1"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We made TestRandomChains in LUCENE-3919, which reflects all\nanalysis components from the classpath and builds analyzers from them,\nthen checks consistency.\n\nbut currently it only supports some tokenizers/tokenfilters/charfilters,\nbecause it hardcodes at certain ctors e.g. Tokenizer(Reader) and Tokenizer(Version+Reader).\n\nInstead we should use all ctors, just filling them in with random data of\nwhatever argument type they take.",
    "attachments": {
        "LUCENE-3969.patch": "https://issues.apache.org/jira/secure/attachment/12521902/LUCENE-3969.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-09T01:33:22+0000",
            "content": "First cut at a patch: supports all of our analysis components, which means basically every time you run this test now, it finds a bug.\n\nThe test ignores any invocations of UOE or IAE, and i fixed most/all trivial issues related to that, but there are serious problems... ",
            "author": "Robert Muir",
            "id": "comment-13249643"
        },
        {
            "date": "2012-04-09T04:13:38+0000",
            "content": "updated patch... just fixing some more bugs. ",
            "author": "Robert Muir",
            "id": "comment-13249667"
        },
        {
            "date": "2012-04-09T08:20:35+0000",
            "content": "Hi Robert, no generics complaints, it cannot be done better (means warning-free, that's a backwards-API-bug in Java - as always. Reflection-APIs and other APIs in general should return collections not raw arrays; the horrible thing here is that reflection have to create a new array on every invocation (clone), as it could be modified later. With Lists it could return unmodifiableList... Oracle should fix this and break backwards, as we should with CR.getSequentialSubReaders as there is not overhead at all).\n\nI am a little bit irritated about the catch block:\n\n\n+            if (e instanceof UnsupportedOperationException) {\n+              // ignore\n+              System.err.println(\"WARNING: \" + e + \" for \" + clazz);\n+            } else if (e instanceof InvocationTargetException) {\n+              if (e.getCause() instanceof IllegalArgumentException ||\n+                  e.getCause() instanceof UnsupportedOperationException) {\n+                // thats ok\n+                if (VERBOSE) {\n+                  System.err.println(\"Ignoring IAE/UOE from ctor:\");\n+                  e.printStackTrace();\n+                }\n+              } else {\n+                // not ok\n+                System.err.println(clazz);\n+                throw new RuntimeException(e);\n+              }\n+            } else {\n+              throw new RuntimeException(e);\n+            }\n\n\n\nThe first check for Unsupported cannot come from the called ctor only from reflection code itsself, but reflection should not throw UOE.\n\nWhen you call a ctor with reflection, every Throwable the CTOR throws is wrapped by InvocationTargetException. So the code in my opinion should only catch InvocationTargetException and then check for the corresponding \"valid\" causes. All other causes (not the ITE) should be rethrown using o.a.l.util.Rethrow (and not wrapped with Runtime). And any other reflection-based Ex should not be catched at all.\n\nI will play around and remove the big Exception bug. ",
            "author": "Uwe Schindler",
            "id": "comment-13249733"
        },
        {
            "date": "2012-04-09T08:41:56+0000",
            "content": "Patch with the above mentioned cleanups. I also changed some code to be more consistent (isAnnotationPresent also for classes, Class.getName instead toString).\n\nThis thing fails almost always, in most cases with \"too many tokens\". ",
            "author": "Uwe Schindler",
            "id": "comment-13249737"
        },
        {
            "date": "2012-04-09T09:08:10+0000",
            "content": "New patch:\n\n\tI now have found out where the UOE comes from, it's the random parameter generator. But this is nasty and should be solved better. I readded the catch block with a comment.\n\n\n\nIn general, the code should be refactored to not call getConstrcutors all the time. Instead the global list of List<Class<T>> should be replaced by List<Constructor<T>>, then we only have one list where to choose the ctor from (the class is implicit).\n\nWill work on a patch. ",
            "author": "Uwe Schindler",
            "id": "comment-13249747"
        },
        {
            "date": "2012-04-09T10:33:44+0000",
            "content": "New patch with the Constructors moved up the chain to be top-level citizens, analysis classes are no longer explicitely used.\n\nIt would be goot to fix the randomParameter generator to never fail but instead the reflection code in beforClass() to check the constructor args against a Set<Class<?>> validArgs of valid parameters and throw away all invalid ctors from the beginning: validArgs.containsAll(Arrays.asList(ctor.getParameterTypes())) ",
            "author": "Uwe Schindler",
            "id": "comment-13249779"
        },
        {
            "date": "2012-04-09T10:38:04+0000",
            "content": "we could also fail the test here if the random generator is out of date... is that wrong? \nits definitely simple \n\nwarnings will likely be missed when the thing is running from hudson... ",
            "author": "Robert Muir",
            "id": "comment-13249781"
        },
        {
            "date": "2012-04-09T13:01:28+0000",
            "content": "Here a patch with a more flexible argument generator. Its still a little bit ugly how the three special cases are handled (and the Sets need to be kept in sync!), but at least the standard types are created very simple. ",
            "author": "Uwe Schindler",
            "id": "comment-13249808"
        },
        {
            "date": "2012-04-09T13:11:50+0000",
            "content": "thats nice!\n\n\nIts still a little bit ugly how the three special cases are handled (and the Sets need to be kept in sync!), but at least the standard types are created very simple.\n\nYeah but thats only the exceptional cases, so its no big deal.\n\nI tested the patch, by adding a fake ctor with an unsupported type to BulgarianStemFilter:\n\npublic BulgarianStemFilter(final TokenStream input, BitSet ignored) {\n   super(input);\n }\n\n\n\nTest failed nicely at startup:\n\n[junit] Caused by: java.lang.AssertionError: public org.apache.lucene.analysis.bg.BulgarianStemFilter(org.apache.lucene.analysis.TokenStream,java.util.BitSet) has unsupported parameter types\n\n\n\nThanks Uwe! ",
            "author": "Robert Muir",
            "id": "comment-13249810"
        },
        {
            "date": "2012-04-09T13:45:03+0000",
            "content": "https://svn.apache.org/repos/asf/lucene/dev/branches/lucene3969 is open for heavy committing,\nin case anyone else wants to pull our their hair debugging this thing  ",
            "author": "Robert Muir",
            "id": "comment-13249818"
        },
        {
            "date": "2012-04-11T13:53:12+0000",
            "content": "In the branch this test is failing about 2% of the time now... getting closer to sanity.\n\nstill some bugs to fix and some things to figure out... ",
            "author": "Robert Muir",
            "id": "comment-13251572"
        },
        {
            "date": "2012-04-11T19:45:50+0000",
            "content": "This now fails only very rarely (< 1%), finding real bugs. Mergeing the test and \nbugfixes to trunk now. ",
            "author": "Robert Muir",
            "id": "comment-13251869"
        },
        {
            "date": "2012-07-22T16:04:55+0000",
            "content": "Bulk close for 3.6.1 ",
            "author": "Uwe Schindler",
            "id": "comment-13420205"
        }
    ]
}