{
    "id": "LUCENE-1231",
    "title": "Column-stride fields (aka per-document Payloads)",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "New Feature",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "This new feature has been proposed and discussed here:\nhttp://markmail.org/search/?q=per-document+payloads#query:per-document%20payloads+page:1+mid:jq4g5myhlvidw3oc+state:results\n\nCurrently it is possible in Lucene to store data as stored fields or as payloads.\nStored fields provide good performance if you want to load all fields for one\ndocument, because this is an sequential I/O operation.\n\nIf you however want to load the data from one field for a large number of \ndocuments, then stored fields perform quite badly, because lot's of I/O seeks \nmight have to be performed. \n\nA better way to do this is using payloads. By creating a \"special\" posting list\nthat has one posting with payload for each document you can \"simulate\" a column-\nstride field. The performance is significantly better compared to stored fields,\nhowever still not optimal. The reason is that for each document the freq value,\nwhich is in this particular case always 1, has to be decoded, also one position\nvalue, which is always 0, has to be loaded.\n\nAs a solution we want to add real column-stride fields to Lucene. A possible\nformat for the new data structure could look like this (CSD stands for column-\nstride data, once we decide for a final name for this feature we can change \nthis):\n\nCSDList --> FixedLengthList | <VariableLengthList, SkipList> \nFixedLengthList --> <Payload>^SegSize \nVariableLengthList --> <DocDelta, PayloadLength?, Payload> \nPayload --> Byte^PayloadLength \nPayloadLength --> VInt \nSkipList --> see frq.file\n\nWe distinguish here between the fixed length and the variable length cases. To\nallow flexibility, Lucene could automatically pick the \"right\" data structure. \nThis could work like this: When the DocumentsWriter writes a segment it checks \nwhether all values of a field have the same length. If yes, it stores them as \nFixedLengthList, if not, then as VariableLengthList. When the SegmentMerger \nmerges two or more segments it checks if all segments have a FixedLengthList \nwith the same length for a column-stride field. If not, it writes a \nVariableLengthList to the new segment. \n\nOnce this feature is implemented, we should think about making the column-\nstride fields updateable, similar to the norms. This will be a very powerful\nfeature that can for example be used for low-latency tagging of documents.\n\nOther use cases:\n\n\treplace norms\n\tallow to store boost values separately from norms\n\tas input for the FieldCache, thus providing significantly improved loading\nperformance (see LUCENE-831)\n\n\n\nThings that need to be done here:\n\n\tdecide for a name for this feature  - I think \"column-stride fields\" was\nliked better than \"per-document payloads\"\n\tDesign an API for this feature. We should keep in mind here that these\nfields are supposed to be updateable.\n\tDefine datastructures.\n\n\n\nI would like to get this feature into 2.4. Feedback about the open questions\nis very welcome so that we can finalize the design soon and start \nimplementing.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2008-03-24T20:28:46+0000",
            "content": "How would this compare to making the storing of position and freq optional for a field?  Then one could have an indexed field with a payload or boost but with no freq (or positions, since freq is required for positions).  Would that be equivalent? ",
            "author": "Doug Cutting",
            "id": "comment-12581662"
        },
        {
            "date": "2008-03-26T20:31:21+0000",
            "content": "\nHow would this compare to making the storing of position and freq optional for a field? Then one could have an indexed field with a payload or boost but with no freq (or positions, since freq is required for positions). Would that be equivalent?\n\nI think this would be very similar, except maybe:\n\n\n\tThis proposal would allow for optional non-sparse, fixed-length\n    storage (ie, don't include the docID since all docs have a\n    payload, and the payload is always the same length).  EG norms are\n    like this.\n\n\n\n\n\t[From the thread linked above] would allow for binary storage of\n    field values.  EG for int fields you would store the 4 bytes per\n    value, and populating the cache would be much faster than the\n    FieldCache now (which must re-parse Strings -> ints, and, must\n    walk the terms to \"reconstruct\" the forward index).\n\n\n\n\n\tThis proposal may allow for updating these values, like we can do\n    with norms today.  Maybe this can only work if the field is\n    non-sparse and perhaps if you've loaded it into the FieldCache?\n\n\n\nThis would tie into the LUCENE-831, so that you could load these\nfields entirely in RAM, incrementally update them from a reopen, etc. ",
            "author": "Michael McCandless",
            "id": "comment-12582420"
        },
        {
            "date": "2008-03-26T21:51:11+0000",
            "content": "So there are a number of features these fields would have that differ from other fields:\n\n\tno freq\n\tno positions\n\tnon-sparse representation\n\tbinary values (is this different from payloads?)\n\tupdateable\n\n\n\nMy question is whether it is best to bundle these together as a new kind of field, or add these as optional features of ordinary fields, or some combination.  There are a certain bundles that may work well together: e.g., a dense array of fixed-size, updateable binary values w/o freqs or positions.  And not all combinations may be sensible or easy to implement.  But most of these would also be useful ala carte too, e.g., no-freqs, no-positions and (perhaps) updateable.\n\nBTW, setTermPositions(TermPositions) and setTermDocs(TermDocs) might be a reasonable API for updating sparse fields. ",
            "author": "Doug Cutting",
            "id": "comment-12582442"
        },
        {
            "date": "2008-03-26T22:44:12+0000",
            "content": "Sorry you're right: the payload is the binary data.\n\n\nSo there are a number of features these fields would have that differ from other fields:\n\nMaybe add \"stored in its own file\" or some such, to that list.  Ie to\nefficiently update field X I would think you want it stored in its own\nfile.  We would then fully write a new geneation of that file whenever\nit had changes.\n\nI agree it would be great to implement this as \"flexible indexing\",\nsuch that these are simply a-la-cart options on how the field is\nindexed, rather than make a new specialized kind of field that just\ndoes one of these \"combinations\".  But I haven't wrapped my brain\naround what all this will entail... it's a biggie!\n\n\nBTW, setTermPositions(TermPositions) and setTermDocs(TermDocs) might be a reasonable API for updating sparse fields.\nI like that!\n ",
            "author": "Michael McCandless",
            "id": "comment-12582464"
        },
        {
            "date": "2008-08-19T02:11:33+0000",
            "content": "I started working on this, but it shouldn't block the 2.4 release.\n ",
            "author": "Michael Busch",
            "id": "comment-12623538"
        },
        {
            "date": "2009-03-24T19:13:56+0000",
            "content": "While working on this I got kind of stuck on the ingestion side. I\nthink we need to make FieldInfos and Fields more flexible. If I\nintroduce a column-stride field, then I also need to add something to\nFieldInfos. So I could add another bit indicating a column-stride\nfield. But the other bits don't make much sense in combination with\nthis.\n\nEventually we need more flexibility to utilize the flexible indexing\nchain anyway. We need to store which codec to use for a field. Then we could\nalso just make a new codec for column-stride fields and maybe then we\ndo not have to introduce a new Field API.\n\nSo I think we should try for 3.0 to overhaul the\ndocument/field/fieldinfos APIs. I have some ideas which I started\nhacking during a long flight. I'll try to summarize the ideas/goals\nI'd have for such a new API and send it to java-dev. ",
            "author": "Michael Busch",
            "id": "comment-12688803"
        },
        {
            "date": "2009-04-04T03:34:21+0000",
            "content": "For the search side we need an API similar to TermDocs and Payloads,\nlet's call it ColumnStrideFieldAccessor (CSFA) for now. It should have\nnext(), skipTo(), doc(), etc. methods.\nHowever, the way TermPositions#getPayloads() currently works\nis that it always forces you to copy the bytes from the underlying\nIndexInput into the payload byte[] array. Since we usually use a\nBufferedIndexInput, this is then an arraycopy from\nBufferedIndexInput's buffer array into the byte array.\n\nI think to improve this we could allow users to call methods like\nreadVInt() directly on the CSFA. So I was thinking about adding\nDataInput and DataOutput as superclasses of IndexInput and\nIndexOutput. DataIn(Out)put would implement the different read and\nwrite methods, whereas IndexIn(Out)put would only implement methods\nlike close(), seek(), getFilePointer(), length(), flush(), etc.\n\nSo then CSFA would extend DataInput or alternatively have a\ngetDataInput() method. The danger here compared to the current\npayloads API would be that the user might read too few or too many\nbytes of a CSF, which would result in an undefined and possibly hard\nto debug behavior. But we could offer e.g.:\n\n\n  static ColumnStrideFieldsAccessor getAccessor(ColumnStrideFieldsAccessor in, Mode mode) {\n    if (mode == Mode.Fast) {\n      return in;\n    } else if (mode == Mode.Safe) {\n      return new SafeAccessor(in);\n    }\n\n\n\nThe SafeAccessor would count for you the number of read bytes and\nthrow exceptions if you don't consume the number of bytes you should\nconsume. This is of course overhead, but users could use the\nSafeAccessor until they're confident that everything works fine in\ntheir system, and then switch to the fast accessor for better\nperformance.\n\nIf there are no objections I will open a separate JIRA issue for the\nDataInput/Output patch. ",
            "author": "Michael Busch",
            "id": "comment-12695666"
        },
        {
            "date": "2009-04-04T12:13:50+0000",
            "content": "\nEventually we need more flexibility to utilize the flexible indexing\nchain anyway. We need to store which codec to use for a field. Then we\ncould also just make a new codec for column-stride fields and maybe\nthen we do not have to introduce a new Field API.\n\nBy creating a custom indexing chain you could actually write CSF,\ntoday.\n\nBut the lack of extensibility of Field needs to be addressed: you need\nsome way to store something arbitrary & opaque into a field such that\nyour indexing chain could pick it up and act.\n\nAnd FieldInfos also needs \"store this opaque thing for me\" API.\n\nOne of the big changes in LUCENE-1458 is to strongly separate\ndifferent fields on the read APIs.  EG there is a separate FieldsEnum\nfrom TermsEnum, meaning you first seek to the field you want, then\nrequest a TermsEnum from that, which can iterate through the terms\nonly for that field.  It's the codec's job to return the right\nTermsEnum for a given field.\n\nNot to delay 2.9 further, but... I also wonder if Lucene had\nNumericField (say), how it would simplify things here.  EG, today, if\nI have a field \"weight\" that is a float, I'm going to have to set\nsomething to tell the CSF (man the similarity of that to CFS is going\nto cause problems!) writer to cast-it-and-save-it-as-float-array to\ndisk; I'm going to have to tell the TrieRangeUtil to do the same, etc.\nIt'd be much better if that field stored a float (not String), and if\nit default \"naturally\" to using these two special indexers...\n\n\nDataIn(Out)put would implement the different read and\nwrite methods, whereas IndexIn(Out)put would only implement methods\nlike close(), seek(), getFilePointer(), length(), flush(), etc.\n\nWhat is the fastest way in Java to slurp in a bunch of bytes as an\nint[], short[], float[], etc?  Seems that we need to answer that first\nand then work out how to fix our store APIs to enable that.  (Maybe\nit's IntBuffer wrapping ByteBuffer, instead of an int[]?).\n\n\nThe danger here compared to the current\npayloads API would be that the user might read too few or too many\nbytes of a CSF, which would result in an undefined and possibly hard\nto debug behavior.\n\nI think it's better to have good performance with added risk of\ndanger, then forced handholding always.\n\n\nThe SafeAccessor would count for you the number of read bytes and\nthrow exceptions if you don't consume the number of bytes you should\nconsume.\n\nI generally prefer liberal use of asserts to trip bugs like this,\ninstead of explicit strongly divoced code paths / classes / modes\netc., containing real if statements at production runtime. ",
            "author": "Michael McCandless",
            "id": "comment-12695726"
        },
        {
            "date": "2009-04-07T23:16:36+0000",
            "content": "One interesting idea, from Earwin's comment here:\n\n    https://issues.apache.org/jira/browse/LUCENE-1584?focusedCommentId=12696583&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12696583\n\nis for column-stride fields to be a possible source for IndexReader.document() (or whatever it becomes).  Ie, when possible, that method should maybe pull from CSFs for values. ",
            "author": "Michael McCandless",
            "id": "comment-12696811"
        },
        {
            "date": "2009-04-08T00:10:51+0000",
            "content": "+1 Making it automatic makes sense. ",
            "author": "Jason Rutherglen",
            "id": "comment-12696838"
        },
        {
            "date": "2009-04-08T03:48:04+0000",
            "content": "\nis for column-stride fields to be a possible source for IndexReader.document() (or whatever it becomes). Ie, when possible, that method should maybe pull from CSFs for values.\n\nHmm, I'm not sure about this. The Lucene store is optimized for the case when ALL stored fields for a document need to be loaded. E.g. to render search results you usually need to load multiple fields. Then only one disk seek is needed to seek to the right document. Loading the fields is then just one sequential I/O. \n\nIf you e.g. want to show 5 fields per search result, you need to perform 1 seek per doc using stored fields, but will need 5 seeks with CSFs.\n\nMy general rule of thumb is to use payloads/CSFs for data you need during hit collection (e.g. a UID field or e.g. the norms, which is essential a CSF with fixed size), but ordinary stored fields to load data for rendering search results. ",
            "author": "Michael Busch",
            "id": "comment-12696873"
        },
        {
            "date": "2009-04-08T10:18:58+0000",
            "content": "If you e.g. want to show 5 fields per search result, you need to perform 1 seek per doc using stored fields, but will need 5 seeks with CSFs.\n\nIf the CSFs have been loaded into the FieldCache then it's fast.  If they haven't, I agree (one seek per doc).\n\nAnyway this would just be \"sugar\" (a single 'retrieve doc' API that'd pull from the FieldCache & from stored fields, and merge).  EG if I store body text as stored field, but then have a bunch of small \"metadata\" fields (price, weight, manufacturer, etc.) stored in FieldCache (loaded via CSF), it'd be convenient to call document() somewhere and get all fields back. ",
            "author": "Michael McCandless",
            "id": "comment-12696972"
        },
        {
            "date": "2009-04-08T10:58:40+0000",
            "content": "I can share my design for doc loading, if anybody needs it:\n\npublic interface FieldCache {\n  DocLoader loader(FieldInfo<?>... fields);\n  ....\n}\n\npublic interface DocLoader {\n  void load(Doc doc);\n  <T> T value(FieldInfo<T> field);\n}\n\nDoc is my analog for ScoreDoc, for these purporses it is completely identical\nFieldInfos are constants defined like UserFields.EMAIL, they hold the type for field, its name, indexing method, whether it is cached or not and the way it is cached. Two synthetic fields exist - LUCENE_ID and SCORE, they allow to use same api for anything field-related.\n\nWorkflow looks like this:\n\n// I create a loader. Fields are checked against the cache, for those that aren't cached I create a FieldSelector\nloader = searcher.fieldCache().loader(concat(payloadFields, ID, DOCUMENT_TYPE, sortBy.field));\n\n// Then for each document I'm going to send in response for search request I select this document\n// an indexReader.document(fieldSelector) happens here if there are any uncached fields\nloader.load(doc);\n\n// Then I extract the values I need. Cached ones arrive from the cache, uncached are decoded from Document retrieved in previous step\nhit = new Hit(loader.value(ID), loader.value(DOCUMENT_TYPE), loader.value(sortBy.field)) // etc, etc\n\n\nHaving a single API to retrieve values regardless of the way they are stored/cached is very handy. Loading a mix of stored/column-stride (if I correctly understand what are they) fields is pointless, you're more likely to lose performance than to gain it. Loading a mix of cached/uncached fields is massive win, it becomes even more massive if all required fields happen to be cached. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12696977"
        },
        {
            "date": "2009-04-08T16:07:32+0000",
            "content": "FWIW, I think priority for document fetching should be to optimize for search\nclusters where you have separate index servers and document/excerpt servers.\nUnder such a system, it's clear that you'd want to use the standard stored\nfields.\n\nTo my mind, column stride fields are more of a search tool \u2013 an extension of\nthe field caches and the \"flexible indexing\" concept \u2013 and I don't think the\ndesign should be encumbered or deployment slowed so that they can perform\ndouble duty.\n\nHowever, I think column-stride fields may be more of an imperative for Lucy\nthan Lucene.  In Lucy, our sort caches will be either column-stride or\nvariable width and will be written out at index-time \u2013 mmap a\none-value-per-doc column-stride file, and voila: instant sort cache.\n\n> Loading a mix of cached/uncached fields is massive win\n\nI don't quite understand why that would be the case.  Presuming a cold OS\ncache, the big cost is the .fdt file disk seek.  Once you're there, how much\nof a difference is it to read the field off disk as opposed to reading it from\nthe cache?\n\n> it becomes even more massive if all required fields happen to be cached.\n\nI can see that.  However, the gain won't be all that significant for systems\nwhere the index fits into RAM, or when the persistant storage device is an\nSSD.  And of course a different caching strategy altogether (popular document\ncaching) is best for dedicated doc servers. ",
            "author": "Marvin Humphrey",
            "id": "comment-12697076"
        },
        {
            "date": "2009-04-09T10:24:44+0000",
            "content": "\nTo my mind, column stride fields are more of a search tool - an extension of\nthe field caches and the \"flexible indexing\" concept\n\nI don't think of CSF's as an extension to  FieldCache; I think of them as an alternate (much more efficient than uninversion) underlying store that FieldCache can use to retrieve values.  Ie the way you'll access a CSF in Lucene will be through the [new in LUCENE-831] FieldCache API.\n\n\nHowever, I think column-stride fields may be more of an imperative for Lucy\nthan Lucene. In Lucy, our sort caches will be either column-stride or\nvariable width and will be written out at index-time - mmap a\none-value-per-doc column-stride file, and voila: instant sort cache.\nI think column or row stride, vs fixed or variable width storage, are orthogonal issues?\n\nEG column-stride fields (in Lucene) could very well be variable width storage (eg for storing String values).\n\n\nI can see that. However, the gain won't be all that significant for systems\nwhere the index fits into RAM, or when the persistant storage device is an\nSSD.\n\nSSDs, as fast as they are, are still orders of magnitude slower than RAM (assuming of course the OS hasn't swapped your RAM out to your SSD . ",
            "author": "Michael McCandless",
            "id": "comment-12697470"
        },
        {
            "date": "2011-06-09T10:53:43+0000",
            "content": "this has been implemented in LUCENE-3108, LUCENE-2935, LUCENE-2168 and LUCENE-1231 moving out ",
            "author": "Simon Willnauer",
            "id": "comment-13046462"
        }
    ]
}