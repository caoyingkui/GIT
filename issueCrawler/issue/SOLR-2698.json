{
    "id": "SOLR-2698",
    "title": "Enhance CoreAdmin STATUS command to return index size",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "multicore"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "CoreAdmin STATUS command returns all kinds of index info for all cores on the server, except for the index size.\nHowever, indexSize can be retrieved for an individual core via a /replication&command=details request.\n\nI have N Solrs servers, running M cores each. My application is monitoring the status of all cores, including their index size.\nAs it stands today, I need to issue N status requests plus N*M replication requests to get all the information I need.\nIf STATUS command returned indexSize, number of requests would be just N.",
    "attachments": {
        "SOLR-2698.patch": "https://issues.apache.org/jira/secure/attachment/12489351/SOLR-2698.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yury Kats",
            "id": "comment-13079405",
            "date": "2011-08-04T14:50:57+0000",
            "content": "This patch adds index size to CoreAdminHandler#getCoreStatus "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13079413",
            "date": "2011-08-04T15:06:24+0000",
            "content": "+  // Two methods below are copied from ReplicationHandler.\n+  // Could be refactored into an utility\n\nShouldn't we simply use org.apache.commons.io.FileUtils.sizeOfDirectory(f) in both places ? "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13079423",
            "date": "2011-08-04T15:25:46+0000",
            "content": "I don't see why not. I'm very new to the solr codebase and thus just looked how the same function is already implemented.\n\nReplicationHandler also converts size into a \"readable\" string. For consistency sake CoreAdminHandler could do the same (ReplicationHandler#readableSize could be a shared util). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13079425",
            "date": "2011-08-04T15:34:55+0000",
            "content": "I'm very new to the solr codebase and thus just looked how the same function is already implemented.\n\nYup, made perfect sense to see how it was done and copy it - just making an overall improvement suggestion.\n\nReplicationHandler also converts size into a \"readable\" string. \n\nThere is a commons method for this type of thing as well:\n\norg.apache.commons.io.FileUtils.byteCountToDisplaySize(size) "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13079428",
            "date": "2011-08-04T15:44:48+0000",
            "content": "FileUtils.byteCountToDisplaySize could produce a different result than what's being returned now.\n\nhttp://www.discursive.com/books/cjcook/reference/io-network-sect-printing-human-readable mentions:\n\n  FileUtils.byteCountToDisplaySize( ) will not round the size of a file; a 2.9 MB file will have a display size of 2 MB. \n\nIf that's true, it's not very useful.\n\nWe could go a step further and return index size in bytes AND as a readable string in the response.\nIf need to choose one or the other, my preference would be for just bytes (long). If it's a String, any application processing the response will need to convert it into bytes anyway to do any meaningful analysis. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13079429",
            "date": "2011-08-04T15:53:43+0000",
            "content": "FileUtils.byteCountToDisplaySize( ) will not round the size of a file\n\nAh, right, good catch! This is actually why I implemented our own version in one of our projects (similar to the one in rep handler). Had forgotten the reason for that! See below. I see the following JIRA issue as well: https://issues.apache.org/jira/browse/IO-226\n\nSo yeah, +1 on the new Util method.\n\n\n  /**\n   * Return good default units based on byte size.\n   */\n  public static String humanReadableUnits(long bytes) {\n    String newSizeAndUnits;\n    DecimalFormat df = new DecimalFormat(\"#.#\");\n    if (bytes / ONE_GB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_GB)) + \" GB\";\n    } else if (bytes / ONE_MB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_MB)) + \" MB\";\n    } else if (bytes / ONE_KB > 0) {\n      newSizeAndUnits = String.valueOf(df.format((float)bytes / ONE_KB)) + \" KB\";\n    } else {\n      newSizeAndUnits = String.valueOf(bytes) + \" bytes\";\n    }\n\n    return newSizeAndUnits;\n  }\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13079430",
            "date": "2011-08-04T15:55:18+0000",
            "content": "We could go a step further and return index size in bytes AND as a readable string in the response.\n\nI think both is nice myself - but of course not really necessary - a nicety though, in the case an application wants to display this, nice if we simply do the work for them.\n\nIf need to choose one or the other, my preference would be for just bytes (long). \n\n+1 "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13079435",
            "date": "2011-08-04T16:09:39+0000",
            "content": "I see the following JIRA issue as well: https://issues.apache.org/jira/browse/IO-226\n\nFunny how it was closed \"not a bug\". Who needs a method that returns \"1 GB\" for a 1.99GB file?\n\nhumanReadableUnits looks good. Maybe add TB? Storage is getting cheaper by the day.\n\nI think both is nice myself - but of course not really necessary - a nicety though, in the case an application wants to display this, nice if we simply do the work for them.\n\n+1 on two values in the response. In CoreAdminHandler and ReplicationHandler.\n "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13081165",
            "date": "2011-08-08T20:16:35+0000",
            "content": "Mark, is this good to go or are you waiting for an updated patch from me? Just double checking. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13081185",
            "date": "2011-08-08T20:53:56+0000",
            "content": "Here is a patch - I'll commit soon.\n\nSorry for the delay. Hard to work while my eyes are bleeding from staring at my brokerage account  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13081406",
            "date": "2011-08-09T03:38:56+0000",
            "content": "Thanks Yury! "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13081407",
            "date": "2011-08-09T03:40:03+0000",
            "content": "hmmm...reopening - might as well back port this to 3x "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106327",
            "date": "2011-09-16T14:50:36+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13240498",
            "date": "2012-03-28T16:05:20+0000",
            "content": "+1 This'd be useful. "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13240499",
            "date": "2012-03-28T16:08:39+0000",
            "content": "To clarify, this is already fixed in 4.0. The bug was re-opened for a potential backport to 3.x. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13264918",
            "date": "2012-04-30T13:10:27+0000",
            "content": "Too late for backport - resolving. "
        }
    ]
}