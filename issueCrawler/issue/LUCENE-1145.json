{
    "id": "LUCENE-1145",
    "title": "DisjunctionSumScorer small tweak",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Move ScorerDocQueue initialization from next() and skipTo() methods to the Constructor. Makes DisjunctionSumScorer a bit faster (less than 1% on my tests). \n\nDownside (if this is one, I cannot judge) would be throwing IOException from DisjunctionSumScorer constructors as we touch HardDisk there. I see no problem as this IOException does not propagate too far (the only modification I made is in BooleanScorer2)\n\nif (scorerDocQueue == null) {\n      initScorerDocQueue();\n}\n\n\nAttached test is just quick & dirty rip of  TestScorerPerf from standard Lucene test package. Not included as patch as I do not like it.\n\n\nAll test pass, patch made on trunk revision 613923",
    "attachments": {
        "TestScorerPerformance.java": "https://issues.apache.org/jira/secure/attachment/12373688/TestScorerPerformance.java",
        "DSSQueueSizeOptimization.patch": "https://issues.apache.org/jira/secure/attachment/12373839/DSSQueueSizeOptimization.patch",
        "DisjunctionSumScorerOptimization.patch": "https://issues.apache.org/jira/secure/attachment/12373687/DisjunctionSumScorerOptimization.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-01-23T15:51:23+0000",
            "content": "Simplification of the DisjunctionSumScorer. \n\n\tremoved cached field \"private int queueSize\" which mirrored ScorerDocQueue.size()  and\nreplaced it with method call.\n\n\n\nIt is faster with this patch, but hardly measurable (test made with attached TestScorerPerformance) 585660ms vs 586090ms. Test on WIN XP  Prof. Dual Core Intel T7300 2GHz with 6.0 java -server -Xbatch\n\nAt a moment, I have no other configurations to test it, it would be good to see what happens on jvm 1.4   \n\nIt makes sense to commit this as it simplifies (pff, ok, simpifies it a bit  already complex code in DSScorer and is not slower.  ",
            "author": "Eks Dev",
            "id": "comment-12561718"
        },
        {
            "date": "2008-01-23T18:11:21+0000",
            "content": "When I wrote it, using the queueSize variable did make a minor difference in performance.\nBut with the result you have, I think it's better use the size() call only. ",
            "author": "Paul Elschot",
            "id": "comment-12561752"
        },
        {
            "date": "2008-01-23T22:18:42+0000",
            "content": "Well, I do not know how it behaves on earlier jvm-s and what would be the \"jvm we optimize\", I would not be surprised if jvm 6+ evolved optimization methods. \nThese patches are just side effects of trying to get familiar with scorer family inner working in light of LUCENE-584. Boolean arithmetic on multiple skipping  iterators in Scorers can hardly be beaten and can be recycled for cases like BooleanFilter... and maybe one day merged to avoid code duplication \n\nAnyhow, if it proves that performance on 1.4 behaves similarly, I would opt for size(), makes code slightly cleaner. If not, I would suggest to replace the only size() usage  in next() with cached queueSize ",
            "author": "Eks Dev",
            "id": "comment-12561836"
        },
        {
            "date": "2008-02-08T08:54:49+0000",
            "content": "test using Sun 1.4 jvm on the same hardware showed the same \"a bit faster\" behavior, so this is in my opinion OK to be committed.    ",
            "author": "Eks Dev",
            "id": "comment-12566961"
        },
        {
            "date": "2009-03-18T16:24:59+0000",
            "content": "I plan to commit shortly. ",
            "author": "Michael McCandless",
            "id": "comment-12683058"
        },
        {
            "date": "2009-03-18T16:45:33+0000",
            "content": "Thanks Eks and Paul! ",
            "author": "Michael McCandless",
            "id": "comment-12683070"
        }
    ]
}