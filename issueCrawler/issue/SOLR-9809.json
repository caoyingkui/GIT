{
    "id": "SOLR-9809",
    "title": "TrieField.createFields produces useless IndexableField instances when field is stored=false indexed=false",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "I'll provide more context in jira comment below, but important bit is this:\n\n\n\tIt seems that TrieField.createFields and/or TriedField.createField have a bug causing TrieField.createFields to return useless Legacy*Field instances when the field is only using docValues (in addition to the important NumericDocValuesField instance which is also included in the list).\n\tThese useless IndexableField instances are passed along to the IndexWriter where they are ultimatley ignored because neither the stored nor index properties are set.\n\tOther field types that support docValues (like StrField, BoolField and EnumField) don't seem to have this problem\n\t\n\t\tbut EnumField may be including a useless null in the list? ... seems like a closely related bug.\n\t\n\t\n\troot of the bug seems to be that in most classes, createField returns null if the field is indexed=false AND stored=false, but that's not true in TrieField\n\t\n\t\tsubsequently createFields seems to to depend on createField not returning null, so it can reuse the already parsed numeric value\n\t\n\t\n\tTrieField should be refactored to work the same as other fields that support docvalues, and not produce useless IndexableField objects \u2013 or at the very least, to not pass them up to the caller\n\twe should add some low level unit tests that loop over all the possible fieldTypes and sanity check that createFields returns an emptylist when appropriate (no docValues, no stored, no indexed)\n\t\n\t\twe should also probably update the key consumers of FieldType.createFields to assert the values in the list are non-null \u2013 wouldn't have caught this bug, but it might help catch similarly silly bugs in the future.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-11-29T00:49:29+0000",
            "author": "Hoss Man",
            "content": "Backstory...\n\nWorking on SOLR-5944, i was really confused by a bit of code ishan in his patch had & the associated explanation when i asked about it relating to the results of calling field.getType().createFields(field, ...) in a code path where we'd already asserted that the field was a single valued docValues only field...\n\n\n\n\n\tif true==forInPlaceUpdate and createFields(...) returns anything that is not a NumericDocValuesField (or returns more then one) shouldn't that trip an assert or something? (ie: doesn't that mean this SchemaField isn't valid for using with an in place update, and the code shouldn't have gotten this far?)\n\t\n\t\tThis is fine, since createFields() generates both NDV and non NDV fields for an indexable field, and the intent is to drop the non NDV one. Added a comment to this effect\n\t\n\t\n\n\n\n...this response confused the hell out of me for a while because i couldn't figure out any reason why createFields() should be returning \"non NDV fields\" .... untill i noticed the way TrieField.createFields delegates to TrieField.createField is different then every other docValue related FieldType: it expects the result to always be non-null, which (unlike every other FieldType) it always is.\n ",
            "id": "comment-15703727"
        }
    ]
}