{
    "id": "SOLR-2342",
    "title": "Lock starvation can cause commit to never run when many clients are adding docs",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I have a stress test, where 100 clients add 100 1MB docs and then call commit in the end.  It's a falldown test (try to make Solr fall down) and nowhere near \"actual\" usage.\n\nBut, after some initial commits that succeed, I'm seeing later commits always time out (client side timeout @ 10 minutes).  Watching Solr's logging, no commit ever runs.\n\nLooking at the stack traces in the threads, this is not deadlock: the add/update calls are running, and new segments are being flushed to the index.\n\nDigging in the code a bit, we use ReentrantReadWriteLock, with add/update acquiring the readLock and commit acquiring the writeLock.  But, according to the jdocs, the writeLock isn't given any priority over the readLock (unless you set fairness, which we don't).  So I think this explains the starvation?\n\nHowever, this is not a real world use case (most apps would/should call commit less often, and from on client).  Also, we could set fairness, but it seems to have some performance penalty, and I'm not sure we should penalize the \"normal\" case for this unusual one.  EG see here (thanks Mark): http://www.javaspecialists.eu/archive/Issue165.html.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Michael McCandless",
            "id": "comment-12990554",
            "date": "2011-02-04T13:32:46+0000",
            "content": "Fixing the client threads to not commit in the end, so no client is committing, and then turning on Solr's auto-commit, still hits the starvation. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-12991965",
            "date": "2011-02-08T13:46:01+0000",
            "content": "OK, passing true to the ReentrantReadWriteLock fixes the starvation in this test...  Should we commit that?\n\nPassing true does make the read lock acq more costly, but I suspect this is in the noise for typical indexing.\n\nAnd, while I think the stress test is rather unnatural (normally one thread should call commit in the end), I fear many apps may (for simplicity) do something similar to this stress test.  Also, the fact that auto-commit is also starved is I think a more realistic failure... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12992245",
            "date": "2011-02-09T00:15:53+0000",
            "content": "Passing true does make the read lock acq more costly, but I suspect this is in the noise for typical indexing.\n\nI'll try to do a quick test to verify this soon. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12993331",
            "date": "2011-02-11T03:47:14+0000",
            "content": "I did a test on my laptop (2 cores, 4 virtual cores via hyper-threading)\nusing StreamingUpdateSolrServer with 1,2,4,8, and 16 threads.\nThe documents were just 1M unique ids, and the throughput ranged anywhere from 60,000 docs per second, to 67000.\nThe timing of different runs varied up to 6% for the same number of threads on the client, but I couldn't detect a difference when the ReadWriteLock was switched to fair mode.\n "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-12993770",
            "date": "2011-02-12T00:15:06+0000",
            "content": "OK, thanks Yonik.  That's good news.  Should we commit the fairness? "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-12994102",
            "date": "2011-02-13T14:03:50+0000",
            "content": "We may as well do this for 3.1? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12994173",
            "date": "2011-02-13T23:50:58+0000",
            "content": "We may as well do this for 3.1?\n\n+1 "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-12994544",
            "date": "2011-02-14T22:55:54+0000",
            "content": "Thanks Mark; I'll commit shortly... "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013262",
            "date": "2011-03-30T15:46:01+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}