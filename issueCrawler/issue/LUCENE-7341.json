{
    "id": "LUCENE-7341",
    "title": "EarlyTerminatingSortingCollector support for grouped searches",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "New Feature"
    },
    "description": "Currently grouped searches must not use the early terminating sorting collector because the wrong results would be returned. This ticket proposes to change the EarlyTerminatingSortingCollector class and probably the LeafCollector interface to support early termination for grouped searches.\n\nIllustration (aaa is an as yet unnamed boolean flag):\n\n# fictitious (sorted by X) segment\n| doc key | D0 D1 D2 D3 D4 D5 ... D10 D11 D12 D13 D14 D15 ... D20 D21 D22 D23 D24 D25 ...\n| doc grp | G0 G0 G0 G0 G0 G0 ... D10 G10 G10 G10 G10 G10 ... G20 G20 G20 G20 G20 G20 ... \n\n\n\n\n# query with rows=3 sort=X group=false\n| query result | D0 D1 D2\n\n# existing code:\n#   use a EarlyTerminatingSortingCollector with numDocsToCollect=3\n#   EarlyTerminatingSortingCollector.getLeafCollector returns a LeafCollector\n#   whose collect method uses (++numCollected >= numDocsToCollect) as the terminating condition\n\n\n\n\n# query with rows=3 sort=X group=true group.field=grp group.sort=X group.limit=1\n| query result | G0(D0) G10(D10) G20(D20)\n\n# existing code:\n#   cannot use EarlyTerminatingSortingCollector (query result would wrongly be just 'G0(D0)')\n# proposed new code:\n#   use a EarlyTerminatingSortingCollector(... numDocsToCollect=3 aaa=true)\n\n\n\n\n# query with rows=3 sort=X group=true group.field=grp group.sort=X group.limit=5\n| query result | G0(D0,D1,D2,D3,D4) G10(D10,D11,D12,D13,D14) G20(D20,D21,D22,D23,D24)\n\n# existing code:\n#   cannot use EarlyTerminatingSortingCollector (query result would wrongly be just 'G0(D0,D1,D2)')\n# proposed new code:\n#   use a EarlyTerminatingSortingCollector(... numDocsToCollect=3 aaa=true)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15333568",
            "author": "Christine Poerschke",
            "date": "2016-06-16T10:59:44+0000",
            "content": "proposed EarlyTerminatingSortingCollector constructor change:\n\n+ final private boolean aaa; // as yet unnamed flag\n+ @Deprecated\n  public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect) {\n-   ...\n+   this(in, sort, numDocsToCollect, false);\n+ }\n+ public EarlyTerminatingSortingCollector(Collector in, Sort sort, int numDocsToCollect, boolean aaa) {\n+   ...\n    this.aaa = aaa;\n  }\n\n\n\nproposed EarlyTerminatingSortingCollector method change:\n\n  public LeafCollector getLeafCollector(LeafReaderContext context) throws IOException {\n    ...\n    if (...) {\n      // segment is sorted, can early-terminate\n      return new FilterLeafCollector(super.getLeafCollector(context)) {\n        private int numCollected;\n        @Override\n        public void collect(int doc) throws IOException {\n          super.collect(doc);\n-         if (++numCollected >= numDocsToCollect) {\n+         if (aaa) {\n+           final Boolean zzz = gotAndKeptAtLeast(numDocsToCollect);\n+           if (Boolean.TRUE.equals(zzz) {\n+             terminatedEarly.set(true);\n+             throw new CollectionTerminatedException();+\n+           }\n+         } else if (++numCollected >= numDocsToCollect) {\n            terminatedEarly.set(true);\n            throw new CollectionTerminatedException();\n          }\n        }\n      };\n    } else {\n      return super.getLeafCollector(context);\n    }\n  }\n\n\n\nproposed LeafCollector interface extension:\n\npublic interface LeafCollector {\n  ...\n   // Return null to indicate \"don't know\".\n  Boolean gotAndKeptAtLeast(int numDocs);\n  ...\n}\n\n\n\noutline AbstractFirstPassGroupingCollector change:\n\npublic abstract class AbstractFirstPassGroupingCollector ... {\n  ...\n  Boolean gotAndKeptAtLeast(int numDocs) {\n    return (groupMap == null ? null : (groupMap.size() >= numDocs)); \n  }\n  ...\n}\n\n\n\noutline AbstractSecondPassGroupingCollector change:\n\npublic abstract class AbstractSecondPassGroupingCollector ... {\n  ...\n  Boolean gotAndKeptAtLeast(int numDocs) {\n    Boolean gak = null;\n    for (SearchGroupDocs<GROUP_VALUE_TYPE> groupDocs : groupMap.values()) {\n      gak = groupDocs.leafCollector.gotAndKeptAtLeast(maxDocsPerGroup);\n      if (!Boolean.TRUE.equals(gak)) {\n        return gak;\n      }\n    }\n    return gak;\n  }\n  ...\n}\n\n\n\nI think something like this should work, what do you think? "
        },
        {
            "id": "comment-15336179",
            "author": "Michael McCandless",
            "date": "2016-06-17T14:11:41+0000",
            "content": "It's a little spooky we need to make so many API changes to so many collectors ... can we maybe instead just have a custom collector that knows how to early terminate specifically for grouping collectors? "
        }
    ]
}