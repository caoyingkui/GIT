{
    "id": "LUCENE-5079",
    "title": "allow IndexWriter user to tell if there are uncommitted changes.",
    "details": {
        "components": [],
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "IndexWriter already currently tracks if there are uncommitted changes.  We should expose this somehow... perhaps a boolean hasUncommittedChanges()?",
    "attachments": {
        "LUCENE-5079.patch": "https://issues.apache.org/jira/secure/attachment/12589766/LUCENE-5079.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-06-26T16:09:00+0000",
            "content": "Simple patch adding IndexWriter.hasUncommittedChanges() ",
            "author": "Yonik Seeley",
            "id": "comment-13694046"
        },
        {
            "date": "2013-06-26T16:18:04+0000",
            "content": "+1\n\nI think the test case comment \"// this will be true because a commit will create a new segment\" should instead say \"// this will be true because a commit will create an empty index\"? ",
            "author": "Michael McCandless",
            "id": "comment-13694052"
        },
        {
            "date": "2013-06-26T16:28:41+0000",
            "content": "Do we need synchonization here? - I have not looked at the code, just want to be sure! ",
            "author": "Uwe Schindler",
            "id": "comment-13694056"
        },
        {
            "date": "2013-06-26T17:09:38+0000",
            "content": "Do we need synchonization here?\n\nPerhaps just for the fact that the JMM doesn't guarantee we see the non-volatile long atomically?\nWe could just make lastCommitChangeCount volatile I guess...\n\nedit: Actually, it depends on the exact semantics we're looking for.  I guess I'll go with synchronized(this) for now for the greater safety. ",
            "author": "Yonik Seeley",
            "id": "comment-13694092"
        },
        {
            "date": "2013-06-26T17:26:45+0000",
            "content": "edit: Actually, it depends on the exact semantics we're looking for. I guess I'll go with synchronized(this) for now for the greater safety.\n\nThat is the only correct way to do it! lastCommitChangeCount is always guarded by synchronized(this) in the whole code. Any synchronization in this method is unlikely to be a bottleneck, as you won\u00c4t call this method all the time  ",
            "author": "Uwe Schindler",
            "id": "comment-13694100"
        },
        {
            "date": "2013-06-26T17:32:54+0000",
            "content": "Alternatively you can make the whole method synchronized. sync(this) is just more explicit and goes in line with the other uses of lastCommitChangeCount ",
            "author": "Uwe Schindler",
            "id": "comment-13694103"
        },
        {
            "date": "2013-06-26T17:42:07+0000",
            "content": "Actually, I'm leaning again toward a fast version since it might be nice to have on a GUI display and it's not clear how long IW may spend holding the lock on this.\n\nAfter further code review, using a volatile seems safe. ",
            "author": "Yonik Seeley",
            "id": "comment-13694108"
        },
        {
            "date": "2013-06-26T17:45:46+0000",
            "content": "Any synchronization in this method is unlikely to be a bottleneck\n\nIt's unclear to me if there is any IO that goes on with the lock on \"this\" held... ",
            "author": "Yonik Seeley",
            "id": "comment-13694113"
        },
        {
            "date": "2013-06-26T17:57:35+0000",
            "content": "I think volatile is best ... there is IO that happens when \"this\" is locked, e.g. when applying deletes. ",
            "author": "Michael McCandless",
            "id": "comment-13694123"
        },
        {
            "date": "2013-07-23T18:37:03+0000",
            "content": "Bulk close resolved 4.4 issues ",
            "author": "Steve Rowe",
            "id": "comment-13716731"
        }
    ]
}