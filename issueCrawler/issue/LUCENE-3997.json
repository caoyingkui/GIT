{
    "id": "LUCENE-3997",
    "title": "join module should not depend on grouping module",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I think TopGroups/GroupDocs should simply be in core? \n\nBoth grouping and join modules use these trivial classes, but join depends on grouping just for them.\n\nI think its better that we try to minimize these inter-module dependencies.\nOf course, another option is to combine grouping and join into one module, but\nlast time i brought that up nobody could agree on a name. \n\nAnyway I think the change is pretty clean: its similar to having basic stuff like Analyzer.java in core,\nso other things can work with Analyzer without depending on any specific implementing modules.",
    "attachments": {
        "LUCENE-3997.patch": "https://issues.apache.org/jira/secure/attachment/12523194/LUCENE-3997.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-18T14:01:31+0000",
            "content": "Patch, after:\n\nsvn mv lucene/grouping/src/java/org/apache/lucene/search/grouping/TopGroups.java lucene/core/src/java/org/apache/lucene/search\n\nsvn mv lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupDocs.java lucene/core/src/java/org/apache/lucene/search\n\n ",
            "author": "Robert Muir",
            "id": "comment-13256573"
        },
        {
            "date": "2012-04-18T14:02:33+0000",
            "content": "Patch, after:\n\nsvn mv lucene/grouping/src/java/org/apache/lucene/search/grouping/TopGroups.java lucene/core/src/java/org/apache/lucene/search\n\nsvn mv lucene/grouping/src/java/org/apache/lucene/search/grouping/GroupDocs.java lucene/core/src/java/org/apache/lucene/search\n\n ",
            "author": "Robert Muir",
            "id": "comment-13256575"
        },
        {
            "date": "2012-04-18T14:03:05+0000",
            "content": "Sorry for the duplicate upload... jira was going nutso on me ",
            "author": "Robert Muir",
            "id": "comment-13256577"
        },
        {
            "date": "2012-04-18T17:40:13+0000",
            "content": "+1! Good idea. Maybe we can move FunctionValues and ValueSource from the queries modules to core? Then grouping module doesn't have to depend on the queries module. ",
            "author": "Martijn van Groningen",
            "id": "comment-13256740"
        },
        {
            "date": "2012-04-18T17:45:52+0000",
            "content": "\nMaybe we can move FunctionValues and ValueSource from the queries modules to core? Then grouping module doesn't have to depend on the queries module.\n\n+1 (I didn't even think of that or investigate it yet though, but at a glance it looks like the right thing to do). ",
            "author": "Robert Muir",
            "id": "comment-13256744"
        },
        {
            "date": "2012-04-18T18:07:49+0000",
            "content": "I think that if you try to make no modules depend on other modules, you'll end up just pulling pretty much everything into core.\n\nAlso, the function query stuff is supposed to be marked as experimental - the notice only got added to FunctionQuery (I think?), so it should be applied to FunctionValues and ValueSource if they are moved to core. ",
            "author": "Yonik Seeley",
            "id": "comment-13256765"
        },
        {
            "date": "2012-04-18T18:13:40+0000",
            "content": "\nI think that if you try to make no modules depend on other modules, you'll end up just pulling pretty much everything into core.\n\nI don't think we should pull everything into core, but if we pull in the simple abstract APIs we can \nhave a more pluggable API: just like the abstract Analyzer api is in core, which Highlighter uses,\nbut you can highlight UIMA or Japanese or ICU or whatever analyzers this way...\n ",
            "author": "Robert Muir",
            "id": "comment-13256772"
        },
        {
            "date": "2012-04-18T20:39:30+0000",
            "content": "I also think we can move these classes to core. These are small classes and we can mark these classes as experimental.   \n\nMaybe we can even make this classes 'lighter' by only moving the public methods to core (maybe as interface?). E.g. ValueSource would have all the public methods in core and a BaseValueSource (Or AbstractValueSource) in the queries module that contains ValueSourceComparatorSource and ValueSourceComparator. Just an idea.\n\nI'll create a new issue to not make grouping module depend on the queries module. ",
            "author": "Martijn van Groningen",
            "id": "comment-13256931"
        },
        {
            "date": "2012-04-19T03:23:48+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13257191"
        },
        {
            "date": "2012-04-20T00:34:51+0000",
            "content": "I do echo Yonik's concern here, I don't think we should prevent inter-module dependencies.  I think if we move something to lucene/core, it should be because we think its a core API/concept, not just because its used by multiple modules.  Analyzer fits into that category, it belongs in core because it is a core concept.  \n\nDo we feel the same about TopGroups and GroupDocs? I kind of think we do.  But we should move them for that reason, not just to remove the dependency. ",
            "author": "Chris Male",
            "id": "comment-13257942"
        },
        {
            "date": "2012-04-20T00:40:38+0000",
            "content": "\nOf course, another option is to combine grouping and join into one module, but\nlast time i brought that up nobody could agree on a name.\n\nIf that is the better option, lets do that.  The name seems less important at this stage, we can call it grouping-join if needs be. ",
            "author": "Chris Male",
            "id": "comment-13257948"
        },
        {
            "date": "2012-04-21T09:49:23+0000",
            "content": "The reason that joining and grouping are different modules is that these are different functionalities. However these functionalities do overlap a bit with each other. Both joining and grouping can be used for a parent child like search. I'm not sure what would be a good option. Joining does use grouping's TopGroups and GroupDocs... If we are going to have a combined module maybe we should name it relational module or parent child module? ",
            "author": "Martijn van Groningen",
            "id": "comment-13258822"
        },
        {
            "date": "2012-04-22T12:20:12+0000",
            "content": "I don't think we should combine the two modules.\n\nWhile they do share a couple classes (to represent a 'grouped' result), the two functions (joining and grouping) are really orthogonal: you can join w/o doing grouping, and you can group w/o doing joining.\n\nI think we should move TopGroups/GroupDocs to core. ",
            "author": "Michael McCandless",
            "id": "comment-13259074"
        },
        {
            "date": "2012-04-22T12:33:34+0000",
            "content": "To me they seem to share a lot of similarities and the fact they both use the 'grouped' result notion is an illustration of that.  \n\nWhile a group could consist of Documents with any kind of relationship, that kind of a relationship could be parent-child.  The nature of the relationship and what the result should consist of (if its a parent-child relationship, should the 'grouped' result be parent and children, just children or just the parent) seem to be what dictates the implementations used.  \n\nI feel that having them as a single module would allow us to build some APIs which focus on user land concepts and perhaps hide some of the implementation details and differences in the joining and grouping algorithms. ",
            "author": "Chris Male",
            "id": "comment-13259075"
        },
        {
            "date": "2012-09-14T16:16:18+0000",
            "content": "I propose, instead of using lucene-core as the location for code used by multiple modules, that we create a (single) new module that serves this purpose, something like lucene-shared or lucene-common (though common analyzers already use this name...).\n\nThat way the number of inter-module dependencies is limited, and lucene-core doesn't get roped into the act. ",
            "author": "Steve Rowe",
            "id": "comment-13455896"
        },
        {
            "date": "2012-09-17T08:38:57+0000",
            "content": "Steven, I think this is a good idea for the reasons you mentioned. I think the new shared module should be named 'parent-child'. This name describes the overlapping functionality both existing modules have.\n\nDirectory layout:\n\n-- lucene\n|\n|--- parent-child\n|         |\n|         |--- grouping\n|         |\n|         |--- join\n|\n|--- ...\n\n           ",
            "author": "Martijn van Groningen",
            "id": "comment-13456882"
        },
        {
            "date": "2012-09-17T08:54:58+0000",
            "content": "I propose, instead of using lucene-core as the location for code used by multiple modules, that we create a (single) new module that serves this purpose, something like lucene-shared or lucene-common (though common analyzers already use this name...)\n\nI actually created lucene-common that when I first refactored out the FunctionQuery codebase.  After some time it was decided (in an issue I can't remember) that the code would go into lucene-core.  I agree with your assessment that we shouldn't use lucene-core as a dumping ground, but we should get a discussion about this going. ",
            "author": "Chris Male",
            "id": "comment-13456892"
        },
        {
            "date": "2012-09-17T12:01:36+0000",
            "content": "Can we please not add more modules here. I'm against that, this is crazy: its only a few classes in question already. it doesnt need 3 modules...\n\nthe purpose of this issue was to help simplify modules and dependencies, not make it worse. ",
            "author": "Robert Muir",
            "id": "comment-13456954"
        },
        {
            "date": "2012-09-17T12:33:53+0000",
            "content": "I think moving TopGroups/GroupDocs to core is fine.  Pragmatism over purity. ",
            "author": "Michael McCandless",
            "id": "comment-13456966"
        },
        {
            "date": "2013-07-23T18:44:53+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717089"
        },
        {
            "date": "2014-04-16T12:54:25+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970747"
        }
    ]
}