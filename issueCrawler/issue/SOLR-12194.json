{
    "id": "SOLR-12194",
    "title": "Deprecate SolrRequest#setBasicAuthCredentials",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "We should deprecate these methods in SolrRequest:\n\n  public SolrRequest setBasicAuthCredentials(String user, String password)\n  public String getBasicAuthPassword()\n  public String getBasicAuthUser()\n\n\n\nThe only way forward will be using the ClientBuilderFactory.\n\nFor 7.4 we should deprecate these, and for 8.0 (master) remove them. First we need to migrate some tests etc that uses the old methods.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-04-06T16:47:56+0000",
            "content": "1. I'm a little concerned that this API change makes basic-auth setup (a pretty commonly used SolrClient feature) more arcane than it needs to be for users.  Say what you want about the warts surrounding set/getBasicAuth* but at least the methods are easy for novice users to discover and use.  Maybe I'm missing some easy way to set up auth and debug it at runtime without these getters/setters though.\n\n2. If we're building basic-auth on top of HttpClientBuilderFactory, does it make sense to remove the lucene.experimental designation on that interface? ",
            "author": "Jason Gerlowski",
            "id": "comment-16428579"
        },
        {
            "date": "2018-04-06T16:51:03+0000",
            "content": "the only way forward will be using the ClientBuilderFactory.\n\nI thought the entire point of being able to specify credentials on the requests was so you could have a client application that used a single client, but specified different credentials as needed based on use case \u2013 ex: pass through credentials from the upstream user? ",
            "author": "Hoss Man",
            "id": "comment-16428586"
        },
        {
            "date": "2018-04-08T15:20:51+0000",
            "content": "I'm a little concerned that this API change makes basic-auth setup (a pretty commonly used SolrClient feature) more arcane than it needs to be for users.\nI agree that it is much simpler to set username and password on the request than to setup a builder.\u00a0But the current implementation has proven to be buggy and difficult to keep up to date, since every possible client request someone adds or updates in the future needs to remember to include special basic auth handling.\nI thought the entire point of being able to specify credentials on the requests was so you could have a client application that used a single client, but specified different credentials as needed based on use case \u2013 ex: pass through credentials from the upstream user?\nSure, that's the main benefit, but I have a feeling that majority\u00a0of apps\u00a0authenticate the\u00a0app with Solr, not individual end users\u00a0per request? For that case it is easier to use the builder, and they already can.\n\nQuestion: If a SolrJ application authenticate/login users with basic auth and the application then does a Solr search on behalf of that user, there should be no reason for Solr to re-authenticate the end user? What you need is a way to pass a pre-authenticated userId down to Solr?\n\nAnother question is why Basic Auth should be hardcoded\u00a0in our clients and requests\u00a0when other (more modern and secure) authentication mechanisms are not present, other than through plugins? A way to improve\u00a0this could be for SolrRequest to store a set of generic HTTPHeaders instead of basicAuthUser/Pass. We could provide static utility methods to add header for BasicAuth as well as other kind of headers. This would be on a per-request and not per-client basis. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16429787"
        },
        {
            "date": "2018-04-10T12:56:24+0000",
            "content": "Or is there a better way we could support any auth scheme on a per-request basis through being able to e.g. request.setCredentialsProvider(provider) where Solr will check the request for a provider and use that\u00a0instead of\u00a0the one configured through the client builder? Have not checked the APIs in detail but is the principle worth discussing? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16432211"
        },
        {
            "date": "2018-06-01T09:33:13+0000",
            "content": "Hoss Man\u00a0& Jason Gerlowski -\u00a0any further comments? In particular the idea of storing HTTPHeaders on SolrRequest instead of basicUser and basicPass? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16497780"
        },
        {
            "date": "2018-06-01T11:40:15+0000",
            "content": "A way to improve this could be for SolrRequest to store a set of generic HTTPHeaders instead of basicAuthUser/Pass.  We could provide status utility methods to add header for BasicAuth as well as other kinds of headers.\n\nThat goes a long way towards my addressing concerns about keeping the API intuitive for novice users, especially if a setBasicAuthCredentials sugar method is retained on SolrRequest.  It also seems to address Hoss's concerns about sharing a SolrClient across many users, at least as I understand them.  I'll let him speak to that himself though. ",
            "author": "Jason Gerlowski",
            "id": "comment-16497876"
        },
        {
            "date": "2018-06-11T16:19:28+0000",
            "content": "to clarify: i've never had strong opinions about this, my comments before were just to seek clarity on whether this was really moving in the ideal direction since it seemed the reverse of one of the intended usecases ... but i don't have enough practical experience to know if that even matters \u2013 just wanted to make sure it was considered.\n\nsince you pinged me though: my only new half thought out comments/questions are wether these changes may complicate some of the work miller is doing (or has alluded to working on in personal branch i haven't seen) to \"modernize\" the solr client APIs to allow HTTP/2 and true async stuff ... ie: is exposing an ability to set arbitrary headers going to be problematic for that? can/should we ensure/enforce they are \"request level\" headers and prevent \"connection level\" headers? (i honestly don't even know which category authorization headers fall into ...  ",
            "author": "Hoss Man",
            "id": "comment-16508288"
        },
        {
            "date": "2018-09-03T22:14:15+0000",
            "content": "Won't do this as the per-request credentials usecase is important. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16602461"
        }
    ]
}