{
    "id": "SOLR-7427",
    "title": "Recovery can miss some updates when they're neither forwarded nor present in replicated index",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.10.4,                                            5.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "According to discussion in SOLR-7141. See Yonik Seeley's comment at https://issues.apache.org/jira/browse/SOLR-7141?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=14501622#comment-14501622\n\n\nFrom memory, here's how it's supposed to work:\n1. replica tells leader it want's to recover\n2. leader starts forwarding updates to replica (which the replica buffers since it's in recovery)\n3. leader executes a hard commit (so replica can replicate the current index)\n4. replica starts replicating index from the last leader commit point\n\nNote that the ordering of #2 and #3 is very important.  If we did #3 first and then #2 after, some updates won't make it into the commit and also won't be forwarded to the replica (and that leads to data loss).\n\nNow the issue: even though we do #2 first and #3 after... it's possible to have an unfortunately scheduled update in a different thread that started before we did #2, and doesn't complete until after #3, so that update was not forwarded, and it's also not in the replicated index.  The sleep (which should be between steps #2 and #3) is to try and give time for this update to complete and make it into the index.\n\nIt occurs to me that the lucene IndexWriter thread stealing (same issue that caused this: SOLR-6820) could make this much more likely than we would have thought.\n\nOne possible alternative is to block updates for a commit of this type (replication commit).  Any blocked updates would need to see that they need to be forwarded to the replica too (once they are unblocked) - I don't know if the code is currently written that way.\n\nSo there is some protection against such a situation but it is based on two timeout values:\n\n\tThe replica stalls recovery until the leader acknowledges that it has indeed seen the replica in 'recovery' (via the prep recovery core admin API)\n\tThe replica sleeps for 7 seconds by default (configured via the hidden-switch \"solr.cloud.wait-for-updates-with-stale-state-pause\" system property) after prep recovery completes to give additional time for such updates to complete.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-25T14:24:02+0000",
            "author": "Mano Kovacs",
            "content": "We bumped into this issue recently with test timeouts and I understand the workaround is to wait 7 seconds before submit commit command. \nIf I understand it correctly, the reason for this wait is to avoid updates starting before the forwarding, but ending after the commit. As far as I understand, those updates will not yet be forwarded to recovering replica, but will be written into the next open segment, created after the hard commit, therefore, won't be replicated with the full replication.\n\nIf that is the case, I am wondering, would a custom commit command help? Assuming that this delayed-commit would wait until each update (that was already started at the time of the command) is written out, before writing.\nWhat I am thinking of is based on Yonik Seeley's flow described above:\n1. replica tells leader it want's to recover\n2. leader starts forwarding updates to replica (which the replica buffers since it's in recovery)\n3. delayed-commit command\n3.1 the leader collects somehow the already running updates and blocks until each ends (newer updates are disregarded, though)\n3.2 leader executes a hard commit (so replica can replicate the current index)\n4. replica starts replicating index from the last leader commit point\n\nMark Miller, Yonik Seeley, could you help me verify this? ",
            "id": "comment-15982947"
        },
        {
            "date": "2017-04-25T14:45:38+0000",
            "author": "Yonik Seeley",
            "content": "Yes you need a step 2.5...\nafter the leader starts forwarding updates, and if it's guaranteed that any \"new\" updates will be forwarded to the recovering replica, then grab a list of the current updates in-flight.  Then one could wait until all those updates to make it into the index before doing the hard commit.\n\nWe don't currently have a mechanism for knowing all those in-flight updates though.  To make it concurrent and air-tight, an update would need to be added to that list before any check to see if it should be forwarded.  And we would need guarantees that all updates after a certain point would be forwarded. ",
            "id": "comment-15982983"
        },
        {
            "date": "2017-04-25T23:00:43+0000",
            "author": "Mark Miller",
            "content": "The replica sleeps for 7 seconds by default \n\nI've always really hated this. I really would love something that is fool proof. I'll read and respond more later if I have anything to add. Sick and slow thinking today. ",
            "id": "comment-15983786"
        }
    ]
}