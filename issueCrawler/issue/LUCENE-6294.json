{
    "id": "LUCENE-6294",
    "title": "Generalize how IndexSearcher parallelizes collection execution",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "priority": "Trivial",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "IndexSearcher takes an ExecutorService that can be used to parallelize collection execution. This is useful if you want to trade throughput for latency.\n\nHowever, this executor service will only be used if you search for top docs. In that case, we will create one collector per slide and call TopDocs.merge in the end. If you use search(Query, Collector), the executor service will never be used.\n\nBut there are other collectors that could work the same way as top docs collectors, eg. TotalHitCountCollector. And maybe also some of our users' collectors. So maybe IndexSearcher could expose a generic way to take advantage of the executor service?",
    "attachments": {
        "LUCENE-6294.patch": "https://issues.apache.org/jira/secure/attachment/12700749/LUCENE-6294.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14336446",
            "author": "Adrien Grand",
            "date": "2015-02-25T12:48:07+0000",
            "content": "Here is a patch that demonstrates the idea. This does not change any API on Collector since not all collectors could work this way, but adds a CollectorManager object which can create collectors and merge them. I cut over top docs collection to this new API and also added IndexSearcher.count to exercise it. "
        },
        {
            "id": "comment-14337863",
            "author": "David Smiley",
            "date": "2015-02-26T04:44:43+0000",
            "content": "I didn't look it over in great detail but I like it.  At first I was hoping that there might be a Collector subclass to declare it's parallel-izability with the reduce method but then realized it wouldn't look good since the factory method to create itself wouldn't feel right. "
        },
        {
            "id": "comment-14339304",
            "author": "Adrien Grand",
            "date": "2015-02-26T22:22:19+0000",
            "content": "Thanks for the feedback David! "
        },
        {
            "id": "comment-14339943",
            "author": "Michael McCandless",
            "date": "2015-02-27T09:43:14+0000",
            "content": "+1, I like this approach. "
        },
        {
            "id": "comment-14340345",
            "author": "Ryan Ernst",
            "date": "2015-02-27T16:23:34+0000",
            "content": "+1\n\nIn the javadocs for IndexSearcher.search I think you mean \"In contrast to\" instead of \"On the contrary to\"? "
        },
        {
            "id": "comment-14340376",
            "author": "ASF subversion and git services",
            "date": "2015-02-27T17:06:10+0000",
            "content": "Commit 1662751 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1662751 ]\n\nLUCENE-6294: Generalize how IndexSearcher parallelizes collection execution. "
        },
        {
            "id": "comment-14340434",
            "author": "Adrien Grand",
            "date": "2015-02-27T17:38:12+0000",
            "content": "Thanks David, Mike and Ryan for the reviews! "
        },
        {
            "id": "comment-14340439",
            "author": "ASF subversion and git services",
            "date": "2015-02-27T17:40:03+0000",
            "content": "Commit 1662761 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1662761 ]\n\nLUCENE-6294: Generalize how IndexSearcher parallelizes collection execution. "
        },
        {
            "id": "comment-14340544",
            "author": "Shikhar Bhushan",
            "date": "2015-02-27T18:42:51+0000",
            "content": "This is great. I saw some improvements when testing LUCENE-5299 with the addition of a configurable parallelism throttle at the search request level using a semaphore, that might be useful to have here too. I.e. being able to cap how many segments are concurrently searched. That can help ensure resources for concurrent search requests, or reduce context switching if using an unbounded pool. "
        },
        {
            "id": "comment-14340598",
            "author": "Adrien Grand",
            "date": "2015-02-27T18:56:16+0000",
            "content": "I think a better approach than the semaphore would be to just cap the number of slices of your searcher (see IndexSearcher.slices). "
        },
        {
            "id": "comment-14340640",
            "author": "Shikhar Bhushan",
            "date": "2015-02-27T19:13:15+0000",
            "content": "Makes sense! Seems to be already customizable by overriding that method. "
        },
        {
            "id": "comment-14340661",
            "author": "Shikhar Bhushan",
            "date": "2015-02-27T19:25:09+0000",
            "content": "When slicing differently than segment-per-slice, it'd probably be desirable to distribute segments by size across the slices, rather than all large segments ending up in one slice to be searched sequentially. "
        },
        {
            "id": "comment-14495314",
            "author": "Timothy Potter",
            "date": "2015-04-15T00:30:34+0000",
            "content": "Bulk close after 5.1 release "
        }
    ]
}