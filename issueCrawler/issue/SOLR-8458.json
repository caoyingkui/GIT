{
    "id": "SOLR-8458",
    "title": "Add Streaming Expressions tests for parameter substitution",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Implemented",
        "priority": "Minor"
    },
    "description": "This ticket is to add Streaming Expression tests that exercise the existing macro expansion feature described here:  http://yonik.com/solr-query-parameter-substitution/\n\nSample syntax below:\n\nhttp://localhost:8983/col/stream?expr=merge(${left}, ${right}, ...)&left=search(...)&right=search(...)",
    "attachments": {
        "SOLR-8458.patch": "https://issues.apache.org/jira/secure/attachment/12779602/SOLR-8458.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-28T03:06:10+0000",
            "author": "Cao Manh Dat",
            "content": "Here are patch for this issue. I avoid using nested vars (it may lead to recursive call). ",
            "id": "comment-15072369"
        },
        {
            "date": "2015-12-28T03:49:40+0000",
            "author": "Dennis Gove",
            "content": "What if we were to make substitution parameters first class citizens similar to named parameters? During the parsing in ExpressionParser we could create instances of StreamExpressionSubstitutionParameters which exist as first class citizens of an StreamExpression object. This would allow us to send (in the example in the description) \"expr\", \"left\", and \"right\" through the ExpressionParser. Then, a simple method can be added to the StreamFactory which accepts a main expression and a map of names => expressions. It could then iterate over parameters of the main expression doing replacements until there are no more instances of StreamExpressionSubstitutionParameter in the main expression. Some checks for infinite loops would have to be added but those are relatively simple. \n\nThis approach would allow the logic to exist outside of the StreamHandler which I think would be beneficial for the SQL Handler. \n\nIt might also allow for some type of prepared statements with \"pre-compiled\" pieces (similar to what one might see in a DBMS). For example, this might be beneficial in a situation where some very expensive part of the expression is static which you want to perform different rollups or joins or whatever with. An optimizer could hang onto the static results in a RepeatableStream (doesn't exist yet) and substitute that into some other expression. ",
            "id": "comment-15072395"
        },
        {
            "date": "2015-12-28T04:09:35+0000",
            "author": "Cao Manh Dat",
            "content": "It quite a good idea. But I also confuse about the syntax of substitution in Streaming Expressions ",
            "id": "comment-15072398"
        },
        {
            "date": "2015-12-28T14:31:49+0000",
            "author": "Joel Bernstein",
            "content": "I'm fine either as a pre-processing step or including the substitution as part of the parsing.\n\nIf we stick with the pre-processing step I think we'll need to process the nested vars. One approach to this would be to continue looping over the expression string and call the substitution method on each loop until there are no more $vars.  ",
            "id": "comment-15072754"
        },
        {
            "date": "2015-12-28T14:40:17+0000",
            "author": "Joel Bernstein",
            "content": "Dennis Gove, you have good ideas here though. +1 if you want to take this on. ",
            "id": "comment-15072763"
        },
        {
            "date": "2015-12-28T14:44:07+0000",
            "author": "Cao Manh Dat",
            "content": "That a good idea. \nAbout substitution as part of the  parsing. Should the syntax look like?\nWe cant use & key words here\nmerge($left, $right, ...)&left=search(...)&right=search(...) ",
            "id": "comment-15072767"
        },
        {
            "date": "2015-12-28T15:25:42+0000",
            "author": "Dennis Gove",
            "content": "As I see it there are 2 pieces here, both related but separate.\n\nFirst, adding support for parameter substitution in an expression. This would be handled with the changes I discussed above to StreamFactory, StreamParser, and the addition of a new type StreamExpressionSubstitutionParameter. Note that this doesn't necessarily care how the expressions come in.\n\nAnd second, adding support for parameter substitution in StreamHandler and in an http request. I like the syntax Joel uses in the description. What this would mean is that StreamHandler would see http params like \"expr\", \"left\" and \"right\", would know that these are expressions (can call into StreamFactory to check if something is a valid expression), and would pass them off independently to be parsed and then together to be pieced together. \n\nThis approach modularizes the implementation such that how an expression with substitution comes in via http is independent to how it is handled within the Streaming API. \n\nFor example, the following comes into StreamHandler\n\nhttp://localhost:8983/col/stream?expr=merge($left, $right, ...)&baz=jaz&left=search(...)&right=search(...)&foo=bar\n\n\n\nThe StreamHandler will see five parameters, expr, baz, left, right, and foo. It would then determine that expr, left, and right are valid expressions and pass them off to be parsed into three expression objects. It would then pass all three into the factory to be combined into a single Stream object. The factory would then iterate (recursively?) until there aren't any more instances of a StreamExpressionSubstitutionParameter at any level (considering the possibility of infinite loops, of course). At this point it'd then just be passed off to create a Stream object as any other expression would be.\n\nAnother possibility would be to parse out the substitution expressions and then register them in the factory for use during Stream object creation. This would negate the need to do that pre-processing of the N substitution expression and would give a place to register \"pre-compiled\" expressions. I'm not a huge fan of this approach as it would add more state to the factory and I'm not a huge fan of the state it already contains.\n\nI'm happy to take this on unless, Cao Manh Dat, you want to continue your work on it. ",
            "id": "comment-15072812"
        },
        {
            "date": "2015-12-28T15:34:05+0000",
            "author": "Yonik Seeley",
            "content": "Regarding pre-processing (i.e. ignorant of syntax), Solr already has parameter substitution across entire query requests:\nhttp://yonik.com/solr-query-parameter-substitution/ ",
            "id": "comment-15072820"
        },
        {
            "date": "2015-12-28T16:00:30+0000",
            "author": "Joel Bernstein",
            "content": "Thanks for bringing this up. \n\nIn reading the blog post it sounds like we already have param substitution for streaming expression and just didn't know it. I didn't realize this functionality was so broad.\n\nSo, any parameter regardless of whether it's part of a local param will automatically have parameter substitutions applied? ",
            "id": "comment-15072848"
        },
        {
            "date": "2015-12-28T16:12:07+0000",
            "author": "Joel Bernstein",
            "content": "I like the syntax as well: \n\n\nhttp://localhost:8983/col/stream?expr=merge(${left}, ${right}, ...)&baz=jaz&left=search(...)&right=search(...)&foo=bar\n\n\n\nIf this is already working then we can change the ticket to Add Streaming Expressions tests for param substitution.\n\nDennis Gove, we can always decide to work on the pre-compiled expressions at a later time. But I think that will take quite a bit of thought.  ",
            "id": "comment-15072863"
        },
        {
            "date": "2015-12-28T16:13:59+0000",
            "author": "Joel Bernstein",
            "content": "Cao Manh Dat, would you like to work on a few test cases based on Yonik's blog?  http://yonik.com/solr-query-parameter-substitution/ ",
            "id": "comment-15072865"
        },
        {
            "date": "2015-12-28T16:17:59+0000",
            "author": "Dennis Gove",
            "content": "I agree. There's no reason to reinvent and I'm always a fan of keeping things consistent. If preprocessing substitution is already implemented for all incoming requests then we should absolutely make use of it. ",
            "id": "comment-15072871"
        },
        {
            "date": "2015-12-28T16:20:27+0000",
            "author": "Dennis Gove",
            "content": "This is great news. I'm all for continuing to make use of this feature. Thanks! ",
            "id": "comment-15072874"
        },
        {
            "date": "2015-12-28T16:20:33+0000",
            "author": "Yonik Seeley",
            "content": "Yeah, looks like it is already working:\n\nPutting this into my browser:\n\nhttp://localhost:8983/solr/techproducts/stream?expr=${foo}&foo=hello\n\n\n\nI get:\n\n{\"EXCEPTION\":\"'hello' is not a proper expression clause\",\"EOF\":true}]}}\n\n\n\nIf you try it with a GET in curl, just turn off curl's globbing:\n\ncurl  -g 'http://localhost:8983/solr/techproducts/stream?expr=${foo}&foo=hello'\n\n ",
            "id": "comment-15072875"
        },
        {
            "date": "2015-12-28T17:32:20+0000",
            "author": "Joel Bernstein",
            "content": "Ok, great.\n\nI'll change the ticket to Add Streaming Expression tests with param substitution. ",
            "id": "comment-15072936"
        },
        {
            "date": "2015-12-29T02:31:36+0000",
            "author": "Cao Manh Dat",
            "content": "Yes, I would like to help. \n\nCurrently, Streaming Expressions have quite compact syntax\nfuncName(param1|func1,param2|func2,..)\nSo what is the best way to add substitution parameter in Streaming Expression?\nShould it be?\nmerge($left, $right,...) with left=search(...), right=search(...) ",
            "id": "comment-15073387"
        },
        {
            "date": "2015-12-29T02:34:28+0000",
            "author": "Cao Manh Dat",
            "content": "Sure, I will work on this. ",
            "id": "comment-15073388"
        },
        {
            "date": "2015-12-29T02:35:50+0000",
            "author": "Dennis Gove",
            "content": "It appears from the thread below that substitution is already supported (see Yonik's comment below). At this point the action item would be to add streaming expression tests for parameter substitution. ",
            "id": "comment-15073389"
        },
        {
            "date": "2015-12-29T13:08:15+0000",
            "author": "Cao Manh Dat",
            "content": "Added random substitution for constructing tuple stream in StreamExpressionTest. ",
            "id": "comment-15073875"
        },
        {
            "date": "2015-12-29T13:26:59+0000",
            "author": "Dennis Gove",
            "content": "Cao,\n\nWhat's the purpose of ClientTupleStream? It appears it's only used in the tests and doesn't add any value as a Stream object.\n\nI'd rather not replace all existing stream creations with a randomized choice between doing substitution and not. I think it'd be better to have explicit tests which exercise substitution. I don't think it'd be necessary to test that substitution on each and every stream class because the implementation is outside of the stream classes. Also, it appears that the randomization of the choice is non-repeatable. Ie, if I rerun the tests with a -Dtests.seed value would the random choices be the same?\n\nIt appears that the substitution is just picking some substring in the expression and marking it as being a parameter. I think this should test substituting entire expression clauses, like \n\nhttp://localhost:8983/col/stream?expr=merge($left, $right, ...)&left=search(...)&right=search(...)\n\n\nwhere left and right are entire clauses. The tests you've provided appear to do something like this\n\nhttp://localhost:8983/col/stream?expr=merge(sear$left, se$right..), ...)&left=ch(...)&right=arch(.\n\n\nwhich I don't think makes much sense. Technically the substitution should handle that but I think the codification should be that one would want to substitute entire expressions. ",
            "id": "comment-15073898"
        },
        {
            "date": "2015-12-29T14:40:17+0000",
            "author": "Cao Manh Dat",
            "content": "\nWhat's the purpose of ClientTupleStream? It appears it's only used in the tests and doesn't add any value as a Stream object.\nI create the class to simplify the code in test class. Currently, we dont have any TupleStream which support passing SolrClient and SolrParams. in SolrStream, we pass in baseUrl and it always create HttpSolrClient (not CloudClient). In CloudSolrStream, we pass in ZKAdress and it always look up for fl & sort params...\n\n\nI don't think it'd be necessary to test that substitution on each and every stream class because the implementation is outside of the stream classes.\nI good point. I forgot that query parameter substitution already been tested in other class. We just wanna to show the guide here. I will write a testSubstituteStream method which code derive from testMergeStream() ",
            "id": "comment-15073961"
        },
        {
            "date": "2015-12-29T15:26:15+0000",
            "author": "Cao Manh Dat",
            "content": "New patch based on the suggestion from Dennis Gove ",
            "id": "comment-15073995"
        },
        {
            "date": "2016-01-04T08:31:23+0000",
            "author": "Cao Manh Dat",
            "content": "Dennis Gove Sorry for misunderstanding some aspects of streaming. It's quite compact and clean now. ",
            "id": "comment-15080828"
        },
        {
            "date": "2016-05-06T14:20:54+0000",
            "author": "Kevin Risden",
            "content": "Updated patch to master based on SOLR-9065. Running tests and precommit now. ",
            "id": "comment-15274091"
        },
        {
            "date": "2016-05-06T14:38:22+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 26027259a5fff5f8e7df1a927708f048ba92002f in lucene-solr's branch refs/heads/master from Kevin Risden\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2602725 ]\n\nSOLR-8458: Add Streaming Expressions tests for parameter substitution ",
            "id": "comment-15274129"
        },
        {
            "date": "2016-05-06T14:39:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 4d15b9fa080cb95465338ec773a972559de7ec3d in lucene-solr's branch refs/heads/branch_6x from Kevin Risden\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4d15b9f ]\n\nSOLR-8458: Add Streaming Expressions tests for parameter substitution ",
            "id": "comment-15274133"
        },
        {
            "date": "2016-05-09T21:54:33+0000",
            "author": "Hoss Man",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 ",
            "id": "comment-15277125"
        }
    ]
}