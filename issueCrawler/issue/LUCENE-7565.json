{
    "id": "LUCENE-7565",
    "title": "UnifiedHighlighter: add ability to delineate passes by max char size",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": []
    },
    "description": "The Highlighter and FastVectorHighlighter can be configured to delineate passages using a target character length, that is then typically adjusted for the word boundary.  This would be a good option to add to the UnifiedHighlighter (UH) in it's own right, as well as for better back-wards compatibility to those using this highlighter.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15674263",
            "date": "2016-11-17T17:13:12+0000",
            "content": "The UH solely breaks according to a java.text.BreakIterator.  Perhaps the most straight-forward way to do this is to add a new BreakIterator.  Other ways would probably require a larger refactoring, esp. considering how multi-valued fields are highlighted with SplittingBreakIterator.  The B.I. abstraction isn't great but it suffices for the highlighter, and it can suffice for this use-case provided this B.I. impl makes some assumptions as to how the UH calls it's methods.  A new BI could wrap a target BI (that BI would typically be a standard \"word\" impl but needn't be).  When bi.following(offset) is invoked (which is called by the UH at the start of the passage to find the end of the passage), it can examine the current position (the start) and consider the configured character target length and then use the underlying breakIterator, likely calling following() then previous().\n\nI was just thinking... an alternative way to think about delineating passages is by having the highlighted words not exceed X words in-between in a given passage.  That would be an interesting approach.  Quite separate from this issue though! ",
            "author": "David Smiley"
        }
    ]
}