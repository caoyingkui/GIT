{
    "id": "SOLR-7859",
    "title": "Clamp down on use of System.currentTimeMillis",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.4"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "We did one round of this in SOLR-5734, but more places seem to keep cropping up. We should do one more round, and start whitelisting places which really need it using forbidden-apis.",
    "attachments": {
        "SOLR-7859.patch": "https://issues.apache.org/jira/secure/attachment/12748590/SOLR-7859.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-04T02:32:39+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Attached is a patch to remove most occurrences in solr code (boy there are a few!) and SuppressForbidden where the usage is legitimate.\n\nThere are also a couple of cases where the usage is suspect, but I haven't got to it as yet. One is around stats, but the more worrying thing is that we use the wall time recorded as commit data on a commit to check if replication needs to be done. In IndexFetcher, there is this code:\n\n\n      if (!forceReplication && IndexDeletionPolicyWrapper.getCommitTimestamp(commit) == latestVersion) {\n        //master and slave are already in sync just return\n        LOG.info(\"Slave in sync with master.\");\n        successfulInstall = true;\n        return true;\n      }\n\n\n\nWe are checking wall times across machines to check if we are in sync? That sounds wrong.. Or I am mistaken here? Why can't we just check generations? Another place below checks both generations and timestamps to see if a full copy is needed..\n\n\n      // if the generation of master is older than that of the slave , it means they are not compatible to be copied\n      // then a new index directory to be created and all the files need to be copied\n      boolean isFullCopyNeeded = IndexDeletionPolicyWrapper\n          .getCommitTimestamp(commit) >= latestVersion\n          || commit.getGeneration() >= latestGeneration || forceReplication;\n\n ",
            "id": "comment-14652972"
        },
        {
            "date": "2015-08-04T11:48:24+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Updated patch, now fixes a few more places, removes use of core open timestamp for caching purposes in join queries in favour of nanoTime. ",
            "id": "comment-14653494"
        },
        {
            "date": "2015-08-08T13:25:51+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Latest version, I will commit this soon before this goes out of date as well.. ",
            "id": "comment-14662979"
        },
        {
            "date": "2015-08-08T13:40:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1694798 from Ramkumar Aiyengar in branch 'dev/trunk'\n[ https://svn.apache.org/r1694798 ]\n\nSOLR-7859: Clamp down on use of System.currentTimeMillis\n\n\n\tUse RTimer where currentTimeMillis is used for timing\n\tAbstract out a new class TimeOut for when currentTimeMillis/nanoTime\n   is used to timeout operations.\n\tUsed `new Date()` in some cases where that is the logical intent.\n\tDeprecated a couple of APIs which were publicly exposing epoch time,\n   in favour of Date objects to make the intent clearer.\n\tA couple of cases had currentTimeMillis in dead code.\n\tIn some cases where currentTimeMillis was used to just generate a name,\n   used nanoTime instead (really it should be some sequence/random number\n   in such a case).\n\tIn some other cases where stamps were used for SQL queries, HTTP headers,\n   comparing against data in external files, ZK etc., used SuppressForbidden.\n\tAlso currently allow the use of currentTimeMillis in commit data,\n   this is then used in replication \u2013 this is concerning since absolute\n   times are being compared, but that can be dealt with separately.\n\n ",
            "id": "comment-14662982"
        },
        {
            "date": "2015-08-09T13:15:21+0000",
            "author": "Erik Hatcher",
            "content": "This commit broke bin/post, which relies on SimplePostTool.  The issue is that RTimer refers to NamedList which isn't in the classpath used by the SimplePostTool startup:\n\n\n$ bin/post -c files ~/Documents\njava -classpath /Users/erikhatcher/dev/lucene-trunk/solr/dist/solr-core-6.0.0-SNAPSHOT.jar -Dauto=yes -Dc=files -Ddata=files -Drecursive=yes org.apache.solr.util.SimplePostTool /Users/erikhatcher/Documents/Lucidworks/\nSimplePostTool version 5.0.0\nException in thread \"main\" java.lang.NoClassDefFoundError: org/apache/solr/common/util/NamedList\n\tat org.apache.solr.util.SimplePostTool.execute(SimplePostTool.java:176)\n\tat org.apache.solr.util.SimplePostTool.main(SimplePostTool.java:167)\n\n\n\nThe best fix is probably to have bin/post also include the SolrJ library.\n\nAnd yes, there needs to be a test for bin/post - created SOLR-7901 for this task. ",
            "id": "comment-14679137"
        },
        {
            "date": "2015-08-09T13:22:21+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1694888 from Erik Hatcher in branch 'dev/trunk'\n[ https://svn.apache.org/r1694888 ]\n\nSOLR-7859: Fix bin/post to rely on SolrJ for RTimer use ",
            "id": "comment-14679139"
        },
        {
            "date": "2015-08-09T13:23:12+0000",
            "author": "Erik Hatcher",
            "content": "Fixed bin/post on trunk.  If this gets ported to 5x, don't forget the bin/post fix too. ",
            "id": "comment-14679140"
        },
        {
            "date": "2015-08-09T13:37:23+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Thanks Erik! ",
            "id": "comment-14679145"
        },
        {
            "date": "2015-08-09T15:52:32+0000",
            "author": "Uwe Schindler",
            "content": "But this fix still breaks post.jar if used alone. It is still often used, e.g. on windows. If you do java -jar post.jar, this fails now. We have no windows shell script at the moment.\n\nIn my opinion, we should make post.jar working on its own and also write a test for that. ",
            "id": "comment-14679184"
        },
        {
            "date": "2015-08-09T15:54:16+0000",
            "author": "Uwe Schindler",
            "content": "My personal suggestion/opinion is:\n\n\tlet SimplePostTool use System.currentTimeMillies\n\tadd @SuppressForbidden\nIt is very important to keep post.jar working standalone.\n\n ",
            "id": "comment-14679185"
        },
        {
            "date": "2015-08-09T16:00:19+0000",
            "author": "Erik Hatcher",
            "content": "Uwe Schindler oh, good points - I concur - let's switch it back to no dependencies on SimplePostTool for now.\n\nAnd maybe it's time to get Windows support... at least a very simple `bin/post.cmd` that just delegates to post.jar, allowing an \"interface\" to posting content that we can evolve in the future. ",
            "id": "comment-14679188"
        },
        {
            "date": "2015-08-09T21:04:58+0000",
            "author": "Ramkumar Aiyengar",
            "content": "let SimplePostTool use System.currentTimeMillies, add @SuppressForbidden\n\nYou can use nanoTime without RTimer anyway. But hold off in any case.. I am anyway making a change to RTimer to break the NamedList dependency, RTimer is now used in many more places, and the child timer functionality is used in only one place. ",
            "id": "comment-14679347"
        },
        {
            "date": "2015-08-09T21:46:14+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Created SOLR-7902 to split out RTimer. ",
            "id": "comment-14679363"
        },
        {
            "date": "2015-08-10T00:04:28+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Committed SOLR-7902. I haven't tried as yet, but we should be able to revert the bin/post change (without any reversion/changes to SimplePostTool, it can now use RTimer without additional deps). ",
            "id": "comment-14679415"
        },
        {
            "date": "2015-08-10T00:28:54+0000",
            "author": "Ramkumar Aiyengar",
            "content": "On second thought, I might still need to change the post.jar generation in solr/build.xml to include RTimer.class to satisfy Uwe's requirement. (If this is really a requirement, ideally SPT should move outside solr-core to a separate place where this requirement can be verified at compile time, though I find my build-system-fu lacking to do that..) ",
            "id": "comment-14679432"
        },
        {
            "date": "2015-08-10T18:04:57+0000",
            "author": "Uwe Schindler",
            "content": "(If this is really a requirement, ideally SPT should move outside solr-core to a separate place where this requirement can be verified at compile time, though I find my build-system-fu lacking to do that..\n\n+1 ",
            "id": "comment-14680469"
        },
        {
            "date": "2015-08-10T18:07:44+0000",
            "author": "Erik Hatcher",
            "content": "RTimer and SimplePostTool are both in solr-core JAR at least, so java -jar dist/solr-core...jar SimplePostTool...  will still do the trick. \n\nI think we just rollback the SPT changes per Uwe above and keep it simple.  post.jar is eventually going to go away and be replaced by a bin/post(.cmd) script that can take advantage of SolrCloud, etc and will be utilizing the full capabilities of Solr's indexing facilities; we can then rely on JAR dependencies. ",
            "id": "comment-14680474"
        },
        {
            "date": "2015-08-10T18:22:15+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Erik Hatcher, I have already committed the RTimer refactoring, so the SolrJ dep is no longer needed. The addition of RTimer to post.jar is a one line fix, which I will soon add, so no reversion should be necessary (would be simpler than that really). I have raised SOLR-7910 for the modularization, that applies even if post.cmd is created, as we can't assume that all the dependencies of solr-core are available to use. ",
            "id": "comment-14680499"
        },
        {
            "date": "2015-08-10T18:50:41+0000",
            "author": "Erik Hatcher",
            "content": "+1\n\nIf you need any help or want me to tackle it say the word.  It looks like it'd be as easy as adding RTimer (and any other classes) to build.xml:\n\n\n    <jar destfile=\"${example}/exampledocs/post.jar\"\n         basedir=\"${dest}/solr-core/classes/java\"\n         includes=\"org/apache/solr/util/SimplePostTool*.class\">\n\n\nadjusting includes to add \",org/apache/solr/util/RTimer*.class\" ",
            "id": "comment-14680548"
        },
        {
            "date": "2015-08-10T21:46:53+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1695173 from Ramkumar Aiyengar in branch 'dev/trunk'\n[ https://svn.apache.org/r1695173 ]\n\nSOLR-7859: Add RTimer classes to post.jar ",
            "id": "comment-14680821"
        },
        {
            "date": "2015-08-10T21:53:43+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1695175 from Ramkumar Aiyengar in branch 'dev/trunk'\n[ https://svn.apache.org/r1695175 ]\n\nSOLR-7859: Revert r1694888 to add SolrJ to the path for bin/post, should not be needed any longer ",
            "id": "comment-14680835"
        },
        {
            "date": "2015-08-10T21:57:25+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Thanks for the offer Erik. This commit should hopefully address Uwe's post.jar concern. I have also now reverted your bin/post commit as it should not be needed any longer (and per my smoke test with the tool), but let me know if you see otherwise.. ",
            "id": "comment-14680841"
        },
        {
            "date": "2015-08-15T11:10:26+0000",
            "author": "Ramkumar Aiyengar",
            "content": "There are also a couple of cases where the usage is suspect, but I haven't got to it as yet. One is around stats, but the more worrying thing is that we use the wall time recorded as commit data on a commit to check if replication needs to be done. In IndexFetcher, there is this code:\n\nI have raised SOLR-7932 for this.. ",
            "id": "comment-14698232"
        },
        {
            "date": "2015-08-15T11:28:09+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1696037 from Ramkumar Aiyengar in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1696037 ]\n\nSOLR-7859: Clamp down on use of System.currentTimeMillis\n\nMerges r1694798, r1695173 from trunk\n\n\n\tUse RTimer where currentTimeMillis is used for timing\n\tAbstract out a new class TimeOut for when currentTimeMillis/nanoTime\n   is used to timeout operations.\n\tUsed `new Date()` in some cases where that is the logical intent.\n\tDeprecated a couple of APIs which were publicly exposing epoch time,\n   in favour of Date objects to make the intent clearer.\n\tA couple of cases had currentTimeMillis in dead code.\n\tIn some cases where currentTimeMillis was used to just generate a name,\n   used nanoTime instead (really it should be some sequence/random number\n   in such a case).\n\tIn some other cases where stamps were used for SQL queries, HTTP headers,\n   comparing against data in external files, ZK etc., used SuppressForbidden.\n\tAlso currently allow the use of currentTimeMillis in commit data,\n   this is then used in replication \u2013 this is concerning since absolute\n   times are being compared, but that can be dealt with separately.\n\n ",
            "id": "comment-14698237"
        }
    ]
}