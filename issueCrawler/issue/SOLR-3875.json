{
    "id": "SOLR-3875",
    "title": "Document boost does not work correctly when using multi-valued fields",
    "details": {
        "affect_versions": "4.0-BETA",
        "status": "Closed",
        "fix_versions": [
            "4.0",
            "4.1",
            "6.0"
        ],
        "components": [
            "Schema and Analysis",
            "update"
        ],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In Solr 4 BETA & trunk, document boosts skews the ranking for documents with multi value fields tremendously. A document boost of 5 combined with 15 values in a multi value field results in scores above 1,000,000,000, while a boost of 0,5 results in scores below 0,001. The error is not present in Solr 3.6.\n\nThomas Egense and I have tracked it down to a change in Solr DocumentBuilder committed 20110827 (@1162347) by Mike McCandless, as part of work done on LUCENE-2308. The problem is that Lucene multiplies the boosts of multiple instances of the same field when updating the index.\n\nThe old DocumentBuilder, used in Lucene 3.6, handled this by calculating the score for the field (docBoost*fieldBoost) and assigning it to the first instance of the field, then setting the boost to 1.0f and assigning that to subsequent instances of the field. This effectively assigned docBoost*fieldBoost to the field, regardless of the number of instances.\n\nThe updated DocumentBuilder (see https://svn.apache.org/viewvc/lucene/dev/branches/lucene_solr_4_0/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java?revision=1388778&view=markup), used in Lucene 4 BETA & trunk, also assigns docBoost*fieldBoost to the first instance of the field. Then it sets fieldBoost = docBoost and continues to assign docBoost*fieldBoost to subsequent instances. Using the example mentioned above, the generated IndexableFields will get assigned boosts of 5, 5*5, 5*5... 5*5. As Lucene multiplies all the values, 15 instances of the same field will have a collective boost of 5*25^14.\n\nThis can be demonstrated with the Solr tutorial example by indexing the sample documents and adding the document \n\n<add>\n<doc boost=\"5\">\n  <field name=\"id\">Insane score Example. Score = 10E9 </field>\n  <field name=\"name\">Document boost broken for multivalued fields</field>\n  <field name=\"manu\">Thomas Egense and Toke Eskildsen</field>\n  <field name=\"manu_id_s\">Test</field>\n  <field name=\"cat\">bug</field>\n  <field name=\"features\">insane_boost</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>\n  <field name=\"features\">something else</field>  \n</doc>\n</add>\n\n\n\nThe manu & features-fields gets copied to text and a search for thomas matches the text-field with query explanation\n\n<str name=\"Insane score Example. Score = 10E10 \">\n2.44373361E10 = (MATCH) weight(text:thomas in 0) [DefaultSimilarity], result of:\n  2.44373361E10 = fieldWeight in 0, product of:\n    1.0 = tf(freq=1.0), with freq of:\n      1.0 = termFreq=1.0\n    3.2512918 = idf(docFreq=3, maxDocs=38)\n    7.5161928E9 = fieldNorm(doc=0)\n</str>\n\n\n\nThomas and I are too pressed for time to attempt a proper patch at the moment, but we guess that a reversion to the old algorithm of assigning the combined boost to the first instance and 1.0f to all subsequent instances would work?",
    "attachments": {
        "SOLR-3875.patch": "https://issues.apache.org/jira/secure/attachment/12546368/SOLR-3875.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13461850",
            "date": "2012-09-24T15:14:41+0000",
            "content": "Upgrading to Critical. I seldom use document boosts, but could be a showstopper for some people upgrading.\n\nIf a fix is not included, the release notes should mention it as a known bug and fix in next release. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13462075",
            "date": "2012-09-24T20:15:54+0000",
            "content": "patch with proposed test & fix ... i'm still running the full test sweet, but posting here for other folks to review early. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13462080",
            "date": "2012-09-24T20:18:33+0000",
            "content": "removing 4.0-beta from the fix version (we don't go back in time) and any affects versions that are in the future "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13462096",
            "date": "2012-09-24T20:39:41+0000",
            "content": "+1, fix looks good! "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13462105",
            "date": "2012-09-24T20:48:22+0000",
            "content": "patch with proposed test & fix \n\n+1\n\nI applied the patch, inspected the fix, inspected the test. It looks right to me.\n\nI also ran all tests, and verified the new test fails as expected without the fix. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13462115",
            "date": "2012-09-24T20:56:20+0000",
            "content": "Thanks Hoss, patch looks great! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13462191",
            "date": "2012-09-24T22:14:33+0000",
            "content": "ok ... planning to commit & backport for 4.0 respin (or 4.0.1), bear with me while i test on every branch "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13462199",
            "date": "2012-09-24T22:23:09+0000",
            "content": "Committed revision 1389628. - trunk "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13462210",
            "date": "2012-09-24T22:37:40+0000",
            "content": "Committed revision 1389636. -4x "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13462224",
            "date": "2012-09-24T22:50:04+0000",
            "content": "Is it possible we can improve tests somehow in this area? \n\nBoth Mike and I have been ensnared by this file recently and introduced sneaky bugs.\n\nAdditional tests showing we didnt introduce any regressions (especially with the crazy field types) would make me very happy.\nAdditional tests that just make this less fragile would be very good for the future. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13462243",
            "date": "2012-09-24T23:16:16+0000",
            "content": "Committed revision 1389648. - 4.0 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13462272",
            "date": "2012-09-24T23:54:40+0000",
            "content": "Is it possible we can improve tests somehow in this area? \n\nI'm open to suggestsion, but i've created SOLR-3885 to track it since we've already good a well vetted test for this specific problem commited and on track for a 4.0 respin.\n\nIf other good tests pop up in SOLR-3885 before 4.0 final then we can certainly commit them, but it's not an area i'm likely to be focusing much attention right now. "
        },
        {
            "author": "Thomas Egense",
            "id": "comment-13462568",
            "date": "2012-09-25T08:39:16+0000",
            "content": "Thank you for the fast response and fix! Great job. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13462661",
            "date": "2012-09-25T11:29:35+0000",
            "content": "Thanks Hoss. "
        },
        {
            "author": "Toke Eskildsen",
            "id": "comment-13482233",
            "date": "2012-10-23T09:43:07+0000",
            "content": "Unfortunately, the bug is only partly solved. Thomas and I encountered strange scores again. While boosting of multi-value fields is handled correctly in Solr 4.0.0, boosting for copyFields are not. A sample document:\n\n\n   <add><doc boost=\"10.0\">\n  <field name=\"id\">Insane score Example. Score = 10E9 </field>\n  <field name=\"name\">Document boost broken for copyFields</field>\n  <field name=\"manu\" >video ThomasEgense and Toke Eskildsen</field>\n  <field name=\"manu_id_s\">Test</field>\n  <field name=\"cat\">bug</field>\n  <field name=\"features\">something else</field>\n  <field name=\"keywords\">bug</field>\n  <field name=\"content\">bug</field>\n  </doc></add>\n\n\n\nThe fields name, manu, cat, features, keywords and content gets copied to text and a search for thomasegense matches the text-field with query explanation\n\n\n70384.67 = (MATCH) weight(text:thomasegense in 0) [DefaultSimilarity], result of:\n  70384.67 = fieldWeight in 0, product of:\n    1.0 = tf(freq=1.0), with freq of:\n      1.0 = termFreq=1.0\n    0.30685282 = idf(docFreq=1, maxDocs=1)\n    229376.0 = fieldNorm(doc=0)\n\n\n\nIf the two last fields keywords and content are removed from the sample document, the score is reduced by a factor 100 (docBoost^2).\n\nThe current DocumentBuilder https://svn.apache.org/viewvc/lucene/dev/branches/lucene_solr_4_0/solr/core/src/java/org/apache/solr/update/DocumentBuilder.java?revision=1389648&view=markup works roughly like this:\n\n\nforeach (field) {\n  boost = docBoost*fieldBoost\n  foreach (value) {\n    assignField(field, value, boost)\n    foreach (copyField) {\n      assignField(copyField, value, boost)\n    }\n    boost = 1f\n  }\n}\n\n\n\nWhen all fields share the same copyField (text in this example), the copyField will have the full boost assigned for each directly specified field which uses that copyField. That's 5 times with the provided sample, so the total boost for the field text will be 10^5.\n\nOne solution would be to keep track of used fields (directly specified as well as copyFields) and only assign the full boost once per document. If the number of unique fields/document is low, a simple list would probably be the fastest and with low GC impact. For a higher number of unique fields, a Set might be better. An optimization would be to only create the tracking structure once a boost != 1.0f is encountered and only store the fields with boost != 1.0f, so that an update without boosts would not get a performance penalty. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13482746",
            "date": "2012-10-23T22:11:33+0000",
            "content": "Toke: thanks for following up - too bad we didn't catch this other problem before 4.0.\n\nI've spun off SOLR-3981 to work on this since SOLR-3875 is already resolved and listed as fixed in 4.0 (we can't (sanely) re-open issues that were recorded in CHANGES.txt for official releases since it would leave users confused as to what parts of those issues were resolved in each version) "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13610769",
            "date": "2013-03-22T16:33:56+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1389636\n\nSOLR-3875: Fixed index boosts on multi-valued fields when docBoost is used (merge r1389628) "
        }
    ]
}