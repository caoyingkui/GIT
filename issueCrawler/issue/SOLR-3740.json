{
    "id": "SOLR-3740",
    "title": "ExtendedDismaxQParser (edismax) does not obey q.op for parenthesized sub-queries",
    "details": {
        "affect_versions": "3.6.1,                                            4.0-BETA",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "For a query such as \"cat dog (fox bat fish)\" with &q.op=AND, the default query operator is only set to AND for the top-level query, and not for the parenthesize sub-query. This is not documented behavior and rather surprising.\n\nThis happens because edismax only simulates the default operator by forcing \"mm\" (minMatch) to 100% for the top-level BooleanQuery alone and never sets the default query operator when it invokes the classic Lucene Query parser which in turn is performing parsing and query generation for the parenthesized sub-query.\n\nOne solution is for edismax to always set the default query operator when calling the classic Lucene query parser, or at least when q.op=AND.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13451187",
            "date": "2012-09-08T00:37:08+0000",
            "content": "removing fixVersion=4.0 since there is no evidence that anyone is currently working on this issue.  (this can certainly be revisited if volunteers step forward)\n\n "
        },
        {
            "author": "Michael Krkoska",
            "id": "comment-13471280",
            "date": "2012-10-07T17:50:36+0000",
            "content": "I ran into this issue with a simple query like \"ID100\", which gets rewritten by a WordDelimiterFilter in my config into \"(text:ID text:100)\". Unfortunately my q.op=AND is not passed on to the underlying query parser, which results in a OR, as that's the default.\n\nAdding \n\n\n \nup.setDefaultOperator(QueryParsing.getQueryParserDefaultOperator(req.getSchema(), solrParams.get(QueryParsing.OP)));\n\n \n\nin line 193 of ExtendedDismaxQParserPlugin fixes the bug for me and seems sensible.\n\nPlease look into this before 4.0 release, as it seems to be a rather serious bug. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13471287",
            "date": "2012-10-07T18:40:38+0000",
            "content": "I ran into this issue with a simple query like \"ID100\", which gets rewritten by a WordDelimiterFilter in my config into \"(text:ID text:100)\". \n\nIn this specific case, you may want autoGeneratePhraseQueries=\"true\" set on your field type so that any split tokens end up acting like a phrase query of \"ID 100\". "
        },
        {
            "author": "Michael Krkoska",
            "id": "comment-13471290",
            "date": "2012-10-07T18:53:09+0000",
            "content": "In this specific case, you may want autoGeneratePhraseQueries=\"true\" set on your field type so that any split tokens end up acting like a phrase query of \"ID 100\".\n\nThanks, that's indeed useful! But while it is a workaround for some cases of the bug, I still see the issue as something serious. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-16430019",
            "date": "2018-04-09T04:38:21+0000",
            "content": "Can this be closed? There's been a lot of changes since this was opened. "
        }
    ]
}