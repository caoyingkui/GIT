{
    "id": "SOLR-11413",
    "title": "SolrGraphiteReporter fails to report metrics due to non-thread safe code",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "metrics"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "6.6,                                            7.0",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Symptom:\nIntermittent errors writing graphite metrics.  Errors indicate use of sockets which have already been closed.\n\nCause:\nSolrGraphiteReporter caches and shares dropwizard Graphite instances.  These reporters are not thread safe as they  open and close an instance variable of type GraphiteSender.  On modern bare metal hardware this problem was observed consistently, and resulted in the majority of metrics failing to be delivered to graphite.\n\nProposed Fix:\nGraphite (and PickledGraphite) are not designed to be cached, and should not be.\n\nTest:\nPatch file includes test which forces error.\n\nAlternative Fixes Considered:\n\n\tTotally change solr metrics architecture to use a single metrics registry - seems undesirable and impractical\n\tCreate a synchronized or otherwise thread-safe implementation of dropwizard graphite reporter - should be fixed upstream in dropwizard and not obviously preferred to current model",
    "attachments": {
        "SOLR-11413.patch": "https://issues.apache.org/jira/secure/attachment/12889449/SOLR-11413.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-09-28T06:31:26+0000",
            "content": "Associate unit test to demonstrate failure not running reliably.  Above patch tested in high volume metrics tests. ",
            "author": "Erik Persson",
            "id": "comment-16183740"
        },
        {
            "date": "2017-09-29T15:26:07+0000",
            "content": "Example error messages using Solr 6.6.0.  Already connected and Stream closed are typical examples of the errors due to different graphite scheduled reporter timer threads running concurrently a shared GraphiteSender instance.\n\n\n2017-09-28 19:09:16.226 ERROR (metrics-graphite-reporter-2-thread-1) [   ] c.c.m.ScheduledReporter Exception thrown from GraphiteReporter#report. Exception was suppressed.\njava.lang.IllegalStateException: Already connected\n        at com.codahale.metrics.graphite.Graphite.connect(Graphite.java:111)\n        at com.codahale.metrics.graphite.GraphiteReporter.report(GraphiteReporter.java:240)\n        at com.codahale.metrics.ScheduledReporter.report(ScheduledReporter.java:235)\n        at com.codahale.metrics.ScheduledReporter$1.run(ScheduledReporter.java:174)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n2017-09-28 19:09:16.226 WARN  (metrics-graphite-reporter-1-thread-1) [   ] c.c.m.g.GraphiteReporter Unable to report to Graphite\njava.io.IOException: Stream closed\n        at java.io.BufferedWriter.ensureOpen(BufferedWriter.java:116)\n        at java.io.BufferedWriter.write(BufferedWriter.java:221)\n        at java.io.Writer.write(Writer.java:157)\n        at com.codahale.metrics.graphite.Graphite.send(Graphite.java:138)\n        at com.codahale.metrics.graphite.GraphiteReporter.sendIfEnabled(GraphiteReporter.java:328)\n        at com.codahale.metrics.graphite.GraphiteReporter.reportMetered(GraphiteReporter.java:305)\n        at com.codahale.metrics.graphite.GraphiteReporter.report(GraphiteReporter.java:255)\n        at com.codahale.metrics.ScheduledReporter.report(ScheduledReporter.java:235)\n        at com.codahale.metrics.ScheduledReporter$1.run(ScheduledReporter.java:174)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n        at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:308)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:180)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:294)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n        at java.lang.Thread.run(Thread.java:745)\n2017-09-28 19:09:16.234 ERROR (metrics-graphite-reporter-3-thread-1) [   ] c.c.m.ScheduledReporter Exception thrown from GraphiteReporter#report. Exception was suppressed.\njava.lang.NullPointerException\n ",
            "author": "Erik Persson",
            "id": "comment-16185978"
        },
        {
            "date": "2017-10-05T10:46:35+0000",
            "content": "Erik Persson you mentioned the patch includes a unit test that illustrates the problem - but the test is not in the attached patch.\n\nYour proposed fix looks reasonable, but it would be nice to have a test case that illustrates the failure (and the fix). ",
            "author": "Andrzej Bialecki",
            "id": "comment-16192717"
        },
        {
            "date": "2017-10-09T21:10:20+0000",
            "content": "Andrzej Bialecki  Unfortunately the unit test that I had was misleading, so I removed it from the patch.  It appears to fail 'randomly'.  Specifically it failed when I tried against un-patched Solr and worked when I tried it against my patch.  Subsequent tests were inconsistent.  \n\nMy believe is that the problem lies in the embedded MockGraphite class in SolrGraphiteReporterTest.java.  I believe that the inconsistency in test results relates to how it handles support concurrent connections, but as of yet I cannot see why there would be a problem.  I will take another shot at it.  ",
            "author": "Erik Persson",
            "id": "comment-16197702"
        },
        {
            "date": "2017-10-30T11:52:42+0000",
            "content": "Commit c8d55cc6d45afaff31160a22fbe01dc36bb6675f in lucene-solr's branch refs/heads/master from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c8d55cc ]\n\nSOLR-11413: SolrGraphiteReporter fails to report metrics due to non-thread safe code. ",
            "author": "ASF subversion and git services",
            "id": "comment-16224781"
        },
        {
            "date": "2017-10-30T11:54:02+0000",
            "content": "Commit 235bdb384765893adfaba338c5dd8c167bbec9e3 in lucene-solr's branch refs/heads/branch_7x from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=235bdb3 ]\n\nSOLR-11413: SolrGraphiteReporter fails to report metrics due to non-thread safe code. ",
            "author": "ASF subversion and git services",
            "id": "comment-16224786"
        },
        {
            "date": "2017-10-30T11:56:48+0000",
            "content": "Erik Persson I couldn't reproduce this failure, but looking at the internals of how Dropwizard's GraphiteReporter uses the instance of Graphite this stacktrace makes sense, so I applied your fix. Thank you! ",
            "author": "Andrzej Bialecki",
            "id": "comment-16224790"
        }
    ]
}