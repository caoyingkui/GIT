{
    "id": "SOLR-6379",
    "title": "CloudSolrServer can query the wrong replica if a collection has a SolrCore name that matches a collection name.",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "4.10",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "spin off of SOLR-2894 where sarowe & miller were getting failures from TestCloudPivot that seemed unrelated to any of hte distrib pivot logic itself.\n\nin particular: adding a call to \"waitForThingsToLevelOut\" at the start of the test, even before indexing any docs, seemed to work around the problem \u2013 but even if all replicas aren't yet up when the test starts, we should either get a failure when adding docs (ie: no replica hosting the target shard) or queries should only be routed to the replicas that are up and fully caught up with the rest of the collection.\n\n(NOTE: we're specifically talking about a situation where the set of docs in the collection is static during the query request)",
    "attachments": {
        "SOLR-6379.pristine_collection.test.patch": "https://issues.apache.org/jira/secure/attachment/12663463/SOLR-6379.pristine_collection.test.patch",
        "SOLR-6379.patch": "https://issues.apache.org/jira/secure/attachment/12661908/SOLR-6379.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-14097790",
            "date": "2014-08-14T22:21:22+0000",
            "content": "Attaching a new test that seems to recreate teh general problem w/o involving any pivot code \u2013 just a basic search and check of the numFound count.\n\nthe test flow in a nutshell:\n\n\tbuild a random index of at least 500 docs\n\tpick 20 (simple) random queries and record the numFound for each\n\tloop 100 times over this \"static\" collection, executing each of the 20 queries and checking the count\n\tloop 100 times over the collection again, but this time randomly inject some async \"addreplica\" calls (max 5 per shard, TODO: randomly \"deletereplica\" occasionally)\n\n\n\nOn my system, the first 100 iterations work fine, but in the second iteration, when random addreplica calls are included, i get failures where \n\nSeed never seems to matter: at some point during the second loop, there is always a failure where a search returns 0 docs instead of the expected count. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14101033",
            "date": "2014-08-18T18:33:41+0000",
            "content": "This seems like something that should go into 4.10. I'm looking at it. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101113",
            "date": "2014-08-18T19:15:05+0000",
            "content": "This looks like it's simply one of those corner case bugs that manifests when you have a collection that has core names that match another collection name. I'm glad we actually kind of randomly ended up with our tests this way because it catches great stuff.\n\ncontrol_collection\n    collection1\ncollection1\n    collection_shard1_replica1\n    etc\n\nThere must be some code that is keying on core name and not taking into account the collection level like it should. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14101139",
            "date": "2014-08-18T19:29:44+0000",
            "content": "Mark Miller right, seems like it's right in OCP.addReplica(). \nI have the tests passing, I'm just running on multiple iterations before I put up the patch.\n\nIf you already have something, go ahead with it. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101142",
            "date": "2014-08-18T19:33:28+0000",
            "content": "No, have not made any changes - simply popped out the control collection for the test to check a theory. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101179",
            "date": "2014-08-18T20:03:30+0000",
            "content": "Hmm...I think this may be a result of how we resolve cores and collections in urls.\n\nIf we ask the control_collection jetty to satisfy a query for collection1, you can end up with a request to control_collection:port/solr/collection1. That will first try to find collection1 as a core - which will work because collection1 is a core that is part of control_collection. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101239",
            "date": "2014-08-18T20:38:53+0000",
            "content": "If we ask the control_collection jetty to satisfy a query for collection1\n\nThough the reason that happens seems to be a bug in CloudSolrServer. Patch attached. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14101240",
            "date": "2014-08-18T20:39:12+0000",
            "content": "I think it would make sense to consider zkawareness more openly in the DispatchFilter to redirect queries to the correct collection. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101241",
            "date": "2014-08-18T20:40:04+0000",
            "content": "The control collection is zkaware as well - it's simply 1 shard, 1 replica. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101258",
            "date": "2014-08-18T20:48:21+0000",
            "content": "I think it would make sense to consider zkawareness more openly in the DispatchFilter\n\nI think I misunderstood - but I don't think zkawreness is the right check - even if we are zkaware, we have to resolve both cores and collections in the dispatch filter.\n\nMy patch is not yet right. Looks like that was added for Aliases. Need to figure out something better I think.\n\nAliasIntegrationTest currently fails. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101290",
            "date": "2014-08-18T21:02:33+0000",
            "content": "AliasIntegrationTest currently fails.\n\nThat makes it tricky. We kind of need that behevaior. This was introduced in the bug fix for SOLR-5380.\n\nI think it would make sense to consider zkawareness more openly in the DispatchFilter to redirect queries to the correct collection.\n\nOkay, now I think I've caught up with what you meant. I think you are right. Perhaps we just have to favor collection over core when resolving. I struggled with this when I put it in - which do you resolve first. I just kind of took the easier path by default. Let's see what happens when you try and change it. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14101315",
            "date": "2014-08-18T21:15:23+0000",
            "content": "Perhaps we just have to favor collection over core when resolving. \nYes, though we should also add 'that' in the docs (when we commit that change).\nthat = In case of a corename clashing with a collection name, the dispatch handler (or simpler terms which abstract out implementation details) would always resolve to the collection and not the core. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101327",
            "date": "2014-08-18T21:20:33+0000",
            "content": "Patch that resolves collection before core. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101339",
            "date": "2014-08-18T21:27:49+0000",
            "content": "We should simplify the rest of this pivot cruft off the test and probably make it a nightly test. Or at least crank it down except for nightly runs. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101345",
            "date": "2014-08-18T21:33:14+0000",
            "content": "I struggled with this when I put it in\n\nAnd now I am remembering why. If you resolve the collection first, it can become impossible to address the individual core. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14101356",
            "date": "2014-08-18T21:38:53+0000",
            "content": "If you resolve the collection first, it can become impossible to address the individual core.\nAnd vice-versa if you resolve the core first (when the core/collection names clash). I think it's ambiguous in how it is and we might have to just pick the right one (or whatever we think is right). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101472",
            "date": "2014-08-18T22:59:22+0000",
            "content": "And vice-versa if you resolve the core first (when the core/collection names clash).\n\nBut that's not really true. You can query a collection by targeting a core. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14101484",
            "date": "2014-08-18T23:03:48+0000",
            "content": "I think it's ambiguous \n\nOne option is to add a param that allows making the url not ambiguous. Favor collection first, but add a param that allows forcing a core lookup only. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14102203",
            "date": "2014-08-19T13:36:00+0000",
            "content": "Hmm...didn't mean to steal the assignee. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14102413",
            "date": "2014-08-19T16:25:49+0000",
            "content": "Mark Miller That's ok . I'll put up a patch once I get to office with an optional param that helps explicit targeting/preference of a core. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14102951",
            "date": "2014-08-19T22:24:17+0000",
            "content": "Simpler test that doesn't involve any of the pivot faceting stuff. Added a param \"target.type\" which, if set to \"core\" would resolve the name to a core instead of a collection.\n\nWriting a test that actually tests this scenario i.e:\n1. Create collection a.\n2. Add documents to a.\n3. Create collection b with a core named 'a'.\n4. Query with and without the param in a loop and assert correctness. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14104759",
            "date": "2014-08-20T23:03:33+0000",
            "content": "Added a test but it's failing. Looking at what's missing/wrong.\nCloudSolrServer may be. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14105806",
            "date": "2014-08-21T19:08:34+0000",
            "content": "This looks like it's simply one of those corner case bugs that manifests when you have a collection that has core names that match another collection name. \n\nFWIW: i wanted to prove to myself that this was really the only problem - so i mangled TestQueriesWhileReplicasComeOnline.java into a TestQueriesWhileReplicasComeOnlineOfPristineCollection.java with the following changes:\n\n\tcreates a new collection from scratch with a randomly generated name\n\tskips the initial batch of queries against the static index\n\tuses CLUSTERSTATUS to get the list of shards & replicas (since the test framework plumbing for this is all built arround collection1)\n\tinlcudes the random DELETEREPLICA logic that was missing from the previous test.\n\tloops until a min number of replica add/delete commands have been sent (async) instead of a fixed number of times\n\n\n\nEven w/o anshum's change to the core vs collection name resolution, this new test sort of passes for me \u2013 by which i mean it doesn't fail any assertions on comparing the results while it's randomly adding/removing replicas - but it does die horribly with tons of zombie ZK threads (why? I have no idea) "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14105837",
            "date": "2014-08-21T19:34:43+0000",
            "content": "Hoss Man So, I'll translate the above comment as \"we diagnosed the problem correctly\". Let's look at the zk thread leaks in another JIRA? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14105937",
            "date": "2014-08-21T20:48:16+0000",
            "content": "Let's look at the zk thread leaks in another JIRA?\n\nIt could just be a stupid mistake in my test \u2013 i'll defer to you on that one since you're more familiar with the add/delete replica stuff.\n\nMore to the point though is that in terms of the original concern: cores/replicas being used in qeries when they shouldn't be, both tests seem useful. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14107674",
            "date": "2014-08-22T23:15:00+0000",
            "content": "Tests and the patch. I have a few randomly failing tests so I'd like to run the entire suit more than a few times to confirm that it has nothing to do with my change. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14107683",
            "date": "2014-08-22T23:18:59+0000",
            "content": "\"target.type\"\n\nAren't Solr params usually camel case? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14107684",
            "date": "2014-08-22T23:19:55+0000",
            "content": "Also tests that extend AbstractFullDistribZkTestBase should generally have the @Slow annotation. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14107707",
            "date": "2014-08-22T23:35:22+0000",
            "content": "Changed. Thanks for pointing that out. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14112527",
            "date": "2014-08-27T17:41:54+0000",
            "content": "I'm not sure if we go this far. \n\nIt really only happens in our tests  and we can fix them. We should document this behavior and move on.\nWhen the legacyCloud=false becomes the default mode (in 5.0) then, it won't be an issue anymore "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14112537",
            "date": "2014-08-27T17:47:34+0000",
            "content": "I'm not sure if we go this far.\n\nDefine what \"far\" means.\n\nI think it's the right fix for the situation that we currently find ourselves in.\n\nI also don't think that just because the Collections API currently determines a certain default core naming scheme means that it will stay that way or that the system won't have support for the full range of core and collection names that it does today.\n\nThis or that may happen in the future, but this addresses the problem correctly for today.\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14112572",
            "date": "2014-08-27T18:09:23+0000",
            "content": "Define what \"far\" means.\n\nThe querystring is parsed for 100% of requests just to figure this out. it is too expensive. We should avoid the extra query parsing "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14112594",
            "date": "2014-08-27T18:19:15+0000",
            "content": "won't have support for the full range of core and collection names that it does today.\n\nThis is clearly a corner case. Going forward , our core APIs will be crippled in the future when the legacyCloud=false kicks in (whenever it is going to happen) . Moreover this issue was unearthed by our own contrived tests and not a real world use case "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14112601",
            "date": "2014-08-27T18:27:46+0000",
            "content": "The querystring is parsed for 100% of requests just to figure this out. it is too expensive. We should avoid the extra query parsing\n\nThat's an isolated point that can be addressed. The cost of that is going to be negligible, but even if that was not the case, it's a small part of this patch.\n\nThis is clearly a corner case.\n\nSorry - I'm dedicated to supporting corner cases too.\n\nour core APIs will be crippled in the future when the legacyCloud=false kicks\n\nCan you back that claim up with facts? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14112606",
            "date": "2014-08-27T18:32:48+0000",
            "content": "Can you back that claim up with facts?\n\ncore create WILL NOT work in legacyCloud=false.\n\nThat's an isolated point that can be addressed. The cost of that is going to be negligible, but even if that was not the case, it's a small part of this patch\nIf that is addressed , I don't really have any objection to the solution itself.\n\nNevertheless, it is desirable to fix our tests to match with more real world use cases  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14112622",
            "date": "2014-08-27T18:42:49+0000",
            "content": "core create WILL NOT work in legacyCloud=false.\n\nHuh?\n\nNevertheless, it is desirable to fix our tests to match with more real world use cases\n\nI'm not so worried about that.\n\nFor one, we ship our configs much like the configs being tested - it's more real world than you would like to believe. Also, we test many other scenarios more real world scenarios already. I'm glad we also have something that can catch this ugly corner case so that we can address it. Adding coverage is great, but losing coverage sucks. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14112629",
            "date": "2014-08-27T18:50:21+0000",
            "content": "If that is addressed , I don't really have any objection to the solution itself.\n\nYou do know the performance cost of that call don't you? \n\nAnyway, we already make this call in SolrDispatchFilter - if anything, we should simply ensure we only call it once. Not that it will buy us any performance.\n\nIt's not a call we need to strive to avoid calling on any Solr request though.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14112641",
            "date": "2014-08-27T18:54:13+0000",
            "content": "You do know the performance cost of that call don't you?\n\nI commented after I reviewed the patch. There is an extra parsing done for this check, which worries me.  "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14125295",
            "date": "2014-09-08T08:21:54+0000",
            "content": "A small optimization to make sure that the querystring is parsed in the DispatchFilter only once.\n\nI am still not sure if we have a consensus on this one though. I don't have a strong opinion but would want to have this resolution issue fixed and biased towards collection name resolution in SolrCloud mode while also have a mechanism to resolve a core if need be.\n\nWe should either resolve this or at least in BOLD, specify that a user shouldn't be reusing a core-name to create a collection (or vice-versa) when the core doesn't belong the the very collection. "
        }
    ]
}