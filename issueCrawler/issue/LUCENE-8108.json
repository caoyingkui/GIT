{
    "id": "LUCENE-8108",
    "title": "Field class should not let you analyze int values?",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Bug",
        "components": [],
        "fix_versions": []
    },
    "description": "I stumbled on this by accident, by creating a Field instance with a Integer value for its fieldsData and then setting tokenized = true in its FieldType.\n\nIf you do this then Lucene silently converts the int to a string and then tokenizes it, e.g. applying synonyms, etc., if that's what your analysis chain does.",
    "attachments": {
        "LUCENE-8108.patch": "https://issues.apache.org/jira/secure/attachment/12903739/LUCENE-8108.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16304036",
            "date": "2017-12-26T21:55:44+0000",
            "content": "Here's a patch with a failing test case; it creates a Field with an integer value and with TextField.TYPE_STORED field type.\n\nThe test fails on the assertEquals because the token \"17\" was in fact created; this happens because Field.stringValue calls .toString on numeric values ... I think this is somewhat dangerously lenient but maybe it's not often hit because nobody would normally try to analyze an int? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16305498",
            "date": "2017-12-28T14:55:17+0000",
            "content": "+1 to be less lenient. If someone needs to do something like this, I'd rather like the toString conversion to be performed by the user before creating the Field instance. ",
            "author": "Adrien Grand"
        }
    ]
}