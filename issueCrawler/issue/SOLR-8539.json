{
    "id": "SOLR-8539",
    "title": "Solr queries swallows up OutOfMemoryErrors",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "I was testing a crazy surround query and was hitting OOMs easily with the query. However I saw that the OOM killer wasn't triggered. Here is the stack trace of the error on solr 5.4:\n\n\n\nWARN  - 2016-01-12 18:37:03.920; [   x:techproducts] org.eclipse.jetty.util.thread.QueuedThreadPool$3; \njava.lang.OutOfMemoryError: Java heap space\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.addConditionWaiter(AbstractQueuedSynchronizer.java:1855)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.awaitNanos(AbstractQueuedSynchronizer.java:2068)\n        at org.eclipse.jetty.util.BlockingArrayQueue.poll(BlockingArrayQueue.java:389)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.idleJobPoll(QueuedThreadPool.java:531)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.access$700(QueuedThreadPool.java:47)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:590)\n        at java.lang.Thread.run(Thread.java:745)\nERROR - 2016-01-12 18:37:03.922; [   x:techproducts] org.apache.solr.common.SolrException; null:java.lang.RuntimeException: java.lang.OutOfMemoryError: Java heap space\n        at org.apache.solr.servlet.HttpSolrCall.sendError(HttpSolrCall.java:611)\n        at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:472)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:222)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:181)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n        at org.eclipse.jetty.server.Server.handle(Server.java:499)\n        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\n        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\n        at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n        at java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.OutOfMemoryError: Java heap space\n        at org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.newTermState(Lucene50PostingsReader.java:149)\n        at org.apache.lucene.codecs.blocktree.SegmentTermsEnumFrame.<init>(SegmentTermsEnumFrame.java:100)\n        at org.apache.lucene.codecs.blocktree.SegmentTermsEnum.getFrame(SegmentTermsEnum.java:215)\n        at org.apache.lucene.codecs.blocktree.SegmentTermsEnum.pushFrame(SegmentTermsEnum.java:241)\n        at org.apache.lucene.codecs.blocktree.SegmentTermsEnum.seekCeil(SegmentTermsEnum.java:728)\n        at org.apache.lucene.index.FilterLeafReader$FilterTermsEnum.seekCeil(FilterLeafReader.java:185)\n        at org.apache.lucene.index.TermsEnum.seekExact(TermsEnum.java:74)\n        at org.apache.lucene.index.TermContext.build(TermContext.java:94)\n        at org.apache.lucene.search.spans.SpanTermQuery.createWeight(SpanTermQuery.java:72)\n        at org.apache.lucene.search.spans.SpanOrQuery.createWeight(SpanOrQuery.java:132)\n        at org.apache.lucene.search.spans.SpanNearQuery.createWeight(SpanNearQuery.java:192)\n        at org.apache.lucene.search.spans.SpanNearQuery.createWeight(SpanNearQuery.java:42)\n        at org.apache.lucene.search.IndexSearcher.createWeight(IndexSearcher.java:904)\n        at org.apache.lucene.search.IndexSearcher.createNormalizedWeight(IndexSearcher.java:887)\n        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:535)\n        at org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:202)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1672)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1491)\n        at org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:557)\n        at org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:525)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:273)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:156)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:2073)\n        at org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:658)\n        at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:457)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:222)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:181)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)\n\n\n\nSo HttpSolrCall#sendError needs to throw an OOM exception instead of swallowing it and sending back and error in the response.\n\nOnce I made HttpSolrCall#sendError throw an exception on OOM I still hit the following stack strace \n\n\nWARN  - 2016-01-13 07:43:39.449; [   x:techproducts] org.eclipse.jetty.servlet.ServletHandler; Error for /solr/techproducts%2Fselect\njava.lang.OutOfMemoryError: Java heap space\n        at org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.<init>(Lucene50PostingsReader.java:477)\n        at org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.postings(Lucene50PostingsReader.java:220)\n        at org.apache.lucene.codecs.blocktree.SegmentTermsEnum.postings(SegmentTermsEnum.java:1002)\n        at org.apache.lucene.search.spans.SpanTermQuery$SpanTermWeight.getSpans(SpanTermQuery.java:119)\n        at org.apache.lucene.search.spans.SpanOrQuery$SpanOrWeight.getSpans(SpanOrQuery.java:160)\n        at org.apache.lucene.search.spans.SpanNearQuery$SpanNearWeight.getSpans(SpanNearQuery.java:213)\n        at org.apache.lucene.search.spans.SpanWeight.scorer(SpanWeight.java:133)\n        at org.apache.lucene.search.spans.SpanWeight.scorer(SpanWeight.java:38)\n        at org.apache.lucene.search.Weight.bulkScorer(Weight.java:135)\n        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:667)\n        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:474)\n        at org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:240)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1766)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1583)\n        at org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:613)\n        at org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:524)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:273)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:156)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:2062)\n        at org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:653)\n        at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:457)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:226)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:184)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\n\n\n\nSo is Jetty not propagating the OOM Error back to the JVM?",
    "attachments": {
        "SOLR-8539.patch": "https://issues.apache.org/jira/secure/attachment/12782059/SOLR-8539.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-13T14:43:07+0000",
            "author": "Varun Thacker",
            "content": "Here's the patch which throws the OOM from HttpSolrCall#sendError but still the OOM killer doesn't kill the process  ",
            "id": "comment-15096276"
        },
        {
            "date": "2016-01-13T15:56:39+0000",
            "author": "Shawn Heisey",
            "content": "It looks like the OOM is being trapped and logged, but not being thrown in a way that bubbles up the stack to the JVM.\n\nIn both of the logs you provided, the logging is done by a Jetty class, so I think Jetty is probably swallowing the exception. ",
            "id": "comment-15096396"
        },
        {
            "date": "2016-01-13T20:20:31+0000",
            "author": "Varun Thacker",
            "content": "Yeah it looks like that. Here https://github.com/eclipse/jetty.project/blob/jetty-9.2.x/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/ServletHandler.java#L667 we can see that it's been logged as a WARN and not thrown . \n\nNot sure how to solve it though  ",
            "id": "comment-15096919"
        },
        {
            "date": "2016-01-13T21:16:48+0000",
            "author": "Shawn Heisey",
            "content": "I took the liberty of opening a bug on Jetty, since I already have an eclipse bugzilla account.\n\nhttps://bugs.eclipse.org/bugs/show_bug.cgi?id=485794 ",
            "id": "comment-15097004"
        },
        {
            "date": "2016-01-13T22:06:48+0000",
            "author": "Greg Wilkins",
            "content": "Shawn,  I commented on the Jetty bug... but another thought here.  Perhaps you can just add a custom error page for the OOM exception which is mapped to a servlet that does a System.exit(1) ?\n\nAlthough there is a risk that another OOM might get thrown during the dispatch to the error page....     so perhaps even better is to add your own custom ErrorPageErrorHandler, which when asked to lookup the OOME error page does the System.exit instead.\n\nOr just catch in a filter and System.exit.\n\nBut, there are still a large class of OOME that can happen in strange and exotic places that will cause problems and not be caught.  Eg. if the time thread get's hit by OOME, that wont even go near jetty code.\n\n ",
            "id": "comment-15097105"
        },
        {
            "date": "2016-01-14T04:50:56+0000",
            "author": "Mark Miller",
            "content": "It is hard to guarantee, but well behaving code should be careful when catching Errors and let OOMExceptions bubble out I think. It's the only way for the Java kill on OOM feature to work at all.\n\nWe may find that some other code in some other lib is swallowing Errors and not letting OOMException bubble up, but in that case I think we would follow the same procedure and file a bug with that component. ",
            "id": "comment-15097585"
        },
        {
            "date": "2016-01-14T05:26:13+0000",
            "author": "Greg Wilkins",
            "content": "OK, we will see what we can do.  I think we will allow all VirtualMachineError's to propagate back to the thread. ",
            "id": "comment-15097624"
        },
        {
            "date": "2016-01-14T05:53:23+0000",
            "author": "Greg Wilkins",
            "content": "Hmmm I've started looking at this and it is a huge job.   The jetty container has many layers (servlet async IO, servlet, HTTP, async IO) all with their own exception handling contracts and expected behaviours.    Many of the async APIs handle exceptions by passing them to onError(Throwable) callbacks and have specified lifecycles. \n\nSo it is not really just a simple matter of catching VirtualMachineError an rethrowing it.   Should we try to generate a 500 response first? or should we just rethrow?   Should we pass it to async onError calls?   What if they throw it in another thread - do we still throw it in the current thread? how do we know?     If there is a -XX:OnOutOfMemoryError=\"kill -9 %p\" script installed, then it does not really matter because we are dead.     But if there isn't, I think we are obliged to try to limp on as best we can (even though I agree that in almost all cases of VirtualMachineError we are effectively dead, but just don't know it yet).\n\nI'll have to discuss this more with the jetty team and community.   I do want to do something, but this is not going to be quick, so I think you probably need to look at adding your own ErrorPageErrorHandler that handles VirtualMachineError with a System.exit() - or at least a simple Filter that does the same. \n\n\n\n\n\n\n\n\n ",
            "id": "comment-15097652"
        },
        {
            "date": "2016-01-14T14:40:41+0000",
            "author": "Shawn Heisey",
            "content": "Mark Miller, I wonder how Netty fares on this particular problem.\n\nA servlet that forcibly quits is an interesting idea, but I worry that it won't actually work.  Writing code that behaves predictably under OOM conditions is possible, but tricky. ",
            "id": "comment-15098182"
        },
        {
            "date": "2016-01-14T20:09:14+0000",
            "author": "Ramkumar Aiyengar",
            "content": "I don't think there is a sensible way to \"limp along\"? Even if you did so and returned 5xx errors, you aren't doing any favours, without any other special handling, you pretty much quite probably would just be returning that over and over again. Or worse, find weird bugs in application code which potentially do more damage than a simple exit. With an exit due to an exception, at least any decent process manager would respawn it, or a load balancer reroute requests elsewhere.. I would suggest not handling Errors in general, unless there are specific Errors you can whitelist as safe to trap.. ",
            "id": "comment-15098769"
        },
        {
            "date": "2016-01-14T22:18:33+0000",
            "author": "Mark Miller",
            "content": "I wonder how Netty fares on this particular problem.\n\nNo clue, and like Greg says, it's hard to promise in any code base, but I've seen the OOM killer script actually get invoked on Tomcat, so it doesn't appear to be consistently swallowing OOMs.\n\nyou probably need to look at adding your own ErrorPageErrorHandler\n\nThanks for the tip. Def worth exploring. ",
            "id": "comment-15099005"
        },
        {
            "date": "2016-01-14T22:49:32+0000",
            "author": "Greg Wilkins",
            "content": "Unfortunately spec requires us to handle Errors - also there are good lifecycle reasons for doing so.\n\nWhile I think OOME and the like are more often than not fatal, there is still some value in attempting to return a 500 and reasonable prospects (if the attempted allocation was large, many smaller ones might succeed and jetty does not need much memory).       In fact SOLR-8453 is about how the server does send an error response when confronted with an application exception, so it is hard to say generally that we should not attempt normal error handling (which may include logging, notification, System.exit etc.).\n\nThus as a container, I think we are going to have to attempt to handle VirtualMachineErrors in as much as we call whatever pluggable APIs given (onError, error page dispatch) to notify of the exception.   If we suffer another error while attempting to do that, it can propagate back to the thread/JVM.\n\nNote also that Netty has a slightly easier job in regards to this, as it does not have to deal with the complexities of the servlet API - both synchronous and asynchronous. ",
            "id": "comment-15099075"
        },
        {
            "date": "2016-01-14T23:27:02+0000",
            "author": "Joakim Erdfelt",
            "content": "If the Throwable occurs outside of a Jetty thread, we cannot process this down to the JVM for you.\n\nMany libraries now spawn their own threads and thread pools.\nThere are also valid libraries that use OOME themselves to downgrade performance when under too much load (most common are image and video processing libraries)\n\nAs for exiting the VM on all VirtualMachineErrors, that seems improper too.\n\njava.lang.VirtualMachineError\n\n\tjava.lang.InternalError\n\tjava.lang.UnknownError\n\tjava.lang.StackOverflowError  <-- this one is very easy to recover from, we shouldn't exit JVM because of this one.\n\tjava.lang.OutOfMemoryError\n\n ",
            "id": "comment-15099114"
        },
        {
            "date": "2016-01-14T23:40:49+0000",
            "author": "Shawn Heisey",
            "content": "This whole comment is a tangent, so skip or read accordingly.\n\nOne large goal we've got for Solr is to make it a standalone program.  One way to do that would be to embed Jetty and handle its configuration completely in our own code, from one of our own config files.  This is likely the easiest path, because it would involve very little change to existing code.  The significant changes would likely be new classes.\n\nAnother option, which would probably involve significant rewrites of some classes, is to switch to a lower-level framework like Netty.  Solr doesn't really need a lot of the functionality that a full servlet container provides, and Netty's claims look inviting.\n\nGoing far into left field, another consideration we have is HTTP/2 support.  Jetty has HTTP/2 already with 9.3, which requires Java 8.  In our stable versions we are on Java 7 and Jetty 9.2, but 6.0 will require Java 8.  HttpClient (the library used by SolrJ) does not support HTTP/2, and support is a long way off.  JettyClient has been mentioned as a possible replacement on SOLR-7442.  Netty also has HTTP/2 support in the client and the server, but I wouldn't want to actually switch to Netty unless there are demonstrable benefits in features (besides HTTP/2), performance, and/or ease of development. ",
            "id": "comment-15099139"
        },
        {
            "date": "2016-01-14T23:55:38+0000",
            "author": "Mark Miller",
            "content": "Many libraries now spawn their own threads and thread pools.\n\nYes, but most libraries will not eat OOMExceptions, and will address if they are.\n\nAs for exiting the VM on all VirtualMachineErrors, that seems improper too.\n\nThat is not what we are looking for. The JVM provides a specific feature to exit on OOMException, not any error. We are seeking the same behavior.\n\nTrying to limp on after an OOM exception can cause nasty results in a cluster env. ",
            "id": "comment-15099157"
        },
        {
            "date": "2016-01-15T00:03:43+0000",
            "author": "Greg Wilkins",
            "content": "\nSean,\n\nfrom the jetty point of view - the server is entirely designed with the intention of being embedded.  Jetty is primarily a software component before it is a software container... it just so happens that we distribute with our components assembled as a standard servlet container.  You'll have noted that our XML configuration is just calling the java API, so it is easy to convert to embedded.\n\nEmbedding jetty is a very easy and sensible path to go down.\n\nWith regards to the servlet container, the vast majority of that complexity is optional and if you are configuring your own server you don't need to instantiate it.  You can easily get rid of servlet classloaders, security, sessions, even servlets themselves if you want to write to the jetty APIs.    So if you program to Jetty at the Server+Handler level, you get pretty much the same level of abstraction as offered by Netty - but with the servlet request API for familiarity.   We provide the same kind of async capability - but perhaps the servlet API is a little more clunky (but also has its good points as well).\n\nIn short - if servlets & webapps are seen as a burden, then don't use them.  We are happy to give advice as to how to not use the full servlet container.\n\nWe are also keen to participate in discussions like this on OOME handling, to improve our embeddability and adaptability for more use cases.\n\n\n ",
            "id": "comment-15099168"
        },
        {
            "date": "2016-01-15T00:10:02+0000",
            "author": "Greg Wilkins",
            "content": "Mark,\n\nthe suggestion made over in the jetty discussion for this is that if we see OOME in a few key places, then we could that to a Server.stop(Throwable), which would stop the server and then throw the OOME from the Server.join() method, which the main thread should be blocked on.\n\n... or are you saying that it is sufficient to allow the OOME to propagate to any thread??   The documentation for the mechanism says: \"Run user-defined commands when an OutOfMemoryError is first thrown.\", which would suggest how the exception is handled is not important?  But perhaps that documentation is wrong? ",
            "id": "comment-15099172"
        },
        {
            "date": "2016-01-15T00:51:26+0000",
            "author": "Joakim Erdfelt",
            "content": "We've been testing the OOME handling on the Jetty side to see where we would need to make improvements.\n\nWe've discovered that the -XX:OnOutOfMemoryError works as documented in the JVM.\n\nNamely that it will \"Run user-defined commands when an OutOfMemoryError is first thrown. (Introduced in 1.4.2 update 12, 6)\"\n\nWe tested this in two different ways, and put the examples up on github at\nhttps://github.com/jetty-project/jetty-oome \n\nTechnique #1: in a distribution\n\nThe project is also a valid jetty.base directory and can be utilized as one directly.\n\n\n$ mvn clean install\n$ java -Xmx64m -XX:OnOutOfMemoryError=\"kill -9 %p\" -jar ~/code/jetty/distros/jetty-distribution-9.3.6.v20151106/start.jar \n\n\n\n(In a different terminal, issue the http request to trigger the OOME)\n\n\n$ curl http://localhost:88080/oome/\n\n\n\nThe output is as follows ...\n\n\n$ java -Xmx64m -XX:OnOutOfMemoryError=\"kill -9 %p\" -jar ~/code/jetty/distros/jetty-distribution-9.3.6.v20151106/start.jar \n2016-01-14 17:31:33.253:INFO::main: Logging initialized @291ms\n2016-01-14 17:31:33.352:WARN:oejx.XmlConfiguration:main: Property 'jetty.port' is deprecated, use 'jetty.http.port' instead\n2016-01-14 17:31:33.393:INFO:oejs.Server:main: jetty-9.3.6.v20151106\n2016-01-14 17:31:33.406:INFO:oejdp.ScanningAppProvider:main: Deployment monitor [file:///home/joakim/code/jetty/github-jetty-project/jetty-oome/webapps/] at interval 1\n2016-01-14 17:31:33.520:INFO:oejw.StandardDescriptorProcessor:main: NO JSP Support for /oome, did not find org.eclipse.jetty.jsp.JettyJspServlet\n2016-01-14 17:31:33.548:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@7225790e{/oome,file:///tmp/jetty-0.0.0.0-8080-oome.war-_oome-any-5546839308576240840.dir/webapp/,AVAILABLE}{/oome.war}\n2016-01-14 17:31:33.578:INFO:oejw.StandardDescriptorProcessor:main: NO JSP Support for /wsecho, did not find org.eclipse.jetty.jsp.JettyJspServlet\n2016-01-14 17:31:33.580:INFO:oejsh.ContextHandler:main: Started o.e.j.w.WebAppContext@a7e666{/wsecho,file:///tmp/jetty-0.0.0.0-8080-wsecho.war-_wsecho-any-6960823368392015323.dir/webapp/,AVAILABLE}{/wsecho.war}\n2016-01-14 17:31:33.593:INFO:oejs.ServerConnector:main: Started ServerConnector@4d95d2a2{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}\n2016-01-14 17:31:33.594:INFO:oejs.Server:main: Started @633ms\nxzzzzzzzzzzzzzzz#\n# java.lang.OutOfMemoryError: Java heap space\n# -XX:OnOutOfMemoryError=\"kill -9 %p\"\n#   Executing /bin/sh -c \"kill -9 13803\"...\nKilled\n\n\n\nTechnique #2: directly attempting to prevent -XX:OnOutOfMemoryError from working\n\nThere's a simple class in https://github.com/jetty-project/jetty-oome/blob/master/src/main/java/test/Ohme.java that attempts to replicate the threading model in Jetty at its most distilled and attempt to prevent the OOME from triggering the -XX:OnOutOfMemoryError script.\n\n\n$ mvn clean install\n$ java -Xmx64m -XX:OnOutOfMemoryError=\"kill -9 %p\" -cp target/classes test.Ohme\nxzzzzzzzzzzzzzzz#\n# java.lang.OutOfMemoryError: Java heap space\n# -XX:OnOutOfMemoryError=\"kill -9 %p\"\n#   Executing /bin/sh -c \"kill -9 14382\"...\nKilled\n\n\n\nSome notes on the output seen:\n\nThe main thread will output a \".\" every 500ms\nThe executor thread will output a \"x\" when it enters into the runnable, and a \"z\" every time it loops through and consumes more memory, and finally a \"!\" if the Error is ever caught.\n\nObserved results\n\nIn neither scenario have we seen the -XX:OnOutOfMemoryError not execute, in fact we can't even demonstrate a way to prevent it. ",
            "id": "comment-15099214"
        },
        {
            "date": "2016-01-15T01:21:28+0000",
            "author": "Shawn Heisey",
            "content": "Would 9.2.13 handle that the same?  The stable branch of Solr is using that version of Jetty, and requires Java 7.  Our trunk branch requires Java 8.  We did have that branch upgraded to Jetty 9.3, but had some problems unrelated to this issue, so that upgrade has recently been reverted.\n\nI wonder what might be happening with Solr that this would behave differently.  I wonder if our script is not working right.  When I find some time I can do some experiments on a 5.3.2 snapshot.\n\nDoes the presence of a Filter make any difference?  Pretty much everything in Solr is handled through SolrDispatchFilter, which ultimately inherits from javax.servlet.Filter. ",
            "id": "comment-15099255"
        },
        {
            "date": "2016-01-15T01:54:53+0000",
            "author": "Mark Miller",
            "content": "Namely that it will \"Run user-defined commands when an OutOfMemoryError is first thrown. (Introduced in 1.4.2 update 12, 6)\"\n\nI was doing the same and found the same thing. It doesn't matter if you catch it or not. I even duplicated the report here and I see it working. It must be the command line property or the script that it triggers that is off. ",
            "id": "comment-15101041"
        },
        {
            "date": "2016-01-15T01:56:34+0000",
            "author": "Mark Miller",
            "content": "The documentation for the mechanism says: \"Run user-defined commands when an OutOfMemoryError is first thrown.\", which would suggest how the exception is handled is not important? But perhaps that documentation is wrong?\n\nPrevious JIRA's that have been filed let me to believe that is not what happens, but a little testing out by hand confirms it. When this does not work as expected, it must be due to another piece. ",
            "id": "comment-15101044"
        },
        {
            "date": "2016-01-15T02:00:11+0000",
            "author": "Mark Miller",
            "content": "I even duplicated the report here and I see it working.\n\nI should mention, the difference being, I did not use the script to start Solr. I did it myself with -XX:OnOutOfMemoryError='echo OOM %p'\n\nResults in:\n\n\n     [java] 520727 INFO  (qtp1013423070-32) [   ] o.a.s.s.HttpSolrCall [admin] webapp=null path=/admin/info/system params={wt=json&_=1452822748177} status=0 QTime=7\n     [java] #\n     [java] # java.lang.OutOfMemoryError: Java heap space\n     [java] # -XX:OnOutOfMemoryError=\"echo OOM %p\"\n     [java] #   Executing /bin/sh -c \"echo OOM 19890\"...\n     [java] OOM 19890\n     [java] 522083 ERROR (qtp1013423070-30) [   x:my_core] o.a.s.s.HttpSolrCall null:java.lang.RuntimeException: java.lang.OutOfMemoryError: Java heap space\n     [java] \tat org.apache.solr.servlet.HttpSolrCall.sendError(HttpSolrCall.java:605)\n     [java] \tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:474)\n     [java] \tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:226)\n     [java] \tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:184)\n     [java] \tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\n ",
            "id": "comment-15101048"
        },
        {
            "date": "2016-01-15T02:02:14+0000",
            "author": "Mark Miller",
            "content": "Also, while I don't expect it's involved in these low memory simlulation cases, there is a general problem with OnOutOfMemoryError and larger heaps it seems (which can prevent it from working): https://bugs.openjdk.java.net/browse/JDK-8027434 ",
            "id": "comment-15101050"
        },
        {
            "date": "2016-01-15T02:25:06+0000",
            "author": "Greg Wilkins",
            "content": "So I'm going to close the [jetty issue](https://bugs.eclipse.org/bugs/show_bug.cgi?id=485794) for this as won't fix.\n\nI think our current behaviour of bravely and foolishly trying to limp on is probably the correct one - given that OOOME handling is on throwing not catching.  Anyway, thanks for bringing this to our attention - was educational.        \n\nDo open more jetty issues if you have any other concerns/ideas about our error handling or anything else.\n\ncheers ",
            "id": "comment-15101076"
        },
        {
            "date": "2016-01-15T15:43:28+0000",
            "author": "Shawn Heisey",
            "content": "Greg Wilkins, thank you for your willingness to help, and for your investigation efforts. ",
            "id": "comment-15101944"
        },
        {
            "date": "2016-03-22T16:40:49+0000",
            "author": "ASF subversion and git services",
            "content": "Commit fe54da0b58ed18a38f3dd436dd3f30fbee9acbbf in lucene-solr's branch refs/heads/jira/SOLR-445 from Chris Hostetter (Unused)\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fe54da0 ]\n\nSOLR-445: remove nocommits related to OOM trapping since SOLR-8539 has concluded that this isn't a thing the java code actually needs to be defensive of ",
            "id": "comment-15206742"
        }
    ]
}