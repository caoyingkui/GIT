{
    "id": "LUCENE-6293",
    "title": "TimSort bug",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Robert pointed me to http://envisage-project.eu/proving-android-java-and-python-sorting-algorithm-is-broken-and-how-to-fix-it/ yesterday which explains how most implementations of TimSort are broken. We should check our TimSorter.",
    "attachments": {
        "LUCENE-6293.patch": "https://issues.apache.org/jira/secure/attachment/12700744/LUCENE-6293.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14336300",
            "author": "Adrien Grand",
            "date": "2015-02-25T09:43:14+0000",
            "content": "Given the description of the problem, I think we suffer from it too. However when I tried the test code with Lucene's ArrayUtil.timSort instead of Java's Arrays.sort I could not reproduce the problem. I suspect this is due to some differences in implementation details... I'll try to dig more. "
        },
        {
            "id": "comment-14336323",
            "author": "Adrien Grand",
            "date": "2015-02-25T10:17:03+0000",
            "content": "OK I found the reason: Our TimSorter picks minRunLength  based on the description at http://svn.python.org/projects/python/trunk/Objects/listsort.txt (look for \n\"Computing minrun\") which gives a value between 32 and 65 while Java picks a value which is always less than or equal to 32. If I hack the test code to use the same formula as our TimSorter, I can reproduce the bug. "
        },
        {
            "id": "comment-14336346",
            "author": "Uwe Schindler",
            "date": "2015-02-25T10:54:20+0000",
            "content": "Once we fixed the bug, should we put Collections.sort/Arrays.sort on the forbidden list? We currently sometimes also use the Java version - especially the one from Collections, although this one cannot do in-place sorting and clones the whole List into an array for sorting. "
        },
        {
            "id": "comment-14336350",
            "author": "Adrien Grand",
            "date": "2015-02-25T11:00:51+0000",
            "content": "I am not sure this is necessary. This bug cannot corrupt data, it can just raise an ArrayIndexOutOfBoundsException if you happen to have a large array which has a very specific pattern. So it is rather unlikely to happen in practice, and even if it happens it would not corrupt data and would be easy to identify as \"TimSort\" would be in the stack trace? "
        },
        {
            "id": "comment-14336419",
            "author": "Adrien Grand",
            "date": "2015-02-25T12:05:22+0000",
            "content": "There are two suggested ways to fix the issue, either change the max stack size or change the condition upon which consecutive runs are collapsed. I opted for the first one which is easier to implement.\n\nSince the code that demonstrates the bug is under ASL 2.0, I reused it for the test case. "
        },
        {
            "id": "comment-14336565",
            "author": "Michael McCandless",
            "date": "2015-02-25T14:45:37+0000",
            "content": "The fix looks low-risk here?  And given how we rely on this sorting impl in Lucene, I think we should fix this in 4.10.4? "
        },
        {
            "id": "comment-14336575",
            "author": "Adrien Grand",
            "date": "2015-02-25T14:56:05+0000",
            "content": "The fix is low-risk but I think the bug is low-risk too: you need very special patterns in your data and it cannot trigger corruptions (it can make sorting fail with an ArrayIndexOutOfBoundsException but if you don't hit it then the output is sorted). So I would rather like to wait a bit before backporting. "
        },
        {
            "id": "comment-14336582",
            "author": "Michael McCandless",
            "date": "2015-02-25T15:03:37+0000",
            "content": "OK that makes sense Adrien Grand let's not backport. "
        },
        {
            "id": "comment-14336727",
            "author": "Hoss Man",
            "date": "2015-02-25T16:38:52+0000",
            "content": "There are two suggested ways to fix the issue, either change the max stack size or change the condition upon which consecutive runs are collapsed. I opted for the first one which is easier to implement.\n\nDoesn't that cause excessive/unneccessary array allocation? .... it sounds like the same fix the JVM team applied that the original bug reporter lamented was inefficient...\n\nThe reaction of the Java developer community to our report is somewhat disappointing: instead of using our fixed (and verified!) version of mergeCollapse(), they opted to increase the allocated runLen \u201csufficiently\u201d. As we showed, this is not necessary. In consequence, whoever uses java.utils.Collection.sort() is forced to over allocate space. Given the astronomical number of program runs that such a central routine is used in, this leads to a considerable waste of energy. "
        },
        {
            "id": "comment-14336738",
            "author": "Robert Muir",
            "date": "2015-02-25T16:46:30+0000",
            "content": "Lets fix the bug first and optimize later.\n\nFrom a software engineering perspective, this is the safest fix. \n\nPlease, no high-risk fixes for low-risk bugs. "
        },
        {
            "id": "comment-14336753",
            "author": "Adrien Grand",
            "date": "2015-02-25T17:02:19+0000",
            "content": "For the record, the over-allocation which is mentionned here translates in our case to allocating an int[] array of length 50 instead of 41 per TimSort run. "
        },
        {
            "id": "comment-14338205",
            "author": "ASF subversion and git services",
            "date": "2015-02-26T10:31:06+0000",
            "content": "Commit 1662410 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1662410 ]\n\nLUCENE-6293: Fixed TimSorter bug. "
        },
        {
            "id": "comment-14338214",
            "author": "ASF subversion and git services",
            "date": "2015-02-26T10:41:06+0000",
            "content": "Commit 1662411 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1662411 ]\n\nLUCENE-6293: Fixed TimSorter bug. "
        },
        {
            "id": "comment-14495245",
            "author": "Timothy Potter",
            "date": "2015-04-15T00:30:14+0000",
            "content": "Bulk close after 5.1 release "
        }
    ]
}