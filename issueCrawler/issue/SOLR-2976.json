{
    "id": "SOLR-2976",
    "title": "stats.facet no longer works on single valued trie fields that don't use precision step",
    "details": {
        "affect_versions": "3.5",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "As reported on the mailing list, 3.5 introduced a regression that prevents single valued Trie fields that don't use precision steps (to add course grained terms) from being used in stats.facet.\n\ntwo immediately obvious problems...\n\n1) in 3.5 the stats component is checking if isTokenzed() is true for the field type (which is probably wise) but regardless of the precisionStep used, TrieField.isTokenized is hardcoded to return true\n\n2) the 3.5 stats faceting will fail if the FieldType is multivalued - it doesn't check if the SchemaField is configured to be single valued (overriding the FieldType)\n\n\nso even if a user has something like this in their schema...\n\n\n<fieldType name=\"long\" class=\"solr.TrieLongField\" precisionStep=\"0\" omitNorms=\"true\" />\n<field name=\"ts\" type=\"long\" indexed=\"true\" stored=\"true\" required=\"true\" multiValued=\"false\" />\n\n\n\n...stats.facet will not work.",
    "attachments": {
        "SOLR-2976.patch": "https://issues.apache.org/jira/secure/attachment/12508028/SOLR-2976.patch",
        "SOLR-2976_3.4_test.patch": "https://issues.apache.org/jira/secure/attachment/12508027/SOLR-2976_3.4_test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13171259",
            "date": "2011-12-16T22:18:03+0000",
            "content": "FYI: doing some code skimming the current implications of this are:\n\n\n\tQEC will unneccessarily fail to work if your uniqueKey is a precisionStep=0 TrieField\n\tstats.facet will mistakenly refuse to facet on a multiValued=false precisionStep=0 TrieField\n\n\n\nRelated thread: http://www.mail-archive.com/solr-user@lucene.apache.org/msg60073.html "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13171269",
            "date": "2011-12-16T22:26:12+0000",
            "content": "IIRC the meaning of isTokenized was taken from lucene long ago:  \"True if this field's value should be analyzed\".\nLooking at the current uses of isTokenized in Solr, it's been a bit abused and actually may no longer be needed. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13171274",
            "date": "2011-12-16T22:29:22+0000",
            "content": "Hi Hoss,\n\nin general the precisionStep is somehow inconsistent between Solr and Lucene. The problem is that precisionStep==0 is not defined at all. The minimium precision step in Lucene is 1 and means lot's of terms per distinct value. What Solr defines as precisionStep 0 is in Lucene everything >= 64 (for longs) or >= 32 for ints.\n\nIn general it is confusing that we have two precSteps. I would prefer it in this issue to clean this up and make the solr schema simply allow a symbolic constant for the precision step (as 0 makes no sense and infinite is not a valid number in Integer.valueOf). How about precisionStep=\"infinite\", because that would be consistent with Lucene. For backwards compatibility, 0 could still be supported, but Lucene throws IAE. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13171277",
            "date": "2011-12-16T22:31:59+0000",
            "content": "IIRC the meaning of isTokenized was taken from lucene long ago: \"True if this field's value should be analyzed\". Looking at the current uses of isTokenized in Solr, it's been a bit abused and actually may no longer be needed.\n\nIt is often used in solr as \"multiValued\", which is a separate property of a field. +1 to remove is Tokenized (especially, as Lucene no longer differentiates between tokenized and not tokenized. Every field in Lucene trunk has a TokenStream/AttributeSource, although it returns only one token. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13171286",
            "date": "2011-12-16T22:46:19+0000",
            "content": "precisionStep=\"infinite\"\n\nHeh.  Try explaining that one to users \n\n\"0 disables the more-tokens-for-faster-range-queries feature\" seems pretty understandable to most people. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13171288",
            "date": "2011-12-16T22:49:29+0000",
            "content": "it's been a bit abused and actually may no longer be needed.\n\nGood point ... other then the two uses i mentioned, i think LukeRequestHandler is the only other place (outside of FieldType) in Solr that even cares about FieldType.isTokenized()\n\n(other things internally to FieldType care about the TOKENIZED property, but even that isn't used by much other then TextField) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13171290",
            "date": "2011-12-16T22:50:38+0000",
            "content": "I just prefer a non-numeric. And even LucidImagination-people dont understand this (I had a discussion with one of your employees who did not know). When I explained it to him what precision step means, he said:\n\n\n\tDocument it in the schema / Lucene NRQ javadocs\n\tDocument it in the Wiki\n\trename the 0 as it makes no sense\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13171292",
            "date": "2011-12-16T22:53:27+0000",
            "content": "in general the precisionStep is somehow inconsistent between Solr and Lucene\n\nit's not inconsistent, Solr's TrieField uses Integer.MAX_VALUE correctly, it just happily accepts config values <=0 as being equivalent to specifying Integer.MAX_VALUE  (the javadocs for TrieField don't even say you can specify \"0\" ... they say \"Note that if you use a precisionStep of 32 for int/float and 64 for long/double/date, then multiple terms will not be generated\") .. if you want to add yet another symbolic constant for Integer.MAX_VALUE i'm fine with that, but please open a new issue \u2013 it's totally orthogonal to what we're talking about here. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13171295",
            "date": "2011-12-16T22:59:11+0000",
            "content": "Sorry Hoss, this annoys me since long time and this issue seemed to be the right place to complain about precStep==0, which makes no sense (sorry, Yonik). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13171303",
            "date": "2011-12-16T23:21:28+0000",
            "content": "No need to apologize for disagreeing, but I still think \"0\" is fine.\n\nAnd if we're pushing for consistency, perhaps Lucene should change to something more easily understood as \"disable this feature\". "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13171307",
            "date": "2011-12-16T23:27:03+0000",
            "content": "I would agree to also use a constant in Lucene (that maps internally to Integer.MAX_VALUE). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13171310",
            "date": "2011-12-16T23:41:39+0000",
            "content": "Seriously guys: start a new fucking issue if you care so much, and debate the optimal API/docs/sample configs for precisionStep there.\n\nwhether a new symbolic constant is added really has ZERO bearing on this issue, which is about whether or not TrieField.isTokenized() is broken.\n\n(this is what the \"related issues\" Jira link type is for) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13172849",
            "date": "2011-12-20T02:07:19+0000",
            "content": "I started looking into this today and realized there are additional problems with the stats faceting code changed in 3.5 as it relates to tried fields and the original problem report.  Updating the summary/description to expand the scope "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13172865",
            "date": "2011-12-20T02:27:36+0000",
            "content": "SOLR-2976_3.4_test.patch is a simple test patch against 3.4 showing the basics of what use to work when trying to do stats faceting on trie fields.  If you apply this patch to 3.5 or the 3x branch (requires massaging as the line numbers have changed heavily) you'll see the test fail.\n\nSOLR-2976.patch shows my attempt at fixing some of these problems on trunk...\n\n1) fix TrieField.isTokenized to be based on precision step\n2) test TrieField.isTokenized\n3) fix StatsComponent to look at the SchemaField not just the FieldType\n4) make StatsComponentTest give better errors\n5) make StatsComponentTest try to use stats.facet on a trie field with one term per value\n\nBut doing this has exposed a new bug i don't fully understand yet: Test now throws an NFE that seems to be coming from the code for generating the stat's facets on a trie field \u2013 but it is dependent on which field type we are generating stats over.  If the stats are against a trie field, then the faceting on a trie field fails \u2013 but if the stats are on a simple numeric, then the faceting on a trie field passes.  \n\nNeed to wade into this more later...\n\n\n    [junit] Testcase: testStats(org.apache.solr.handler.component.StatsComponentTest):\tCaused an ERROR\n    [junit] exception with field: stats_ti\n    [junit] java.lang.RuntimeException: exception with field: stats_ti\n    [junit] \tat org.apache.solr.handler.component.StatsComponentTest.testStats(StatsComponentTest.java:68)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase$3$1.evaluate(LuceneTestCase.java:528)\n    [junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:165)\n    [junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:57)\n    [junit] Caused by: java.lang.RuntimeException: Exception during query\n    [junit] \tat org.apache.solr.util.AbstractSolrTestCase.assertQ(AbstractSolrTestCase.java:267)\n    [junit] \tat org.apache.solr.handler.component.StatsComponentTest.doTestFacetStatisticsResult(StatsComponentTest.java:275)\n    [junit] \tat org.apache.solr.handler.component.StatsComponentTest.testStats(StatsComponentTest.java:65)\n    [junit] Caused by: java.lang.NumberFormatException: For input string: \"N\"\n    [junit] \tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:48)\n    [junit] \tat java.lang.Integer.parseInt(Integer.java:449)\n    [junit] \tat java.lang.Integer.parseInt(Integer.java:499)\n    [junit] \tat org.apache.solr.schema.TrieField.readableToIndexed(TrieField.java:303)\n    [junit] \tat org.apache.solr.schema.TrieField.readableToIndexed(TrieField.java:294)\n    [junit] \tat org.apache.solr.schema.TrieField.toInternal(TrieField.java:324)\n    [junit] \tat org.apache.solr.request.UnInvertedField.getStats(UnInvertedField.java:609)\n    [junit] \tat org.apache.solr.handler.component.SimpleStats.getStatsFields(StatsComponent.java:235)\n    [junit] \tat org.apache.solr.handler.component.SimpleStats.getStatsCounts(StatsComponent.java:211)\n    [junit] \tat org.apache.solr.handler.component.StatsComponent.process(StatsComponent.java:70)\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13178945",
            "date": "2012-01-03T19:15:35+0000",
            "content": "somehow forgot to ever link this issue to the one that seems to have caused it "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13178949",
            "date": "2012-01-03T19:17:28+0000",
            "content": "i haven't had any more time to try and make sense of this, and don't anticipate doing so in the near future.\n\ngiving to ryan since he worked on SOLR-1023 in the hopes that it's something he understands and can help bang out a fix for easily. "
        },
        {
            "author": "jefferyyuan",
            "id": "comment-13536499",
            "date": "2012-12-19T22:42:49+0000",
            "content": "Hit this problem recently.\nTo fix this problem. and support facet search on this field, I have to create another field,  with precisionStep=\"2147483647\"(Integer,MAX_VALUE), this is not good, as it takes more disk size, and it's hard to explain to customers why we need this field.\n\nSo do we have plan to fix this problem? Thanks  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13536575",
            "date": "2012-12-19T23:26:34+0000",
            "content": "Its also the case that if precisionStep != 0, faceting on a single-valued numeric field builds an UninvertedField (which is unnecessary, as the fieldcache can handle this just fine). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13536637",
            "date": "2012-12-20T00:24:47+0000",
            "content": "Its also the case that if precisionStep != 0, faceting on a single-valued numeric field builds an UninvertedField (which is unnecessary, as the fieldcache can handle this just fine).\n\nThat shouldn't be the case.  The current algorithms check Solr's idea of single valued vs multi-valued - it doesn't matter how many tokens are indexed per value. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13536641",
            "date": "2012-12-20T00:34:10+0000",
            "content": "Yonik: Ill port over my test. But i think this is the piece of the code that causes it in SimpleFacets:\n\nboolean multiToken = sf.multiValued() || ft.multiValuedFieldCache();\n\nif (TrieField.getMainValuePrefix(ft) != null) {\n  // A TrieField with multiple parts indexed per value... currently only\n  // UnInvertedField can handle this case, so force it's use.\n  enumMethod = false;\n  multiToken = true;\n}\n\n\n\nThis second \"if\" I think causes the problem? It only returns null if precisionStep is 0:\n\nif (trie.precisionStep  == Integer.MAX_VALUE)\n  return null;\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13536644",
            "date": "2012-12-20T00:41:32+0000",
            "content": "Sorry Ryan, I didnt mean to assign myself. My browser just went psycho for a bit! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13536688",
            "date": "2012-12-20T02:02:53+0000",
            "content": "Verified the problem.\nJust do: \n\nhttp://localhost:8983/solr/select?q=*:*&facet=true&facet.field=foo_ti\n\n\n\nAnd then observe the log:\n\nDec 19, 2012 9:00:12 PM org.apache.solr.request.UnInvertedField <init>\nINFO: UnInverted multi-valued field {field=foo_ti,memSize=4288,tindexSize=0,time=0,phase1=0,nTerms=0,bigTerms=0,termInstances=0,uses=0}\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13536703",
            "date": "2012-12-20T02:19:25+0000",
            "content": "Does this faceting limitation simply date back to before trie fields with precision step > 0 couldn't use the fieldCache?  Was introduced over 3 years ago (SOLR-1492).  Maybe we just forgot to remove it... "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13536797",
            "date": "2012-12-20T05:50:51+0000",
            "content": "did not know this was assigned to me....  i'll step out since I don't fully understand what is happening "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13537039",
            "date": "2012-12-20T14:22:16+0000",
            "content": "Its not like the code comment is wrong, it just seems like we could do stuff more efficiently.\n\nI commented on this issue (maybe its unrelated, but it seems to also affect the stats thing too), because i was surprised to see\nthe uninverting multi-valued field for a single-valued trie field when running a test. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13585163",
            "date": "2013-02-23T16:44:11+0000",
            "content": "if precisionStep != 0, faceting on a single-valued numeric field builds an UninvertedField \n\nI think the last commits on SOLR-3855 fix it (they even make faceting use the numeric field caches instead of the terms index). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13699747",
            "date": "2013-07-04T04:00:11+0000",
            "content": "As adrien mentioned, the underlying issue is fixed (stats.facet implemented differently).\n\nHowever, its still bogus that this fieldtype returns true for isTokenized(), and that it has a crazy custom attribute-wrapping TrieTokenizerFactory that is totally unnecessary: at index-time createField() is just using IntField/FloatField/etc, for range-queries the analyzer is also not used (it forms getRangeQuery), and for term-queries getFieldQuery already does the right thing. \n\nThis patch removes this stuff. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13699763",
            "date": "2013-07-04T04:38:53+0000",
            "content": "+1, looks like legacy stuff that's no longer needed/used. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13699790",
            "date": "2013-07-04T06:13:23+0000",
            "content": "+1, please remove useless TrieTokenizer! The only backside is, that you can no longer \"inspect trie tokens\" with AnalysisRequestHandler, but that's not really an issue, because numeric terms are an implementation detail  I just used it sometimes to demonstrate users how trie terms look like.\n\nFrom ElasticSearch I know that they also added this Tokenizer (Adrien did it), but there it was done for highlighting. If this is the case in Solr, too, we should keep it. How is highlighting affected - or does high\u00f6lighting on NumericFields does not work at all in Solr? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13700016",
            "date": "2013-07-04T11:18:12+0000",
            "content": "Highlighting NumericFields is disabled in solr. This patch is not related to that.\n\n\n    // TODO: Currently in trunk highlighting numeric fields is broken (Lucene) -\n    // so we disable them until fixed (see LUCENE-3080)!\n    // BEGIN: Hack\n    final SchemaField schemaField = schema.getFieldOrNull(fieldName);\n    if (schemaField != null && (\n      (schemaField.getType() instanceof org.apache.solr.schema.TrieField) ||\n      (schemaField.getType() instanceof org.apache.solr.schema.TrieDateField)\n    )) return;\n    // END: Hack\n\n "
        }
    ]
}