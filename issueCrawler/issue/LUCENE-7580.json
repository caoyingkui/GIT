{
    "id": "LUCENE-7580",
    "title": "Spans tree scoring",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Won't Fix",
        "affect_versions": "7.0",
        "status": "Resolved",
        "type": "Improvement",
        "components": [
            "core/search"
        ],
        "fix_versions": []
    },
    "description": "Recurse the spans tree to compose a score based on the type of subqueries and what matched",
    "attachments": {
        "LUCENE-7580.patch": "https://issues.apache.org/jira/secure/attachment/12841671/LUCENE-7580.patch",
        "Elschot20170326Counting.pdf": "https://issues.apache.org/jira/secure/attachment/12860574/Elschot20170326Counting.pdf"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15720059",
            "date": "2016-12-04T14:49:31+0000",
            "content": "\"Recurse the spans tree to compose a score based on the type of subqueries ... and what matched\"\nwas suggested in September 2007 on the java-user list http://www.gossamer-threads.com/lists/lucene/java-user/53027 .\n\nCurrently SpanScorer provides score values that have no real meaning when more than one SpanTermQuery is used.\n\nPatch follows. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15720066",
            "date": "2016-12-04T14:53:10+0000",
            "content": "In the patch, SpansTreeQuery is a wrapper for SpanQuery that uses basically the same scoring as the scoring for other queries.\nWhen all term occurrences match at top level or at 0 distance the score is the same as\nthe score for a boolean OR over the terms, independently of the Similarity that is used.\nSpansTreeScorer scores each query term matching occurrence, and it applies discounts for non matching terms\nand for distance matches. It also uses weights of subqueries.\n\nThe matching occurrences are recorded per document in the spans tree at each top level match of a document.\nFor each match SpansTreeScorer descends the tree down to the leaf level of the terms of each match.\nSpansDocScorer objects are used as the tree nodes, there is one for each supported Spans.\n\nEach matching term occurrence is recorded with a slop factor.\nAt the top level this slop factor is normally 1, and for each span near nesting level\nthe slop factor at the match is multiplied into this.\n\nThe term frequency scoring from the Similarity is used per matching term occurrence,\nand these term occurrence scores are weighted by the slop factors sorted in decreasing order.\nThe purpose of using the given slop factors in decreasing order is to provide scoring consistency\nbetween span near queries that only differ in the maximum allowed slop.\nThis consistency requires that an extra match with a lower slop increases the score of the document.\nI would expect scoring to be consistent this way, but I'm not 100% sure.\n\nThe non matching term occurrences get a score that is the difference of\nthe normal document term frequency score and the term frequency score for the matching terms.\nThis non matching score is weighted by the slop factor of a non matching distance.\nThe non matching distance is a parameter that must be provided.\nThis non matching distance can for example be chosen as a little larger\nthan the largest distance used in the span near queries that are wrapped.\n\nSpansTreeQuery is implemented for any combination of\nSpanNearQuery, SpanOrQuery, SpanTermQuery, SpanBoostQuery,\nSpanNotQuery, SpanFirstQuery, SpanContainingQuery and SpanWithinQuery.\n\nSee the javadocs and the test code on how to use SpansTreeQuery. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15720070",
            "date": "2016-12-04T14:55:16+0000",
            "content": "SpansTreeQuery is implemented as a wrapper in order to change the existing code as little as possible.\nBut it was necessary to take DisjunctionSpans out of SpanOrQuery.\nIn DisjunctionSpans there are only additions for inspection at a match,\notherwise it is the same as in the current SpanOrQuery.\n\nChanges to the current code are mostly additions to allow inspection of matches:\n\n\tFor the ordered/unordered nearspans a common superclass ConjunctionNearSpans is added that provides the SimScorer and a currentSlop() method.\n\tDisjunctionSpans allows inspection of all subspans, of the subspans at the current doc, and of the subspans with the first and second positions.\n  SpanPositionQueue also has some additions for this.\n\tIn the TermSpans constructor the currently unused SimScorer argument is saved so it can be used to score() the various term frequencies.\n\tIn Spans a reference to a SpansDocScorer object is added to allow direct access by disjunctions.\n\n\n\nThe only existing state that is changed is the use of needsScores (instead of the current false)\nfor weights of subqueries of SpanOrQuery and SpanNearQuery and for the weight of the included subquery of SpanNotQuery.\n\nAll core tests pass with the patch applied on the master branch. Ant precommit also passes.\n\nThere is a correction to the javadocs of Similarity.Simscorer on the use of float for term frequencies.\n\nThe patch also adds a constructor for SpanOrQuery with an extra parameter maxDistance.\nWhen wrapped in a SpansTreeQuery, this SpanOrQuery will provide a slop factor at each match\nthat is determined by the minimum distance between any two subspans where possible,\nand this distance is maximized to the given maxDistance.\nThe class DisjunctionNearSpans and its SpansDocScorer implement this.\n\nAll score calculations are done with doubles.\nMost of the additions have public/protected visibility in order to allow easy extension.\n\nIn case there is interest in back porting this, a patch for branch_6x can be made available.\nThe tests on branch_6x disable the coordination in BooleanQuery and they only use the BM25 similarity.\n ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15720073",
            "date": "2016-12-04T14:56:40+0000",
            "content": "Some related issues, thanks for these discussions:\n\nLUCENE-533\nLUCENE-2878\nLUCENE-2879\nLUCENE-2880\nLUCENE-6226\nLUCENE-6371\nLUCENE-6466\nLUCENE-7398\n\n\nSome related web pages:\n\nhttp://www.gossamer-threads.com/lists/lucene/java-user/33902 March 2006.\n\nhttp://www.gossamer-threads.com/lists/lucene/java-user/53027 September 2007, suggests to:\n\"recurse the spans tree to compose a score based on the type of subqueries (near, and, or, not) and what matched.\"\n\nhttp://www.gossamer-threads.com/lists/lucene/java-user/60103 April 2008.\n\nhttp://www.flax.co.uk/blog/2016/04/26/can-make-contribution-apache-solr-core-development/ see point 4.\n\nHow to use BM25:\nhttp://opensourceconnections.com/blog/2015/10/16/bm25-the-next-generation-of-lucene-relevation/\n ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15720077",
            "date": "2016-12-04T14:58:39+0000",
            "content": "What SpansTreeQuery does not do, and some rough edges:\n\nThe SpansDocScorer objects do the match recording and scoring, and there is one for each Spans.\nThese SpansDocScorer objects might be merged into their Spans to reduce the number of objects.\nRelated: how to deal with the same term occurring in more than one subquery? See also LUCENE-7398.\n\nNormally the term frequency score has a diminishing contribution for extra occurrences.\nIn the patch the slop factors for a term are applied in decreasing order on these diminished contributions.\nThis requires sorting of the slop factors.\nSorting the slop factors could be avoided when an actual score of a single term occurrence was available.\nIn that case the given slop factor could be used as a weight on that score.\nIt might be possible to estimate an actual score for a single term occurrence\nfrom the distances to other occurrences of the same term.\nSimilarly, the decreasing term frequency contributions can be seen as a proximity weighting for the same term (or subquery):\nthe closer a term occurs to itself, the smaller its contribution.\nThis might be refined by using the actual distances to other the term occurrences (or subquery occurrences)\nto provide a weight for each term occurrence. This is unusual because the weight decreases for smaller distances.\n\nThe slop factor from the Similarity may need to be adapted because of the way it is combined here\nwith diminishing term contributions.\n\nAnother use of a score of each term occurrence could be to use the absolute term position\nto influence the score, possibly in combination with the field length.\n\nThere is an assert in TermSpansDocScorer.docScore() that verifies that\nthe smallest occurring slop factor is at least as large as the non matching slop factor.\nThis condition is necessary for consistency.\nInstead of using this assert, this condition might be enforced by somehow\nautomatically determining the non matching slop factor.\n\nThis is a prototype. No profiling has been done, it will take more CPU, but I have no idea how much.\nGarbage collection might be affected by the reference cycles between the SpansDocScorers\nand their Spans.\n\nSince this allows weighting of subqueries, it might be possible to implement synonym scoring\nin SpanOrQuery by providing good subweights, and wrapping the whole thing in SpansTreeQuery.\nThe only thing that might still be needed then is a SpansDocScorer that applies the SimScorer.score()\nover the total term frequency of the synonyms in a document.\n\nSpansTreeScorer multiplies the slop factor for nested near queries at each level.\nAlternatively a minimum distance could be passed down.\nThis would need to change recordMatch(float slopFactor) to recordMatch(int minDistance).\nWould minDistance make sense, or is there a better distance?\n\nWhat is a good way to test whether the score values from SpansTreeQuery actually improve on\nthe score values from the current SpanScorer?\n\nThere are no tests for SpanFirstQuery/SpanContainingQuery/SpanWithinQuery.\nThese tests are not there because these queries provide FilterSpans and that is already supported for SpanNotQuery.\n\nThe explain() method is not implemented for SpansTreeQuery.\nThis should be doable with an explain() method added to SpansTreeScorer to provide the explanations.\n\nThere is no support for PayloadSpanQuery.\nPayloadSpanQuery is not in here because it is not in the core module.\nI think it can fit here in because PayloadSpanQuery also scores per matching term occurrence.\nThen Spans.doStartCurrentDoc() and Spans.doCurrentSpans() could be removed.\n\nIn case this is acceptable as a good way to score Spans:\nSpans.width() and Scorer.freq() and SpansDocScorer.docMatchFreq() might be removed.\nWould it make sense to implement child Scorers in the tree of SpansDocScorer objects? ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15740398",
            "date": "2016-12-11T21:41:26+0000",
            "content": "Patch of 11 Dec 2016.\n\nAdd automatically determining a weight for non matching terms. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15740402",
            "date": "2016-12-11T21:44:19+0000",
            "content": "Compared to the previous patch, this adds a nonMatchSlop attribute to SpanNearQuery,\nand drops the nonMatchSlopFactor argument from SpansTreeQuery.\n\nnonMatchSlop is the distance for determining a slop factor that is to be used for non matching occurrences of a SpanNearQuery.\nSmaller values for this distance will increase the score contribution of non matching occurrences via\nSimScorer.computeSlopFactor()\n\nBut smaller values for this distance, i.e. higher score contribution of non matching occurrences,\nmay lead to a scoring inconsistency between two span near queries that only differ in the allowed slop.\nFor example consider query A with a smaller allowed slop and query B with a larger one.\nFor query B there can be more matches, and these should increase the score of B\nwhen compared to the score of A.\nSo for each extra match at B, the non matching score for query A should be lower than\nthe matching score for query B.\nThis may not be the case when the non matching score contribution is too high.\n\nTo have consistent scoring between two such queries,\nchoose a non matching slop that is larger than the largest allowed match slop,\nand provide that non matching slop to both queries.\nIn case this consistency is not needed, nonMatchSlop can be chosen to be somewhat\nlarger than the maximum allowed match slop.\n\nThis nonMatchSlop is used in SpansTreeWeight to compute a minimal nested slop factor\nfrom the maximum possible slops that can occur\nin a SpanQuery for the nested SpanNearQueries and for nested SpanOrQueries with distance.\nFinally, this minimal nested slop factor is used as the weight for scoring non matching terms.\n\nThe default nonMatchSlop for SpanNearQuery is large, Integer.MAX_VALUE/2.\nTherefore by default non matching occurrences have no real score contribution. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15740406",
            "date": "2016-12-11T21:47:00+0000",
            "content": "Some scientific articles on this subject:\n\nMetzler, Donald, and W. Bruce Croft.\n\"A Markov random field model for term dependencies.\"\nProceedings of the 28th annual international ACM SIGIR conference\non Research and development in information retrieval. ACM, 2005.\n\nIn section 2.3 they use terms and ordered and unordered phrases\nThe ranking function is a weighted linear combination for these.\nThe optimal weights are about 80/10/10 for simple terms, unordered, and ordered.\nHere this led to the use of a weighting factor non matching occurrences.\nThey also found that the minimum distance is the best indicator of relevance.\n\n\nBendersky, Michael, and W. Bruce Croft.\n\"Modeling Higher-Order Term Dependencies in Information Retrieval using Query Hypergraphs\"\nSIGIR'12.\n\nThe concepts there can be nested, like span queries.\nThe approach there is much more general. For example:\n\n\tTable 2 shows the use of the frequency of a concept in various collections\nto determine its weight.\n\tIn section 2.4.2 there is an indication that the slop factor needs attention:\n\"... the existing term proximity measures usually capture close, sentence-level,\nco-occurrences of the query terms ... The dependency range is much longer for\nconcept dependencies.\"\n\n\n\n\nBlanco, Roi, and Paolo Boldi.\n\"Extending BM25 with multiple query operators.\"\nProceedings of the 35th international ACM SIGIR conference\non Research and development in information retrieval. ACM, 2012.\n\nThis scores regions with BM25F. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15764653",
            "date": "2016-12-20T16:53:37+0000",
            "content": "I have started using this in the tests for the surround query language, I'll open an issue for that later.\n\nThis found a bug in ConjunctionNearSpansDocScorer.recordMatch().\nA -1 slop can occur when the same term is used twice in a SpanNearQuery, and this causes a division by zero in computing the slop factor in from recordMatch().\nThis can be easily avoided by using 0 slop in such cases. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15786347",
            "date": "2016-12-29T23:07:09+0000",
            "content": "Patch of 29 Dec 2016.\n\nCompared to the previous patch, this adds:\n\nLimiting the max allowed slop to Integer.MAX_VALUE-1 in the SpanNearQuery constructor and in TestSpanSearchEquivalence. An actual slop of Integer.MAX_VALUE causes an overflow in distance+1 that is used in computeSlopFactor. Since the same limitation is already present for indexed positions, I would not expect this slop factor miscalculation to actually occur.\n\nThe negative slops that occur for overlapping spans are changed to 0 before passing them to computeSlopFactor in NearSpansDocScorer in the patch here.\n\nThe non match distance passed to SpanNearQuery in the patch is verified to be at least the given slop.\n\nA wrapper method SpansTreeScorer.wrap() is added that will wrap the span (subqueries of a) given query in a SpansTreeQuery. This works for span subqueries of BooleanQuery, DisjunctionMaxQuery and BoostQuery. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15805746",
            "date": "2017-01-06T21:09:47+0000",
            "content": "Patch of 6 Jan 2017.\n\nThis contains:\n\nThe changes in the patch of 30 Dec 2016.\n\nSupport for SpanSynonymQuery, see SynonymSpans and SynonymSpansDocScorer.\n\nClass AsSingleTermSpansDocScorer as common superclass for TermSpansDocScorer and SynonymSpansDocScorer. This is the place where matching and non matching term occurrences are scored with a SimScorer from Similarity while taking into account the slop factors.\n\nMethod SpansTreeQuery.wrapAfterRewrite() to use SpansTreeQuery.wrap() at the right moment. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15805767",
            "date": "2017-01-06T21:14:12+0000",
            "content": "SpanSynonymQuery is unusual here because it uses a single SpansDocScorer per segment, independent of the number of synonym terms.\n\nSince the TermSpans for SynonymSpans are Spans without a SpansDocScorer it makes some sense not to merge Spans and SpansDocScorer later.\n ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15902083",
            "date": "2017-03-08T22:27:08+0000",
            "content": "GitHub user PaulElschot opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/166\n\n    LUCENE-7580 of 8 Mar 2017.\n\n    Resolves a conflict with recent simplification of NearSpanUnordered.\n    Includes recent SpanSynonymQuery.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/PaulElschot/lucene-solr lucene7580-20170308\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/166.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #166\n\n\n\n ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-15942393",
            "date": "2017-03-26T18:42:18+0000",
            "content": "I just pushed two branches to github, pullable as:\n\ngit pull https://github.com/PaulElschot/lucene-solr lucene7580-20170326\n\nand\n\ngit pull https://github.com/PaulElschot/lucene-solr lucene7580report-20170326\n\nThe lucene7580-20170326 branch is an update of the previous pull request with a few minor improvements. Most notable is putting SpansTreeWeight into its own source file.\n\nThe  lucene7580report-20170326 branch is on top of the  lucene7580-20170326 branch, with the addition of the tex sources for a report on this issue.\nI'll attach the pdf shortly here. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15942396",
            "date": "2017-03-26T18:45:45+0000",
            "content": "Report of 26 March 2017, generated from the lucene7580report-20170326 branch and renamed to include the full date in the name. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15942400",
            "date": "2017-03-26T18:52:39+0000",
            "content": "Github user PaulElschot closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/166 ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-15942401",
            "date": "2017-03-26T18:52:56+0000",
            "content": "Github user PaulElschot commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/166\n\n    Superseded earlier today. ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16423036",
            "date": "2018-04-02T19:39:42+0000",
            "content": "Resolved: not enough interest. I'll keep the github branches available for now. ",
            "author": "Paul Elschot"
        }
    ]
}