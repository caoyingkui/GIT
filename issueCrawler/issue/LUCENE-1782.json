{
    "id": "LUCENE-1782",
    "title": "Rename OriginalQueryParserHelper",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/other"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.9",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We should rename the new QueryParser so it's clearer that it's\nLucene's default QueryParser, going forward, and not just a temporary\n\"bridge\" to a future new QueryParser.\n\nHow about we rename oal.queryParser.original -->\noal.queryParser.standard (can't use \"default\": it's a Java keyword)?\nThen, leave the OriginalQueryParserHelper under that package, but\nsimply rename it to QueryParser?\n\nThis way if we create other sub-packages in the future, eg\nComplexPhraseQueryParser, they too can have a QueryParser class under\nthem, to make it clear that's the \"top\" class you use to parse\nqueries.",
    "attachments": {
        "LUCENE-1782.patch": "https://issues.apache.org/jira/secure/attachment/12415644/LUCENE-1782.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-08-05T04:40:32+0000",
            "content": "I really liked the idea Mike!\n\nIf QueryParser is under \"standard\", so it's the standard QueryParser. Makes sense, so, I would like to suggest to do the same for:\n\n-OriginalBooleanQueryNodeBuilder\n-OriginalQueryBuilder\n-OriginalBooleanQueryTreeBuilder\n-OriginalQueryConfigHandler\n-OriginalBooleanQueryNode\n-OriginalSyntaxParser (and all the other classes generated by JavaCC)\n-OriginalQueryNodeProcessorPipeline\n\nAnd you are right, \"default\" cannot be used for a package name, I just double checked that. I think \"standard\" is fine too  ",
            "author": "Adriano Crestani",
            "id": "comment-12739333"
        },
        {
            "date": "2009-08-05T14:43:56+0000",
            "content": "OK I'll work up a patch, renaming original -> standard, and I'll fix all the various support classes to remove their Original prefix. ",
            "author": "Michael McCandless",
            "id": "comment-12739531"
        },
        {
            "date": "2009-08-05T17:07:56+0000",
            "content": "Thanks, Mike. This sounds good. ",
            "author": "Michael Busch",
            "id": "comment-12739618"
        },
        {
            "date": "2009-08-05T18:13:26+0000",
            "content": "OK I have a huge patch working, but then I went to run JavaCC to regenerate the parser to make sure I've fixed the .jj file correctly, and there wasn't a javacc target in the build.xml.  So I added one (in build.xml) and ran javacc and got warnings like this:\n\nWarning: ParseException.java: File is obsolete.  Please rename or delete this file so that a new one can be generated for you.\n\n\n\nSo I removed ParseException.java and let JavaCC make a new one, but then hit compilation errors because the old ParseException.java manually subclassed from QueryNodeParseException (which is nice).   So I simply copied the old one back... is this expected?  Ie there's no way to customize how JavaCC generates its ParseException.java, so we manually override it?  If so, I'll add comment to build.xml saying so. ",
            "author": "Michael McCandless",
            "id": "comment-12739653"
        },
        {
            "date": "2009-08-05T18:20:33+0000",
            "content": "Hi Mike,\n\nI think ParseException is the only file we actually need to manually modify after its generation. I think the only manual change you are required to do is to extend QueryNodeParseException.\n\nGive it a try and let me know if it worked. ",
            "author": "Adriano Crestani",
            "id": "comment-12739656"
        },
        {
            "date": "2009-08-05T18:51:13+0000",
            "content": "Give it a try and let me know if it worked.\n\nLooks like we also make mods to it to accept MessageImpl:\n\n\n    [javac] Compiling 133 source files to /lucene/tmp.1782/build/contrib/queryparser/classes/java\n    [javac] /lucene/tmp.1782/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/SyntaxParser.java:465: cannot find symbol\n    [javac] symbol  : constructor ParseException(org.apache.lucene.messages.MessageImpl)\n    [javac] location: class org.apache.lucene.queryParser.standard.parser.ParseException\n    [javac]            {if (true) throw new ParseException(new MessageImpl(QueryParserMessages.INVALID_SYNTAX_FUZZY_LIMITS));}\n    [javac]                             ^\n    [javac] /lucene/tmp.1782/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException.java:34: cannot find symbol\n    [javac] symbol  : constructor QueryNodeParseException(java.lang.String)\n    [javac] location: class org.apache.lucene.queryParser.core.QueryNodeParseException\n    [javac]     super(\"\");\n    [javac]     ^\n    [javac] /lucene/tmp.1782/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException.java:52: cannot find symbol\n    [javac] symbol  : constructor QueryNodeParseException()\n    [javac] location: class org.apache.lucene.queryParser.core.QueryNodeParseException\n    [javac]     super();\n    [javac]     ^\n    [javac] /lucene/tmp.1782/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/ParseException.java:58: cannot find symbol\n    [javac] symbol  : constructor QueryNodeParseException(java.lang.String)\n    [javac] location: class org.apache.lucene.queryParser.core.QueryNodeParseException\n    [javac]     super(message);\n    [javac]     ^\n    [javac] /lucene/tmp.1782/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/EscapeQuerySyntaxImpl.java:270: cannot find symbol\n    [javac] symbol  : constructor ParseException(org.apache.lucene.messages.MessageImpl)\n    [javac] location: class org.apache.lucene.queryParser.standard.parser.ParseException\n    [javac]       throw new ParseException(new MessageImpl(\n    [javac]             ^\n    [javac] /lucene/tmp.1782/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/EscapeQuerySyntaxImpl.java:275: cannot find symbol\n    [javac] symbol  : constructor ParseException(org.apache.lucene.messages.MessageImpl)\n    [javac] location: class org.apache.lucene.queryParser.standard.parser.ParseException\n    [javac]       throw new ParseException(new MessageImpl(\n    [javac]             ^\n    [javac] /lucene/tmp.1782/contrib/queryparser/src/java/org/apache/lucene/queryParser/standard/parser/EscapeQuerySyntaxImpl.java:291: cannot find symbol\n    [javac] symbol  : constructor ParseException(org.apache.lucene.messages.MessageImpl)\n    [javac] location: class org.apache.lucene.queryParser.standard.parser.ParseException\n    [javac]       throw new ParseException(new MessageImpl(\n    [javac]             ^\n\n ",
            "author": "Michael McCandless",
            "id": "comment-12739671"
        },
        {
            "date": "2009-08-05T18:58:10+0000",
            "content": "Attached enormous patch.\n\nIt's much simpler than it looks... I used \"svn move\" to shuffle\neverything around, replaced \"original\" with \"standard\" everywhere,\nrenamed StandardQueryParserHelper to simply QueryParser, and stripped\nStandard prefix off a bunch of classes.  I also had to fix a handful\nof places that dealt with both the core & standard versions of the\nsame class, by fully qualifying the core one.\n\nOne class (StandardBooleanQueryNodeBuilder) had to keep its Standard\nprefix because BooleanQueryNodeBuilder was also in the same package.\n\nThe patch also add the \"javacc\" target to build.xml, and a comment\nexplaining about ParseException.java. ",
            "author": "Michael McCandless",
            "id": "comment-12739676"
        },
        {
            "date": "2009-08-05T19:51:25+0000",
            "content": "Thanks Mike \n\n\nThe patch also add the \"javacc\" target to build.xml, and a comment\nexplaining about ParseException.java.\n\nI think there is a readme file where the .jj file is located that explains all necessary manual changes required. I will review this readme later to check if everything is up to date. ",
            "author": "Adriano Crestani",
            "id": "comment-12739703"
        },
        {
            "date": "2009-08-05T23:19:35+0000",
            "content": "I plan to commit this in the next day or so... ",
            "author": "Michael McCandless",
            "id": "comment-12739817"
        },
        {
            "date": "2009-08-06T00:21:46+0000",
            "content": "\nrenamed StandardQueryParserHelper to simply QueryParser, and stripped\nStandard prefix off a bunch of classes.\n\nI don't like the idea of \"stripped Standard prefix\" or \"StandardQueryParserHelper to simply QueryParser\".\n\nMy reason for this, is that this change will make it more difficult for users\nthat want to use several implementations of diff parsers at same time.\n\nQueryParserHelper can be renamed to QueryParser,\nbut the other classes should keep the prefix name to avoid name conflicts,\nwhen using multiple parsers.\n\n\nexample (seudo java):\n\noqp = new OriginaleQueryParser(); \ncpqp = new ComplexPhraseQueryParser(); \n\nq1 = oqp.parser(\"normal query\");\nq2 = cpqp.parser(\"complex string\");\n\nb = new BooleanQuery();\n\nb.add(q1);\nb.add(q2);\n\n\n ",
            "author": "Luis Alves",
            "id": "comment-12739838"
        },
        {
            "date": "2009-08-06T00:30:59+0000",
            "content": "I also want to point to everyone, that we should push for developers \nthat want to have more control over the QueryParser, the use of SyntaxParser, \nProcessors, Builders interfaces.\n\nThe QueryParserHelper was supposed to be a basic class for basic usage.\n\nAnything that required extra tweaking of the QP should be done directly by\ncalling the StandartSynxtaParser, StandartProcessorPipeline, StandartQueryTreeBuilder \ndirectly, or by creating new ones.\n\nIf we expect the user to combine Processors, Builders, or syntaxParser implementations in the future,\nwe should avoid having name overlap in this initial design.\n\n ",
            "author": "Luis Alves",
            "id": "comment-12739840"
        },
        {
            "date": "2009-08-06T00:45:43+0000",
            "content": "Hi,\n\nI'm adding another example to try to describe the point of having unique names,\nto make it easier for future usage.\n\nBelow is another (seudo java) example.\nThe example uses 2 diferent SyntaxParser implementations, \nbut only one ProcessorPipeline and one QueryTreeBuilder implementation\nto create a single lucene Query.\n\n\nString uiquery = \"a AND b\";\n\nSyntaxParser ssp = new StandartSyntaxParser()\nQueryNode tree = ssp.parse(uiquery);\n\nSyntaxParser xmlsp = new XMLSyntaxParser();\nQueryNode filter = xmlsp.parse(\"<query><name='area' code='408'/></query>\");\n\nQueryNode bqn = new AndQueryNode();\nbqn.add(ssp);\nbqn.add(filter);\n\nQueryNodeProcessor spp = new StandartProcessorPipeline(config);\n\nQueryNode optimizedTree = spp.process(bqn);\n\nQuery q = builder.build(optimizedTree);\n\n ",
            "author": "Luis Alves",
            "id": "comment-12739844"
        },
        {
            "date": "2009-08-06T01:01:39+0000",
            "content": "To build the OriginalQueryParser.\n\nDelete \n\n\tOriginalQueryParser.java\n\tOriginalQueryParserConstants.java\n\tOriginalQueryParserTokenManager.java\n\tTokenMgrError.java\n\tJavaCharStream.java\n\tToken.java\n\n\n\nrun JavaCC on QueryParser.jj. That will generate the all the classes\n\nAlso, to avoid lots of warnings in the generated code:\n\n\tadd @SupressWarnings(\"all\") to QueryParserTokenManager.java, tokenMgrError.java,\n\tJavaCharStream.java, Token.java and JavaCharStream.java\n\timmediately preceding the class declaration. \n\n\n\n\n\tremove all imports from TokenMgrError.java\n\n\n\n\n\tIf you delete ParseException. You will need to edit the ParseException class to extend from QueryNodeParseException class\n  \"public class ParseException extends QueryNodeParseException\".\n  Recreate the all the constructors like this:\n\n    public ParseException(Token currentTokenVal,\n      int[][] expectedTokenSequencesVal, String[] tokenImageVal) {\n    super(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, initialise(\n        currentTokenVal, expectedTokenSequencesVal, tokenImageVal)));\n    this.currentToken = currentTokenVal;\n    this.expectedTokenSequences = expectedTokenSequencesVal;\n    this.tokenImage = tokenImageVal;\n  }\n\n  public ParseException(Message message) {\n    super(message);\n  }\n\n  public ParseException() {\n    super(new MessageImpl(QueryParserMessages.INVALID_SYNTAX, \"Error\"));\n  }\n\n\n\n\n\n\n\tfix all imports\n\n\n\nThis needs to be done after each time these files are generated by javacc. ",
            "author": "Luis Alves",
            "id": "comment-12739851"
        },
        {
            "date": "2009-08-06T01:10:54+0000",
            "content": "Hi Mike,\n\nI think I forgot to add a readme.txt to that folder describing how to build the OriginalQueryParser.jj.\nCan you please add that as part of this patch with the text in the comment above, If you are busy\nlet know I can submit another patch with that. ",
            "author": "Luis Alves",
            "id": "comment-12739855"
        },
        {
            "date": "2009-08-06T09:14:09+0000",
            "content": "\nMy reason for this, is that this change will make it more difficult for users\nthat want to use several implementations of diff parsers at same time.\n\nWell... simple things should be simple; complex things should be\npossible.\n\nI expect the vast majority of Lucene users will use the standard\nQueryParser, as is.  We should make things as simple as possible for\nsuch users.\n\nThen, more advanced users will absolutely love the modularity of this\nnew QueryParser and cherry pick the parts they want to build up their\nown parsing chain.  Things need not be simple for such users; just\npossible.\n\nI don't like the idea of \"stripped Standard prefix\" or \"StandardQueryParserHelper to simply QueryParser\".\n\nOK I do agree naming conflicts are a real hassle, and keeping this\nprefix doesn't harm the \"simple\" case... \n\nSo I'll put back the prefixes to the Standard* classes, move the\n'original' package to 'standard'.  So it'll be StandardQueryParser and\nthe simple usage is like this:\n\n\nStandardQueryParser parser = new StandardQueryParser(analyzer);\nQuery q = parser.parse(\"a OR b OR c\", \"field\");\n\n\n\n\nI think I forgot to add a readme.txt to that folder describing how to build the OriginalQueryParser.jj.\nCan you please add that as part of this patch with the text in the comment above, If you are busy\nlet know I can submit another patch with that.\n\nOK will do. ",
            "author": "Michael McCandless",
            "id": "comment-12739949"
        },
        {
            "date": "2009-08-06T09:44:27+0000",
            "content": "OK new patch attached w/ the above renaming.  I added a README.javacc, which I reference from the build.xml, about how to fully recreate the parser. ",
            "author": "Michael McCandless",
            "id": "comment-12739967"
        },
        {
            "date": "2009-08-06T19:24:59+0000",
            "content": "I'm not able to apply your latest patch, \nall files under standart  folder are considered updates, not new files.\n\nI'm using eclipse apply patch feature, is there special step I'm missing. ",
            "author": "Luis Alves",
            "id": "comment-12740213"
        },
        {
            "date": "2009-08-06T19:31:10+0000",
            "content": "I think if you run these commands, first, on a fresh checkout:\n\nsvn move src/test/org/apache/lucene/queryParser/original src/test/org/apache/lucene/queryParser/standard\nsvn move src/java/org/apache/lucene/queryParser/original src/java/org/apache/lucene/queryParser/standard\nsvn move src/java/org/apache/lucene/queryParser/standard/OriginalQueryParserHelper.java src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java\nsvn move src/java/org/apache/lucene/queryParser/standard/nodes/OriginalBooleanQueryNode.java src/java/org/apache/lucene/queryParser/standard/nodes/StandardBooleanQueryNode.java\nsvn move src/java/org/apache/lucene/queryParser/standard/parser/OriginalSyntaxParserConstants.java src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParserConstants.java\nsvn move src/java/org/apache/lucene/queryParser/standard/parser/OriginalSyntaxParser.java src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser.java\nsvn move src/java/org/apache/lucene/queryParser/standard/parser/OriginalSyntaxParserTokenManager.java src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParserTokenManager.java\nsvn move src/java/org/apache/lucene/queryParser/standard/parser/OriginalSyntaxParser.jj src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser.jj\nsvn move src/java/org/apache/lucene/queryParser/standard/processors/OriginalQueryNodeProcessorPipeline.java src/java/org/apache/lucene/queryParser/standard/processors/StandardQueryNodeProcessorPipeline.java\nsvn move src/java/org/apache/lucene/queryParser/standard/builders/OriginalQueryTreeBuilder.java src/java/org/apache/lucene/queryParser/standard/builders/StandardQueryTreeBuilder.java\nsvn move src/java/org/apache/lucene/queryParser/standard/builders/OriginalBooleanQueryNodeBuilder.java src/java/org/apache/lucene/queryParser/standard/builders/StandardBooleanQueryNodeBuilder.java\nsvn move src/java/org/apache/lucene/queryParser/standard/builders/OriginalQueryBuilder.java src/java/org/apache/lucene/queryParser/standard/builders/StandardQueryBuilder.java\nsvn move src/java/org/apache/lucene/queryParser/standard/config/OriginalQueryConfigHandler.java src/java/org/apache/lucene/queryParser/standard/config/StandardQueryConfigHandler.java\n\n\nThen apply the patch, it should work?\n\nThis happens because \"svn diff\" doesn't capture all required details (ie that things were moved around), and, the \"svn patch\" (that'd be able to correctly apply what had been created with \"svn diff\") isn't yet released. ",
            "author": "Michael McCandless",
            "id": "comment-12740219"
        },
        {
            "date": "2009-08-06T23:48:29+0000",
            "content": "I finally was able to apply the patch in eclipse.\nBut I had to use a different approach to correct the problem in eclipse. \n\nOn command-line a execute:\n\n\ncp -a src/test/org/apache/lucene/queryParser/original src/test/org/apache/lucene/queryParser/standard\ncp -a src/java/org/apache/lucene/queryParser/original src/java/org/apache/lucene/queryParser/standard\ncp src/java/org/apache/lucene/queryParser/standard/OriginalQueryParserHelper.java src/java/org/apache/lucene/queryParser/standard/StandardQueryParser.java\ncp src/java/org/apache/lucene/queryParser/standard/nodes/OriginalBooleanQueryNode.java src/java/org/apache/lucene/queryParser/standard/nodes/StandardBooleanQueryNode.java\ncp src/java/org/apache/lucene/queryParser/standard/parser/OriginalSyntaxParserConstants.java src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParserConstants.java\ncp src/java/org/apache/lucene/queryParser/standard/parser/OriginalSyntaxParser.java src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser.java\ncp src/java/org/apache/lucene/queryParser/standard/parser/OriginalSyntaxParserTokenManager.java src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParserTokenManager.java\ncp src/java/org/apache/lucene/queryParser/standard/parser/OriginalSyntaxParser.jj src/java/org/apache/lucene/queryParser/standard/parser/StandardSyntaxParser.jj\ncp src/java/org/apache/lucene/queryParser/standard/processors/OriginalQueryNodeProcessorPipeline.java src/java/org/apache/lucene/queryParser/standard/processors/StandardQueryNodeProcessorPipeline.java\ncp src/java/org/apache/lucene/queryParser/standard/builders/OriginalQueryTreeBuilder.java src/java/org/apache/lucene/queryParser/standard/builders/StandardQueryTreeBuilder.java\ncp src/java/org/apache/lucene/queryParser/standard/builders/OriginalBooleanQueryNodeBuilder.java src/java/org/apache/lucene/queryParser/standard/builders/StandardBooleanQueryNodeBuilder.java\ncp src/java/org/apache/lucene/queryParser/standard/builders/OriginalQueryBuilder.java src/java/org/apache/lucene/queryParser/standard/builders/StandardQueryBuilder.java\ncp src/java/org/apache/lucene/queryParser/standard/config/OriginalQueryConfigHandler.java src/java/org/apache/lucene/queryParser/standard/config/StandardQueryConfigHandler.java\n\n\n\nand applied the patch.\n\nI did not see the readme.txt for the StandardSyntaxParser.jj, but everything else looks good.  ",
            "author": "Luis Alves",
            "id": "comment-12740319"
        },
        {
            "date": "2009-08-06T23:49:22+0000",
            "content": "linking LUCENE-1782 with LUCENE-1567 ",
            "author": "Luis Alves",
            "id": "comment-12740321"
        },
        {
            "date": "2009-08-07T09:42:51+0000",
            "content": "I did not see the readme.txt for the StandardSyntaxParser.jj, but everything else looks good\n\nIt's \"README.javacc\", under contrib/queryparser.\n\nOK I'll commit shortly! ",
            "author": "Michael McCandless",
            "id": "comment-12740481"
        }
    ]
}