{
    "id": "LUCENE-4451",
    "title": "Memory leak per unique thread caused by RandomizedContext.contexts static map",
    "details": {
        "components": [],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In digging on the hard-to-understand OOMEs with\nTestDirectPostingsFormat ... I found (thank you YourKit) that\nRandomizedContext (in randomizedtesting JAR) seems to be holding onto\nall threads created by the test.  The test does create many very short\nlived threads (testing the thread safety of the postings format), in\nBasePostingsFormatTestCase.testTerms), and somehow these seem to tie\nup a lot (~100 MB) of RAM in RandomizedContext.contexts static map.\n\nFor now I've disabled all thread testing (committed false && inside\nBPFTC.testTerms), but hopefully we can fix the root cause here, eg\nwhen a thread exits can we clear it from that map?",
    "attachments": {
        "LUCENE-4451.patch": "https://issues.apache.org/jira/secure/attachment/12547250/LUCENE-4451.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-30T13:06:47+0000",
            "content": "This is a border case. The problem is most likely not the threads themselves but also the fact that they keep refs to some other data structures (in thread locals)? I'll see what I can do not to keep hard refs to those thread/context pairs though. I remember there was a reason I didn't use soft refs for this from the beginning but I can't tell you right now what it was. ",
            "author": "Dawid Weiss",
            "id": "comment-13466469"
        },
        {
            "date": "2012-09-30T13:12:30+0000",
            "content": "OK that's a good clue: the Threads are created as anon classes, which means they are holding references to lots of extra stuff.  Let me try making them static classes, and explicitly null out the \"stuff\" when they are done running... ",
            "author": "Michael McCandless",
            "id": "comment-13466471"
        },
        {
            "date": "2012-10-01T08:26:46+0000",
            "content": "I looked at the code and I don't have an easy fix for now yet. The problem is that there are circular reference needs between Threads, Randoms and the runner so that we can assert that Random instances issued for a thread are not reused on other threads (or outside of a given test's lifespan). This leads to a cyclic dependency between Thread->PerThreadContext->AssertingRandom->Thread so even if you put a weak hash map for Thread->PerThreadContext it'll still keep a hard reference to the thread it's bound to.\n\nI could make AssertingRandom store a weak/soft reference to the thread it's bound to but I'm kind of afraid it'll affect the performance.\n\nCould we temporarily make a pool of threads for this test and reuse these? I'll be thinking of a workaround but it's going to take me some time.\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13466691"
        },
        {
            "date": "2012-10-01T08:36:33+0000",
            "content": "I pushed a tentative fix for this (includes a test case).\nhttps://github.com/carrotsearch/randomizedtesting/issues/127\n\nI'd still like to hold for some time to make sure it's the best way to solve it. ",
            "author": "Dawid Weiss",
            "id": "comment-13466695"
        },
        {
            "date": "2012-10-01T10:31:34+0000",
            "content": "Could we temporarily make a pool of threads for this test and reuse these? \n\nI already committed a fix (to use static Thread subclass, and to null out the \"heavy stuff\" after the thread is done), and it seemed to work around the issue in my testing ... however, I don't re-use (pool) the threads. ",
            "author": "Michael McCandless",
            "id": "comment-13466727"
        },
        {
            "date": "2012-10-01T10:50:57+0000",
            "content": "It'll still collect references to all these threads (and whatever they may be holding onto) so eventually it'll OOM if you create a really large number of them. I'll push the fix above in the next release; holding to Thread instances seems to be doing more evil than good. ",
            "author": "Dawid Weiss",
            "id": "comment-13466732"
        },
        {
            "date": "2012-10-01T18:34:05+0000",
            "content": "Patch against the trunk updating rr to 2.0.2. I tested very quickly and at least one seed  that was failing with an OOM now passes. I commented out GC-helpers Mike added to make it even harder (and un-ignored TestDirectPostingsFormat).\n\nMike could you take a look and maybe beast it a bit? It's getting late on my side \u2013 feel free to commit if everything is all right. ",
            "author": "Dawid Weiss",
            "id": "comment-13467065"
        },
        {
            "date": "2012-10-01T19:30:07+0000",
            "content": "+1, seems to work great!  TestDirectPF -mult 3 -nightly quickly OOMEs on trunk if I comment out the GC helper nullings, but w/ the patch I ran for 24 iters before OOME (this test separately has OOME problems).  So this seems like good progress!\n\nThanks Dawid, I'll commit! ",
            "author": "Michael McCandless",
            "id": "comment-13467125"
        },
        {
            "date": "2012-10-01T19:31:13+0000",
            "content": "Thanks Dawid! ",
            "author": "Michael McCandless",
            "id": "comment-13467128"
        },
        {
            "date": "2012-10-01T19:36:33+0000",
            "content": "Thanks Mike. If you're looking into OOMs with YourKit then try to save a differential snapshot - this helps greatly in analysis typically. Also, keep those snapshots if you think something in the runner may be the cause (I have YourKit as well). ",
            "author": "Dawid Weiss",
            "id": "comment-13467129"
        },
        {
            "date": "2013-03-22T16:29:02+0000",
            "content": "[branch_4x commit] Michael McCandless\nhttp://svn.apache.org/viewvc?view=revision&revision=1392543\n\nLUCENE-4451: upgrade to randomizedtesting-2.0.2.jar to reduce RAM overhead for tracking new threads ",
            "author": "Commit Tag Bot",
            "id": "comment-13610714"
        },
        {
            "date": "2013-03-22T16:29:44+0000",
            "content": "[branch_4x commit] Michael McCandless\nhttp://svn.apache.org/viewvc?view=revision&revision=1392024\n\nLUCENE-4451: turn threads back on ",
            "author": "Commit Tag Bot",
            "id": "comment-13610722"
        }
    ]
}