{
    "id": "LUCENE-2917",
    "title": "callers should be able to advance()/jump() without fear",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently, in various places in the code (TermScorer, ExactPhraseScorer) there are optimizations \nthat assume advance/jump is heavy, and for short doc-distances etc, they next() their way instead.\n\nThis sort of logic should instead be in the codec: jump/advance should always be fast.\nIts the codecs responsibility to make this happen: jump/advance need not involve using skip data.\n\nFor example: in the fixed layout from LUCENE-2905, various forms of block-skipping can take place\nto do this operation without skip data (this is implemented in its docs and docsAndPositionsEnums,\nbut not yet its bulk postings enums).\n\nFor block codecs, they should always avoid trying to skip if the target is likely within-block,\nand if the target is likely only a few blocks away, it can still be faster not to skip, as skipping\nout of block requires several fills. In the fixed layout we can do these sort of 'fast scans' where\nin the docsenum case, we keep the freqs buffer one step behind the docs buffer, skipping it when\nwe pass over it, and only filling freqs a single time at the end... in the docsandpositions case\nwe can do the exact same thing with positions.\n\nI think as part of this, we should tighten the API for the bulkpostings jump, it should require the \ncurrent doc (the old enums knew this implicitly) to allow for different jump impls. For positions \ni think its at least fair to require the caller to pass in the pending positions count.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}