{
    "id": "SOLR-2010",
    "title": "Improvements to SpellCheckComponent Collate functionality",
    "details": {
        "affect_versions": "1.4.1",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [
            "clients - java",
            "spellchecker"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Improvements to SpellCheckComponent Collate functionality\n\nOur project requires a better Spell Check Collator.  I'm contributing this as a patch to get suggestions for improvements and in case there is a broader need for these features.\n\n1. Only return collations that are guaranteed to result in hits if re-queried (applying original fq params also).  This is especially helpful when there is more than one correction per query.  The 1.4 behavior does not verify that a particular combination will actually return hits.\n2. Provide the option to get multiple collation suggestions\n3. Provide extended collation results including the # of hits re-querying will return and a breakdown of each misspelled word and its correction.\n\nThis patch is similar to what is described in SOLR-507 item #1.  Also, this patch provides a viable workaround for the problem discussed in SOLR-1074.  A dictionary could be created that combines the terms from the multiple fields.  The collator then would prune out any spurious suggestions this would cause.\n\nThis patch adds the following spellcheck parameters:\n\n1. spellcheck.maxCollationTries - maximum # of collation possibilities to try before giving up.  Lower values ensure better performance.  Higher values may be necessary to find a collation that can return results.  Default is 0, which maintains backwards-compatible behavior (do not check collations).\n\n2. spellcheck.maxCollations - maximum # of collations to return.  Default is 1, which maintains backwards-compatible behavior.\n\n3. spellcheck.collateExtendedResult - if true, returns an expanded response format detailing collations found.  default is false, which maintains backwards-compatible behavior.  When true, output is like this (in context):\n\n<lst name=\"spellcheck\">\n\t<lst name=\"suggestions\">\n\t\t<lst name=\"hopq\">\n\t\t\t<int name=\"numFound\">94</int>\n\t\t\t<int name=\"startOffset\">7</int>\n\t\t\t<int name=\"endOffset\">11</int>\n\t\t\t<arr name=\"suggestion\">\n\t\t\t\t<str>hope</str>\n\t\t\t\t<str>how</str>\n\t\t\t\t<str>hope</str>\n\t\t\t\t<str>chops</str>\n\t\t\t\t<str>hoped</str>\n\t\t\t\tetc\n\t\t\t</arr>\n\t\t<lst name=\"faill\">\n\t\t\t<int name=\"numFound\">100</int>\n\t\t\t<int name=\"startOffset\">16</int>\n\t\t\t<int name=\"endOffset\">21</int>\n\t\t\t<arr name=\"suggestion\">\n\t\t\t\t<str>fall</str>\n\t\t\t\t<str>fails</str>\n\t\t\t\t<str>fail</str>\n\t\t\t\t<str>fill</str>\n\t\t\t\t<str>faith</str>\n\t\t\t\t<str>all</str>\n\t\t\t\tetc\n\t\t\t</arr>\n\t\t</lst>\n\t\t<lst name=\"collation\">\n\t\t\t<str name=\"collationQuery\">Title:(how AND fails)</str>\n\t\t\t<int name=\"hits\">2</int>\n\t\t\t<lst name=\"misspellingsAndCorrections\">\n\t\t\t\t<str name=\"hopq\">how</str>\n\t\t\t\t<str name=\"faill\">fails</str>\n\t\t\t</lst>\n\t\t</lst>\n\t\t<lst name=\"collation\">\n\t\t\t<str name=\"collationQuery\">Title:(hope AND faith)</str>\n\t\t\t<int name=\"hits\">2</int>\n\t\t\t<lst name=\"misspellingsAndCorrections\">\n\t\t\t\t<str name=\"hopq\">hope</str>\n\t\t\t\t<str name=\"faill\">faith</str>\n\t\t\t</lst>\n\t\t</lst>\n\t\t<lst name=\"collation\">\n\t\t\t<str name=\"collationQuery\">Title:(chops AND all)</str>\n\t\t\t<int name=\"hits\">1</int>\n\t\t\t<lst name=\"misspellingsAndCorrections\">\n\t\t\t\t<str name=\"hopq\">chops</str>\n\t\t\t\t<str name=\"faill\">all</str>\n\t\t\t</lst>\n\t\t</lst>\n\t</lst>\n</lst>\n\nIn addition, SOLRJ is updated to include SpellCheckResponse.getCollatedResults(), which will return the expanded Collation format.  getCollatedResult(), which returns a single String, is retained for backwards-compatibility.  Other APIs were not changed but will still work provided that spellcheck.collateExtendedResult is false.\n\nThis likely will not return valid results if using Shards.  Rather, a more robust interaction with the index would be necessary than what exists in SpellCheckCollator.collate().",
    "attachments": {
        "SOLR-2010_shardSearchHandler_993538.patch": "https://issues.apache.org/jira/secure/attachment/12454124/SOLR-2010_shardSearchHandler_993538.patch",
        "SOLR-2010_shardSearchHandler_999521.patch": "https://issues.apache.org/jira/secure/attachment/12455187/SOLR-2010_shardSearchHandler_999521.patch",
        "SOLR-2010_shardRecombineCollations_999521.patch": "https://issues.apache.org/jira/secure/attachment/12455188/SOLR-2010_shardRecombineCollations_999521.patch",
        "SOLR-2010.patch": "https://issues.apache.org/jira/secure/attachment/12450213/SOLR-2010.patch",
        "SOLR-2010_141.patch": "https://issues.apache.org/jira/secure/attachment/12455279/SOLR-2010_141.patch",
        "solr_2010_3x.patch": "https://issues.apache.org/jira/secure/attachment/12457582/solr_2010_3x.patch",
        "SOLR-2010.txt": "https://issues.apache.org/jira/secure/attachment/12452462/SOLR-2010.txt",
        "multiple_collations_as_an_array.patch": "https://issues.apache.org/jira/secure/attachment/12457684/multiple_collations_as_an_array.patch",
        "SOLR-2010_shardRecombineCollations_993538.patch": "https://issues.apache.org/jira/secure/attachment/12454125/SOLR-2010_shardRecombineCollations_993538.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "James Dyer",
            "id": "comment-12891318",
            "date": "2010-07-22T20:22:46+0000",
            "content": "Tested against branch version #96633 "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12896585",
            "date": "2010-08-09T15:23:57+0000",
            "content": "James, thanks for the patch.  At first glance this looks great and I would like to see it incorporated.\n\nThis likely will not return valid results if using Shards. Rather, a more robust interaction with the index would be necessary than what exists in SpellCheckCollator.collate().\n\nPerhaps we should just have a simple Search Handler that is QueryComp only, either that or we need a way to easily turn off all components but the query component.  That way, we could take advantage of the existing sharding capabilities.\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12896586",
            "date": "2010-08-09T15:24:20+0000",
            "content": "Added license headers "
        },
        {
            "author": "Tom Phethean",
            "id": "comment-12896898",
            "date": "2010-08-10T14:52:05+0000",
            "content": "This sounds like a really useful patch, I would definitely like to see it go further as it would be useful for a project I'm currently working on. I have just tried to patch this against 1.4.1 (downloaded today) and got the following errors:\n\npatching file solr/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest.java\npatching file solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest.java\npatching file solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java\nHunk #1 FAILED at 20.\nHunk #2 FAILED at 103.\n2 out of 2 hunks FAILED \u2013 saving rejects to file solr/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java.rej\npatching file solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.java\nHunk #1 FAILED at 132.\nHunk #2 FAILED at 361.\nHunk #3 FAILED at 405.\nHunk #4 FAILED at 452.\nHunk #5 FAILED at 466.\n5 out of 5 hunks FAILED \u2013 saving rejects to file solr/src/java/org/apache/solr/handler/component/SpellCheckComponent.java.rej\npatching file solr/src/java/org/apache/solr/spelling/SpellCheckCollation.java\npatching file solr/src/java/org/apache/solr/spelling/PossibilityIterator.java\npatching file solr/src/java/org/apache/solr/spelling/SpellCheckCorrection.java\npatching file solr/src/java/org/apache/solr/spelling/SpellCheckCollator.java\npatching file solr/src/common/org/apache/solr/common/params/SpellingParams.java\nHunk #1 FAILED at 78.\n1 out of 1 hunk FAILED \u2013 saving rejects to file solr/src/common/org/apache/solr/common/params/SpellingParams.java.rej\npatching file solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse.java\nHunk #1 FAILED at 31.\nHunk #2 FAILED at 46.\nHunk #3 FAILED at 77.\nHunk #4 FAILED at 162.\n4 out of 4 hunks FAILED \u2013 saving rejects to file solr/src/solrj/org/apache/solr/client/solrj/response/SpellCheckResponse.java.rej "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12896899",
            "date": "2010-08-10T14:53:50+0000",
            "content": "The patch is currently for trunk.  I think it will likely be the case that we work it out for trunk and then backport. "
        },
        {
            "author": "Tom Phethean",
            "id": "comment-12896903",
            "date": "2010-08-10T14:59:38+0000",
            "content": "Ok, thanks. Do you know if there is a rough timescale on that? "
        },
        {
            "author": "James Dyer",
            "id": "comment-12900084",
            "date": "2010-08-18T22:47:44+0000",
            "content": "Second version of patch.  Updated to trunk rev #986945.\n\nAdds support for shards.  I originally implemented this by passing the SearchHandler to the SpellCheckComponent and then using an overloaded version of SearchHandler.handleRequestBody() to do the re-queries.  I found this was unnecessary as we get the same results by calling the QueryComponent directly.  \n\nI added some test scenarios to \"DistributedSpellCheckComponentTest\" and all pass.  However, I am a bit disturbed to find that the test fails if I uncomment the constructor (added with this patch).  The constructor simply tells it to test only with 4 shards rather than trying 1 shard, then 2, etc.  I found either way the 4-shard test results in the same docs going to the same shards.  Yet the results are different.  Specifically the ranking/ordering of the collations returned and the # of hits reported are sometimes wrong when the constructor is called before the test.  Unfortunately I am at a loss as to why I get inconsistent results here and anyone's assistance on this would be most helpful. \n\nI also added an additional unit test method to verify this works when multiple request handlers are configured with different \"qf\" params.  I also added a unit test method that verifies this works when \"fq\" is set.\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12900246",
            "date": "2010-08-19T11:08:41+0000",
            "content": "Adds support for shards. I originally implemented this by passing the SearchHandler to the SpellCheckComponent and then using an overloaded version of SearchHandler.handleRequestBody() to do the re-queries. I found this was unnecessary as we get the same results by calling the QueryComponent directly. \n\nI haven't taken a look at the patch yet, but by the sounds of it, I still think the cleaner way to go is to make Solr have an option to specifically pass in which component to run and turn off all others.  This would be useful for other things, too.  Then you could just use the existing mechanisms. "
        },
        {
            "author": "James Dyer",
            "id": "comment-12900323",
            "date": "2010-08-19T15:54:32+0000",
            "content": "Third version (with \".patch\" extension.  I had used \".txt\" extension with 2nd version).  Works with trunk rev#986945.\n\nThis time SpellCheckCollator calls the SearchHandler instead of calling the QueryComponent.  This required exposing a reference to the SearchHandler on the ResponseBuilder.  Also a new overloaded method in SearchHandler.processRequestBody() lets you override the list of components to run.  In this case we just have it run QueryComponent.\n\nThis revision has 2 potential benefits: \n\n(1) the overloaded method in SearchHandler may prove useful to other components in the future.  \n\n(2) there may be a way to get SearchHandler to requery all the shards at once and then there would be no need to reintegrate the Collations in SearchHandler.finishStage().  However, see my comment in SpellCheckCollator lines 56-57.  Likely I am calling SpellCheckCollator during the wrong \"stage\" of the distributed request but I a need to find out more specifically how shards work to determine how to further improve this here.  As time allows I will do my own investigating but anyone's advice would be greatly appreciated.\n\nFinally, this version corrects a bug that would have caused one of the test scenarios in DistributedSpellCheckComponentTest to fail.  Unfortunately in the 2nd version, I had left some scenarios commented-out and did not catch this until now. "
        },
        {
            "author": "James Dyer",
            "id": "comment-12901619",
            "date": "2010-08-23T22:03:25+0000",
            "content": "New Patch Version with Shard Support.  Grant, I hope I'm getting closer to what you have in mind this time around.\n\nI think I've figured how to send the collation test queries back to SearchHandler and have it take care of querying the shards individually.  Then the collation logic is no different for distributed / non-distributed.\n\nAs I would like to eventually use this in production here, any comments as to how to further make this a \"production-quality\" feature are much appreciated. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12904264",
            "date": "2010-08-30T17:29:37+0000",
            "content": "Hi James,\n\nFirst off, good work.  I like the overall design, etc.\n\nSecond, this patch no longer applies cleanly to trunk.  The issue is in the SearchHandler.\n\nThird, in thinking some more about the whole distributed case, perhaps we are approaching this wrong.  I was originally thinking that we would have to go off and re-query all the shards (as in send another message) but we really shouldn't have to do that, right?  Why can't we just pass the collation request through to the shards as part of the get suggestions and then it can, if collation is asked for, return it's collation suggestions.  Then, the question becomes how to merge the suggestions and pick the best one.  This should save a round trip at the cost of doing some extra collations, but since most people aren't going to ask for more than 5 or 10, it shouldn't be an issue.\n\n-Grant "
        },
        {
            "author": "James Dyer",
            "id": "comment-12907304",
            "date": "2010-09-08T16:49:17+0000",
            "content": "Two new versions of the patch:\n\n1. SOLR-2010_shardSearchHandler_993538.patch is the same as the 8/23/2010 version except it applies cleanly to trunk revision #993538.  In a Distributed setup, this version calls an overloaded method on SearchHandler to use its logic for combining results from the collation test queries.  This is simpler code but requires many more round-trips between shards.  We also can guarantee that a Distributed setup will always return the exact same collations in order as a non-Distributed setup.  \n\n2. SOLR-2010_shardRecombineCollations_993538.patch is similar to the 8/19/2010 version, with improvements.  This version also applies cleanly to trunk revision #993538.  In a Distributed setup, each shard calls QueryComponent individually and generates its own list of Collations.  The SpellCheckComponent then combines and sorts the resulting collations, returning the best ones, up to the client-specified maximum.  This requires more complicated logic in SpellCheckComponent.finishStage(), although it does not necessitate changes to SearchHandler or ResponseBuilder.  It may be possible to find cases where a Distributed setup may return different collations-or the same collations in a different order-than a non-distributed setup.  I do not believe this potential disparity would ever be very significant.\n\nGrant, I believe version 1 is something like what you were thinking of on 8/9 and 8/19.  Version 2 is more like what you describe in your comment from 8/30.  Let me know if you think this needs any more tweaking.  ALSO, if you're thinking of possibly committing this someday, you may want to look at SOLR-2083 also.  Based on my understanding, distributed SpellCheckComponent as exists currently in Trunk is broken.  (If I'm right), we may want to fix it before adding on more functionality. "
        },
        {
            "author": "James Dyer",
            "id": "comment-12913226",
            "date": "2010-09-21T20:26:16+0000",
            "content": "Both patch versions sync'ed to Trunk version 999521. (sorry about the many filename variants) "
        },
        {
            "author": "James Dyer",
            "id": "comment-12913667",
            "date": "2010-09-22T17:06:38+0000",
            "content": "This version is for v1.4.1.  No shard support as SpellCheckComponent does not have any distributed support in 1.4.  All tests pass. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12913858",
            "date": "2010-09-23T00:04:20+0000",
            "content": "I haven't forgotten about this, James.  I appreciate the hard work, but I'm swamped at the moment.  I'll try to get you feedback soon. "
        },
        {
            "author": "JAYABAALAN V",
            "id": "comment-12916132",
            "date": "2010-09-29T12:56:15+0000",
            "content": "I am using Apache Solr 1.4 and need to download this patch for my implementation purpose.Let me know the latest rev#  "
        },
        {
            "author": "James Dyer",
            "id": "comment-12916158",
            "date": "2010-09-29T14:10:22+0000",
            "content": "The patch file SOLR-2010_141.patch should apply cleanly to v1.4.1. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12916492",
            "date": "2010-09-30T14:37:12+0000",
            "content": "James,\n\nFor the two diff. approaches, did you do any testing to get a sense of which performs better?  It seems to me that the recombine one, while overfetching some, would likely be faster overall b/c it avoids all the extra shard communication.  Of course, it may be the case that for some setups, one works better than the other.  i.e. small sharded systems can afford the second call, while large systems should avoid the second fan-out/in.  Which, of course, makes me wonder how hard it would be to give people both and let them specify based on an input parameter or by having two different components derived off of SpellCheckComponent?   Thoughts?   In that approach, we could have SCC be just for single node instances and then the other two inherit from it to provide users the choice of distributed approaches.  Since you have the code for both already, what do you think?\n\nOtherwise, I've looked at the recombine approach and it seems pretty solid from a \"ready to commit\" standpoint. "
        },
        {
            "author": "James Dyer",
            "id": "comment-12916533",
            "date": "2010-09-30T16:14:27+0000",
            "content": "Grant,\n\nIt wouldn't be difficult to create an uber-patch that allows users to pick which way to go. If that's the route you want to go then I'd be happy to do that. However, I think it would be best to stick with the \"recombine\" approach because although you'll get throw-away collations, it will always be done internally within the shard. The performance penalty in most cases will be slight. On the other hand, if using the \"Search Handler\" approach, it has to query over the network for each try, which could be significant. I wouldn't say that you would never benefit from the \"Search Handler\" option, but I wonder if it warrants extra lines of code and making changes to the SearchHandler class, etc.\n\nUnfortunately I haven't done any performance testing with these. We only are in early development here with SOLR and I don't have access to multiple servers with which I can easily deploy such a test. On a non-distributed setup this patch only adds a little bit of overhead, and I wouldn't expect the \"recombine\" option to be much worse than that.\n\nNote that with either approach I'd imagine you'd frequently run into the case where some/many shards simply do not have the documents the user is looking for and they will have to query up to \"collationMaxTries\" to come up empty. In which case the shard(s) that get the results may need to wait for the shards that are busy querying away in vain...\n\nLet me know if you want an \"uber-patch\". I might have a little time later today if you let me know. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12916543",
            "date": "2010-09-30T16:30:01+0000",
            "content": "Makes sense.  I'd say we stick w/ the recombine approach. "
        },
        {
            "author": "JAYABAALAN V",
            "id": "comment-12919166",
            "date": "2010-10-08T05:56:43+0000",
            "content": "Let me know the correct path for downloding the patch for SpellChecking based on your discuss.It very discult for the identify the correct patch\n\nI am try to download things from the following truck\n\nhttps://svn.apache.org/repos/asf/lucene/dev/trunk/\n\nBut the new modified code are not present in the this truck for download.do provide any pointer or clear steps for download this patch for spellchecking.\n "
        },
        {
            "author": "James Dyer",
            "id": "comment-12919289",
            "date": "2010-10-08T14:24:37+0000",
            "content": "If you want to use v1.4.1 you can either get the GA source and then apply the patch or check out the 1.4.x branch at http://svn.apache.org/repos/asf/lucene/solr/branches/branch-1.4 then apply the patch file (attached to this JIRA).  The correct patch for 1.4.1 is: SOLR-2010_141.patch.  \n\nIf you want to use the Trunk Version then check out the source at http://svn.apache.org/repos/asf/lucene/dev/trunk.  The correct patch file for Trunk is: SOLR-2010_shardRecombineCollations_999521.patch\n\nThere are instructions on applying patches in the wiki:  http://wiki.apache.org/solr/HowToContribute#Working_With_Patches "
        },
        {
            "author": "JAYABAALAN V",
            "id": "comment-12919469",
            "date": "2010-10-09T07:58:02+0000",
            "content": "Thanks for your direction.\n\nBased on your input i have tried in the truck and used the SOLR-2010_shardRecombineCollations_999521.patch for download.\n\nhttp://svn.apache.org/repos/asf/lucene/dev/trunk/solr/src/common/org/apache/solr/common/params/SpellingParams.java.this path \n\nBut there is a problem in the SpellingParams.java under this version.It looks not updated correctly in this version.Mainly three final string values like \"\"maxCollations\",\"maxCollationTries\", and collateExtendedResults are implemented and it  Solr v1.3 in the history.\n\nDo let me know the updated version path for downloading. "
        },
        {
            "author": "James Dyer",
            "id": "comment-12919569",
            "date": "2010-10-10T05:02:22+0000",
            "content": "I tested \"SOLR-2010_shardRecombineCollations_999521.patch\" with current trunk and it still applies cleanly.  I'm not sure why SpellingParams.java isn't updating for you.  Perhaps try again?\n\nJames Dyer\nE-Commerce Systems\nIngram Content Group\n(615) 213-4311\n\n "
        },
        {
            "author": "JAYABAALAN V",
            "id": "comment-12919800",
            "date": "2010-10-11T12:04:56+0000",
            "content": "What I mean here is the correct version of code is not updated the mainly three final string method are not updated under this path\n\nhttp://svn.apache.org/repos/asf/lucene/dev/trunk/solr/src/common/org/apache/solr/common/params/SpellingParams.java.this path\n\nthat reason i am asking correct steps or correct source path for download purpose\n\nCan you provide the details on Scheme and SolrConfiguration side also.It would be better i think so.\n "
        },
        {
            "author": "James Dyer",
            "id": "comment-12919851",
            "date": "2010-10-11T14:48:23+0000",
            "content": "Grant,\n\nIs there anything else you'd like me to do with this?  Is this something you think should be committed? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12919966",
            "date": "2010-10-11T20:01:05+0000",
            "content": "Committed to trunk on revision 1021439.  Working on backporting to 3.x\n\nJames, can you add docs to the wiki for the new parameters? "
        },
        {
            "author": "James Dyer",
            "id": "comment-12919992",
            "date": "2010-10-11T21:23:06+0000",
            "content": "Wiki is updated.  I marked it all as available in 3.1 / 4.0  .  correct? "
        },
        {
            "author": "JAYABAALAN V",
            "id": "comment-12921264",
            "date": "2010-10-15T07:34:40+0000",
            "content": "I am able to download only these four java class under the revision 1021439 SpellCheckComponent,SpellCheckResponse,SpellingParams,TestSpellCheckResponse and other java class are not updated ResponseBuilder.java, and SearchHandler.java\n\nLet me know the correct path for these two java classes for revision 1021439 "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12921691",
            "date": "2010-10-16T13:45:20+0000",
            "content": "This patch introduced some resource leaks - whenever it tries to verify the collated result by doing a search, it never closes the request and hence the searcher is never closed. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12921720",
            "date": "2010-10-16T17:30:18+0000",
            "content": "fyi, I just committed a fix for the resource leak, in addition to a couple other simplifications. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12921774",
            "date": "2010-10-16T23:20:27+0000",
            "content": "Is this the patch that added multiple collations?\n\nI'm seeing stuff like this:\n\n  {...\n      \"collation\":\"lowerfilt:(+faith +hope +loaves)\",\n      \"collation\":\"lowerfilt:(+faith +hope +love)\"}}}\n\n\n\nAnd we should probably change collation to be an array instead.  Repeated keys in JSON are legal ,but not nice to deal with. "
        },
        {
            "author": "James Dyer",
            "id": "comment-12922664",
            "date": "2010-10-19T18:50:48+0000",
            "content": "Here is a patch for the 3.x branch.  This includes Yonik's fix to close the searcher (thanks!).  All tests pass.\n\nGrant, do you feel this is something that can safely go into the 3.x branch in addition to Trunk?\n\n(by the way, I am looking into Yonik's suggestion to change multiple collation results into an Array.  The trick here, I think, is to not break backwards-compatibility...) "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12922668",
            "date": "2010-10-19T18:57:11+0000",
            "content": "I already did the merge to 3.x.  I don't believe Yonik has backported his fix yet. "
        },
        {
            "author": "James Dyer",
            "id": "comment-12922997",
            "date": "2010-10-20T15:12:40+0000",
            "content": "Maybe I'm looking at the wrong place.  I checked out the 3.x branch at: http://svn.apache.org/repos/asf/lucene/dev/branches/branch_3x .  Is that correct?\n\nIf you drill into ../solr/src/java/org/apache/solr/spelling/ from there you won't find the added source files from this case (SpellCheckCollator.java, etc...) "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12923004",
            "date": "2010-10-20T15:22:32+0000",
            "content": "James, you are right.  I mislabeled my merge.  Still getting used to this merge from trunk to branch stuff.  At any rate, no need for a patch, I will get the merged figured out soon. "
        },
        {
            "author": "James Dyer",
            "id": "comment-12923055",
            "date": "2010-10-20T17:18:47+0000",
            "content": "update the 1.4.1 patch to include Yonik's fix. "
        },
        {
            "author": "James Dyer",
            "id": "comment-12923057",
            "date": "2010-10-20T17:27:55+0000",
            "content": "Here's an attempt to implement Yonik's suggestion to have multiple collations returned as an Array rather than use repeated keys.  I am not familiar with JSON so I didn't realize the original format would cause problems.  \n\nFrom this perspective, however, I like the original version better.  The problem is in order to maintain backwards-compatibility, if \"spellcheck.maxCollations\" is unset or set to \"1\", then we need to return a single String with key \"collation\".  This patch alters the response only if \"spellcheck.maxCollations\" is >1, instead returning an array with key \"collations\".  \n\nI also changed the distributed code and solrj to cope with the change in format.  All tests pass, but maybe someone will find a better solution than this, or perhaps we can leave it as is. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12923446",
            "date": "2010-10-21T14:06:47+0000",
            "content": "James, I did the merge back to 3.x.  I don't think we will be backporting this to 1.4, since all future releases there are bug-fix only.   "
        },
        {
            "author": "James Dyer",
            "id": "comment-12923463",
            "date": "2010-10-21T14:47:15+0000",
            "content": "Great.  Thank you.  \n\nThe 1.4 patch is mostly for my benefit, so we can use the functionaltiy before the next release.  Thought I'd share that with anyone else who wants to try it too... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12924391",
            "date": "2010-10-24T22:28:29+0000",
            "content": "James, I did the merge back to 3.x.\n\nFYI, you missed Robert's resource leak fixes to SpellCheckCollatorTest.\nNot sure what best practice is to catch stuff like this... if it's only a file or two, I guess check the history of each?\n\nedit: actually your backport to 3x didn't even touch SpellCheckCollatorTest.  I was misled by the fact that when you look at the history of SpellCheckCollatorTest, it shows an update.  But I guess it was just merge properties.  Ugh.\n\n\nyonik@WOLVERINE /cygdrive/c/code/lusolr_3x\n$ svn log ./solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest.java\n------------------------------------------------------------------------\nr1026000 | gsingers | 2010-10-21 09:48:34 -0400 (Thu, 21 Oct 2010) | 1 line\n\nSOLR-2010, including Yonik's fix, SOLR-2181 -- hope I did this merge correctly\n------------------------------------------------------------------------\nr1021439 | gsingers | 2010-10-11 13:32:11 -0400 (Mon, 11 Oct 2010) | 1 line\n\nSOLR-2010: added richer support for spell checking collations\n------------------------------------------------------------------------\n\nyonik@WOLVERINE /cygdrive/c/code/lusolr_3x\n$ svn diff -r 1021439:1026000 ./solr/src/test/org/apache/solr/spelling/SpellCheckCollatorTest.java                                                   \nyonik@WOLVERINE /cygdrive/c/code/lusolr_3x\n\n\n\nI'm in the process of getting branch_3x to pass the searcher open/close test, so I'll handle this. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12924397",
            "date": "2010-10-24T22:57:12+0000",
            "content": "Still stuff messed up with the merge props I guess - when I try to merge in Robert's fixes, it does nothing (it thinks they are already merged).\nI guess I just need to copy the file at this point. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13042677",
            "date": "2011-06-02T10:14:00+0000",
            "content": "Uh oh, what did I do here... the issue is a bit long, how can I help with merging? "
        },
        {
            "author": "James Dyer",
            "id": "comment-13042795",
            "date": "2011-06-02T14:36:51+0000",
            "content": "Robert,  your changes to fix resource leak in SpellCheckCollatorTest was merged into 3.x by Yonik in r1026921.  I believe this issue should have been long closed as it was committed to Trunk and 3.x last year. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13042803",
            "date": "2011-06-02T14:53:06+0000",
            "content": "Thanks James! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13157887",
            "date": "2011-11-27T12:38:59+0000",
            "content": "Bulk close after release of 3.1 "
        }
    ]
}