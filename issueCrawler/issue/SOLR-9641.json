{
    "id": "SOLR-9641",
    "title": "Emit distributed tracing information from Solr",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "While Solr already offers a few tools for exposing timing, this information can be difficult to aggregate and analyze. By integrating distributed tracing into Solr operations, we can gain new performance and behaviour insights.\n\nOne such solution can be accomplished via Apache HTrace (incubating).\n\n(More rationale to follow.)",
    "attachments": {
        "SOLR-9641.patch": "https://issues.apache.org/jira/secure/attachment/12833818/SOLR-9641.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-17T22:05:00+0000",
            "author": "Mike Drob",
            "content": "This is a fairly large patch that covers a lot of ground. A summary of the changes is:\n\n\n\tIntroduce dependency on new version of HTrace. HTrace-3 (transitively required by Hadoop) cannot communicate with HTrace-4 (used by me here), but they are packaged/namespace separately and can exist in the same application. Hadoop will include HTrace-4 starting in version 2.8 and 3.0, I believe.\n\tIntroduce new solr.xml config section, that passes all parameters to the HTrace configuration. If we decide to make the distributed tracing library we use pluggable, then I think we can spend some time to make the section a little more generic, but for now it is fine.\n\tAdd trace object to CoreContainer. This seemed like a logical place for a singleton scoped to the entire Solr process, but I ran into issues when trying to add tracing to Overseer operations. This design decision may need to be revisited.\n\tInstrument SolrCore to handle all kinds of core related requests. This gets us most index handlers at once.\n\tInstrument a few of the executors we use to pass along trace ids for tracing over distribution requests.\n\tInstrument CollectionsHandler for create. Same pattern could be applied for other collection operations, but it may be a good idea to make this more generic later.\n\tAdded a basic test. There is a start of a test for HDFS, but it's very much a work in progress.\n\n ",
            "id": "comment-15583636"
        },
        {
            "date": "2016-10-19T13:12:06+0000",
            "author": "David Smiley",
            "content": "This is really cool Mike Drob!  I learned about tracing at Apache Big Data this year and I became hopeful that one day Solr would get tracing abilities.  Can you recommend a tool that can be used with Solr after this patch is applied to visualize or otherwise make use of it to help us analyze Solr performance?\n\nI looked at the patch; the approach is overall quite nice I think.  Some comments:\n\n\tSolrCore.newScope: guard log.debug with log.isDebugEnabled to avoid toString\n\tloadTraceConfig: could you use NamedList.asMap(1)  or perhaps not because \"String\" type?\n\tTracerUtils: I like this. Question: should newScope(SolrQueryRequest request, String description) also look in the request params to see if there is a parent, and if so conditionally call tracer.newScope with that parent?\n\tHttpShardHandler: maybe instead of always wrapping task with traceTask we instead conditionally replace task with a tracing one?  This way we conveniently avoid the wrapping if there is no tracing.\n\tCommonParams.java:TRACE_ID: a one-liner comment referencing \"HTrace\" would be useful.\n\n ",
            "id": "comment-15588732"
        },
        {
            "date": "2016-10-20T14:36:30+0000",
            "author": "Mike Drob",
            "content": "Thanks for taking a look, David Smiley!\n\nCan you recommend a tool that can be used with Solr after this patch is applied to visualize or otherwise make use of it to help us analyze Solr performance?\nThe built in HTrace viewer is reasonable for some purposes, but probably not ideal for all purposes. There is also a Zipkin bridge, so you could use that as your visualizer. Both are configured by setting the span.receiver.classes configuration to the appropriate value.\n\nMy docs are pretty sparse at the moment, where would you suggest placing them? We can have a short description and then refer to the full HTrace docs for completeness.\n\n\n\n\tSolrCore.newScope: guard log.debug with log.isDebugEnabled to avoid toString\n\tHttpShardHandler: maybe instead of always wrapping task with traceTask we instead conditionally replace task with a tracing one? This way we conveniently avoid the wrapping if there is no tracing.\n\tCommonParams.java:TRACE_ID: a one-liner comment referencing \"HTrace\" would be useful.\n\n\nDone. I'm not going to upload a new patch yet, since the changes are relatively minimal and I don't want to clutter the issue.\n\n\n\n\tloadTraceConfig: could you use NamedList.asMap(1) or perhaps not because \"String\" type?\n\n\nI tried this and it worked, but something about it feels incredibly fragile. I'll leave it in for now, however.\n\n\n\n\tTracerUtils: I like this. Question: should newScope(SolrQueryRequest request, String description) also look in the request params to see if there is a parent, and if so conditionally call tracer.newScope with that parent?\n\n\nHmm, maybe. I know that it is possible to have multiple parents per span, but I think the APIs around it are a little clunky. Will need to think on this more.\n\nActually, no. I don't think we need to pull the parent from the request params here, since we already do that in SolrCore.newScope, which should be handling most things. The method in TracerUtils is more of a convenience thing to get at the core container so we can get the tracer. ",
            "id": "comment-15591976"
        },
        {
            "date": "2016-10-20T14:37:54+0000",
            "author": "Mike Drob",
            "content": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe - we were talking last week about adding a trace around the response writer, but I'm struggling to find where that logic is. Can you give me a pointer? ",
            "id": "comment-15591981"
        },
        {
            "date": "2016-10-20T14:44:14+0000",
            "author": "David Smiley",
            "content": "See HttpSolrCall.call around line 469 (writeResponse) ",
            "id": "comment-15592003"
        },
        {
            "date": "2016-10-20T14:50:39+0000",
            "author": "David Smiley",
            "content": "Docs:\n\n\tjavadocs: probably on the Tracer field you added to core container. TracerUtils.java should refer to that so people know where it's placed in Solr.\n\tuser docs: we'll probably want to add this to the ref guide... at least something very brief that can demonstrate the simplest useful way to see it in action, and then we refer users to other possibilities (i.e. ZipKin).  There ought to be a reference to this feature in the vicinity of where debugQuery/debug=timing is so people know of this more sophisticated option.\n\n ",
            "id": "comment-15592025"
        },
        {
            "date": "2016-10-20T16:43:41+0000",
            "author": "Mike Drob",
            "content": "Documenting what goes in the trace section in solr.xml would also be ref-guide, yes? ",
            "id": "comment-15592319"
        },
        {
            "date": "2016-10-20T17:22:13+0000",
            "author": "David Smiley",
            "content": "Yes.  Perhaps the default solr.xml might have a commented trace section \u2013 brief. ",
            "id": "comment-15592405"
        },
        {
            "date": "2016-10-22T23:27:12+0000",
            "author": "Christine Poerschke",
            "content": "This is really cool Mike Drob! ...\n\n+1 to that, I am also looking forward to having tracing support in Solr.\n\nHere's my comments from looking at the patch:\n\n\n\tminor: in CoreContainer there is one zkSys.getZkController().getNodeName() and one getZkController().getNodeName() call, they could be combined into one call with result kept in local variable or both could use or not use zkSys for clarity.\n\n\n\n\n\tIn SearchHandler, how about also having trace scopes for the handleResponses and finishStage steps? Or if the intention is to only trace component methods which typically make requests to other shards maybe not trace the prepare step?\n\n\n\n\n\tIn CoreAdminHandler for the callInfo.call(); there is the traceDescription + \" async\" scope i.e. differentiation between sync and async. Just wondering if something similar might be useful for SearchHandler's without-debug and with-debug prepare and process scopes?\n\n\n\n\n\tIn the tests, curious why only [0] is being added in the getReceivers methods?\n\n\n\n\n\tIn the tests, might the Random random() method be passed down to SpanId i.e. for the tests\n\n- ... SpanId.fromRandom() ...\n+ ... SpanId.fromRandom(random()) ...\n\n\nand for SpanId.java something along the lines of\n\n+ import java.util.Random;\n+\n+ private static long nonZeroRand64(Random random) {\n+   while (true) {\n+     long r = random.nextLong();\n+     if (r != 0) {\n+       return r;\n+     }\n+   }\n+ }\n+\n+ public static SpanId fromRandom(Random random) {\n+   return new SpanId(nonZeroRand64(random), nonZeroRand64(random));\n+ }\n\n\n\n ",
            "id": "comment-15598675"
        },
        {
            "date": "2016-10-24T20:39:30+0000",
            "author": "Mike Drob",
            "content": "in CoreContainer there is one zkSys.getZkController().getNodeName() and one getZkController().getNodeName() call, they could be combined into one call with result kept in local variable or both could use or not use zkSys for clarity.\nDone.\nIn SearchHandler, how about also having trace scopes for the handleResponses and finishStage steps? Or if the intention is to only trace component methods which typically make requests to other shards maybe not trace the prepare step?\nHmm... yes, this could make sense. I didn't want to put too much in for the distributed request portion because that also gets traced on the remote peers. But you're right that something should be looked at here. Adding it around only handleResponse and finishStage seems insufficient? There is a lot of other things going on in the distribute branch there. Will come back to this later...\nIn CoreAdminHandler for the callInfo.call(); there is the traceDescription + \" async\" scope i.e. differentiation between sync and async. Just wondering if something similar might be useful for SearchHandler's without-debug and with-debug prepare and process scopes?\nYou mean labelling the debug scope with a debug description? Yea, that's doable. My async description was largely a hack, I think, and will probably go away in favor of something more generic.\nIn the tests, curious why only [0] is being added in the getReceivers methods?\nBecause there was only one receiver configured per jetty. I'll change this to grab them all.\nIn the tests, might the Random random() method be passed down to SpanId\nGood idea. I'll make a utility method in Solr for now, but also filed HTRACE-391 ",
            "id": "comment-15603141"
        },
        {
            "date": "2016-10-24T20:40:24+0000",
            "author": "Mike Drob",
            "content": "Which one is the \"default\"? I see ./solr/example/exampledocs/solr.xml and ./solr/server/solr/solr.xml ",
            "id": "comment-15603146"
        },
        {
            "date": "2016-10-24T22:08:59+0000",
            "author": "Mike Drob",
            "content": "Patch v2:\n\n\tIncorporated feedback from David and Christine as discussed in earlier comments.\n\tMoved core tracing logic out of SolrCore and into HttpSolrCall\n\tAdded sample trace configuration section to solr.xml\n\tAdded tracing to write response, and more granular tracing in general\n\n ",
            "id": "comment-15603372"
        }
    ]
}