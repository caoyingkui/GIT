{
    "id": "SOLR-2883",
    "title": "Add QParser boolean hint for filter queries",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It would be useful if there was a QParser hint of some kind that indicated that the score isn't needed. This would be set by Solr in QueryComponent when processing the fq param, and some field types could check for this and return more efficient Query implementations from FieldType.getFieldQuery(). For example, a geospatial field could return a ConstantScoreQuery(Filter) implementation when only filtering is needed, or return a query that returns a geospatial distance for a document's score. I think there are probably other opportunities for this flag to have its use but I'm not sure.\n\nAs an example solution, a local param of needScore=false could be added.  I should be functionally equivalent to fq=\n{!needScore=false}\n.....\n\nHere is a modified portion of QueryComponent at line 135 to illustrate what the change would be. I haven't tested it but it compiles.\n\n        for (String fq : fqs) {\n          if (fq != null && fq.trim().length()!=0) {\n            QParser fqp = QParser.getParser(fq, null, req);\n            SolrParams localParams = fqp.getLocalParams();\n            SolrParams defaultLocalParams = new MapSolrParams(Collections.singletonMap(\"needScore\",\"false\"));\n            SolrParams newLocalParams = new DefaultSolrParams(localParams,defaultLocalParams);\n            fqp.setLocalParams(newLocalParams);\n            filters.add(fqp.getQuery());\n          }\n        }\n\n\n\nIt would probably be best to define the \"needScore\" constant somewhere better but this is it in a nutshell.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Otis Gospodnetic",
            "id": "comment-15516375",
            "date": "2016-09-23T13:01:18+0000",
            "content": "We hit this in Solr-Redis: https://github.com/sematext/solr-redis/issues/38#issuecomment-249184074 "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15516808",
            "date": "2016-09-23T15:49:18+0000",
            "content": "This number is a little bit ancient. We already have filter(..) and foo:bar^=1. But {!terms} is a little bit different question. It has dedicated method switch which judges whether it will rewrite to score or constant score filter.  "
        },
        {
            "author": "David Smiley",
            "id": "comment-15516813",
            "date": "2016-09-23T15:52:37+0000",
            "content": "Terms' method doesn't change the semantic effects; it's only about efficiency given different options.\n\nThis may be an old issue number but nonetheless I feel it's valid still. "
        },
        {
            "author": "David Smiley",
            "id": "comment-15688000",
            "date": "2016-11-22T21:46:03+0000",
            "content": "SOLR-9786 effectively incorporated such a hint.  QParser.setIsFilter "
        }
    ]
}