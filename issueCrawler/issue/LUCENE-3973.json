{
    "id": "LUCENE-3973",
    "title": "Incorporate PMD / FindBugs",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/build"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "This has been touched on a few times over the years.  Having static analysis as part of our build seems like a big win.  For example, we could use PMD to look at System.out.println statements like discussed in LUCENE-3877 and we could possibly incorporate the nocommit / @author checks as well.\n\nThere are a few things to work out as part of this:\n\n\tShould we use both PMD and FindBugs or just one of them? They look at code from different perspectives (bytecode vs source code) and target different issues.  At the moment I'm in favour of trying both but that might be too heavy handed for our needs.\n\tWhat checks should we use? There's no point having the analysis if it's going to raise too many false-positives or problems we don't deem problematic.\n\tHow should the analysis be integrated in our build? Need to work out when the analysis should run, how it should be incorporated in Ant and/or Maven, what impact errors should have.",
    "attachments": {
        "LUCENE-3973.patch": "https://issues.apache.org/jira/secure/attachment/12522667/LUCENE-3973.patch",
        "findbugs-lucene.patch": "https://issues.apache.org/jira/secure/attachment/12860513/findbugs-lucene.patch",
        "solr-core.html": "https://issues.apache.org/jira/secure/attachment/12522669/solr-core.html",
        "core.html": "https://issues.apache.org/jira/secure/attachment/12522668/core.html"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-12T02:42:39+0000",
            "content": "\nShould we use both PMD and FindBugs or just one of them?\n\n+1 for PMD. I'm only looking at the license here. ",
            "author": "Robert Muir",
            "id": "comment-13252148"
        },
        {
            "date": "2012-04-12T06:46:54+0000",
            "content": "Both are helpful. We use both and I think FindBugs is slightly more useful than PMD but it's just a subjective opinion not anything I measured. \n\nAlso, both can be verbose and a pain in the ass at times when you know the code is right and they still complain... And they are long to execute so they should be part of jenkins nightly/ smoke tests I think, not regular builds (and definitely not ant test...). ",
            "author": "Dawid Weiss",
            "id": "comment-13252244"
        },
        {
            "date": "2012-04-12T06:48:07+0000",
            "content": "There is also this interesting tool: http://babelfish.arc.nasa.gov/trac/jpf\n\nI haven't used it and I don't know if it can handle Lucene size codebase (the number of execution paths will be astronomic) but if somebody has some time to play with it, it'd be interesting to hear what it can do. ",
            "author": "Dawid Weiss",
            "id": "comment-13252245"
        },
        {
            "date": "2012-04-12T18:54:45+0000",
            "content": "How should the analysis be integrated in our build? Need to work out when the analysis should run, how it should be incorporated in Ant and/or Maven, what impact errors should have.\n\ni would suggest going about it incrementally...\n\n\n\thook into build.xml as optional targets that can be run if you have the neccessary libs installed, don't fail the build just generate the XML report files\n\tput the needed libs on builds.apache.org, and hook it into the jenkins nightly target, and configure jenkins to display it's pretty version of the xml reports so people can at least see what's going on.\n\tstart adding/tweaking custom rule sets in dev-tools to eliminate rules we don't care about, add rules we want that don't exist, or change the severity of rules we think are more/less important\n\ttweak the build.xml to fail if anything above some arbitrary severity is tripped\n\tworry about maven\n\n\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-13252735"
        },
        {
            "date": "2012-04-12T18:58:54+0000",
            "content": "\n\n\tstart adding/tweaking custom rule sets in dev-tools to eliminate rules we don't care about, add rules we want that don't exist, or change the severity of rules we think are more/less important\n\ttweak the build.xml to fail if anything above some arbitrary severity is tripped\n\n\n\nOnce upon a time i actually implemented this for PMD in solr's (pre merged trunk) build.xml, but it got bogged down by some more serious problems in our automated builds and forgotten about (the only other issue i remember was the XSLT i was using to pretty-display the PMD results was GPL or something \u2013 but these days i would say just let the jenkins PMD plugin render the results, and local devs can read the XML file)\n\nanyway ... the patch in SOLR-143 might be helpful for the \"run lots of checks, but only fail the build for serious ones\" idea. ",
            "author": "Hoss Man",
            "id": "comment-13252736"
        },
        {
            "date": "2012-04-12T19:25:23+0000",
            "content": "I believe both pmd and findbugs are on maven repos so one could use ivy to fetch them automatically. One thing less to think about. ",
            "author": "Dawid Weiss",
            "id": "comment-13252758"
        },
        {
            "date": "2012-04-12T21:21:27+0000",
            "content": "I believe both pmd and findbugs are on maven repos so one could use ivy to fetch them automatically. One thing less to think about.\n\nUnless you run into the same taskdef/classloader/sub-build/permgen-OOM problem we had with clover, and the maven-ant-tasks, and ivy that have prevented us from doing the same thing with them.\n ",
            "author": "Hoss Man",
            "id": "comment-13252851"
        },
        {
            "date": "2012-04-13T06:48:18+0000",
            "content": "Unless you run into the same taskdef/classloader/sub-build/permgen-OOM\n\nI was just saying to fetch them via ivy and then spawn a separate jvm to run them, much like you'd do anyway if they are separate installations. \n\nBesides \u2013 we already have an 'ivy warning with instructions', the same can be done with permgen/OOM problems \u2013 detect the current (ANT's) VM's settings (can be done via mx bean) and warn/ fail the build if the defaults are too low, instructing the user to set up ANT_OPTS properly...\n\nI'm not pressing on this, this is a no-issue. ",
            "author": "Dawid Weiss",
            "id": "comment-13253180"
        },
        {
            "date": "2012-04-14T04:35:18+0000",
            "content": "Simple POC patch which adds a pmd target to lucene/common-build.xml.  It currently uses ivy:cachepath (but I think I prefer the way Hoss suggests).\n\nI will attach some example results from analyzing lucene/solr core.\n\nIn our build system, is it possible to run a target for every module? I don't really want to latch this onto compile like clover.\n\nStill much to do but just showing where things are going. ",
            "author": "Chris Male",
            "id": "comment-13253987"
        },
        {
            "date": "2012-04-14T04:36:38+0000",
            "content": "HTML results for lucene core (core) and solr core (solr-core). ",
            "author": "Chris Male",
            "id": "comment-13253988"
        },
        {
            "date": "2012-04-14T09:25:15+0000",
            "content": "Actually I could probably make this a top-level target and do all modules at once. ",
            "author": "Chris Male",
            "id": "comment-13254060"
        },
        {
            "date": "2012-04-23T03:51:55+0000",
            "content": "Patch which runs PMD much like RAT.  This uses ivy:cachepath still and I haven't seen any OOMs.\n\nSince this doesn't have any impact on the build unless someone explicitly runs it, I'd like to commit this and then begin to tweak. ",
            "author": "Chris Male",
            "id": "comment-13259352"
        },
        {
            "date": "2012-04-23T03:54:16+0000",
            "content": "The patch places all the HTML files under lucene/build/pmd.  An alternative approach (and what I was doing before) is to have a pmd dir under each module's build dir. ",
            "author": "Chris Male",
            "id": "comment-13259354"
        },
        {
            "date": "2012-04-23T04:03:40+0000",
            "content": "Improved patch which connects the PMD tasks to the ivy checks we have. ",
            "author": "Chris Male",
            "id": "comment-13259356"
        },
        {
            "date": "2012-04-23T04:06:01+0000",
            "content": "\nThe patch places all the HTML files under lucene/build/pmd. An alternative approach (and what I was doing before) is to have a pmd dir under each module's build dir.\n\nWe need to be careful about where these results go: it could affect packaging tasks.  ",
            "author": "Robert Muir",
            "id": "comment-13259359"
        },
        {
            "date": "2012-04-23T04:08:47+0000",
            "content": "We need to be careful about where these results go: it could affect packaging tasks.\n\nGood point.  Then having a single folder for all the results which is outside of the module build dirs is probably safest.  The IDE setups do the same thing. ",
            "author": "Chris Male",
            "id": "comment-13259360"
        },
        {
            "date": "2012-04-23T04:12:24+0000",
            "content": "One thing I also notice is that we probably need to exclude generated classes from those examined.  They obviously don't contain the nicest looking code and then to pollute the results, especially for analyzers-common. ",
            "author": "Chris Male",
            "id": "comment-13259361"
        },
        {
            "date": "2012-04-23T04:13:11+0000",
            "content": "updated patch with 2 tweaks:\n\n\texplicitly exclude pmd/ from binary dist patterns (just in case!)\n\tonly download jars for pmd (not source and javadocs, they are massive)\n\n ",
            "author": "Robert Muir",
            "id": "comment-13259363"
        },
        {
            "date": "2012-04-23T04:15:18+0000",
            "content": "\nGood point. Then having a single folder for all the results which is outside of the module build dirs is probably safest. \n\nI think its pretty safe really. I just have no idea what PMD produces, and don't want anything sucked in on accident \n\nI don't think anything would have been included, but better to be paranoid instead. ",
            "author": "Robert Muir",
            "id": "comment-13259365"
        },
        {
            "date": "2012-04-23T04:18:21+0000",
            "content": "\nOne thing I also notice is that we probably need to exclude generated classes from those examined. They obviously don't contain the nicest looking code and then to pollute the results, especially for analyzers-common.\n\nWell, we can worry about that later I guess... you already have a pmd.excludes so if we want to tweak things like\nthat we could just define pmd.excludes in analyzers-common or whatever. ",
            "author": "Robert Muir",
            "id": "comment-13259368"
        },
        {
            "date": "2012-04-23T04:21:36+0000",
            "content": "Yeah definitely, thats why I included that option. ",
            "author": "Chris Male",
            "id": "comment-13259369"
        },
        {
            "date": "2012-05-02T03:20:43+0000",
            "content": "Updated patch which includes:\n\n\n\tMoved listing of the rules to their own ruleset file, which will allow us to customize them more and so I don't have to keep making changes to common-build.xml\n\tAdded full support for solr and top-level.\n\n ",
            "author": "Chris Male",
            "id": "comment-13266310"
        },
        {
            "date": "2015-02-05T21:32:44+0000",
            "content": "I took the latest patch available and brought it up to current trunk. It's still needs a more complete ruleset to use, but is a reasonable starting point after 2 years of inactivity. ",
            "author": "Mike Drob",
            "id": "comment-14308032"
        },
        {
            "date": "2015-02-06T17:04:26+0000",
            "content": "Another attempt at the patch. Changes include:\n\n\tUsing a newer version of PMD (that recognizes Java 8)\n\tAdopted the rule set from SOLR-143 since it appeared more complete\n\n\n\nRan the task locally, and uploaded the results to http://people.apache.org/~mdrob/lucene-3973/\n\nThat is a huge amount of output, so I would appreciate some feedback on tweaking the ruleset. Especially on rules that we can trim for now to make the list more manageable.\n\nStill to do:\n\n\tFigure out how to link from the reports to source code.\n\tGenerate reports consumable by Jenkins (follow-on issue, maybe?)\n\n ",
            "author": "Mike Drob",
            "id": "comment-14309436"
        },
        {
            "date": "2015-02-06T18:22:20+0000",
            "content": "I think as this stands it's useful and we should commit it and iterate later?\n\nI.e. devs can now run \"ant pmd\" and see potential issues.\n\nCan I run \"ant pmd\" inside one module (e.g. lucene/core) and see only the issues for that module?\n\nI think better integration to the build / failing if new warnings show up, etc., can come later?\n\nI use pmd as part of my pre-commit process, but using custom python wrapper; this would already be a step up for me! ",
            "author": "Michael McCandless",
            "id": "comment-14309561"
        },
        {
            "date": "2015-02-06T18:26:57+0000",
            "content": "You can run 'ant pmd' from inside of solr or lucene top-level dirs. I haven't tried running it from inside of lower level modules yet.\n\nCommit now and iterate later if fine with me. ",
            "author": "Mike Drob",
            "id": "comment-14309570"
        },
        {
            "date": "2015-02-06T18:55:27+0000",
            "content": "Can we call the ant task something easier to remember, like ant lint? I don't think the name should be tied to the implementation. ",
            "author": "Ryan Ernst",
            "id": "comment-14309632"
        },
        {
            "date": "2015-02-06T19:07:55+0000",
            "content": "+1 ",
            "author": "David Smiley",
            "id": "comment-14309667"
        },
        {
            "date": "2015-02-06T19:15:23+0000",
            "content": "I think having the task name tied to the implementation is fine if we plan on adding other static analysis tools later.\n\nSo I imagine we have ant pmd and ant findbugs and then ant lint to run them both together. And eventually we tie it into precommit to fail, if we ever get to the magical zero warning threshold. ",
            "author": "Mike Drob",
            "id": "comment-14309683"
        },
        {
            "date": "2015-02-06T20:34:32+0000",
            "content": "That is just confusing.  It would be simpler to having all the linting type functionality within a single task.  Internally if there is a pmd and findbugs tasks, ok.  But it should be simple to run the \"static analysis\" task (and remember the name), without having to run precommit (which does a lot of other stuff). ",
            "author": "Ryan Ernst",
            "id": "comment-14309848"
        },
        {
            "date": "2015-02-06T21:01:34+0000",
            "content": "Sure, drop the precommit idea. I was just thinking out loud.\n\nAdded a lint task that currently just delegates to PMD. Can be extended later.\n\nVerified that both lint and pmd can be called from the top level and from various modules. ",
            "author": "Mike Drob",
            "id": "comment-14309910"
        },
        {
            "date": "2015-02-07T16:48:57+0000",
            "content": "Just as a side note, you might be interested to know that we could already have a great static analysis feature... warnings from the javac compiler itself. \n\nUnfortunately people are not even interested in looking at these, more or less fixing them. So e.g. solr/common-build.xml turns them off.\n\nI'm just kind of curious how you envision PMD succeeding when these are still ignored... ",
            "author": "Robert Muir",
            "id": "comment-14310816"
        },
        {
            "date": "2015-02-07T17:00:09+0000",
            "content": "That's a good point Rob.  Maybe we can tackle this one module (or sets of modules) at a time, failing the build for that module once we've gotten it clean.  I'd like to do that with the spatial module \u2013 I just tried and observed a bunch of compile warnings and I'd like to fix them, and just as importantly have the build fail if a new compile warning should show up in the future. ",
            "author": "David Smiley",
            "id": "comment-14310817"
        },
        {
            "date": "2015-02-09T03:57:53+0000",
            "content": "I'm just kind of curious how you envision PMD succeeding when these are still ignored...\nI imagine that those are ignored because there are so many of them. If we get them down to a good number (i.e. zero) then future ones can be set to fail the build, or at least configured on a Jenkins instance somewhere to fail the build.\n\nI am definitely willing to put in the time myself to cut these down; David's suggestion to go by module seems perfectly reasonable to me. We can do javac warnings or PMD warnings or both. Getting the tooling in place is a necessary step in that direction. ",
            "author": "Mike Drob",
            "id": "comment-14311763"
        },
        {
            "date": "2015-02-10T02:36:25+0000",
            "content": "Here's my patch for tooling for javac warnings. I don't think more tooling is needed on the javac side, no fancy ant macros, no bikesheds, instead just code fixing. Folks can either fix the warnings, or add @SuppressWarnings and fix them later. This way, any new warnings will fail the build if introduced.\n\nIf this is too much to handle at once, and we want to do it per-module, then put a javac.args=\"-Xlint:all\" before common-build.xml is imported, in each module that fails.\n\n\nIndex: lucene/common-build.xml\n===================================================================\n--- lucene/common-build.xml\t(revision 1658537)\n+++ lucene/common-build.xml\t(working copy)\n@@ -164,7 +164,8 @@\n   <property name=\"javac.debug\" value=\"on\"/>\n   <property name=\"javac.source\" value=\"1.8\"/>\n   <property name=\"javac.target\" value=\"1.8\"/>\n-  <property name=\"javac.args\" value=\"-Xlint -Xlint:-deprecation -Xlint:-serial -Xlint:-options\"/>\n+  <!-- all warnings, except deprecation. -->\n+  <property name=\"javac.args\" value=\"-Werror -Xlint:auxiliaryclass -Xlint:cast -Xlint:classfile -Xlint:-deprecation -Xlint:dep-ann -Xlint:divzero -Xlint:empty -Xlint:fallthrough -Xlint:finally -Xlint:options -Xlint:overloads -Xlint:overrides -Xlint:path -Xlint:processing -Xlint:rawtypes -Xlint:static -Xlint:try -Xlint:unchecked -Xlint:varargs\"/>\n   <property name=\"javadoc.link\" value=\"http://download.oracle.com/javase/8/docs/api/\"/>\n   <property name=\"javadoc.link.junit\" value=\"http://junit.sourceforge.net/javadoc/\"/>\n   <property name=\"javadoc.packagelist.dir\" location=\"${common.dir}/tools/javadoc\"/>\n\n ",
            "author": "Robert Muir",
            "id": "comment-14313404"
        },
        {
            "date": "2017-03-25T06:46:57+0000",
            "content": "Attached proof-of-concept patch implements ant findbugs on Lucene (Solr not included); fails the build if any warnings are found.\nIt generates a report (HTML) file in build/findbugs/lucene.html.\nNow. I can add findbugs to jenkins-nightly, so that we could link to findbugs results from developer page, similar to what is done for Clover. This would become obsolete if SOLR-5869 is implemented, because Sonar does a Findbugs scan. But then, I don't see much going on under SOLR-5869.\nI could also create a (XML) filter that would exclude all current bugs, and fold findbugs into precommit.\nThoughts? ",
            "author": "Daniel Jelinski",
            "id": "comment-15941608"
        }
    ]
}