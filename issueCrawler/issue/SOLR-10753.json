{
    "id": "SOLR-10753",
    "title": "Add array Stream Evaluator",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "New Feature",
        "fix_versions": [
            "6.7",
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Resolved",
        "status": "Resolved"
    },
    "description": "The array Stream Evaluator returns an array of numbers. It can contain numbers and evaluators that return numbers.\n\nSyntax:\n\n\na = array(1, 2, 3, 4, 5, 6)",
    "attachments": {
        "SOLR-10753.patch": "https://issues.apache.org/jira/secure/attachment/12869984/SOLR-10753.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-26T02:55:54+0000",
            "content": "Patch with tests ",
            "author": "Joel Bernstein",
            "id": "comment-16025733"
        },
        {
            "date": "2017-05-26T08:38:33+0000",
            "content": "What about calling it list() or listOf(). You could also have mapOf ?? ",
            "author": "Gethin James",
            "id": "comment-16025992"
        },
        {
            "date": "2017-05-26T12:54:39+0000",
            "content": "We've added a List which holds a list of Streaming Expressions. This returns a list/array of numbers or strings.\n\nI thought about using vector, but that seems to have a different meaning in math.\n\nI think in Lisp there is a make-array function.\n\nIt seemed array was just the simplest name for the function. ",
            "author": "Joel Bernstein",
            "id": "comment-16026248"
        },
        {
            "date": "2017-05-26T14:23:36+0000",
            "content": "Could it just be a thing that returns an list of objects? Then it's up to the container to handle whatever they are.\n\n\nlist(1,2,3,4)\nlist(1,add(2,3),if(gt(a,b),a,b))\nlist(1,\"foo\", search(....))\n\n\n\nBasically, a single function that creates a list/array of whatever. It is up to the containing function to decide if the list is valid for its purpose. For example,\n\nadd(1, list(2,3,4,5)) is the same as add(1,2,3,4,5)\nadd(1, list(\"foo\",\"bar\")) is deemed invalid\n\n\n\nAnd map with a list would allow things like\n\nmap(add(1,?), over=list(2,3,4,5)) would result in list(1 + 2, 1 + 3, 1 + 4, 1 + 5)\n\n ",
            "author": "Dennis Gove",
            "id": "comment-16026326"
        },
        {
            "date": "2017-05-26T14:31:41+0000",
            "content": "The array is really just designed to support vector math operations. The next step is a matrix which wraps arrays to support matrix math operations. I think it makes sense to keep these two structures focused on vector and matrix math.\n\nThe list is more of a general purpose container for Streaming Expressions.\n\nIf the function name array is too general, perhaps we can just go with vector or vec? ",
            "author": "Joel Bernstein",
            "id": "comment-16026331"
        },
        {
            "date": "2017-05-26T14:39:39+0000",
            "content": "I'm going to commit what I have for this, it's a pretty small piece of code. We can make it more generic with further work. Or we could always change the name from array to something more specific. I'll leave the ticket open for further work. Dennis Gove, feel free to change the scope of the function.\n ",
            "author": "Joel Bernstein",
            "id": "comment-16026345"
        },
        {
            "date": "2017-05-26T14:40:07+0000",
            "content": "Commit 81821b29ae4c507f02d09b29fcd0196db8647865 in lucene-solr's branch refs/heads/master from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=81821b2 ]\n\nSOLR-10753: Add array Stream Evaluator ",
            "author": "ASF subversion and git services",
            "id": "comment-16026347"
        },
        {
            "date": "2017-05-26T14:41:05+0000",
            "content": "The array itself isn't doing the vector math operations, though. Right? I'd think it'd be up to the function doing the math operation to validate its input, which means accepting a list that could be filled with anything is alright - cause it'll be validated anyway.\n\nI'm concerned that there'll end up being a lot of very similar things used for very different reasons. And users will be confused about when to use which. ",
            "author": "Dennis Gove",
            "id": "comment-16026348"
        },
        {
            "date": "2017-05-26T14:49:28+0000",
            "content": "One thing that we could do is have a split between containers that work with Streams (list) and a containers that works with primitives (matrix, array).\n\nThis is would be a fairly clean split. \n\n ",
            "author": "Joel Bernstein",
            "id": "comment-16026358"
        },
        {
            "date": "2017-05-26T14:56:49+0000",
            "content": "Also one thing about the current list is that it's a Streaming Expression. While the array is a Stream Evaluator. So the list is actually iterating each of it's list items and iterating them in order, basically concatenating Streams. The array is simply returning a list of numbers. So they have very different behaviors. ",
            "author": "Joel Bernstein",
            "id": "comment-16026369"
        },
        {
            "date": "2017-05-26T15:01:03+0000",
            "content": "If that's the case, isn't it the same as merge? ",
            "author": "Dennis Gove",
            "id": "comment-16026375"
        },
        {
            "date": "2017-05-26T15:09:31+0000",
            "content": "Merge is maintaining the sort order (merge sort) between the streams. List is concatenating the streams.\n\nI'd be happy changing list to cat and we could reserve the list function for different behavior. ",
            "author": "Joel Bernstein",
            "id": "comment-16026383"
        },
        {
            "date": "2017-05-26T15:12:16+0000",
            "content": "Maybe merge should support and inOrder option which doesn't maintain sort between the streams. ",
            "author": "Dennis Gove",
            "id": "comment-16026388"
        },
        {
            "date": "2017-05-26T15:19:19+0000",
            "content": "Maybe, but I think cat is maybe more intuitive then adding a parameter to merge. In SQL we'll be implementing union and unionall with these streams.\n\nBut I think list is probably not the best name for the function. ",
            "author": "Joel Bernstein",
            "id": "comment-16026394"
        },
        {
            "date": "2017-05-26T18:26:05+0000",
            "content": "following fails reliably with NPE...\n\n\nant test  -Dtestcase=StreamExpressionTest -Dtests.method=testArray -Dtests.seed=FF67716FF72EA807 -Dtests.slow=true -Dtests.locale=hu-HU -Dtests.timezone=PNT -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n...\n\n   [junit4] ERROR   0.16s | StreamExpressionTest.testArray <<<\n   [junit4]    > Throwable #1: java.lang.NullPointerException\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([FF67716FF72EA807:5941390BC1769A68]:0)\n   [junit4]    > \tat org.apache.solr.client.solrj.io.stream.StreamExpressionTest.testArray(StreamExpressionTest.java:5751)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n\n\n\nSeed doesn't seem to matter, same failure reproduces for this test method any way i try it. ",
            "author": "Hoss Man",
            "id": "comment-16026636"
        },
        {
            "date": "2017-05-26T18:59:42+0000",
            "content": "I committed a fix for this a little while back. It should be working fine in master now. ",
            "author": "Joel Bernstein",
            "id": "comment-16026681"
        },
        {
            "date": "2017-05-26T19:12:31+0000",
            "content": "hmmm... ok, sorry for the noise ... not sure what happened. ",
            "author": "Hoss Man",
            "id": "comment-16026698"
        }
    ]
}