{
    "id": "LUCENE-8184",
    "title": "Enable flexible Query.rewrite",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [],
        "fix_versions": []
    },
    "description": "I think Query.rewrite(IndexReader) should be generalized a bit to enable users to customize the rewrite process outside of the Query classes (i.e. without having to create a custom Query just to implement rewrite). \u00a0This could be as simple as having rewrite accept a QueryRewriter parameter that has a method that accepts a Query to be rewritten. \u00a0Only this method would call rewrite on any given Query. \u00a0And given very few spots actually use the IndexReader arg, we could even remove that as a parameter and add a getter to QueryRewriter (which is allowed to return null). \u00a0Or create a subclass e.g. QueryRewriterWithIndexReader if some prefer casting; debatable.\n\u00a0\nToday, users have to hard-code Lucene class names with related logic for each one. \u00a0This is obviously annoying/tedious, and brittle as Lucene adds to queries, and tends to be duplicative. \u00a0Examples of why an app might want to rewrite a query:\n\n\tto replace position-sensitive queries that are not already SpanQuery's with their SpanQuery equivalent. \u00a0This is useful in highlighting \u2013 Luwak's SpanRewriter does this.\n\tto simplify BooleanQuery's to a canonical form, or other canonicalization such as BoostQuery boost of 1. \u00a0The point is to simplify or strengthen the accuracy of query examination logic for whatever further purpose (e.g. routing a query for an optimization). \u00a0\n\tto replace one field for another\n\tto \"fix\" pure negative queries so that they work (by adding a MatchAllDocs query). \u00a0I'm surprised we still live with this.\n\tto relax a query that doesn't match to a looser one that does (e.g. manipulate\u00a0minimumNumberShouldMatch) without re-parsing the query. \u00a0Granted re-parsing affords using different analysis or other strategies.\n\tto make it easier to use a Lucene Query class as a base class during query parsing/building. You could rewrite to strip out/replace only the AST nodes and leave the real Lucene Queries as-is.\n\n\n\nFinally until LUCENE-3041 is addressed (generic Query visitor) a customizable rewrite would allow a generic query visitor using a QueryRewriter that doesn't actually rewrite anything. \u00a0It's a little abusive as it's doing wasted work and no rewrite is actually occurring, but I think the overhead needn't be that much and such a use-case might even special-case BooleanQuery in particular to lower the overhead further.  Basically for known many-child aggregator Query classes, customize to simply delegate.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}