{
    "id": "SOLR-9490",
    "title": "BoolField always returning false for non-DV fields when javabin involved (via solrj, or intra node communication)",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.2.1",
            "6.3",
            "7.0"
        ],
        "affect_versions": "6.2",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Critical"
    },
    "description": "2 diff users posted comments in SOLR-9187 indicating that changes introduced in that issue have broken BoolFields that do not use DocValues...\n\nColvin Cowie...\n\nHi, I've just picked up 6.2.0. It seems that the change to toExternal() in BoolField now means that booleans without DocValues return null, which then turns into Boolean.FALSE in toObject() regardless of whether the value is true or false.\n\ne.g. with this schema, facet counts are correct, the returned values are wrong.\n\n<field name=\"f_EVE64\" type=\"boolean\" indexed=\"true\" stored=\"true\" required=\"false\" multiValued=\"false\"/>\n<fieldType name=\"boolean\" class=\"solr.BoolField\" sortMissingLast=\"true\"/>\n\n\n\n\"response\":{\"numFound\":2,\"start\":0,\"maxScore\":1.0,\"docs\":[\n      {\n        \"id\":\"124\",\n        \"f_EVE64\":false,\n        \"_version_\":1544828487600177152},\n      {\n        \"id\":\"123\",\n        \"f_EVE64\":false,\n        \"_version_\":1544828492458229760}]\n  },\n  \"facet_counts\":{\n    \"facet_queries\":{},\n    \"facet_fields\":{\n      \"f_EVE64\":[\n        \"false\",1,\n        \"true\",1]},\n\n\nCould toExternal() perhaps fallback to how it originally behaved? e.g.\n\nif (f.binaryValue() == null) {\n      return indexedToReadable(f.stringValue());\n}\n\n\n\nPavan Shetty...\n\nI downloaded solr version 6.2.0 (6.2.0 764d0f19151dbff6f5fcd9fc4b2682cf934590c5 - mike - 2016-08-20 05:41:37) and installed my core.\n\nIn my schema.xml i have an field like following :\n\n<field name=\"stock_status\" type=\"boolean\" indexed=\"true\" stored=\"true\" multiValued=\"false\"/>\n\nNow i am accessing this field using SolrJ (6.1.0). But i am always getting false value for above field even though it contains true boolean value. This is happening for all boolean fields.\n\nhttp://localhost:8983/solr...wt=javabin&version=2 HTTP/1.1\n\nIt is working fine in other response writer.\n\nIf i change the solr version to 6.1.0, with same SolrJ, it starts working. So clearly this is a bug in version 6.2.0.",
    "attachments": {
        "SOLR-9490.patch": "https://issues.apache.org/jira/secure/attachment/12827789/SOLR-9490.patch",
        "Solr9490.java": "https://issues.apache.org/jira/secure/attachment/12827775/Solr9490.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-08T17:33:56+0000",
            "author": "Hoss Man",
            "content": "I'm having trouble trying to (trivially) reproduce this ... Colvin Cowie's comments suggest this has nothing to do with the response writer used, and that the JSON output would demonstrate the same problem, but when i try the simplest possible steps to demonstrate it seems to be working fine...\n\n\n$ git co releases/lucene-solr/6.2.0\n...\n$ ant clean && cd solr && ant server && bin/solr -e techproducts\n...\nPOSTing file solr.xml to [base]\n...\n$ grep inStock example/exampledocs/solr.xml \n  <field name=\"inStock\">true</field>\n$ curl 'http://localhost:8983/solr/techproducts/query?q=id:SOLR1000&fl=inStock'\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":0,\n    \"params\":{\n      \"q\":\"id:SOLR1000\",\n      \"fl\":\"inStock\"}},\n  \"response\":{\"numFound\":1,\"start\":0,\"docs\":[\n      {\n        \"inStock\":true}]\n  }}\n\n\n\nwhat am i missing?\n\nColvin: what is the version attribute on your schema?  does this problem exist only when you use \"old\" (pre-6.2) indexes after upgrading, or can folks reproduce this problem even with completely new indexes (build with 6.2) ?\n\nEDIT: Note this is the definition of inStock in the 6.2 techproducts schema...\n\n\n<schema name=\"example\" version=\"1.6\">\n...\n   <field name=\"inStock\" type=\"boolean\" indexed=\"true\" stored=\"true\" />\n...\n    <fieldType name=\"boolean\" class=\"solr.BoolField\" sortMissingLast=\"true\"/>\n\n ",
            "id": "comment-15474503"
        },
        {
            "date": "2016-09-09T05:46:29+0000",
            "author": "Pavan Shetty",
            "content": "Hoss Man, for me it seems to be the problem with solr's response writer. if i use xml or json response writer to get the information it returns proper value, true or false for boolean field, of course through solr admin console.\n\nBut if we have  binary response writer then it always returns false(or null) for boolean field, this one i tested through solr j client which uses this as response writer.\n\nI changed lucene version 6.1 and 6.2 in solrconfig (or solr j version 6.1 / 6.2) and it is working fine if solr version is below 6.2. if i change solr version to 6.2 then whatever lucene version (or solr j) it returns false for boolean field. Did reindexing each time i changed version of solr and lucene and issue is reproduce able for me. ",
            "id": "comment-15476004"
        },
        {
            "date": "2016-09-09T06:11:09+0000",
            "author": "Pavan Shetty",
            "content": "Also this issue is not dependent on docValues. DocValues true or false for boolean field , this issue is reproduce able. ",
            "id": "comment-15476042"
        },
        {
            "date": "2016-09-09T14:42:42+0000",
            "author": "Erick Erickson",
            "content": "Hmmm, would it be at all possible to provide a unit test illustrating this? It's really helpful so we actually do the same thing.\n\nThen we can incorporate that test in the final patch and be sure the problem you;'re seeing is actually fixed for now and into the future. ",
            "id": "comment-15477208"
        },
        {
            "date": "2016-09-09T15:20:58+0000",
            "author": "Colvin Cowie",
            "content": "Unfortunately I don't think that I personally can provide a unit test (without getting approval to do so).\n\nHowever I can reproduce the error reliably just by deploying the cloud example and creating a document:\n\n\nsolr stop -all\n\nrm -rf ../example/cloud\nsolr -e cloud -noprompt\ncurl http://localhost:8983/solr/gettingstarted/update -d \"[ {\\\"f_b\\\": true, \\\"id\\\": \\\"1\\\" }, {\\\"f_b\\\": false, \\\"id\\\": \\\"2\\\" }]\"\n\n\nhttp://localhost:8983/solr/gettingstarted/select?facet.field=f_b&facet=on&indent=on&q=*:*&wt=json\n\n\n{\n  \"responseHeader\":{\n    \"zkConnected\":true,\n    \"status\":0,\n    \"QTime\":78,\n    \"params\":{\n      \"q\":\"*:*\",\n      \"facet.field\":\"f_b\",\n      \"indent\":\"on\",\n      \"facet\":\"on\",\n      \"wt\":\"json\"}},\n  \"response\":{\"numFound\":2,\"start\":0,\"maxScore\":1.0,\"docs\":[\n      {\n        \"f_b\":false,\n        \"id\":\"1\",\n        \"_version_\":1545007494796935168},\n      {\n        \"f_b\":false,\n        \"id\":\"2\",\n        \"_version_\":1545007494796935168}]\n  },\n  \"facet_counts\":{\n    \"facet_queries\":{},\n    \"facet_fields\":{\n      \"f_b\":[\n        \"false\",1,\n        \"true\",1]},\n    \"facet_ranges\":{},\n    \"facet_intervals\":{},\n    \"facet_heatmaps\":{}}}\n\n\n\nThe strange thing however, is that when I try and reproduce the problem with our actual configuration and test data which wrongly returns false on the javabin response, the json response returns the correct response. It appears in that case that toExternal() isn't being called at all. I don't know enough about the code to know why/how it would be bypassing toExternal() in that case though. ",
            "id": "comment-15477310"
        },
        {
            "date": "2016-09-09T15:59:50+0000",
            "author": "Colvin Cowie",
            "content": "I've spotted that the error with the json response happens when there is more than 1 shard in the collection.\n\nSo toExternal() isn't being called when using a single shard and the json response writer, but it is used by the JavaBinCodec (via toObject() for BoolField) since javabin is used for communication between the shards? ",
            "id": "comment-15477412"
        },
        {
            "date": "2016-09-09T16:20:32+0000",
            "author": "Dan Fox",
            "content": "Hi, I think I've also run into this issue.   Here's a unit test that demonstrates it. ",
            "id": "comment-15477475"
        },
        {
            "date": "2016-09-09T17:34:59+0000",
            "author": "Hoss Man",
            "content": "\nI've spotted that the error with the json response happens when there is more than 1 shard in the collection.\n\nSo toExternal() isn't being called when using a single shard and the json response writer, but it is used by the JavaBinCodec (via toObject() for BoolField) since javabin is used for communication between the shards?\n\nGah .. yes, of course, that's totally plausable.  It should have occured to me when you posted your original JSON example that you might have bene using SolrCloud.  That would explain why you saw it with JSON, but Pavan only reported seeing it using javabin, and not with JSON.\n\n(I assumed that since your reports conflicted, there must have been some other independent variable you had in common \u2013 but it was actaully a difference you two had: cloud mode)\n\nDan: thank you for the patch, I've refactored the key bit into our existing SolrExampleTests, so it's run as part of many tests (embedded, Jetty with XML, jetty with javabin, etc...)\n\nWith the attached test patch, all of these tests fail...\n\n\n   [junit4] Tests with failures [seed: 4947C3B3180BA616]:\n   [junit4]   - org.apache.solr.client.solrj.embedded.SolrExampleStreamingBinaryTest.testExampleConfig\n   [junit4]   - org.apache.solr.client.solrj.embedded.SolrExampleJettyTest.testExampleConfig\n   [junit4]   - org.apache.solr.client.solrj.SolrExampleBinaryTest.testExampleConfig\n   [junit4]   - org.apache.solr.client.solrj.embedded.SolrExampleEmbeddedTest.testExampleConfig\n\n\n\n..working on fix, I suspect Colvin's earlier comments in SOLR-9187  are correct and it's a trivial fix. ",
            "id": "comment-15477675"
        },
        {
            "date": "2016-09-09T17:56:08+0000",
            "author": "David Smiley",
            "content": "Not to be pedantic, but I believe this isn't about SolrCloud, rather about distributed-search (shards).  Neither require the other. ",
            "id": "comment-15477830"
        },
        {
            "date": "2016-09-09T18:03:33+0000",
            "author": "Hoss Man",
            "content": "patch w/fix i'm currently testing ",
            "id": "comment-15477855"
        },
        {
            "date": "2016-09-09T19:02:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d59715f14bc180ebb9b2aef8ebbcb02103e9fcc8 in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d59715f ]\n\nSOLR-9490: Fixed bugs in BoolField that caused it to erroneously return \"false\" for all docs depending on usage\n\n(cherry picked from commit 60ce8d7c549ef90cd6aaa9297bf31aeb3dd3417e) ",
            "id": "comment-15477963"
        },
        {
            "date": "2016-09-09T19:04:50+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 60ce8d7c549ef90cd6aaa9297bf31aeb3dd3417e in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=60ce8d7 ]\n\nSOLR-9490: Fixed bugs in BoolField that caused it to erroneously return \"false\" for all docs depending on usage ",
            "id": "comment-15477972"
        },
        {
            "date": "2016-09-09T19:04:54+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 5aedab619af9c65136b18dac46c493994465485b in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5aedab6 ]\n\nSOLR-9490: Merge remote-tracking branch 'refs/remotes/origin/master' ",
            "id": "comment-15477974"
        },
        {
            "date": "2016-09-12T02:49:43+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Re-opened to back-port to 6.2.1 ",
            "id": "comment-15482866"
        },
        {
            "date": "2016-09-12T09:34:00+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d5e75a4d4165dd39febdc373258cae12ca0eedae in lucene-solr's branch refs/heads/branch_6_2 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d5e75a4 ]\n\nSOLR-9490: Fixed bugs in BoolField that caused it to erroneously return \"false\" for all docs depending on usage\n\n(cherry picked from commit 60ce8d7c549ef90cd6aaa9297bf31aeb3dd3417e)\n\n(cherry picked from commit d59715f) ",
            "id": "comment-15483633"
        },
        {
            "date": "2016-09-21T03:03:32+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Closing after 6.2.1 release ",
            "id": "comment-15508557"
        },
        {
            "date": "2016-11-07T14:49:49+0000",
            "author": "Tim Owen",
            "content": "Just to add to this, if anyone was using 6.2.0 and doing document updates, this bug affected Atomic Updates and will have reset all boolean fields in the document to false when updating other fields of the document i.e. the actually-stored and indexed values are changed. We discovered this just recently and noticed some documents had lost their original boolean value, because we had been doing Atomic updates during the period we were running 6.2.0 and that had reset the values in the document itself. Even though we've now upgraded to 6.2.1 so the displayed values are shown correctly, the stored values have now been changed. ",
            "id": "comment-15644382"
        }
    ]
}