{
    "id": "SOLR-2823",
    "title": "Re-use of UpdateProcessor configurations in multiple UpdateChains",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Implemented"
    },
    "description": "When dealing with multiple UpdateChains and Processors, you frequently need to re-use configuration. Two chains may be equal except for one config setting in one <processor>.\n\nI propose to allow named processor configs, which can be referenced by name in the chains.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13125313",
            "date": "2011-10-11T19:26:08+0000",
            "content": "This could look like:\n\n<updateRequestProcessorChain name=\"crawl\">\n  <processor class=\"com.example.MyCrawlSpecificProcessor\" />\n  <processor ref=\"langid\" />\n  <processor class=\"solr.RunUpdateProcessorFactory\" />\n</updateRequestProcessorChain>\n\n<updateRequestProcessorChain name=\"cms\">\n  <processor class=\"com.example.MyCmsSpecificProcessor\" />\n  <processor ref=\"langid\" />\n  <processor class=\"solr.RunUpdateProcessorFactory\" />\n</updateRequestProcessorChain>\n\n<updateProcessors>\n  <processor name=\"langid\" class=\"solr.LanguageIdentifierUpdateProcessorFactory\">\n    <str name=\"langid.fl\">text,title,subject,description</str>\n    <str name=\"langid.langField\">language_s</str>\n    <str name=\"langid.fallback\">en</str>\n  </processor>\n</updateProcessors>\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13125595",
            "date": "2011-10-12T04:58:50+0000",
            "content": "Jan: Seems like it would also make sense to think about common \"sub-chains\" that are re-used \u2013 sequences of processors used in conjunction with one another. Since we already have named processor chains, maybe it would be enough to say that (instead of naming individual processors) you could specify any chain, by name, as a sub-chain...\n\n\n<updateRequestProcessorChain name=\"crawl\">\n  <processor class=\"com.example.MyCrawlSpecificProcessor\" />\n  <subchain ref=\"common-chain\" />\n</updateRequestProcessorChain>\n\n<updateRequestProcessorChain name=\"cms\">\n  <processor class=\"com.example.MyCmsSpecificProcessor\" />\n  <subchain ref=\"common-chain\" />\n</updateRequestProcessorChain>\n\n<updateRequestProcessorChain name=\"common-chain\">\n  <processor name=\"langid\" class=\"solr.LanguageIdentifierUpdateProcessorFactory\">\n    <str name=\"langid.fl\">text,title,subject,description</str>\n    <str name=\"langid.langField\">language_s</str>\n    <str name=\"langid.fallback\">en</str>\n  </processor>\n  <processor class=\"solr.RunUpdateProcessorFactory\" />\n</updateRequestProcessorChain>\n\n\n\n...what do you think?\n\n(probably have to watch out for infinite loops, but that should be a fairly straightforward check when instantiating the chains, and we can fail fast.)\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13125626",
            "date": "2011-10-12T06:26:26+0000",
            "content": "and next thing you know, you'll have recreated Ant's task/datatype/reference/plugin infrastructure  "
        },
        {
            "author": "Chris Male",
            "id": "comment-13125630",
            "date": "2011-10-12T06:42:06+0000",
            "content": "You make a great point Erik, this sort of thing surely has been considered before.  Bean declarations in Spring also come to mind.  Are we able to leverage any existing implementations / ideas? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13125641",
            "date": "2011-10-12T07:10:40+0000",
            "content": "Sub chains could solve the exact example, but that was just for showing the principle. I think (optinally) named processors are a more direct solution. Think of the named processors as processor configs, not necessarily 1:1 with Java objects. When instansiating the \"crawl\" chain we'd simply fetch the config from the referenced element instead of inline. It may still have a distinct \"solr.LanguageIdentifierUpdateProcessorFactory\" class instance from the \"cms\" pipeline.\n\nSub chains may also come in handy for some situations, but that could be handled separately later, if needed. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13125890",
            "date": "2011-10-12T14:44:14+0000",
            "content": "Bean declarations in Spring also come to mind. Are we able to leverage any existing implementations / ideas?\n\nperish the thought!  \n\nMy fairly snarky comment about recreating an \"Ant\" container for very rich bean setting and executing capabilities was a bit hyperbolic.\n\nNext someone will want an :\n\n\n<if test=\"${doc.langid} == 'xyz'\">\n  <next-processor-chain/>\n  <else>\n    <a-different-processor-chain/>\n  </else>\n</if>\n\n\n\n\n\nSo... (and I'm not proposing this since I've not got an implementation to contribute, but bits and pieces of it already are): a ScriptProcessor mechanism, so that when you need logic and code you can, umm, write some code.\n\n\nmy_update_processor.rb\n----------------------\n# totally contrived example and syntax\nLogUpdateProcessor docs\n\ncase command\n  when :add\n\n    docs.each { |doc|\n      LangIdProcessor doc, {:lang_id = '... options ...'}\n      if doc[:lang] == 'fr'\n        SpecialFrenchProcessor doc\n        doc[:special] = true\n      else\n        NonFrenchProcessor doc\n      end\n    end\n    next.process_add\n  when :delete\n    next.process_delete\n  else\n    next # or raise \"Unsupported command\"\nend\n\nRunUpdateProcessor docs\n\n\n\nAnyway, you can see where I'm coming from with that example (regardless of contrived \"DSL\").\n\nIn other words, this XML nonsense for configuration is a slippery slope. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13125894",
            "date": "2011-10-12T14:53:01+0000",
            "content": "I don't think it is hyperbolic to suggest that we're marching towards workflow definitions, something Ant does very well.\n\nGiven we're already discussing: a) allowing people to write the actual processing logic in JS b) creating a standard set of simple processing functions and c) in this issue wanting to separate function definitions from workflows, an interpreted DSL sounds like a damn good idea. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13126235",
            "date": "2011-10-12T23:08:08+0000",
            "content": "Hey guys, you're jumping fast here \n\nErik, you must have peeked in my ideas book because exactly what you propose is something I planned to introduce later, but using Groovy as the DSL  - much like Gradle does. I think this could be achieved by making UpdateProcessorChains pluggable and definable in solrconfig. The DefaultUpdateProcessorChain could be the simple linear array[] of processors. The ScriptedUpdateProcessorChain would be the powerhouse where you could do both simple linear ones as well as complex logic. You can even do simple document manipulation inline without calling a processor, such as doc.deleteField(\"title\")...\n\nThis approach also solves another wish of mine, namely being able to define chains outside of solrconfig.xml. Logically, configuring schema and document processing is done by a \"content\" guy, but configuring solrconfig.xml is done by the \"hardware/operations\" guys. Imagine a solr/conf/pipeline.groovy defined in solrconfig.xml:\n\n\n<updateProcessorChain class=\"solr.ScriptedUpdateProcessorChainFactory\" file=\"pipeline.groovy\" />\n\n\n\npipeline.groovy:\n\nchain simple {\n  process(langid)\n  process(copyfield)\n  chain(logAndRun)\n}\n\nchain moreComplex {\n  process(langid)\n  if(doc.getFieldValue(\"employees\") > 10)\n    process(copyfield)\n  else\n    chain(myOtherProcesses)\n  doc.deleteField(\"title\")\n  chain(logAndRun)\n}\n\nchain logAndRun {\n  process(log)\n  process(run)\n}\n\nprocessor langid {\n  class = \"solr.LanguageIdentifierUpdateProcessorFactory\"\n  config(\"langid.fl\", \"title,body\")\n  config(\"langid.langField\", \"language\")\n  config(\"map\", true)\n}\n\nprocessor copyfield {\n  script = \"copyfield.groovy\"\n  config(\"from\", \"title\")\n  config(\"to\", \"title_en\")\n}\n\n\n\nI don't know what it takes to code such a thing, but if we had it, I'd never go back to defining pipelines in XML  "
        },
        {
            "author": "Chris Male",
            "id": "comment-13126313",
            "date": "2011-10-13T02:50:14+0000",
            "content": "Not that I have anything against Groovy, but can't we achieve something like that using JS? We already have an issue (which Erik will remember the number of) where we support defining the actual processing logic.  Can't we work from that? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13126450",
            "date": "2011-10-13T09:19:52+0000",
            "content": "The beauty of Groovy in this setting is that it's got all the power of Java right there, everything is objects so you can call any method on any object, you could even do 4.times \n{ processor(incrementor) }\n  Language choice is a matter of taste anyway. The DSL should have such defaults that novice users don't even know that they are programming when creating their workflows/chains. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13128286",
            "date": "2011-10-15T21:43:05+0000",
            "content": "\nI think (optinally) named processors are a more direct solution. Think of the named processors as processor configs, not necessarily 1:1 with Java objects. When instansiating the \"crawl\" chain we'd simply fetch the config from the referenced element instead of inline. It may still have a distinct \"solr.LanguageIdentifierUpdateProcessorFactory\" class instance from the \"cms\" pipeline.\n\nTo be clear: i wasn't arguing that the subchain syntax i suggested would be 1:1 with java objects either, it could work exactly as you intend named processors to work (ie: pure syntactic sugar).  my suggestions was just that if we allow \"subchain by reference\" type configuration, it would achieve everything you describe using named processors (because you could have a sub-chain containing a single processor) and it would handle the common case of chains that have a lot in common, but do some extra stuff at the beginning/end.\n\nSub chains may also come in handy for some situations, but that could be handled separately later, if needed.\n\nEh .. i guess .. but it seems like it would be less total work to just do subchains and let people use chains of one processor to deal with the \"reusing individual processor configs\" usecase(s).\n\n(FWIW: Don't let my comments stop/dissuade you, either way would be a huge improvement over what we've got now ... i just wanted to point out something that seemed like more bang for the buck) "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13128397",
            "date": "2011-10-16T13:02:00+0000",
            "content": "The more I think about the scriptable chain/workflow option, the more I'd like to go that direction and gain full freedom, rather than patch the way of configuring via XML. I've created SOLR-2841 to continue that discussion. This JIRA can then be dedicated to improvements to the current XML config. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15529312",
            "date": "2016-09-28T11:21:12+0000",
            "content": "Closing this as we since have much more flexibility in defining chains etc. "
        }
    ]
}