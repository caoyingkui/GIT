{
    "id": "LUCENE-8091",
    "title": "Better nearest-neighbor queries",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Won't Fix",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [],
        "fix_versions": []
    },
    "description": "LatLonPoint.nearest is very efficient at identifying the top-k documents sorted by distance from a given point, by working directly on the BKD tree. This doesn't support filtering though, so if you need to filter by another property, you need to switch to querying on the filter and sorting by a LatLonPointSortField. Unfortunately this requires visiting all documents that match the filter.\n\nWe could leverage the new setMinCompetitiveScore API introduced in LUCENE-4100 in order to allow for retrieval of nearest neighbors with arbitrary filters, by recomputing a bounding-box when a new minimum competitive score is set.\n\nIn the future we could also leverage this to speed up queries that are boosted by distance. For instance if the final score is a weighted sum of the score on a text field and a distance-based score, and the minimum competitive score gets higher than the maximum score that may be produced on the text field at some point, then we could dynamically prune hits based on the distance.",
    "attachments": {
        "LUCENE-8091.patch": "https://issues.apache.org/jira/secure/attachment/12901536/LUCENE-8091.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16286373",
            "date": "2017-12-11T18:16:13+0000",
            "content": "Here is a prototype that demonstrates the idea in the 1D case. For instance when running a nearest-neighbor search given a dataset of 1M points uniformly distributed between 0 and 1M, a regular sorted search needs to visit the 1M documents (as expected), while this new special query only requires ~11k calls to DocIdSetIterator.nextDoc / TopDocsCollector.collect, ~32k calls to IntersectVisitor.visit, ~3k calls to IntersectVisitor.compare and runs about 7x faster.\n\nThis patch needs a lot of cleaning/testing before being ready to commit. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16286510",
            "date": "2017-12-11T20:38:03+0000",
            "content": "Adrien, just skimmed the patch, but it doesn't appear to refer to the N-dimensional float KNN impl introduced in LUCENE-7974 - would the impl here supercede that one? ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16287631",
            "date": "2017-12-12T13:59:11+0000",
            "content": "This implementation requires values to be both indexed with points and readable with doc values. The thing that makes it hard with more than 1 dimension is that we do not have a canonical way to represent vectors in doc values, this requires a custom encoding with a binary doc value field. So it would be doable but either the API would be a bit hard to use or we would have to make assumptions as to how the float[] is encoded in a binary field. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16496513",
            "date": "2018-05-31T13:10:59+0000",
            "content": "I'm closing this issue in favor of LUCENE-8340 which is less generic but probably more useful. ",
            "author": "Adrien Grand"
        }
    ]
}