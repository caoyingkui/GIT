{
    "id": "SOLR-6777",
    "title": "Create convenience methods in CloudSolrServer to specify the collection to act on, on a per request basis.",
    "details": {
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "As a user of solrcloud as a NoSQL datastore, with components of my complex data model stored in many collections, I would like to easily pass in the collection name for each query/add/delete statement via an overloaded method that accepts a String equal to the name of the collection.\n\nCurrently there exists methods to set the default collection for a CloudSolrServer instance. This losses its luster in a multithreaded environment. The work arounds to date are passing in a SolrParam on the Update handlers, but on the Query handles you are forced to basically maintain a CloudSolrServer instance for each collection you want to interact with, and never call setDefaultCollect after creation.\n\nHere are some examples:\n\nCloudSolrServer solr = new CloudSolr(zkHost);\nsolr.addBeans(beans, collection);\nsolr.addBeans(beans, collection, commitWithin);\nsolr.commit(collection, commitWithin);\nsolr.optimize(collection);\n\nSolrQuery query = new SolrQuery();\nquery.setQuery(\":\");\nQueryResponse rsp = solr.query(query, collection);",
    "attachments": {
        "SOLR-6777.patch": "https://issues.apache.org/jira/secure/attachment/12683169/SOLR-6777.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-11-22T17:52:55+0000",
            "author": "Shawn Heisey",
            "content": "Joey Dale, for queries, specifying the collection is very easy without any additional methods.\n\n\nSolrQuery query = new SolrQuery();\nquery.setQuery(\"*:*\");\nquery.set(\"collection\",\"test\");\nQueryResponse rsp = solr.query(query);\n\n\n\nIt's when you want to add or delete that things get a lot less straightforward.  I believe that the code example in the description of SOLR-3920 is the current way to update multiple collections.\n\nConvenience methods are a really good idea for add, commit, deleteByQuery, etc.  Although dealing with multiple collections is very easy for queries, it may also be a good idea to build a convenience method for that too. ",
            "id": "comment-14222095"
        },
        {
            "date": "2014-11-22T18:33:31+0000",
            "author": "Shawn Heisey",
            "content": "Working on a patch for this, there will be a lot of new methods.  The method proliferation trips my \"keep it tidy\" warning klaxon. ",
            "id": "comment-14222106"
        },
        {
            "date": "2014-11-22T19:38:24+0000",
            "author": "Shawn Heisey",
            "content": "First crack at a patch.\n\nI opted to keep the number of new methods as small as I could by only duplicating the most expressive version of each overloaded method.\n\nIf there's consensus that I should overload all the convenience methods, I can certainly do that. ",
            "id": "comment-14222133"
        },
        {
            "date": "2014-11-22T19:48:55+0000",
            "author": "Shawn Heisey",
            "content": "Updated patch.  This adds some javadoc to the CloudSolrServer#request method. ",
            "id": "comment-14222143"
        },
        {
            "date": "2014-11-22T19:52:14+0000",
            "author": "Shawn Heisey",
            "content": "I'm not super attached to the particular argument positions for the collection argument on these new methods, so if there's good reasons to move them, let me know. ",
            "id": "comment-14222145"
        },
        {
            "date": "2014-11-22T19:53:20+0000",
            "author": "Shawn Heisey",
            "content": "Also, I did not find a reasonably convenient constant to use in place of \"collection\" ... if there is one, I can certainly substitute it. ",
            "id": "comment-14222148"
        },
        {
            "date": "2014-11-22T21:28:44+0000",
            "author": "Shawn Heisey",
            "content": "Is ping actually useful in a CloudSolrServer context?  The patch does include a collection-aware ping method, but if ping itself is not useful, then that wouldn't be either.\n\nWhat I would hope for with ping is that it would request a query from all shards and fail if any of them are down or return a no-good response, similar to what I have done on my non-cloud sharded setup.  It may not actually be useful, because of SolrCloud's ability to deal with down servers when replicationFactor is at least 2.\n\nThis is the config I'm using for ping on my non-cloud setup:\n\n\n<requestHandler name=\"/admin/ping\" class=\"solr.PingRequestHandler\">\n  <lst name=\"invariants\">\n    <str name=\"qt\">/lbcheck</str>\n    <str name=\"q\">*:*</str>\n    <str name=\"df\">catchall</str>\n  </lst>\n  <lst name=\"defaults\">\n     <str name=\"echoParams\">all</str>\n  </lst>\n  <str name=\"healthcheckFile\">server-enabled.txt</str>\n</requestHandler>\n\n<requestHandler name=\"/lbcheck\" class=\"solr.SearchHandler\" default=\"false\">\n  <lst name=\"defaults\">\n    <str name=\"echoParams\">all</str>\n    <int name=\"rows\">1</int>\n    <str name=\"df\">catchall</str>\n    <str name=\"shards.qt\">/lbcheck</str>\n    <str name=\"shards.info\">true</str>\n    <xi:include href=\"shards.xml\" xmlns:xi=\"http://www.w3.org/2001/XInclude\"/>\n  </lst>\n</requestHandler>\n\n\n\nThe shards.xml file for the broker core looks like this:\n\n\n<str name=\"shards\">idxa2.REDACTED.com:8981/solr/inclive,idxa1.REDACTED.com:8981/solr/s0live,idxa1.REDACTED.com:8981/solr/s1live,idxa1.REDACTED.com:8981/solr/s2live,idxa2.REDACTED.com:8981/solr/s3live,idxa2.REDACTED.com:8981/solr/s4live,idxa2.REDACTED.com:8981/solr/s5live</str>\n\n ",
            "id": "comment-14222187"
        }
    ]
}