{
    "id": "SOLR-2673",
    "title": "Some Solr tests depend on order of test methods in source file, but Java 7 seems to no longer ensure that",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.4",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "With Java7 (b147) Solr tests fail, seems to be because of caching (maybe ConcurrentLRUCache violates Java Memory Model, which can be seen in Java 7 only):\n\nExample TestFiltering (passes sometimes):\n\n\njunit-sequential:\n    [junit] Testsuite: org.apache.solr.search.TestFiltering\n    [junit] Tests run: 2, Failures: 0, Errors: 1, Time elapsed: 6,082 sec\n    [junit]\n    [junit] ------------- Standard Error -----------------\n    [junit] VII 24, 2011 4:53:02 AM org.apache.solr.SolrTestCaseJ4 assertJQ\n    [junit] SEVERE: query failed JSON validation. error=mismatch: '3'!='2' @ response/docs/[0]/val_i\n    [junit]  expected =/response/docs==[{\"val_i\":3}]\n    [junit]  response = {\n    [junit]   \"responseHeader\":{\n    [junit]     \"status\":0,\n    [junit]     \"QTime\":11},\n    [junit]   \"response\":{\"numFound\":5,\"start\":2,\"docs\":[\n    [junit]       {\n    [junit]         \"val_i\":2}]\n    [junit]   }}\n    [junit]  request = fl=val_i&sort=val_i+asc&start=2&q={!cache%3Dfalse}*:*&rows=1\n    [junit] NOTE: reproduce with: ant test -Dtestcase=TestFiltering -Dtestmethod=testCaching -Dtests.seed=9127548164660185224:-55134\n75064094727964\n    [junit] NOTE: test params are: codec=RandomCodecProvider: {id=MockFixedIntBlock(blockSize=571), val_i=MockFixedIntBlock(blockSiz\ne=571)}, locale=bg, timezone=Pacific/Galapagos\n    [junit] NOTE: all tests run in this JVM:\n    [junit] [TestFiltering]\n    [junit] NOTE: Windows 7 6.1 amd64/Oracle Corporation 1.7.0 (64-bit)/cpus=2,threads=1,free=253309552,total=262799360\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testCaching(org.apache.solr.search.TestFiltering):        Caused an ERROR\n    [junit] mismatch: '3'!='2' @ response/docs/[0]/val_i\n    [junit] java.lang.RuntimeException: mismatch: '3'!='2' @ response/docs/[0]/val_i\n    [junit]     at org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:467)\n    [junit]     at org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:415)\n    [junit]     at org.apache.solr.search.TestFiltering.testCaching(TestFiltering.java:105)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1486)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1404)\n    [junit]\n    [junit]\n    [junit] Test org.apache.solr.search.TestFiltering FAILED\n\n\n\nIt is definitely not a Hotspot issue, as it also happens with -Xint and -Xbatch.",
    "attachments": {
        "SOLR-2673.patch": "https://issues.apache.org/jira/secure/attachment/12487640/SOLR-2673.patch",
        "SOLR-2673_randomize_methods.patch": "https://issues.apache.org/jira/secure/attachment/12487641/SOLR-2673_randomize_methods.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13070156",
            "date": "2011-07-24T12:31:37+0000",
            "content": "I tried making all methods of ConcurrentLRUCache synchronized, it did not help. So problem seems to be somewhere else. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13070162",
            "date": "2011-07-24T13:00:48+0000",
            "content": "Hmmm... notice the \"numFound\":5\nThere are only 4 documents added in this test.\nIf I add a clearIndex() at the top of the test method, everything is fine.\n\nBut why would that be necessary?\nIt looks like with Java7, that the test methods are not being run in the order they are declared in the file.\nThat's probably the root cause of the other Solr test failures with Java7 too. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13070164",
            "date": "2011-07-24T13:05:27+0000",
            "content": "Aahhhhaaaa.\n\nWe should always clear the index. It seems maybe that reflection and annotations in Java 7 are simply return (for performance reasons) in arbitrary order.\n\nIn general it is bad to have them relying on each other. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13070166",
            "date": "2011-07-24T13:09:49+0000",
            "content": "Can you confirm this? If this is the case, it'll be interesting. There is nothing in Java spec saying reflection should return field or methods in their declaration order, but traditionally this was the case. Jeroen Frijters (IKVM) hit a similar problem with other Java programs \u2013 they rely on the order of fields returned by reflection; turned out he actually had to patch IKVM to mimic Java (HotSpot) behavior for these programs.\n\nhttp://weblog.ikvm.net/CommentView.aspx?guid=c1c354e6-2c7d-404a-b2fe-244db9f03250 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13070169",
            "date": "2011-07-24T13:20:05+0000",
            "content": "More info, so its really not defined in which order reflection returns fields:\n\nhttp://stackoverflow.com/questions/1097807/java-reflection-is-the-order-of-class-fields-and-methods-standardized\n\nThis issue should fix all solr tests to no longer rely on order as declared in tests. So tests should have no side-effects. If they have side-effects, we should make a hyper-method that calls the previous test* methods in order. I did this for EchoParams and now it works. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070171",
            "date": "2011-07-24T13:26:23+0000",
            "content": "\nIndex: lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java\n===================================================================\n--- lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java\t(revision 1150089)\n+++ lucene/src/test-framework/org/apache/lucene/util/LuceneTestCase.java\t(working copy)\n@@ -1457,6 +1457,7 @@\n           } catch (Exception e) { throw new RuntimeException(e); }\n         }\n       }\n+      Collections.shuffle(testMethods); // doesn't use seed (its not initialized yet!) but i think this is ok...\n       return testMethods;\n     }\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13070172",
            "date": "2011-07-24T13:27:01+0000",
            "content": "Simple fix for TestFiltering. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13070173",
            "date": "2011-07-24T13:30:07+0000",
            "content": "Was just going to suggest the same thing Robert! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070174",
            "date": "2011-07-24T13:32:50+0000",
            "content": "hehe i want all tests to be reproducible though, maybe we pass shuffle a random init'ed by the current day of the month or something \n\nwe don't have to commit it either, or we can make it a -D or something that is not set by default, just so we can fix tests. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13070177",
            "date": "2011-07-24T13:38:09+0000",
            "content": "If the Collection is ordered differently each time before the shuffle (which it might be since the method order is no longer defined), would it ever be reproducible even with a known random? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070178",
            "date": "2011-07-24T13:40:00+0000",
            "content": "The problem i am concerned about would be e.g. a test that makes a reader in @beforeclass (many tests build the index in beforeclass and share resources across tests).\n\nIn this case, perhaps there is some reuse bug (e.g. imagine a bug in terms dictionary cache or something) and it would not be reproducible if we shuffled differently... "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070179",
            "date": "2011-07-24T13:42:14+0000",
            "content": "By the way, if you add this shuffle, all these problems become visible on java6.\n\nAlso TestReplicationHandler is broken in the same way. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13070180",
            "date": "2011-07-24T13:44:01+0000",
            "content": "Absolutely.  My point is, can we even avoid that since the initial Collection is itself randomly sorted now since the methods come back in an undefined order? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070181",
            "date": "2011-07-24T13:46:19+0000",
            "content": "I doubt its truly random... it may be undefined but for a given jre its probably typically the same each time.\n\nI will investigate. We might be able to init LuceneTestCase's random in computeTestMethods instead of in beforeClass(), this would \ngive us a reproducible shuffle, which is the ideal situation. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13070183",
            "date": "2011-07-24T13:47:54+0000",
            "content": "We could also sort it to a known order (alphabetically) and then shuffle. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13070185",
            "date": "2011-07-24T13:48:43+0000",
            "content": "First bunch fixed (TestFiltering and TestEchoParams):\n\nCommitted trunk revision: 1150362\nCommitted 3.x revision: 1150367 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13070186",
            "date": "2011-07-24T13:50:35+0000",
            "content": "We could also sort it to a known order (alphabetically) and then shuffle.\n\nWe must do this in all cases, because else the same random would not help, if Java 7 already shuffled them. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13070187",
            "date": "2011-07-24T13:52:17+0000",
            "content": "Yup. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13070188",
            "date": "2011-07-24T13:53:35+0000",
            "content": "I doubt its truly random... it may be undefined but for a given jre its probably typically the same each time.\n\nIts somehow random in Java 7. If I run the same test multiple times, sometimes it fails sometimes it succeeds. Very strange, but it seems to be related to class loading and hotspot (maybe it uses some internal hotspot caches to speedup reflective access). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070190",
            "date": "2011-07-24T14:01:55+0000",
            "content": "attached is a patch that inits LTC's random inside computeTestMethods instead, and uses this to shuffle the test methods (so the shuffle is reproducible according to random seed) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070192",
            "date": "2011-07-24T14:03:05+0000",
            "content": "\nWe must do this in all cases, because else the same random would not help, if Java 7 already shuffled them.\n\nYou and chris are definitely right, in order to be consistent across different JREs, we must sort the methods first before shuffling.\n\nI'll update the patch. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070193",
            "date": "2011-07-24T14:07:20+0000",
            "content": "updated patch, with the sort-by-name before shuffle. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13070194",
            "date": "2011-07-24T14:09:10+0000",
            "content": "+1 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070221",
            "date": "2011-07-24T17:51:37+0000",
            "content": "I think we can resolve this issue now. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13070222",
            "date": "2011-07-24T17:53:58+0000",
            "content": "We should add a changes entry. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070232",
            "date": "2011-07-24T19:15:23+0000",
            "content": "i don't think thats very important, its just our internal tests, and everyone here is a committer. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106197",
            "date": "2011-09-16T14:48:50+0000",
            "content": "bulk close for 3.4 "
        }
    ]
}