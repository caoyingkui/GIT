{
    "id": "SOLR-9141",
    "title": "ClassCastException occurs in /sql handler with GROUP BY aggregationMode=facet and single shard",
    "details": {
        "components": [
            "Parallel SQL"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "ClassCastException occurs in /sql request handler using ORDER BY GROUP BY clause.\n\n\n$ curl --data-urlencode \"stmt=select count(*) from access_log\" \"http://localhost:8983/solr/access_log/sql?aggregationMode=facet\"\n{\"result-set\":{\"docs\":[\n{\"count(*)\":1309},\n{\"EOF\":true,\"RESPONSE_TIME\":239}]}}\n\n$ curl --data-urlencode 'stmt=select response, count(*) as count from access_log group by response' \"http://localhost:8983/solr/access_log/sql?aggregationMode=facet\"\n{\"result-set\":{\"docs\":[\n{\"EXCEPTION\":\"java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long\",\"EOF\":true,\"RESPONSE_TIME\":53}]}}\n\n\n\nSee following error messages:\n\n\n2016-05-19 10:18:06.477 ERROR (qtp1791930789-21) [c:access_log s:shard1 r:core_node1 x:access_log_shard1_replica1] o.a.s.c.s.i.s.ExceptionStream java.io.IOException: java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long\n    at org.apache.solr.client.solrj.io.stream.FacetStream.open(FacetStream.java:300)\n    at org.apache.solr.handler.SQLHandler$LimitStream.open(SQLHandler.java:1265)\n    at org.apache.solr.client.solrj.io.stream.SelectStream.open(SelectStream.java:153)\n    at org.apache.solr.handler.SQLHandler$MetadataStream.open(SQLHandler.java:1511)\n    at org.apache.solr.client.solrj.io.stream.ExceptionStream.open(ExceptionStream.java:47)\n    at org.apache.solr.handler.StreamHandler$TimerStream.open(StreamHandler.java:362)\n    at org.apache.solr.response.TextResponseWriter.writeTupleStream(TextResponseWriter.java:301)\n    at org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:167)\n    at org.apache.solr.response.JSONWriter.writeNamedListAsMapWithDups(JSONResponseWriter.java:183)\n    at org.apache.solr.response.JSONWriter.writeNamedList(JSONResponseWriter.java:299)\n    at org.apache.solr.response.JSONWriter.writeResponse(JSONResponseWriter.java:95)\n    at org.apache.solr.response.JSONResponseWriter.write(JSONResponseWriter.java:60)\n    at org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:65)\n    at org.apache.solr.servlet.HttpSolrCall.writeResponse(HttpSolrCall.java:725)\n    at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:469)\n    at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:229)\n    at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:184)\n    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)\n    at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:308)\n    at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:262)\n    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1668)\n    at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)\n    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n    at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\n    at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\n    at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1160)\n    at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)\n    at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n    at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1092)\n    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n    at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\n    at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\n    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n    at org.eclipse.jetty.server.Server.handle(Server.java:518)\n    at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)\n    at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)\n    at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)\n    at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)\n    at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\n    at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceAndRun(ExecuteProduceConsume.java:246)\n    at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:156)\n    at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)\n    at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long\n    at org.apache.solr.client.solrj.io.stream.FacetStream.fillTuples(FacetStream.java:461)\n    at org.apache.solr.client.solrj.io.stream.FacetStream.getTuples(FacetStream.java:420)\n    at org.apache.solr.client.solrj.io.stream.FacetStream.open(FacetStream.java:297)\n    ... 43 more",
    "attachments": {
        "SOLR-9141-test.patch": "https://issues.apache.org/jira/secure/attachment/12806194/SOLR-9141-test.patch",
        "SOLR-9141.patch": "https://issues.apache.org/jira/secure/attachment/12805403/SOLR-9141.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-21T07:02:55+0000",
            "author": "Minoru Osuka",
            "content": "Attach path file. ",
            "id": "comment-15294805"
        },
        {
            "date": "2016-05-24T07:14:10+0000",
            "author": "Joel Bernstein",
            "content": "I don't see an ORDER BY clause in your query. It looks like it's failing on a basic GROUP BY?\n\nI'll have to see if I can reproduce this with a test. What is the field type for the response column? ",
            "id": "comment-15297814"
        },
        {
            "date": "2016-05-24T10:37:58+0000",
            "author": "Minoru Osuka",
            "content": "Hi Joel,\n\nYes, It seems basic ORDER BY GROUP BY clause is failing.\n\nField type for the response is following:\n\n$ curl \"http://localhost:8983/solr/access_log/schema/fields/response\"\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":3},\n  \"field\":{\n    \"name\":\"response\",\n    \"type\":\"int\",\n    \"docValues\":true,\n    \"multiValued\":false,\n    \"indexed\":true,\n    \"stored\":true}}\n\n$ curl \"http://localhost:8983/solr/access_log/schema/fieldtypes/int\"\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":246},\n  \"fieldType\":{\n    \"name\":\"int\",\n    \"class\":\"solr.TrieIntField\",\n    \"positionIncrementGap\":\"0\",\n    \"precisionStep\":\"0\",\n    \"fields\":[\"response\"],\n    \"dynamicFields\":[\"*_i\"]},\n  \"warn\":\"This API is deprecated\"}\n\n\n\naggregationMode=map_reduce works fine.\nRsult of simple count is following:\n\n$ curl --data-urlencode \"stmt=SELECT count(*) FROM access_log\" \"http://localhost:8983/solr/access_log/sql?aggregationMode=map_reduce\"\n{\"result-set\":{\"docs\":[\n{\"count(*)\":1157},\n{\"EOF\":true,\"RESPONSE_TIME\":7}]}}\n\n\n\nAnd result of ORDER BY GROUP BY clause is following:\n\n$ curl --data-urlencode 'stmt=SELECT response, count(*) FROM access_log GROUP BY response' \"http://localhost:8983/solr/access_log/sql?aggregationMode=map_reduce\"\n{\"result-set\":{\"docs\":[\n{\"response\":200},\n{\"response\":404},\n{\"response\":500},\n{\"EOF\":true,\"RESPONSE_TIME\":18}]}}\n\n\n\nAlso aggregationMode=facet works fine without ORDER BY GROUP BY clause.\n\n$ curl --data-urlencode \"stmt=SELECT count(*) FROM access_log\" \"http://localhost:8983/solr/access_log/sql?aggregationMode=facet\"\n{\"result-set\":{\"docs\":[\n{\"count(*)\":1157},\n{\"EOF\":true,\"RESPONSE_TIME\":9}]}}\n\n\n\nIf SQL specified ORDER BY GROUP BY clause, it does't work due to ClassCastException.\n\n$ curl --data-urlencode 'stmt=SELECT response, count(*) FROM access_log GROUP BY response' \"http://localhost:8983/solr/access_log/sql?aggregationMode=facet\"\n{\"result-set\":{\"docs\":[\n{\"EXCEPTION\":\"java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long\",\"EOF\":true,\"RESPONSE_TIME\":35}]}}\n\n\n\nPlease see following solr.log:\n\n2016-05-24 08:48:24.944 INFO  (qtp1791930789-21) [c:access_log s:shard1 r:core_node1 x:access_log_shard1_replica1] o.a.s.c.S.Request [access_log_shard1_replica1]  webapp=/solr path=/sql params={aggregationMode=facet&stmt=select+response,+count(*)+as+count+from+access_log+group+by+response} status=0 QTime=5\n2016-05-24 08:48:24.970 INFO  (qtp1791930789-12) [c:access_log s:shard1 r:core_node1 x:access_log_shard1_replica1] o.a.s.c.S.Request [access_log_shard1_replica1]  webapp=/solr path=/select params={q=*:*&json.facet={\"response\":{\"type\":\"terms\",\"field\":\"response\",\"limit\":100,\"sort\":{\"index\":\"asc\"},\"facet\":{}}}&_stateVer_=access_log:10&rows=0&wt=javabin&version=2} hits=1157 status=0 QTime=5\n2016-05-24 08:48:24.979 ERROR (qtp1791930789-21) [c:access_log s:shard1 r:core_node1 x:access_log_shard1_replica1] o.a.s.c.s.i.s.ExceptionStream java.io.IOException: java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long\n    at org.apache.solr.client.solrj.io.stream.FacetStream.open(FacetStream.java:300)\n    at org.apache.solr.client.solrj.io.stream.SelectStream.open(SelectStream.java:153)\n    at org.apache.solr.client.solrj.io.stream.ExceptionStream.open(ExceptionStream.java:47)\n    at org.apache.solr.handler.StreamHandler$TimerStream.open(StreamHandler.java:362)\n    at org.apache.solr.response.TextResponseWriter.writeTupleStream(TextResponseWriter.java:301)\n    at org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:167)\n    at org.apache.solr.response.JSONWriter.writeNamedListAsMapWithDups(JSONResponseWriter.java:183)\n    at org.apache.solr.response.JSONWriter.writeNamedList(JSONResponseWriter.java:299)\n    at org.apache.solr.response.JSONWriter.writeResponse(JSONResponseWriter.java:95)\n    at org.apache.solr.response.JSONResponseWriter.write(JSONResponseWriter.java:60)\n    at org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:65)\n    at org.apache.solr.servlet.HttpSolrCall.writeResponse(HttpSolrCall.java:725)\n    at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:469)\n    at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:229)\n    at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:184)\n    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1676)\n    at org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:308)\n    at org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:262)\n    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1668)\n    at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:581)\n    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n    at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\n    at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\n    at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1160)\n    at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:511)\n    at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n    at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1092)\n    at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n    at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\n    at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\n    at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n    at org.eclipse.jetty.server.Server.handle(Server.java:518)\n    at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:308)\n    at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:244)\n    at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)\n    at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)\n    at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\n    at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceAndRun(ExecuteProduceConsume.java:246)\n    at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:156)\n    at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:654)\n    at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:572)\n    at java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long\n    at org.apache.solr.client.solrj.io.stream.FacetStream.fillTuples(FacetStream.java:461)\n    at org.apache.solr.client.solrj.io.stream.FacetStream.getTuples(FacetStream.java:420)\n    at org.apache.solr.client.solrj.io.stream.FacetStream.open(FacetStream.java:297)\n    ... 41 more\n\n\n\nAfter this patch applied, ORDER BY GROUP BY clause works fine using aggregationMode=facet.\n\n$ curl --data-urlencode 'stmt=SELECT response, count(*) FROM access_log GROUP BY response' \"http://localhost:8983/solr/access_log/sql?aggregationMode=facet\"\n{\"result-set\":{\"docs\":[\n{\"response\":200,\"count(*)\":1153},\n{\"response\":404,\"count(*)\":3},\n{\"response\":500,\"count(*)\":1},\n{\"EOF\":true,\"RESPONSE_TIME\":9}]}}\n\n ",
            "id": "comment-15298032"
        },
        {
            "date": "2016-05-24T12:44:10+0000",
            "author": "Joel Bernstein",
            "content": "Ok, I'll put a test together for this. Let's make sure though that we're using the same terminology so we get the ticket name correct.\n\nYou mention ORDER BY, but unless I'm missing something the query doesn't contain an ORDER BY. It contains a GROUP BY. If we are in agreement I'll change the name of the ticket.\n\nI don't believe there is a test case for grouping on a numeric field in facet mode, so I'll put a test case together for this.\n ",
            "id": "comment-15298112"
        },
        {
            "date": "2016-05-24T13:12:43+0000",
            "author": "Minoru Osuka",
            "content": "Sorry, I made a typo.\nwrong : ORDER BY\ncorrect: GROUP BY\n\nI will correct that. ",
            "id": "comment-15298148"
        },
        {
            "date": "2016-05-24T14:01:09+0000",
            "author": "Joel Bernstein",
            "content": "Ok thanks for reporting this and providing a patch. I'll work up a test case for this. ",
            "id": "comment-15298208"
        },
        {
            "date": "2016-05-24T14:59:19+0000",
            "author": "Joel Bernstein",
            "content": "This turning out to be difficult to reproduce. Originally I thought the issue was related to grouping on a numeric field. But after looking closely at the stack trace and the code the ClassCastException is happening when getting the count. \n\nSince there are testcases that exercise getting the count in facet mode already, and I've done a fair amount of manual testing that has never run into this error, I'm not sure how to reproduce the exception.\n\nYonik Seeley, a Class cast exception has occurred which seems to be showing that the value from a JSON facet API count is coming back as an int. The FacetStream code treats the count value as a long, which works in the test cases. Are there scenarios where the JSON facet API would return the count as an int? ",
            "id": "comment-15298311"
        },
        {
            "date": "2016-05-24T15:09:49+0000",
            "author": "Yonik Seeley",
            "content": "Are there scenarios where the JSON facet API would return the count as an int?\nYes (\"original\" faceting code does the same thing).\nOn a per-shard basis, \"count\" is normally/often returned as an int (we don't support more than that many docs per shard), but for distributed search they are summed as a long and returned that way.\n\nint/long are handled by the client.  If you look at FacetLongMerger, it sums counts via:\n    val += ((Number)facetResult).longValue(); ",
            "id": "comment-15298330"
        },
        {
            "date": "2016-05-24T16:28:59+0000",
            "author": "Joel Bernstein",
            "content": "Since the FacetStream is using CloudSolrServer to make a normal distributed JSON facet call, it will in most cases be returned as a long. This explains why test cases and manual testing work with the current code. But it appears that there is some scenario, possibly a single shard scenario, where the count is returned as an int. I'll test the single shard scenario and see if this is what's happening. ",
            "id": "comment-15298460"
        },
        {
            "date": "2016-05-25T19:22:56+0000",
            "author": "James Dyer",
            "content": "it appears that there is some scenario, possibly a single shard scenario, where the count is returned as an int\n\nIndeed, if we randomize the # of shards we can reproduce this easily. See patch: SOLR-9141-test.patch .  \n\n\njava.io.IOException: java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long\n\tat __randomizedtesting.SeedInfo.seed([530A362A02C855B3:F5E84F942E41E274]:0)\n\tat org.apache.solr.client.solrj.io.stream.FacetStream.open(FacetStream.java:351)\n... etc ...\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long\n\tat org.apache.solr.client.solrj.io.stream.FacetStream.fillTuples(FacetStream.java:506)\n\tat org.apache.solr.client.solrj.io.stream.FacetStream.getTuples(FacetStream.java:462)\n\tat org.apache.solr.client.solrj.io.stream.FacetStream.open(FacetStream.java:348)\n\t... 41 more\n\n\n\nIn fact, several of the test cases in this class fail when there is only 1 shard, but I haven't looked yet into why, or if these are valid failures. ",
            "id": "comment-15300693"
        },
        {
            "date": "2016-05-25T21:27:51+0000",
            "author": "James Dyer",
            "content": "ok, better patch, SOLR-9141-test.patch .  This randomly chooses either 1, 2 or 3 shards.  Parallel streams use the same # of workers as shards unless there are >2 shards, in which case a random # of workers are chosen up to the # of shards.  I also made adjustments to the # of EOFs to expect, etc.\n\nWith this, all tests in this class pass except the 2 FacetStream tests, which also pass if Minoru's patch is applied.\n\nI can commit both patches and resolve this issue tomorrow, unless someone objects. ",
            "id": "comment-15300878"
        },
        {
            "date": "2016-05-26T04:07:09+0000",
            "author": "Kevin Risden",
            "content": "I like the addition of testing randomizing and using a different number of shards. nit but it probably makes sense to pull the numWorkers logic out into a method so it doesn't have to be adjusted in every test.\n\nBased on what Yonik said, for consistency could use ((Number)bucket.get(\"count\")).longValue(); instead of the toString, cast, longValue? No real preference here. ",
            "id": "comment-15301488"
        },
        {
            "date": "2016-05-26T09:07:25+0000",
            "author": "Joel Bernstein",
            "content": "James Dyer, +1 on committing. I like the ((Number)bucket.get(\"count\")).longValue(); approach as well.\n\n\n ",
            "id": "comment-15301782"
        },
        {
            "date": "2016-05-26T13:47:29+0000",
            "author": "Minoru Osuka",
            "content": "\u200bJoel Bernstein, +1. ((Number)bucket.get(\"count\")).longValue(); seems faster than my patch (on my Macbook).\n\n\npackage test;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CastTest {\n\tpublic static void main(String[] args) {\n\t\tList<Object> objList = new ArrayList<Object>();\n\t\tfor (int i = 0; i < 10000; i++) {\n\t\t\tobjList.add(new Integer(i));\n\t\t}\n\n\t\tlong start = System.nanoTime();\n\t\tfor (Object obj : objList) {\n\t\t\tlong l = new Long(obj.toString()).longValue();\n\t\t}\n\t\tlong end = System.nanoTime();\n\t\tSystem.out.println(String.format(\"new Long(obj.toString()).longValue(); : %1$,10d ns\", (end - start)));\n\n\t\tstart = System.nanoTime();\n\t\tfor (Object obj : objList) {\n\t\t\tlong l = ((Number)obj).longValue();\n\t\t}\n\t\tend = System.nanoTime();\n\t\tSystem.out.println(String.format(\"((Number)obj).longValue();            : %1$,10d ns\", (end - start)));\n\t}\n}\n\n\n\n\nnew Long(obj.toString()).longValue(); : 11,301,332 ns\n((Number)obj).longValue();            :    831,366 ns\n\n ",
            "id": "comment-15302079"
        },
        {
            "date": "2016-05-26T14:35:13+0000",
            "author": "James Dyer",
            "content": "Here's a final patch (SOLR-9141.patch) that I will try and commit & back-port later today.\n\nfor consistency could use ((Number)bucket.get(\"count\")).longValue();\nof course.\n\nnit but it probably makes sense to pull the numWorkers logic out into a method so it doesn't have to be adjusted in every test.\ngot it.\n ",
            "id": "comment-15302155"
        },
        {
            "date": "2016-05-26T18:42:36+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 4d4030350b79303d6f358612473f4e68570858cc in lucene-solr's branch refs/heads/master from jdyer1\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4d40303 ]\n\nSOLR-9141: Fix ClassCastException when using the /sql handler count() function with single-shard collections ",
            "id": "comment-15302664"
        },
        {
            "date": "2016-05-26T18:49:19+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1609428786b17135f0d8ba413c4203b88977304b in lucene-solr's branch refs/heads/branch_6x from jdyer1\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1609428 ]\n\nSOLR-9141: Fix ClassCastException when using the /sql handler count() function with single-shard collections ",
            "id": "comment-15302670"
        },
        {
            "date": "2016-05-26T18:51:22+0000",
            "author": "James Dyer",
            "content": "Minoru, thank you for reporting this one. ",
            "id": "comment-15302679"
        }
    ]
}