{
    "id": "LUCENE-5896",
    "title": "A few potential reproducibility issues",
    "details": {
        "type": "Test",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "general/test"
        ],
        "affect_versions": "4.9",
        "status": "Open",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "I realized that passing the same seeded random instance to LuceneTestCase# newIndewWriterConfig doesn't necessarily produce the same IWC and I found a bunch of issues in that class using global random rather than local random. Yet, I went over the file to spot others but we might need to think about a more automated way to spot those...",
    "attachments": {
        "LUCENE-5896.patch": "https://issues.apache.org/jira/secure/attachment/12663136/LUCENE-5896.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14104011",
            "author": "Simon Willnauer",
            "content": "here are the ones I found looking over it for 2 min I bet there are more ",
            "date": "2014-08-20T15:32:16+0000"
        },
        {
            "id": "comment-14104022",
            "author": "Robert Muir",
            "content": "+1\n\nmaybe in the future we can use some other strategy to at least detect or avoid such bugs, maybe ThreadLocalRandom?\n\nBut please fix these for now, they just stop tests from reproducing and so on. ",
            "date": "2014-08-20T15:38:39+0000"
        },
        {
            "id": "comment-14104028",
            "author": "Michael McCandless",
            "content": "+1, nice catch. ",
            "date": "2014-08-20T15:41:19+0000"
        },
        {
            "id": "comment-14104410",
            "author": "ASF subversion and git services",
            "content": "Commit 1619211 from Simon Willnauer in branch 'dev/trunk'\n[ https://svn.apache.org/r1619211 ]\n\nLUCENE-5896: Use local random instance rather than global in LuceneTestCase ",
            "date": "2014-08-20T19:36:20+0000"
        },
        {
            "id": "comment-14104423",
            "author": "ASF subversion and git services",
            "content": "Commit 1619213 from Simon Willnauer in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1619213 ]\n\nLUCENE-5896: Use local random instance rather than global in LuceneTestCase ",
            "date": "2014-08-20T19:44:06+0000"
        },
        {
            "id": "comment-14104428",
            "author": "Dawid Weiss",
            "content": "Every random instance in the test framework is already assigned per-thread; there are no races there.\n\nI think not using the randomized context's random is actually a mistake (the only exception being tight loops where performance is the key). Once you fork a custom random it will escape. If you consistently use the framework's Random then you should always be able to reproduce the same run with tests.seed.\n\nUnless I'm missing something. ",
            "date": "2014-08-20T19:47:08+0000"
        },
        {
            "id": "comment-14104434",
            "author": "Dawid Weiss",
            "content": "So, to be clear \u2013 I think this is the problem:\n\npublic static IndexWriterConfig newIndexWriterConfig(Random r, Analyzer a) {\n\n\nIt should just use the randomized context's randomness consistently instead of accepting an external Random. It would be consistent (and is not leading to any thread related randomization races). ",
            "date": "2014-08-20T19:51:06+0000"
        },
        {
            "id": "comment-14104441",
            "author": "Robert Muir",
            "content": "Dawid: well this is exactly what i mean. We got ourselves into the situation long before that, when there was just a huge pile of code in LuceneTestCase.java, and I think a lot of that stuff is just hanging around, we should try to think of a way to do it better... ",
            "date": "2014-08-20T19:53:00+0000"
        },
        {
            "id": "comment-14104452",
            "author": "Dawid Weiss",
            "content": "Ok, clear. I would really encourage removing Random as a parameter in favor of grabbing a random() locally inside a method that needs it (or use adequate methods from the superclass). When there are loops that do millions of iterations and performance becomes an issue, fork off a local variable with\n\nRandom local = new Random(randomLong());\n...\n\n\n\nIdeally, it shouldn't escape outside of the method scope. ",
            "date": "2014-08-20T20:00:31+0000"
        },
        {
            "id": "comment-14104616",
            "author": "Hoss Man",
            "content": "...I went over the file to spot others but we might need to think about a more automated way to spot those...\n\nIt should just use the randomized context's randomness consistently instead of accepting an external Random. It would be consistent (and is not leading to any thread related randomization races).\n\nIronically, the best way (i can think of) to \"test the test utils\" and verify the reproducibility of these methods (along hte lines of simon's question about a \"more automated way to spot\" these types of bugs) goes out the window if you remove the Random param from these types of methods.  \n\nAs things stand right now, we can at least write a test that does this...\n\n\nlong localSeed = random().randomLong();\nassertEquals(newIndexWriterConfig(new Random(localSeed), XXX),\n             newIndexWriterConfig(new Random(localSeed), XXX));\n\n\n\n..and be fairly confident that we have a test which will fail if anyone introduces similar bugs into newIndexWriterConfig in the future.\n\n\n\nI havne't thought this through very hard, but...\n\nIs it worth refactoring these methods into some special package w/restricted visibility (and w/o direct access to LuceneTestCase.random() so we can test them with explicit random instances, but then wrap them in instances w/o the Random arg so test cases can't exploit them?\n\nmaybe something like...\n\n\npackage org.apache.lucene.test-internals; // put some test-the-test test's in same package\npublic final class HuperDuperRandomizedObjFactories {\n  // package protected, test-the-test test's in same package can vet directly\n  // but most code can never call this\n  static IndexWriterConfig newIndexWriterConfig(long localSeed, Analyzer a) {\n    Random localRandom = new Random(localSeed);\n    ...\n  }\n  public static IndexWriterConfig newIndexWriterConfig(random r, Analyzer a) {\n    return newIndexWriterConfig(r.nextLong(), a) {\n  }\n  ...\n}\n// - - -\npackage org.apache.lucene;\npublic class LuceneTestCase {\n  ...\n  public static IndexWriterConfig newIndexWriterConfig(Analyzer a) {\n    return HuperDuperRandomizedObjFactories.newIndexWriterConfig(random(),a);\n  }\n}\n\n ",
            "date": "2014-08-20T21:21:35+0000"
        },
        {
            "id": "comment-14105108",
            "author": "Dawid Weiss",
            "content": "> As things stand right now, we can at least write a test that does this...\n\nThis is a good idea if you make those methods hidden from general use (for example package-private, like you said). The drawback is it'd require an implementation of equals on the returned result, which may be a pain. ",
            "date": "2014-08-21T06:57:15+0000"
        },
        {
            "id": "comment-14186808",
            "author": "Simon Willnauer",
            "content": "Dawid Weiss just merged a PR that might make this easier after all.... I had similar problems in Elasticsearch leading to https://github.com/carrotsearch/randomizedtesting/pull/177 which would allow methods like this:\n\n\npublic static IndexWriterConfig newIndexWriterConfig(long seed) {\n    return RandomizedContext.current().runWithPrivateRandomness(new Randomness(seed), new Callable<IndexWriterConfig>() {\n        @Override\n        public IndexWriterConfig call() throws Exception {\n            return newIndexWriterConfig(); // delegate to the ordinary method\n        }\n    });    \n}\n\n\n\n\nit's not the simplest solution but it's way less error prone ",
            "date": "2014-10-28T13:26:35+0000"
        }
    ]
}