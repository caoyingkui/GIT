{
    "id": "SOLR-6152",
    "title": "Pre-populating values into search parameters on the query page of solr admin",
    "details": {
        "affect_versions": "4.3.1",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "Admin UI"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "In some use cases, it is highly desirable to be able to pre-populate the query page of solr admin with specific values.\n\nIn particular use case of mine, the solr admin user must pass a date range value without which the query would fail.\n\nIt isn't easy to remember the value format for non-solr experts, so I would like to have a way of hooking that value \"example\" into the query page.\n\nSee the screenshot attached, where I have inserted the fq parameter with date range into the Raw Query Parameters.",
    "attachments": {
        "prepoluate_query_parameters_query_page.bmp": "https://issues.apache.org/jira/secure/attachment/12648953/prepoluate_query_parameters_query_page.bmp"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Dmitry Kan",
            "id": "comment-14021865",
            "date": "2014-06-09T10:26:42+0000",
            "content": "screenshot of query page "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14147559",
            "date": "2014-09-25T09:02:49+0000",
            "content": "Good idea. Perhaps you could cook up a patch too? "
        },
        {
            "author": "Dmitry Kan",
            "id": "comment-14147585",
            "date": "2014-09-25T09:45:09+0000",
            "content": "I'm ready to work on this, but need some guidance for the feature spec. I.e. what would be the most natural way of configuring prepolutated values? Should it be a UI feature or could it be a special config entry in solrconfig.xml? Thoughts? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14147587",
            "date": "2014-09-25T09:51:50+0000",
            "content": "Ah, I interpreted your issue description as simply wanting a way to persist all query-interface state in the Admin-GUI URL, so that you could copy/paste the URL and send it to someone else. I'd find that useful in itself.\n\nPerhaps that could be part of the solution though - and then add ability in some config-file to supply default-values to be used in the GUI in case the URL contains not state already? "
        },
        {
            "author": "Dmitry Kan",
            "id": "comment-14147600",
            "date": "2014-09-25T10:21:57+0000",
            "content": "I believe, the current solr admin already displays this link, right after you have executed a query, on atop the result set. Or do you mean smth else?\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14147610",
            "date": "2014-09-25T10:40:35+0000",
            "content": "The link opens up a pure API request outside of the Admin UI. I'd like to see the query state persisted as part of Admin UI URL, so you can open up Admin UI inside Query tab, with the query params filled in \u2013 and btw, also execute that query without having to click the button. "
        },
        {
            "author": "Dmitry Kan",
            "id": "comment-14147625",
            "date": "2014-09-25T11:05:33+0000",
            "content": "Ok, I see what you are getting at. I think I like this, sounds useful. This jira and what you describe may potentially reuse some code. But these two sound like different features to me.\n\nI need to take first stab at this so that there is something material to contemplate about. Hoping to get moral support from Stefan Matheis (steffkes) too \n "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-14150142",
            "date": "2014-09-26T22:47:26+0000",
            "content": "I've heard someone saying me name?  I'll do the best i can Dmitry - let me start with this one:\n\nCurrently there is no place that uses a pre-configuration stored in solrconfig (or somewhere stored in the server, at all) - everything we have it either persisted in a cookie (auto-refresh at dataimport, timezone at logging and autoloading-terms at the schema-browser) or in the url (analysis-view, files-browser or plugins).\n\nInitially we thought about that at some features that were implemented in the early days - but every feature that would use a persisted state, was based on some kind of user-preference rather than something that would be valid globally (auto-refresh at dataimport, as an example). That doesn't mean that i would be against having something like that (absolutely not!) - only explaining how we got where we are currently ;>\n\nRegarding this issue: Jakob brought up something pretty similar in SOLR-6404 - where i've already described the place where i'd start digging:\n\nhttp://svn.apache.org/viewvc/lucene/dev/trunk/solr/webapp/web/js/scripts/query.js?view=markup#l209\nfor( var key in context.params )\n{\n  if( 'string' === typeof context.params[key] )\n  {\n    fields++;\n    $( '[name=\"' + key + '\"]', query_form )\n      .val( context.params[key] );\n  }\n}\n\n\nthat's pretty basic, but does explain why neither his use-case nor yours work right now out of the box. you can provide default-values for a bunch of fields (f.e. the query-field using http://host/solr/#/collection1/query?q=test) - that does not work for all fields and especially isn't updated after you change any input-values. that is something that already works on the analysis screen - where we could grab a bunch of things (:\n\nRight off the bat, i'd go with the following steps:\n\n\n\textend the string/input-field limitation, so that it would work with a checkbox/radiobox as well\n\tcheck the analysis view and how it updates the url (kinda hacky, explantation below)\n\tfigure out how to handle multi-valued fields (like the Filter-Query)\n\n\n\nI know, i'm mentioning your use-case only third (and therefore last) .. for a comparable simple reason: it's the most complicated one - i didn't look at it closely, just from what i'd imagine how it could be. obviously that is just a suggestion and if you feel like starting with that one .. i'm all yours!\n\nAnalysis-View: i said 'kinda hacky' because it does something weird, if you submit the form, it builds the new url - based on all form values - redirects you there and then executes the actual analysis. sounds strange .. is in fact strange, but i couldn't figure out another way. because every time you modify the url (either manually or via javascript) the framework we use (sammy.js) starts it's route matching and all - which doesn't play well w/ what i've wanted to do there. probably it would be worth a second look, the longer i'm thinking about this, the more i have the feeling that i've simply overlooked something, because something like that should exist - at least, in a more current version. "
        }
    ]
}