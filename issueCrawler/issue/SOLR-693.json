{
    "id": "SOLR-693",
    "title": "IntFieldSource incompatible with sint field type",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "I'm trying to create a custom scoring query in Solr to implement a date bias.  I have a custom query parser that I'm using, that does nothing but wrap a BoostedQuery around the original query, which works in general.\n\nI'm indexing and storing the day number in an sint field.  To implement my query, I extract the contents using org.apache.solr.search.function.IntFieldSource.  Unfortunately, this throws an exception when it executes:\n\nHTTP ERROR: 500\n\nFor input string: \"\u20ac?\"\n\njava.lang.NumberFormatException: For input string: \"\u20ac?\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:61)\n\tat java.lang.Integer.parseInt(Integer.java:460)\n\tat java.lang.Integer.parseInt(Integer.java:510)\n\tat org.apache.lucene.search.FieldCacheImpl$3.parseInt(FieldCacheImpl.java:148)\n\tat org.apache.lucene.search.FieldCacheImpl$7.createValue(FieldCacheImpl.java:262)\n\tat org.apache.lucene.search.FieldCacheImpl$Cache.get(FieldCacheImpl.java:72)\n\tat org.apache.lucene.search.FieldCacheImpl.getInts(FieldCacheImpl.java:245)\n\tat org.apache.lucene.search.FieldCacheImpl.getInts(FieldCacheImpl.java:239)\n\tat org.apache.solr.search.function.IntFieldSource.getValues(IntFieldSource.java:50)\n\tat org.apache.solr.search.function.FunctionQuery$AllScorer.<init>(FunctionQuery.java:103)\n\tat org.apache.solr.search.function.FunctionQuery$FunctionWeight.scorer(FunctionQuery.java:81)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:132)\n\tat org.apache.lucene.search.Searcher.search(Searcher.java:126)\n\tat org.apache.lucene.search.Searcher.search(Searcher.java:105)\n\tat org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:966)\n\tat org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:838)\n\tat org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:269)\n\tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:160)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:175)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1151)\n\n\nI ran into exactly the same problem when I tried to use the CustomScoreQuery and IntFieldSource classes from Lucene.\n\nI've tracked the problem down to the fact that IntFieldSource expects the contents of the field to actually be an integer as returned by FieldCache.getInts().  However, Solr converts a sortable int using NumberUtils.int2sortablestr().\n\nIf I change my code to create a custom FieldCache.IntParser that applies NumberUtils.SortableStr2int before returning the value, my query works as expected.  For example:\n\nclass MyIntParser implements FieldCache.IntParser {\n  public int parseInt(String val) \n{ return NumberUtils.SortedStr2int(val, 0, val.length()); }\n}\n\nQuery q = new BoostedQuery(qry, new IntFieldSource(\"myfield\", new MyIntParser()));",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12621966",
            "date": "2008-08-12T20:41:40+0000",
            "content": "IntFieldSource is for IntFieldType, SortableIntFieldSorce is probably what you are looking for.\nYou also shouldn't need a custom plugin just to do a BoostedQuery... stock solr should be fine.\nFollowup questions on this should go to solr-user. "
        },
        {
            "author": "Jerry Quinn",
            "id": "comment-12621980",
            "date": "2008-08-12T21:12:23+0000",
            "content": "I found SortableIntFieldSource but it's not publicly accessible.  It's also in org.apache.solr.schema instead of org.apache.solr.search.function like all the other ValueSource objects. "
        }
    ]
}