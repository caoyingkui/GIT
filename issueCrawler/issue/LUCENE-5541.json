{
    "id": "LUCENE-5541",
    "title": "FileExistsCachingDirectory, to work around unreliable File.exists",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "core/store"
        ],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": []
    },
    "description": "File.exists is a dangerous method in Java, because if there is a\nlow-level IOException (permission denied, out of file handles, etc.)\nthe method can return false when it should return true.\n\nFortunately, as of Lucene 4.x, we rely much less on File.exists,\nbecause we track which files the codec components created, and we know\nthose files then exist.\n\nBut, unfortunately, going from 3.0.x to 3.6.x, we increased our\nreliance on File.exists, e.g. when creating CFS we check File.exists\non each sub-file before trying to add it, and I have a customer\ncorruption case where apparently a transient low level IOE caused\nFile.exists to incorrectly return false for one of the sub-files.  It\nresults in corruption like this:\n\n\n  java.io.FileNotFoundException: No sub-file with id .fnm found (fileName=_1u7.cfs files: [.tis, .tii, .frq, .prx, .fdt, .nrm, .fdx])\n      org.apache.lucene.index.CompoundFileReader.openInput(CompoundFileReader.java:157)\n      org.apache.lucene.index.CompoundFileReader.openInput(CompoundFileReader.java:146)\n      org.apache.lucene.index.FieldInfos.<init>(FieldInfos.java:71)\n      org.apache.lucene.index.IndexWriter.getFieldInfos(IndexWriter.java:1212)\n      org.apache.lucene.index.IndexWriter.getCurrentFieldInfos(IndexWriter.java:1228)\n      org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:1161)\n\n\n\nI think typically local file systems don't often hit such low level\nerrors, but if you have an index on a remote filesystem, where network\nhiccups can cause problems, it's more likely.\n\nAs a simple workaround, I created a basic Directory delegator that\nholds a Set of all created but not deleted files, and short-circuits\nfileExists to return true if the file is in that set.\n\nI don't plan to commit this: we aren't doing bug-fix releases on\n3.6.x anymore (it's very old by now), and this problem is already\n\"fixed\" in 4.x (by reducing our reliance on File.exists), but I wanted\nto post the code here in case others hit it.  It looks like it was hit\ne.g. https://netbeans.org/bugzilla/show_bug.cgi?id=189571 and\nhttps://issues.jboss.org/browse/ISPN-2981",
    "attachments": {
        "LUCENE-5541.patch": "https://issues.apache.org/jira/secure/attachment/12635848/LUCENE-5541.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13942165",
            "author": "Michael McCandless",
            "content": "Patch with two classes:\n\n\n\tFileExistsCachingDirectory, to work around File.exists unreliability\n\n\n\n\n\tFixCFS to re-insert a missing CFS sub-file if you hit this corruption\n\n ",
            "date": "2014-03-20T19:20:05+0000"
        },
        {
            "id": "comment-14130172",
            "author": "Sanne Grinovero",
            "content": "Hi Michael McCandless, I think I'm hitting this issue, indeed using still Lucene 3.6.2.\nYour comments are much appreciated, but I'm not understanding how File.exists is related with the exception, when this is being thrown by the CompoundFileReader ?\nIn fact these tests were run having compound files disabled, so I'd love to put a breackpoint in the IndexWriter code where it decided this segment needed to be wrapped in a CompoundFileReader, however it seems I can't easily reproduce the same error.\n\nIn case we're able to reproduce it again I would like to provide a patch, even if I understand there won't be more releases. ",
            "date": "2014-09-11T15:53:52+0000"
        },
        {
            "id": "comment-14133804",
            "author": "Sanne Grinovero",
            "content": "Thanks Michael,\nG Fernandes from the Infinispan team was able to reproduce it and figure out how this relates to File.exists; https://issues.jboss.org/browse/ISPN-2981 is now being resolved, it seems this wasn't a bug in Lucene but a very subtle race condition in the Infinispan Directory for Lucene, so affecting the Directory for Lucene 4 as well.\nFor the record ISPN-2981 would only trigger if all following conditions are met:\n\n\tA Merge is writing concurrently to a thread using an IndexWriter for doing new writes\n\tThe node in the cluster happens to not be the primary owner for a specific entry (so it would be impossible on single node tests, unlikely on small clusters)\n\tHigh load (or rather: low write load would make it unlikely)\n\n ",
            "date": "2014-09-15T11:30:55+0000"
        },
        {
            "id": "comment-14135217",
            "author": "Michael McCandless",
            "content": "Thanks Sanne Grinovero for explaining that scary bug!  So that bug is \"fixed\" because Lucene stopped using File.exists? ",
            "date": "2014-09-16T09:56:46+0000"
        },
        {
            "id": "comment-14138022",
            "author": "G Fernandes",
            "content": "In the Infinispan Directory case, because of a tricky race condition, our File.exists() was not totally reliable as well when under load: so we were seeing exactly the same behaviour and stack trace described in this issue. Fortunately, differently from the FSDirectory impl, we were able to fix the race condition and the problem was solved, since our File.exists actually started to behave correctly. Fun  ",
            "date": "2014-09-17T21:33:19+0000"
        }
    ]
}