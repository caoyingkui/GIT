{
    "id": "SOLR-8396",
    "title": "Add support for PointFields in Solr",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.5",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "In LUCENE-6917, Michael McCandless mentioned that DimensionalValues are better than NumericFields in most respects. We should explore the benefits of using it in Solr and hence, if appropriate, switch over to using them.",
    "attachments": {
        "SOLR-8396.patch": "https://issues.apache.org/jira/secure/attachment/12779772/SOLR-8396.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-29T07:36:15+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "An extremely early patch, conforming to Yonik's law of patches.\n\n\tAdds a DimensionField field type (should be spelled more appropriately), which is currently only useful for a term query (e.g. \"fieldname:100\").\n\tAdded a test to TestTrie (misplaced here)\n\n\n\nWith LUCENE-6950 applied, this test works passes, so I am going to put up this \"Yonik's law of patches\" patch. More work on this later.\n\nEdit: This may be sufficient to do some very basic benchmarks against the trie integer field. ",
            "id": "comment-15073600"
        },
        {
            "date": "2016-03-06T22:20:54+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Here is another iteration of the patch. Still mostly a copy of TrieFields. \n\n\tUpdated to current master.\n\tI separated the tests and added some more.\n\tAdded initial implementation for range query.\n\tAdded stored field to be able to return the values (not sure yet if there is a better way for this)\n\n\n\nStill only for int fields ",
            "id": "comment-15182366"
        },
        {
            "date": "2016-03-25T19:11:12+0000",
            "author": "Shawn Heisey",
            "content": "I've been following along quietly.\n\nAs Yonik has noted elsewhere, the change in Lucene means that the current Solr example configs have deprecated types in them.  If we release 6.0.0 without some form of the patch for this issue, users who install 6.0.0 and don't change their configs will be unable to upgrade to 7.x \u2013 they'll be using Lucene classes that will no longer exist in the upgraded version.\n\nAnd now for the suggestion that might get me lynched:\n\nI believe that if we cannot get this patch into 6.0.0 before the release is made, we need to not release Solr 6.0.0.  Instead we should wait until we can remove deprecated classes from our configs and release with 6.0.1 or 6.1.0 instead. ",
            "id": "comment-15212271"
        },
        {
            "date": "2016-03-25T19:20:08+0000",
            "author": "Yonik Seeley",
            "content": "If we release 6.0.0 without some form of the patch for this issue, users who install 6.0.0 and don't change their configs will be unable to upgrade to 7.x\n\nFor users upgrading from versions < 6.0, there will be issues regardless.  I don't believe there is any code anywhere than upgrades numeric types in an index.  So even if we get PointField in for 6.0, a person upgrading from 5.5 will have the old numeric stuff in their index, which would cease working if/when that old numeric stuff is removed.  The simple answer is: we need to keep the old numeric stuff around longer regardless of when we have support for the newer Point stuff. ",
            "id": "comment-15212276"
        },
        {
            "date": "2016-03-25T19:27:13+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I agree that we need to retain our trie fields, which are based on old numerics, as well as introduce new point values based fields. Maybe both should be kept around for the entire 6x major version, but remove the former in 7x.\n\nAs an aside, is there something we need to keep in mind due to LUCENE-7086 for implementing these new numeric fields? ",
            "id": "comment-15212289"
        },
        {
            "date": "2016-03-25T19:58:40+0000",
            "author": "Yonik Seeley",
            "content": "As an aside, is there something we need to keep in mind due to LUCENE-7086 for implementing these new numeric fields?\n\nI don't think we need merged point fields anywhere... but that issue will cause exceptions to be thrown even if we add a single unused point field to the index unfortunately.  We'll still be able to work around it even if we can't get that issue fixed. ",
            "id": "comment-15212321"
        },
        {
            "date": "2016-03-25T21:25:28+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "we need to keep the old numeric stuff around longer regardless of when we have support for the newer Point stuff.\nI agree. If there is no update path we should keep the trie fields longer ",
            "id": "comment-15212440"
        },
        {
            "date": "2016-03-25T22:50:47+0000",
            "author": "Shawn Heisey",
            "content": "For users upgrading from versions < 6.0, there will be issues regardless.\n\nThere has to be a limit to the upgrade scenarios we are willing to support.\n\nFor users upgrading from 6.x with configs that they originally built for a previous major release, whether their index is fully upgraded or not, problems are to be expected.  If we have to worry about supporting ancient configurations, forward progress becomes difficult.\n\nAnother idea: Maybe the policy for deprecations in critical low-level components like Field classes needs to be different than the general case \u2013 kept around for two major releases rather than one.  I'm not sure the Lucene guys would like that, because for that deprecation policy in Solr to be effective, it would need to extend to any Lucene components that the deprecated Solr Field classes depend on.  For a development library, that's a very oppressive requirement. ",
            "id": "comment-15212537"
        },
        {
            "date": "2016-03-25T23:02:41+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Now that I think about it better, Legacy numeric types will have to be supported for all 6.x life, and can only be removed for 7.0, That's not ideal but also not terrible...\nIf Solr doesn't get it by 6.0 then yes, I guess it'll have to support them until 8.0 ",
            "id": "comment-15212555"
        },
        {
            "date": "2016-03-25T23:06:00+0000",
            "author": "Jack Krupansky",
            "content": "My apologies as I am still only very slowly coming up to speed on this \"New Math For Lucene\" stuff. It feels like there are three distinct issues in play:\n\n1. Desire to use the latest and greatest Lucene numeric field types. Granted, they are currently now called  IntPoint, FloatPoint, DoublePoint, etc., but functionally they are still simply int, float, and double values - no semantic difference, just the class names and then some method name changes for indexing  and query. My feeling is that we should preserve the legacy type names even if Lucene insists on calling them \"points.\" Keep user schema files unchanged.\n2. Desire to work with existing data - and existing schema files. Mix metaphors: cans of worms and nested Russian dolls.\n3. Desire to auto-upgrade existing Solr index data to new \"points\" for better performance, reduced storage, reduced memory, reduced heap.\n\nSome points:\n\n1. Personally, I think it would be worth the effort to see if the Lucene guys can stick to to old names for IntField, et al even if the implementation is different under the hood.\n2. Maybe there will be a need to be able to open an existing numeric field, discover that it is legacy numeric field (trie), and then under the hood use some wrapper to maintain the new API for the old format. IOW, switch Solr to using the new API, even for legacy numeric fields.\n3. Seems like there is some need investigate the possibility or a NumericFieldUpgrader to rewrite a trie field as a point field. Seems like a necessary job for the Lucene guys for existing Lucene indexes, even if Solr wasn't in the picture. ",
            "id": "comment-15212559"
        },
        {
            "date": "2016-03-26T00:18:40+0000",
            "author": "Yonik Seeley",
            "content": "Personally, I think it would be worth the effort to see if the Lucene guys can stick to to old names for IntField\n\nFrom the Solr perspective, this doesn't bubble up to most users... our current numeric fields are called TrieIntField, TrieDoubleField, etc.  Those names shouldn't be changing.  We can pick whatever we want for the new solr FieldType names that will be visible in the schema.  And then \"int\",\"long\",etc will map to those new field types.\n\nIn keeping with our naming convention of having FieldTypes end with Field, this leaves two obvious options:\nIntField, DoubleField, ...   // I think I prefer this one\nIntPointField, DoublePointField,...\n\nOh, and we should cut over to SortedNumericDocValues for multi-valued docvalues at the same time: SOLR-7878\n(NOTE: I'm not saying that whoever tackles these point types needs to also tackle SOLR-7878, but that multi-valued numeric docvalues should be unsupported in the new point types until we do it right to prevent more migration issues) ",
            "id": "comment-15212649"
        },
        {
            "date": "2016-03-26T00:28:25+0000",
            "author": "Shawn Heisey",
            "content": "I have checked into how IntField evolved, because there are similarities there to what's being discussed here.\n\nIn 4.0.0, IntField was still an active type, and none of the Lucene classes it used were deprecated either.  IntField was not deprecated until 4.8 \u2013 but the main types in the collection1 example schema had been changed to the Trie types a LONG time before that.  I looked as far back as the 3.5.0 example and it was already using Trie.\n\nWith this new information, I think what you guys have been trying to say (and I wasn't catching) is that the Numeric types in Lucene are so fundamental that they should NOT be renamed/deprecated until at least 7.0, then they can be removed in 8.0 in accordance with normal deprecation policy. ",
            "id": "comment-15212658"
        },
        {
            "date": "2016-03-26T01:23:05+0000",
            "author": "Yonik Seeley",
            "content": "Let's move further back compat discussions (that don't impact implementation of these new types) to the mailing lists. ",
            "id": "comment-15212695"
        },
        {
            "date": "2016-03-28T15:11:40+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I have some time to take a shot at working on this. If someone (Tom\u00e1s Fern\u00e1ndez L\u00f6bbe?) is working on this or planning to work on this, then I can step back / collaborate.  ",
            "id": "comment-15214300"
        },
        {
            "date": "2016-03-28T17:21:50+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Please go ahead, I won't have time to continue this week. Since there is big interest for this Jira, I'd suggest to upload patches with all iterations for early review/collaboration ",
            "id": "comment-15214499"
        },
        {
            "date": "2016-03-30T19:58:05+0000",
            "author": "Shawn Heisey",
            "content": "I'm curious \u2013 what kind of timeframe would be required to create new numeric classes, update the examples so the primary fieldTypes are no longer using the deprecated code, and run enough tests to be sure it's all solid?  Is it days, or weeks? ",
            "id": "comment-15218717"
        },
        {
            "date": "2016-03-30T20:16:14+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I'm assuming weeks. There are some issues that we need to figure out how to get around, e.g. LUCENE-7096, LUCENE-7086.\nIf the patch in LUCENE-7096 is committed, the patch here will be broken due to Maybe we should revert the single-valued points support as well?. I am thinking on ways to proceed if/once that happens. ",
            "id": "comment-15218757"
        },
        {
            "date": "2016-06-29T21:34:51+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Here is a new patch, updated to master. Added tests for docValues actions (faceting, sorting and stats). Still full of commented out code and only int fields yet ",
            "id": "comment-15355838"
        },
        {
            "date": "2016-07-01T18:40:10+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "New patch:\n\n\tAdded some errors when using point fields for unsupported cases (e.g. when faceting on a point field with no doc values). For now I'm considering those bad requests, but I don't know if we'll be able to consider all invalid cases and error gracefully, cases like FunctionQueries may not be easy (currently for faceting on a function query that has a point field with no DV will be a 500 for example, and the error is an IllegalStateException by Lucene).\n\tGrouping still doesn't work with PointFields.\n\tAdded some more test coverage by making the test schema.xml use point fields. I plan to also add this to other test schemas when applicable. Ideally tests would randomly use \"Legacy\" or \"Point\" when dv=true\n\tSince field boost is not supported, right now I'm throwing an exception if used, but this makes index-time document boosting practically useless, so I think I should change the exception to a log message only and just omit the boost.\n\tStill only for int fields, lots of nocommits and a code refactor required\n\n ",
            "id": "comment-15359444"
        },
        {
            "date": "2016-07-05T17:30:18+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Added support and tests for multi valued int fields. Tests still need a lot of work.  ",
            "id": "comment-15362827"
        },
        {
            "date": "2016-08-01T21:47:53+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Patch updated\n\n\tAdded more tests.\n\tFixed bugs in multi-valued fields support\n\tNo longer throwing an exception in case of boosts on the point field, logging on trace level instead.\n\tGrouping is still not supported\n\n ",
            "id": "comment-15402880"
        },
        {
            "date": "2016-08-02T16:58:09+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Minor improvement. Modified also schema11.xml to use point fields, since it's used by many tests. Tests are passing reliably in general. Exceptions are grouping and ExpandComponent. Since those different use cases and code paths I'm not going to tackle them in this Jira. My plan now is to add other field types ",
            "id": "comment-15404383"
        },
        {
            "date": "2016-08-02T17:41:57+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Updated title to reflect the discussion and the work being done ",
            "id": "comment-15404452"
        },
        {
            "date": "2016-08-18T11:49:58+0000",
            "author": "Adrien Grand",
            "content": "\n+//    nocommit: Remove this wrap\n+//    if (getFieldInfos().hasPointValues()) {\n+//      throw new IllegalArgumentException(\"cannot wrap points\");\n+//    }\n\n\n\nNow that SlowCompositeReaderWrapper is Solr-specific, I think it would be fine to remove this check and move th exception to #getPointValues. That should fix the problem? ",
            "id": "comment-15426307"
        },
        {
            "date": "2016-09-29T15:28:13+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Updated patch. \n\n\tUpdated to master.\n\tAdded DoublePointField.\n\tRefactored TestPointFields to accommodate better different PointField types, should be easier to add the next types.\n\tAdded annotation to suppress point fields in tests (this depends really depends on the schema at this point, not sure if there is a better way)\n\tRemoved the nocommit from SlowCompositeReaderWrapper\nThere are some tests failing, I'll be looking into those next\n\n ",
            "id": "comment-15533087"
        },
        {
            "date": "2016-10-11T15:55:06+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "I just created a branch jira/solr-8396 with the latest patch. With this patch AtomicUpdates are failing, I'm going to look at that now. ",
            "id": "comment-15565824"
        },
        {
            "date": "2016-10-16T00:09:01+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "After talking with Adrien, and later with some more people at the Lucene Revolution, the plan is that PointFields will use SortedNumericDocValues instead of SortedSetDocValues for multi-valued cases. Doing that involves much more work, since we need to change all the consumers. This patch is already getting large, so I think it may be better to tackle that in a followup Jira. \nIn the recent branch commits:\n\n\tI removed the use of SortedSetDocValues from the PointFields and I throw an exception if the user tries to create a PointField with MultiValued DV (I'm now ignoring the tests which required MV fields with DV).\n\tI fixed the issue with returning DV as stored fields that I was hitting.\n\tAdded LongPointField.\n\n\n\nSteve Rowe had some concerns about naming, since Solr already has a PointType and in the schemas I'm using \"pTYPE\", which could be confused with the old \"Plain numeric fields\" (Solr 1.4-ish?). I'm open to suggestions.  ",
            "id": "comment-15578981"
        },
        {
            "date": "2016-10-16T03:41:02+0000",
            "author": "David Smiley",
            "content": "the plan is that PointFields will use SortedNumericDocValues instead of SortedSetDocValues for multi-valued cases. Doing that involves much more work, since we need to change all the consumers. This patch is already getting large, so I think it may be better to tackle that in a followup Jira. \n\nYes; definitely a separate issue... it doesn't seem related to this issue as this issue is about the index structure (value/range -> docs) not the doc value (doc -> value). ",
            "id": "comment-15579235"
        },
        {
            "date": "2016-10-16T04:03:23+0000",
            "author": "Yonik Seeley",
            "content": "The docvalues format is heavily related when looking at the larger picture (i.e. from the user perspective, we're creating a new numeric field type as a whole).\nDifferent JIRAs or not doesn't matter... what does matter is if points are released/exposed in an official release with the old docvalues format. That definitely impacts future support, back compat, interfaces, etc. ",
            "id": "comment-15579266"
        },
        {
            "date": "2016-10-16T04:18:30+0000",
            "author": "David Smiley",
            "content": "Is anything changing with DocValues in this issue?  i.e. if I went from LongTrieField -> LongPointField (or whatever the naming is) as proposed in this issue and I hypothetically had index=false but docValues=true, then is there any real change?  I anticipate none. ",
            "id": "comment-15579286"
        },
        {
            "date": "2016-10-16T12:46:54+0000",
            "author": "Yonik Seeley",
            "content": "Is anything changing with DocValues in this issue?\n\nYes, see Tomas's previous comment:\nthe plan is that PointFields will use SortedNumericDocValues\n\nIt doesn't matter so much if all of this gets done in 2 commits/issues or 10, but we should know where we're going and how we want to get there.\n\nActually, I just saw the comment from Tomas that addresses the most important part: \"I throw an exception if the user tries to create a PointField with MultiValued DV\".  So this nicely handles the concern about mixed DV types with point fields (sometimes SortedSetDocValues, sometimes SortedNumericDocValues). ",
            "id": "comment-15579920"
        },
        {
            "date": "2016-10-16T13:51:02+0000",
            "author": "Yonik Seeley",
            "content": "Steve Rowe had some concerns about naming, since Solr already has a PointType and in the schemas I'm using \"pTYPE\", which could be confused with the old \"Plain numeric fields\" (Solr 1.4-ish?).\n\nThe first time we went through this transition, \"int\" was renamed to \"pint\" in the example schema, and then a new \"int\" was created to use trie (numeric).\nIf we expect the old numerics to go away at some point, we could do the same thing.  In the longer run, keeping simple names like \"int\" for our primary types is nice.\nIf we're taking a more phased approach though, we might want to wait until point fields work with more stuff before rename. ",
            "id": "comment-15580005"
        },
        {
            "date": "2016-10-16T13:51:25+0000",
            "author": "Yonik Seeley",
            "content": "Steve Rowe had some concerns about naming, since Solr already has a PointType and in the schemas I'm using \"pTYPE\", which could be confused with the old \"Plain numeric fields\" (Solr 1.4-ish?).\n\nThe first time we went through this transition, \"int\" was renamed to \"pint\" in the example schema, and then a new \"int\" was created to use trie (numeric).\nIf we expect the old numerics to go away at some point, we could do the same thing.  In the longer run, keeping simple names like \"int\" for our primary types is nice.\nIf we're taking a more phased approach though, we might want to wait until point fields work with more stuff before rename. ",
            "id": "comment-15580006"
        },
        {
            "date": "2016-10-16T18:33:09+0000",
            "author": "David Smiley",
            "content": "Phased approach makes sense... I think the first release exposing this feature should be opt-in.  For this release, we could declare them with 'p'.  Since it's been ages since that was a prefix in our schemas (for plain numeric), I think it's fine.  \"bkd\" is an alternative.\n\nYes I did read the SortedNumericDocValues vs SortedSetDocValues for multi-valued... I meant otherwise/in addition to that.  I think it should be a separate issue... and perhaps we should wait on backporting this issue until both together can be landed on the 6x line to ensure they happen on the same release \u2013 I get your concern there. ",
            "id": "comment-15580351"
        },
        {
            "date": "2016-10-16T18:43:34+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "i.e. if I went from LongTrieField -> LongPointField (or whatever the naming is) as proposed in this issue and I hypothetically had index=false but docValues=true, then is there any real change?\nFor single value the DV implementation is the same. For MultiValue not. As I said, the plan now is to change the implementation to SortedNumeric, but if we decided to keep SortedSet we would probably change the encoding from prefix (in LegacyNumericUtils) to the sortable bytes encoding Points use (in NumericUtils). \nThe first time we went through this transition, \"int\" was renamed to \"pint\" in the example schema, and then a new \"int\" was created to use trie (numeric)....\nYes, with this patch I would add the \"pTYPE\" with PointField to the basic schemas. Once we are comfortable with them we can switch the \"TYPE\" fields to use PointFields too, that would be changing the default for Solr (although there may be more tasks involved there) ",
            "id": "comment-15580364"
        },
        {
            "date": "2016-11-22T18:57:24+0000",
            "author": "Yonik Seeley",
            "content": "I haven't tested it, but SOLR-9786 should cause the query parser to automatically delegate to FieldType.getSetQuery() for queries on more than one point (for example q=my_point_field:(20 5 10 15 23)) ",
            "id": "comment-15687566"
        },
        {
            "date": "2017-01-09T20:11:23+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Uploading a patch updated to current master. I think it\u2019s mostly done, so this is a good time to review if you are interested in the feature. I plan to commit to master soon and let it bake there some time before moving to branch 6_x. There are no big issues with compatibility so I think it should be fine to backport at some point. The last changes are not in the branch, I\u2019m trying to avoid an avalanche of \u201ccommit emails\u201d and possibly updates to Jiras due to the recent merge, so please review the patch. I\u2019m leaving some tasks for followup Jiras that can be fixed/discussed separately:\n\n\n\tLukeRequestHandler doesn\u2019t populate docFreq for PointFields\n\tImplement DatePointField\n\tImplement support for MV DocValues in PointFields\n\tAdd method toInternalByteRef to FieldType and possibly deprecate toInternal()\n\tAdd support for PointFields in FacetModule (JSON Facets)\n\tAdd PointFields as pField in example schemas\n\tAdd support for facet method \u201cfc\u201d with PointFields (only \u201cFCS\u201d is currently supported for field faceting)\n\tAdd support for grouping with PointFIelds\n\tAdd support for pivot faceting with PointFields\n\tAdd support for ExpandComponent with PointFIelds\n\tAdd support for CollapseQParser with PointFields\n\n\n\n\n...SOLR-9786 should cause the query parser to automatically delegate to FieldType.getSetQuery() for queries on more than one point (\nGreat. I had added a getSetQuery method in PointField class, I removed it and I\u2019m now using super\u2019s (implemented in the different Point FieldType classes). Also added validation in TestSolrQueryParser.java\n\nThe first time we went through this transition, \"int\" was renamed to \"pint\" in the example schema, and then a new \"int\" was created to use trie (numeric)\u2026.\n+1. But in any case, since I\u2019m leaving the changes to the example schema.xml out of this patch, this can be further discussed in followup Jira if anyone has concerns with the approach.\n\nNot sure if the \u201csolr.tests.preferPointFields\u201d changes I did are implemented in the correct way, I\u2019ll review that before committing. Feel free to comment on that too. ",
            "id": "comment-15812725"
        },
        {
            "date": "2017-01-18T16:32:07+0000",
            "author": "Adrien Grand",
            "content": "It is a pity we have to add that many calls to isPointField() but I don't have a better idea and I think it is nice how you emit explicit errors eg. when users try to sort on a point field that does not have doc values. Otherwise the change looks good, I focused on the point types and the way you generate eg. range queries using *Point.nextDown/nextUp looked good.\n\nOne suggestion for a simplification: in the below change, it looks like the logic that you apply to point fields would work in the general case and be as efficient?\n\n\n+    if (ft.isPointField()) {\n+      for (String term : terms) {\n+        int count = searcher.numDocs(ft.getFieldQuery(null, sf, term), parsed.docs);\n+        res.add(term, count);\n+      }\n+    } else {\n+      for (String term : terms) {\n+        String internal = ft.toInternal(term);\n+        int count = searcher.numDocs(new TermQuery(new Term(field, internal)), parsed.docs);\n+        res.add(term, count);\n+      }\n     }\n\n ",
            "id": "comment-15828365"
        },
        {
            "date": "2017-01-18T16:33:54+0000",
            "author": "Adrien Grand",
            "content": "Maybe someone more familiar with Solr should have a look too but I think this is a good start, I'm +1 to push this and iterate from here. ",
            "id": "comment-15828367"
        },
        {
            "date": "2017-01-19T00:51:17+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Thanks for the review Adrien. \nIt is a pity we have to add that many calls to isPointField() \nAgree. Some of those will be eventually removed, like the ones that prevent not supported features or where we are calling toInternalByteRef(...). In part that's why I propose we deprecate toInternal(...) in favor of toInternalByteRef(...). \nOne suggestion for a simplification:\nThat's a good idea, but since I don't know what all the FieldType.getFieldQuery(...) implementations are doing I'd prefer to leave that to a different Jira. I've been running tests with the current patch for some time and I've seen no related issues ",
            "id": "comment-15829078"
        },
        {
            "date": "2017-01-19T01:05:45+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Here is my final patch, with some minor changes. \n\n\tModified some more test schemas to use points (a couple were it was obvious when DV were needed and when not).\n\tModified TestRandomFacetDV to also test PointFields\n\tMoved TestPointFields to schema package\n\tCleanup tests\n\tAdded some javadoc and fixed precommit\nI\u2019ll commit this and create Jiras for followup tasks.\n\n ",
            "id": "comment-15829095"
        },
        {
            "date": "2017-01-19T01:12:06+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I\u2019ll commit this and create Jiras for followup tasks.\n+1 to committing this and fix things, if any, later. Exciting! ",
            "id": "comment-15829106"
        },
        {
            "date": "2017-01-19T01:28:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 57934ba4480d71218c7f60d0417dbae9d26188d0 in lucene-solr's branch refs/heads/master from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=57934ba ]\n\nSOLR-8396: Add support for PointFields in Solr ",
            "id": "comment-15829121"
        },
        {
            "date": "2017-01-19T15:19:17+0000",
            "author": "David Smiley",
            "content": "Yay; thanks so much Tom\u00e1s! ",
            "id": "comment-15830089"
        },
        {
            "date": "2017-01-26T01:41:17+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe, are you planning to backport now? AFAICT, this is stable and tests are passing fine. ",
            "id": "comment-15838991"
        },
        {
            "date": "2017-01-26T21:03:14+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "I was thinking in waiting to have some of the followup tasks before backporting (MultiValue field DV support for example), but I'm open to suggestions.  ",
            "id": "comment-15840452"
        },
        {
            "date": "2017-02-07T18:38:44+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 59c41e2a6c685dd9ac943c69d12e9bfe2a7d380e in lucene-solr's branch refs/heads/master from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=59c41e2 ]\n\nSOLR-10011: Add NumberType getNumberType() to FieldType and deprecate LegacyNumericType getNumericType()\n\nModify references to getNumericType() to use the new getNumberType(). NumberType is shared for the different numeric implementations supported in Solr (TrieFields and PointFields).\nCC SOLR-8396 ",
            "id": "comment-15856514"
        },
        {
            "date": "2017-02-10T00:49:26+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "I was thinking in waiting to have some of the followup tasks before backporting (MultiValue field DV support for example), but I'm open to suggestions. \nI uploaded a patch to SOLR-9987. I plan to commit it soon (probably tomorrow) and backport to 6.x ",
            "id": "comment-15860477"
        },
        {
            "date": "2017-02-13T17:49:15+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 7dcf9de41f6435a741910a6367ef9fece11a588b in lucene-solr's branch refs/heads/master from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7dcf9de ]\n\nSOLR-9987: Implement support for multi-valued DocValues in PointFields\nCC SOLR-8396 ",
            "id": "comment-15864074"
        },
        {
            "date": "2017-02-13T18:00:42+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Just committed the changes for  SOLR-9987. \nI\u2019ll now backport the following commits from master\n\n57934ba4480d71218c7f60d0417dbae9d26188d0 SOLR-8396: Add support for PointFields in Solr\n285a1013ad04dd1cd5e5e41ffa93a87fe862c152 SOLR-10011: Refactor PointField & TrieField to now have a common base class, NumericFieldType\n0f7990b2c8590d169add59354cc2678260f94e03 SOLR-10011: Fix exception log message\n59c41e2a6c685dd9ac943c69d12e9bfe2a7d380e SOLR-10011: Add NumberType getNumberType() to FieldType and deprecate LegacyNumericType getNumericType()\n7dcf9de41f6435a741910a6367ef9fece11a588b SOLR-9987: Implement support for multi-valued DocValues in PointFields\n\nI\u2019ll also move the CHANGES entries from from 7 to 6.5 ",
            "id": "comment-15864098"
        },
        {
            "date": "2017-02-13T21:18:23+0000",
            "author": "ASF subversion and git services",
            "content": "Commit b92e318dc929defc5d100d82704898e834510265 in lucene-solr's branch refs/heads/branch_6x from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b92e318 ]\n\nSOLR-8396: Add support for PointFields in Solr ",
            "id": "comment-15864449"
        },
        {
            "date": "2017-02-13T21:18:39+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c27880e332722e992294e05749b63300d3eaab44 in lucene-solr's branch refs/heads/branch_6x from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c27880e ]\n\nSOLR-10011: Add NumberType getNumberType() to FieldType and deprecate LegacyNumericType getNumericType()\n\nModify references to getNumericType() to use the new getNumberType(). NumberType is shared for the different numeric implementations supported in Solr (TrieFields and PointFields).\nCC SOLR-8396 ",
            "id": "comment-15864453"
        },
        {
            "date": "2017-02-13T21:18:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit bc10fa67b641d0cfb9bd1954378019d4fc343ae8 in lucene-solr's branch refs/heads/branch_6x from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bc10fa6 ]\n\nSOLR-9987: Implement support for multi-valued DocValues in PointFields\nCC SOLR-8396 ",
            "id": "comment-15864456"
        },
        {
            "date": "2017-02-13T21:18:50+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 81b4288a2133dce87e0ac92da5f6e37dc28176f6 in lucene-solr's branch refs/heads/branch_6x from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=81b4288 ]\n\nSOLR-8396, SOLR-9987, SOLR-10011: Move CHANGES entries from 7.0 to 6.5 ",
            "id": "comment-15864457"
        },
        {
            "date": "2017-02-13T21:19:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 796da187d28c8426cbc60b13808e775bf95a93d2 in lucene-solr's branch refs/heads/branch_6x from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=796da18 ]\n\nSOLR-8396: Fix compile issues after merge ",
            "id": "comment-15864460"
        },
        {
            "date": "2017-02-14T18:23:42+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Resolving this Jira since the main work is done. Followup work can be done in related Jiras ",
            "id": "comment-15866327"
        }
    ]
}