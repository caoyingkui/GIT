{
    "id": "LUCENE-392",
    "title": "[PATCH] Some Field methods use Classcast check instead of instanceof which is slow",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "1.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I am not sure if this is because Lucene historically needed to work with older\nJVM's but with modern JVM's, instanceof is much quicker. \n\nThe Field.stringValue(), .readerValue(), and .binaryValue() methods all use\nClassCastException checking.\n\nUsing the following test-bed class, you will see that instanceof is miles quicker:\n\npackage com.aconex.index;\n\npublic class ClassCastExceptionTest {\n\n    private static final long ITERATIONS = 100000;\n\n    /**\n\n\t@param args\n     */\n    public static void main(String[] args) \n{\n\n        runClassCastTest(1); // once for warm up\n        runClassCastTest(2);\n        \n        runInstanceOfCheck(1);\n        runInstanceOfCheck(2);\n\n    }\n    private static void runInstanceOfCheck(int run) {\n        long start = System.currentTimeMillis();\n\n\n\n        Object foo = new Foo();\n        for (int i = 0; i < ITERATIONS; i++) {\n            String test;\n            if(foo instanceof String) \n{\n                System.out.println(\"Is a string\"); // should never print\n            }\n        }\n        long end = System.currentTimeMillis();\n        long diff = end - start;\n        System.out.println(\"InstanceOf checking run #\" + run + \": \" + diff + \"ms\");\n\n    }\n\n    private static void runClassCastTest(int run) {\n        long start = System.currentTimeMillis();\n\n        Object foo = new Foo();\n        for (int i = 0; i < ITERATIONS; i++) {\n            String test;\n            try \n{\n                test = (String)foo;\n            }\n catch (ClassCastException c) \n{\n                // ignore\n            }\n        }\n        long end = System.currentTimeMillis();\n        long diff = end - start;\n        System.out.println(\"ClassCast checking run #\" + run + \": \" + diff + \"ms\");\n    }\n\n    private static final class Foo {\n    }\n\n}\n\n\nResults\n=======\n\nRun #1\n\nClassCast checking run #1: 1660ms\nClassCast checking run #2: 1374ms\nInstanceOf checking run #1: 8ms\nInstanceOf checking run #2: 4ms\n\n\nRun #2\nClassCast checking run #1: 1280ms\nClassCast checking run #2: 1344ms\nInstanceOf checking run #1: 7ms\nInstanceOf checking run #2: 2ms\n\n\nRun #3\nClassCast checking run #1: 1347ms\nClassCast checking run #2: 1250ms\nInstanceOf checking run #1: 7ms\nInstanceOf checking run #2: 2ms\n\nThis could explain why Documents with more Fields scales worse, as in, for lots\nof Documents with lots of Fields, the effect is exacerbated.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--lucene.instanceof.patch": "https://issues.apache.org/jira/secure/attachment/12312628/ASF.LICENSE.NOT.GRANTED--lucene.instanceof.patch",
        "ASF.LICENSE.NOT.GRANTED--PerformanceTest.java": "https://issues.apache.org/jira/secure/attachment/12312629/ASF.LICENSE.NOT.GRANTED--PerformanceTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-05-24T16:31:34+0000",
            "content": "Created an attachment (id=15142)\nPatch to change Field class to use instanceof check instead of ClassCast ",
            "author": "Paul Smith",
            "id": "comment-12322406"
        },
        {
            "date": "2005-05-25T03:06:15+0000",
            "content": "It's important to note than it's only slower if the exception is actually \nthrown. Just using the try/catch block doesn't isn't bad for performance. If \nthe exception is never thrown, the additional \"instanceof\" will actually make \nthings (slightly?) slower. \n ",
            "author": "Daniel Naber",
            "id": "comment-12322407"
        },
        {
            "date": "2005-05-25T03:32:55+0000",
            "content": "You might want to double check that assumption on modern VMs.\nThe type check must be done anyway, and VMs optimize away the second type check [cast] (which is \nimmediately followed by the first one [instanceof]) since at this point the type is already known. ",
            "author": "hoschek",
            "id": "comment-12322408"
        },
        {
            "date": "2005-05-25T05:47:42+0000",
            "content": "Daniel, you are correct that the cost of the exception catching is only incurred\nif the exception is actually thrown.  I was a bit stunned to see this crop up in\nperformance analysis.  See Bug 34930 where some performance profiling highlights\nthis area as one of the higher CPU consumers, so it must be getting called. \nnow over a large Document set being indexed, if it is invoked quite a bit, it\nends up causing a reasonable impact on the overall timeline for indexing.\n\nIsn't the proposed patch a better way to do the same thing even if it's NOT\ncalled that often?  ",
            "author": "Paul Smith",
            "id": "comment-12322409"
        },
        {
            "date": "2005-05-25T06:27:58+0000",
            "content": "We just need to make sure to optimize for the common use case, not for some \nspecial case. If the exception was never thrown, try/catch was 30-40% faster \nbecause it doesn't require the additional instanceof (tested with Java 1.4). \n\nI suggest we first find out how often the exception is thrown on average. \n ",
            "author": "Daniel Naber",
            "id": "comment-12322410"
        },
        {
            "date": "2005-05-25T06:44:00+0000",
            "content": "I don't know what you were measuring but that's not the the case in any environment I've seen since \nJDK 1.3, even with the client VM. To see for yourself try this, with and without cast() / cast2(). \n\n\n\tpublic static void main(String[] args) throws Exception {\n\t\tint iters = Integer.parseInt(args[0]); // e.g. 1000\n\t\tint runs = Integer.parseInt(args[1]);  // e.g. 3\n\t\tint sum = 0;\n\t\tObject[] arr = new Object[10000];\n\t\tObject obj = \"xx\";\n\t\tif (Boolean.valueOf(args[2]).booleanValue()) obj = new Integer(0);\n\t\tfor (int i=0; i < arr.length; i++) arr[i] = obj;\n\n\t\tfor (int run=0; run < runs; run++) {\n\t\t\tSystem.out.println(\"\\nrun=\" + run);\n\t\t\tlong start = System.currentTimeMillis();\n\t\t\tfor (int j=0; j < iters; j++) {\n\t\t\t\tfor (int i=0; i < arr.length; i++) \n{\n\t\t\t\t\tsum += cast2(arr[i]).charAt(0);\n//\t\t\t\t\tsum += cast(arr[i]).charAt(0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tlong end = System.currentTimeMillis();\n\t\t\tSystem.out.println(\"secs = \" + ((end-start) / 1000.0f));\n\t\t}\n\t\tSystem.out.println(\"checksum=\" + sum);\n\t}\n\n\tprivate static String cast(Object x) \n{\n\t\tif (x instanceof String) return (String)x;\n\t\treturn \"yy\";\n\t}\n\n\tprivate static String cast2(Object x) {\n\t\ttry \n{return (String)x; }\n catch (ClassCastException e) \n{ return \"yy\"; }\n\t} ",
            "author": "hoschek",
            "id": "comment-12322411"
        },
        {
            "date": "2005-05-25T08:08:47+0000",
            "content": "The area of code that is affected by this is in\nDocumentWriter.invertDocument(Document):\n\n...\n          Reader reader;\t\t\t  // find or make Reader\n          if (field.readerValue() != null)\n            reader = field.readerValue();\n          else if (field.stringValue() != null)\n            reader = new StringReader(field.stringValue());\n          else\n            throw new IllegalArgumentException\n                    (\"field must have either String or Reader value\");\n\n\nIn my test scenario I do not use a reader, all my Fields are created as normal\nString values, so the first if() to determine if the reader comes back null will\nalways result in an ClassCastException.  \n\nThat's 1 ClassCastException for each Indexed & Tokenized field per Document.\n\nI'm not sure of whether String/Reader is more prevelant out there in the wild,\nbut I would have thought String would have been common.  Sure for large\ndocuments like PDF's etc it's more likely a Reader will be used.\n\nAnyway, for the try/catch block, the JVM performs an implicit ClassCast check\nanyway, that's how it determines whether it should throw an exception or not, so\nthere is no way to avoid some form of an instanceof.\n\nModern JVM's are quicker with instanceof.  However this may not (probably not)\ntrue for older (1.2 or earlier?) VM's, although I don't have access to that\nanymore test that theory. ",
            "author": "Paul Smith",
            "id": "comment-12322412"
        },
        {
            "date": "2005-05-26T22:00:26+0000",
            "content": "Paul: I also use mostly String instead of Readers... but testing the patch by \nadding 10000 small documents to a RAMDirectory I couldn't see any difference. \nEven running the same code multiple times gives varying results for me. I \nguess my desktop environment and the Pentium M just aren't appropriate for \nthese kind of tests. \n\nWolfganfg: I used the code pasted in the original report but modified so that \ninstanceof is always true and  a cast is done after that and so that the \nexception is never thrown. See above, my setup is probably not appropriate for \nmeasuring small differences. \n ",
            "author": "Daniel Naber",
            "id": "comment-12322413"
        },
        {
            "date": "2005-05-27T02:09:37+0000",
            "content": "Daniel: If there's a lot other stuff going on that introduces measurement variance and perturbation, it \nmakes sense to isolate the cast issue into a small microbenchmark. I think the code I sent demonstrates \nbeyond doubt that the \"instanceOf + cast\" version is always faster no matter which branch is taken. It \ndoesn't matter which branch is more common, it's always faster. The \"catch ClassCastException\" is an \nidiom that may have worked well in JDK <= 1.2 but it is demonstrably counterproductive on more recent \nVMs.\n ",
            "author": "hoschek",
            "id": "comment-12322414"
        },
        {
            "date": "2005-05-27T05:41:12+0000",
            "content": "Daniel, could you post your test class so I can try your same test on my end?\n\ncheers,\n\nPaul ",
            "author": "Paul Smith",
            "id": "comment-12322415"
        },
        {
            "date": "2005-05-28T04:50:11+0000",
            "content": "Created an attachment (id=15188)\nsimple indexing performance test ",
            "author": "Daniel Naber",
            "id": "comment-12322416"
        },
        {
            "date": "2005-05-30T07:30:56+0000",
            "content": "Thanks for you test case Daniel, I appreciate your time in analysing this\n(pardon the pun... maybe only a little...  ).  \n\nI ran your test and got similar results, as in, with class cast or instanceof,\nthey were about the same, which I thought odd indeed...\n\nThen I spotted something.  You're test case uses Field.Index.NO for the\nnon-stringreader case.  This ends up bypassing the bit of code I mentioned in\nDocumentWriter (see the if() block on line 140 of DocumentWriter, for our test\nthe Field has to be an Indexed, tokenized field) .\n\nTry these lines instead:\n\n    doc.add(new Field(\"body\", \"laber\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"body2\", \"blubb\", Field.Store.YES, Field.Index.TOKENIZED));\n    doc.add(new Field(\"body3\", \"bla\", Field.Store.YES, Field.Index.TOKENIZED));\n\nI got about 10-30% slower results with class cast because using this example of\nTokenised text, the class cast does actually get thrown and caught.  Yes,\nresults are quite broad, but the instanceof test slowest result was always\nbetter than the faster classcast results.\n\nModern VM's exception creation is miles better than it used to be, but older\nVM's were pretty awful.  I wonder what the difference is with, say, JDK 1.3.\n\nAt the end of the day, this is only a minor performance improvement, but it can\nadd up when doing a LOT of documents with a lot of fields, hence I thought this\nwould be a worth while improvement.\n\n ",
            "author": "Paul Smith",
            "id": "comment-12322417"
        },
        {
            "date": "2005-05-30T07:34:41+0000",
            "content": "I thought I would add one more comment.  Perhaps the current implementation\ndoesn't suffer from class cast problem because most people don't actually\ntokenize Strings? Perhaps they always use Readers, which ends up being 'lucky'\nin that it's always checked for first, and therefore never suffers from the\nclass cast exception?\n ",
            "author": "Paul Smith",
            "id": "comment-12322418"
        },
        {
            "date": "2005-05-30T07:40:43+0000",
            "content": "I think the key observation for this issue (backed up by benchmarks and profiling) is that instanceOf \nfollowed by cast is always faster, no matter which branch ends up being taken. It doesn't matter which use \ncases might be more common than others, because it's always faster no matter what. ",
            "author": "hoschek",
            "id": "comment-12322419"
        },
        {
            "date": "2005-06-04T02:10:17+0000",
            "content": "I think that catching the Exception here is bad style: Exceptions should not be\nused for control flow in ordinary circumstances.  It should also be faster, but\nI'm not sure whether this is a significant or a premature optimization. \nRegardless, I vote to accept this patch on the basis of style alone. ",
            "author": "cutting@apache.org",
            "id": "comment-12322420"
        },
        {
            "date": "2005-07-18T13:15:34+0000",
            "content": "As another style comment, the else clause is unnecessary;\n\nif (fieldsData instanceof String) {\n  return (String)fieldsData;\n}\nreturn null;\n\nEclipse highlights the current patches 'else \n{ return null;}\n' with a warning.\n\nI was also wondering why Field.java is not indented... ",
            "author": "Robert Newson",
            "id": "comment-12322421"
        },
        {
            "date": "2005-11-10T12:33:03+0000",
            "content": "instanceof is faster for me (faster than testing getClass()==otherClass too), and it's better style.\nfix applied. ",
            "author": "Yonik Seeley",
            "id": "comment-12357187"
        }
    ]
}