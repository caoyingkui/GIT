{
    "id": "SOLR-7058",
    "title": "Data-driven schema needs to index large text fields as text and not as string",
    "details": {
        "components": [
            "Data-driven Schema"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Duplicate",
        "priority": "Major"
    },
    "description": "While using the SimplePostTool to index some freebase articles into a core that uses our data-driven configs, I ran into the following gem:\n\n\nCaused by: java.lang.IllegalArgumentException: Document contains at least one immense term in field=\"xml_data\" (whose UTF8 encoding is longer than the max length 32766), all of which were skipped.  Please correct the analyzer to not produce such terms.  The prefix of the first immense term is: '[60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 48, 34, 32, 101, 110, 99, 111, 100, 105, 110, 103, 61, 34]...', original message: bytes can be at most 32766 in length; got 173684\n\tat org.apache.lucene.index.DefaultIndexingChain$PerField.invert(DefaultIndexingChain.java:667)\n\tat org.apache.lucene.index.DefaultIndexingChain.processField(DefaultIndexingChain.java:344)\n\tat org.apache.lucene.index.DefaultIndexingChain.processDocument(DefaultIndexingChain.java:300)\n\tat org.apache.lucene.index.DocumentsWriterPerThread.updateDocument(DocumentsWriterPerThread.java:231)\n\tat org.apache.lucene.index.DocumentsWriter.updateDocument(DocumentsWriter.java:449)\n\tat org.apache.lucene.index.IndexWriter.updateDocument(IndexWriter.java:1415)\n\tat org.apache.solr.update.DirectUpdateHandler2.addDoc0(DirectUpdateHandler2.java:242)\n\tat org.apache.solr.update.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:166)\n\n\n\nIdeally, the data-driven configs would index large text fields containing multiple tokens (whitespace delimited) as text and not a string. However, this obviously poses an issue if the first doc has a short text value that looks like a string and then the next doc has a large one. Not sure what the right solution looks like yet, but wanted to capture the issue so we can discuss options.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-28T23:48:52+0000",
            "author": "Steve Rowe",
            "content": "One idea:\n\nWe can make the AddSchemaFieldsUpdateProcessorFactory's default field type text_general instead of string, and then add a new kind of type mapping constraint that can be configured with a max value length.  Then one of these new type mappings can be mapped to the string field type and placed after all the other type mappings.\n\nThat way if no other type mapping matches, and a field value is not longer than the configured max value length, the field will be created with type string; otherwise, the field will be created with type text_general.\n\nMultiple text field values (i.e., those that don't trigger any other type mappings) should fall back to the default field type if they are not all short enough. ",
            "id": "comment-14296079"
        },
        {
            "date": "2015-01-29T23:49:23+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Resolving as duplicate of SOLR-6966.\n\nAgain, I think this is a bad idea, it's hopeless to detect the difference, we need to define a sane default and fix the OOTB ability to also search all text. Once users get past the basics they'll start customizing the schema through API. ",
            "id": "comment-14297922"
        }
    ]
}