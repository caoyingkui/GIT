{
    "id": "SOLR-3080",
    "title": "We should consider removing shard info from Zk when you explicitly unload a SolrCore.",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "",
    "attachments": {
        "SOLR-3080_smaller_sync.patch": "https://issues.apache.org/jira/secure/attachment/12515945/SOLR-3080_smaller_sync.patch",
        "SOLR-3080.patch": "https://issues.apache.org/jira/secure/attachment/12513121/SOLR-3080.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Sami Siren",
            "id": "comment-13199660",
            "date": "2012-02-03T12:22:50+0000",
            "content": "Here's an initial patch to implement this feature. I still need to add some more junit tests.\n\nI noticed that CoreAdminHandler allows \"creating\" multiple cores with same name and if you do that you can end up having one core in multiple places unless you remove it in between. Is this behavior of CoreAdminHandler intentional?\n\nAlso I was not sure if the slice should be deleted when there are no more shards with that id (currently it is not deleted). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13199754",
            "date": "2012-02-03T15:12:01+0000",
            "content": "Also I was not sure if the slice should be deleted when there are no more shards with that id (currently it is not deleted).\n\nYeah, I think that is the right move for now - don't delete it. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13204114",
            "date": "2012-02-08T23:34:22+0000",
            "content": "I noticed that CoreAdminHandler allows \"creating\" multiple cores with same name and if you do that you can end up having one core in multiple places unless you remove it in between. Is this behavior of CoreAdminHandler intentional?\n\nI doubt it... Probably we should throw an error if you try and create a core that already exists? "
        },
        {
            "author": "Sami Siren",
            "id": "comment-13204516",
            "date": "2012-02-09T13:42:35+0000",
            "content": "I doubt it... Probably we should throw an error if you try and create a core that already exists?\n\nI checked the wiki at http://wiki.apache.org/solr/CoreAdmin#CREATE and it documents this special piece of functionality. I am not sure how that should be handled when using solr in cloud mode... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13204547",
            "date": "2012-02-09T14:27:29+0000",
            "content": "I am not sure how that should be handled when using solr in cloud mode...\n\nPerhaps we should just remove it? I mean, it's a core reload right? Why do we need to support that through the create cmd as well? "
        },
        {
            "author": "Sami Siren",
            "id": "comment-13204549",
            "date": "2012-02-09T14:29:34+0000",
            "content": "Perhaps we should just remove it?\n\nSounds good to me. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13204590",
            "date": "2012-02-09T15:39:45+0000",
            "content": "I mean, it's a core reload right? Why do we need to support that through the create cmd as well?\n\n\n\tit looks like you can specify more stuff on create (you could change the data dir, etc).  you could replace that with create-swap-unload but it's 3 calls instead of one\n\tit seems useful to have a \"create or reload\" command where you don't have to worry if the core was already loaded or not... you just want it to read/reread it's config.\n\n\n\nSo I can see how it made sense in the past, but if it causes problems with cloud mode then we should do something about that. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13204594",
            "date": "2012-02-09T15:48:06+0000",
            "content": "but if it causes problems with cloud mode then we should do something about that.\n\nWell there are other ways to deal with it I imagine - leave it alone and just doc not to do that in cloud mode, or if in cloud mode throw an error or whatever. "
        },
        {
            "author": "Sami Siren",
            "id": "comment-13205470",
            "date": "2012-02-10T14:16:34+0000",
            "content": "Here's a new patch. \n\nwhen running in cloud mode I am preventing creation of core if the name is not locally unique. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13207909",
            "date": "2012-02-14T18:54:53+0000",
            "content": "Cool - I'll try and get to this today. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13211623",
            "date": "2012-02-20T01:05:33+0000",
            "content": "All yours Sami. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13215742",
            "date": "2012-02-24T17:09:08+0000",
            "content": "We currently synchronize on coreStates when we publish the info to zookeeper.  This would also block any reads or other changes in the meantime.\n\nHere's the first approach that came to mind to handle not blocking reads/updates while publishing.  Anyone have an easier way? "
        },
        {
            "author": "Sami Siren",
            "id": "comment-13215760",
            "date": "2012-02-24T17:29:53+0000",
            "content": "+1, nice! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13216244",
            "date": "2012-02-25T02:03:52+0000",
            "content": "FYI, sometimes the core name and sometimes the zk node name was used to key coreStates (leading to duplicate entries on a restart).  I've changed it to just key off of core name, along with some other minor improvements like creating the map up front so we have a single object to consistently synchronize on (prob didn't matter now, but may in the future w/ continued development). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13216633",
            "date": "2012-02-26T05:22:23+0000",
            "content": "OK, here's what I think is happening around the ChaosMonkeySafeLeaderTest failures I'm seeing.\n\nThe missing docs actually appear in the \"startingVersions\" (i.e. they are in the transaction log).\nWe peersync and don't request those versions because we already have them.\nBut I don't think we ever called UpdateLog.recoverFromLog() to actually apply them to the index!\n\nIn ZkController.register() recoverFromLog is only called if isLeader==true.  Perhaps this is a holdover from when peersync was not done at startup and hence it didn't make sense to try and recover from your logs when you were just going to replicate the leader index anyway? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13216842",
            "date": "2012-02-26T21:05:05+0000",
            "content": "After removing isLeader==true test for tlog recovery, I ran for 4 hours w/o a fail with deletes turned off.  Turning those on now... "
        },
        {
            "author": "Sami Siren",
            "id": "comment-13218970",
            "date": "2012-02-29T07:56:38+0000",
            "content": "Thanks Yonik, Mark. I am resolving this issue as fixed. Further bug fixing can be done in separate issues. "
        }
    ]
}