{
    "id": "LUCENE-3429",
    "title": "improve build system when tests hang",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Test",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently, if tests hang in hudson it can go hung for days until we manually kill it.\n\nThe problem is that when a hang happens its probably serious, what we want to do (I think), is:\n\n\ttime out the build.\n\tensure we have enough debugging information to hopefully fix any hang.\n\n\n\nSo I think the ideal solution would be:\n\n\tadd a sysprop \"-D\" that LuceneTestCase respects, it could default to no timeout at all (some value like zero).\n\twhen a timeout is set, LuceneTestCase spawns an additional timer thread for the test class? method?\n\tif the timeout is exceeded, LuceneTestCase dumps all thread/stack information, random seed information to hopefully reproduce the hang, and fails the test.\n\tnightly builds would pass some reasonable -D for each test.\n\n\n\nseparately, I think we should have an \"ant-level\" timeout for the whole build, in case it goes completely crazy (e.g. jvm completely hangs or something else), just as an additional safety.",
    "attachments": {
        "LUCENE-3429.patch": "https://issues.apache.org/jira/secure/attachment/12493960/LUCENE-3429.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-11T16:50:06+0000",
            "content": "I'm gonna play with the ant junit task timeout first, just to see if we can do anything with it as a quick hack.\n\nI suspect the problem will be that we won't get enough debugging information via this mechanism (random seed, stacktraces). ",
            "author": "Robert Muir",
            "id": "comment-13102301"
        },
        {
            "date": "2011-09-11T17:28:28+0000",
            "content": "here is a hack patch that sets a timeout of 1 hour to any test batch (e.g. test-core) by default, unless you are running Test2BTerms (10 hours).\n\ni tested this, the issue is you get no debugging information at all... but its at least a small start. ",
            "author": "Robert Muir",
            "id": "comment-13102309"
        },
        {
            "date": "2011-09-11T23:00:28+0000",
            "content": "We could run a standalone tool that does a kill -QUIT if any java process is taking > X minutes? ",
            "author": "Michael McCandless",
            "id": "comment-13102370"
        },
        {
            "date": "2011-09-11T23:26:00+0000",
            "content": "Mike, right but even that solution wouldn't be that great: it wouldn't give us random seed \n\nDawid pointed me to some code of his, I think he is working on a prototype for us to try to integrate:\n\nhttps://github.com/dweiss/timeoutrule/tree/master/src/test/java/com/carrotsearch ",
            "author": "Robert Muir",
            "id": "comment-13102376"
        },
        {
            "date": "2011-09-12T05:15:52+0000",
            "content": "separately, I think we should have an \"ant-level\" timeout for the whole build, in case it goes completely crazy (e.g. jvm completely hangs or something else), just as an additional safety.\n\njenkins's has a build option to  handle this part (no personal experience with it though)\n\nDawid pointed me to some code of his, ...\n\nA per test annotation definitely seems like the killer solution. ",
            "author": "Hoss Man",
            "id": "comment-13102429"
        },
        {
            "date": "2011-09-12T06:31:28+0000",
            "content": "I wrote that snippet yesterday as a proof of concept - it is simple and I think does the job (you can control timeouts of all tests of a class, a single test's timeout time or, in case of Lucene, global timeouts on all tests simply by putting the rule in the superclass of all tests).\n\nIn fact, JUnit4 already has two built-in options for doing timeouts: a @Timeout rule much like mine (but not logging object's internal fields) and @Test(timeout=...). My implementation simple expands on this by adding a \"live\" dump of objects being tested (important in case of live fields) \u2013 sending a signal (or ctrl-break combination on windows) will dump the spinning test's fields to the console.\n\nI can prepare a patch, but it's actually trivial to just take the rule's code from github and paste in LuceneTestCase. Should work out of the box, perpahs with changes related to the fact that I used commons-lang for dumping the target object and we may simply restrict it to dumping the current seed. ",
            "author": "Dawid Weiss",
            "id": "comment-13102458"
        },
        {
            "date": "2011-09-12T19:56:44+0000",
            "content": "Suggested patch introducing method-level timeouts and seed/details reporting. ",
            "author": "Dawid Weiss",
            "id": "comment-13102974"
        },
        {
            "date": "2011-09-12T20:29:54+0000",
            "content": "Updated slightly to avoid calling reportAdditionalFailureInfo before an actual timeout is hit. ",
            "author": "Dawid Weiss",
            "id": "comment-13103012"
        },
        {
            "date": "2011-09-12T20:40:17+0000",
            "content": "Errr... I get a repetitive vm crash after applying the above patch.\n\n    [junit] #\n    [junit] # A fatal error has been detected by the Java Runtime Environment:\n    [junit] #\n    [junit] #  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x000000006dae29a5, pid=4040, tid=5104\n    [junit] #\n    [junit] # JRE version: 6.0_26-b03\n    [junit] # Java VM: Java HotSpot(TM) 64-Bit Server VM (20.1-b02 mixed mode windows-amd64 compressed oops)\n    [junit] # Problematic frame:\n    [junit] # V  [jvm.dll+0x2529a5]\n    [junit] #\n    [junit] # An error report file with more information is saved as:\n    [junit] # d:\\work\\apache.org\\lucene.git\\lucene\\build\\test\\7\\hs_err_pid4040.log\n    [junit] #\n    [junit] # If you would like to submit a bug report, please visit:\n    [junit] #   http://java.sun.com/webapps/bugreport/crash.jsp\n    [junit] #\n    [junit] Testsuite: org.Batch-With-Multiple-Tests\n    [junit] Testcase: org.Batch-With-Multiple-Tests:testFlushExceptions:        Caused an ERROR\n    [junit] Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM exit.\n    [junit] junit.framework.AssertionFailedError: Forked Java VM exited abnormally. Please note the time in the report does not reflect the time until the VM ex\nit.\n    [junit]     at java.lang.Thread.run(Thread.java:662)\n    [junit]\n\n\nIs this something new or known? I'm on win7, 64-bit - can anybody check on other machines? ",
            "author": "Dawid Weiss",
            "id": "comment-13103026"
        },
        {
            "date": "2011-09-13T00:47:12+0000",
            "content": "Does this jre crash occur when you interrupt() a thread? ",
            "author": "Robert Muir",
            "id": "comment-13103221"
        },
        {
            "date": "2011-09-13T07:06:49+0000",
            "content": "I didn't check and this should be a no-issue, even when you call stop() because stop() is supposed to throw a ThreadDeathError at the current execution point. interrupt() doesn't do anything other than setting a thread flag (it does interrupt i/o and monitors, but not busy loops). I don't think it's what we want.\n\nI didn't check on linux/ macos yet, didn't have time. ",
            "author": "Dawid Weiss",
            "id": "comment-13103413"
        },
        {
            "date": "2011-09-13T07:21:12+0000",
            "content": "I only mention it because interrupting threads in our tests caused jre crashes before, LuceneTestCase:784   ",
            "author": "Robert Muir",
            "id": "comment-13103417"
        },
        {
            "date": "2011-09-13T07:41:16+0000",
            "content": "Right.... Interesting. Ok, I'll dig later on. ",
            "author": "Dawid Weiss",
            "id": "comment-13103428"
        },
        {
            "date": "2011-09-13T14:20:15+0000",
            "content": "The tests with this patch hang on my mac and on linux box. On windows they crash the jvm... oh boy, what a joy. ",
            "author": "Dawid Weiss",
            "id": "comment-13103652"
        },
        {
            "date": "2011-09-13T20:07:11+0000",
            "content": "david, I looked at your patch briefly and I think what you are trying to do is unfortunately not possible with java and its thread implementation. And actually I think it should not be possible too. Calling Thread.stop() is deprecated for a very good reason since it can put your Thread into an undefined state. I think what we should do instead is get all threads stack traces (Thread#getAllStackTraces())  and then interrupt the threads we obtained. if a thread doesn't react to interrupt() it won't react to stop() either afaik. ",
            "author": "Simon Willnauer",
            "id": "comment-13103947"
        },
        {
            "date": "2011-09-13T20:21:52+0000",
            "content": "Not really. Thread.stop is deprecated and I know the reasons it is deprecated, but this doesn't mean it doesn't work. interrupt() is not a solution if you have busy code loops that never do any I/O or waiting/sleeping \u2013 try interrupting while(true); and you'll see what I mean.\n\nThe code I posted is correct. Thread.stop() is not even called because no methods do timeout at the moment. The problem with hangs and jre crashes is something else, but I didn't have the time to peek at it yet. ",
            "author": "Dawid Weiss",
            "id": "comment-13103958"
        },
        {
            "date": "2011-09-13T21:03:12+0000",
            "content": "Ehm. So... I figured out at least the reason for the fact the tests hang on mac/linux if the patch is applied. The reason is this in TestConcurrentMergeScheduler):\n\n    @Override\n    public void eval(MockDirectoryWrapper dir)  throws IOException {\n      if (doFail && (Thread.currentThread().getName().equals(\"main\") \n          || Thread.currentThread().getName().equals(\"Main Thread\"))) {\n\n\n\nbecause we're spawning threads named differently this test never finishes (because this condition never occurs). Is this supposed to check if the code runs a test case? If so then I suggest a different way of checking this: create a field on LuceneTestCase with \n\nvolatile Thread current;\n\n\nthis would be set by the runner (or a rule, whatever) and then test cases could verify they are running inside a test case by comparing Thread.currentThread() == current.\n\nSounds good? ",
            "author": "Dawid Weiss",
            "id": "comment-13103982"
        },
        {
            "date": "2011-09-13T21:18:13+0000",
            "content": "interrupt() is not a solution if you have busy code loops that never do any I/O or waiting/sleeping\n\nIndeed - the correct statement is that stop would not stop a thread that is waiting if interrupt would also not stop it. But stop is certainly a step beyond interrupt in ending a threads life. ",
            "author": "Mark Miller",
            "id": "comment-13103997"
        },
        {
            "date": "2011-09-14T09:36:01+0000",
            "content": "the correct statement is that stop would not stop a thread that is waiting if interrupt would also not stop it\n\nEhm, too many negations for me, but I think you meant the other way around? Anyway, there's really little to it: stop() and interrupt() both act similar: they attempt to break the thread's execution by throwing an exception inside the thread's current call stack. The difference is that interrupt() sets a flag on the thread which is checked by wait/sleep method and I/O and then thrown as a checked exception and stop() tries to throw an unchecked exception as early as possible and theoretically can happen at any given statement.\n\nIn a piece of software that cleans up resources using finally() and doesn't capture-and-ignore of Throwable/Error exceptions this shouldn't really matter that much and be safe.\n\nSimon was worried about calling stop() and possibly leaving junk on disk or doing weird stuff. True, this can happen, but in the end it's what will happen anyway if a thread is busy-looped infinitely or locked: either we will try to kill it or the jvm will at the end of its execution.\n\nI will modify the code to use a more graceful cascade of: interrupt() - wait a bit - then try to kill the thread because I still think it has advantages over just leaving the problematic thread running in the background. These disadvantages are:\n\n\n\tthe vm will never exit from tests if the threads are non-daemon threads,\n\tbackground threads may interfere with other threads and provide noise that will not be reproducible.\n\n\n\nThese are my motivating factors for using stop() as a last resort option for threads that did go into an endless loop (or exceeded a largeish timeout time). Simon, I know you have a gut feeling that calling stop() is wrong, but you need to convince me with arguments other than just your gut feeling \n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13104384"
        },
        {
            "date": "2011-09-14T09:39:40+0000",
            "content": "Mike, Robert, Mark \u2013 can you confirm my understanding of this snippet:\n\nif (doFail && (Thread.currentThread().getName().equals(\"main\") \n          || Thread.currentThread().getName().equals(\"Main Thread\"))) {\n\n\nwhat was it for (thread name checking)? Can this method be called from threads other than the main junit thread (and in such case shouldn't go into the if block?). ",
            "author": "Dawid Weiss",
            "id": "comment-13104385"
        },
        {
            "date": "2011-09-14T13:46:37+0000",
            "content": "but I think you meant the other way around?\n\nI liked the tough negation wording!  But I'm sticking to the order (as long as I'm peeling the negations off right). I can put it in the original terms though: if a waiting thread doesn't react to interrupt() it won't react to stop() either. But without the waiting, the statement is wrong. ",
            "author": "Mark Miller",
            "id": "comment-13104500"
        },
        {
            "date": "2011-09-14T15:21:33+0000",
            "content": "\nwhat was it for (thread name checking)?\n\nYes, its \"main\" on Sun/IBM/... and \"Main Thread\" on Jrockit ",
            "author": "Robert Muir",
            "id": "comment-13104565"
        },
        {
            "date": "2011-09-14T17:37:21+0000",
            "content": "if a waiting thread doesn't react to interrupt() it won't react to stop() either. But without the waiting, the statement is wrong\n\nYes, this is probably true. If it's waiting (on a monitor or i/o) and doesn't react to interrupt, then it's in a deep hole somewhere where nothing's going to help it \n\nYes, its \"main\" on Sun/IBM/... and \"Main Thread\" on Jrockit\n\nOk, so can I change it the way I suggested (i.e. have a \"test\" thread variable on the test superclass and compare to it instead)? You didn't explain the reason this code needs this comparison at all. ",
            "author": "Dawid Weiss",
            "id": "comment-13104703"
        },
        {
            "date": "2011-10-05T19:58:25+0000",
            "content": "Related discussion about test infrastructure in general. ",
            "author": "Dawid Weiss",
            "id": "comment-13121408"
        },
        {
            "date": "2012-03-06T07:54:45+0000",
            "content": "This would be solved  by LUCENE-3808 if it ever makes it in. ",
            "author": "Dawid Weiss",
            "id": "comment-13223069"
        }
    ]
}