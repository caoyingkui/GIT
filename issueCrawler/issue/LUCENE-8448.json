{
    "id": "LUCENE-8448",
    "title": "Slowdown of nested boolean queries after LUCENE-8060",
    "details": {
        "components": [],
        "status": "Resolved",
        "resolution": "Fixed",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "Task"
    },
    "description": "Mike's nightly benchmarks revealed that disabling hit counts slowed down nested boolean queries http://people.apache.org/~mikemccand/lucenebench/AndHighOrMedMed.html http://people.apache.org/~mikemccand/lucenebench/AndMedOrHighHigh.html.\n\nWe are probably not propagating max scores and/or blocks efficiently.",
    "attachments": {
        "LUCENE-8448.patch": "https://issues.apache.org/jira/secure/attachment/12935532/LUCENE-8448.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16579721",
            "author": "Jim Ferenczi",
            "content": "We've tried several things with Adrien to optimize the nested boolean case. Currently boolean queries don't propagate the minimum score to their sub scorers. However in the first version of max score, the\u00a0MaxScoreSumPropagator used to compute a minimum score per sub clause based on the sum of maximum scores of the other clauses. This optimization was removed at some point because it had a bad effect on simple boolean queries that contains terms clause only. A lot of things changed in the meantime (max scores are computed per blocks, ...) so we've tried to revive this optimization and applied it to all boolean scorers to run some benchmarks. We used wikimediumall and added the problematic queries from the nightly benchmark, the results are below:\n\nTaskQPS lucene_baseline StdDevQPS lucene_candidate StdDev Pct diff\nOrHighMed 28.08 (7.7%) 27.37 (8.8%) -2.5% ( -17% - 15%)\nAndHighHigh 21.15 (9.5%) 20.99 (10.2%) -0.8% ( -18% - 20%)\nAndHighMed 58.19 (8.8%) 57.80 (9.2%) -0.7% ( -17% - 18%)\nOrHighHigh 11.92 (7.7%) 11.90 (9.2%) -0.1% ( -15% - 18%)\nOrHighLow 259.35 (7.2%) 261.80 (8.7%) 0.9% ( -13% - 18%)\nOrNotHighLow 582.99 (7.8%) 588.83 (9.8%) 1.0% ( -15% - 20%)\nFuzzy2 56.86 (6.8%) 57.67 (8.2%) 1.4% ( -12% - 17%)\nAndHighLow 340.56 (7.4%) 345.60 (9.7%) 1.5% ( -14% - 20%)\nFuzzy1 53.38 (6.9%) 54.22 (8.6%) 1.6% ( -13% - 18%)\nWildcard 17.41 (8.3%) 17.73 (9.4%) 1.8% ( -14% - 21%)\nPrefix3 22.16 (8.4%) 22.57 (9.7%) 1.9% ( -14% - 21%)\nOrNotHighMed 803.13 (8.2%) 818.85 (9.8%) 2.0% ( -14% - 21%)\nHighTerm 1333.98 (8.1%) 1361.12 (10.1%) 2.0% ( -14% - 22%)\nOrNotHighHigh 790.52 (7.7%) 806.66 (9.8%) 2.0% ( -14% - 21%)\nOrHighNotLow 960.80 (8.8%) 981.56 (10.1%) 2.2% ( -15% - 22%)\nRespell 42.76 (7.7%) 43.71 (9.6%) 2.2% ( -13% - 21%)\nMedTerm 1568.86 (8.1%) 1603.71 (10.1%) 2.2% ( -14% - 22%)\nOrHighNotMed 999.26 (8.5%) 1022.44 (9.8%) 2.3% ( -14% - 22%)\nOrHighNotHigh 791.65 (8.5%) 811.37 (10.4%) 2.5% ( -15% - 23%)\nLowTerm 1611.84 (8.5%) 1660.90 (10.1%) 3.0% ( -14% - 23%)\nAndMedOrHighHigh 5.53 (6.6%) 8.94 (12.8%) 61.6% ( 39% - 86%)\nAndHighOrMedMed 8.45 (7.3%) 29.90 (33.6%) 253.8% ( 198% - 318%)\nAndHighOrMedLow 13.68 (7.4%) 58.86 (37.4%) 330.2% ( 265% - 405%)\nAndMedOrHighLow 2.01 (6.1%) 24.43 (92.6%) 1118.1% ( 960% - 1295%)\n\n\nThe AndMedOrHighHigh and AndHighOrMedMed have a nice speedup, I also created AndHighOrMedLow and AndMedOrHighLow to show other types of speed up for nested boolean queries. \nWe also tested other improvements but they didn't work as well as this one and would deserve specific issues (that I'll open in a follow up). ",
            "date": "2018-08-14T12:18:14+0000"
        },
        {
            "id": "comment-16579774",
            "author": "Adrien Grand",
            "content": "Looks great. Let's add a unit test with fake scorers to make sure that the propagation of these min competitive scores works as expected? ",
            "date": "2018-08-14T13:09:23+0000"
        },
        {
            "id": "comment-16580060",
            "author": "Jim Ferenczi",
            "content": "Here is a new patch that restores the unit tests. The previous patch also hits some random failures in CheckHits#doCheckMaxScores because we skip documents with a score equals to the minimum score. To protect against this issue I changed the propagation to use the first float before minScore instead of minScore directly. The new patch passes all random tests and showed similar performances. ",
            "date": "2018-08-14T16:53:06+0000"
        },
        {
            "id": "comment-16580100",
            "author": "Adrien Grand",
            "content": "+1 Maybe we need to special case minCompetitiveScore == 0 to avoid negative values of minCompetitiveScoreDown? ",
            "date": "2018-08-14T17:16:26+0000"
        },
        {
            "id": "comment-16580117",
            "author": "Jim Ferenczi",
            "content": "Right, 0 is a valid minimum score. I'll add a case. ",
            "date": "2018-08-14T17:29:02+0000"
        },
        {
            "id": "comment-16580190",
            "author": "ASF subversion and git services",
            "content": "Commit 7ecf9b63b9bf25a1662468beb671cd71bd991280 in lucene-solr's branch refs/heads/master from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7ecf9b6 ]\n\nLUCENE-8448: Boolean queries now propagates the mininum score to their sub-scorers. ",
            "date": "2018-08-14T18:09:42+0000"
        },
        {
            "id": "comment-16580193",
            "author": "Jim Ferenczi",
            "content": "Thanks Adrien Grand ",
            "date": "2018-08-14T18:10:12+0000"
        },
        {
            "id": "comment-16586005",
            "author": "Adrien Grand",
            "content": "We now have in impressive speedup on AndHighOrMedMed http://people.apache.org/~mikemccand/lucenebench/AndHighOrMedMed.html and recovered part of the slowdown on AndMedOrHighHigh http://people.apache.org/~mikemccand/lucenebench/AndMedOrHighHigh.html. ",
            "date": "2018-08-20T14:26:36+0000"
        },
        {
            "id": "comment-16593405",
            "author": "Dawid Weiss",
            "content": "Thank you for working on this, guys. I was on holidays and away from the world, so couldn't provide feedback. Anyway, I still don't get the speedup on that (synthetic) \"benchmark\" of mine; perhaps it's because I'm using min should match :\n\n            BooleanQuery.Builder qb = new BooleanQuery.Builder();\n            for (int k = 0; k < clausesPerQuery; k++) {\n              BooleanQuery.Builder cb = new BooleanQuery.Builder();\n              String term = randomFrom(rnd, terms);\n              for (String fld : fields) {\n                cb.add(new TermQuery(new Term(fld, term)), Occur.SHOULD);\n              }\n              qb.add(cb.build(), Occur.SHOULD);\n            }\n            qb.setMinimumNumberShouldMatch(1);\n\n\n\nLike I told Adrien, this isn't critical and definitely not typical (for humans), but the performance dropped twice for me on this type of queries compared to what it was previously. ",
            "date": "2018-08-27T09:44:19+0000"
        }
    ]
}