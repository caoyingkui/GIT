{
    "id": "LUCENE-520",
    "title": "Ability to abort hit collection",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "1.9",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "If the HitCollector.collect method returned a boolean value rather than void, this value could be used to determine whether any further hits should be reported. This would speed up things a bit when all you need is a confirmation that a query produces some hits (e.g. for generating suggestions).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2006-03-17T00:54:45+0000",
            "content": "You could try throwing an exception from the collect method and catching it from your search method. ",
            "author": "Paul Elschot",
            "id": "comment-12370711"
        },
        {
            "date": "2006-03-17T00:56:58+0000",
            "content": "Throwing exceptions can be quite expensive, though it may indeed be faster than waiting for all hits. ",
            "author": "Eric Jain",
            "id": "comment-12370712"
        },
        {
            "date": "2006-03-17T01:04:01+0000",
            "content": "If you can keep a reference to the scorer you can use \n\n            scorer.skipTo(Integer.MAX_VALUE);\n\nto just skip past all the rest of the records. And if you are writing your own hit collector, keeping a reference to the appropriate scorer should be fairly trivial. ",
            "author": "Jeremy Meyer",
            "id": "comment-12370713"
        },
        {
            "date": "2006-03-17T01:13:06+0000",
            "content": "If you have a reference to the scorer, you don't need a HitCollector at all... you can pull the hits instead of having them pushed to you. ",
            "author": "Yonik Seeley",
            "id": "comment-12370717"
        },
        {
            "date": "2006-03-17T01:18:49+0000",
            "content": "Jeremy: Have you tested that scorer.skipTo(Integer.MAX_VALUE) actually works?  It might, but it also might not, depending on how much state is cached on the stack.\n\nFor what it's worth, a few months ago I tried to change HitCollector to return a boolean that would stop things, but I couldn't figure out a simple way to make it work. I think my plan was (for back-compatibility) to add a new HitCollector method, isCollected(), that returned a boolean, then change all of the scorer implementations to call isCollected(), and make the default implementation of isCollected() call collect(), for back-compatibility.   I don't remember the details, but it was much harder than I thought it would be to make this work.  So I ended up throwing an Exception, which is not ideal. ",
            "author": "Doug Cutting",
            "id": "comment-12370719"
        },
        {
            "date": "2006-03-17T01:33:24+0000",
            "content": "Yonik: yes, pulling is a great idea!\n\nCurrently one can only create a Scorer given an IndexReader.  If you're using IndexSearcher, finding the IndexReader is not a problem, and if you're using a non-distributed MultiSearcher then you can instead use a MultiReader.  Things are only problemmatic if you try to use a RemoteSearchable.  But both pulling and hit collectors are antithetical to distributed search, so this should not be a problem in practice. ",
            "author": "Doug Cutting",
            "id": "comment-12370722"
        },
        {
            "date": "2006-03-17T01:33:43+0000",
            "content": "I use it in my code and it seems to work fine for me. We used to do the throwing an exception thing but the particularly bad thing in this case is that HitCollector.collect doesn't declare that it throws any exceptions so you have to throw a runtime exception and then catch that runtime exception in the outer code. This is fine other than it is generally considered bad practice to catch runtime exceptions. \n\nAs far as Yonik's comment goes, that maybe true but often times it is still nice to adhere to the common pattern of using a hit collector. It is fairly easy to imagine a case where you have a custom hit collector that is working fine for you. Then one day you get a new requirement that under certain conditions you should terminate the search. For me, the easiest way is to add just a little bit of code to the hit collector I already have and be done with it. For instance, our interface makes it possible to do a search that will essentially hit almost all of the records. This takes 10-20 seconds and slows any other searches that may be going on down. We simply added code to the hit collector to say once we have collected some large number of hits just cut off the rest of the search. The hits we return may not be the real top hits, but if they are getting that many results it probably isn't very relevant anyway. Like I said, for this case, we simply added a bit of code to what we already had and the search was cut short. ",
            "author": "Jeremy Meyer",
            "id": "comment-12370724"
        },
        {
            "date": "2006-03-17T01:47:56+0000",
            "content": "Quick note regarding exceptions: an easy way to remove most of runtime exception overhead is to just construct a shared exception object in advance, and keep throwing that. Stack information will obviously be irrelevant (and refer to the place where it was constructed), but since creating stack frame objects is the expensive part, reusing that exception results in very fast operation. Obviously it's not a very clean way to do it, so should only be done by application code, and developers need to understand that it's a token exception only used for signalling.\nFor this reason, one should in general create a new exception class, too, to be to catch just those instances (but no other runtime exceptions). ",
            "author": "Tatu Saloranta",
            "id": "comment-12370726"
        },
        {
            "date": "2006-05-16T03:00:28+0000",
            "content": "The suggested shared exception appears to be a good way to abort hit collection. ",
            "author": "Paul Elschot",
            "id": "comment-12402401"
        }
    ]
}