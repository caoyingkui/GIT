{
    "id": "SOLR-9166",
    "title": "Export handler returns zero for numeric fields that are not in the original doc",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "From the dev list discussion:\n\nMy original post.\nZero is different from not\nexisting. And let's claim that I want to process a stream and, say,\nfacet on in integer field over the result set. There's no way on the\nclient side to distinguish between a document that has a zero in the\nfield and one that didn't have the field in the first place so I'll\nover-count the zero bucket.\n\nFrom Dennis Gove:\nIs this true for non-numeric fields as well? I agree that this seems like a very bad thing.\n\nI can't imagine that a fix would cause a problem with Streaming Expressions, ParallelSQL, or other given that the /select handler is not returning 0 for these missing fields (the /select handler is the default handler for the Streaming API so if nulls were a problem I imagine we'd have already seen it). \n\nThat said, within Streaming Expressions there is a select(...) function which supports a replace(...) operation which allows you to replace one value (or null) with some other value. If a 0 were necessary one could use a select(...) to replace null with 0 using an expression like this \n   select(<stream>, replace(fieldA, null, withValue=0)). \nThe end result of that would be that the field fieldA would never have a null value and for all tuples where a null value existed it would be replaced with 0.\n\nDetails on the select function can be found at https://cwiki.apache.org/confluence/pages/viewpage.action?pageId=61330338#StreamingExpressions-select.\n\n\nAnd to answer Denis' question, null gets returned for string DocValues fields.",
    "attachments": {
        "SOLR-9166-6x.patch": "https://issues.apache.org/jira/secure/attachment/12838501/SOLR-9166-6x.patch",
        "SOLR-9166.patch": "https://issues.apache.org/jira/secure/attachment/12806661/SOLR-9166.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-27T15:33:57+0000",
            "author": "Erick Erickson",
            "content": "From Joel on the dev list.\n\nYes, the /export handler returns zero for numeric fields that aren't present. String fields should be empty though if not present.\n\nWe'll want to keep the zero while sorting in the /export handler. But removing the zero when outputing the field should by OK. We'll just need to add test cases that cover the numeric nulls. The RollupStream would be one place that might have a problem with this.\n\nAlso, there may be other client applications that rely on the current behavior. So possibly adding a switch on the export handler for numeric nulls is the safest approach.\n ",
            "id": "comment-15304196"
        },
        {
            "date": "2016-05-27T15:57:02+0000",
            "author": "Erick Erickson",
            "content": "Right, I'm looking at the code in SortingResponseWriter so I think that would handle the issue of sorting etc., just not writing it to the return doc at the very last second. I have no clue what the implications are for the code that processes analytics on the worker nodes for instance, we'll just have to harden that I suppose.\n\nAs far as a switch is concerned, I'm torn. I think current behavior is surprising and would like to see people who need current behavior have to do something special rather than someone expecting what I think is correct behavior do something special. I guess we can argue \"correct\", but you get the idea.... \n\nTo be consistent it should work the same way for both strings and numerics.\n\nSo even though it would be a change in behavior for current users, I'd propose two properties. The default behavior if neither is specified would be to not return anything in the tuple for absent strings or absent numerics.\n\nreturnZeroForMissingNumerics=true would do what happens now, zero gets returned for missing numeric fields Otherwise do not return the field in the tuple (default false) .\n\nreturnEmptyForMissingStrings=true would return the field with \"\" rather than not returning the field in the tuple (default false)\n\nBTW, I assigned this to myself to not lose track of it, if anyone wants to jump in feel free.... ",
            "id": "comment-15304236"
        },
        {
            "date": "2016-05-27T16:32:28+0000",
            "author": "Erick Erickson",
            "content": "Trivial test illustrating the behavior, no fix. We'll have to beef up the tests a lot more than this though. ",
            "id": "comment-15304285"
        },
        {
            "date": "2016-10-26T19:48:36+0000",
            "author": "Yonik Seeley",
            "content": "We'll want to keep the zero while sorting in the /export handler.\n\nI'd rather think that missing should sort before or after existing values (same as /select).  Sorting missing in the middle of real values (assuming the presence of negative values) is odd.\n\nI think current behavior is surprising and would like to see people who need current behavior have to do something special rather than someone expecting what I think is correct behavior do something special.\n\n+1\n\nIf one wants 0 in place of \"missing\", perhaps existing syntax could be used to specify the default:\nfl=def(my_numeric_field,0)\n ",
            "id": "comment-15609484"
        },
        {
            "date": "2016-10-31T03:52:13+0000",
            "author": "Erick Erickson",
            "content": "Rohit I had some time today so started this patch.\n\nWhat I have so far. I got it this far and ran into a few things I thought I'd run by folks. Lots of nocommits and the like currently, as well as new failing tests. But it's progress....\n\nYonik Seeley Joel Bernstein Dennis Gove I'd be particularly interested in your takes.\n\n1> My base assumption is that sorting during export should return docs in the same order as using the /select handler. Currently this doesn't happen, the new test I wrote fails all over the place. Not quite sure why, but I just got all this to semi-work so I'm checkpointing.\n\n2> I want to fold the two parameters into a single on/off returnDefaultsForMissing which defaults to \"false\". This would mean there's really no way to get the old behavior where numerics return zero and strings return null. Is that OK? I think it's easier to explain something like \"defaults for numerics are zero, default for string is \"\", default for boolean is \"false\" and default for date is in 1970\". But see <4>.\n\n3> Does it make any sense to support sortMissingFirst/Last? My initial take is \"no\" since what matters is consistent sorting. That said I started down that road before wondering whether it was desirable so this patch has sortMissingFirstLast in the test, it'll be removed unless there are objections.\n\n4> Yonik Seeley: Your comment about using functions is interesting. I'll take a look at that now that I have a clue what the problem is. It's certainly more elegant than some new flag I think and allows the user to put anything at all in rather than us deciding what a \"proper\" default is. Do you have any advice on how to access the defined default for the fields in SortingResponseWriter since that's where I need to trap this? (being lazy here).\n\n5> I @Ignored all the rest of the tests except the new one to be able to beast the new stuff, they'll be un-ignored before committing.\n\n6> Despite my comment on the dev list, after looking into this I don't think we want to force it into 6.3, I think there'll be some ramifications we'll need to bake out.\n\nNo doubt more later when we get some advice on how to continue. ",
            "id": "comment-15621135"
        },
        {
            "date": "2016-11-04T17:23:38+0000",
            "author": "Erick Erickson",
            "content": "Yonik Seeley Thinking a bit more about specifying the defaults with the def() function. Much as I hate to say it, I think we should do both. Have hard-coded default values (this JIRA) with the option to override as you suggest on a per-query basis. It seems onerous to require every query to specify the default values when the \"standard\" defaults may well do.\n\nSo I suggest we complete this JIRA without implementing the def() options and I'll raise a separate JIRA for that as an enhancement. Making no promises to actually implement it mind you  ",
            "id": "comment-15637071"
        },
        {
            "date": "2016-11-04T18:10:17+0000",
            "author": "Yonik Seeley",
            "content": "Do we even need returnDefaultsForMissing at all (i.e. what is depending on zeroes for being filled in for missing values?) ",
            "id": "comment-15637209"
        },
        {
            "date": "2016-11-04T18:18:54+0000",
            "author": "Joel Bernstein",
            "content": "That is the current behavior which people have already coded to. And there may be Streaming classes that break if the fields are null, like the RollupStream. \n ",
            "id": "comment-15637234"
        },
        {
            "date": "2016-11-04T21:03:20+0000",
            "author": "Erick Erickson",
            "content": "The only reason I assumed we needed returnDefaultsForMissing was if/when the current behavior was required. I confess I was thinking of it from the installed user-base perspective rather than an internal one.\n\nYonik's question made me re-think that though. Let's say we don't return defaults and fix up any Solr code to deal with this properly (don't know if it's possible, just sayin'). In that case would this back-compat break be acceptable? My initial reaction is \"no\", should support this work-around and perhaps deprecate the behavior and remove it eventually. ",
            "id": "comment-15637673"
        },
        {
            "date": "2016-11-04T21:42:00+0000",
            "author": "Yonik Seeley",
            "content": "Can't streaming already use /select in some cases?  If so, everything already needs to deal with missing values.  Everything like RollupStream that can't deal with missing values needs to be fixed anyway?\nBut perhaps you meant existing external users of /xport (i.e. not streaming)?  I wonder what percent of users with missing values actually depend on that behavior vs unknowingly have broken stats...\n\nAnyway, if we want to add returnDefaultsForMissing to /xport for those users, I think that's OK.  I don't think we should use it ourselves however. ",
            "id": "comment-15637782"
        },
        {
            "date": "2016-11-04T23:40:31+0000",
            "author": "Erick Erickson",
            "content": "Right, I was thinking of current /xport users. Or we could just call it a bug in the existing implementation and not support returnDefaultsForMissing. Yeah, that's the ticket.....\n\nbq:  I wonder what percent of users with missing values actually depend on that behavior vs unknowingly have broken stats\n\nThat's my question too.\n\nWell, maybe we'll gather a bit of data and just pull the returnDefaultsForMisisng out of the patch, run all the unit tests and see what falls out. May have to beef up some of the tests to have some docs with missing values and see what happens. ",
            "id": "comment-15638063"
        },
        {
            "date": "2016-11-10T04:25:13+0000",
            "author": "Erick Erickson",
            "content": "Latest patch implement as we've discussed. The code changes are absolutely minimal but are made in ExportWriter since SortingResonseWriter has been retired and tests have been added.\n\nThere are no default values returned for fields not in the docs, I'm arguing that this is incorrect behavior and any code that depends on it needs to be re-written. We can discuss that of course....\n\nThe test case I added ran afoul of LUCENE-7548. When that's committed the test case should be updated. See the comments in StreamingTest.checkSort.\n\nThe /export handler seems to sort missing fields first/last as it should, it's just that using the /select handler to get the proper ordering seemed like a good idea rather than hard-coding the results as in the current patch. This test case should continue to run fine even after LUCENE-7548 is committed, it'll just be inelegant.\n\nStill to do: Run the entire test suite to see what, if anything, breaks. Will do that tonight. ",
            "id": "comment-15652990"
        },
        {
            "date": "2016-11-10T15:03:37+0000",
            "author": "Erick Erickson",
            "content": "Perhaps the final patch, pending the resolution of LUCENE-7548. Actually, it can be committed regardless. The LUCENE Jira shouldn't cause this test to fail.\n\nThere was one tiny test failure where StreamExpressionTest was explicitly expecting zero to return for an empty field, but I think that was just verifying current behavior. I fixed that and all tests pass.\n\nDennis Gove Joel Bernstein any comments? If there are no objections I'll commit this in a few days. ",
            "id": "comment-15654268"
        },
        {
            "date": "2016-11-10T20:10:00+0000",
            "author": "Erick Erickson",
            "content": "Well, certainly not the final patch for 6x. Siiiggggh.\n\nMichael McCandlessAdrien GrandRobert Muir (and others). Just to check what I think I'm seeing...\n\nIn trunk, ExportWriter has a bunch of clauses like:\n`   NumericDocValues vals = DocValues.getNumeric(reader, this.field);\n    if (vals.advance(docId) == docId) \n{\n       val = vals.longValue();\n     }\n else \n{\n       val = 0;\n     }\n    ew.put(field, val); \n'\nbut 6x just looks like:\n`     NumericDocValues vals = DocValues.getNumeric(reader, this.field);\n     long val = vals.get(docId);\n      ew.put(field, val);\n`\n\nand vals.get(docId) returns zero when a docValues field isn't in the document. \n\nSo my question is: \"Would you agree that returning nothing rather than zero for docValues fields that have no entry for a particular doc would require a lot of work in 6x?\"\n\nI know there was a whole long discussion about this on the LUCENE Jira list some time ago but the resolution kind of escapes me and the patch is huge.\n\nThanks. ",
            "id": "comment-15655010"
        },
        {
            "date": "2016-11-10T20:26:37+0000",
            "author": "Michael McCandless",
            "content": "Erick Erickson in 6.x you could use docsWithField to know (after seeing a 0 from vals.get) that there was no value for this document. ",
            "id": "comment-15655051"
        },
        {
            "date": "2016-11-10T21:43:08+0000",
            "author": "Erick Erickson",
            "content": "Thanks a million, that fixes me right up!\n\nI looked briefly at the underlying code and from what I saw on a quick scan this shouldn't be an expensive call even in those situations where there are a large number of docs without values. I'll see if I can uncrank one of my perf tests.\n\nThanks again! ",
            "id": "comment-15655241"
        },
        {
            "date": "2016-11-10T23:19:20+0000",
            "author": "Erick Erickson",
            "content": "I did some quick timing tests and there's no performance penalty, and actually a gain. I have two shards and this is all local on my laptop. 4 runs returning 10M rows.\n\nBringing back:\n\ntwo fields with values: 36 seconds for 10M rows\ntwi fields returning defaults: roughly the same as the above.\ntwo fields without values: 32 seconds\n\nThe fields without values don't return anything for the field, it's just left out of the doc. I suspect the difference is converting it to a string and/or transmitting down to the client and/or parsing more JSON. (even though it's all on my laptop). ",
            "id": "comment-15655511"
        },
        {
            "date": "2016-11-11T04:32:55+0000",
            "author": "Noble Paul",
            "content": "Erick, i hope i didn't screw up things badly while refactoring the response writer.  Please let me know if i can contribute.  ",
            "id": "comment-15656101"
        },
        {
            "date": "2016-11-11T04:51:03+0000",
            "author": "Erick Erickson",
            "content": "I think this is very close to ready, so putting this patch up as a checkpoint. Many thanks to Mike for his help, and Noble for volunteering to help out.\n\nIt's late and I'm getting tired enough that I don't trust myself to look at code any more. So checkpointing this, I'll look at it again over the weekend if I have time.\n\nAssuming I don't see any problems, I'll commit this sometime next week, so speak up if you object.\n\nJoel Bernstein  Dennis Gove Kevin Risden Speak up now or forever hold your peace!\n\nBTW, what's \"the git way\" when you can't merge a push to trunk? Just push to each branch? ",
            "id": "comment-15656134"
        },
        {
            "date": "2016-11-11T04:54:12+0000",
            "author": "Noble Paul",
            "content": "I commit it first to trunk and cherry-pick the changes to 6x ",
            "id": "comment-15656138"
        },
        {
            "date": "2016-11-13T02:36:52+0000",
            "author": "Erick Erickson",
            "content": "That's what I usually do too, but in this case the code might be incompatible. I guess my real question is whether there's any harm in the two-patch idea.\n\nI had a chance to review this code on my flight and unless there are objectsions, I'm going to commit this to both branches probably tomorrow or Monday. ",
            "id": "comment-15660702"
        },
        {
            "date": "2016-11-14T15:21:26+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 4a31b29cb031a10d25de01e25d1d9e5b1a4a7787 in lucene-solr's branch refs/heads/master from Erick Erickson\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4a31b29 ]\n\nSOLR-9166: Export handler returns zero for numeric fields that are not in the original doc ",
            "id": "comment-15664175"
        },
        {
            "date": "2016-11-14T15:24:28+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 375dd323a729035e2c957ecb49a6b88135e3edfd in lucene-solr's branch refs/heads/branch_6x from Erick Erickson\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=375dd32 ]\n\nSOLR-9166: Export handler returns zero for numeric fields that are not in the original doc ",
            "id": "comment-15664186"
        },
        {
            "date": "2016-11-14T16:56:55+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "This has broken precommit. Please fix. ",
            "id": "comment-15664404"
        },
        {
            "date": "2016-11-14T20:59:22+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c0b7edb5c858ce5f3e6308b9c32747c5e3729acc in lucene-solr's branch refs/heads/master from Erick Erickson\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c0b7edb ]\n\nSOLR-9166: Export handler returns zero for numeric fields that are not in the original doc. Fixed precommit ",
            "id": "comment-15664998"
        },
        {
            "date": "2016-11-14T22:58:26+0000",
            "author": "Erick Erickson",
            "content": "Sorry for the pre-commit foo. ",
            "id": "comment-15665305"
        },
        {
            "date": "2016-11-15T01:00:55+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ca80ba6b80be619ebeea1f6b8f0864832ebbfec8 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ca80ba6 ]\n\nSOLR-9166: fix precommit ",
            "id": "comment-15665603"
        }
    ]
}