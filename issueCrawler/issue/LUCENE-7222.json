{
    "id": "LUCENE-7222",
    "title": "Improve Polygon.contains()",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "The current PIP algorithm could use some improvements. I think we should swap in the algorithm here: https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\n\nIt is a bit faster for complex polygons:\n\nn=50   \n19.3 QPS -> 20.4 QPS\nn=500   \n9.8 QPS -> 11.2 QPS\nn=1000 \n6.3 QPS -> 7.4 QPS\n\n\n\nIt also has some nice properties:\n\n if you partition a region of the plane into polygons, i.e., form a planar graph, then PNPOLY will locate each point into exactly one polygon. In other words, PNPOLY considers each polygon to be topologically a semi-open set. This makes things simpler, i.e., causes fewer special cases, if you use PNPOLY as part of a larger system. Examples of this include locating a point in a planar graph, and intersecting two planar graphs. \n\nYou can see the current issues here by writing tests that pick numbers that won't suffer from rounding errors, to see how the edges behave. For a rectangle as an example, the current code will treat all edges and corners as \"contains=true\", except for the top edge. This means that if you tried to e.g. form a grid of rectangles (like described above), some points would exist in more than one square.\n\nOn the other hand if you port this same test to java.awt.Polygon, you will see that only the bottom left corner, bottom side, and left side are treated as \"contains=true\". So then your grid would work without any corner cases. This algorithm behaves the same way.\n\nFinally, it supports multiple components and holes directly. this is nice for the future because for a complex multipolygon, we can just have one tight loop.",
    "attachments": {
        "LUCENE-7222.patch": "https://issues.apache.org/jira/secure/attachment/12798906/LUCENE-7222.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15242506",
            "author": "Robert Muir",
            "date": "2016-04-15T06:15:32+0000",
            "content": "patch. source code changes are very small. But there are some new tests.\n\nThe test also asserts exact answers as the \"straightforward port\" of the C code, which is unfortunately slow in java. But it also means we can improve it and it will fail if something is wrong.\n\nit needed a few modifications and cleanups to be fast in java. And the horrible c-programmer-style overcomplex loop was eradicated not just for performance reasons. "
        },
        {
            "id": "comment-15242657",
            "author": "Michael McCandless",
            "date": "2016-04-15T08:50:30+0000",
            "content": "+1, nice! "
        },
        {
            "id": "comment-15243231",
            "author": "ASF subversion and git services",
            "date": "2016-04-15T17:06:22+0000",
            "content": "Commit a60265ef5a3b68f455cc8fe6b09cb697149fbfec in lucene-solr's branch refs/heads/master from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a60265e ]\n\nLUCENE-7222: Improve Polygon.contains() "
        },
        {
            "id": "comment-15243264",
            "author": "ASF subversion and git services",
            "date": "2016-04-15T17:29:41+0000",
            "content": "Commit 57591bc379ef0e1d482845989fabc029edf31596 in lucene-solr's branch refs/heads/branch_6x from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=57591bc ]\n\nLUCENE-7222: Improve Polygon.contains() "
        },
        {
            "id": "comment-15243295",
            "author": "David Smiley",
            "date": "2016-04-15T17:46:38+0000",
            "content": "+1 awesome. I'm glad you included the literature links.\n\nCoincidentally, today I've been pondering point-in-poly too, and in particular using a Voronoi conversion of the polygon to convert the problem to a nearest-neighbor point problem, assuming an index of the points to quickly look up which is closest. "
        },
        {
            "id": "comment-15243325",
            "author": "Robert Muir",
            "date": "2016-04-15T17:56:26+0000",
            "content": "There is fancy stuff we can do, but it is critical for me that we can be well-defined (including and especially edge cases) and have good tests. Hopefully this linear time algorithm is removed from src/java soon but stays in src/test: that is the main idea here. "
        },
        {
            "id": "comment-15277273",
            "author": "Hoss Man",
            "date": "2016-05-09T23:08:25+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        }
    ]
}