{
    "id": "SOLR-80",
    "title": "negative filter queries",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.2"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "There is a need for negative filter queries to avoid long filter generation times and large caching requirements.\n\nCurrently, if someone wants to filter out a small number of documents, they must specify the complete set of documents to express those negative conditions against.  \n\nq=foo&fq=id:[* TO *] -id:101\n\nIn this example, to filter out a single document, the complete set of documents (minus one) is generated, and a large bitset is cached.  You could also add the restriction to the main query, but that doesn't work with the dismax handler which doesn't have a facility for this.",
    "attachments": {
        "negative_filters.patch": "https://issues.apache.org/jira/secure/attachment/12349327/negative_filters.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12457565",
            "date": "2006-12-12T02:47:55+0000",
            "content": "One potential issue to watch out for...\nDocSet(\": -id:foo\")  is not the same as not(DocSet(id:foo))\nThat's normally fine, depending on how the set is used. "
        },
        {
            "author": "Paul Elschot",
            "id": "comment-12457898",
            "date": "2006-12-12T21:56:11+0000",
            "content": "With Lucene filters as Matchers:\nhttp://issues.apache.org/jira/browse/LUCENE-584\nand  the possibility to add a Matcher to a Lucene BooleanQuery\nas excluded for a negative filter (or as required for a positive filter),\nthis could be implemented efficiently in Lucene's BooleanQuery. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12457904",
            "date": "2006-12-12T22:07:55+0000",
            "content": "\nWith ConstantScoreQuery and QueryFilter it's basically possible to do any negating clauses as either a boolean clause or as a filter ... the big trade off decission really comes down to how big is the negated set, and is it worth caching independently of the main query.\n\nif you're trying to exclude only a handful of items by ID, then BooleanClauses make a lot of sense based on the way the BooleanQuery Scorers work ... but if you are trying to exclude 9/10ths of the documents in your index using a complicated query expression, it starts being more worth while to generate that set once and cache it for reuse as a Filter \u2013 but there are still trade off questions to be asked about wether or not caching the set -A is as efficient as caching the set A (from a memory standpoint)\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12465857",
            "date": "2007-01-18T20:15:09+0000",
            "content": "From an interface point of view, I'm heavily leaning toward getting rid of the restriction of lucene queries having to be all negative.  This would allow using a negative-only query anywhere one currently can use a positive query.\n\nOne could simply and naturally do fq=-id:10 to filter out a single document. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12466307",
            "date": "2007-01-21T07:33:23+0000",
            "content": "attached draft (it doesn't work yet, and there isn't any test code). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12466365",
            "date": "2007-01-21T22:05:25+0000",
            "content": "New working version attached with tests.\nNegative queries (like -id:10) should now work everywhere for filters and queries. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12466395",
            "date": "2007-01-22T06:20:10+0000",
            "content": "Took a close look at the patch and I think it all looks good!\n\nThe query==absQuery test for query negativity reads just mysteriously enough that it might be worth putting in a small comment when it is used (or at least once in SOlrIndexSearch.java). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12466576",
            "date": "2007-01-22T21:42:21+0000",
            "content": "committed.\nThanks for the review Mike! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12466607",
            "date": "2007-01-23T01:20:35+0000",
            "content": "i think there may be a caching bugwith this... if you load up the example schema, populate it, and then stop/start the port so all of the caches are empty, and hit this URL...\n\nhttp://localhost:8983/solr/select/?q=cat%3Aelectronics&version=2.2&start=0&fl=score,name&fq=samsung\n\nyou see that the lookup/insert/size for both the queryResultsCache and filterCaches are 1 (as expected)\n\nif you then hit this URL...\n\nhttp://localhost:8983/solr/select/?q=cat%3Aelectronics&version=2.2&start=0&fl=score,name&fq=-samsung\n\nthe queryResultCache changes predictably to a size of 2 (because the filters are part of the cache key) but the size of the filterCache has also grown to 2 ... which doesn't make sense since the patch is suppose to be caching the inverse of negative queries (fq=samsung and fq=-samsung should be a cahce hit right?)\n\nif you stop/start the port and only hit this URL...\n\nhttp://localhost:8983/solr/select/?q=cat%3Aelectronics&version=2.2&start=0&fl=score,name&fq=-samsung\n\n...you'll see that the filterCache gets 2 lookups, and 2 insertions.\n\n\nI wouldn't think this is wrong, except that the patch explicitly says \"// cache negative queries as positive\"\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12466611",
            "date": "2007-01-23T01:39:28+0000",
            "content": "You are seeing a MatchAllDocsQuery filter.\n\nIf getDocSet(List<Query>) is called with a single negative query, or\n or getDocSet(Query, Filter) is called with a null filter and a negative query, we call getDocSet(MatchAllDocsQuery)\nto use as a base to andNot the passed query.\n\nIf you continue your example with fq=+memory and fq=-memory, you will see what you expect (only one new filter). "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12466612",
            "date": "2007-01-23T01:39:33+0000",
            "content": "I think this is due to the last line of this fragment of the patch:\n\n   protected DocSet getDocSet(List<Query> queries) throws IOException {\n+    if (queries==null) return null;\n+    if (queries.size()==1) return getDocSet(queries.get(0));\n     DocSet answer=null;\n\n\tif (queries==null) return null;\n\tfor (Query q : queries) {\n\tif (answer==null) {\n\tanswer = getDocSet(q);\n+\n+    boolean[] neg = new boolean[queries.size()];\n+    DocSet[] sets = new DocSet[queries.size()];\n+\n+    int smallestIndex = -1;\n+    int smallestCount = Integer.MAX_VALUE;\n+    for (int i=0; i<sets.length; i++) {\n+      Query q = queries.get;\n+      Query posQuery = QueryUtils.getAbs(q);\n+      sets[i] = getPositiveDocSet(posQuery);\n\n\n\ngetPositiveDocSet() caches all docsets returned, so both the query part and the filter part would be cached in the filterCache. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12466616",
            "date": "2007-01-23T01:51:42+0000",
            "content": "I was strating to think the same thing as Mike: but doing more testing i seee what yonik's refering to (note to self: test more then one query when doing cache testing) ... only the first use of a negative query results in the double insert .. afterthat every thing is golden.\n\nMike: i think the key is that unless faceting is turned on, the StandardRequestHandler only calls getDocList, not getDocListAndSet ... so by the time the call makes it to getDocListC the falgs never contain GET_DOCSET, so the main query isn't included in the list passed to getDocSet. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12466617",
            "date": "2007-01-23T01:51:55+0000",
            "content": "Surely Hoss' example doesn't use matchAllDocs--he has a positive query in both cases. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12466621",
            "date": "2007-01-23T01:56:56+0000",
            "content": "Hoss: thanks for the explanation.  \n\nI might throw this in our production code this week and see how it fares. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12589314",
            "date": "2008-04-15T23:44:45+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tMarked (\"Resolved\" or \"Closed\") and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\tWas listed in the CHANGES.txt for 1.2\n\n\n\nThe Fix Version for all 39 issues found was set to 1.2, email notification\nwas suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this\n(hopefully) unique string: 20080415hossman2 "
        }
    ]
}