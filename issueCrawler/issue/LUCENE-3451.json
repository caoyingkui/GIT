{
    "id": "LUCENE-3451",
    "title": "Remove special handling of pure negative Filters in BooleanFilter, disallow pure negative queries in BooleanQuery",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "We should at least in Lucene 4.0 remove the hack in BooleanFilter that allows pure negative Filter clauses. This is not supported by BooleanQuery and confuses users (I think that's the problem in LUCENE-3450).\n\nThe hack is buggy, as it does not respect deleted documents and returns them in its DocIdSet.\n\nAlso we should think about disallowing pure-negative Queries at all and throw UOE.",
    "attachments": {
        "LUCENE-3451.patch": "https://issues.apache.org/jira/secure/attachment/12496271/LUCENE-3451.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-23T13:44:12+0000",
            "content": "Simple patch for trunk:\n\n\tDisables the default full-1 bitset if no required/optional clauses\n\tMoves the Prohibited clauses at the end. The order is now: SHOULD, MUST, MUST_NOT; I am not sure if this is correct and conforms to BooleanScorer2 (I don't understand BooleanScorer2). Does somebody know in which order clauses are applied in BooleanScorer2?\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13113434"
        },
        {
            "date": "2011-09-23T15:50:12+0000",
            "content": "Can we throw an exc if a BQ or BF has only MUST_NOT clauses, since we cannot handle it?\n\nI think silently doing the wrong thing is awful (eg led to Karl struggling to understand what was wrong). ",
            "author": "Michael McCandless",
            "id": "comment-13113514"
        },
        {
            "date": "2011-09-23T16:11:52+0000",
            "content": "Can we throw an exc if a BQ or BF has only MUST_NOT clauses, since we cannot handle it?\n\n+1.  Hit this problem myself many times when first using Solr and Lucene. ",
            "author": "Chris Male",
            "id": "comment-13113528"
        },
        {
            "date": "2011-09-23T17:30:10+0000",
            "content": "Patch that also disallows only negative clauses in BooleanQuery and BooleanFilter.\n\n\n\tFor BF this check is done in getDocIdSet that throws UOE\n\tFor BQ this check is done in ctor of BooleanWeight where the clauses are enumerated and counted, so the check is just an additional low-cost check.\n\n\n\nCurrently 2 core tests with DisjunctionMaxQuery fail (have to look into it, maybe they simply test the broken behaviour). Solr tests pass without problems (as Solr already has a special handling in QueryUtils). ",
            "author": "Uwe Schindler",
            "id": "comment-13113584"
        },
        {
            "date": "2011-09-23T17:37:24+0000",
            "content": "Patch looks great!\n\nI think we should also backport to 3.x?  And advertise the breakage.  If users hit this exception it means their current searches aren't working so it's a service for us to inform them of this. ",
            "author": "Michael McCandless",
            "id": "comment-13113595"
        },
        {
            "date": "2011-09-23T22:16:54+0000",
            "content": "Attached a patch with some changes in the BooleanQuery prohibited-only detection and all failing tests fixed:\n\n\tTestBoolean2 had a explicit prohibited-only query -> changed to assert the UOE\n\tTestBoolean2 had a random BQ generator. Fixed this generator to not create prohibited-only queries\n\tin TestComplexExplanations* the prohibited-only fake clauses were removed\n\tMemoryIndexTest used a list of lots of query-strings, some of them looking like that : \"a -b\". If the test had randomly choosen a MockTokenizer with english stopwords -> peng. Removed that Analyzer\n\n\n\nThe last example is one problem of the explicit UOE: Now a user can suddenly get UOE if he uses a query where e.g. all positive clauses are stopwords - ok, users were always confused about that. Any comments about that? ",
            "author": "Uwe Schindler",
            "id": "comment-13113807"
        },
        {
            "date": "2011-09-23T22:20:33+0000",
            "content": "There is a debugging relict in last patch: BooleanQuery.this.toString() in BooleanWeights UOE, please remove that. ",
            "author": "Uwe Schindler",
            "id": "comment-13113808"
        },
        {
            "date": "2011-09-24T12:39:51+0000",
            "content": "Patch looks great Uwe!\n\nNice catch on the analyzers removing stop words and then making an all MUST_NOT BQ.  But, I think we should throw an exception in this case, since it's a horrible trap now?  User will get 0 results but that's flat out silently wrong? ",
            "author": "Michael McCandless",
            "id": "comment-13113960"
        },
        {
            "date": "2011-09-25T13:07:41+0000",
            "content": "Updated patch after committing BF cleanup (LUCENE-3458). ",
            "author": "Uwe Schindler",
            "id": "comment-13114237"
        },
        {
            "date": "2011-09-25T22:55:12+0000",
            "content": "Just wondering if there is a reason not to \"fix\" the user's query by adding a \n\n*:*\n\n (maybe implicitly), rather than throwing an Exception?  This is invariably the fix users are instructed to apply in this case, and it does seem to be the logical implication of a pure not-query.\n\nHmm - I just found the discussion over in LUCENE-3460, which addresses this point. ",
            "author": "Mike Sokolov",
            "id": "comment-13114385"
        },
        {
            "date": "2011-09-25T23:18:10+0000",
            "content": "Mike,\nSee Sub-Task LUCENE-3460 for an explanation. ",
            "author": "Uwe Schindler",
            "id": "comment-13114389"
        },
        {
            "date": "2011-11-11T23:51:51+0000",
            "content": "How should we proceed with this? I would like to commit this, but I am afraid of the consequences for users without a solution in QueryParser. ",
            "author": "Uwe Schindler",
            "id": "comment-13148858"
        },
        {
            "date": "2011-11-11T23:53:17+0000",
            "content": "Updated patch for trunk. ",
            "author": "Uwe Schindler",
            "id": "comment-13148860"
        },
        {
            "date": "2011-11-12T03:42:35+0000",
            "content": "The current handling of boolean queries with only prohibited clauses is not a bug, but working as designed, so this issue is about changing that behavior.  Currently working applications will now start unexpectedly throwing exceptions... now that's trappy.\n\nI think we should also backport to 3.x? And advertise the breakage. If users hit this exception it means their current searches aren't working\n\nWe shouldn't make assumptions like that - those applications may be working exactly as designed.\nThe issue with stopwords is complex - there is no right way IMO (returning all documents vs no documents), and some users will continue to be surprised by the results regardless of which you do.\n\nChanging BQ to prohibit negative queries means that it will immediately mean that our QueryParser (and maybe other code) has a very serious bug.  This issue can't be committed without addressing other parts of Lucene and Solr that can generate negative queries first.\n\nI'm currently leaning toward the current behavior of BQ. ",
            "author": "Yonik Seeley",
            "id": "comment-13148973"
        },
        {
            "date": "2011-11-12T11:53:15+0000",
            "content": "This is qhy I opened the sub-issue to change queryparser.\n\nAt least we should make BoolenFilter in contrib/queries to behave like BQ and not assume all bits set initially when only negative clauses occur. We might only want to add a MatchAllDocumentsFilter to allow the behaviour from before. ",
            "author": "Uwe Schindler",
            "id": "comment-13149052"
        },
        {
            "date": "2013-07-23T18:44:20+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716916"
        },
        {
            "date": "2014-04-16T12:54:47+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970878"
        },
        {
            "date": "2014-07-03T21:33:27+0000",
            "content": "Yonik Seeley says:\n\nThe current handling of boolean queries with only prohibited clauses is not a bug, but working as designed, so this issue is about changing that behavior. Currently working applications will now start unexpectedly throwing exceptions... now that's trappy.\n\nThe fact that a pure negative query, actually a sub-query within parentheses in the query parser, returns zero documents has been a MAJOR problem for Solr users. I've lost count how many times it has come up on the user list and we tell users to work around the problem by manually inserting \"*:*\" after the left parenthesis.\n\nBut I am interested in hearing why it is believed that it is \"working as designed\" and whether there are really applications that would intentionally write a list of negative clauses when the \"design\" is that they will simply be ignored and match no documents. If that kind of compatibility is really needed, I would say it can be accommodated with a config setting, rather than give unexpected and bad behavior for so many other people with the current behavior.\n\nI would prefer to see a \"fix\" the problem by having BQ do the right thing by implicitly starting with a MatchAllDocsQuery if only MUST_NOT clauses are present, but... if that is not possible, an exception would be much better.\n\nAlternatively, given the difficulty of doing almost anything with the various query parsers, the method that generates the BQ for the query parser (QueryParserBase .getBooleanQuery) should just check for pure negative clauses and then add the MADQ. If this is massively controversial, just add a config option to disable it. ",
            "author": "Jack Krupansky",
            "id": "comment-14051934"
        },
        {
            "date": "2014-07-03T21:55:10+0000",
            "content": "But I am interested in hearing why it is believed that it is \"working as designed\"\n\n\"Working as designed\" means just that... not that it's optimal, but that it is working the way the original author intended.  FWIW, I was really only against throwing an exception.  I personally think it would be fine to insert *:* for the user where appropriate.\n\nand whether there are really applications that would intentionally write a list of negative clauses\n\nMachine generated queries (including those from our own query parsers).\nFor example, (a -x) reduces to (-x) if \"a\" is a stopword.  Inserting *:* when a boolean query contains only negative clauses was vetoed in LUCENE-3460. ",
            "author": "Yonik Seeley",
            "id": "comment-14051953"
        },
        {
            "date": "2014-07-03T22:20:46+0000",
            "content": "Thanks, Yonik Seeley. Although the \"(a -x)\" stop word case seems to argue even more strenuously for at least an exception if ]*:* can't be inserted.\n\nBesides, the stop word case is better handled by the Lucid approach of keeping all stop words (if they are indexed) if the sub-query terms are all stop words as in this case. So it would be only be problematic for the case of non-indexed stop words, which is really an anti-pattern anyway these days. ",
            "author": "Jack Krupansky",
            "id": "comment-14051978"
        },
        {
            "date": "2014-07-03T22:25:58+0000",
            "content": "Yonik Seeley says:\n\nI personally think it would be fine to insert : for the user where appropriate.\n\nAh! Since the \"divorce\" that gave Solr \"custody\" of its own copy of QueryParserBase, this change could be made there, right? I can file a Solr Jira for that (or just use one of the two open Solr issues related to pure-negative sub-queries), unless you want to do it. And then if the Solr people are happy over there, the Lucene guys can have their exception here and close this issue, and the everybody can live happily ever after, right? ",
            "author": "Jack Krupansky",
            "id": "comment-14051980"
        },
        {
            "date": "2018-11-09T23:06:33+0000",
            "content": "BooleanFilter is gone. ",
            "author": "Uwe Schindler",
            "id": "comment-16682052"
        }
    ]
}