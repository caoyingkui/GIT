{
    "id": "SOLR-2660",
    "title": "omitPositions improvements",
    "details": {
        "affect_versions": "3.3,                                            4.0-ALPHA",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "followup to LUCENE-2048:\n\nAdds factory methods getPhraseQuery/getMultiPhraseQuery to QP, this way you can subclass it and customize behavior, particularly\n\n\tby default, Solr throws exception here if the fieldtype omits positions: rather than 3.x's silent failure of no results, and even for trunk its nicer to fail during query parsing rather than waiting for lucene's failure during execution.\n\tadds phraseAsBoolean, which allows you to downgrade these phrase/multiphrase queries to boolean queries: this is a nice option in conjunction with our word n-gram filters (shingle/commongrams/etc)for a fast \"approximation\", if your application can tolerate some false positives, e.g. \"foo bar\" -> termQuery(foo_bar), \"foo bar baz\" -> BQ(foo_bar AND bar_baz)",
    "attachments": {
        "SOLR-2660.patch": "https://issues.apache.org/jira/secure/attachment/12486783/SOLR-2660.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13222461",
            "date": "2012-03-05T17:24:57+0000",
            "content": "I think this could be a good option (in combination with shingles as mentioned), to accelerate \nthe phrase queries that solr query parsers generate in order to boost closer matches.\n\nAgain the idea is to omit positions entirely, and instead use shinglefilter (unigrams and bigrams), approximating phrase \nqueries with n-gram conjunctions. I think for the sloppy case, we should use an n-gram disjunction, perhaps interpreting \nslop factor as minNrShouldmatch?\n\nThis basically means you are substituting levenshtein distance for an n-gram approximation in both cases.\n\nIn general its a classic indexing/search tradeoff, in my tests on wikipedia indexing takes ~ twice as long with the shingles,\nbut the tradeoff is that for a lot of these use cases you don't need to consult the positions file at all.\n\nAs a parameter to the fieldtype its easily pluggable without messing with any queryparsers, and ordinary queries (term, boolean, etc)\nare totally 'pass-thru', however the thing I guess I don't like about this patch is the fact that this is really a different \n'query intent', in other words, I think its a perfect approach when you just want to boost scores of close matches \n(e.g. when generated by dismax queryparser), but when your 'intent' is to actually limit matches to a phrase \n(e.g. when keyed in by a user directly), then this approximation isn't as good of a fit.\n\nEither way I'm open to other opinions before doing anything (if we decide to do it, next step I think is to update the patch with \nthe SloppyPhraseQuery approximation). "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13594061",
            "date": "2013-03-05T23:00:33+0000",
            "content": "Can we consider commit a first part of this to lay the foundation for fixing the exception, as discussed in this thread http://search-lucene.com/m/t168517UJ5l1 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13594751",
            "date": "2013-03-06T14:51:50+0000",
            "content": "There is no exception to fix. I think people discussing in that thread have a misunderstanding of what this issue is about.\nIf you ask to omit positions, and then you ask for a phrase query, or configure a stupid query parser that generates them automatically, then you deserve an exception.\n "
        }
    ]
}