{
    "id": "SOLR-11435",
    "title": "Replicas failed to be deleted can overwrite replicas of recreated collections",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.0",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "When a replica comes up that was deleted from ZK while it was gone, it can replace replicas in ZK if the collection an core names are equal.\nReproduction:\n\n\tCreate collection1 with 1 shard, 2 replicas on node1 and node2\n\tShut down node2\n\tDelete collection1\n\tCreate collection1 on node1 and node3\n\tStart node2\n\n\n\nExpected:\nnode2 will not initialize node as it is not assigned to in ZK (legacyCloud=false)\nActual:\nnode2 will overwrite the baseurl in state.json for one of the replicas as the coreNodeName and the collection name will match the core it has.\n\n\nNote: SOLR-7248 introduced a baseurl comparison which was removed in SOLR-10279.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-04T09:54:37+0000",
            "content": "CC: Varun Thacker, Mark Miller ",
            "author": "Mano Kovacs",
            "id": "comment-16191072"
        },
        {
            "date": "2017-10-04T20:32:39+0000",
            "content": "I think we should add it back when users are not using the autoAddReplica feature? ",
            "author": "Varun Thacker",
            "id": "comment-16191998"
        },
        {
            "date": "2017-10-05T15:35:15+0000",
            "content": "We should add a test for this for sure.\n\nI think we should add it back when users are not using the autoAddReplica feature?\n\nThat may be a good short term fix, but we should consider how this all works with legacyCloud=false and the new autoAddReplica replacement longer term.\n\nAnother option is to just revert that change for now, even with it's affect on autoAddReplica, given the nightly test was broken some time ago and a variety of things could be broken now.\n\nAlso though, I wonder if SOLR-7248 was really the right fix for this issue. Using the coreNodeName is a very simple design to understand. This complicated things. Can we not prevent this behavior in a better way?\n\nThe most important thing is to have a test for this though. ",
            "author": "Mark Miller",
            "id": "comment-16193057"
        },
        {
            "date": "2017-10-05T15:43:24+0000",
            "content": "This complicated things.\n\nWell, and broke autoAddReplicas at the time. ",
            "author": "Mark Miller",
            "id": "comment-16193068"
        },
        {
            "date": "2017-10-05T16:54:48+0000",
            "content": "It would be important to understand what ZkController.checkStateInZk() does when legacyCloud=false. Considering legacyCloud=false means the true source of core-layout is ZK and ZK only, this method should prevents core to be initialized if that core is not assigned to that node. Now, I see Varun Thacker's patch as a hardening in the logic, meaning if the core was moved in ZK, it should not be loaded on the old node (deleting collection), or the other way, if the core is moved physically to another node, it should be represented in ZK as well (AAR). So either that assumption is correct and that fix is valid, or not correct, but then we need to clarify meaning of legacyCloud=false and how we want to ensure that.\n\nI am not sure how this was affecting AAR, but I assume there are scenarios when the core is already being created but ZK does not reflect the new state of the core (with the new baseurl). If that is the case, I would not think relaxation of this ZkController.checkStateInZk() is the right solution. I think the hardening just made a bug to surface.\n\nI am preparing the test for this soon. ",
            "author": "Mano Kovacs",
            "id": "comment-16193186"
        }
    ]
}