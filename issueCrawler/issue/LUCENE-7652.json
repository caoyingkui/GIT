{
    "id": "LUCENE-7652",
    "title": "LRUQueryCache / IndexSearcher.DEFAULT_QUERY_CACHE memory leak",
    "details": {
        "labels": "",
        "priority": "Critical",
        "resolution": "Duplicate",
        "affect_versions": "5.4,                                            5.5",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "core/search"
        ],
        "fix_versions": []
    },
    "description": "Our IndexSearcher.DEFAULT_QUERY_CACHE is set to use 32MB of heap (the default), however upon inspection of our application's heap, it's retaining ~280MB of memory and increasing slowly.\n\nLRUQueryCache.cache.size was at 12,099, and LRUQueryCache.cache.modCount was also 12,099, meaning nothing was removed from LRUQueryCache.cache at all.\n\nThe keys of LRUQueryCache.cache are instances of SegmentCoreReaders, and I've checked many of the keys, the only reference to them is LRUQueryCache.cache, given LRUQueryCache.cache is an IdentityHashMap, that means you can't even get to them outside of the cache because you can't get a key that's equivalent to one of these in the cache.\n\nThis affectively makes IndexSearcher.DEFAULT_QUERY_CACHE a memory black hole.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15834494",
            "date": "2017-01-23T13:36:53+0000",
            "content": "Can you also read what the value of LRUQueryCache.ramBytesUsed is?\n\nLRUQueryCache has references to current open IndexReaders due to close listeners. I believe you are analysing a heap dump and recursively adding everything that is referenced by your LRUQueryCache while it does not make sense ot take open IndexReaders into account.\n\nThe keys of LRUQueryCache.cache are instances of SegmentCoreReaders, and I've checked many of the keys, the only reference to them is LRUQueryCache.cache, given LRUQueryCache.cache is an IdentityHashMap, that means you can't even get to them outside of the cache because you can't get a key that's equivalent to one of these in the cache.\n\nThis indicates that you are leaking index readers. When there are no readers that reference a segment anymore, that segment is closed, which triggers the eviction of all associated entries in the query cache. You should review your usage of Lucene to make sure that there is a call to close() for every index reader that you acquire. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15835083",
            "date": "2017-01-23T19:22:22+0000",
            "content": "Hi Adrien, ramBytesUsed is only ~500KB. Thanks for the info regarding leaking index readers, I'll try to track those down. ",
            "author": "Lae"
        },
        {
            "id": "comment-15837865",
            "date": "2017-01-25T15:01:21+0000",
            "content": "Another possibility is that you are affected by this bug: https://issues.apache.org/jira/browse/LUCENE-7657. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15837869",
            "date": "2017-01-25T15:02:08+0000",
            "content": "Closing now as this is either an IndexReader leak from the application side or a duplicate of LUCENE-7657. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15838787",
            "date": "2017-01-25T23:21:41+0000",
            "content": "I have found our application was indeed leaking, we basically have something like:\n\nDirectory dir = FSDirectory.open(path);\nDirectoryReader reader = DirectoryReader.open(dir);\n\n\nreader was closed after used but dir was never closed, therefore causing this leak.\n\nI have not yet verified whether we are impacted by LUCENE-7657. ",
            "author": "Lae"
        }
    ]
}