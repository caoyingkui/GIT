{
    "id": "SOLR-11731",
    "title": "LatLonPointSpatialField could be improved to return the lat/lon from docValues",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "spatial"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.4"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "You can only return the lat & lon from a LatLonPointSpatialField if you set stored=true.  But we could allow this (albeit at a small loss in precision) if stored=false and docValues=true.",
    "attachments": {
        "SOLR-11731.patch": "https://issues.apache.org/jira/secure/attachment/12910448/SOLR-11731.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-13T21:38:12+0000",
            "content": "I will check this out after my vacation ending Feb 21st ",
            "author": "David Smiley",
            "id": "comment-16363091"
        },
        {
            "date": "2018-02-13T21:44:35+0000",
            "content": "Okay, Thanks! ",
            "author": "Karthik Ramachandran",
            "id": "comment-16363101"
        },
        {
            "date": "2018-03-05T17:10:54+0000",
            "content": "I reviewed the PR.\n\nI think there may be more to do, maybe not strictly required but would be nice \u2013 org.apache.solr.search.SolrDocumentFetcher#canSubstituteDvForStored that came about from SOLR-11532 ",
            "author": "David Smiley",
            "id": "comment-16386381"
        },
        {
            "date": "2018-03-16T20:27:57+0000",
            "content": "Thanks for offering a great starting point.  I worked on it further significantly, esp. with testing.\n\n\tImproved testing:\n\t\n\t\ttest round-trip more methodically using a RetrievalCombo class/struct to hold index & return value\n\t\tnew testLLPDecodeIsStableAndPrecise to test that the result is stable (can be re-indexed to get the same value), and that it's precise (< 1.3 cm)\n\t\n\t\n\tAdjusted to BigDecimal setScale(7,CEILING) as comments indicate why.\n\tEnsured we only wrap in an array when the field is multiValued.\nWDYT?\n\n ",
            "author": "David Smiley",
            "id": "comment-16402457"
        },
        {
            "date": "2018-03-16T23:28:21+0000",
            "content": "Looks good to me.\n\nDavid Smiley Thanks for making changes to test. ",
            "author": "Karthik Ramachandran",
            "id": "comment-16403114"
        },
        {
            "date": "2018-03-17T16:22:02+0000",
            "content": "Commit 4b08efcf1c13cee0524777955f1ff7473506f58f in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4b08efc ]\n\nSOLR-11731: LatLonPointSpatialField now supports docValue retrieval\nCloses #323 ",
            "author": "ASF subversion and git services",
            "id": "comment-16403523"
        },
        {
            "date": "2018-03-17T16:24:30+0000",
            "content": "Commit 20d7d993f9abc0ca4ba898b3f5729cd103cc755b in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=20d7d99 ]\n\nSOLR-11731: LatLonPointSpatialField now supports docValue retrieval\nCloses #323\n\n(cherry picked from commit 4b08efc) ",
            "author": "ASF subversion and git services",
            "id": "comment-16403526"
        },
        {
            "date": "2018-03-17T16:28:21+0000",
            "content": "While debugging\u00a0I checked that\u00a0RetrieveFieldsOptimizer is smart enough to recognize that a document can avoid being retrieved if LLPSF is listed (as long as stored=false). \u00a0I also observed that if LLPSF is stored, then Solr will never automatically choose to get the docValue version (semantically useDocValueAsStored is effectively always false for LLPSF). \u00a0That's good\u00a0since there is precision loss.\n\nThanks again Karthik. ",
            "author": "David Smiley",
            "id": "comment-16403528"
        },
        {
            "date": "2018-04-10T00:38:59+0000",
            "content": "Reproducing seed for a failure for a test introduced on this issue, from https://jenkins.thetaphi.de/job/Lucene-Solr-master-MacOSX/4555/:\n\n\nChecking out Revision bd8fe72426b2a9df45050143e85481f523854239 (refs/remotes/origin/master)\n[...]\n  [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSolr4Spatial2 -Dtests.method=testLLPDecodeIsStableAndPrecise -Dtests.seed=4A0FE4EBBF28C333 -Dtests.slow=true -Dtests.locale=sv-SE -Dtests.timezone=Asia/Novokuznetsk -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n  [junit4] FAILURE 0.02s J0 | TestSolr4Spatial2.testLLPDecodeIsStableAndPrecise {seed=[4A0FE4EBBF28C333:334C1482C273AE6C]} <<<\n  [junit4]    > Throwable #1: java.lang.AssertionError: deltaCm too high: 1.3555223714857696\n  [junit4]    > \tat __randomizedtesting.SeedInfo.seed([4A0FE4EBBF28C333:334C1482C273AE6C]:0)\n  [junit4]    > \tat org.apache.solr.search.TestSolr4Spatial2.testLLPDecodeIsStableAndPrecise(TestSolr4Spatial2.java:167)\n  [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n[...]\n  [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {srptgeom=TestBloomFilteredLucenePostings(BloomFilteringPostingsFormat(Lucene50(blocksize=128))), bboxD_dynamic__xdl=Lucene50(blocksize=128), id=Lucene50(blocksize=128)}, docValues:{srptgeom=DocValuesFormat(name=Direct), bboxD_dynamic__maxX=DocValuesFormat(name=Direct), llp_N_dv_dvasst=DocValuesFormat(name=Lucene70), llp_1_dv_dvasst=DocValuesFormat(name=Memory), llp_1_dv_st=DocValuesFormat(name=Direct), llp_N_dv=DocValuesFormat(name=Lucene70), llp_N_dv_st=DocValuesFormat(name=Lucene70), bboxD_dynamic__minY=DocValuesFormat(name=Lucene70), llp_1_dv=DocValuesFormat(name=Direct), bboxD_dynamic__minX=DocValuesFormat(name=Memory), bboxD_dynamic__maxY=DocValuesFormat(name=Asserting)}, maxPointsInLeafNode=507, maxMBSortInHeap=5.869480725854461, sim=Asserting(org.apache.lucene.search.similarities.AssertingSimilarity@d8154da), locale=sv-SE, timezone=Asia/Novokuznetsk\n  [junit4]   2> NOTE: Mac OS X 10.11.6 x86_64/Oracle Corporation 1.8.0_144 (64-bit)/cpus=3,threads=1,free=94769840,total=134217728\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16431558"
        },
        {
            "date": "2018-04-13T21:05:59+0000",
            "content": "Commit e4eb8a870c342b49c8f0a0864d34617cac1deb0f in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e4eb8a8 ]\n\nSOLR-11731: one more decimal place (8) and we get the target/theoretical precision ",
            "author": "ASF subversion and git services",
            "id": "comment-16437912"
        },
        {
            "date": "2018-04-13T21:06:43+0000",
            "content": "Commit 6f693ce7f1d57ec8581bd37b1a9a3f3a2abb626d in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6f693ce ]\n\nSOLR-11731: one more decimal place (8) and we get the target/theoretical precision\n\n(cherry picked from commit e4eb8a8) ",
            "author": "ASF subversion and git services",
            "id": "comment-16437914"
        },
        {
            "date": "2018-04-13T21:08:42+0000",
            "content": "I spent more time looking at this and committed an improvement adding one more decimal place \u2013 8.  This gets us to below the theoretical precision.  The test now tests with the theoretical bounds (now even more aggressive \u2013 1.04cm down from 1.33cm).  I looped it a few thousand times without failure. ",
            "author": "David Smiley",
            "id": "comment-16437918"
        },
        {
            "date": "2018-04-14T14:51:59+0000",
            "content": "Commit dad2d1076db632535c33fa118eb851ad7d0e2537 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dad2d10 ]\n\nSOLR-11731: revert to 7 decimal places so we can maintain the round-trip property.\nAdd test that we round-trip random numbers at 7 decimal places.  Would fail at 8. ",
            "author": "ASF subversion and git services",
            "id": "comment-16438374"
        },
        {
            "date": "2018-04-14T14:53:20+0000",
            "content": "Commit 892b4bb6b0dd6e16d31d9f54f0e978d6d78a6091 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=892b4bb ]\n\nSOLR-11731: revert to 7 decimal places so we can maintain the round-trip property.\nAdd test that we round-trip random numbers at 7 decimal places.  Would fail at 8.\n\n(cherry picked from commit dad2d10) ",
            "author": "ASF subversion and git services",
            "id": "comment-16438375"
        },
        {
            "date": "2018-04-14T14:58:09+0000",
            "content": "Sorry I had run one test a bunch of times but forgot about the whole suite, thus Jenkins failed.  As explained in the commit message, we're back at 7 decimal places now so that we can retain the desirable property that a number provided with <= 7 decimal places will round-trip (i.e. will be returned in the same precision as given).  For example, this keeps 40 as-such instead of 39.99999997.  This is accurate to ~1.37 cm or so.  The theoretical 1.04cm is still possible in terms of the underlying sorting and if you gave the data in that level of accuracy (8 decimal places or more) being accurate to that but when retrieved it's only to 1.37cm accuracy. ",
            "author": "David Smiley",
            "id": "comment-16438379"
        }
    ]
}