{
    "id": "SOLR-11585",
    "title": "Solr SQL does not work with point numeric fields",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Parallel SQL"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.1",
        "resolution": "Resolved",
        "status": "Resolved"
    },
    "description": "Solr SQL does not work with point field types. there is no support for 'pint', 'plong', 'pdouble', 'pfloat'  in https://github.com/apache/lucene-solr/blob/releases/lucene-solr/7.1.0/solr/core/src/java/org/apache/solr/handler/sql/SolrSchema.java#L99\n\nSample query:\n\n\nhttp://localhost:8983/solr/ratings1/sql?indent=off&wt=json&version=2.2&aggregationMode=facet&stmt=+SELECT+movie_id,+COUNT(*)+as+agg_count,+avg(rating)+as+avg_rating,+sum(rating)+as+sum_rating,+min(rating)+as+min_rating,+max(rating)+as+max_rating+FROM+ratings1+GROUP+BY+movie_id+ORDER+BY+movie_id+asc\n\nError:\nError while executing SQL \" SELECT movie_id, COUNT(*) as agg_count, avg(rating) as avg_rating, sum(rating) as sum_rating, min(rating) as min_rating, max(rating) as max_rating FROM ratingsffd34e87_2c95_4c82_acff_d31c40983b73 GROUP BY movie_id ORDER BY movie_id asc \": From line 1, column 42 to line 1, column 52: Cannot apply 'AVG' to arguments of type 'AVG(<JAVATYPE(CLASS JAVA.LANG.STRING)>)'. Supported form(s): 'AVG(<NUMERIC>)'\n\tat org.apache.solr.client.solrj.io.stream.JDBCStream.open(JDBCStream.java:270)\n\tat org.apache.solr.client.solrj.io.stream.ExceptionStream.open(ExceptionStream.java:51)\n\tat org.apache.solr.handler.StreamHandler$TimerStream.open(StreamHandler.java:605)\n\tat org.apache.solr.client.solrj.io.stream.TupleStream.writeMap(TupleStream.java:83)\n\tat org.apache.solr.response.JSONWriter.writeMap(JSONResponseWriter.java:547)\n\tat org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:198)\n\tat org.apache.solr.response.JSONWriter.writeNamedListAsMapWithDups(JSONResponseWriter.java:209)\n\tat org.apache.solr.response.JSONWriter.writeNamedList(JSONResponseWriter.java:325)\n\tat org.apache.solr.response.JSONWriter.writeResponse(JSONResponseWriter.java:120)\n\tat org.apache.solr.response.JSONResponseWriter.write(JSONResponseWriter.java:71)\n\tat org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:65)\n\tat org.apache.solr.servlet.HttpSolrCall.writeResponse(HttpSolrCall.java:806)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:535)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:382)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:326)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1759)\n\tat org.apache.solr.client.solrj.embedded.JettySolrRunner$DebugFilter.doFilter(JettySolrRunner.java:139)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1759)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:582)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:224)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.gzip.GzipHandler.handle(GzipHandler.java:426)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:534)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:283)\n\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:108)\n\tat org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)\n\tat java.lang.Thread.run(Thread.java:748)\nCaused by: java.sql.SQLException: Error while executing SQL \" SELECT movie_id, COUNT(*) as agg_count, avg(rating) as avg_rating, sum(rating) as sum_rating, min(rating) as min_rating, max(rating) as max_rating FROM ratingsffd34e87_2c95_4c82_acff_d31c40983b73 GROUP BY movie_id ORDER BY movie_id asc \": From line 1, column 42 to line 1, column 52: Cannot apply 'AVG' to arguments of type 'AVG(<JAVATYPE(CLASS JAVA.LANG.STRING)>)'. Supported form(s): 'AVG(<NUMERIC>)'\n\tat org.apache.calcite.avatica.Helper.createException(Helper.java:56)\n\tat org.apache.calcite.avatica.Helper.createException(Helper.java:41)\n\tat org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:156)\n\tat org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:218)\n\tat org.apache.solr.client.solrj.io.stream.JDBCStream.open(JDBCStream.java:268)\n\t... 38 more\nCaused by: org.apache.calcite.runtime.CalciteContextException: From line 1, column 42 to line 1, column 52: Cannot apply 'AVG' to arguments of type 'AVG(<JAVATYPE(CLASS JAVA.LANG.STRING)>)'. Supported form(s): 'AVG(<NUMERIC>)'\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)",
    "attachments": {
        "SOLR-11585.patch": "https://issues.apache.org/jira/secure/attachment/12895047/SOLR-11585.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-31T19:19:28+0000",
            "content": "Did some local testing with the attached patch and it seems to fix the issue ",
            "author": "kiran",
            "id": "comment-16227358"
        },
        {
            "date": "2017-10-31T19:29:34+0000",
            "content": "The  tests didn't catch this because TestSQLHandler is using field names like field_i which is hardcoded to use trie fields. If it used field_ti then the test framework would have randomized b/w trie and point fields. \n\nWe should just use {[schema.xml}} instead of \"schema-sql.xml\" . A quick glance shows that the test uses three dynamic fields - _t  , _s and _i which is present in schema.xml . _i is also randomized b/w trie and point fields.  ",
            "author": "Varun Thacker",
            "id": "comment-16227368"
        },
        {
            "date": "2018-08-09T15:10:31+0000",
            "content": "I'll apply the patch and then work on the tests so that all the numeric field types are exercised. ",
            "author": "Joel Bernstein",
            "id": "comment-16574975"
        },
        {
            "date": "2018-08-09T15:55:56+0000",
            "content": "I think it will be very difficult to switch the test case to use schema.xml because DocValues are required for many of the SQL queries being tested. In schema.xml DocValues are randomized in places which will break the test.\n\nSo I will focus on getting all the field types that need to be tested in schema-sql.xml. Then I'll expand the tests to excercise all the field types.\u00a0\n\nI'll also remove the badapple designation from the TestSQLHandler and fix any issues I see in jenkins. ",
            "author": "Joel Bernstein",
            "id": "comment-16575045"
        },
        {
            "date": "2018-08-09T16:28:38+0000",
            "content": "I think it will be very difficult to switch the test case to use schema.xml because DocValues are required for many of the SQL queries being tested.\u00a0\nWe could perhaps use this to always ensure\u00a0fields\u00a0have doc-values\u00a0\n\nSystem.setProperty(NUMERIC_DOCVALUES_SYSPROP,\"true\");\n\nThe motivation for me is we have lots of test-specific schemas and the more we can reuse the better. New devs then just end up copy-pasting an existing test case but don't get the context to why a particular schema was used ",
            "author": "Varun Thacker",
            "id": "comment-16575096"
        },
        {
            "date": "2018-08-09T16:49:19+0000",
            "content": "We can try that. Let's do this in two tickets, In this ticket let's get this done:\n\n1) Get points working with /sql handler\n\n2) Add better tests that explicitly use points\n\nI'll get this committed and pushed out today.\n\nThen I'll open another ticket which looks at using the standard schema.xml. There may be more then one problem that needs to be fixed with this.\n\n\u00a0 ",
            "author": "Joel Bernstein",
            "id": "comment-16575118"
        },
        {
            "date": "2018-08-09T19:24:34+0000",
            "content": "Patch with improved tests. ",
            "author": "Joel Bernstein",
            "id": "comment-16575291"
        },
        {
            "date": "2018-08-09T19:26:44+0000",
            "content": "Latest patch is looking fairly good. The tests still need more work in general but they do exercise the points in different ways. I'll do some manual testing as well and then likely commit.\n\nI'll create another ticket to improve the tests in general to ensure the more cases are covered, in particular that both map_reduce and facet aggregationModes have enough coverage. ",
            "author": "Joel Bernstein",
            "id": "comment-16575293"
        },
        {
            "date": "2018-08-10T00:05:58+0000",
            "content": "Commit 71310a4722f3e95a0e10a4ca4297d090ace3efd4 in lucene-solr's branch refs/heads/master from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=71310a4 ]\n\nSOLR-11585: Solr SQL does not work with point numeric fields ",
            "author": "ASF subversion and git services",
            "id": "comment-16575593"
        },
        {
            "date": "2018-08-10T00:11:33+0000",
            "content": "Commit c5ea325e096a344b58cbf1df2ef167d4953c97b1 in lucene-solr's branch refs/heads/branch_7x from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c5ea325 ]\n\nSOLR-11585: Solr SQL does not work with point numeric fields ",
            "author": "ASF subversion and git services",
            "id": "comment-16575596"
        },
        {
            "date": "2018-08-10T09:13:57+0000",
            "content": "Commit 71310a4722f3e95a0e10a4ca4297d090ace3efd4 in lucene-solr's branch refs/heads/jira/http2 from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=71310a4 ]\n\nSOLR-11585: Solr SQL does not work with point numeric fields ",
            "author": "ASF subversion and git services",
            "id": "comment-16576001"
        },
        {
            "date": "2018-08-10T10:40:10+0000",
            "content": "Thanks kiran! ",
            "author": "Joel Bernstein",
            "id": "comment-16576088"
        }
    ]
}