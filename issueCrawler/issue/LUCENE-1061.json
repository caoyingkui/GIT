{
    "id": "LUCENE-1061",
    "title": "Adding a factory to QueryParser to instantiate query instances",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.4"
        ],
        "affect_versions": "2.3",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "With the new efforts with Payload and scoring functions, it would be nice to plugin custom query implementations while using the same QueryParser.\nIncluded is a patch with some refactoring the QueryParser to take a factory that produces query instances.",
    "attachments": {
        "lucene_patch.txt": "https://issues.apache.org/jira/secure/attachment/12369822/lucene_patch.txt",
        "LUCENE-1061.patch": "https://issues.apache.org/jira/secure/attachment/12389055/LUCENE-1061.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-11-19T21:12:29+0000",
            "content": "This patch introduces a new file: QueryBuilder which is just a factory for instantiating query objects.\n\nAnd the class QueryParser is modified to use use the factory to build the final query.\n\nThis is backward compatible. ",
            "author": "John Wang",
            "id": "comment-12543694"
        },
        {
            "date": "2007-11-28T19:02:05+0000",
            "content": "Yonik,\n\nI remember that we talked briefly about a QueryFactory in Atlanta and \nyou had some cool ideas. Maybe you could mention them here? ",
            "author": "Michael Busch",
            "id": "comment-12546353"
        },
        {
            "date": "2008-08-27T10:08:30+0000",
            "content": "This looks useful \u2013 Michael or Yonik, what do you think? ",
            "author": "Michael McCandless",
            "id": "comment-12626051"
        },
        {
            "date": "2008-08-27T10:28:51+0000",
            "content": "What's wrong with just subclassing QueryParser and overriding the desired methods?   Either way someone wanting to provide custom Query implementations will be writing effectively the same code, just with more indirection with this method. ",
            "author": "Erik Hatcher",
            "id": "comment-12626055"
        },
        {
            "date": "2008-08-27T11:29:19+0000",
            "content": "What's wrong with just subclassing QueryParser and overriding the desired methods?\n\nI think subclassing would work fine too, as long as we fix QueryParser so that instead of doing things like:\n\n  TermQuery q = new TermQuery(...);\n\n\n\nit would do:\n\n  q = newTermQuery(...);\n\n\n\nand then define a newTermQuery(...) method which a subclass could then override.  Is that what you have in mind Erik?  John does this sound OK? ",
            "author": "Michael McCandless",
            "id": "comment-12626081"
        },
        {
            "date": "2008-08-27T11:44:12+0000",
            "content": "> What's wrong with just subclassing QueryParser and overriding the desired methods?\n\nFor what it's worth, I find the idea of a separate class appealing from an API documentation design standpoint.  This usage of QueryParser is relatively arcane. Hiding all these methods away in a separate class means less clutter and less effort for most people scanning through the API docs of an important, commonly used class. ",
            "author": "Marvin Humphrey",
            "id": "comment-12626083"
        },
        {
            "date": "2008-08-27T12:05:28+0000",
            "content": "I think the idea of sub-classing makes more sense when you're talking about a QueryParser. The parser includes, mainly, two logics - parsing a query into query \"segments\" or \"nodes\" and then creating the appropriate Lucene Query instance for each sengment/node.\nBy modifying QueryParser so that it uses protected callback methods for creating the appropriate Query instance for different node types, you get a very clean and elegant query parsing solution.\nAll sub-classes can share the same parsing rules (which generally don't change), and just instantiating their own TermQuery or PrefixQuery instances.\n\nWouldn't you need to do that anyway with the Query factory? I mean, what if I want to create all the query types like the default implementation, but change the PrefixQuery instance to something I wrote? Wouldn't I need to extend the default query factory? Sounds exactly like extending QueryParser to me.\n\nI recently implemented a query parser for a different query syntax than Lucene's, but I still wanted to create Lucene Query objects. The parser includes different protected callback methods like getTermQuery, getPhraseQuery, getPrefixQuery etc, providing a default implementation to each of course. It parses the query into \"nodes\" and then invoke the appropriate callback method per node (i.e., for a phrase node, it invokes getPhraseQuery).\nWe have several sub-classes which extend this parser to provide their own implementation for various node types (for example, this approach allows you to remove any \"prefix\" or \"wildcard\" nodes from the query, without touching the parser). ",
            "author": "Shai Erera",
            "id": "comment-12626086"
        },
        {
            "date": "2008-08-27T18:58:42+0000",
            "content": "In this specific instance I think subclassing of QueryParser is the right way to go, and avoids introducing another class.  People are going to want more customizations than just changing the types of created subclauses, and will need to subclass for these other types of changes anyway. ",
            "author": "Yonik Seeley",
            "id": "comment-12626253"
        },
        {
            "date": "2008-08-27T22:25:44+0000",
            "content": "OK then let's take the subclassing approach; I'll rework the patch. ",
            "author": "Michael McCandless",
            "id": "comment-12626345"
        },
        {
            "date": "2008-08-27T23:20:07+0000",
            "content": "OK reworked patch to subclass.  I plan to commit in a day or two. ",
            "author": "Michael McCandless",
            "id": "comment-12626357"
        },
        {
            "date": "2008-08-28T09:21:46+0000",
            "content": "Michael - you are a machine!\n\n+1 to the subclassing approach and your general patch.\n\nWhat might be even more interesting is to make the newXXX methods return Query instead of a specific type.  I'm not sure if that would work in all cases (surely not for BooleanQuery), but might for most of 'em.\n\nFor example, what if newTermQuery(Term term) returned a Query instead of a TermQuery?   That'd add a fair bit more flexibility, as long as none of the calling code needed a specific type of Query.\n\nThe hoops we jump through because we're in Java.... sheesh.   ",
            "author": "Erik Hatcher",
            "id": "comment-12626499"
        },
        {
            "date": "2008-08-28T09:59:39+0000",
            "content": "The hoops we jump through because we're in Java.... sheesh.  \n\nAlas, yes... maybe we should all switch to Erlang!  \n\nWhat might be even more interesting is to make the newXXX methods return Query instead of a specific type. I'm not sure if that would work in all cases (surely not for BooleanQuery), but might for most of 'em.\n\nOK I was able to do this with many of them \u2013 attached new patch.  Only PhraseQuery, MultiPhraseQuery, BooleanQuery/Clause required strong typing.  All others now return Query. ",
            "author": "Michael McCandless",
            "id": "comment-12626507"
        },
        {
            "date": "2008-08-28T16:29:16+0000",
            "content": "This looks great! Either subclassing or using a factory pattern works well in this case. Great job and thanks! ",
            "author": "John Wang",
            "id": "comment-12626638"
        },
        {
            "date": "2008-08-30T17:14:26+0000",
            "content": "Committed revision 690535.  Thanks John! ",
            "author": "Michael McCandless",
            "id": "comment-12627221"
        }
    ]
}