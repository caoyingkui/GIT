{
    "id": "SOLR-4992",
    "title": "Solr queries don't propagate Java OutOfMemoryError back to the JVM",
    "details": {
        "affect_versions": "4.3.1",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "components": [
            "search",
            "SolrCloud",
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Solr (specifically SolrDispatchFilter.doFilter() but there might be other places) handle generic java.lang.Throwable errors but that \"hides\" OutOfMemoryError scenarios.\n\nIndexWriter does this too but that has a specific exclusion for OOM scenarios and handles them explicitly (stops committing and just logs to the transaction log).\n\n\nExample Stack trace:\n2013-06-26 19:31:33,801 [qtp632640515-62] ERROR\nsolr.servlet.SolrDispatchFilter Q:22 -\nnull:java.lang.RuntimeException: java.lang.OutOfMemoryError: Java heap\nspace\nat org.apache.solr.servlet.SolrDispatchFilter.sendError(SolrDispatchFilter.java:670)\nat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:380)\nat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:155)\nat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1423)\nat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:450)\nat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:138)\nat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:564)\nat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:213)\nat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1083)\nat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:379)\nat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:175)\nat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1017)\nat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:136)\nat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:258)\nat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:109)\nat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\nat org.eclipse.jetty.server.Server.handle(Server.java:445)\nat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:260)\nat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:225)\nat org.eclipse.jetty.io.AbstractConnection$ReadCallback.run(AbstractConnection.java:358)\nat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:596)\nat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:527)\nat java.lang.Thread.run(Thread.java:722)\nCaused by: java.lang.OutOfMemoryError: Java heap space",
    "attachments": {
        "SOLR-4992.patch": "https://issues.apache.org/jira/secure/attachment/12608383/SOLR-4992.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-13717163",
            "date": "2013-07-23T18:47:19+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13794295",
            "date": "2013-10-14T17:27:24+0000",
            "content": "We like to catch those throwables because of things like assertion errors - we still want to close resources, etc.\n\nOne idea is to always do:\n\n     } catch (Throwable t) {\n        if (t instanceof OutOfMemoryError) {\n          throw (OutOfMemoryError)t;\n        }\n\n\nBut that is difficult to enforce over time. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-13794297",
            "date": "2013-10-14T17:30:31+0000",
            "content": "Doesn't `finally` offer a cleaner way to do that? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13794616",
            "date": "2013-10-14T23:18:21+0000",
            "content": "I think for some cases it does.\n\nIt's a little painful for closing collections of items or if you need to close a lot of items serially, nesting one finally after another.\n\nIt does seem like we should probably stop catching throwable in most cases anyway. In some cases, you might still catch it, log something and then throw if instanceOf Error I think, but in general, we need OOM's to bubble up. It seems like the best way to ensure that is to try and minimize use of catch (Throwable... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13794646",
            "date": "2013-10-14T23:41:40+0000",
            "content": "Here is a first (somewhat conservative) pass at improving the situation. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13797956",
            "date": "2013-10-17T14:35:23+0000",
            "content": "Here is a more complete patch. I'd like to commit shortly and iterate if their are any concerns - this covers a lot of classes and will be outdated very quickly. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13797969",
            "date": "2013-10-17T14:54:41+0000",
            "content": "Are there response format implications to this?\nFor example, on certain errors (like OOM) will I still get a JSON response format back (assuming that's the writer I'm using)? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13798004",
            "date": "2013-10-17T15:25:09+0000",
            "content": "In most cases I still try and log or send the same response before propagating the Throwable. Just fixed some stuff around the SolrDispatcher here on a closer review. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13798039",
            "date": "2013-10-17T16:26:59+0000",
            "content": "FYI I thought I'd point out some utilities Google Guava has in this regard:\nhttp://code.google.com/p/guava-libraries/wiki/ClosingResourcesExplained   \"Closer\", as well as various utility methods on the \"Throwables\" class. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13799305",
            "date": "2013-10-18T17:11:07+0000",
            "content": "Nice David. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13869705",
            "date": "2014-01-13T17:12:25+0000",
            "content": "I'm going to commit my current progress. I think it's all okay and we can make improvements on it over time. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13869716",
            "date": "2014-01-13T17:27:25+0000",
            "content": "Commit 1557778 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1557778 ]\n\nSOLR-4992: Solr eats OutOfMemoryError exceptions in many cases. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13869723",
            "date": "2014-01-13T17:35:14+0000",
            "content": "Commit 1557783 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1557783 ]\n\nSOLR-4992: Solr eats OutOfMemoryError exceptions in many cases. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13876476",
            "date": "2014-01-20T14:41:39+0000",
            "content": "Thanks Daniel - let's do further specific work in new issues. "
        }
    ]
}