{
    "id": "SOLR-2588",
    "title": "Make Velocity an optional dependency in SolrCore",
    "details": {
        "affect_versions": "3.2",
        "status": "Closed",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Wish",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In 1.4. it was fine to run Solr without Velocity on the classpath. However, in 3.2. SolrCore won't load because of a hard reference to the Velocity response writer in a static initializer.\n\n\n... ERROR org.apache.solr.core.CoreContainer - java.lang.NoClassDefFoundError: org/apache/velocity/context/Context\n\tat org.apache.solr.core.SolrCore.<clinit>(SolrCore.java:1447)\n\tat org.apache.solr.core.CoreContainer.create(CoreContainer.java:463)\n\tat org.apache.solr.core.CoreContainer.load(CoreContainer.java:316)\n\tat org.apache.solr.core.CoreContainer.load(CoreContainer.java:207)",
    "attachments": {
        "SOLR-2588_Don_t_fail_if_velocity_libs_not_present_.patch": "https://issues.apache.org/jira/secure/attachment/12486411/SOLR-2588_Don_t_fail_if_velocity_libs_not_present_.patch",
        "SOLR-2588-maven.patch": "https://issues.apache.org/jira/secure/attachment/12500946/SOLR-2588-maven.patch",
        "SOLR-2588.patch": "https://issues.apache.org/jira/secure/attachment/12490731/SOLR-2588.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13048426",
            "date": "2011-06-12T19:53:46+0000",
            "content": "I'm assuming that 1.4 did not offer the Velocity ResponseWriter? Or was that part of the velocity contrib and it was move to core?\n\nWould prefer if these libs where not required unless you used the functionality myself as well - have not look to see how easy that is to do. Not that I have anything against velocity, I think it's an awesome templating system... "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13048799",
            "date": "2011-06-13T21:37:44+0000",
            "content": "I don't understand this bug?\n\nin SOLR-1957 the velocity response writer was promoted from being a contrib to being part of the solr core so that the jars are all included in the solr.war and the velocity writer would be one of the writers provided by deault.\n\nnothing special should be needed on the classpath. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13048814",
            "date": "2011-06-13T21:55:55+0000",
            "content": "Perhaps he is not using the webapp? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13048815",
            "date": "2011-06-13T21:57:49+0000",
            "content": "I generally also do not use the webapp directly, so thats not uncommon! "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13048817",
            "date": "2011-06-13T22:00:24+0000",
            "content": "\"bug\" is a strech...  I think what this is getting at is that velocity is now required for solr to work at all.  With some small changes, Velocity could be optional.\n\nI think somethign as easy as:\n\nIndex: solr/src/java/org/apache/solr/core/SolrCore.java\n===================================================================\n--- solr/src/java/org/apache/solr/core/SolrCore.java    (revision 1134331)\n+++ solr/src/java/org/apache/solr/core/SolrCore.java    (working copy)\n@@ -1381,7 +1381,12 @@\n     m.put(\"ruby\", new RubyResponseWriter());\n     m.put(\"raw\", new RawResponseWriter());\n     m.put(\"javabin\", new BinaryResponseWriter());\n-    m.put(\"velocity\", new VelocityResponseWriter());\n+    try {\n+      m.put(\"velocity\", new VelocityResponseWriter());\n+    }\n+    catch( Throwable t ) {\n+      log.warn(\"Error initalizing VelocityResponseWriter\", t );\n+    }\n     m.put(\"csv\", new CSVResponseWriter());\n     DEFAULT_RESPONSE_WRITERS = Collections.unmodifiableMap(m);\n   }\n\n\n\nIs all he is talking about...  but I'm not sure how/if we want to deal with the error being gobbled...\n\nperhaps something smarter to see if Velocity can be created before trying?\n\n\n "
        },
        {
            "author": "Gunnar Wagenknecht",
            "id": "comment-13049059",
            "date": "2011-06-14T08:29:40+0000",
            "content": "Thanks Ryan, that's exactly what I was thinking of. \n\nFWIW, it's fine to have support for Velocity or XYZ in core. But this shouldn't require everybody to inherit the dependency into their apps. For me it's an additional dependency that I have to get through an IP/due diligence process and that I have to keep track of security updates, etc. even if I don't use it in my app. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13049247",
            "date": "2011-06-14T16:06:24+0000",
            "content": "With some small changes, Velocity could be optional.\n\nVelocity (and the velocitywriter) were optional before, and a conscious and deliberate choice was made to promote it into a core dependency so that admin code (and users) could start expecting it to reliable always work.\n\nif we want to re-consider i'm fine with having that discussion, but it shouldn't be an \"optional core\" feature ... either it's a core feature and dependency, or it's an optional contrib.\n\nIt's not a bug that code in solr has a direct dependency on jars in the lib dir. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13049251",
            "date": "2011-06-14T16:12:25+0000",
            "content": "updating the JIRA description... since this is not a 'bug' "
        },
        {
            "author": "David Smiley",
            "id": "comment-13062016",
            "date": "2011-07-08T15:29:57+0000",
            "content": "I'm surprised velocity became a core dependency, but nonetheless I think it should be possible to use Solr in an embedded fashion without pulling in extraneous dependencies like velocity and others. What if these response writers were initialized on-demand?  This would increase startup time & decrease memory usage just a little since most people aren't actually going to use all response writers that Solr supports.  I'm willing to put together a patch. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13062044",
            "date": "2011-07-08T16:23:07+0000",
            "content": "Sorry - I missed this when it first got posted, and David's comment bumped it... it was intentional to make Velocity a core component as the idea being that we'd use it for built-in admin UI.  So far we're only using it for the /browse interface though.  \n\nI get the argument that Velocity ideally shouldn't be required to \"embed\" Solr though.  I'm ok with the Velocity writer creation either being in the try/catch as Ryan posted, or pulling it out of the default writers and having it be explicitly configured in solrconfig.xml for our example app. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13065069",
            "date": "2011-07-14T06:06:46+0000",
            "content": "The attached patch catches exceptions during attempts to instantiate the default query response writers, and logs a warning.\n\nI tested that this had the desired effect manually by removing the velocity libs from the example app and going to the /browse UI. Oddly, the default behavior when the \"wt\" param fails to resolve is to use the default (XML) instead of throwing an error.\n\nFYI I contemplated a lazy-instantiation strategy but in the end ditched it because it was more complicated than needed. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13066268",
            "date": "2011-07-15T22:29:47+0000",
            "content": "-1\n\nI re-iterate...\n\neither [velocity is] a core feature and dependency, or it's an optional contrib.\n\nwe should not claim it is a core feature, but then silently succeed even if it's not found at runtime.  That will only lead to confusion for users/plugin devs who see that it works by default in (w/o any special <lib/> loading/config) in their solr instance, and then in other instances it's just not there w/o any warning/error on startup.\n\nif it's a core feature then it's a core feature that people should be able to rely on always working with any solr instance (war or otherwise) and we should fail hard and fast if it's not found. \n\nif there is going to any ambiguity or about whether it is/isn't available then it must be rolled back to a contrib and people who want it should explicitly say \"i want this\" using a <lib/> declaration. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13067033",
            "date": "2011-07-18T13:51:18+0000",
            "content": "Hoss, you apparently have a black or white view of things \u2013 something is needed or not without conditions.  I don't advocate removing Velocity from Solr's maven pom or the WAR file that comes with Solr.  However I do think that if the Solr user/packager realized that Velocity is not used in their setup (perhaps using Solr in an embedded fashion) and if Solr can gracefully work without it for the rest of Solr that doesn't need it, then it should run without it. There are many parts of Solr that are very loosely tied into the framework (a good thing) like request handlers, query parsers, response writers, text analysis etc.  Unless one of these are explicitly registered, I think Solr should not fail to start if a dependency isn't present.\n\nit's just not there w/o any warning/error on startup\nThis is a false claim. My patch logs a warning. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13068611",
            "date": "2011-07-20T20:28:35+0000",
            "content": "\nThis is a false claim. My patch logs a warning.\n\nmy apologies, i misread the patch and thought it would only warn on first usage.  It doesn't change the fundemental issue however...\n\n\nHoss, you apparently have a black or white view of things\n\nI absolutely consider this issue to be black/white.\n\nHowever I do think that if the Solr user/packager realized that Velocity is not used in their setup (perhaps using Solr in an embedded fashion) and if Solr can gracefully work without it for the rest of Solr that doesn't need it, then it should run without it. \n\nthe problem with that philosophy is that it completely breaks the \"contract\" we make with our users \u2013 novices and plugin writers \u2013 about what they can/can't expect to be in a basic solr installation.\n\nif someone repackages solr to not include something that is considered a \"core\" feature/dependency, then that installation is absolutely, 100% broken, and we should not go out of our way to help that packager/installer mask the broken nature.\n\nIt is broken not only because whatever out of the box feature we advertise as being available no longer works for novice users who may try to use those features, but it is broken because anyone trying to write a plugin can no longer say \"all you need to load my plugin jar is this <lib.../> directive, because all of the dependencies are already core solr dependencies\"\n\nif VelocityWriter is a core feature (and as of now it is) then velocity is a core dependency and we should not jump through this hoop to deal with the possibility of velocity dependencies being missing any more then we should jump through hoops to deal with the possibility that commons-io, or commons-fileupload is missing \u2013 in either case, the system is not a fully functional solr installation as documented, and we should not hide that from users until they actually try to use a documented feature and get a failure.\n\nIf someone wants to bastardize a solr installation to remove core dependencies we should not be making it easier on them just because it only means changing a few line of code \u2013 that just hamstrings us with an expectation that we can never use that dependency in any other ways in the core.  Either we rip that dependency out (making it a plugin instead of a core feature) or we let the bastardizers patch the affected files themselves.\n\nAny middle ground hurts our users by making it impossible to know what features will/won't work in any given install, and hurts development by hindering when/how we can use libraries we've already said are core dpendencies. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13068635",
            "date": "2011-07-20T21:00:32+0000",
            "content": "I absolutely consider this issue to be black/white.\n\nI agree.  I posted the hack just to show what people are talking about.  Logging an error is a simple quick 'fix', but not a good long term solution.\n\nI know we pulled velocity into the core package, but maybe we should consider pushing it out to a module?  I think this would be consistent with other modularization efforts.\n\nI think the module should be included in the .war and configured in the example solrconfig. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13068672",
            "date": "2011-07-20T22:12:07+0000",
            "content": "Hoss, I don't agree with your black/white views we aren't going to come to an agreement.\n\nRyan, you suggest:\n\nI know we pulled velocity into the core package, but maybe we should consider pushing it out to a module? I think this would be consistent with other modularization efforts.\n\nI think the module should be included in the .war and configured in the example solrconfig.\n\nI very much like the idea of making Velocity a module, one that isn't absolutely required, and one that is included by default. I'm surprised it was pulled into core in the first place (no disrespect to Erik). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13068755",
            "date": "2011-07-21T01:23:51+0000",
            "content": "I think the module should be included in the .war and configured in the example solrconfig.\n\nRyan: Your comments seem contradictory ... was that a typo? did you mean it should not be in the war, but still configured in the example (like clustering, and extraction?)\n\nI very much like the idea of making Velocity a module, one that isn't absolutely required, and one that is included by default.\n\nI didn't really have any opinions about SOLR-1957 in the first place, I've got no opinions on reverting it now and pushing the VelocityWriter back into a contrib (on par with dataimporthandler, clustering, extraction, uima, etc...) that is used/demoed in the main example configs using a relative <lib /> directive (just like clustering and extraction)\n\nBut under no circumstances can i go along with a \"core\" feature be treated like a second class citizen.  either it's core and it's a first class citizen; or it's not, and it lives in it's own plugin jar with documented dependencies and clear instructions that it needs to be explicitly loaded via configuration. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13068763",
            "date": "2011-07-21T02:14:02+0000",
            "content": "Ryan: Your comments seem contradictory ... was that a typo? did you mean it should not be in the war, but still configured in the example (like clustering, and extraction?)\n\nNo typo, just a difference of opinion on what is core.  For me the .war is not the core, it is the standard/supported way to deploy solr.  I don't care if it bundles the .jar in the .war or put in the lib directory (actually forgot about that option).  The real issue is if wt=velocity should automatically work if that is not defined in solrconfig.  \n\nI don't feel strongly about this particular issue (velocity), but I do think we should start thinking about the .war dependencies differently then solr-core.jar  "
        },
        {
            "author": "David Smiley",
            "id": "comment-13068767",
            "date": "2011-07-21T02:31:18+0000",
            "content": "I don't feel strongly about this particular issue (velocity), but I do think we should start thinking about the .war dependencies differently then solr-core.jar\n\nYes! "
        },
        {
            "author": "Gunnar Wagenknecht",
            "id": "comment-13068877",
            "date": "2011-07-21T09:25:42+0000",
            "content": "I like the proposal of making Velocity a module that is included and configured by default in the war file but not required for solr-core.jar to work. That would definitely solve my use-case where I'm embedding Solr in an application and don't want to include Velocity. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13071969",
            "date": "2011-07-27T20:14:50+0000",
            "content": "No typo, just a difference of opinion on what is core. For me the .war is not the core, it is the standard/supported way to deploy solr.\n...\nI like the proposal of making Velocity a module that is included and configured by default in the war file\n\nIf we revert SOLR-1957 to make the velocity response writer a contrib/plugin again, but left it include in the solr.war, then it would be in a similar situation to how DIH was in Solr 1.4. (ie: a contrib that core was not allowed to depend on but was include in the war by default).  Consensus was (see SOLR-2365) that that situation was confusing and unnecessary (since <lib> includes are so easy) which is why DIH was extracted from the war.\n\n\n\tIf it's a plugin: it shouldn't be included in the default war we ship, if other people want to re-bundle a \"kitchen-sink\" version of hte war with all stock plugins (or even their own plugins) embedded in it that's fine, but that shouldn't be the default.\n\tIf it's not a plugin, and it's included in the war by default, and then it's fair game to be a core dependency.\n\n\n\n(Ironicaly SOLR-2365 was actually the chief motivator for why velocity became a core dependency in SOLR-1957: so that plugins like DIH could include *.vm templates in their jar files to add UI functionality instead of needing weird JSP files.)\n\nThe real issue is if wt=velocity should automatically work if that is not defined in solrconfig. \n\nI'll say it again...\n\nI didn't really have any opinions about SOLR-1957 in the first place, I've got no opinions on reverting it now and pushing the VelocityWriter back into a contrib (on par with dataimporthandler, clustering, extraction, uima, etc...) that is used/demoed in the main example configs using a relative <lib /> directive (just like clustering and extraction)\n\n...easy enough to add a responseWriter registration for \"velocity\" in the example configs if folks don't think it should be a core feature.  Given the current direction of the UI to use HTML+AJAX+RequestHandlers w/o any need for velocity, i would definitely lean more towards reverting SOLR-1957 and making it a plugin then leaving it as a core dep.\n\nbut no fucking half-assed confusing \"it's a contrib plugin but the jar is already in the war\" or \"it's a built in feature but it's not a core dep so other code can't depend on it\" middle ground ... we should be trying to make the build/run deps simpler to understand, not more confusing. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13071997",
            "date": "2011-07-27T20:50:45+0000",
            "content": "Hoss: swearing isn't called for.  My corporate spam filter has been blocking some of your posts due to the language so I had to add exclusions just for you, and for Rob too on other occasions.\n\nSo I vote for reverting SOLR-1957 in light of the fact that the UI isn't going to need velocity, and it's trivial to add velocity support back in if needed. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13072005",
            "date": "2011-07-27T20:59:08+0000",
            "content": "Hoss: swearing isn't called for. My corporate spam filter has been blocking some of your posts due to the language so I had to add exclusions just for you, and for Rob too on other occasions.\n\nProbably me too on other other occasions, I guess.  Swearing is sometimes called for, IMNSHO, but YMMV, obviously.  (In this particular case, Hoss clearly intended to use the no-no word as an intensifier, and not to stir shit.)\n\nGood luck getting consensus on banning profanity here. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13086573",
            "date": "2011-08-17T20:35:18+0000",
            "content": "David - I'm going to tackle this one by simply moving VrW back to a contrib module.  Easy enough, and makes sense in light of the unneeded core hard dependency. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13086730",
            "date": "2011-08-18T01:35:19+0000",
            "content": "Here's a patch that moves VelocityResponseWriter back to contrib/velocity and adjusts the example configuration to include it explicitly such that /browse still works.\n\nWhat other loose ends are there?  Maybe something with Maven (POMs and such)? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13087037",
            "date": "2011-08-18T14:46:58+0000",
            "content": "Erik, your patch was missing some files that you moved but didn't make changes to.\n\nI made a new patch with a few changes:\n\n\n\tAll Solr contrib test-files/ directories are namespaced with the contrib name, so that same-named files shared between core and contrib don't overwrite each other (see SOLR-2659) - I moved contrib/velocity/src/test-files/solr/ under contrib/velocity/src/test-files/velocity/ and added an overridden getSolrHome() to the test class.\n\tAdded IntelliJ IDEA configuration for the new velocity contrib.\n\tGenerated the patch from the top-level directory instead of from the solr/ directory.\n\n\n\nThe test passes for me.\n\nHere are the svn commands to run before applying the patch:\n\n\nsvn mv --parents solr/core/src/test/org/apache/solr/velocity/VelocityResponseWriterTest.java solr/contrib/velocity/src/test/org/apache/solr/response/VelocityResponseWriterTest.java\nsvn mv --parents solr/core/src/java/org/apache/solr/response/VelocityResponseWriter.java solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter.java\nsvn mv --parents solr/core/src/java/org/apache/solr/response/SolrVelocityResourceLoader.java solr/contrib/velocity/src/java/org/apache/solr/response/SolrVelocityResourceLoader.java\nsvn mv --parents solr/core/src/java/org/apache/solr/response/SolrParamResourceLoader.java solr/contrib/velocity/src/java/org/apache/solr/response/SolrParamResourceLoader.java\nsvn mv --parents solr/core/src/test-files/solr/conf/velocity/VM_global_library.vm solr/contrib/velocity/src/test-files/velocity/solr/conf/velocity/VM_global_library.vm\nsvn rm solr/core/src/test-files/solr/conf/velocity\n\n\n\nErik, can you take a look and see if I've screwed anything up?\n\nI'll work on the Maven build configuration later today. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13087206",
            "date": "2011-08-18T19:12:20+0000",
            "content": "Here's an updated patch that removes the comment about VrW in example's solrconfig.xml "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13087207",
            "date": "2011-08-18T19:17:14+0000",
            "content": "Ugh, this got more complicated thanks to core tests relying on the example config.  Running on a clean (ant clean) trunk, tests that rely on the example solrconfig.xml fail because the Velocity contrib JAR isn't built yet.  I guess the other contribs don't fail because their componentry is lazy loaded but response writers aren't.\n\nFor example:\n\nant test -Dtestcase=ShowFileRequestHandlerTest\n\n\n\ngives: \n\njunit-sequential:\n    [junit] Testsuite: org.apache.solr.handler.admin.ShowFileRequestHandlerTest\n    [junit] Tests run: 2, Failures: 0, Errors: 2, Time elapsed: 2.033 sec\n    [junit] \n    [junit] ------------- Standard Error -----------------\n    [junit] 18.08.2011 15:13:09 org.apache.solr.common.SolrException log\n    [junit] SCHWERWIEGEND: org.apache.solr.common.SolrException: Error loading class 'solr.VelocityResponseWriter'\n\n\n\nHuh?\n\nIf you run \"ant dist\" first, it works because the contrib apache-solr-velocity JAR is built then.  \n\nUltimately response writers probably should be lazy loaded and only come into existence when used the first time.  Thoughts? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13088425",
            "date": "2011-08-21T18:50:54+0000",
            "content": "Added eclipse and maven configurations. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13088429",
            "date": "2011-08-21T19:12:05+0000",
            "content": "In the Maven configuration, moved the velocity dependencies from solr-core to solr-velocity. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13088430",
            "date": "2011-08-21T19:13:31+0000",
            "content": "Erik, I think the velocity jars should be moved from solr/lib/ to solr/contrib/velocity/lib/ - most other Solr contribs have their own lib/ dir.  What do you think? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13088842",
            "date": "2011-08-22T17:44:03+0000",
            "content": "Ugh, this got more complicated thanks to core tests relying on the example config. Running on a clean (ant clean) trunk, tests that rely on the example solrconfig.xml fail because the Velocity contrib JAR isn't built yet. I guess the other contribs don't fail because their componentry is lazy loaded but response writers aren't.\n\nthere's two aspects of this to worry about, it's not really clear to me if only one/both apply here...\n\n1) testing the contrib.  if the majority of the tests that exist for the velocity writer are dependent on using the example, then those relaly need to be refactored into the contrib (if that's where the code is going)\n2) testing the example.  the was the original point of those tests \u2013 to verify that when users try to use the example, it will owrk (many tests have start abusing those configs unneccessarily, but that's the original point) ...\n\n#2 is a lot harder to find a \"good\" solution for.  on the one hand, adding a lazyload option to response writers gets us out of the dependency whole of testing the example w/o the velocity writer being built; but it side steps the true goal of saying \"will the example work\".  It seems like the three possible solutions are:\na) ignore the problem\nb) use lazyloading; leave the \"core\" example tests only testing \"core\" things; add a velocity contrib test that also tests the example this time explicitly excersizing the velocity writer and testing that that piece of the example configs works\nc) refactor all of the example tests into a new contrib/module/whatever that depends on all of hte contribs.\n\neither B or C seem like the best long term approach, and would also be a pattern that could be applied to the other contribs used in the example via lazy loading.  B feels dirtier, but might actually be the wisest choice since it would help us test more permutations (a user tries the example with only the core solr stuff, a user tries the example adding velocity plugin, etc..)\n\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13088910",
            "date": "2011-08-22T18:37:16+0000",
            "content": "why are B and C mutually exclusive?\n\nCant the example/example tests that actually test the example be in a contrib/module/whatever (since its really more like integration tests), yet at the same time core tests only test core things and velocity contrib has a test config that tests its piece.\n\nObviously these won't all share the same exact config files but the example is meant to be modified, so its realistic right? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13088922",
            "date": "2011-08-22T18:48:54+0000",
            "content": "why are B and C mutually exclusive?\n\ni didn't mean to suggest that they were, we could certainly do both.\n\nObviously these won't all share the same exact config files but the example is meant to be modified, so its realistic right?\n\nyou lost me there ... they can use the exact same configs \u2013 that's kind of the point: testing the exact example configs as we ship them (with <lib/> declarations that point at dirs which may or may not contain jars depending on what contribs are built; and request handler / response writer declarations configured that use lazyloading to dynamic load things as needed.\n\ni mean \u2013 yes we could have tests that copy the example configs and modify them and test that those modifications still work, but that's not really the point.  the point is \"core features A,B,C should work with these example configs as is; and contrib feature X should also work with the same example configs (unmodified) as long as contrib-X is build and in dir-X; and contrib feature Y should also work with the same example configs (unmodified) as long as contrib-Y is build and in dir-Y; etc...\" "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13088929",
            "date": "2011-08-22T18:55:47+0000",
            "content": "\nyou lost me there ... they can use the exact same configs \u2013 that's kind of the point: testing the exact example configs as we ship them (with <lib/> declarations that point at dirs which may or may not contain jars depending on what contribs are built; and request handler / response writer declarations configured that use lazyloading to dynamic load things as needed.\n\nOk: what I'm suggesting here is that core/contrib modules would still test what they do, only I think with \"minimal\" configs? This way its easier to debug, e.g. conceptually lower-level tests. But these tests still need to be realistic, e.g. include the <lib/> delcarations you refer to?\n\n\ni mean \u2013 yes we could have tests that copy the example configs and modify them and test that those modifications still work, but that's not really the point. the point is \"core features A,B,C should work with these example configs as is; and contrib feature X should also work with the same example configs (unmodified) as long as contrib-X is build and in dir-X; and contrib feature Y should also work with the same example configs (unmodified) as long as contrib-Y is build and in dir-Y; etc...\"\n\nRight: i see, so this 'integration' testing is a separate challenge from what I mentioned above. In this case we want to test the example with different configurations... but if we separate out these 'example' tests into something thats more suitable for integration testing perhaps we can setup just an environment like this? Maybe it would mimic the core/contrib structure in svn we have for the unit tests even... the only difference is the classpaths etc will be different?\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13088931",
            "date": "2011-08-22T18:58:13+0000",
            "content": "just a basic conceptual illustration of what i meant above, please don't read into the naming:\n\n\nsolr/core/... <-- unit tests for solr core\nsolr/contrib/velocity <-- unit tests for solr velocity\n...\n\nsolr/example-test/ <-- integration tests for example with only core configuration\nsolr/example-test/velocity <-- integration tests for example with velocity configuration\n...\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106367",
            "date": "2011-09-16T14:50:46+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13135394",
            "date": "2011-10-25T20:22:37+0000",
            "content": "I'm going to start making some commits on this issue.  I've re-done the work locally on a fresh trunk checkout just to make sure things are clean, and I'm not seeing the test failures I saw before.  Maybe some dependencies on the example environment were removed?   Or...?\n\nAnyway, I'll get this rolling in the next day or so and hopefully have this resolved then. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13136102",
            "date": "2011-10-26T16:48:00+0000",
            "content": "New patch that moves VrW to contrib/velocity and fixes the test issues.  I was wrong in my previous comment - the test issue is still present.  I worked around this using the enable flag for plugins, though this required a few uses of it in the test infrastructure.  Not terrible, but not ideal either.  Lazy loaded response writers would be better. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13136103",
            "date": "2011-10-26T16:50:43+0000",
            "content": "Same patch, just checking the ASL box this time! "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13136141",
            "date": "2011-10-26T17:42:45+0000",
            "content": "Here's a version of Erik's patch that assumes that the following svn move script has been run first:\n\n\nsvn mv --parents solr/core/src/java/org/apache/solr/response/VelocityResponseWriter.java solr/contrib/velocity/src/java/org/apache/solr/response/VelocityResponseWriter.java\nsvn mv --parents solr/core/src/java/org/apache/solr/response/SolrVelocityResourceLoader.java solr/contrib/velocity/src/java/org/apache/solr/response/SolrVelocityResourceLoader.java\nsvn mv --parents solr/core/src/java/org/apache/solr/response/SolrParamResourceLoader.java solr/contrib/velocity/src/java/org/apache/solr/response/SolrParamResourceLoader.java\nsvn mv --parents solr/core/src/java/org/apache/solr/response/PageTool.java solr/contrib/velocity/src/java/org/apache/solr/response/PageTool.java\nsvn mv --parents solr/core/src/test/org/apache/solr/velocity/VelocityResponseWriterTest.java solr/contrib/velocity/src/test/org/apache/solr/velocity/VelocityResponseWriterTest.java\nsvn mv --parents solr/core/src/test-files/solr/conf/velocity/VM_global_library.vm solr/contrib/velocity/src/test-files/velocity/solr/conf/velocity/VM_global_library.vm\nsvn rm solr/core/src/test-files/solr/conf/velocity\nsvn mv --parents solr/lib/velocity-* solr/contrib/velocity/lib/\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13136167",
            "date": "2011-10-26T18:02:33+0000",
            "content": "This version of the patch includes files that I forgot to 'svn add'.\n\nAlso, I've added Eclipse configuration.\n\nAll tests pass. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13136168",
            "date": "2011-10-26T18:03:23+0000",
            "content": "I will try the maven build and the IntelliJ IDEA build/test a little later today. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13136225",
            "date": "2011-10-26T19:01:21+0000",
            "content": "I've committed the move on trunk to contrib/velocity.\n\nI see this issue marked for 3.5 also, though is this really needed?  I personally am fine with this change being solely for 4.0. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13136244",
            "date": "2011-10-26T19:20:15+0000",
            "content": "I'll backport to branch_3x. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13136288",
            "date": "2011-10-26T19:55:04+0000",
            "content": "Trunk IntelliJ config works for me (rebuilding the project & running Velocity contrib tests).\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13136319",
            "date": "2011-10-26T20:23:42+0000",
            "content": "This patch contains the Maven configuration.\n\nCommitting shortly. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13136394",
            "date": "2011-10-26T21:18:44+0000",
            "content": "Erik, I was looking at the solrconfig.xml under test-files/, and I noticed that you have <luceneMatchVersion>LUCENE_40</luceneMatchVersion>, where in other contribs' test configurations, it's instead <luceneMatchVersion>${tests.luceneMatchVersion:LUCENE_CURRENT}</luceneMatchVersion>.  \n\nIs there any reason to hard code LUCENE_40 there (or LUCENE_34 on branch_3x, I guess)? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13136411",
            "date": "2011-10-26T21:27:40+0000",
            "content": "Oops fat fingered from mobile.  "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13136414",
            "date": "2011-10-26T21:29:11+0000",
            "content": "No reason to use any particular value.  Just copied another test config.  "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13136418",
            "date": "2011-10-26T21:31:03+0000",
            "content": "Okay, I'll change it. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13136440",
            "date": "2011-10-26T21:39:09+0000",
            "content": "Backported to branch_3x. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13157831",
            "date": "2011-11-27T12:36:02+0000",
            "content": "Bulk close after 3.5 is released "
        }
    ]
}