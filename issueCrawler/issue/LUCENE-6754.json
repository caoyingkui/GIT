{
    "id": "LUCENE-6754",
    "title": "Optimize IndexSearcher.count for simple queries",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "IndexSearcher.count currently always create a collector to compute the number of hits, but it could optimize some queries like MatchAllDocsQuery or TermQuery.",
    "attachments": {
        "LUCENE-6754.patch": "https://issues.apache.org/jira/secure/attachment/12751544/LUCENE-6754.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14705427",
            "author": "Adrien Grand",
            "date": "2015-08-20T17:56:45+0000",
            "content": "Here is a patch. count(MatchAllDocsQuery) returns reader.numDocs() and count(TermQuery) returns the sum of the doc freqs if there are no deletions. "
        },
        {
            "id": "comment-14727259",
            "author": "ASF subversion and git services",
            "date": "2015-09-02T12:36:38+0000",
            "content": "Commit 1700791 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1700791 ]\n\nLUCENE-6754: Optimized IndexSearcher.count for simple queries. "
        },
        {
            "id": "comment-14727277",
            "author": "ASF subversion and git services",
            "date": "2015-09-02T12:48:04+0000",
            "content": "Commit 1700793 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1700793 ]\n\nLUCENE-6754: Optimized IndexSearcher.count for simple queries. "
        },
        {
            "id": "comment-14727290",
            "author": "Uwe Schindler",
            "date": "2015-09-02T12:55:57+0000",
            "content": "Hi, thanks for committing this. I am just not really happy about the instanceof checks. It also makes it impossible for custom queries to maybe improve this. How about adding a method to the query class that can be \"optionally\" implemented to return a count? By default it may throw exception or alternative use the collector approach. Queries like term query may implement this count methods, if they have some optimized way to do this.\n\nAn alternative would be to let the Weight have the new method. TermWeight would have its statistics already and could implement TermWeight#count() easily. if there are deletions, weight would call super.count().\n\nQueries like ConstantScoreQuery could delegate to the inner queries. "
        },
        {
            "id": "comment-14727307",
            "author": "Adrien Grand",
            "date": "2015-09-02T13:06:13+0000",
            "content": "How about adding a method to the query class that can be \"optionally\" implemented to return a count?\n\nI would really like to avoid adding new methods for that.\n\nThere is another change that I have been thinking about recently, that would add a `boolean needsScores` parameter to Query.rewrite. This could be useful eg. to flatten boolean queries when scores are not needed so that we make a better use of the cost API. In the context of this issue, this means that queries could rewrite to a MatchAllDocsQuery or to a TermQuery if scores are not needed so that this optimization would apply. Would it work for you? Unwrapping CSQ would not be necessary anymore as a CSQ would return the inner query in Query.rewrite if scores are not needed. "
        },
        {
            "id": "comment-14727314",
            "author": "Uwe Schindler",
            "date": "2015-09-02T13:15:24+0000",
            "content": "Let me think about the rewrite logic...! \n\nAbout the other problem: I hate those instanceof checks and they always remind me about Highlighter - which is a desaster! I was thinking about my previous mail, I tend to think that not Query, but Weight would just get this method. Weight already has an optimization for Bulk scoring, so I see no issue in adding a \"bulk/smart/fast counting\", if there is a default implementation available that all queries not taking care inherit automatically. Queries that really would like to implementation are free to do so, but there is no requirement.\n\nI just wanted to start the discussion about this on the issue. Unfortunately I was a bit late, but does not matter. I can make a proposal if others think the same. "
        }
    ]
}