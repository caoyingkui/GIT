{
    "id": "LUCENE-3474",
    "title": "pass liveDocs Bits down in scorercontext, instead of Weights pulling from the reader",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spinoff from LUCENE-1536, this would allow filters to work in a more flexible way (besides just cleaning up)",
    "attachments": {
        "LUCENE-3474.patch": "https://issues.apache.org/jira/secure/attachment/12496935/LUCENE-3474.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-28T22:40:53+0000",
            "content": "updated patch with javadocs for the acceptDocs, and i had neglected the MatchAllDocsScorer.\n\nall tests pass ",
            "author": "Robert Muir",
            "id": "comment-13116866"
        },
        {
            "date": "2011-09-28T22:49:18+0000",
            "content": "Patch looks great!  Nice to separate this from LUCENE-1536; after this patch, LUCENE-1536 will be tiny! ",
            "author": "Michael McCandless",
            "id": "comment-13116872"
        },
        {
            "date": "2011-09-29T08:13:41+0000",
            "content": "Super, lets go ahead and commit this. ",
            "author": "Chris Male",
            "id": "comment-13117120"
        },
        {
            "date": "2011-09-29T08:24:48+0000",
            "content": "I kind of liked the ScorerContext#topScorer(boolean) builder like pattern which is way less verbose than using ctors. Can we add those methods back and force a copy on setAcceptsDocs(Bits) that way we don't need to copy all settings on an incoming context. ",
            "author": "Simon Willnauer",
            "id": "comment-13117129"
        },
        {
            "date": "2011-09-29T08:30:52+0000",
            "content": "I really hated that thing: Its strange and unintuitive: half the code to the class is explaining the \"pattern\" that the class uses and how to use it.\n\nNot good! ",
            "author": "Robert Muir",
            "id": "comment-13117133"
        },
        {
            "date": "2011-09-29T08:43:02+0000",
            "content": "Its strange and unintuitive: half the code to the class is explaining the \"pattern\" that the class uses and how to use it.\nvery straight forward IMO. Well since it used to be that way we should keep it. Just changing stuff like this for \"taste\" reasons is not acceptable for me though. We already figured out that we have the \"builder\" vs. \"no-builder\" camp have here in Lucene and I don't want to fight this every time something like that comes up. \n\nI really hated that thing\n\nthats fine I hate the ctor verbosity so we are deadlocking here. Again   ",
            "author": "Simon Willnauer",
            "id": "comment-13117144"
        },
        {
            "date": "2011-09-29T08:47:56+0000",
            "content": "\nJust changing stuff like this for \"taste\" reasons is not acceptable for me though.\n\nReally? we can't write patches that change code in trunk any more?  ",
            "author": "Robert Muir",
            "id": "comment-13117149"
        },
        {
            "date": "2011-09-29T08:49:54+0000",
            "content": "By the way, I didnt change this for taste reasons.\n\nI want the Bitset to be required to build a ScorerContext (Note both ctors take it!)\n\nSo this pretty much blew the existing \"pattern\" out of the water. ",
            "author": "Robert Muir",
            "id": "comment-13117150"
        },
        {
            "date": "2011-09-29T08:52:16+0000",
            "content": "I want the Bitset to be required to build a ScorerContext (Note both ctors take it!)\n\nrename def() to create(Bits), done. ",
            "author": "Simon Willnauer",
            "id": "comment-13117152"
        },
        {
            "date": "2011-09-29T08:55:19+0000",
            "content": "So this pretty much blew the existing \"pattern\" out of the water.\n\nboolean boolean params are just another start of a big mess here. the named builder like methods here make it very explicit what you are doing here. If we gonna add more which is likely we gonna end up with more boolean params people need to get in the right order. The chance to introduce an error here is way less than with a ctor. ",
            "author": "Simon Willnauer",
            "id": "comment-13117154"
        },
        {
            "date": "2011-09-29T08:59:56+0000",
            "content": "Simon i have never seen code with this pattern before.\n\nThe chance to introduce error with that crazy-builder-like-thing is tremendous, because its unnatural.\n(In fact i think i spotted some things doing this patch, for other issues)\n\nWhat is wrong with normal java objects? ",
            "author": "Robert Muir",
            "id": "comment-13117158"
        },
        {
            "date": "2011-09-29T09:09:32+0000",
            "content": "I don't wanna fight this again, its too demanding for me. Go for it I don't think my opinion counts here obviously. I don't want to be in your way really. Sorry for raising an objection on the patch. ",
            "author": "Simon Willnauer",
            "id": "comment-13117159"
        },
        {
            "date": "2011-09-29T09:13:29+0000",
            "content": "\nGo for it I don't think my opinion counts here obviously\n\nWhy? because I disagree with you? Thats pretty natural man, normal for people to disagree on opinions.\n\nits not like anyone has committed any shit here, so quit overreacting. ",
            "author": "Robert Muir",
            "id": "comment-13117161"
        },
        {
            "date": "2011-09-29T09:19:57+0000",
            "content": "Mr. Muir: I also disagree with you. If this gets committed I will revert it - just as you did with Yonik in the past - if it blows me out of Lucene PMC/Lucene Committers, who cares. Sorry, this pattern is very simple and often used. ",
            "author": "Uwe Schindler",
            "id": "comment-13117162"
        },
        {
            "date": "2011-09-29T09:22:00+0000",
            "content": "Thats fine Uwe, we can hold search performance hostage over this broken builder pattern\n\nThis is gonna be great. ",
            "author": "Robert Muir",
            "id": "comment-13117163"
        },
        {
            "date": "2011-09-29T09:24:19+0000",
            "content": "\nSorry, this pattern is very simple and often used.\n\nWhere? For example where in the JDK uses this .def() etc? ",
            "author": "Robert Muir",
            "id": "comment-13117165"
        },
        {
            "date": "2011-09-29T09:25:32+0000",
            "content": "Does Simon's suggestion of replacing def() with create(Bits) solve the mandatory Bits issue? Can we just fix the broken parts of the builder instead of outright replacing it? ",
            "author": "Chris Male",
            "id": "comment-13117166"
        },
        {
            "date": "2011-09-29T09:25:57+0000",
            "content": "Why? because I disagree with you? Thats pretty natural man, normal for people to disagree on opinions.\nbecause I don't see that you are going away from your opinion whatever I say. You made clear you don't want to have any builder pattern in lucene so what is the point of discussing then. I need to put up my own patch which uses the builder to make my objections being in the patch obviously which is not what I am used to. Usually we try to find a compromise and by iterating, right? Each time this pattern comes up there is no way that you move a tiny bit from your opinion just because you don't like it. Well I don't like things people suggest from a code syte perspective but it makes sense very often, so I change it. I don't see why this needs to go for rounds and rounds of fighting here. We did this for a reason when ScorerContext has introduced, it served as a little DSL on top of it enforcing immutability. if you want to have Bit mandatory you should just do something like ScorereContext.create(delDocs).topLevel(true).outOfOrder(false) which makes very clear what you want rather than new ScoreContext(delDocs, true, false) and we gonna have more boolean params here in the future. ",
            "author": "Simon Willnauer",
            "id": "comment-13117167"
        },
        {
            "date": "2011-09-29T09:31:23+0000",
            "content": "Where? For example where in the JDK uses this .def() etc?\n\nthose are similar patterns:\n\nhttp://download.oracle.com/javase/1.5.0/docs/api/java/lang/ProcessBuilder.html\nhttp://download.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html\nhttp://download.oracle.com/javase/6/docs/api/javax/sql/DataSource.html\n\nwe use def() as a shortcut for default() (keyword though) we should rather use create(Bits) IMP ",
            "author": "Simon Willnauer",
            "id": "comment-13117171"
        },
        {
            "date": "2011-09-29T09:32:17+0000",
            "content": "\nbecause I don't see that you are going away from your opinion whatever I say.\n\nThats right, I think i'm allowed to have my own opinion?\n\nAll I did was upload a patch: I'm in no rush to commit here, we can just leave the issue open until everyone is happy.\n ",
            "author": "Robert Muir",
            "id": "comment-13117172"
        },
        {
            "date": "2011-09-29T09:34:56+0000",
            "content": "we can hold search performance hostage over this broken builder pattern\n\nYou really think that additional method calls and Eden objects on highest level (which are called when creating scorers, not when scorers are consumed) will slowdown your search? Hey, program your stuff in C/C++ and use CLucene in future.\n\nAh by the way, recode all toString() methods anywhere in Lucene and rip StringBuilder! ",
            "author": "Uwe Schindler",
            "id": "comment-13117173"
        },
        {
            "date": "2011-09-29T09:36:51+0000",
            "content": "\nYou really think that additional method calls and Eden objects on highest level (which are called when creating scorers, not when scorers are consumed) will slowdown your search?\n\nNo, I don't. \n\nI mean that we can hold our filter execution performance hostage over this internal API, since you have clearly voiced you will revert my commit if i commit the patch. ",
            "author": "Robert Muir",
            "id": "comment-13117177"
        },
        {
            "date": "2011-09-29T09:38:56+0000",
            "content": "I mean that we can hold our filter execution performance hostage over this internal API, since you have clearly voiced you will revert my commit if i commit the patch.\n\nAre you saying you wouldn't support an updated version of your patch that went back to builder style? ",
            "author": "Chris Male",
            "id": "comment-13117178"
        },
        {
            "date": "2011-09-29T09:40:09+0000",
            "content": "\nthose are similar patterns:\n\nhttp://download.oracle.com/javase/1.5.0/docs/api/java/lang/ProcessBuilder.html\nhttp://download.oracle.com/javase/6/docs/api/java/sql/PreparedStatement.html\nhttp://download.oracle.com/javase/6/docs/api/javax/sql/DataSource.html\n\nActually none of those are similar at all.\n\nNone of those create a new object on each setter, they are normal Builders.\n\nThis ScorerContext is something different entirely. ",
            "author": "Robert Muir",
            "id": "comment-13117179"
        },
        {
            "date": "2011-09-29T09:40:34+0000",
            "content": "\nAre you saying you wouldn't support an updated version of your patch that went back to builder style?\n\nThat's correct. ",
            "author": "Robert Muir",
            "id": "comment-13117180"
        },
        {
            "date": "2011-09-29T09:43:41+0000",
            "content": "\nAre you saying you wouldn't support an updated version of your patch that went back to builder style?\n\nThat's correct.\n\nI simply don't suport your patch - deadlock. ",
            "author": "Uwe Schindler",
            "id": "comment-13117182"
        },
        {
            "date": "2011-09-29T09:55:14+0000",
            "content": "Is there anything people are prepared to compromise on here? ",
            "author": "Chris Male",
            "id": "comment-13117191"
        },
        {
            "date": "2011-09-29T09:57:07+0000",
            "content": "I'd be happy with flags instead of the booleans. ",
            "author": "Robert Muir",
            "id": "comment-13117192"
        },
        {
            "date": "2011-09-29T12:50:33+0000",
            "content": "I'm not one for rushing discussions but we're getting close with LUCENE-1536 which this is a large chunk of.  Anyway we can come to an agreement here? ",
            "author": "Chris Male",
            "id": "comment-13117262"
        },
        {
            "date": "2011-09-29T13:09:29+0000",
            "content": "It would be nice if we could discuss the builder pattern (and other\nheated disagreements) without quickly degrading into deadlock.  We\nneed to be able to work through our disagreements so we can get back\n\"real\" improvements to Lucene and Solr.  In this case LUCENE-1536 is\nan enormous performance gain.\n\nNet/net I don't like the use of the builder pattern for ScorerContext.\nIt seems like overkill: we only have 3 settings here.  Even by the\nproponents of the builder pattern this is overkill?\n\nI think chained setters are less readable (see LUCENE-2308).\n\nI do agree 2 booleans in a row is asking for sneaky trouble; we can\nadd .setX instead (these fields need not be final)?  Or the int flags\nto the ctor is a great solution too (I think we should do this for\nFieldType as well).\n\nNet/net plain old boring java object would work fine here.\n\nAnd, in general, I don't think we should let the builder pattern seep\ninto Lucene, for the simple reason that it's obviously controversial.\nThis is no different from any other controversial change in\nopen-source...\n\nAlso, one can always make a shim layer on top of Lucene that exposes\nbuilder APis for everything?  QueryParser, *Query, *Field/Document,\nIR, IW, merge policies/schedulers, etc., all could be cutover to\nbuilder APIs \"up above\" right?  If we can safely apply the builder\npattern \"on top\", ie it need not pollute Lucene's core, why not do\nthat?  We should only make core changes that are not controversial or\nmust be done in core. ",
            "author": "Michael McCandless",
            "id": "comment-13117270"
        },
        {
            "date": "2011-09-29T13:20:20+0000",
            "content": "I think int flags would work well?  We only have 2 flags here, plus\nrequired acceptDocs.\n\nThe vast majority of cases use the default flags:\n\n\n  new ScorerContext(acceptDocs);\n\n\n\nAnd then for the few places that change the flags it'd be something\nlike this:\n\n\n  new ScorerContext(acceptDocs, ScorerFlags.TOP_LEVEL);\n\n\n\nWe keep final-ness for the fields.\n\nThis seems like a great solution?\n\nFailing that.... another option would be to just stop using an object\nhere at all, and go back to passing explicit flags down to\nWeight.scorer.\n\nIn fact one benefit of this is we get stronger typing, ie, we force at\ncompilation time all Scorer impls to be fixed to handle the new\nsetting (vs today where a Scorer can easily silently be missed, thus\nadding latent bug).\n\nThis means on any addition to the scorer API (eg I've long wanted for\ncaller to declare up front whether they need scores computed vs \"only\nmatching\", ie MTQWF and CSQ would pass false), we break the API.  But\nI think that's actually fine, even in 3.x: making your own Scorer is\nvery expert. ",
            "author": "Michael McCandless",
            "id": "comment-13117276"
        },
        {
            "date": "2011-09-29T13:22:44+0000",
            "content": "I don't like the idea of shying away from a change just because it's controversial.  Sometimes its necessary to shake things up with new ideas.  \n\nWhile I do agree that it'd be better if we could get past these arguments and make the real changes, you seem to be asking for those who advocate a builder like API here to compromise and for those who don't want such an API, to not? Thats a tough pill to swallow.\n\nAlso, this API feels to me to be a lot more internal, so whether or not builders could be built on top of more outward facing concepts like QueryParsers, Field/Document etc, seems a different issue? ",
            "author": "Chris Male",
            "id": "comment-13117289"
        },
        {
            "date": "2011-09-29T13:55:59+0000",
            "content": "Lucene went a long time without builder APIs, if you like builders, you can do them in your own code (there is no need for us to enforce such antipatterns)\n\nThis API for ScorerContext is an internal API. the intended consumer is a lucene developer (e.g. guys like me). Its not for average joe... especially in 4.x when you can more easily tweak the scoring API, I think very very few users will write custom queries.\n\nWe don't need to design APIs to baby lucene committers about this stuff, especially about two booleans, but like I said I wouldn't get too upset about flags (even though personally i think its overkill too). ",
            "author": "Robert Muir",
            "id": "comment-13117302"
        },
        {
            "date": "2011-09-29T14:04:09+0000",
            "content": "Also, given the attitude presented here towards me uploading a patch (threatening to revert my commits no matter what etc), you can be damned sure I am going to be a total asshole about builder APIs.\n\nBy taking such a ridiculous stance on this internal API you have sealed the fate of builders across the codebase.\n\nInstead of looking at the actual use case and thinking 'does this need a builder' you assume I'm completely against them: actually I don't have such a blanket opinion: if you look at some classes I have added to lucene you will see that I have even added builders myself... where it makes sense!\n\nBut just because a class has two booleans doesnt mean that it needs a Builder: thats my problem, when you use a pattern as a hammer across the board like this then it becomes an antipattern, because its the wrong solution.\n\nIn some cases Builder makes sense: I think just not here... but this doesn't matter now. I'm gonna scream about builders now even when they really are a good fit.\n\nNice work. ",
            "author": "Robert Muir",
            "id": "comment-13117306"
        },
        {
            "date": "2011-09-29T14:18:30+0000",
            "content": "I actually agree with a lot of what you're saying here Robert.  Using the right approach at the right time is key and here you've definitely made a good argument for why we should use the constructor + boolean approach.\n\nI hope we can continue to have discussions on a case by case basis, about what approaches are best? ",
            "author": "Chris Male",
            "id": "comment-13117315"
        },
        {
            "date": "2011-09-29T14:28:31+0000",
            "content": "I'm gonna scream about builders now even when they really are a good fit. Nice work.\n\nRobert, you're blaming Uwe for your own future bad behavior when he threatens to use your tactics against you?  Sweet. ",
            "author": "Steve Rowe",
            "id": "comment-13117319"
        },
        {
            "date": "2011-09-29T14:29:37+0000",
            "content": "\nI don't like the idea of shying away from a change just because it's controversial. Sometimes its necessary to shake things up with new ideas.\n\n+1 I'm all for pushing new ideas that make good, hard improvements to\nLucene (like LUCENE-1536).\n\nyou seem to be asking for those who advocate a builder like API here to compromise and for those who don't want such an API, to not? Thats a tough pill to swallow.\n\nI am in fact asking for that, because largely Lucene does not adopt\nthe builder pattern today, the builder pattern is relatively new and\ntrendy, vs Lucene's codebase, and now we see it seeping in, in various\nplaces/patches/etc.  Not only is it new, it's also controversial\namongst the committers.\n\nI think it's also reasonable because you can naturally layer the\nbuilder API on top of a simple java APIs, but not really vice/versa.\nOne could create a very nice shim \"Lucene builder APIs\" library.\nIt need not be in our core APIs.\n\nThis way apps that love the builder pattern can use the builder shim;\nthose that don't like them can use the plain java APIs.\n\nAs other \"popular\" patterns try to seep into Lucene, I think we should\nalso take a cautious stance: we should not apply a pattern just\nbecause it exists and has become popular; we should see strong\ntechnical benefits to Lucene before doing so.\n\nSo, stepping back, \"adopting the builder pattern in Lucene's APIs\" is\nthe overall change I'm talking about, and I think that is a big\nchange.\n\nAlso, this API feels to me to be a lot more internal, so whether or not builders could be built on top of more outward facing concepts like QueryParsers, Field/Document etc, seems a different issue?\n\nRight this is an internal API, but for example if you build custom\nqueries/scorers you can still use a builder shim on top of Lucene's\ncore ScorerContext.  It could be part of this builder shim library\ntoo.\n\nReally \"Lucene should adopt the builder pattern\" to me is a big\nchange, and it's a codebase-wide, global decision.  It's actually very\nsimilar to passionate disagreements on whitespace, and this is why we\n(thankfully) have a hard standard on what our whitespace looks like.\nOtherwise we'd be having huge arguments about whether parens should be\nsurrounded by whitespace on every patch.\n\nSo net/net I don't think Lucene should adopt the builder pattern, for\ninternal or external APIs.  Just build a shim library on top. ",
            "author": "Michael McCandless",
            "id": "comment-13117320"
        },
        {
            "date": "2011-09-29T14:34:32+0000",
            "content": "+1 Mike.  I agree. ",
            "author": "Chris Male",
            "id": "comment-13117323"
        },
        {
            "date": "2011-09-29T14:45:44+0000",
            "content": "you seem to be asking for those who advocate a builder like API here to compromise and for those who don't want such an API, to not? Thats a tough pill to swallow.\nI can swallow tough pills so +1 - I think this pill is going to change a lot for me on how I see this project and how I feel to contribute. \n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13117331"
        },
        {
            "date": "2011-09-29T14:48:26+0000",
            "content": "\nFailing that.... another option would be to just stop using an object\nhere at all, and go back to passing explicit flags down to\nWeight.scorer.\n\nThis is interesting for discussion too: because a compile-time break is \"better\" than a runtime break I think in cases of changes to query/weight/scorer?\n\nLike we can look at a compile-time-break as a feature: if we add a new thing (e.g. imagine adding this bitset after the fact), its crap for us to say 'but we didnt break backwards compatibility' when in fact you really do need to change your code! ",
            "author": "Robert Muir",
            "id": "comment-13117334"
        },
        {
            "date": "2011-09-29T14:48:48+0000",
            "content": "So net/net I don't think Lucene should adopt the builder pattern, for internal or external APIs. Just build a shim library on top.\n\nLet's start with telescopic ctors again, I am a fan of them! And non-final fields are the best I can think of! And don't forget freeze(), we should now freeze all development instead and make our opinions guarded by hotspot bugs.\n\nI will no longer discuss here, I will do something else, more productive, beyond Lucene. ",
            "author": "Uwe Schindler",
            "id": "comment-13117336"
        },
        {
            "date": "2011-09-29T14:56:48+0000",
            "content": "This is interesting for discussion too: because a compile-time break is \"better\" than a runtime break I think in cases of changes to query/weight/scorer?\n\nI agree.  The APIs of Query/Weight/Scorer feel to me to be so important that we should be very wary when making changes, but when we do want to make changes (and we should) then being explicit that something has changed and that people need to look carefully at the new API, seems beneficial.\n\nAt the same time the benefits of the Contexts was that we could more easily make API changes.  But perhaps with these classes some reluctance is beneficial?\n\nWhat would the signatures look like if we dumped ScorerContext? ",
            "author": "Chris Male",
            "id": "comment-13117342"
        },
        {
            "date": "2011-09-29T14:59:13+0000",
            "content": "\nAt the same time the benefits of the Contexts was that we could more easily make API changes. But perhaps with these classes some reluctance is beneficial?\n\nBut I think this is a downside here, if we add some new flag (e.g. acceptedDocs) its important for you to change your code.\nThe context gives you a false warm-fuzzy feeling: pretend we already had ScorerContext and we committed this issue:\nthen your custom query continues to work fine, until you use a filter and its silently wrong!\n\n\nWhat would the signatures look like if we dumped ScorerContext?\n\nLike Lucene 3.x: IR, boolean, boolean, Bits ",
            "author": "Robert Muir",
            "id": "comment-13117346"
        },
        {
            "date": "2011-09-29T15:02:58+0000",
            "content": "\nBut I think this is a downside here, if we add some new flag (e.g. acceptedDocs) its important for you to change your code.\nThe context gives you a false warm-fuzzy feeling: pretend we already had ScorerContext and we committed this issue:\nthen your custom query continues to work fine, until you use a filter and its silently wrong!\n\nAgreed.\n\nLike Lucene 3.x: IR, boolean, boolean, Bits\n\nDo we have any default value issues or anything with those booleans? ",
            "author": "Chris Male",
            "id": "comment-13117347"
        },
        {
            "date": "2011-09-29T15:07:01+0000",
            "content": "No, I think the scorercontext was geared at us being able to make changes without breaking the API: After\nMike's comment the more I think about it I think this was a bad idea... its being used here like Solr's NamedList\nhammer...\n\nI think we should keep type safety on the Q/W/S apis to avoid traps... adding Bits like this to a ScorerContext\nis a great example where we 'break backwards compatibility' in a sneaky way... far better to have a compile break.\n\nSo, +1 to go nuclear on ScorerContext completely. ",
            "author": "Robert Muir",
            "id": "comment-13117352"
        },
        {
            "date": "2011-09-29T15:10:33+0000",
            "content": "Can you want to put together a patch to that regard?  I'm definitely +1 for the idea at the moment. ",
            "author": "Chris Male",
            "id": "comment-13117354"
        },
        {
            "date": "2011-09-29T15:19:36+0000",
            "content": "\nBut I think this is a downside here, if we add some new flag (e.g. acceptedDocs) its important for you to change your code.\nThe context gives you a false warm-fuzzy feeling: pretend we already had ScorerContext and we committed this issue:\nthen your custom query continues to work fine, until you use a filter and its silently wrong!\n\nActually I think this is a serious problem with what we have today?\n\nIt's really awful/dangerous if on upgrade, silently, filtering stops working against your custom Query.\n\nIt's also awful if we internally mess up and miss a Query that should have been fixed to handle .acceptedDocs, which could easily happen today.\n\nOK I think we should just go back to passing the arguments directly, noting that this API is internal, so that custom queries out there will get a hard compile-time break, not silently get the wrong results, when there's an important change here.  It's too dangerous to use a context object. ",
            "author": "Michael McCandless",
            "id": "comment-13117359"
        },
        {
            "date": "2011-09-29T15:20:24+0000",
            "content": "sure, I'd be happy too... was gonna wait a little bit to see if anyone grossly objected.\n\nI still don't like the fact this dodges the builder discussion completely, but again my real opinion for the record:\n\n\tI myself have added builders to lucene:\n\n\n\tPrefixCodedTerms.Builder: http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/PrefixCodedTerms.java\n\tSynonymMap.Builder: http://svn.apache.org/repos/asf/lucene/dev/trunk/modules/analysis/common/src/java/org/apache/lucene/analysis/synonym/SynonymMap.java\n\n\n\tPretty sure Mike added FST.Builder too!\n\tIn these cases i think builder is appropriate: its building a complex thing up thru a series of add()s or whtaever and then finalizing into an immutable thing (trie or FST).\n\tmy problems with Builder are I feel its only appropriate if you are actually Building something. I dont think having 2 booleans counts as 'building', and I().dont().want().lucenes().code().to().read().like().this() ... i think chaining only makes sense in certain cases like StringBuilder, but NOT for building an FST for example.\n\tThe builders i mentioned don't create objects on every add() or set(), and they aren't going to be in anyone's tight loop, so I think they make perfect sense.\n\n\n\nSo really my opinion on Builders is no different than my opinion on ArrayList: you use them when its the appropriate solution and when it makes sense... I think thats when you are actually building stuff. ",
            "author": "Robert Muir",
            "id": "comment-13117360"
        },
        {
            "date": "2011-09-29T15:29:17+0000",
            "content": "I think its a good idea to go ahead and put a patch together so we can discuss it directly. ",
            "author": "Chris Male",
            "id": "comment-13117367"
        },
        {
            "date": "2011-09-29T16:30:21+0000",
            "content": "patch with the type-safe API and nuking ScorerContext ",
            "author": "Robert Muir",
            "id": "comment-13117405"
        },
        {
            "date": "2011-09-29T16:36:29+0000",
            "content": "by the way, this worked well for us already: the compile-break found some sneaky little scorers using their own deletedDocs instead of the acceptDocs.\n\nIdeally before we switch on any filter optimizations, we can hack up AssertingIndexSearcher to randomly use Bits/Filter in different ways to flush out lots of problems in tests. ",
            "author": "Robert Muir",
            "id": "comment-13117412"
        },
        {
            "date": "2011-09-29T16:54:42+0000",
            "content": "+1 this is much better than anything else! compile time error is good here even if it makes it less comfortable for changes ie. bw break.  ",
            "author": "Simon Willnauer",
            "id": "comment-13117430"
        },
        {
            "date": "2011-09-29T18:12:58+0000",
            "content": "+1\n\nAnd it's awesome this already caught places where we were missing the acceptDocs cutover.  Bug averted  ",
            "author": "Michael McCandless",
            "id": "comment-13117492"
        },
        {
            "date": "2011-09-30T02:27:56+0000",
            "content": "I did a quick review:\n\n\n\tShould BooleanQuery.BooleanWeight.createConjunctionTermScorer() be passed the acceptDocs too? Its currently using context.reader.liveDocs.\n\n\n\nOtherwise, +1, we should maybe commit this and then spin off an issue for improving AssertingIndexSearcher? ",
            "author": "Chris Male",
            "id": "comment-13117830"
        },
        {
            "date": "2011-09-30T02:36:56+0000",
            "content": "Thanks Chris, good find.\n\n\nOtherwise, +1, we should maybe commit this and then spin off an issue for improving AssertingIndexSearcher?\n\nActually I think this will be more easily done in LUCENE-1536? e.g. if we add the suggested heuristic there, as a boolean protected expert method, subclasses can override the heuristic if they need... and AssertingIndexSearcher could just return random.nextBoolean()  ",
            "author": "Robert Muir",
            "id": "comment-13117835"
        },
        {
            "date": "2011-09-30T03:46:08+0000",
            "content": "Okay great.  Lets commit this then. ",
            "author": "Chris Male",
            "id": "comment-13117853"
        },
        {
            "date": "2011-09-30T03:55:03+0000",
            "content": "\nThis means on any addition to the scorer API (eg I've long wanted for\ncaller to declare up front whether they need scores computed vs \"only\nmatching\", ie MTQWF and CSQ would pass false), we break the API. But\nI think that's actually fine, even in 3.x: making your own Scorer is\nvery expert.\n\nJust as an FYI: we already have an issue open for that too: LUCENE-3331\n\nBut I don't think we will see real gains from that with StandardCodec/DocsEnum today? ",
            "author": "Robert Muir",
            "id": "comment-13117857"
        },
        {
            "date": "2011-09-30T12:48:20+0000",
            "content": "But I don't think we will see real gains from that with StandardCodec/DocsEnum today?\n\nRight, not yet (not until our enum impls are able to [efficiently] separately decode docs and docs+freqs), and so we can wait until then. ",
            "author": "Michael McCandless",
            "id": "comment-13118034"
        }
    ]
}