{
    "id": "LUCENE-5680",
    "title": "Allow updating multiple DocValues fields atomically",
    "details": {
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/index"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.9",
            "6.0"
        ]
    },
    "description": "This has come up on the list (http://markmail.org/message/2wmpvksuwc5t57pg) \u2013 it would be good if we can allow updating several doc-values fields, atomically. It will also improve/simplify our tests, where today we index two fields, e.g. the field itself and a control field. In some multi-threaded tests, since we cannot be sure which updates came through first, we limit the test such that each thread updates a different set of fields, otherwise they will collide and it will be hard to verify the index in the end.\n\nI was working on a patch and it looks pretty simple to do, will post a patch shortly.",
    "attachments": {
        "LUCENE-5680.patch": "https://issues.apache.org/jira/secure/attachment/12645451/LUCENE-5680.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14001054",
            "author": "Shai Erera",
            "content": "Patch add IndexWriter.updateDocValues(DocValuesUpdate...) API which acts basically like delDocs(Term...) or delDocs(Query...) under the hood. I kept the sugar updateNumeric/Binary for convenience.\n\nWhat this allows you to do is e.g. update atomically a set of numeric and binary fields. Also, I started by adding update(Term,Map<String,Long>) but chose this method since it allows both mixing numeric/binary as well as is easier to code (e.g. look at tests and how it's easier than creating a map). As a side-effect, this allows you to atomically update fields of different sets of documents, since each DocValuesUpdate has its own Term. I think that could be nice, but I don't mind for now to make sure the Term of all updates is the same (though, I don't see a reason to prevent it..). \n\nI started to migrate tests to the new API (those that rely on a field and control-field to assert a value), but haven't finished - I want to get some feedback on the API first. Also, I want to add tests that update numeric/binary DVs atomically (to exercise this capability). And I want to add tests that update different sets of docs atomically (i.e. different Term in each update).\n\nI'd appreciate some comments before I move on w/ the tests. ",
            "date": "2014-05-18T11:07:41+0000"
        },
        {
            "id": "comment-14001083",
            "author": "Shai Erera",
            "content": "I made a slight change to the reduce the API: instead of exposing the public Numeric/BinaryDVUpdate, I added a factory DVUpdate.createNumeric/Binary. Otherwise, someone might confuse and think that by extend DVU to e.g. SortedDVU, he can automagically update SortedDV fields. I also changed DVUpdate ctor to private. ",
            "date": "2014-05-18T12:41:45+0000"
        },
        {
            "id": "comment-14001244",
            "author": "Robert Muir",
            "content": "I don't think DocValuesFieldUpdate should become public, nor should it become a parameter in IW's api.\n\nI think whats wrong here is that these methods on indexwriter need to use Field api or something instead. this way the user just calls IW.update(new Term(\"id\", \"12345\"), new NumericDocValuesField(\"xyz\", 6)) and its similar to how they build a document initally versus a totally separate API. ",
            "date": "2014-05-18T22:46:26+0000"
        },
        {
            "id": "comment-14001296",
            "author": "Shai Erera",
            "content": "I think whats wrong here is that these methods on indexwriter need to use Field api or something instead\n\nI thought about it at some point, but I was worried it might suggest that you can pass whatever Field, even if the method is called updateDocValues(). If we have a DocValuesField base class for all DV field types, that might be better. Of course, even if we go w/ a Field..., we can document that only NDV and BDV fields are supported, and throw appropriate exception otherwise.\n\nI wanted to avoid having must-read-the-jdocs API, and DocValuesUpdate is the that or something instead that you mentioned. Note that it's NOT DocValuesFieldUpdate which is a heavier class, it's only DocValuesUpdate, which record only the term, field and value. What do you think? ",
            "date": "2014-05-19T00:45:09+0000"
        },
        {
            "id": "comment-14001607",
            "author": "Robert Muir",
            "content": "I don't think we should add this DocValuesUpdate class, sorry I'm -1 here.\n\nI'm already unhappy with the current .document api: tons of abstractions etc, but yet really screwed up for docvalues (they are represented as 'stored' her). This will be a large enough challenge to fix before 5.0: we don't need a second api to deal with as well. ",
            "date": "2014-05-19T11:49:12+0000"
        },
        {
            "id": "comment-14002744",
            "author": "Shai Erera",
            "content": "I started to implement an updateDocValues(Term, Field...), ensuring that the field's DVType is not null, and only NUMERIC and BINARY etc. and it worked, except for unsetting a value. Since NumericDocValuesField does not let you pass null as the value. We can add a ctor which takes a Long, and allow you to do that, but it looks odd I think? I haven't thought it through yet, perhaps you have another idea? ",
            "date": "2014-05-20T03:25:13+0000"
        },
        {
            "id": "comment-14002760",
            "author": "Robert Muir",
            "content": "Whats the value in allowing users to unset things here? I'm not sure of the use case. ",
            "date": "2014-05-20T04:03:31+0000"
        },
        {
            "id": "comment-14002928",
            "author": "Shai Erera",
            "content": "Well, first updateNumeric/BinaryDV() allows you to unset a value, and I think we should preserve that capability here. As for unsetting, this could be very useful e.g. for a \"saleprice\" field as well as any other field which is transient. I think you proposed the \"unset\" capability while I was working on LUCENE-5189, but I cannot find the reference .\n\nI agree we shouldn't bloat the API if unnecessary, and when I wrote the update(Term,Field...) version it looked very simple and tests even passed. So I think this direction is promising, but we should allow unsetting. Perhaps we can put somewhere a constant NumericDocValuesField UNSET = ...? Maybe it can be on IndexWriter .. the thing is, we don't need it for e.g. Binary, since they take a BytesRef and at least for now, allow passing a null value, but we can have a similar UNSET constant for binary too. ",
            "date": "2014-05-20T08:29:17+0000"
        },
        {
            "id": "comment-14003162",
            "author": "Robert Muir",
            "content": "I don't think i proposed unsetting \n\nI don't see how it provides anything over an explicit 'onsale' and 'saleprice' that you update atomically here, which will work easier in general for the search APIs (ranking etc)\n\nSo I really don't think this should drive the API at all, I'm still not seeing a use case. ",
            "date": "2014-05-20T12:38:36+0000"
        },
        {
            "id": "comment-14003524",
            "author": "Shai Erera",
            "content": "Patch contains the Field... vs DocValuesUpdate... variants side-by-side, with support for unsetting a field's value. To support that with the Field... method,  I added Field.setNumberValue(Number value) and a .createMissing static method to NumericDocValuesField. This now works.\n\nNow we have them side-by-side in a patch to review. ",
            "date": "2014-05-20T16:01:41+0000"
        },
        {
            "id": "comment-14007088",
            "author": "Robert Muir",
            "content": "A few concerns:\nwhy do we have both MISSING and createMissing? It seems only one is necessary.\n\nHow can we remove the confusion about MISSING, it wont work normally at index time. it only applies to updates right? This needs to either be clear in the API, or also recognized by XDocValuesWriter at index-time and treated as equivalent to null there, too. ",
            "date": "2014-05-23T12:22:50+0000"
        },
        {
            "id": "comment-14007092",
            "author": "Robert Muir",
            "content": "I'm gonna restate: I don't think we should allow updating values to missing.\n\nThere is no real use case for this, and it is absurdly complicated (it has completely hijacked this issue). ",
            "date": "2014-05-23T12:27:27+0000"
        },
        {
            "id": "comment-14007150",
            "author": "Shai Erera",
            "content": "why do we have both MISSING and createMissing? It seems only one is necessary.\n\nIt's because I didn't want to add a ctor to NDVField which takes a Long. And if the user will want to create that, by e.g. creating a new NDVField w/ dummy value, then call setNumberValue, it's possible. But then NDVField ctor will create a Long object out of the dummy value .. a waste.\n\nYou know what, perhaps we can leave unsetting through the atomic API out of the picture for now, and handle it when the need arises. Maybe we should also nuke that from the other updateXXXDocValue? I.e. if the need arises, we fix all of them, and make them consistent? ",
            "date": "2014-05-23T13:19:07+0000"
        },
        {
            "id": "comment-14008386",
            "author": "Shai Erera",
            "content": "Opened LUCENE-5706 to disallow unsetting values. I will handle it before this issue. ",
            "date": "2014-05-25T17:36:40+0000"
        },
        {
            "id": "comment-14011028",
            "author": "Shai Erera",
            "content": "Patch ports all tests to use the atomic updates. This removed the complexity in TestIWExceptions that we've added recently, since now each set of updates is either atomically applied or not. ",
            "date": "2014-05-28T11:31:56+0000"
        },
        {
            "id": "comment-14012065",
            "author": "Shai Erera",
            "content": "I think it's ready so if there are no objections I'll commit later today. ",
            "date": "2014-05-29T04:52:45+0000"
        },
        {
            "id": "comment-14012315",
            "author": "ASF subversion and git services",
            "content": "Commit 1598272 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1598272 ]\n\nLUCENE-5680: add aotmic DocValues updates ",
            "date": "2014-05-29T12:24:49+0000"
        },
        {
            "id": "comment-14012325",
            "author": "ASF subversion and git services",
            "content": "Commit 1598277 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1598277 ]\n\nLUCENE-5680: add aotmic DocValues updates ",
            "date": "2014-05-29T12:37:13+0000"
        },
        {
            "id": "comment-14012327",
            "author": "Shai Erera",
            "content": "Committed to trunk and 4x. ",
            "date": "2014-05-29T12:39:08+0000"
        }
    ]
}