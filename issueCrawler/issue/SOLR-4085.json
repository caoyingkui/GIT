{
    "id": "SOLR-4085",
    "title": "Commit-free ExternalFileField",
    "details": {
        "affect_versions": "4.1",
        "status": "Reopened",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Let's reload ExternalFileFields without commit!",
    "attachments": {
        "SOLR-4085.patch": "https://issues.apache.org/jira/secure/attachment/12553696/SOLR-4085.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13498329",
            "date": "2012-11-15T21:00:38+0000",
            "content": "pls find patch with test coverage\n\nKey design points:\n\n\tdoes not rely on file timestamp, just count number of reloads as a version\n\tversion is held by every externalfilefield key.\n\tevery FFValueSource receives current version timestam, and uses it for equality check - quite important for queryResultCache\n\t\n\taddresses stale cache entry problem. after field is reloaded new queries refers to it are not equal to the older ones that allows evict old entries from queryResultCache, etc\n\tdoesn't covers atomicity problem when main query refers to the same field twice, one of them can be reloaded after another one is already in use\n\tsupport warming after commit. file is read and later provides cache hits;\n\tconcurrent reloads (including lazy one) may lead to not really pleasant behavior. user should protect from such races externally anyway.\n\n "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13508114",
            "date": "2012-12-02T00:23:34+0000",
            "content": "Mikhail,\n\nI took a quick look at your patch and I liked the fact that you didn't need to modify files outside of ExternalFileField and FileFLoatSouce to support commit-free updates. On the other hand, because of the lack of atomicity and the problem with concurrent reloads, I think it should not be applied to Solr because it could lead to confusing behaviors. (This doesn't mean that your work isn't valuable. As stated on http://wiki.apache.org/lucene-java/HowToContribute#Contributing_your_work, even patchs that are not committed are useful to the community.) "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13508499",
            "date": "2012-12-03T06:29:33+0000",
            "content": "Adrien Grand,\nYour feedback is appreciated. To make this ticket even more valuable for community can we come through the particular points of confusing behavior, which you mention. Can you list them?\n\nI also want to wait until Alan Woodward leaves his feedback as a person who provided an interest to the subj.  \n\nThank you, guys "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13508629",
            "date": "2012-12-03T10:26:49+0000",
            "content": "To me ExternalFileField is a convenient (but hacky) way to map documents to floats values in a static index. I understand that it may need to support updates (ReloadCacheRequestHandler) in order to seldom fix values.\n\nCommit-free updates support however makes ExternalFileField look like the perfect candidate to support frequent document updates but I don't like the fact that it needs to read the whole file every time (with a java.io.Reader!) and resolve IDs against the top-level reader. Moreover the lack of atomicity makes it different from everything else we have in Lucene and Solr and I imagine people having a scoring function such as if (fieldA > 0) \n{ return fieldB / fieldA }\n else \n{ return 0 }\n: this might break badly if fieldA is an ExternalFileField and its valued is modified from 1 to 0 between the first and the second evaluation. I'm also a little worried about the problems you mentioned regarding concurrent reloads.\n\nBut on the other hand you didn't modify anything outside of ExternalFileField and FileFloatSource so it's perfectly fine with me if Alan or another committer decides this should be committed.\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13508703",
            "date": "2012-12-03T13:06:02+0000",
            "content": "\n\tI agree. For me EFF is a workaround until we have field updates, or updateable DocValues, which is my dream btw.\n\tThen, issue which you mention is \"delta reload\". At contrast to the other ones it's the simplest and even trivial task. It's a plain java coding actually, there is no challenge in lucene internals here!\n\t\n\t\tStraightforward silly approach is introducing \"delta file\" naming convention. i.e. external_rating_2012112812.txt will be \"patched\" by delta file external_rating_2012112812.delta etc.\n\t\tBut much more conscious approach is introduce ExternalDataAPI which will be backed onto current \"file\" impl and then can have few more efficient impls, supports delta updates. I think it can be the next step forward.\n\t\n\t\n\tif (fieldA > 0) \n{ return fieldB / fieldA }\n else \n{ return 0 }\n is an absolutely hit. Here I can only suggest to introduce  zeroProofDivision function. There is no easy way to fix it in Lucene, because search request has no context there, at contrast to solr where it can be handled at QParser. We can try to achieve it by tricky query \"warmer\", which will dedupe queries before passing them into Lucene search\n\tconcurrent reloads are not a EFF's sin. Someone can easily shoot the leg is start two dataimport processes in parallel, you know. Solr doesn't really protects from 'lifecycle' errors, like accidentally enabled \"autocommit\"\n\tdon't you think that Resolving the issue with such strict verdict can scare away other committers. Can you ping someone as well you expressed you point of view? I wanted to involve Yonik Seeley or Chris Hostetter (Unused), but hesitated to disturb them.\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13508713",
            "date": "2012-12-03T13:23:58+0000",
            "content": "I don't think this should be committed.\n\nThen its only a matter of time before people open bugs, saying X or Y doesn't work and that some synchronization or hacky stuff should be added because of this, or even just its tests breaking\nbecause of perfectly valid changes. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13508770",
            "date": "2012-12-03T14:42:15+0000",
            "content": "Hi Mikhail,\nAlthough I don't have time to review this patch right now, I think the general idea of this issue is fine.\nWe had a lack of atomicity with the date NOW in the past too, which was solved with a request-level thread local (SolrRequestInfo) "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13508789",
            "date": "2012-12-03T15:12:44+0000",
            "content": "Hi Mikhail,\n\nSorry for the radio silence, I've been snowed under recently.  I'll have a chance to have a proper look at this sometime this week.\n\nI agree with Adrien that we should probably address the concurrent updates issue though; EFF is atomically updated at the moment, so this change could break existing installations. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13508970",
            "date": "2012-12-03T19:39:43+0000",
            "content": "Robert Muir, I don't think this feature can be a fix for \"bugs, saying X or Y doesn't work\" it's about adding new ability. eg until updateable DocValues are delivered it's hardly possible to raise a bug \"can't update docvalues\", because it will be rejected 'by design'. Or I completely I misunderstood you.\n\nYonik Seeley aha. thanks. Initially I had a test enforces atomicity, achieve it for QParsers via SolrQueryRequest.context, but failed to provide it for query cache warming. I'm not so self-assured to introduce treadlocal, but now it's clear how to do that. \n\nAdrien Grand Alan Woodward pls consider my point: Solr doesn't protect if somebody want to shoot his leg off. let's we have fairly valid updateXml: \n\ndelQ *:* add-doc(1), add-doc(2),add-doc(3), commit \n\n you can send this sequence twice in different requests - everything will be ok. But if these requests overlaps in time, you've got \"an unpleasant behavior\" user will see some intermediate state. If I got it right and Solr doesn't protect from externally initiated race (only DIH somehow does it), should we care about \"intermediate state\" and wasteful reloads in EFF.\n\nColleagues, please articulate your expectation for concurrent reload, and if I'd be able to conquer with them I handle \"atomicity\" also. \n\nthanks "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13533401",
            "date": "2012-12-16T14:30:57+0000",
            "content": "by following Yonik Seeley advice I solved atomicity problem by using SolrRequestInfo <<ThreadLocal>>: have a look to new  testSearchSortAtomicityVsReload and testSearchAtomicityVsReload\n\nI moved TestExternalFileFieldReload to schema-eff.xml, unfortunately I needed to amend its' present usage ExternalFileFieldSortTest\n\nThe evil is in FileFloatSource.Cache.resetAllReaders(Objectkey) right now it warns when detects the race:\n\n\tone thread are loading the file version 333 lazily\n\tnew file version 334 is created (333 is still being loading)\n\treload request submitted, it places loading placeholder in cache and responses Ok. (333 is still being loading)\n\t333 load is over, it substitutes palceholder which was purposed for picking 334\n\tnew search see 333 not 334\n\n\n\nI don't think it's a blocker, for someone. Surprisingly right after clicking Attach, I realized that it's possible to address this race. Obviously efforts will payed for testing rather than impl itself. \nStay tuned. Looking forward for your feedback. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13533507",
            "date": "2012-12-16T20:36:12+0000",
            "content": "added spin on race between lazy file loading and reload request. not absolutely accurate, and efficient, but should be reliable enough. see testSearchReloadRace. now race looks like (it's a test log)\n\n \noassf.FileFloatSource.getFloats Loaded external value source external_test_make_a_pause_SOLR_4085_extf\noassf.FileFloatSource$ReloadFieldRequestHandler.handleRequestBody reloading field test_make_a_pause_SOLR_4085_extf\noassf.FileFloatSource$Cache.resetAllReaders WARNING concurrent lazy loading while reloading field: FileFloatSource.Key [field=test_make_a_pause_SOLR_4085_extf .. file will loaded again\noassf.FileFloatSource.getValues WARNING concurrent reload detected. load file again FileFloatSource.Key [field=test_make_a_pause_SOLR_4085_extf\noassf.FileFloatSource.getFloats Loaded external value source external_test_make_a_pause_SOLR_4085_extf\n\n \n\nrace detection has a false positive case, which can be easily fixed. see comment at FileFloatSource.getValues(). "
        }
    ]
}