{
    "id": "LUCENE-3945",
    "title": "we should include checksums for every jar ivy fetches in svn & src releases to verify the jars are the ones we expect",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Conversation with rmuir last night got me thinking about the fact that one thing we lose by using ivy is confidence that every user of a release is compiling against (and likely using at run time) the same dependencies as every other user.\n\nUp to 3.5, users of src and binary releases could be confident that the jars included in the release were the same jars the lucene devs vetted and tested against when voting on the release candidate, but with ivy there is now the possibility that after the source release is published, the owner of a domain where these dependencies are hosted might change the jars in some way w/o anyone knowing.  Likewise: we as developers could commit an ivy.xml file pointing to a specific URL which we then use for and test for months, and just prior to a release, the contents of the remote URL could change such that a JAR included in the binary artifacts might not match the ones we've vetted and tested leading up to that RC.\n\nSo i propose that we include checksum files in svn and in our source releases that can be used by users to verify that the jars they get from ivy match the jars we tested against.",
    "attachments": {
        "LUCENE-3945.patch": "https://issues.apache.org/jira/secure/attachment/12521187/LUCENE-3945.patch",
        "LUCENE-3945_trunk_jar_sha1.patch": "https://issues.apache.org/jira/secure/attachment/12521263/LUCENE-3945_trunk_jar_sha1.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-03T19:01:21+0000",
            "content": "#1: I know that Ivy attempts MD5 & SHA1 verification by default \u2013 but it does that verification against checksum files located on the server, so it only offers protection against corruption in transit, not against files deliberately modified on the server.\n\n#2 i realize that the maintainers of maven repos say \"all files are immutable\" and that this potential risk of malicious or accidental file changes exists for all maven users \u2013 but that's the choise of all maven users to accept that as a way of life.  I'm raising this issue only to point out a discrepancy between the \"confidence\" we use to be able to give people who download src releases, vs what we have currently with ivy. ",
            "author": "Hoss Man",
            "id": "comment-13245603"
        },
        {
            "date": "2012-04-03T19:02:33+0000",
            "content": "Here's a strawman suggestion for adding a SHA1 check to our custom LicenseCheckTask, it was inspired by some of the code in ant's <checksum/> task, but it's not as configurable (only supports one SHA1 and only the simplest file format)\n\nI put this code in LicenseCheckTask because:\n\n\tLicenseCheckTask already gets run when you use \"ant validate\" and that seems like the right place for it from a user perspective\n\tant's built in support for verifying checksums in the <checksum/> task will only set a property true/false if the checksum for a file doesn't match \u2013 even with -verbose, it won't tell you which file failed the checksum test, so it wasn't really suitable to adding to our \"ant validate\" target.\n\tif i added a new ShaCheckTast we would have to configure it to run over all the same files LicenseCheckTask is already run over.\n\n\n\nIf people want to pursue this, We can always refactor \u2013 either to generalize the name/description of of \"LicenseCheckTask\" or to refactor this out into it's own custom task (and do an extra jar crawl).\n\n(NOTE: current patch doesn't actually include the checksums themselves, so as is this will fail the build.  If we trust what \"ant resolve\" is pulling down right now, the files would be trivial for anyone to generate, but i would suggest being a little more diligent and and generating the SHA1s against what was committed in svn up until last week \u2013 except obviously where we've actually changed which jar/version we use because of the ivy work)\n\nComments? ",
            "author": "Hoss Man",
            "id": "comment-13245604"
        },
        {
            "date": "2012-04-03T19:11:18+0000",
            "content": "+1, we really need to do this. it can also detect ivy cache corrumption.\n\nits really unrelated to actually how we get the jars, thats an impl detail.\nwe should be checking that its the jar we tested against, or fail hard. ",
            "author": "Robert Muir",
            "id": "comment-13245615"
        },
        {
            "date": "2012-04-03T19:16:18+0000",
            "content": "\nIf people want to pursue this, We can always refactor \u2013 either to generalize the name/description of of \"LicenseCheckTask\" or to refactor this out into it's own custom task (and do an extra jar crawl).\n\nI don't think we should do an extra crawl, we can just name it DependencyCheckTask.\nDependencies need to have licensing information and sha checksums, and 'ant validate' \nfails if they don't. ",
            "author": "Robert Muir",
            "id": "comment-13245625"
        },
        {
            "date": "2012-04-03T19:27:33+0000",
            "content": "\nreader = new BufferedReader(new FileReader(f));\n\n\n\nIsn't this locale-sensitive? I think it should be explicit UTF-8 (or US-ASCII for that matter).\n\n\n+      String hexStr = Integer.toHexString(CHECKSUM_BYTE_MASK & digest[i]);\n+      if (hexStr.length() < 2) {\n+        checksum.append(\"0\");\n+      }\n+      checksum.append(hexStr);\n\n\n\nIsn't any of these simpler?\n\nchecksum.append(String.format(Locale.ENGLISH, \"%02x\", CHECKSUM_BYTE_MASK & digest[i]));\n\n\nor\n\nchar [] HEX = \"0123456789abcdef\".toCharArray();\nint v = digest[i];\nchecksum.append(HEX[(v >>> 4) & 0x0F]).append(HEX[v & 0x0F]);\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13245632"
        },
        {
            "date": "2012-04-03T19:30:12+0000",
            "content": "Btw. you can also avoid a recrawl by passing a refid of the same fileset to two tasks rather than constructing a new one in each. I don't mind renaming the class either. ",
            "author": "Dawid Weiss",
            "id": "comment-13245634"
        },
        {
            "date": "2012-04-03T19:31:15+0000",
            "content": "it can also detect ivy cache corrumption.\n\nI have encountered cache corrumption: AFAICT a truncated jar file (tika-parsers-1.0.jar); killing the cache fixed the problem.  We could add a clean-ivy-cache target calling the target Ivy provides. ",
            "author": "Steve Rowe",
            "id": "comment-13245636"
        },
        {
            "date": "2012-04-04T00:11:18+0000",
            "content": "Isn't any of these simpler?\n\nFWIW that code was basically verbatim from ant's Checksum.java, but yeah: your way is better\n\nIsn't this locale-sensitive? I think it should be explicit UTF-8\n\nAlso verbatim, but it actually caught my eye and I thought it was intentional to deal with line ending differences in diff OSes, but your comment makes me realize thta makes no sense \u2013 and BufferedReader chomps all possible endings equally regardless of locale/encoding.\n\nwe can just name it DependencyCheckTask.\n\nI think in the long run we should do that, and rename the taskdef, and rename the macrodef, ... but for 3.6 it might be better to keep the changes to a minimum and just add the logic to the existing class and add the SHA1 files but not rename anything.\n\n...updated patch with those changes ... going to start compiling the list of all SHA1s files on trunk ",
            "author": "Hoss Man",
            "id": "comment-13245915"
        },
        {
            "date": "2012-04-04T00:43:20+0000",
            "content": "bah ... previous patches were broken in that they wouldn't actaully fail the build when checksum failures were detected. ",
            "author": "Hoss Man",
            "id": "comment-13245931"
        },
        {
            "date": "2012-04-04T01:02:10+0000",
            "content": "Haven't tested but looks good: I also think its a good idea to keep the old name for now, we can rename later.\n\nunrelated but couldnt help but notice, this file has no license header. This is because the current rat tasks\nignore tools/....grrrrr  ",
            "author": "Robert Muir",
            "id": "comment-13245941"
        },
        {
            "date": "2012-04-04T02:14:51+0000",
            "content": "previous patch with the addition of SHA1 files for all jars currently used on trunk.\n\nSHA files were generated using...\n\nant clean resolve \nfind -name \\*.jar | xargs -L 1 sha1sum | awk '{ system(\"echo \" $1 \">> \" $2 \".SHA1\") }'\nfind -name \\*.SHA1 | xargs svn add\n\n\n\nall tests pass these jars, but one thing i notice is that the classpath logic in most places seems to be based on exclusion instead of inclusion (ie: 'excludes=\".txt,.template\"' instead of 'includes=\"*.jar\"') so with these SHA1 files added, we now get a metric shit ton of \"ZipException: error in opening zip file\" warnints logged by junit because it's trying to parse these files as jars\n\nshould we fix all these classpaths, or rename the files \"*.SHA1.txt\" ?\n\n(note: i haven't even looked at the packaging yet to verify if the SHA1 files are being included in the src builds and excluded from the bin builds) ",
            "author": "Hoss Man",
            "id": "comment-13245966"
        },
        {
            "date": "2012-04-04T02:45:28+0000",
            "content": "well ideally i think it would just be .sha1 (lowercase), this matches the extension used\nfor signing our release artifacts...\n\nThe reason for exclusion versus inclusion is in the case the jars don't actually exist yet,\nits important!\n\nbut in lucene/common-build.xml i think we should just set up a single libexcludes ant property or something:\n\n**/*.txt,**/*.template,**/*.sha1\n\n\n\nand just use that for these filesets\n\nfileset dir=\"foo\" excludes=\"${libexcludes}\"\n\n\n\nor whatever. and yeah libexcludes is a crappy name, its just the idea. ",
            "author": "Robert Muir",
            "id": "comment-13245978"
        },
        {
            "date": "2012-04-04T02:46:04+0000",
            "content": "and yeah, we need to test and likely modify the binary dist patterns as you hinted at. ",
            "author": "Robert Muir",
            "id": "comment-13245979"
        },
        {
            "date": "2012-04-04T16:29:31+0000",
            "content": "revised patch, switches the file names to sha1, and adds a \"common.classpath.excludes\" property thta i started using everywhere i could find that made sense.\n\nI've verified that this keeps those sha1 files out of the solr war, and so far it looks good for all the tests ... would be helpful if someone with a faster computer could sanity check that (Note: test won't fail if the sha1s are in the classpath \u2013 you'll just get a ZipException in the console that you have to grep for) ",
            "author": "Hoss Man",
            "id": "comment-13246433"
        },
        {
            "date": "2012-04-04T17:08:02+0000",
            "content": "1) fixes a few places ha1 files were still getting used in solr contrib test classpaths\n2) fixes the binary releases to exlcude the sha1 files\n3) verified that the src releases should work fine (they do an svn export so once the files are commited we should be good)\n4) package-local-src-tgz currently includes the sha1 files (but it also currently includes the jars if you don't do clean-jar first ... not really something i'm going to worry about here)\n\nI think we're good to go? ",
            "author": "Hoss Man",
            "id": "comment-13246476"
        },
        {
            "date": "2012-04-04T17:51:49+0000",
            "content": "+1\n\nI opened LUCENE-3952 and we can later look at an other similar minor \nimprovements related to that on other issues (like compile-tools, \ncalled before validate, likely tries to use the ant.jar)...\n\nsome of that we might just have to fix in a later release, at least\nit wont silently work wrong (worst case you get a zip error). ",
            "author": "Robert Muir",
            "id": "comment-13246513"
        },
        {
            "date": "2012-04-04T17:55:24+0000",
            "content": "Committed revision 1309503. - trunk\n\nrmuir said on irc that he'd work on backporting to 3x for me (going to grab some lunch soon and then get on a plane) ",
            "author": "Hoss Man",
            "id": "comment-13246516"
        },
        {
            "date": "2012-04-04T19:01:19+0000",
            "content": "Backported to 3.x\n\nThanks Hoss! ",
            "author": "Robert Muir",
            "id": "comment-13246599"
        }
    ]
}