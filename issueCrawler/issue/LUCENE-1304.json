{
    "id": "LUCENE-1304",
    "title": "Memory Leak when using Custom Sort (i.e., DistanceSortSource) of LocalLucene with Lucene",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.3",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "We had the memory leak issue when using DistanceSortSource of LocalLucene for repeated query/search. In about 450 queries, we are experiencing out of memory error. After dig in the code, we found the problem source is coming from Lucene package, the way how it handles \"custom\" type comparator. Lucene internally caches all created comparators. In the case of query using LocalLucene, we create new comparator for every search due to different lon/lat and query terms. This causes major memory leak as the cached comparators are also holding memory for other large objects (e.g., bit sets). The solution we came up with: ( the proposed change from Lucene is 1 and 3 below)\n\n1.\tIn Lucene package, create new file SortComparatorSourceUncacheable.java:\n\npackage org.apache.lucene.search;\n\nimport org.apache.lucene.index.IndexReader;\nimport java.io.IOException;\nimport java.io.Serializable;\n\npublic interface SortComparatorSourceUncacheable extends Serializable {\n}\n\n2.\tHave your custom sort class to implement the interface\n\npublic class LocalSortSource extends DistanceSortSource implements SortComparatorSourceUncacheable {\n...\n}\n\n3.\tModify Lucene's FieldSorterHitQueue.java to bypass caching for custom sort comparator:\n\nIndex: FieldSortedHitQueue.java\n===================================================================\n\u2014 FieldSortedHitQueue.java     (revision 654583)\n+++ FieldSortedHitQueue.java  (working copy)\n@@ -53,7 +53,12 @@\n     this.fields = new SortField[n];\n     for (int i=0; i<n; ++i) {\n       String fieldname = fields[i].getField();\n\n\tcomparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());\n+\n+      if(fields[i].getFactory() instanceof SortComparatorSourceUncacheable) \n{ // no caching to avoid memory leak\n+        comparators[i] = getComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());\n+      }\n else \n{\n+        comparators[i] = getCachedComparator (reader, fieldname, fields[i].getType(), fields[i].getLocale(), fields[i].getFactory());\n+      }\n\n\n\n       if (comparators[i].sortType() == SortField.STRING) {\n                  this.fields[i] = new SortField (fieldname, fields[i].getLocale(), fields[i].getReverse());\n@@ -157,7 +162,18 @@\n   SortField[] getFields() \n{\n     return fields;\n   }\n\n\t+\n+  static ScoreDocComparator getComparator (IndexReader reader, String field, int type, Locale locale, SortComparatorSource factory)\n+    throws IOException \n{\n+      if (type == SortField.DOC) return ScoreDocComparator.INDEXORDER;\n+      if (type == SortField.SCORE) return ScoreDocComparator.RELEVANCE;\n+      FieldCacheImpl.Entry entry = (factory != null)\n+        ? new FieldCacheImpl.Entry (field, factory)\n+        : new FieldCacheImpl.Entry (field, type, locale);\n+      return (ScoreDocComparator)Comparators.createValue(reader, entry);\n+    }\n+\n+\n\n\n\nOtis suggests that I put this in Jira. I 'll attach a patch shortly for review. \n\n-Ethan",
    "attachments": {
        "LUCENE-1304.patch": "https://issues.apache.org/jira/secure/attachment/12383860/LUCENE-1304.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-06-11T18:21:03+0000",
            "content": "This is the patch created off 2.3.2. Please feel free to make changes. ",
            "author": "Ethan Tao",
            "id": "comment-12604296"
        },
        {
            "date": "2009-01-04T16:06:59+0000",
            "content": "This issue will likely be affected by LUCENE-1483. If/when it goes in, its not likely that Comparators (custom or otherwise) will be cached anymore. ",
            "author": "Mark Miller",
            "id": "comment-12660587"
        },
        {
            "date": "2009-01-06T16:42:06+0000",
            "content": "How will LUCENE-1483 impact this immediately?\nI'd really like to get this patch in first and refactor if and when 1483 goes in, the benefit of bypassing static comparator is\nreally needed.  ",
            "author": "patrick o'leary",
            "id": "comment-12661199"
        },
        {
            "date": "2009-01-06T19:21:45+0000",
            "content": "The main impact is that most of that code will be deprecated. It will still be used for  old custom comparators until 3.0 though, so it might be wise to consider this for 2.9 in the interim. ",
            "author": "Mark Miller",
            "id": "comment-12661269"
        },
        {
            "date": "2009-03-27T21:04:57+0000",
            "content": "Thank you !!\n\n\n ",
            "author": "Ethan Tao",
            "id": "comment-12690100"
        },
        {
            "date": "2009-04-10T19:18:04+0000",
            "content": "LUCENE-1483 and a new FieldComparator I saw going in the other day should solve this issue. ",
            "author": "Mark Miller",
            "id": "comment-12697937"
        }
    ]
}