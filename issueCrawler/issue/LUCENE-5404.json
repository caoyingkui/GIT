{
    "id": "LUCENE-5404",
    "title": "Add support to get number of entries a Suggester Lookup was built with and minor refactorings",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/search"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ]
    },
    "description": "It would be nice to be able to tell the number of entries a suggester lookup was built with. This would let components using lookups to keep some stats regarding how many entries were used to build a lookup.\nAdditionally, Dictionary could use InputIterator rather than the BytesRefIteratator, as most of the implmentations now use it.",
    "attachments": {
        "LUCENE-5404.patch": "https://issues.apache.org/jira/secure/attachment/12623759/LUCENE-5404.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13875457",
            "author": "Areek Zillur",
            "content": "Initial patch:\n\n\tadds count() method to InputIterator to get the # of entries used by consuming Lookup implementations\n\tDictionary now uses InputIterator rather than BytesRefIterator\n\trenamed Dictionary.getWordsIterator() to Dictionary.getEntryIterator()\n\tLookup.build returns number of entries used for building it\n\tminor renaming\n\n ",
            "date": "2014-01-18T01:04:41+0000"
        },
        {
            "id": "comment-13875611",
            "author": "Michael McCandless",
            "content": "Thanks Areek, this looks great.\n\nCan we name the method .getCount() instead, just to make it clear it's \"just\" getting a simple property?  .count() makes it sound like it may go off and do a bunch of work to count something... ",
            "date": "2014-01-18T10:24:34+0000"
        },
        {
            "id": "comment-13875736",
            "author": "Robert Muir",
            "content": "I'm a little confused with the count() being on the iterator API. When is it valid to call count()?\nOne is example is the HIghFrequencyDictionary case where it counts-as-it-goes. ",
            "date": "2014-01-18T20:15:11+0000"
        },
        {
            "id": "comment-13876033",
            "author": "Areek Zillur",
            "content": "Updated Patch (Thanks for the review Michael and Robert):\n\n\tcount() -> getCount()\n\tdoc to make it clear that count represents only the entries the iterator has seen so far\n\n\n\nRegarding the getCount() in the InputIterator API, it is just the number of entries the iterator has seen so far. So it will be valid to call it only after a Lookup has consumed all the entries from the Iterator. I think it will be something useful to know the # of entries a lookup was built with, given some of the iterator skips 'invalid' entries as it feeds it to the lookups? I can also see this being useful when suggesters are run in distributed mode, maybe when shards dont respond, this can be used to report the % of entries that the lookup ran against? ",
            "date": "2014-01-19T22:36:12+0000"
        },
        {
            "id": "comment-13882105",
            "author": "Areek Zillur",
            "content": "Robert Muir Any thoughts on the proposed API change? ",
            "date": "2014-01-25T23:16:19+0000"
        },
        {
            "id": "comment-13882575",
            "author": "Robert Muir",
            "content": "I guess mainly I wonder if we should just add it to the Lookup api directly (rather than a return value from build()). This would probably remove the necessity of having it in the iterator API (the lookup could just count, and then write the count into its data file if need be).\n\nOtherwise a lookup would only be able to provide this information when build() was called (rather than when it was loaded from e.g. a stored FST). ",
            "date": "2014-01-27T05:07:18+0000"
        },
        {
            "id": "comment-13885833",
            "author": "Areek Zillur",
            "content": "I like this idea, I can see how the count stuff is more appropriate in the Lookup API rather than the InputIterator. I am in the process of cooking up a patch that will do this.  ",
            "date": "2014-01-29T21:26:28+0000"
        },
        {
            "id": "comment-13885896",
            "author": "Areek Zillur",
            "content": "Updated Patch:\n\n\tadded getCount in Lookup API\n\tadded store/load methods to persist # of entries in Lookup\n\tminor refactoring of Lookup API\n\n\n\nNow we can get the # of entries even when the datastructure is loaded from disk. The new store/load methods wrap around the abstract ones and uniformly writes the # of entries. ",
            "date": "2014-01-29T22:16:03+0000"
        },
        {
            "id": "comment-13888899",
            "author": "Michael McCandless",
            "content": "I think it's a little strange to load the count in super's .load(InputStream) method, and then fwd to sub's .load(DataInput)?\n\n(Separately I think it's good to switch .store/.load from OutputStream/InputStream to DataOutput/DataInput).\n\nMaybe ... we can just do the change from \"void build\" to \"int build\", and not worry about adding a .getCount() from a load'd suggester.  This way the app knows how many suggestions were built when creating the suggester and if really cares to persist this info it can do so itself?  Or, we can keep the .getCount, but have each suggester handle writing/reading it itself?  I just think it's odd to have super write/read this ...\n\nIt's also not great how these suggesters don't use CodecUtil.write/readHeader to make sure the file they are loading is in fact something that this suggester had previously .stored ... but we can fix that separately. ",
            "date": "2014-02-02T11:15:08+0000"
        },
        {
            "id": "comment-13888982",
            "author": "Robert Muir",
            "content": "\n Or, we can keep the .getCount, but have each suggester handle writing/reading it itself?\n\nThats what we should do. Apps should not have to track this stuff, thats crazy.  ",
            "date": "2014-02-02T17:30:58+0000"
        },
        {
            "id": "comment-13889069",
            "author": "Areek Zillur",
            "content": "Thanks for the feedback \nI was thinking the \"count\" stuff should be common to all suggesters, hence put it in super. I will change it so that the suggesters themselves take care of it. \nI will create an issue to let suggesters use CodecUtil.write/checkHeader. Thanks for pointing that out.\nRegarding .store/.load, I was thinking if we could use something more general so that we can read/write directories (for AnalyzingInfixSuggester and co), along with files (for other suggesters)? I think that will let all suggester impl to respect the Lookup API. Any thoughts on this? ",
            "date": "2014-02-02T21:30:50+0000"
        },
        {
            "id": "comment-13889408",
            "author": "Michael McCandless",
            "content": "Thanks Areek.\n\n\nRegarding .store/.load, I was thinking if we could use something more general so that we can read/write directories (for AnalyzingInfixSuggester and co), along with files (for other suggesters)? I think that will let all suggester impl to respect the Lookup API. Any thoughts on this?\n\nI'm not really sure what to do w/ the store/load APIs.  It may be too much to ask that all suggesters use a common API for it.  E.g, it's sort of weird to 1) create a new suggester class, and 2) call its load API; it's more natural to create the suggester, passing in a Dir/File where it should load its state from.  Ie, you are either loading a previously built suggester, or you creating a new one.  Today the API allows you to load a previously built one and then also .build() a new one over it, which is strange.  I think LUCENE-4492 is getting at this too ...\n\nE.g., AnalyzingInfixSuggester cannot do this: it loads itself based on what you passed to the ctor, so it's .load does nothing. ",
            "date": "2014-02-03T11:33:16+0000"
        },
        {
            "id": "comment-13891133",
            "author": "Areek Zillur",
            "content": "Thanks Michael for the clarification on the API and the pointer to the jira. I understand the concern with the API better now. I will try to come up with something to improve the API in the future, hopefully.\n\nI have attached an updated patch, the changes are as follows:\n\n\tlet individual suggesters deal with their count in .store/.load\n\tadded abstract getCount to Lookup API\n\ttests to make sure getCount works\n\tleft the load/store(Input/OutputStream) for sugar in Lookup API\n\n\n\nOn a different note, I also see the different options that can be fed in the lookup() for different suggesters, I was thinking an object (LookupOptions?) can be passed instead (which will encapsulate all the params). I think this will make the API 'cleaner' and allow suggester specific options to be passed by just using the Lookup class, Thoughts?  (I will probably just do this separately) ",
            "date": "2014-02-04T20:08:36+0000"
        },
        {
            "id": "comment-13891977",
            "author": "Michael McCandless",
            "content": "+1, patch looks great, thanks Areek.\n\n\nOn a different note, I also see the different options that can be fed in the lookup() for different suggesters, I was thinking an object (LookupOptions?) can be passed instead (which will encapsulate all the params). I think this will make the API 'cleaner' and allow suggester specific options to be passed by just using the Lookup class, Thoughts? (I will probably just do this separately)\n\nI think maybe each suggester should just have its own lookup method, taking its additional params?  Ie, I'm not sure how consistently each one will have options that the others would want to use.  E.g. AnalyzingInfixSuggester accepts two additional booleans: allTermsRequired, doHighlight.  But I don't think other suggesters can support these options... ",
            "date": "2014-02-05T10:28:56+0000"
        },
        {
            "id": "comment-13892656",
            "author": "Areek Zillur",
            "content": "Thanks for the review Michael! I will commit this shortly if there are no further objections.\n\n\nI think maybe each suggester should just have its own lookup method, taking its additional params? Ie, I'm not sure how consistently each one will have options that the others would want to use. E.g. AnalyzingInfixSuggester accepts two additional booleans: allTermsRequired, doHighlight. But I don't think other suggesters can support these options...\nI am aware that all suggesters can not support all params but, it is the same idea behind InputIterator? (not all suggesters support payload or weight). So if this object has params set that is not supported by suggesters, the suggester can raise an exception? The way I see it:\n\n  Lookup suggester = ..;\n  LookupOptions lookupOptions = ...;\n  suggester.lookup(lookupOptions); // if lookupOptons set doHighlight but the suggester does not support it throw exception\n\n\nis nicer than\n\n  Lookup suggester = ..;\n  if (suggester instanceof AnalyzingInfixSuggester)\n    ((AnalyzingInfixSuggester) suggster).lookup(\"foo\", 3, false, true);\n else\n   suggester.lookup(\"foo\", false, 3);\n\n\nBut this does add another level of 'abstraction'? This will allow for adding new params by suggesters and be used by just using the Lookup class. Just a thought. ",
            "date": "2014-02-05T22:27:51+0000"
        },
        {
            "id": "comment-13895026",
            "author": "ASF subversion and git services",
            "content": "Commit 1565810 from Areek Zillur in branch 'dev/trunk'\n[ https://svn.apache.org/r1565810 ]\n\nLUCENE-5404: Add .getCount method to all suggesters (Lookup), persist count metadata on .store(), Dictionary returns InputIterator, Dictionary.getWordIterator renamed to .getEntryIterator ",
            "date": "2014-02-07T20:58:20+0000"
        },
        {
            "id": "comment-13895027",
            "author": "ASF subversion and git services",
            "content": "Commit 1565811 from Areek Zillur in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1565811 ]\n\nLUCENE-5404: Add .getCount method to all suggesters (Lookup), persist count metadata on .store(), Dictionary returns InputIterator, Dictionary.getWordIterator renamed to .getEntryIterator ",
            "date": "2014-02-07T20:58:26+0000"
        },
        {
            "id": "comment-13895035",
            "author": "Areek Zillur",
            "content": "Minor change made count is long (was int). Hopefully all hell did not break loose, this is my first commit! ",
            "date": "2014-02-07T21:02:04+0000"
        },
        {
            "id": "comment-13895819",
            "author": "Areek Zillur",
            "content": "Thanks Michael and Robert for the review and feedback. ",
            "date": "2014-02-09T03:54:32+0000"
        }
    ]
}