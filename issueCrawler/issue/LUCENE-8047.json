{
    "id": "LUCENE-8047",
    "title": "Comparison of String objects using == or !=",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "7.0.1",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "modules/analysis"
        ],
        "fix_versions": []
    },
    "description": "My tool has scanned the whole codebase of Lucene and found there are eight practice issues of string comparison, in which strings are compared by using ==/!= instead of equals( ).\n\nanalysis/common/src/java/org/apache/lucene/analysis/hunspell/Dictionary.java\n\nconditionPattern == SUFFIX_CONDITION_REGEX_PATTERN\n\n\n\nanalysis/common/src/java/org/apache/lucene/analysis/cjk/CJKBigramFilter.java\n\n  if (type == doHan || type == doHiragana || type == doKatakana || type == doHangul) {\n\n\n\nanalysis/common/src/java/org/apache/lucene/analysis/standard/ClassicFilter.java\n\n if (type == APOSTROPHE_TYPE &&...){\n\n } else if (type == ACRONYM_TYPE) {",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16246955",
            "date": "2017-11-10T03:08:07+0000",
            "content": "Which tool? ",
            "author": "Mike Drob"
        },
        {
            "id": "comment-16246958",
            "date": "2017-11-10T03:11:41+0000",
            "content": "A static bug detection tool from my research work, the paper about my tool is still under double-blind review, so I cannot release more information. Thx. ",
            "author": "song"
        },
        {
            "id": "comment-16247169",
            "date": "2017-11-10T08:11:37+0000",
            "content": "It'd be great if you could review those use cases too and see if they're not used as object singletons (then the comparison is not a bug, it'd be intentional)... Ideally, a patch would be awesome!\n\nThe SUFFIX_CONDITION_REGEX_PATTERN seems like it could use equals, but the other one is a relict of pre-enum Java... Replacing it to .equals is only going to slow things down (arguably by not much). ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16247638",
            "date": "2017-11-10T15:28:38+0000",
            "content": "These token type instances are intentionally using == with \"type\" and it is not a bug, it is totally safe, because they are comparing against the exact static final constants they are looking for. Some of these comparisons (e.g. CJKBigram) happen per-character and the others happen per-word. i don't think they should be changed to equals because it will only make worse performance.\n\nThe SUFFIX_CONDITION_REGEX_PATTERN doesn't need equals, it is a private mathod used only internally, and is only passed either SUFFIX_CONDITION_REGEX_PATTERN or PREFIX_CONDITION_REGEX_PATTERN. so it wants to know, am i processing suffixes or prefixes. there is not a third possibility. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16247757",
            "date": "2017-11-10T16:46:00+0000",
            "content": "I agree with Robert. The strings here are all final constants and there is no need to use equals - in fact the reference comparison is wanted here. The token type is used like an enum and should always only be the constants given in the tokenizer/filter. The question/issue we have seen here was raised quite often, because some code quality tools complain. But Lucene is very low-level and performance-critatical code, so the developers are aware of the consequences. In earlier versions (before 4.0) this pattern was much more often used for \"field names\", as this was a ongoing comparison (did field name change while iterating over terms). Lucene code contains more programming-antipatterns that should be fixed in high level projects (like business code) but are done in Lucene for performance reasons! \n\nMy last note about this one: Using equals wont make it much worse nowadays, as the String.equals() method early exists if the references are equal. In addition, String#equals() is an Hotspot intrinsic - which also early exits on same reference. So replacing by equals() shouldn't be an issue here, ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16247788",
            "date": "2017-11-10T17:13:48+0000",
            "content": "Should we replace the strings with enums? ",
            "author": "Mike Drob"
        },
        {
            "id": "comment-16247792",
            "date": "2017-11-10T17:19:22+0000",
            "content": "@Mike: It uses TypeAttribute in the analysis chain behind the scenes and that is a String-typed attribute, so an enum is not working. This is the reason why it is done like that. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16248089",
            "date": "2017-11-10T22:19:40+0000",
            "content": "Thanks for the clarification, Uwe! ",
            "author": "Mike Drob"
        }
    ]
}