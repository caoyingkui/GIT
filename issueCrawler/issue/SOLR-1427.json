{
    "id": "SOLR-1427",
    "title": "SearchComponents aren't listed on registry.jsp",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "SearchComponent implements SolrInfoMBean using getCategory() of \"OTHER\" but they aren't listed on the registry.jsp display of loaded plugins.\n\nThis may be a one-of-glitch because of the way SearchComponents get loaded, or it may indicate some other problem with the infoRegistry.",
    "attachments": {
        "SOLR-1427.patch": "https://issues.apache.org/jira/secure/attachment/12419632/SOLR-1427.patch",
        "SOLR-1427.afterlatch.patch": "https://issues.apache.org/jira/secure/attachment/12420151/SOLR-1427.afterlatch.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Grant Ingersoll",
            "id": "comment-12755479",
            "date": "2009-09-15T13:20:41+0000",
            "content": "Yeah, doesn't look like the get registered w/ the infoRegistry on the core.  \n\nSome other things I noticed:\n1. Should ProcessorChains implement SolrInfoMBean too?  That could be a 1.5 thing.\n2. Seems like custom code that implements SolrInfoMBean is not going to be registered either.  Again, I think that can be handled for 1.5.\n\nI'll put up a patch shortly on fixing the SearchComponents one (or at least the default ones for now) "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12755488",
            "date": "2009-09-15T13:45:25+0000",
            "content": "Fixes the issue, including handling registering beans loaded by the SolrResourceLoader.  Added test to SolrCoreTest.  Will commit later today or tomorrow. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12755491",
            "date": "2009-09-15T13:52:57+0000",
            "content": "Adds in a section for highlighting. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12755838",
            "date": "2009-09-16T01:59:52+0000",
            "content": "Committed revision 815587. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12756690",
            "date": "2009-09-17T18:48:01+0000",
            "content": "Reopening - these changes are implicated in deadlocks on startup.\nWe need to find a way to make it bullet proof, or revert for now. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12756697",
            "date": "2009-09-17T18:53:53+0000",
            "content": "Hmm, I thought they would be fine given I handled them like the SolrCoreAware stuff.  It seems like all it is doing is adding to a map, no? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12756711",
            "date": "2009-09-17T19:14:14+0000",
            "content": "Comments from email thread...\n\n\nI haven't tried to reproduce the problem, and i don't even have a concrete \ntheory as to what the problem is ... but i did want to point out something \nthat smells fishy...\n\nlooking over the patch in SOLR-1427, i notice that the patch adds new code \nso that SolrResourceLoader adds everything it instantiates to the registry \nmap \u2013 but there are no lines in that patch removing any code that was \nalready adding stuff to the infoRegistry ... which means any bean \ntypes that were already getting instantiated by the ResourceLoader, and explicitly \nadded to hte registry are probably now getting added to the registry twice \n... for a normal Map that's not a big deal, but perhaps the JMX backed map \nhas some problems with that? (it's not likely something that we ever \ntested extensively)\n\nAlternately: maybe the problem isn't with adding to the JMX backed map \ntwice ... maybe the issue is what state the beans are in each time we add \nthem to the map ... the first time requesthandlers are added to the \ninfoRegistry it's prior to the inform(SolrCore) call so they havne't been \nfully initalized yet \u2013 but the way SOlrResourceLoader adds them now (the \nsecond time) is after inform(SolrCore) has been called and in between \nthe creation/countDown of the CountDownLatch for the searchExecutor ... \n\n   ...hmmm, actually this starting to sound like a concrete theory, \nReplicationHandler.getStatistics has very different behavior before/after \ninform(SolrCore) has been called....\n\nMaybe moving the resourceLoader.inform(infoRegistry) call PRIOR to \nresourceLoader.inform( this ) or AFTER latch.countDown() would solve \nthis problem?\n\nfollowup comment...\n\n\nIf this really is the problem, then a more general purpose solution to \nfuture proof us against similar problems down the road would probably be \nto get rid of the current \"if (config.jmxConfig.enabled)\" logic for \ninitializing SolrCore.infoRegistry, and instead us something like...\n\n  infoRegistry = new ConcurrentHashMap<String, SolrInfoMBean>();\n  ...\n  // do all initialization, add things to infoRegistry as needed\n  ...\n  // done with all initilation, core and all MBeans are fully functional\n  if (config.jmxConfig.enabled) \nUnknown macro: {     Map tmp = infoRegistry;     infoRegistry = new JmxMonitoredMap<String, SolrInfoMBean>(name, config.jmxConfig);     infoRegistry.putAll(tmp);  } \n else \nUnknown macro: {    log.info(\"JMX monitoring not detected for core} \n\n...that way we wouldn't have to worry about any other type of resource \ncontention that might happen from the JMX monitor wanting ot get info from \nthe MBeans as soon as they are added to the registry.\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12757185",
            "date": "2009-09-18T14:43:10+0000",
            "content": "I'm guessing the problem is most likely in loading the SearchComponents, not in the SolrResourceLoader.  The reason being what Yonik said in that the core is not ready yet at that point.\n\nAlso, need to address the possible double loading in SolrResourceLoader. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12757195",
            "date": "2009-09-18T15:08:38+0000",
            "content": "Hoss, where in the SolrResourceLoader do you see other puts into the infoRegistry happening? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12757198",
            "date": "2009-09-18T15:15:34+0000",
            "content": "Patch that defers registering the components until later.  I can't reproduce the problem, so this is just a educated guess. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12757732",
            "date": "2009-09-20T15:34:43+0000",
            "content": "I've reverted the majority of this patch (except for adding a highlight section to registry.xsl\nWe probably should have done that immediately when this hang was detected since it turned a minor bug into a critical bug. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12757733",
            "date": "2009-09-20T15:54:56+0000",
            "content": "update: given one more try, I was able to reproduce the hang in tomcat before the patch was reverted.\n\n\tI used java6\n\tenabled replication as master\n\texport JAVA_OPTS=\"-Dcom.sun.management.jmxremote\"  (I don't think this is necessary w/ Java6)\n\tbin/catalina.sh start\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12757772",
            "date": "2009-09-20T22:42:47+0000",
            "content": "The more I think about it, and the more I look at the threaddumps from people reporting a problem after this patch...\n\nhttp://www.nabble.com/Latest-trunk--locks-execution-thread-in-SolrCore.getSearcher%28%29-to25483788.html#a25496516 \n\n...the more certain i am that my previous guess was correct.  \n\nSome background...\n\n\tSolrCore.getSearcher() explicitly says it can't be called during SolrCoreAware.inform(SolrCore) ... there is a \"latch\" that blocks getSearcher arround the inform calls.\n\tReplicationHandler implements SolrCoreAware, and obey's this contract but stores a permanent reference to the core.\n\tReplicationHandler.getStatistics uses that core to call getSearcher()\n\n\n\nNow here's where our problem comes from...\n\n\tthe previous patch resulted in SOlrResoureceLoader adding SOlrMBeans into the infoRegsitry map (which could be a JmxMonitoredMap) during the \"latch\" that causes blocks on getSearcher\n\tJmxMonitoredMap.put registeres the MBeans with the JMX server.\n\tbased on the threaddumps provided there are evidently some JMX implementations in which JmxMBeanServer.registerMBean blocks until rDynamicMBean.getMBeanInfo returns.\n\tIn a SolrDynamicMBean.getMBeanInfo this method calls getStatistics\n\n\n\n... hence the problem.\n\nI'm attaching a patch that is essentially a \"redo\" of what Yonik reverted, but it moves the line adding items to the infoRegistry until after the latch has been released.\n\n\nI'd appreciate it if anyone who was able to reproduce the problem that caused the revert could try this patch (with JMX turned on as it is in the example solrconfig.xml) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12757773",
            "date": "2009-09-20T22:59:12+0000",
            "content": "Hoss, where in the SolrResourceLoader do you see other puts into the infoRegistry happening? \n\nI didn't say i saw other puts in SolrResourceLoader, I said now there are puts in SolrResourceLoader, but none of the existing puts (in other files) were removed even though in some cases they are now redundent.  \n\nOne Example...\n\nRequestHandlers.initHandlersFromConfig calls core.createRequestHandler which uses SolrResourceLoader to create every RequestHandler, and then initHandlersFromConfig also calls RequestHandlers.register which adds the handler to core.getInfoRegistry().\n\nBut we problem shouldn't just remove any redundent looking puts on  core.getInfoRegistry(), because they night not be redundant in all cases (RequestHandler.register could conceivable be used to register a Handler that some other plugin created w/o using SOlrResourceLoader) ... so the redundancy isn't necessarily bad, it just raised a red flag \u2013 and explains where the thread hang came from: registering RequestHandlers twice didn't cause the hang, it was the fact that the second registration happened during the latch on the searchExecutor. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12758120",
            "date": "2009-09-22T04:30:52+0000",
            "content": "got feedback on solr-user from two who had thread locks with SOLR-1427.patch indicating that SOLR-1427.afterlatch.patch worked fine for them, so....\n\n\nhossman@coaster:~/lucene/solr$ svn commit -m \"SOLR-1427: redo of Grant's previous commit that yonik rolled back - but this time with the registration postponed until the latch is released\"\n...\nCommitted revision 817499. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775871",
            "date": "2009-11-10T15:52:15+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}