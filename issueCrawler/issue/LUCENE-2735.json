{
    "id": "LUCENE-2735",
    "title": "First Cut at GroupVarInt with FixedIntBlockIndexInput / Output",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I have hacked together a FixedIntBlockIndex impl with Group VarInt encoding - this does way worse than standard codec in benchmarks but I guess that is mainly due to the FixedIntBlockIndex limitations. Once LUCENE-2723 is in / or builds with trunk again I will update and run some tests. The isolated microbenchmark shows that there could be improvements over vint even in java though and I am sure we can make it faster impl. wise.",
    "attachments": {
        "LUCENE-2735.patch": "https://issues.apache.org/jira/secure/attachment/12458659/LUCENE-2735.patch",
        "LUCENE-2735_alt.patch": "https://issues.apache.org/jira/secure/attachment/12458666/LUCENE-2735_alt.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-11-02T18:06:53+0000",
            "content": "here is a rough patch ",
            "author": "Simon Willnauer",
            "id": "comment-12927515"
        },
        {
            "date": "2010-11-02T19:41:10+0000",
            "content": "Here's an update that removes array lookups in favor of calculating the lengths, in addition to a bunch of other little optimizations that may or may not matter (such as removing unnecessary masks, and checking single-byte values first rather than 4 byte values during encoding).\n\nThe lookup table would have taken substantial memory: 256*(64+4*4) == 20K and would have taken up a good fraction of L1 cache (perhaps not detectable in a micro-benchmark, but perhaps significant in a full application).\n\nAnyway - I made no attempt at benchmarking it, so YMMV. ",
            "author": "Yonik Seeley",
            "id": "comment-12927565"
        },
        {
            "date": "2010-11-02T21:08:11+0000",
            "content": "I made a codec for GVint (attached) but a few tests fail with spooky exceptions, eg TestPhraseQuery.testRandomPhrases and TestCodecs.testRandomPostings and TestIndicesEquals.testInstantiatedIndexWriter (in contrib/instantiated which, somehow, is really good at finding sneaky codec problems!). ",
            "author": "Michael McCandless",
            "id": "comment-12927597"
        },
        {
            "date": "2010-11-02T21:51:36+0000",
            "content": "I tried making an extra test in GVintMicroBenchmark that created the same output as groupintsTest but just read all the bytes directly back, no decoding, using IndexOutput. It's called GroupVarIntRead in the output below and as can be seen, most of the processing seems to take place outside of GVint decoding. Sorry no patch, as I messed up the formatting.\n\n\nRunning 4 Million random ints with max value: 64\nGroupVarInt time per value: 4ns - time to decode 4M ints: 18ms\nGroupVarIntRead time per value: 3ns - time to decode 4M ints: 15ms\nVint time per value: 6ns - time to decode 4M ints: 25ms\n\nRunning 4 Million random ints with max value: 1024\nGroupVarInt time per value: 9ns - time to decode 4M ints: 39ms\nGroupVarIntRead time per value: 5ns - time to decode 4M ints: 23ms\nVint time per value: 11ns - time to decode 4M ints: 44ms\n\nRunning 4 Million random ints with max value: 524288\nGroupVarInt time per value: 12ns - time to decode 4M ints: 51ms\nGroupVarIntRead time per value: 9ns - time to decode 4M ints: 38ms\nVint time per value: 14ns - time to decode 4M ints: 56ms\n\nRunning 4 Million random ints with max value: 67108864\nGroupVarInt time per value: 14ns - time to decode 4M ints: 59ms\nGroupVarIntRead time per value: 11ns - time to decode 4M ints: 45ms\nVint time per value: 15ns - time to decode 4M ints: 61ms\n\n ",
            "author": "Toke Eskildsen",
            "id": "comment-12927635"
        },
        {
            "date": "2010-11-03T08:35:14+0000",
            "content": "The lookup table would have taken substantial memory: 256*(64+4*4) == 20K and would have taken up a good fraction of L1 cache (perhaps not detectable in a micro-benchmark, but perhaps significant in a full application).\n\nThanks yonik, I had a similar version before without a table and the perf was somewhat the same. I agree that this is unnecessary! \n\nYet, some of you \"cleanups\" didn't do any good though  that (b=(byte)(current>>>16))!=0 only checks if there is a bit set between bit 16 and 24 due to the case. I will upload a new version in a second with a better test.\n\n\n I made a codec for GVint (attached) but a few tests fail with spooky exceptions, eg TestPhraseQuery.testRandomPhrases and TestCodecs.testRandomPostings and TestIndicesEquals.testInstantiatedIndexWriter (in contrib/instantiated which, somehow, is really good at finding sneaky codec problems!).\n\nI guess that is because the second patch didn't really work though. \n\n\n\nI tried making an extra test in GVintMicroBenchmark that created the same output as groupintsTest but just read all the bytes directly back, no decoding, using IndexOutput. It's called GroupVarIntRead in the output below and as can be seen, most of the processing seems to take place outside of GVint decoding. Sorry no patch, as I messed up the formatting.\n\nToke thanks for bringing this up. I run a slightly modified benchmark with a profiler attached to it using IntIndexInput directly one with GVint and one with VInt and guess what the damn hottest method is? Thread.interrupt() takes 77% of the time.\n\n\n\n\nName\nTime (ms)\n\n\norg.apache.lucene.index.codecs.gvint.GVintMicroBenchmark.benchRead(int[][], IntStreamFactory)\n218692\n\n\njava.lang.Thread.isInterrupted(boolean)\n78749\n\n\norg.apache.lucene.index.codecs.gvint.GVintMicroBenchmark$VIntFactory$2.flushBlock()\n59180\n\n\n[Wall Time]  java.io.RandomAccessFile.writeBytes(byte[], int, int)\n57237\n\n\norg.apache.lucene.index.codecs.gvint.GVintMicroBenchmark$VIntFactory$1$1.readBlock()\n55721\n\n\norg.apache.lucene.store.DataInput.readVInt()\n54652\n\n\norg.apache.lucene.store.DataOutput.writeBytes(byte[], int)\n49749\n\n\norg.apache.lucene.index.codecs.gvint.GVintIndexInput$GVintBlockReader.readBlock()\n45956\n\n\norg.apache.lucene.store.DataOutput.writeVInt(int)\n43402\n\n\norg.apache.lucene.index.codecs.gvint.GVintIndexInput.readGroupInt(int, IndexInput)\n39851\n\n\nsun.nio.ch.FileDispatcher.pread0(FileDescriptor, long, int, long)\n16054\n\n\n\n\n\nI also run the updated benchmarks - here are some numbers:\n\n\n\n\nMax random value\nGVint ns / value\nVint ns/value\nGVint total in ms\nVint total in ms\n\n\n15\n20\n21\n80\n86\n\n\n31\n20\n20\n81\n82\n\n\n63\n19\n21\n79\n84\n\n\n127\n19\n20\n78\n82\n\n\n255\n19\n35\n78\n141\n\n\n511\n34\n29\n138\n118\n\n\n1023\n37\n29\n151\n118\n\n\n\n\n ",
            "author": "Simon Willnauer",
            "id": "comment-12927783"
        },
        {
            "date": "2010-11-03T08:39:29+0000",
            "content": "here is a new patch with fixed testcase and updated micro benchmark ",
            "author": "Simon Willnauer",
            "id": "comment-12927784"
        },
        {
            "date": "2010-11-03T12:49:42+0000",
            "content": "(in contrib/instantiated which, somehow, is really good at finding sneaky codec problems!).\n\nwe should really try to 'capture' the logic this thing uses, in the core tests.\nI assume its TestIndicesEquals?\n\nMaybe we can write a similar test: build two \"equivalent\" indexes (one with TestExternalCodecs.RAMOnlyCodec?)\nand compare them like this test does. ",
            "author": "Robert Muir",
            "id": "comment-12927837"
        },
        {
            "date": "2010-11-03T16:41:45+0000",
            "content": "OK w/ the latest patch all tests pass for me!  Great  ",
            "author": "Michael McCandless",
            "id": "comment-12927896"
        },
        {
            "date": "2010-11-03T16:56:49+0000",
            "content": "OK w/ the latest patch all tests pass for me! Great \nawesome!  ",
            "author": "Simon Willnauer",
            "id": "comment-12927902"
        },
        {
            "date": "2010-12-19T14:24:42+0000",
            "content": "Simon, maybe you want to commit this to the bulkpostings branch with the other block codecs? ",
            "author": "Robert Muir",
            "id": "comment-12972993"
        },
        {
            "date": "2010-12-19T14:52:54+0000",
            "content": "Simon, maybe you want to commit this to the bulkpostings branch with the other block codecs?\nyeah I should do so - I hope I get to it during the week...\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12972996"
        },
        {
            "date": "2013-07-23T18:44:25+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716946"
        },
        {
            "date": "2014-04-16T12:54:30+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970781"
        }
    ]
}