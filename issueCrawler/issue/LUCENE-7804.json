{
    "id": "LUCENE-7804",
    "title": "Add point field handling to QueryParserBase",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "New Feature",
        "components": [
            "core/queryparser"
        ],
        "fix_versions": []
    },
    "description": "The classic query parser (and other parsers extending it) don't handle point fields yet.",
    "attachments": {
        "LUCENE-7804.patch": "https://issues.apache.org/jira/secure/attachment/12864960/LUCENE-7804.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15982891",
            "date": "2017-04-25T13:41:32+0000",
            "content": "Here's a first-pass go at adding support for different point field types in QueryParserBase.  To register a particular field as a LongPoint, users call queryparser.setFieldBuilder(fieldname, FieldQueryBuilder); the queryparser will then recognise this field, and produce appropriate exact or range queries.\n\nMost of the work is delegated to the new FieldQueryBuilder interface, which has static methods for LongPoint and DoublePoint.  Multi-dimensional values and open ranges are supported.\n\nFQB is in core, as I think it would be useful for field types in eg sandbox or spatial to make themselves available via the classic queryparser.\n\nIf people think this is a good idea I'll add FloatPoint and IntPoint handling, plus javadocs, etc. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-15998357",
            "date": "2017-05-05T13:54:47+0000",
            "content": "I like your idea to make it easier to inject a schema into query parsers. I think your patch should target QueryBuilder directly (the super class of most query parsers) rather than just QueryParserBase? Also maybe it could go further and extract the current defaults to a STRING_FIELD_BUILDER, and then add an abstract method to QueryBuilder that would return STRING_FIELD_BUILDER by default and that sub-classes could override (I'm not a fan of the setter)? ",
            "author": "Adrien Grand"
        }
    ]
}