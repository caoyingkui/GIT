{
    "id": "SOLR-8050",
    "title": "Partial update on document with multivalued date field fails",
    "details": {
        "components": [
            "clients - java",
            "SolrJ"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "5.2.1",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "When updating a document with multivalued date field Solr throws a exception\n    like: org.apache.solr.common.SolrException: Invalid Date String:'Mon Sep 14 01:48:38 CEST 2015'\neven if the update document doesn't contain any datefield.\n\nSee following code snippet to reproduce \n1. create a doc with multivalued date field (here dynamic field _dts)\n        SolrInputDocument doc = new SolrInputDocument();\n        String id = Long.toString(System.currentTimeMillis());\n        System.out.println(\"testUpdate: adding test document to solr ID=\" + id);\n        doc.addField(CollectionSchema.id.name(), id);\n        doc.addField(CollectionSchema.title.name(), \"Lorem ipsum\");\n        doc.addField(CollectionSchema.host_s.name(), \"yacy.net\");\n        doc.addField(CollectionSchema.text_t.name(), \"Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\");\n        doc.addField(CollectionSchema.dates_in_content_dts.name(), new Date());\n\n        solr.add(doc);\n        solr.commit(true);\n\n2. update any field on this doc via partial update\n        SolrInputDocument sid = new SolrInputDocument();\n        sid.addField(CollectionSchema.id.name(), doc.getFieldValue(CollectionSchema.id.name()));\n        sid.addField(CollectionSchema.host_s.name(), \"yacy.yacy\");\n        solr.update(sid);\n        solr.commit(true);\n\nResult\nCaused by: org.apache.solr.common.SolrException: Invalid Date String:'Mon Sep 14 01:48:38 CEST 2015'\n\tat org.apache.solr.util.DateFormatUtil.parseMath(DateFormatUtil.java:87)\n\tat org.apache.solr.schema.TrieField.readableToIndexed(TrieField.java:473)\n\tat org.apache.solr.schema.TrieField.createFields(TrieField.java:715)\n\tat org.apache.solr.update.DocumentBuilder.addField(DocumentBuilder.java:48)\n\tat org.apache.solr.update.DocumentBuilder.toDocument(DocumentBuilder.java:123)\n\tat org.apache.solr.update.AddUpdateCommand.getLuceneDocument(AddUpdateCommand.java:83)\n\tat org.apache.solr.update.DirectUpdateHandler2.addDoc0(DirectUpdateHandler2.java:237)\n\tat org.apache.solr.update.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:163)\n\tat org.apache.solr.update.processor.RunUpdateProcessor.processAdd(RunUpdateProcessorFactory.java:69)\n\tat org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(UpdateRequestProcessor.java:51)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.doLocalAdd(DistributedUpdateProcessor.java:955)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.versionAdd(DistributedUpdateProcessor.java:1110)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.processAdd(DistributedUpdateProcessor.java:706)\n\tat org.apache.solr.update.processor.LogUpdateProcessor.processAdd(LogUpdateProcessorFactory.java:104)\n\tat org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(UpdateRequestProcessor.java:51)\n\tat org.apache.solr.update.processor.LanguageIdentifierUpdateProcessor.processAdd(LanguageIdentifierUpdateProcessor.java:207)\n\tat org.apache.solr.handler.loader.XMLLoader.processUpdate(XMLLoader.java:250)\n\tat org.apache.solr.handler.loader.XMLLoader.load(XMLLoader.java:177)\n\tat org.apache.solr.handler.UpdateRequestHandler$1.load(UpdateRequestHandler.java:98)\n\tat org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:74)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:143)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2068)\n\tat org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.request(EmbeddedSolrServer.java:179)\n\tat org.apache.solr.client.solrj.SolrRequest.process(SolrRequest.java:135)\n\tat org.apache.solr.client.solrj.SolrClient.add(SolrClient.java:174)\n\tat org.apache.solr.client.solrj.SolrClient.add(SolrClient.java:191)\n\nP.S. the line \"solr.update\" takes care to create a partial update document, with proper \n{\"set\":[fieldname:value]}",
    "attachments": {
        "SOLR-8050.patch": "https://issues.apache.org/jira/secure/attachment/12767085/SOLR-8050.patch",
        "screenshot-1.png": "https://issues.apache.org/jira/secure/attachment/12755780/screenshot-1.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-09-14T18:11:25+0000",
            "author": "Burkhard Buelte",
            "content": "To my research the value.toString  \nline 715 in TrieField.createField  (see screenshot-1.png) is the cause, where value is of type Date and toString not expected DateString format. ",
            "id": "comment-14743947"
        },
        {
            "date": "2015-10-05T11:20:30+0000",
            "author": "Luc Vanlerberghe",
            "content": "I have the same problem in solr-5.1.0 and was able to create a simple test demonstrating the problem in trunk.\n\nI'll upload a patch/pull-request with the failing testcase shortly ",
            "id": "comment-14943245"
        },
        {
            "date": "2015-10-05T11:32:37+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user LucVL opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/202\n\n    SOLR-8050: Test case demonstrating the bug\n\n    To run just this testcase, use:\n    ```sh\n    ant test -Dtests.class=org.apache.solr.update.processor.AtomicUpdatesTest -Dtests.method=testMultipleTDateValues\n    ```\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/LucVL/lucene-solr SOLR-8050\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/202.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #202\n\n\ncommit bb7b239eb25a8826e9767edc52e970a8b2aab405\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-10-05T09:58:56Z\n\n    Test case demonstrating the bug\n\n ",
            "id": "comment-14943257"
        },
        {
            "date": "2015-10-05T11:51:35+0000",
            "author": "Luc Vanlerberghe",
            "content": "As I mentioned in the code comments, not only is TrieField.createField not able to make sense of the output of Date.toString() as opposed to a correctly formed UTC date/time string (like \"1986-01-01T00:00:00Z\"), but the value the Date object contains depends on the locale the test is run in, so there must be an error even earlier in the update logic while decoding the values in the Lucene Document... ",
            "id": "comment-14943265"
        },
        {
            "date": "2015-10-05T12:35:14+0000",
            "author": "Luc Vanlerberghe",
            "content": "A temporary workaround seems to be to include the data of the multi-valued tdate field in the update request to prevent Solr trying to decode the existing values...\n\nIn the patch I attached earlier, I now used\n\n    doc.setField(\"multiTDate_tdtdv\", new String[]{\"1986-01-01T00:00:00Z\", \"1988-01-01T00:00:00Z\", \"1980-01-01T00:00:00Z\"});\n\n\nto construct the original document and added\n\n    doc.setField(\"multiTDate_tdtdv\", ImmutableMap.of(\"set\", \"1986-01-01T00:00:00Z\")); \n    doc.addField(\"multiTDate_tdtdv\", ImmutableMap.of(\"set\", \"1988-01-01T00:00:00Z\")); \n    doc.addField(\"multiTDate_tdtdv\", ImmutableMap.of(\"set\", \"1980-01-01T00:00:00Z\")); \n\n\nto the update request and the test passes ",
            "id": "comment-14943309"
        },
        {
            "date": "2015-10-12T11:53:23+0000",
            "author": "Luc Vanlerberghe",
            "content": "Contrary to the components list in the original report, this is not a SolrJ issue but a bug in the update logic in solr core itself.\n\n@reger: I didn't submit the original report so I cannot update it.  Could you update it to increase the likelihood that a committer picks it up?\nI'm having a go at it, but I'm not familiar with the internals of solr atomic updates... ",
            "id": "comment-14953031"
        },
        {
            "date": "2015-10-12T13:58:55+0000",
            "author": "Luc Vanlerberghe",
            "content": "I managed to fix it (at least it seems to be ok now without breaking any other tests)\n\nThe Date object did contain a correct value, but Date.toString() confusingly uses the current Locale (See Java SE 8 Date and Time, ... For example, java.util.Date represents an instant on the timeline\u2014a wrapper around the number of milli-seconds since the UNIX epoch\u2014but if you call toString(), the result suggests that it has a time zone, causing confusion among developers.\n\nThe bug was introduced more than two years ago when adding support for multivalued docvalues.\nThe old code calls readableToIndexed on value.ToString() which works for most TrieField types, expect when value is a Date object obtained from reading the old value during an update.\n\nSince a little higher the code already construct a correct StorableField, I changed it to use storeableToIndexed instead. ",
            "id": "comment-14953145"
        },
        {
            "date": "2015-10-12T14:01:13+0000",
            "author": "Luc Vanlerberghe",
            "content": "P.s.: I updated the pull request so the original link to the patch (https://github.com/apache/lucene-solr/pull/202.patch) now includes the fix. ",
            "id": "comment-14953149"
        },
        {
            "date": "2015-10-16T15:14:32+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Luc. Here's a better randomized test which catches and fixes the problem reported here (parse exception) and also fixes another bug described below.\n\nWhen you add another date X as string to a multi-valued date field containing an existing date, a subsequent remove of X fails to delete the date. The reason is that it finds the old document (read from transaction log) containing a list with the first date as a java.lang.Date object and the second date as a String.\n\nThis patch ensures that both add and set operations convert the incoming value to a native type using FieldType.toNativeType so that the transaction log stores a proper native object instead of a string. ",
            "id": "comment-14960868"
        },
        {
            "date": "2015-10-16T15:37:44+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1709042 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1709042 ]\n\nSOLR-8050: Partial update on document with multivalued date field fails to parse date and can also fail to remove dates in some cases.\n\nThis closes #202 ",
            "id": "comment-14960898"
        },
        {
            "date": "2015-10-16T15:48:46+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user asfgit closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/202 ",
            "id": "comment-14960916"
        },
        {
            "date": "2015-10-16T16:36:51+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1709053 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1709053 ]\n\nSOLR-8050: Partial update on document with multivalued date field fails to parse date and can also fail to remove dates in some cases. ",
            "id": "comment-14960980"
        },
        {
            "date": "2015-10-16T16:37:15+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Burkhard and Luc! ",
            "id": "comment-14960982"
        },
        {
            "date": "2015-11-20T09:29:17+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user LucVL commented on the pull request:\n\n    https://github.com/apache/lucene-solr/pull/210#issuecomment-158335822\n\n    There\u2019s good documentation on combining git pull-requests with jira issues on the apache wiki (there\u2019s a bot for that)\n    https://wiki.apache.org/lucene-java/BensonMarguliesGitWorkflow\n\n    Basically:\n\n\n\tCreate the JIRA issue first\n\n\n\n\n\tCreate the pull request with the JIRA issue in the title. This will cause a bot to pick it up and link the two.  A comment will appear in the JIRA issue that includes a link to an equivalent patch for non-git users.\n\n\n\n\n\tWhen the JIRA issue is closed, the committer should include \u201cThis closes #PP\u201d. This causes the bot to close the PR as well\n\n\n\n    For an example, see https://issues.apache.org/jira/browse/SOLR-8050\n\n    Luc\n\n\n    From: smartprix notifications@github.com\n    Sent: donderdag 19 november 2015 15:27\n    To: apache/lucene-solr\n    Subject: Re: [lucene-solr] WordDelimiterFilter - Don't split words marked as keyword (#210)\n\n\n    The behavior should is now configurable. I have updated the pull request to reflect that. A new attribute \"splitKeywordTokens\" which is false by default for lucene >= 6.0 and true otherwise.\n\n    Does lucene not accept pull requests from github? Should I create it on JIRA?\n\n    \u2014\n    Reply to this email directly or view it on GitHub<https://github.com/apache/lucene-solr/pull/210#issuecomment-158072439>.\n ",
            "id": "comment-15015483"
        }
    ]
}