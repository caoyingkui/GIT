{
    "id": "SOLR-8273",
    "title": "deprecate implicitly uninverted fields, force people to either use docValues, or be explicit that they want query time uninversion",
    "details": {
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "once upon a time, there was nothing we could do to stop people from using the FieldCache - even if they didn't realize they were using it.\n\nThen DocValues was added - and now people have a choice: they can set docValues=true on a field/fieldtype and know that when they do functions/sorting/faceting on that field, it won't require a big hunk of ram and a big stall everytime a reader was reopened.  But it's easy to overlook when clients might be doing something that required the FieldCache w/o realizing it \u2013 and there is no way to stop them, because Solr automatically uses UninvertingReader under the covers and automatically allows every field to be uninverted in this way.\n\nwe should change that.\n\n\n\nStraw man proposal...\n\n\n\tintroduce a new boolean fieldType/field property uninvertable\n\tall existing FieldType classes should default to uninvertable==false\n\ta field or fieldType that contains indexed=\"false\" uninvertable=\"true\" should be an error.\n\tthe Schema version value should be incremented, such that any Schema with an older version is treated as if every field with docValues==false has an implict uninvertable=\"true\" on it.\n\tthe Map passed to UninvertedReader should now only list items that have an effective value of uninvertable==true\n\tsample schemas should be updated to use docValues on any field where the examples using those schemas suggest using those fields in that way (ie: sorting, faceting, etc...)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-10T20:39:21+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Straw man counter-proposal.\n\nPut a WARN-level log message in any code just before it does reinversion. With as much information on why that's happening as possible. Roll that out in 5.4. Watch how many people start asking what that means.\n\nI think the main issue here is that people just do not grok what is happening and why. A warning mentioning specific field and/or link to wiki page might be enough to move people in the right direction. ",
            "id": "comment-14999311"
        },
        {
            "date": "2015-11-11T05:21:47+0000",
            "author": "David Smiley",
            "content": "+1 to both the plan in the description, and Alex's proposal of logging a warning in a previous release.  Heck, with a setting in solrconfig.xml it could be toggled between no-warning, warning, and error. ",
            "id": "comment-14999955"
        },
        {
            "date": "2015-11-12T22:03:32+0000",
            "author": "Hoss Man",
            "content": "yeah, there's no reason we can't do both...\n\n\n\tin IndexSchema/FieldType initialization:\n\t\n\t\tuse schema.version<X to decide what the default value of \"uninvertable\" should be.\n\t\n\t\n\tIn the Map.get() call of the Map passed to UninvertedReader:\n\t\n\t\tif schema.version<X, log a WARN for any uninverted field\n\t\tif schema.version>=X, log an INFO for any uninverted field\n\t\n\t\n\n ",
            "id": "comment-15003028"
        },
        {
            "date": "2015-11-12T22:23:35+0000",
            "author": "Varun Thacker",
            "content": "sample schemas should be updated to use docValues on any field where the examples using those schemas suggest using those fields in that way (ie: sorting, faceting, etc...)\n\nDoes this mean we won't enable docValues to be true by default? If thats a case then after this change what happens if you sort/facet on a field? Will it throw an error?\n\nPersonally I think we should make docValues=true by default but that might not be part of the scope for this Jira? ",
            "id": "comment-15003069"
        },
        {
            "date": "2015-11-12T22:45:43+0000",
            "author": "Yonik Seeley",
            "content": "Does this mean we won't enable docValues to be true by default?\n\nNo, I think we should enable docValues for the majority of field types... pretty much everything except full-text fields? ",
            "id": "comment-15003107"
        },
        {
            "date": "2015-11-12T22:52:12+0000",
            "author": "Varun Thacker",
            "content": "pretty much everything except full-text fields?\n\nThere is only one valid use case I can think of where a TextField should have docValues enabled : A field which uses a Keyword Tokenizer + Lowecase filter just to normalize the data. ",
            "id": "comment-15003131"
        },
        {
            "date": "2015-11-12T22:54:58+0000",
            "author": "Yonik Seeley",
            "content": "Put a WARN-level log message in any code just before it does reinversion. \n\nAlthough people who are alerting on WARNINGs and do know what they are doing might not be so happy.\n\nAlso, I'm not sure we have the right hooks to do things just before uninversion... We ask for docValues from the FieldCache / UninvertingReader and if they exist they will be returned, and if not, the field cache entry will be built. ",
            "id": "comment-15003136"
        },
        {
            "date": "2015-11-12T22:55:50+0000",
            "author": "Alexandre Rafalovitch",
            "content": "If it is should, rather than must, I would not enable it. New users will be using the fields we mark with docValues as guidance of when they can do the same. If vast majority of text fields should NOT have those enabled, let's not. ",
            "id": "comment-15003137"
        },
        {
            "date": "2015-11-12T22:57:08+0000",
            "author": "Yonik Seeley",
            "content": "There is only one valid use case I can think of where a TextField should have docValues enabled\n\nRight, and more than that... some fields that are used for simple things like tags, that will be faceted on.\nI was thinking we'd have a separate fieldType + dynamicField for such things that had uninverting=true by default.   This need not apply to all text fields. ",
            "id": "comment-15003141"
        },
        {
            "date": "2015-11-12T23:10:00+0000",
            "author": "Hoss Man",
            "content": "> Does this mean we won't enable docValues to be true by default? ...\n\nNo, I think we should enable docValues for the majority of field types... pretty much everything except full-text fields?\n\nthat's sort of an orthogonal question - that should probably be discussed in it's own discrete jira, but we could certainly make both changes (default value for \"docValues\" attribute on some FieldTypes and default value for \"uninvertable\" attribute on all FieldTypes change respective of the same schema.version value)\n\n... If thats a case then after this change what happens if you sort/facet on a field? Will it throw an error?\n\nif the effective value of uninvertable==false and the effective value of docValues==false (regardless of wether those effective values are because you explicitly put them in your schema.xml, or because they were defaults set  based on the version of your schema) then yes, attempts to use any docValue based feature would fail.\n\nAlso, I'm not sure we have the right hooks to do things just before uninversion... We ask for docValues from the FieldCache / UninvertingReader and if they exist they will be returned, and if not, the field cache entry will be built.\n\nwe do have the neccessary hook \u2013 see my previous comment about a custom Map.get() impl (UninvertingReader requires that you give it a Map telling it which fields should support uninversion and how \u2013 right now IndexSchema.getUninversionMap generates a concrete HashMap and my proposed  \"uninvertable\" attribute could come into play to augment that HashMap construction, but likewise we could use a custom Map impl that did those types of checks on the fly and/or did one time logging the first time a field name was seen ber IndexSchema instance, etc.. ",
            "id": "comment-15003162"
        },
        {
            "date": "2018-11-06T00:42:14+0000",
            "author": "Hoss Man",
            "content": "At the Activate Conference last month I talked with some folks who have some very big Solr installations who mentioned that they have docValues=\"true\" enabled on every fieldtype in their schema(s), not because they need/want to use them, but because it's the only way to ensure that a stray/mistaken request to sort/facet on one of these fields won't cause the heap usage to blow up building FieldCache \u2013 they wind up pay a huge indexing & disk usage cost for these docValues that they explicitly don't want!\n\nThat got me rethinking this issue, and how easy I remembered thinking it would be to add an uninvertible=false option for fieldTypes, and wanting to sanity check how hard the impl would actaully be. I tried it out and the answer is \"very easy\" ... to the point that I'm incredibly embarassed at the fact that we haven't done so yet.\n\nI think we should definitely add uninvertible=false as an option in soonest possible release...\n\n... however ...\n\n... the more i look at it and how existing code deals with docValues/FieldCache, the less convinced I am that we should \"rush\" changing the default to uninvertible=false (when schema version > 1.6 ). The key reasons for my hesitation have to do with the existing behavior of faceting (both SimpleFacets and JSON Facets) when dealing with fields that are docValues=\"false\" indexed=\"false\" \u2013 both the default behavior as well as what happens if you try to force an expliit facet algorithm (ie: facet.method=XXX and method: XXX ) on a field that is only indexed or only docValues, or neither ... the short version is we don't ever return an explicit error message if we can't facet on a field (in the method requested) we just return an empty list of buckets.\n\nThat existing behavior makes me very leary of changing the default FieldCache behavior \u2013 even dependent on a new version=\"1.7\" for schemas \u2013 just because of how confusing it might be for new users, or existing users who create new collections using the new _default schema (not to mention users who might be reading old tutorials/docs/blogs/etc...).\n\nI feel like before we consider changing the default behavior, we should probably have a much more in depth conversation as a community about if/how we want to change the automatic facet method selection for fields based on if/when they are uninvertible, and if/how we want to \"fail loudly\" when an explicit method is provided by the user. ... BUT ... I still think we should ASAP provide the option for users who know they don't want FieldCaches to be created to be able to say that \u2013 and give these users/fields facet behavior consistent with what would happen if a they were indexed=\"false\"\n\nWith that in mind, I'm going to create 2 sub-tasks for this jira, and attach the patch(es) with my work in progress so far (and associated \"TODO\" lists) for consideration.\n\nI'm interested in feedback \u2013 not just on the patches (ideally as comments in the sub-task issues themselves), but also (here) if anyone has any specific concerns on the idea of spliting up my previous proposal such that: we can support this uninvertible=false option available ASAP (ideally in the next 7.x release), while defering on the disccussion to change the default value to true\n\n? ",
            "id": "comment-16675931"
        },
        {
            "date": "2018-11-06T04:04:42+0000",
            "author": "David Smiley",
            "content": "+1 woohoo! \u00a0Looking forward to this.\n\nwhile defering on the disccussion to change the default value to true\n\n+1 sure \u2013 \"progress not perfection\" and all that ",
            "id": "comment-16676103"
        },
        {
            "date": "2018-11-06T04:17:19+0000",
            "author": "David Smiley",
            "content": "they have docValues=\"true\" enabled on every fieldtype in their schema(s), not because they need/want to use them, but because it's the only way to ensure that a stray/mistaken request to sort/facet on one of these fields won't cause the heap usage to blow up building FieldCache\nWow\u00a0that's crazy; I've never seen that. I'm shaking my head at this. \u00a0My choice would be to write a DocValuesFormat that is either \"cranky\" or that always returns some nominal value. \u00a0 ",
            "id": "comment-16676113"
        }
    ]
}