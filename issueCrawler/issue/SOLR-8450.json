{
    "id": "SOLR-8450",
    "title": "Our HttpClient retry policy is too permissive.",
    "details": {
        "components": [
            "clients - java",
            "SolrJ"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "",
    "attachments": {
        "SOLR-8450.patch": "https://issues.apache.org/jira/secure/attachment/12780650/SOLR-8450.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-21T14:35:34+0000",
            "author": "Mark Miller",
            "content": "I guess we should audit all the internal HttpClients created in Solr clients.\n\nWe probably want what we normally use:\n\n\n      // if the request is not fully sent, we retry\n      // streaming updates are not a problem, because they are not retryable\n      httpClient.setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler(){\n        @Override\n        protected boolean handleAsIdempotent(final HttpRequest request) {\n          return false; // we can't tell if a Solr request is idempotent\n        }\n      });\n\n\n\nExcept it is not so simples. For read requests, we would like to retry and it's just update requests we want to limit things. ",
            "id": "comment-15066500"
        },
        {
            "date": "2015-12-21T14:37:06+0000",
            "author": "Mark Miller",
            "content": "We probably want what we normally use:\n\nHmmm...our internal client is already using that.\n\nWhat is the exact case it is retrying in? ",
            "id": "comment-15066502"
        },
        {
            "date": "2015-12-21T15:01:12+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I saw this while looking at the failure in SolrExampleStreamingTest.testUpdateField where a connection reset causes the request to be retried. The connection reset itself happens because during that test, we deliberately send a bad version and because there is unconsumed input, Jetty closes the connection on the client. ",
            "id": "comment-15066521"
        },
        {
            "date": "2015-12-21T15:17:08+0000",
            "author": "Mark Miller",
            "content": "Okay, that seems to fit with our retry policy? If we don't fully send the request, we allow a retry.\n\nDoes the following mean we did not fully send everything?\n\nwe deliberately send a bad version and because there is unconsumed input ",
            "id": "comment-15066550"
        },
        {
            "date": "2015-12-21T15:28:18+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Does the following mean we did not fully send everything?\n\nYeah, that is what it seems. Because Solr throws a bad version exception and completes processing the request, Jetty closes the connection before the client can send the rest of frames. See https://issues.apache.org/jira/browse/SOLR-7339?focusedCommentId=15036185&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-15036185 ",
            "id": "comment-15066573"
        },
        {
            "date": "2015-12-21T16:19:56+0000",
            "author": "Mark Miller",
            "content": "That should be okay as things stands then. We on the fact that if the full request was not sent, the update should not have happened, and a retry should be fine.\n\nBecause Solr throws a bad version exception and completes processing the request, Jetty closes the connection before the client can send the rest of frames.\n\nPerhaps we can fix that then? Should we be cutting off the client like this? It seems like this case should follow a normal, client sends full request, server responds with full response flow? ",
            "id": "comment-15066644"
        },
        {
            "date": "2015-12-21T18:30:30+0000",
            "author": "Mark Miller",
            "content": "Okay, I see. I got the wrong test in my head in the Jetty upgrade issue.\n\nThis is the concurrent update solr server, so it's streaming. We count on those entities not being retryable and the retry failing.\n\n\n      // if the request is not fully sent, we retry\n      // streaming updates are not a problem, because they are not retryable\n      httpClient.setHttpRequestRetryHandler(new DefaultHttpRequestRetryHandler(){\n        @Override\n        protected boolean handleAsIdempotent(final HttpRequest request) \nUnknown macro: {          return false; // we can't tell if a Solr request is idempotent        } \n      });\n\nWhat that means is that we don't explicitly handle reties with streaming, but we don't need to because those entities can't be retried anyway. ",
            "id": "comment-15066835"
        },
        {
            "date": "2015-12-21T18:52:38+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "But we shouldn't retry such updates in the first place, no? The following is logged while running SolrExampleStreamingTest.testUpdateField when server closes the connection:\n\n\n2092 INFO  (qtp382077844-22) [    x:collection1] o.a.s.u.p.LogUpdateProcessorFactory [collection1]  webapp=/solr path=/update params={wt=xml&version=2.2}{} 0 29\n2313 INFO  (concurrentUpdateScheduler-3-thread-1-processing-http:////127.0.0.1:54589//solr//collection1) [    ] o.a.h.i.c.SystemDefaultHttpClient I/O exception (java.net.SocketException) caught when processing request to {}->http://127.0.0.1:54589: Connection reset\n2313 INFO  (concurrentUpdateScheduler-3-thread-1-processing-http:////127.0.0.1:54589//solr//collection1) [    ] o.a.h.i.c.SystemDefaultHttpClient Retrying request to {}->http://127.0.0.1:54589\n2315 INFO  (qtp382077844-21) [    x:collection1] o.a.s.u.p.LogUpdateProcessorFactory [collection1]  webapp=/solr path=/update params={wt=xml&version=2.2}{} 0 1\n2564 INFO  (concurrentUpdateScheduler-3-thread-1-processing-http:////127.0.0.1:54589//solr//collection1) [    ] o.a.h.i.c.SystemDefaultHttpClient I/O exception (java.net.SocketException) caught when processing request to {}->http://127.0.0.1:54589: Connection reset\n2564 INFO  (concurrentUpdateScheduler-3-thread-1-processing-http:////127.0.0.1:54589//solr//collection1) [    ] o.a.h.i.c.SystemDefaultHttpClient Retrying request to {}->http://127.0.0.1:54589\n2566 INFO  (qtp382077844-17) [    x:collection1] o.a.s.u.p.LogUpdateProcessorFactory [collection1]  webapp=/solr path=/update params={wt=xml&version=2.2}{} 0 1\n2815 INFO  (concurrentUpdateScheduler-3-thread-1-processing-http:////127.0.0.1:54589//solr//collection1) [    ] o.a.h.i.c.SystemDefaultHttpClient I/O exception (java.net.SocketException) caught when processing request to {}->http://127.0.0.1:54589: Connection reset\n2815 INFO  (concurrentUpdateScheduler-3-thread-1-processing-http:////127.0.0.1:54589//solr//collection1) [    ] o.a.h.i.c.SystemDefaultHttpClient Retrying request to {}->http://127.0.0.1:54589\n2817 INFO  (qtp382077844-18) [    x:collection1] o.a.s.u.p.LogUpdateProcessorFactory [collection1]  webapp=/solr path=/update params={wt=xml&version=2.2}{} 0 0\n\n ",
            "id": "comment-15066870"
        },
        {
            "date": "2015-12-21T18:54:31+0000",
            "author": "Mark Miller",
            "content": "And now that I have dug more into the correct fail, you are right, this does seem a little concerning. This is very strange. It seems like we are doing a real retry when using a streaming client. That is not expected. ",
            "id": "comment-15066878"
        },
        {
            "date": "2016-01-06T01:25:05+0000",
            "author": "Mark Miller",
            "content": "This was causing my new connection reuse test in SOLR-8451 to fail on trunk (only with the jetty upgrade).\n\nIt seems that we were retrying on ConcurrentUpdateSolrClient requests. I had expected those retries to fail as non retriable.\n\nHere is a patch with a subset of changes from SOLR-8451. We can use chunked encoding to detect streaming if we start using the content stream sizes in HttpSolrClient (which is more efficient anyway?). ",
            "id": "comment-15084496"
        },
        {
            "date": "2016-01-06T01:46:24+0000",
            "author": "Mark Miller",
            "content": "I guess even still, with non streaming and knowing the size, we still don't want to retry when batching either. Not so sure how easy that is to detect. ",
            "id": "comment-15084520"
        },
        {
            "date": "2016-01-06T02:25:41+0000",
            "author": "Mark Miller",
            "content": "Well, in the end, doesn't seem to be safe to retry on any updates, even if it's a single update in the request. How about just retrying on GET? ",
            "id": "comment-15084556"
        },
        {
            "date": "2016-01-07T19:43:10+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1723616 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1723616 ]\n\nSOLR-8450: Our HttpClient retry policy is too permissive. ",
            "id": "comment-15087967"
        },
        {
            "date": "2016-01-07T19:44:37+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1723617 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1723617 ]\n\nSOLR-8450: Add CHANGES entry. ",
            "id": "comment-15087970"
        },
        {
            "date": "2016-01-15T13:53:16+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1724807 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1724807 ]\n\nSOLR-8450: Fix debug logging. ",
            "id": "comment-15101788"
        },
        {
            "date": "2016-01-15T14:13:37+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1724813 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1724813 ]\n\nSOLR-8450: Do not retry admin requests, they are not idempotent. ",
            "id": "comment-15101812"
        },
        {
            "date": "2016-02-09T02:46:32+0000",
            "author": "Mark Miller",
            "content": "I have to backport this to 5x now. ",
            "id": "comment-15138260"
        },
        {
            "date": "2016-02-10T15:41:54+0000",
            "author": "ASF subversion and git services",
            "content": "Commit f72c3e3a8ff4bdfc65764a180227c72c43429856 in lucene-solr's branch refs/heads/branch_5x from Mark Robert Miller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f72c3e3 ]\n\nSOLR-8450: Our HttpClient retry policy is too permissive.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1723616 13f79535-47bb-0310-9956-ffa450edef68 ",
            "id": "comment-15141019"
        },
        {
            "date": "2016-02-10T15:41:55+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 42c17d225e2190893227ac6c710effda000afd98 in lucene-solr's branch refs/heads/branch_5x from markrmiller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=42c17d2 ]\n\nSOLR-8450: Add CHANGES entry. ",
            "id": "comment-15141020"
        },
        {
            "date": "2016-02-10T15:41:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 9da8846535bce8793b28a7d8816e10f3b1c5a912 in lucene-solr's branch refs/heads/branch_5x from Mark Robert Miller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9da8846 ]\n\nSOLR-8450: Fix debug logging.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1724807 13f79535-47bb-0310-9956-ffa450edef68 ",
            "id": "comment-15141021"
        },
        {
            "date": "2016-02-10T15:41:57+0000",
            "author": "ASF subversion and git services",
            "content": "Commit df004731dd3f2b1cd54af96f1aa1ead27fcf70b2 in lucene-solr's branch refs/heads/branch_5x from Mark Robert Miller\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=df00473 ]\n\nSOLR-8450: Do not retry admin requests, they are not idempotent.\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/trunk@1724813 13f79535-47bb-0310-9956-ffa450edef68 ",
            "id": "comment-15141022"
        }
    ]
}