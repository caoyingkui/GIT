{
    "id": "LUCENE-3504",
    "title": "DocValues: deref/sorted bytes types shouldn't return empty byte[] when doc didn't have a value",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "I'm looking at making a FieldComparator that uses DV's SortedSource to\nsort by string field (ie just like TermOrdValComparator, except using\nDV instead of FieldCache).  We already have comparators for DV int and\nfloat DV fields.\n\nBut one thing I noticed is we can't detect documents that didn't have\nany value indexed vs documents that had empty byte[] indexed.\n\nThis is easy to fix (and we used to do this), because these types are\nderef'd (ie, each doc stores an address, and then separately looks up\nthe byte[] at that address), we can reserve ord/address 0 to mean \"doc\ndidn't have the field\".  Then we should return null when you retrieve\nthe BytesRef value for that field.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-10-11T07:56:36+0000",
            "content": "mike let me explain my intention here. You are right we used to do this here but:\n\n\tIDV is a strickly dense storage ie. each document has a value, that is the basic assumption.\n\tif you want a default value you should specify it. if you don't specify it we provide best effort to do this for you.\n\tconsistency is very important here, all variants return a value for every doc. For numerics its 0 / 0.0 for bytes its BytesRef initialized with the default depending on the variant var/fixed.\n\tthe null invariant forces users to do a check for every document which makes no sense based on the first assumption\n\tif you have a numeric value you can't check for mission values since those values are primitives, again consistency\n\n\n\nI think we should not copy the behavior from FC here for the above reasons. what we should rather do is make this absolutely clear and remove the return value from getBytes(BR) and document that the BR will always be filled. if you want to have some \"missing value\" behavior you should make sure you add the right values. The sort missing last/first stuff seems like something born from the fact that we build FC by uninverting an indexed field and IDV doesn't have this limitation. ",
            "author": "Simon Willnauer",
            "id": "comment-13124789"
        },
        {
            "date": "2011-10-11T10:50:28+0000",
            "content": "So this would mean doc values can never support the notion of a\n\"missing value\" for a document, right?\n\nIe, this is more limited than FieldCache.\n\nSo it's the app's job to always index a doc value for every document,\nelse the behavior is hardwired at search time (0 for numerics, new\nbyte[0] for var-length bytes, zero bytes for fixed-length bytes).\n\nI guess if for some reason an app really has a problem with this, it\ncould go and store its own \"single bit docvalues field\" (eg int\nfield with only 0 and 1 values) to indicate \"missing-ness\", and then\nat sort time, sort first by this field and second by the \"normal\" sort\nfield(s).  This would let you sort missing first or last, at least.\n\nOK I actually like this approach: it's stricter than field cache.\n\nThe app is not allowed to skip documents when making a doc-values\nfield, or if it does, it must accept the hardwired defaults we return\nfor such documents. ",
            "author": "Michael McCandless",
            "id": "comment-13124925"
        }
    ]
}