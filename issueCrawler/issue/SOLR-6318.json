{
    "id": "SOLR-6318",
    "title": "QParser for TermsFilter",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10"
        ],
        "components": [
            "query parsers"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Some applications require filtering documents by a large number of terms.  It's often related to security filtering.  Naively this is done this way:\n\n    fq={!df=myfield q.op=OR}code1 code2 code3 code4 code5...\n\n\nAnd this ends up being a BooleanQuery.  Users then wind up hitting BooleaQuery.maxClauseCount (sometimes in production, sadly) and they up it to a huge number to get the job done.\n\nSolr should offer a QParser based on TermsFilter.  I propose it be named \"terms\" (plural of term), and have a \"separator\" option defaulting to a space.  When it's a space, the values also get trimmed, which wouldn't otherwise happen.  The analysis logic should be the same as that for \"term\" QParser which is to call FieldType.readableToIndexed.",
    "attachments": {
        "SOLR-6318__terms_QParser.patch": "https://issues.apache.org/jira/secure/attachment/12660040/SOLR-6318__terms_QParser.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-14085349",
            "date": "2014-08-04T21:42:26+0000",
            "content": "I've read somewhere (in the Lucene source, I forget) that BooleanQuery was shown to be faster than TermsFilter when the number of terms is less than some number, based on a bunch of assumptions of course.  It would be nice to have a threshold option to switch between BooleanQuery & TermsFilter.  I've also seen a suggestion that TermsFilter should use or be replaced by AutomatonQuery LUCENE-3893.  It would be easy to use any of these options. "
        },
        {
            "author": "David Smiley",
            "id": "comment-14087204",
            "date": "2014-08-06T03:45:50+0000",
            "content": "Here it is, with test.\nFrom the javadoc:\n\nFinds documents whose specified field has any of the specified values. It's like TermQParserPlugin but multi-valued, and supports a variety of internal algorithms. Parameters: f: The field name (mandatory) separator: the separator delimiting the values in the query string. By default it's a \" \" which is special in that it splits on any consecutive whitespace. method: Any of termsFilter (default), booleanQuery, automaton, docValuesTermsFilter. Note that if no values are specified then the query matches no documents.\n\nIt would be cool if somebody did some benchmarking that would allow us to choose between some of the algorithms based on heuristics... but this is fine for now.  For example use method=X when the number of values is > some value.  And use docValuesTermsFilter if docValues is enabled.  Note that DocValuesTermsFilter (trunk) is known as FieldCacheTermsFilter on 4x.  On 4x this feature doesn't support DocValues (just FieldCache) whereas on trunk it supports both depending on wether you indexed DocValues or not (I think).  That method is also limited to single valued fields, but there's no explicit check.\n\nI'll commit this in a couple days, pending input. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14089531",
            "date": "2014-08-07T18:00:48+0000",
            "content": "Commit 1616558 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1616558 ]\n\nSOLR-6318: New terms QParser "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14089536",
            "date": "2014-08-07T18:05:30+0000",
            "content": "Commit 1616559 from David Smiley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1616559 ]\n\nSOLR-6318: New terms QParser "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14089888",
            "date": "2014-08-07T21:40:33+0000",
            "content": "Heh - I recently committed a TermsQParserPlugin to Heliosearch... it's syntax is\n\n{!terms f=myfield}term1,term2,term3\n\n\n\nBefore the paint dries on this too much, perhaps we should set the default separator to \",\"?\n\n\tcomma separated lists of things (ids, terms, etc) are much more frequently used in Solr in general, and I think we should try to standardize on this\n\tcomma results in nicer to read URLs since they don't get URL encoded\n\tcomma works better for embedded queries in lucene syntax:\n\nA OR {!terms f=myfield}term1,term2,term3 OR C\n\n\n\n\n\nThe few things that are not comma separated  now constantly trip me up... but there are only a few of them (like edismax qf).  I'm forever writing qf=field1,field2 instead of qf=field1 field2 "
        },
        {
            "author": "David Smiley",
            "id": "comment-14089946",
            "date": "2014-08-07T22:21:41+0000",
            "content": "Works for me Yonik.  I'll make the change now. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14089954",
            "date": "2014-08-07T22:25:25+0000",
            "content": "Commit 1616609 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1616609 ]\n\nSOLR-6318: New terms QParser defaults to comma delimited now "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14089956",
            "date": "2014-08-07T22:26:43+0000",
            "content": "Commit 1616610 from David Smiley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1616610 ]\n\nSOLR-6318: New terms QParser defaults to comma delimited now "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14125165",
            "date": "2014-09-08T02:44:02+0000",
            "content": "The performance I got for id filters (term queries on the id field) varied from being 4 times faster to almost 9 times faster.\nI was only able to test up to 100K ids though... when I tried 1M, something failed in Jetty I think (maybe just hit the POST limit...)\nhttp://heliosearch.org/solr-terms-query/ "
        },
        {
            "author": "David Smiley",
            "id": "comment-14125176",
            "date": "2014-09-08T03:06:06+0000",
            "content": "Cool Yonik Seeley; thanks for spending the time benchmarking it.  Could you try some of the other methods supported besides termsFilter:  method=automaton and method=docValuesTermsFilter "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14125179",
            "date": "2014-09-08T03:17:22+0000",
            "content": "Could you try some of the other methods supported besides termsFilter: method=automaton and method=docValuesTermsFilter\n\nGood idea - I forgot to look into that.  I'll put it on the queue... "
        }
    ]
}