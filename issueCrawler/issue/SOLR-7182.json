{
    "id": "SOLR-7182",
    "title": "Make the Schema-API a first class citizen of SolrJ",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "affect_versions": "5.0",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "There are several Solr APIs that are handled as first class citizens in SolrJ, esp. the Node API and the Collections API, i.e. they have their own xxxAdminRequest Object extended from the SolrRequest Class. As someone who programmatically changes Schemas a lot, I had hoped to see the Schema API handled first class in release 5.0, too. As far as I dug into the code and docs of SolrJ 5.0, that did not happen. If there is a reasonable point why this won't happen at all, I would really like to hear it. If the only reason is, that nobody had time for this, I would happily help out here.",
    "attachments": {
        "SOLR-7182.patch": "https://issues.apache.org/jira/secure/attachment/12734765/SOLR-7182.patch",
        "SOLR-7182-branch_5x.patch": "https://issues.apache.org/jira/secure/attachment/12740869/SOLR-7182-branch_5x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-02T13:12:16+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Lack of time is really the only reason. A patch would be appreciated! ",
            "id": "comment-14343140"
        },
        {
            "date": "2015-03-02T13:31:28+0000",
            "author": "Sven Windisch",
            "content": "Thanks for your answer. Is there an approximate date for the 5.1 release, so I can have a rough idea when to be finished with this? ",
            "id": "comment-14343156"
        },
        {
            "date": "2015-03-02T21:58:26+0000",
            "author": "Erick Erickson",
            "content": "Sven:\n\nThere's really never a firm date in mind, it's more like whenever enough has accumulated that someone makes it a priority. It might be in the next several weeks but nothing's been planned yet.\n\nUsually someone announces on dev list that they're thinking about cutting a new release giving people a few day's warning, no such announcement has been made. ",
            "id": "comment-14343841"
        },
        {
            "date": "2015-03-03T16:39:26+0000",
            "author": "Noble Paul",
            "content": "I would say , don't worry about any particular release. Just build it . all the point releases will happen in quick succession . If it does not go in 5.1 , there will be a 5.2 pretty soon ",
            "id": "comment-14345304"
        },
        {
            "date": "2015-05-17T17:52:37+0000",
            "author": "Marius Grama",
            "content": "I see that this feature request hasn't been updated in a while. I've started working on it and implemented the GET methods for the Schema API and will continue with the POST methods. \nAfter having a look at the document https://cwiki.apache.org/confluence/display/solr/Schema+API I see that there can be exposed also Managed Resources REST API for the Schema API. https://cwiki.apache.org/confluence/display/solr/Managed+Resources\nDoes the Schema API need to support also these features? ",
            "id": "comment-14547261"
        },
        {
            "date": "2015-05-22T07:40:42+0000",
            "author": "Marius Grama",
            "content": "I've attached a patch that offers SchemaRequest and SchemaResponse classes.\nDue to the fact that there can be executed multiple updates in a single POST, I've opted for aggregate multiple UpdateSchemaRequest classes in a MultipleUpdateSchemaRequest class. When obtaining the JSON representation to be sent to the /schema/update REST resource, all the update requests will be gathered in a NamedList and serialized in JSON format, by using a slightly modified version of noggit's JSONWriter that can deal with objects of type NamedList.\n\nThe unit tests contained in the class SchemaTest are assuring the accuracy and failure of the methods.\n\nSupport for managed schema API is not explicitly offered, but it can be achieved by simply extending the class within the client applications that need it. ",
            "id": "comment-14555772"
        },
        {
            "date": "2015-06-11T14:53:59+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Marius Grama! This is a great start. I'd very much like to have shorter class names e.g. SchemaRequest.DeleteFieldType instead of SchemaRequest.DeleteFieldTypeUpdateSchemaRequest. This is in similar to the CollectionAdmin API which has CollectionAdminRequest.Create and CollectionAdminRequest.AddReplica and so on. ",
            "id": "comment-14582016"
        },
        {
            "date": "2015-06-12T11:42:59+0000",
            "author": "Marius Grama",
            "content": "Thank you Shalin Shekhar Mangar for having a look over this patch. I've udated the inner class names to be consistent with the model of CollectionAdminRequest class and attached a new version of the patch. I'd appreciate any feedback in improving this client API. ",
            "id": "comment-14583287"
        },
        {
            "date": "2015-06-12T14:02:40+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Can we remove the use of NamedList in the SchemaRequest public API? The NamedList is an internal Solr collection type and we should not force users to learn this API when they can just as easily use a java.util.Map. ",
            "id": "comment-14583416"
        },
        {
            "date": "2015-06-12T14:17:45+0000",
            "author": "Marius Grama",
            "content": "My first intention when writing the Schema API client was indeed to work with Map<String, Object> type for the parameters. When doing the first tests of the client I noticed that when dealing with the response I needed to work with NamedList\ne.g. : \n\nNamedList<Object> fieldProperties = (NamedList<Object>) fieldResponse.getResponse().get(\"field\");\n\n\n\nwhich made me use NamedList<Object> for convenience in the request methods.\nI will submit shortly a new patch containing Map<String, Object> parameters instead of NamedList<Object> ",
            "id": "comment-14583449"
        },
        {
            "date": "2015-06-12T14:23:39+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Yeah, I was wondering if we should expand the SchemaResponse as well. The user should be able to read the schema using proper objects instead of using NamedList directly. ",
            "id": "comment-14583454"
        },
        {
            "date": "2015-06-13T21:19:16+0000",
            "author": "Marius Grama",
            "content": "I've taken out the usage of NamedList from the API exposed by the SchemaRequest.\nI've also created specific wrappers for the response objects corresponding to the Schema API so that the clients do not need to iterate through the response NamedList.\nFor wrapping the FieldType add/replace request object I've introduced the class FieldTypeDefinition. I have to do some extra testing to make sure that I didn't miss any of the properties that can be set (I've used FieldTypeXmlAdapter as template for the properties).\nFor wrapping the response messages for schema and fieldtype calls I've introduced SchemaRepresentation, respectively FieldTypeRepresentation. ",
            "id": "comment-14584822"
        },
        {
            "date": "2015-06-14T12:27:29+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "This is excellent!\n\n\n\tCan we rename SchemaRepresentation's members fieldsProperties, dynamicFieldsProperties, fieldTypesRepresentations, copyFieldsProperties to fields, dynamicFields, fieldTypes, copyFields respectively?\n\tSimilarly, rename FieldTypeDefinition's fieldTypeProperties, analyzerDefinition, indexAnalyzerDefinition, queryAnalyzerDefinition, multiTermAnalyzerDefinition, similarityProperties to fieldType, indexAnalyzer, queryAnalyzer, multiTermAnalyzer and similarity respectively.\n\n\n\nAs you can see, I very much prefer shorter names  ",
            "id": "comment-14585052"
        },
        {
            "date": "2015-06-14T22:04:57+0000",
            "author": "Marius Grama",
            "content": "Shalin Shekhar Mangar I've followed the recommendations that you've provided me. Thanks for the feedback. I appreciate it.\n\nIn FieldTypeDefinition instead of fieldTypeProperties i didn't change the field name to fieldType, but to attributes. I thought it more semantically appropriate to its purpose.\n\nFor the class names I'd appreciate FieldTypeDefinition, AnalyzerDefintion (request specific), FieldTypeRepresentation, SchemaRepresentation (response specific) if you would come with some more appropriate class names.\n\nI've discovered SOLR-7679 bug along the way. I'd appreciate it if this would be commited soon so that the current unit tests for SOLR-7182 can pass. ",
            "id": "comment-14585291"
        },
        {
            "date": "2015-06-19T21:22:45+0000",
            "author": "Marius Grama",
            "content": "Created a new version of the patch containing modifications added due to the newest developments done as part of the resolved Schema API issues (see related issue links). ",
            "id": "comment-14593984"
        },
        {
            "date": "2015-06-20T13:16:01+0000",
            "author": "Noble Paul",
            "content": "Can we rename the Response objects to have a \"Response\" suffix. That is the convention that we use in the other APIs\n\ne.g: \n\n\n public static class FieldType extends SolrResponseBase {}\n\n\nto \n\n public static class FieldTypeResponse extends SolrResponseBase {}\n\n\n\nIt also creates confusion because class with exact same name is used in the Request as well ",
            "id": "comment-14594589"
        },
        {
            "date": "2015-06-20T13:43:58+0000",
            "author": "Marius Grama",
            "content": "Noble Paul I've attached a patch containing changed names for the response classes. The reasoning that I've used by having same names for request and response classes is that they are static inner classes (e.g. : SchemaRequest.FieldType, SchemaResponse.FieldType) and when using them their purpose is obvious. Nevertheless having the same class names is error prone, so I consider this a good suggestion. ",
            "id": "comment-14594609"
        },
        {
            "date": "2015-06-20T16:09:01+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Marius Grama. I fixed a few failures reported by ant precommit:\n\n\tUse the String.format method with the ROOT locale\n\tJavadoc warning in SchemaRequestJSONWriter.write\n\tMissing package-info.java for the two new packages introduced in this patch\n\tType erasure warning in Arrays.asList used in testMultipleUpdateRequestAccuracy\n\n\n\nant precommit is happy and all tests pass. I'll commit this shortly. ",
            "id": "comment-14594662"
        },
        {
            "date": "2015-06-20T16:24:10+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1686650 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1686650 ]\n\nSOLR-7182: Make the Schema-API a first class citizen of SolrJ ",
            "id": "comment-14594667"
        },
        {
            "date": "2015-06-20T16:54:00+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "This patch applies on branch_5x. I had to make a few adjustments to compile and get precommit passing on branch_5x with Java7. ",
            "id": "comment-14594687"
        },
        {
            "date": "2015-06-20T16:55:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1686654 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1686654 ]\n\nSOLR-7182: Make the Schema-API a first class citizen of SolrJ ",
            "id": "comment-14594688"
        },
        {
            "date": "2015-06-20T16:56:25+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Sven for opening the issue and Marius for all the work! ",
            "id": "comment-14594689"
        },
        {
            "date": "2015-08-26T13:05:44+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Bulk close for 5.3.0 release ",
            "id": "comment-14713092"
        }
    ]
}