{
    "id": "LUCENE-6807",
    "title": "AbstractRangeQueryNode toQueryString not working as intended",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "5.3",
        "components": [
            "core/queryparser"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Bug"
    },
    "description": "It is my understanding that for a given QueryNode node, parse(node.toQueryString()); should return a QueryNode which is functionally identical to the original node.\n\nThat is not the case with AbstractQueryNode:\nif we have a range query on FIELD from \"A\" to \"B\" (node = parse(\"FIELD:[A B]\")), then node.toQueryString() will return \"[FIELD:A FIELD:B]\" which, in turn, is parsed as a range query on the default field from \"FIELD:A\" to \"FIELD:B\".\n\nAs far as I know, this affects all versions of lucene.\n\nI believe I have the knowledge to provide the patch, so I will be working on that today.\n\nAs of now, I have thought of two options to implement this fix, both of which involve modifying the ValueQueryNode interface to include a method which returns value as a CharSequence. \n\nThe first option is to add a new method to the interface which returns (formatted if necessary) the value as a CharSequence and implement it in all implementing classes (FieldQueryNode and NumericQueryNode). Then in AbstractQueryNode#toQueryString() we will call that method and escape the values using the provided EscapeQuerySyntax.\n\nThe second option is to make the protected method getTermEscaped(), which is already present in all implementing classes, public, and add it to the interface.\n\nWhile I think that the second option is certainly cleaner, I do not know why this method is protected in the first place, so I will proceed with the first option until someone who is more familiar with the lucene project than I am can comment on the matter.\n\nAs I am writing this, it occurs to me that implementing the first option is essentially just bypassing the protected scope on getTermEscapeed(), so maybe it is correct to just review whether or not that method needs to be protected. It also occurred to me to use the existing getValue() method, and format and escape the toString() of that, but that depends on a generic class having implemented toString() in a way that plays nicely with the query parser, so, to me, this is below the two previously mentioned options.",
    "attachments": {
        "LUCENE-6807-option1.patch": "https://issues.apache.org/jira/secure/attachment/12756097/LUCENE-6807-option1.patch",
        "LUCENE-6807-option2.patch": "https://issues.apache.org/jira/secure/attachment/12756337/LUCENE-6807-option2.patch",
        "LUCENE-6807-option3.patch": "https://issues.apache.org/jira/secure/attachment/12756357/LUCENE-6807-option3.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14746347",
            "author": "Peter Barna",
            "date": "2015-09-15T22:04:17+0000",
            "content": "Patch to fix LUCENE-6807 using the option of creating a new method in the ValueQueryNode interface. "
        },
        {
            "id": "comment-14746351",
            "author": "Peter Barna",
            "date": "2015-09-15T22:05:33+0000",
            "content": "I have uploaded a patch to fix this bug using the first option. I will try to get patches up for the other two options (make getTermEscaped public, assume toString() gives something usable) tomorrow. "
        },
        {
            "id": "comment-14790959",
            "author": "Peter Barna",
            "date": "2015-09-16T19:05:36+0000",
            "content": "Updated option1 patch to include documentation in CHANGES.txt and pass ant precommit.  "
        },
        {
            "id": "comment-14791020",
            "author": "Peter Barna",
            "date": "2015-09-16T19:49:10+0000",
            "content": "The option2 patch fixes this issue by making getTermEscaped public and adding it to the ValueQueryNode interface. "
        },
        {
            "id": "comment-14791170",
            "author": "Peter Barna",
            "date": "2015-09-16T21:39:53+0000",
            "content": "The option 3 patch does not add any new methods, but rather assumes that getValue().toString() will return something useful. "
        },
        {
            "id": "comment-14791174",
            "author": "Peter Barna",
            "date": "2015-09-16T21:41:45+0000",
            "content": "I have provided patches for all 3 options I mentioned in the initial description. Please let me know which is the most suitable, or if none of them are. "
        },
        {
            "id": "comment-15192250",
            "author": "Peter Barna",
            "date": "2016-03-13T09:39:27+0000",
            "content": "Bump. "
        }
    ]
}