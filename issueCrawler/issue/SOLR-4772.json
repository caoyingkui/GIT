{
    "id": "SOLR-4772",
    "title": "DateRoundingUpdateProcessorFactory",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "A simple UpdateProcessor that rounds dates using the DateMathParser.\n\nAt present it is not possible to combine pivot faceting with range queries. This simple UpdateProcessor allows us to round our dates on their way into Solr, giving us date fields that can be used in pivot facets.\n\nThis can be extremely useful when using facets to plot graphs based upon log files indexed into Solr.",
    "attachments": {
        "DateRoundingUpdateProcessorFactory.zip": "https://issues.apache.org/jira/secure/attachment/12580841/DateRoundingUpdateProcessorFactory.zip",
        "RoundingUpdateProcessorFactory.zip": "https://issues.apache.org/jira/secure/attachment/12581239/RoundingUpdateProcessorFactory.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13643755",
            "date": "2013-04-27T18:25:23+0000",
            "content": "Great idea for an UPF, some feedback on the attachment...\n\n1) i'm not a fan of assuming rounding by \"year\" by default ... i think it would be better to require an explict rounding param, but if it is going to have a default, \"day\" seems like a more generally usable default then year\n2) extending FieldValueMutatingUpdateProcessor instead of FieldMutatingUpdateProcessor would eliminate some redundency in looping over hte values and dealing with the boost.\n3) we can't assume the field values can be cast to String \u2013 if they come from SolrJ (or an upstream processor like TimestampUpdateProcessor) it might already be a Date object.  If it's neither a Date obj, or can't be parsed as a Date, we need either an explicit error check, or we should ignore the value and pass it through (ant let a downstream processor or the schema complain about it)\n4) likewise once we've got a date object, it's not really necessary to reformat as a String\n5) the DateFormat used isn't thread safe so there will be problems with concurrent updates\n6) the DateFormat doesn't handle the full date syntax \u2013 particularly ms, or the possibility that the date is already a math expression (like \"NOW\")\n\n5 & 6 can both be dealt with easily by having a private instance of \"new DateField()\" and calling \"parseMath(null, value)\"\n "
        },
        {
            "author": "Upayavira",
            "id": "comment-13643915",
            "date": "2013-04-28T06:06:48+0000",
            "content": "Thx Hoss, I'll upload another patch. "
        },
        {
            "author": "Upayavira",
            "id": "comment-13643936",
            "date": "2013-04-28T08:25:18+0000",
            "content": "Updated patch that answers these points - particularly throwing an exception if rounding not configured correctly. \n\nAt present, if it can't parse a date, it passes the value through logging a warning. Should it throw an exception instead? "
        },
        {
            "author": "Upayavira",
            "id": "comment-13643943",
            "date": "2013-04-28T08:53:43+0000",
            "content": "Thinking about it, I should convert this to a generic RoundingUpdateProcessor, that can do numbers too. Would allow folks to use the same technique across anything you might do range faceting on. "
        },
        {
            "author": "Upayavira",
            "id": "comment-13646035",
            "date": "2013-04-30T21:52:28+0000",
            "content": "Attached is a more generic RoundingUpdateProcessorFactory. If the rounding param is a string, it'll expect to round dates, likewise if it is an int, it'll expect ints, or if it is a float, it'll expect floats. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13695094",
            "date": "2013-06-27T22:03:25+0000",
            "content": "As a temporary workaround, a StatelessScript update processor can be used to execute a concise JavaScript script to perform the desired date rounding. I just coded one today (normalize-date.js) which will appear in the next early access release of my book at the end of next week. It lets you specify the unit of truncation (no \"rounding\"), from second to decade. It also \"normalizes\" abbreviated dates such as \"2012\", \"2012-04-15\", and missing \"Z\". It works for multivalued data fields as well. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14044990",
            "date": "2014-06-26T18:32:04+0000",
            "content": "Can we have a test as well? Also, it'd be nice to upload this as a proper patch against trunk. "
        }
    ]
}