{
    "id": "SOLR-11879",
    "title": "prevent EOFException in FastinputStream",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.3"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "FastInputStream creates and throws a new EOFException, every time an end of stream is encountered. This is wasteful as we never use the stack trace anywhere",
    "attachments": {
        "Screen Shot 2018-01-24 at 7.26.16 PM.png": "https://issues.apache.org/jira/secure/attachment/12907617/Screen%20Shot%202018-01-24%20at%207.26.16%20PM.png",
        "SOLR-11879.patch": "https://issues.apache.org/jira/secure/attachment/12907027/SOLR-11879.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-01-24T22:38:42+0000",
            "content": "Hi Noble,\n\nCan this be committed ? ",
            "author": "Varun Thacker",
            "id": "comment-16338358"
        },
        {
            "date": "2018-01-24T23:26:56+0000",
            "content": "This only seems useful if we have code that reads until an exception is hit (i.e. uses the exception as a signaling mechanism).\u00a0 Do we?\nIf we don't, then making this change would obscure the source of a real bug if it does happen. ",
            "author": "Yonik Seeley",
            "id": "comment-16338409"
        },
        {
            "date": "2018-01-24T23:34:13+0000",
            "content": "The EOFException is actually a signaling mechanism. It's not really an exception ",
            "author": "Noble Paul",
            "id": "comment-16338431"
        },
        {
            "date": "2018-01-25T00:40:20+0000",
            "content": "The EOFException is actually a signaling mechanism. It's not really an exception\n\nIt depends on the user context, not on FastInputStream.\n\nI do see the following code in JavabinLoader:\n\n    FastInputStream in = FastInputStream.wrap(stream);\n    for (; ; ) {\n      try {\n        update = new JavaBinUpdateRequestCodec().unmarshal(in, handler);\n      } catch (EOFException e) {\n        break; // this is expected\n      }\n\n\n\nIt's bad practice to use exceptions as signaling... I assume there should be an easy way to avoid doing so here?\nIt's also unclear how the current code distinguishes between an expected EOF exception and an unexpected one. ",
            "author": "Yonik Seeley",
            "id": "comment-16338492"
        },
        {
            "date": "2018-01-25T03:17:22+0000",
            "content": "It's bad practice to use exceptions as signaling... I assume there should be an easy way to avoid doing so here?\n\nyes. there should be a better way to avoid this by using a different method which is not expected to throw an Exception. ",
            "author": "Noble Paul",
            "id": "comment-16338665"
        },
        {
            "date": "2018-01-25T03:29:50+0000",
            "content": "The back-story here is that Java Flight Recorder is reporting this exception when it's used to analyze fast-n-furious indexing stream. I've attached a screenshot with the limited stack trace.\n\n\u00a0\n\nThis is for a 1 minute run. As you can see 200K+ exceptions were thrown. ",
            "author": "Erick Erickson",
            "id": "comment-16338674"
        },
        {
            "date": "2018-01-25T04:15:17+0000",
            "content": "I guess the easiest solution (without digging into the binary update protocol) is to simply replace the exception catch (which can obscure real issues) with\nFastInputStream.peek() before the call to unmarshal() to see if there is more data. ",
            "author": "Yonik Seeley",
            "id": "comment-16338708"
        },
        {
            "date": "2018-01-26T23:55:11+0000",
            "content": "right. I have attached a patch with that change ",
            "author": "Noble Paul",
            "id": "comment-16341809"
        },
        {
            "date": "2018-01-29T10:41:40+0000",
            "content": "Commit 2c21498621426861393358b5da85195e0caafa48 in lucene-solr's branch refs/heads/branch_7x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2c21498 ]\n\nSOLR-11879: avoid EOFException\u00a0when content is send without a payload ",
            "author": "ASF subversion and git services",
            "id": "comment-16343197"
        },
        {
            "date": "2018-01-29T10:43:04+0000",
            "content": "Commit 586aa65110ab873d5faaf7630341deb1674b29a3 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=586aa65 ]\n\nSOLR-11879: avoid EOFException\u00a0when content is send without a payload ",
            "author": "ASF subversion and git services",
            "id": "comment-16343201"
        },
        {
            "date": "2018-01-29T18:17:25+0000",
            "content": "Hi Noble,\n\n\u00a0\n\nWe should add a CHANGES entry for this right? ",
            "author": "Varun Thacker",
            "id": "comment-16343759"
        },
        {
            "date": "2018-01-30T07:26:00+0000",
            "content": "Commit e2a5d46b9cdc5686051f4de34cca176b50c11fb1 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e2a5d46 ]\n\nSOLR-11879: moved the peek() call inside the for loop ",
            "author": "ASF subversion and git services",
            "id": "comment-16344612"
        },
        {
            "date": "2018-01-30T07:29:36+0000",
            "content": "Commit 1ef988a26378137b1e1f022985dacee1f557f4fc in lucene-solr's branch refs/heads/branch_7x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1ef988a ]\n\nSOLR-11879: moved the peek() call inside the for loop ",
            "author": "ASF subversion and git services",
            "id": "comment-16344617"
        },
        {
            "date": "2018-01-30T12:11:16+0000",
            "content": "We should also remove the exception being ignored as it should always be an error if it happens now? ",
            "author": "Yonik Seeley",
            "id": "comment-16344964"
        },
        {
            "date": "2018-01-30T17:39:54+0000",
            "content": "Yonik Seeley\u00a0There are three places in FastInputStream that I saw on a quick glance that follow this pattern, they should all get attention. This patch eliminates the most egregious one found with JFR.\n\nWDYT about creating a new JIRA to deal with all of them in a bunch? With a couple of separate commits already, this one\u00a0is starting to\u00a0sprawl. It might be easier to deal with in a new\u00a0JIRA.  ",
            "author": "Erick Erickson",
            "id": "comment-16345497"
        },
        {
            "date": "2018-02-05T22:29:51+0000",
            "content": "Commit 5240f697d39d9cc235fed93e79ee25e8b8981792 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5240f69 ]\n\nSOLR-11879: avoid EOFException for empty input streams ",
            "author": "ASF subversion and git services",
            "id": "comment-16353023"
        },
        {
            "date": "2018-02-05T22:31:51+0000",
            "content": "Commit ab1e1550dc554aa291e69dfee154b9c7de33a145 in lucene-solr's branch refs/heads/branch_7x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ab1e155 ]\n\nSOLR-11879: avoid EOFException for empty input streams ",
            "author": "ASF subversion and git services",
            "id": "comment-16353026"
        },
        {
            "date": "2018-04-02T16:39:45+0000",
            "content": "Noble PaulYonik SeeleyCan we close this? ",
            "author": "Erick Erickson",
            "id": "comment-16422730"
        },
        {
            "date": "2018-04-03T11:18:24+0000",
            "content": "This is already fixed in 7.3. we can open a filfol up ticket if necessary ",
            "author": "Noble Paul",
            "id": "comment-16423864"
        }
    ]
}