{
    "id": "LUCENE-5232",
    "title": "Remove doMaxScore from indexsearcher, collector specializations, etc",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Sub-task",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "I think we should just compute doMaxScore whenever doDocScores = true.\n\nThis would remove 4 collector specializations and remove a boolean parameter from 4 indexsearcher methods.\n\nWe can just do this in 5.0 I think.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-09-20T21:39:40+0000",
            "content": "I'm not sure we should do this.\n\nToday, when doMaxScore is false and doScores is true, we only score those hits that make it into the PQ, which is typically a very small subset of all hits. When an app needs scores, I think it often does not need the maxScore.\n\nCan we somehow remove specialization without losing this functionality?  Decouple the two ... ",
            "author": "Michael McCandless",
            "id": "comment-13773461"
        },
        {
            "date": "2013-09-20T22:03:23+0000",
            "content": "Such users can pass their own collector.\n\nSeriously, who is using search(Query query, Filter filter, int n, Sort sort, boolean doDocScores, boolean doMaxScore), so using a sort, and asking for scores, but not asking for the maximum score.\n\nThis sounds to me like someones very special use case baked into lucene: I think we should remove it. ",
            "author": "Robert Muir",
            "id": "comment-13773489"
        },
        {
            "date": "2013-09-20T22:21:01+0000",
            "content": "You know, if we really want to have this crazy specialization, why not move it out to a contrib module, and just have a HuperDuperTopFieldCollector.create() method that generates bytecode for the exact number of sort fields, and a million boolean parameters passed in?\n\nI just dont think it needs to be in IndexSearcher/core lucene. ",
            "author": "Robert Muir",
            "id": "comment-13773508"
        },
        {
            "date": "2013-09-20T22:57:56+0000",
            "content": "How about never computing maxScore when sorting by field (and removing that boolean)?  An app can make a custom collector if they really need that, but I suspect it's uncommon. ",
            "author": "Michael McCandless",
            "id": "comment-13773567"
        },
        {
            "date": "2013-09-21T03:38:35+0000",
            "content": "just have a HuperDuperTopFieldCollector.create() \n\nWe have that, it's called TopFieldCollector.create().\n\nHow about never computing maxScore when sorting by field\n\n+1. We can even offer such Collector.\n\nMaybe what we need is to remove that .search() method from IndexSearcher API, document that the \"sort\" methods never compute scores and that you should use TopFieldCollector.create() if you wish to do that?\n\nAs for the specialization, I agree with Mike that we should decouple the two. I don't know how costly it is, in a real live system, to have a few extra 'ifs' (I don't think luceneutil lets you check that?), but I'm sure that computing a score is in most cases redundant work when sorting by a field and therefore should be avoided. Perhaps we should remove the specializations in favor of the added 'ifs' and let someone write his own Collector if he's worried about perf? ",
            "author": "Shai Erera",
            "id": "comment-13773708"
        },
        {
            "date": "2013-09-21T03:47:27+0000",
            "content": "Sorry, I guess I'm against \"never computing this shit\"... because you guys think returning NaN is ok.\n\nI don't. Its not.\n\nif you want to make these optimizations, fix the APIs so its intuitive, otherwise, no way. ",
            "author": "Robert Muir",
            "id": "comment-13773713"
        },
        {
            "date": "2013-09-21T04:28:01+0000",
            "content": "Maybe we can fix the API by making maxScore private on TopDocs, and throw IllegalStateException if you call it, yet it's NaN? I think it's an overkill though and it's enough to document that that's the behavior if you don't ask to compute maxScore. ",
            "author": "Shai Erera",
            "id": "comment-13773721"
        },
        {
            "date": "2013-09-21T04:51:43+0000",
            "content": "who the fuck is asking for scores, but not the max score, and why does their insanely specialized use case justify all these booleans on a central lucene class. ",
            "author": "Robert Muir",
            "id": "comment-13773726"
        },
        {
            "date": "2013-09-21T05:13:34+0000",
            "content": "Well, maybe start with why computing maxScore at all, even for a TopScoreDocCollector? We use that to normalize document scores when doing some form of distributed search. When you use TSDC, it's easy to fill TopDocs.maxScore, because it's already known. When you sort by a field, you have to score every document in order to fill maxScore, as Mike pointed out, and not just those that make it into the heap based on their sort value.\n\nI think the problematic API here might be TopFieldDocs extending TopDocs. I believe that when you ask to sort, you don't need scores. That's the common case. So if we e.g. returned a TopFieldDocs which does not extend from TopDocs, and FieldDoc only gave you the sort-by values + 'doc', then we can remove doScore + doMaxScore entirely from TopFieldCollector. Let the users that need to know the score in addition to the sort-by values write a custom Collector. Or, they can put a SortField.SCORE as the last sort-by field, and they get the scores already in FieldDoc.fields. ",
            "author": "Shai Erera",
            "id": "comment-13773730"
        },
        {
            "date": "2018-07-30T07:51:21+0000",
            "content": "LUCENE-8405 and LUCENE-8412 removed doMaxScore and doDocScores. ",
            "author": "Adrien Grand",
            "id": "comment-16561585"
        }
    ]
}