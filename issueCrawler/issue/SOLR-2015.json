{
    "id": "SOLR-2015",
    "title": "add a config hook for autoGeneratePhraseQueries",
    "details": {
        "affect_versions": "3.1,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "After committed LUCENE-2458, a hook for autoGeneratePhraseQueries will be convenient for some situation.",
    "attachments": {
        "SOLR-2015.patch": "https://issues.apache.org/jira/secure/attachment/12450386/SOLR-2015.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12891935",
            "date": "2010-07-24T05:51:37+0000",
            "content": "This should really be on a per-field basis at a minimum.\nEven better, it should be in the token stream itself (i.e. some produced groups of tokens should be treated as a phrase, and some shouldn't... only the filter producing them knows for sure). "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12891971",
            "date": "2010-07-24T12:07:14+0000",
            "content": "How can I implement \"on a per-field basis\"? The flag seems to affect globally. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12891972",
            "date": "2010-07-24T12:15:20+0000",
            "content": "How can I implement \"on a per-field basis\"?\n\nFor per-field control, you must do it in your subclass instead of the flag.\nThe easiest way is this:\n\n\n@Override\nprotected Query getFieldQuery(String field, String queryText, boolean quoted) {\n// if we should generate for this field, then hardcode 'true' as quoted.\n// so this means all whitespace-separated parts of the query are treated as quoted.\nif (shouldAutoGeneratePhrasesFor(field))\n  Query = super.getFieldQuery(field, queryText, true);\nelse\n  Query = super.getFieldQuery(field, queryText, quoted);\n}\n\n "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12891987",
            "date": "2010-07-24T15:09:07+0000",
            "content": "I see, thanks. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12892013",
            "date": "2010-07-24T18:30:45+0000",
            "content": "I'm upping this to the highest priority and taking it since the default behavior for our solr example server now really stinks. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12892015",
            "date": "2010-07-24T18:39:12+0000",
            "content": "I'm upping this to the highest priority and taking it since the default behavior for our solr example server now really stinks. \n\nI don't think the default behavior stinks at all. As stated before, it now works with languages such as Thai where it formerly didnt really work at all (all queries are phrase queries).\nIf you don't think the behavior for english is perfect thats fine, but an open source product should work reasonably well for all languages.\nSo I don't think we should default with this behavior on, this behavior that is tied to whitespace-tokenization. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12892017",
            "date": "2010-07-24T19:51:32+0000",
            "content": "OK, here's a prototype patch.\nI'll add some tests next. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12892019",
            "date": "2010-07-24T20:09:03+0000",
            "content": "Yonik, i just dont think the default for autoGeneratePhrase queries should be \"true\", but false instead.\nThis is no problem for older existing schemas as the Version constant is respected already.\nAnd I think it should be documented (e.g. in the example type text) that this option might not be suitable for non-whitespace separated languages.\n\nOther than these concerns, I think in the fieldtype like this is a good approach. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12892024",
            "date": "2010-07-24T20:34:12+0000",
            "content": "autoGeneratePhrase=true has been the behavior forever (before July 19th)... this just allows the behavior configurable per-field.  Changing the default to false would only make sense if it was a better choice for the majority of our users... and I don't think it is.\nAlthough back compat is not the primary concern here, it is nice that someone can switch to the newest version and cut-n-paste some of their previous field definitions that worked well for them.\n\nOur example schema is english oriented.\nAll of the example docs are in english, the \"text\" field has an english stemmer, the tutorial is in english, and people must know english in order to collaborate with our development.  English is the international language and we shouldn't make relevancy worse for it and other whitespace delimited languages by default.\n\nI do also want to make things work better for other international languages - but not at the cost of european languages.  Given our existing user base, I think that's an acceptable position.  Now that we have both the ability to turn off autoGeneratePhrase, and the ability to configure it per-field,  what international field types should we add to the example schema to improve the situation? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12892029",
            "date": "2010-07-24T20:58:05+0000",
            "content": "though I disagree with a signficant amount of statements you made,\nI don't think we would ever come to agreement anyway.\n\nbut, my concerns about this default basically disappear if we could\nhave example configs for other languages: first-class in the example\nschema.xml and not tucked away and difficult to find. could even be\ncommented out.\n\nbecause my problem with the default is all about making it more\ndifficult to get reasonable behavior, forcing people to go thru \nunneccessary hoops when all this shit can easily work. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12892037",
            "date": "2010-07-24T22:08:47+0000",
            "content": "Here's an updated patch that adds a simple test, along with adding a note about autoGeneratePhraseQueries=\"true\" not working well for non whitespace delimited languages. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-12892094",
            "date": "2010-07-25T10:39:05+0000",
            "content": "Can we make different example config/schema XML files for whitespace vs non-whitespace languages?\n\nIe such that on install you must make an explicit choice and copy the right files over, before starting Solr? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12892101",
            "date": "2010-07-25T14:07:06+0000",
            "content": "\nCan we make different example config/schema XML files for whitespace vs non-whitespace languages?\n\nIe such that on install you must make an explicit choice and copy the right files over, before starting Solr?\n\n+1, the config shouldn't be in english, english isn't the international language, its not special.\n\nIt might be important to Lucid or someone else, but I don't give a shit about it. \n\nThis is an open source project, one language doesnt get to be held in higher esteem than another. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12892114",
            "date": "2010-07-25T16:21:30+0000",
            "content": "Ie such that on install you must make an explicit choice and copy the right files over, before starting Solr?\n\nSolr doesn't have an installer though... you unzip and  \"cd example; java -jar start.jar\".\nAnd there are also some people interested in multiple languages in the same index.  Aside: some of these people would like multiple languages in the same field, which is part of the reason why I always felt that a the information about how two tokens are related should be produced by the tokenizer/filter creating such tokens.\n\nCan we make different example config/schema XML files for whitespace vs non-whitespace languages?\n\nI'm not sure what that would accomplish by itself though... it's not like solr is much of an out-of-the-box solution for anything.\nWe have a default example so that people can easily run through the tutorial, and execute examples on wiki pages.\nIf there is a single field type that is good for many non-whitespace languages, it seems like we should just add it to the example schema.\nAnd if there is enough demand to demonstrate Solr's international capabilities, we could add a few different-language docs to example/exampledocs and perhaps even to the tutorial.\n\nMore OOTB support for many languages is related to SOLR-1860 too.\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12892117",
            "date": "2010-07-25T16:39:28+0000",
            "content": "Aside: some of these people would like multiple languages in the same field, which is part of the reason why I always felt that a the information about how two tokens are related should be produced by the tokenizer/filter creating such tokens.\n\nI don't think we should design our apis around such hacks, especially unproven ones. I don't think the auto phrase generation actually helps english at all, and no one has shown results anywhere that it helps. The reason I don't think it helps is because any improvement in precision is accompanied by decrease in recall: e.g. in this example from the user list, not using the phrase query would find the document, but if you use the phrase query, it doesn't. http://www.lucidimagination.com/search/document/bacf34995067e3cb/worddelimiterfilter_and_phrase_queries\n\nFurthermore, I dont think we should try to make complicated support for multiple languages. Instead we should support simple, proven approaches such as simple language-independent tokenization or n-gram analysis that actually works, not trying to support fine-grained detection and fancy stuff that overly complicates APIs and only provides worse results: http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.111.6844 "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-12892291",
            "date": "2010-07-26T12:39:46+0000",
            "content": "Don't forget that this auto-phrase-gen is buggy: if the user's query\nis wi fi, then this will not turn into a phrase.\n\nReally, it's QueryParser that's buggy: it should not assume it can\npre-split on whitespace.\n\nAs Robert has pointed out, even if the feature weren't buggy, there's\nno evidence auto-phrase-gen actually improves relevance even for\nEnglish.\n\nYet it's most definitely disastrous for non-whitespace languages (CJK,\nThai, etc.).\n\nThis is why, in my opinion, if we must pick a single global default\n(for the 'text' field in Solr's example schema.xml), it should be\ndisabled by default: it's buggy for English and catastrophic for\nnon-whitespace languages.\n\nTo fix this \"correctly\", we somehow need a better QueryParser/Analyzer\ninteraction, such that all variants of wifi (WiFi, wifi, wi fi, wi-fi)\nare consistently mapped during indexing and searching.  Just adding a\nnew per-token attr doesn't fix it (the wi fi example, above).\n\n\nI'm not sure what that would accomplish by itself though... it's not like solr is much of an out-of-the-box solution for anything.\nWe have a default example so that people can easily run through the tutorial, and execute examples on wiki pages.\n\nI suspect many apps take the default solrconfig/schema and run with\nit / iteratitvely tweak it.\n\nSolr doesn't have an installer though... you unzip and \"cd example; java -jar start.jar\".\n\nMaybe we insert a \"cp \n{english,cjk}\nschema.xml schema.xml\" in between\nthose two steps?  This would avoid the global default, ie, force an\nexplicit choice.\n\nOr maybe we make separate default fieldTypes in schema.xml\n(text_whitespace, text_non_whitespace \u2013 need better names)?\n\nOr, maybe we make this setting take three values: unset, on, off.  It\ndefaults to unset, but Solr refuses to run with this value, throwing\nan exception saying you must set it?\n\nSomething along these lines would let us avoid having to agree on a\nglobal default, ie, make the choice explicit.\n\nThis is just like what we did with maxFieldLength a while back.  Previously\nit silently truncated after 10K terms, which was a dangerous default.  So, we\nforced the choice, by making it a required param in IW.   (Later we then\nchange the default to no truncation, and make it not required). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12892304",
            "date": "2010-07-26T13:32:30+0000",
            "content": "Even for the euro-languages where people think this is helpful, its sometimes a disaster.\n\nI noticed a french case here where it caused a serious problem (enough for them to write custom code to try to get around it): http://www.hathitrust.org/blogs/large-scale-search/tuning-search-performance\n\nFinally, I think this dictates behavior to the end user, and doesn't consider their information need at all.\nSince google etc have become popular, i think users are familiar with putting things in quotes themselves. \nSo a user who wants this behavior (causing a phrase) can always trigger it by putting the query in quotes.\n\nThis allows them to refine the query themselves like they would do in any other situation, its way more user-friendly\nand consistent. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12892314",
            "date": "2010-07-26T14:09:14+0000",
            "content": "is wi fi, then this will not turn into a phrase.\n\nRight - but there's just a lack of information that can't be helped?\nSo while one might want stuff like this as a phrase, I don't think it's a bug that it's not.\n\nWhat is a problem though is the lack of ability for the user to add additional context to fix the issue (i.e. a SynonymFilter to manually map \"wi fi\" wouldn't work since it would get \"wi\" and then \"fi\" in separate runs.\n\nWhat is also the problem is that if the original doc contained \"wifi\" then a query of \"wi-fi\" won't match (since it queries for \"wi fi\").  We work around this today (for people that really need it) by indexing a second field that catenates instead of splits the parts of a split token).  It's certainly not ideal, but people tend to be happy with the cases we can match.\n\nSo while our current system is far from perfect (and we should work on improving it).\nThe problem is not that we have an incorrect solution, but an incomplete solution.\nLet's assume we had a QP that didn't split on whitespace (or whatever our optimal solution is).\nIMO, I would still want tokens joined by a dash to form a phrase query, just like tokens surrounded by quotes.\nIt's important information and shouldn't be discarded.\n\nthere's no evidence auto-phrase-gen actually improves relevance even for English.\n\nIMO, it's a case of \"the customer is always right\".   Many people have asked how to do this sort of matching over the years and I think there is plenty of evidence that it increases relevancy.\n\nMaybe we insert a \"cp {english,cjk}schema.xml schema.xml\" in between those two steps? This would avoid the global default, ie, force an explicit choice.\n\nAnd the tutorial that's in english would tell them to copy the english one... that only hurts english speakers and doesn't help anyone else..\nWe can have different text field types in a single schema - it's just a matter of adding another one that's good for non-whitespace delimited languages? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12892318",
            "date": "2010-07-26T14:15:24+0000",
            "content": "Many people have asked how to do this sort of matching over the years and I think there is plenty of evidence that it increases relevancy.\n\nYou still haven't provided any evidence.\n\nit's just a matter of adding another one that's good for non-whitespace delimited languages?\n\nThere isn't a single tokenizer that is good for all these languages. ICUTokenizer is ok on average for these, but its not integrated.\nI think we should add examples for all languages instead. The problem affects some whitespace-delimited languages, too. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12892319",
            "date": "2010-07-26T14:22:41+0000",
            "content": "What would the fieldType for a generic international field look like?\nIf we can decide on that, we could add it at least.\n\nedit: paths crossed - I see you answered that above. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12892321",
            "date": "2010-07-26T14:30:44+0000",
            "content": "What would the fieldType for a generic international field look like?\n\nAll I am asking for is to add commented out text_XX examples for the languages we support?\nThis shouldnt affect the time it takes to startup solr and would resolve my concerns.\n "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-12892330",
            "date": "2010-07-26T15:35:23+0000",
            "content": "The problem is not that we have an incorrect solution, but an incomplete solution.\n\nTrue, but... I think you're splitting hairs \n\nFrom the user's standpoint, auto-phrase is flakey \u2013 in some cases it\nworks, in others it doesn't.\n\n\nLet's assume we had a QP that didn't split on whitespace (or whatever our optimal solution is).\nIMO, I would still want tokens joined by a dash to form a phrase query, just like tokens surrounded by quotes.\nIt's important information and shouldn't be discarded.\n\nI agree we shouldn't discard a user's dashes \u2013 they are important.\nGoogle also treats wizard-of-oz as a phrase query (Uwe seems\nparticularly fond of this!).\n\nHmm though I just tried wizard-of-oz, wizard of oz, and \"wizard of\noz\", and got 3 different sets of results, from Google... hmmm.\n\nWe can have different text field types in a single schema - it's just a matter of adding another one that's good for non-whitespace delimited languages?\n\nOK this seems like a good solution for now, until we fix QP/Analyzer\nto do this \"privately\". "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013220",
            "date": "2011-03-30T15:45:54+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}