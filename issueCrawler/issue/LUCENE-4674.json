{
    "id": "LUCENE-4674",
    "title": "Consistently set offset=0 in BytesRef.copyBytes",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Task",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "BytesRef.copyBytes(BytesRef other) has two branches:\n\n\teither the destination array is large enough and it will copy bytes after offset,\n\tor it needs to resize and in that case it will set offset = 0.\n\n\n\nI think this method should always set offset = 0 for consistency, and to avoid resizing when other.length is larger than this.bytes.length - this.offset but smaller than this.bytes.length.",
    "attachments": {
        "LUCENE-4674.patch": "https://issues.apache.org/jira/secure/attachment/12564151/LUCENE-4674.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-01-10T10:48:22+0000",
            "content": "Patch. Additionally I added a call to ArrayUtil.oversize to make resizing less likely. ",
            "author": "Adrien Grand",
            "id": "comment-13549529"
        },
        {
            "date": "2013-01-10T10:54:28+0000",
            "content": "I dont really agree (i dont think this class should be treated like stringbuffer).\n\nchanging offset to 0 is fine when we make a new array: otherwise it is definitely and 100% certainly NOT OK as we may overwrite unrelated data. ",
            "author": "Robert Muir",
            "id": "comment-13549533"
        },
        {
            "date": "2013-01-10T10:57:26+0000",
            "content": "moreover, any proposed changes here should also include the changes to IntsRef, LongsRef, CharsRef, and so on before even being considered.\n\nOtherwise the apis just get out of wack.\n\nMaybe we should just seriously consider just switching to java.nio.Buffer. ",
            "author": "Robert Muir",
            "id": "comment-13549534"
        },
        {
            "date": "2013-01-10T11:01:20+0000",
            "content": "I agree with Robert. We had BytesRef and CharsRef in the past doing that stuff. But as the name of the class is *Ref not *Buffer, it should only hold a reference to a byte[] and not change it or grow it. Esspecially it should not change offset. This is risky, if you get a BytesRef that points to some slice in a larger buffer and you suddenly resize it, invalidating content that might be needed by other stuff (e.g. while iterating terms, the previous/next term gets corrupted).\n\nI would in any case favour to use ByteBuffer instead of this unsafe and inncomplete \"duplicate\". BytesRef is for user-facing APIs a mess. ",
            "author": "Uwe Schindler",
            "id": "comment-13549536"
        },
        {
            "date": "2013-01-10T11:06:44+0000",
            "content": "I still find confusing that we are allowed to write past offset + length but not before offset.\n\nSwitching to the java.nio buffers sounds good. ",
            "author": "Adrien Grand",
            "id": "comment-13549538"
        },
        {
            "date": "2013-01-10T11:13:07+0000",
            "content": "I recently (LUCENE-4620) moved some facets code to use BytesRef and IntsRef and found these two classes very convenient. The only thing that I found missing is a *Ref.upto. E.g., I first made the mistake for (int i = bytes.offset; i < bytes.length; i+), where the correct form is for (int i = bytes.offset; i < bytes.length + bytes.offset; i) (but then you need to do that '' at every iteration, or extract it to a variable).\n\nI considered using BytesBuffer instead, but as long as e.g. a Payload is represented as a BytesRef, it's a waste to always ByteBuffer.wrap(BytesRef.bytes, offset, length). I used BytesRef as it was very convenient (and if we add an 'upto' index to them, that'd even be greater ).\n\nI agree that grow() is currently risky, as it may override some data that is used by another thread (as a slice to the buffer).  But that can be solved with proper documentation I think.\n\nI also agree that we should not set offset to 0. I did that, and MemoryCodec got upset . For all practical purposes, apps should treat offset and length as final (we should not make them final though, just document it). If an app messes with them, it should better know what it's doing. ",
            "author": "Shai Erera",
            "id": "comment-13549542"
        },
        {
            "date": "2013-01-10T11:14:30+0000",
            "content": "the whole class is confusing.\n\nbut the problem with this proposed change is very simple:\nBytesRef a = new BytesRef(bigbyte, 0, 5);\nBytesRef b = new BytesRef(bigbyte, 5, 10);\n\nb.copy(someOtherStuff...) should NOT muck with a. \n\nA is unrelated to B. \n\nI think realistically we should avoid methods like append/copy alltogether as they encourage more\nstringbuffer-type use like this.\n\nif you want a stringbuffer-type class, it can safely support methods like this, but then it should\nown the array (make a copy).  ",
            "author": "Robert Muir",
            "id": "comment-13549543"
        },
        {
            "date": "2013-01-10T11:16:51+0000",
            "content": "b.copy(someOtherStuff...) should NOT muck with a.\n\nUnfortunately a.copy(otherStuff) will modify b if otherStuff.length > 5. ",
            "author": "Adrien Grand",
            "id": "comment-13549544"
        },
        {
            "date": "2013-01-10T11:21:25+0000",
            "content": "how about allocating a new byte[] if someOtherStuff offset + length > this.offset + length? ",
            "author": "Shai Erera",
            "id": "comment-13549546"
        },
        {
            "date": "2013-01-10T11:35:15+0000",
            "content": "I will open a new issue to remove all write methods from bytesref.\n\nthis is a ref class, not a stringbuilder. we have to keep these apis contained. ",
            "author": "Robert Muir",
            "id": "comment-13549554"
        },
        {
            "date": "2013-01-10T13:17:02+0000",
            "content": "\nUnfortunately a.copy(otherStuff) will modify b if otherStuff.length > 5.\n\nI still like the idea of fixing this myself (maybe Shai's idea?). i don't like this kind of dangerous stuff!!!!!!\n\nI ultimately think LUCENE-4675 is the next logical step, but can we remove this a.copy()-overwrites-b trap as an incremental improvement?\n\nthats a bug in my opinion. ",
            "author": "Robert Muir",
            "id": "comment-13549596"
        },
        {
            "date": "2013-01-10T13:27:50+0000",
            "content": "I still like the idea of fixing this myself (maybe Shai's idea?). i don't like this kind of dangerous stuff!!!!!!\n\nThe 'upto' idea or \"allocating a new byte[] if someOtherStuff offset + length > this.offset + length?\" ?\n\nI ultimately think LUCENE-4675 is the next logical step, but can we remove this a.copy()-overwrites-b trap as an incremental improvement?\n\nRegarding the idea to switch to the java.nio buffers, are there some traps besides backward compatibility? Should we start migrating our internal APIs to this API (and maybe even the public ones for 5.0?). ",
            "author": "Adrien Grand",
            "id": "comment-13549625"
        },
        {
            "date": "2013-01-10T13:31:40+0000",
            "content": "\n\"allocating a new byte[] if someOtherStuff offset + length > this.offset + length?\" ?\n\nThis, preventing a.copy(otherStuff) from overflowing onto b.\n\nI dont want any other functionality in this class. it needs less, not more.\n\n\nRegarding the idea to switch to the java.nio buffers, are there some traps besides backward compatibility? Should we start migrating our internal APIs to this API (and maybe even the public ones for 5.0?).\n\nI haven't even thought about it really. I actually am less concerned about our internal apis. \n\nIts the public ones i care about.\n\nI would care a lot less about BytesRef & co if users werent forced to interact with them. ",
            "author": "Robert Muir",
            "id": "comment-13549630"
        }
    ]
}