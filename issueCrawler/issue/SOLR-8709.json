{
    "id": "SOLR-8709",
    "title": "Add checksum to the TopicStream to ensure delivery of all documents within a Topic",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Currently the TopicStream can miss documents if version numbers are received out-of-order. The TopicStream sorts on version number so it will only miss out-of-order versions that span commit boundaries. Stress testing was not able to create a missed document scenario (see comment below), but code review points to the possibility of this happening.\n\nIn order to resolve this issue we can adopt an approach that keeps a checksum of the version numbers for a sliding time window. This checksum can be checked each run and if the checksums don't match the documents from the time window can be resent. As long as the time window is longer then the softCommit interval, this will guarantee delivery of all documents for the Topic. This won't guarantee one time delivery but should be provide a reasonable expectation of one time delivery.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-04-05T01:31:11+0000",
            "author": "Joel Bernstein",
            "content": "I wanted to give an update on this ticket as Solr 6.0 is here and the TopicStream is part of the release.\n\nI made a pretty serious attempt to devise a stress test that would cause the TopicStream to miss documents. In the test that I devised the TopicStream never missed documents.\n\nHere is the outline of the test:\n\n1) Start a multi-threaded client to index documents to Solr. I tested with 5, 8, 12, 16 and 20 indexing threads. Indexing rate was about 22,000 docs per second with this setup.\n2) At the same time start a TopicStream and have it run a *:* query, pulling all new documents, writing the version numbers to a file.\n3) Compare the # of version numbers in the file to number of docs in the index. First I piped the file to sort | uniq to ensure that no version numbers were pulled twice.\n\nThe outcome of this test was that the number of version numbers in the file always matched the record count in the Solr collection. The TopicStream never missed documents due to out of order version numbers.\n\nI ran these tests over and over again for several hours. Each time the record counts matched up.\n\nI'm still confused by this outcome because I expected to be able to cause the issue. In an offline chat with Yonik Seeley, he assured me that out of order version numbers could occur. A review of the code seems to show that it is possible for out of order version numbers to be added to the index.\n\nBut the fact remains that I was not able to break the TopicStream under a fairly rigorous test scenario.\n\nIt is possible that the way that flushes and commits are being processed that out of order version numbers won't span commit boundaries. In order for the TopicStream to lose documents the out of order version numbers must span a commit boundary. But a review of the code did not make this clear.\n\nSo until we're able to clear this up I'll consider this an open issue and I'll mention it in the TopicStream documentation.\n\nIf it does turn out that the TopicStream can lose documents due to out-of-order version numbers the \"retentionWindow\" described in the comment above will eliminate the issue.\n\n\n\n\n\n\n ",
            "id": "comment-15225481"
        },
        {
            "date": "2016-04-05T15:18:11+0000",
            "author": "Yonik Seeley",
            "content": "It is possible that the way that flushes and commits are being processed that out of order version numbers won't span commit boundaries.\n\nHow are commits being done?  As you say, a reorder would need to cross a commit boundary, and a search would need to be done at just that time for this to be visible.\nThe number of commits are going to be far less than the number of document adds (and reorders), even with something like a soft auto commit of 1 sec, so it's not surprising that it's hard to see.  ",
            "id": "comment-15226438"
        },
        {
            "date": "2016-04-05T16:13:22+0000",
            "author": "Joel Bernstein",
            "content": "Commit settings were:\n\n1 second hard commits\n2 second soft commits\n\nThe softCommit is what matters because the TopicStream is working off of index snapshots.\n\nIn reviewing the code, it certainly looks like there is room for out-of-order version numbers to cross commit boundaries, but I would expect to see it happen in a stress test.\n\nI'm thinking about changing this ticket to maintain a checksum of the version numbers for a time window. Then resending the time window if the checksums don't match. This is much more manageable then attempting to track all version numbers for a time window. This won't provide guaranteed one time delivery of documents, but it will provide guaranteed delivery of all documents in a topic, with a reasonable expectation of one time delivery. ",
            "id": "comment-15226550"
        },
        {
            "date": "2016-10-05T01:38:43+0000",
            "author": "Shishir Choudhary",
            "content": "This feature is very useful. Is it going to be fixed soon ?  ",
            "id": "comment-15547325"
        }
    ]
}