{
    "id": "LUCENE-7575",
    "title": "UnifiedHighlighter: add requireFieldMatch=false support",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": [
            "6.4"
        ]
    },
    "description": "The UnifiedHighlighter (like the PostingsHighlighter) only supports highlighting queries for the same fields that are being highlighted.  The original Highlighter and FVH support loosening this, AKA requireFieldMatch=false.",
    "attachments": {
        "LUCENE-7575.patch": "https://issues.apache.org/jira/secure/attachment/12840909/LUCENE-7575.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15695991",
            "date": "2016-11-25T14:35:55+0000",
            "content": "This should be straight-forward to add to the term & automata extraction routines.  \n\nPhraseHelper is a bit more work when it comes time to actually executing the SpanQuery... it probably needs to wrap the LeafReader in order to always return the field being highlighted no matter which field is being asked for.  If the query contains the same span query except differentiated by field (e.g. same SpanNear tree but only different field), it would be nice if it could be identified so that we don't do the work additional times.  But that's not essential. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15706216",
            "date": "2016-11-29T19:03:59+0000",
            "content": "Hi David Smiley,\nI've attached a patch based on the comment above. I did not find a clean way to detect duplicates in the span queries extracted by the PhraseHelper when requireFieldMatch=false. I agree that it's not essential so I pushed the patch as is. Could you please take a look ? ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15706218",
            "date": "2016-11-29T19:04:48+0000",
            "content": "Patch for requireFieldMatch ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15709524",
            "date": "2016-11-30T19:28:24+0000",
            "content": "Thanks for this contribution Jim! You're the first one to improve the UH outside of those who first worked on it.\n\nOverall patch looks pretty good.\n\nUnifiedHighlighter:\n\n\tWhat do you think of adding this to the HighlightFlags instead?  It's intended to be a single point to capture various boolean options.  As an aside, I'm kinda wondering if the default* and DEFAULT* boolean fields shouldn't exist and instead simply have a highlightFlags enumSet field.\n\tI think the results of filterExtractedTerms might now contain duplicated terms (BytesRefs)?  (see my note later about testing the same term and varying the field). We could simply collect those bytes into a HashSet, then extract to an array and then sort.\n\n\n\nPhraseHelper:\n\n\tYou applied SingleFieldFilterLeafReader at the top of getTermToSpans but I think this should be done by the caller so it happens just once, not per SpanQuery.\n\tFieldRewritingTermHashSet is so close to the other other one... hmm.... what if we had just one, remove \"static\" from class (thus has access to fieldName & requireFieldMatch), and then implement add() appropriately.\n\n\n\nTests:\n\n\tyou used the same test input string for both the \"field\" and \"field_require_field_match\" fields. To make this more clear; can you vary them if even a little?\n\tin no test queries do I see the same term BytesRef across more than one field.  For example, maybe add a test incorporating something like field:test OR field_require_field_match:test \u2013 granted the results might not be interesting but lets hope it doesn't puke.  Do for phrase as well.\n\n\n\nI agree this requireFieldMatch=false should not be the default. It'll add some overhead \u2013 especially for phrase and other position sensitive queries since we aren't de-duplicating them.  Besides, it's more accurate as-is.\n\nAs an aside... it'd be interesting if instead of a simple boolean toggle, if it were a Predicate<String> fieldMatchPredicate so that only some fields could be collected in the query but not all.  Just an idea. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15709621",
            "date": "2016-11-30T20:03:38+0000",
            "content": "Looks good to me too.  Some additional suggestions:\n\nUnifiedHighlighter:\n\n\t+1 on the suggestion to use HighlightFlags instead.\n\n\n\nPhraseHelper:\n\n\tIt's clearer in my opinion to change the boolean branch to something like \n\n if (!requireFieldMatch) {} else {} \n\n instead of checking \n\n requireFieldMatch == false \n\n.  Even better would be swapping the branches so it's \n\nif (requireFieldBranch) {} else {}\n\n\tSimilar point for line 287 \n\n if (requireFieldMatch && fieldName.equals(queryTerm.field()) == false) {} \n\n\n\n\nTestUnifiedHiglighter:\n\n\tI think it'd be clearer to separate the the cases for term/phrase/multi-term queries into separate tests.  This makes it easier to chase bugs down the line if only 1 fails.  (And provides more information if all 3 fail)\n\n ",
            "author": "Timothy M. Rodriguez"
        },
        {
            "id": "comment-15721877",
            "date": "2016-12-05T10:26:40+0000",
            "content": "Thanks David Smiley and Timothy M. Rodriguez !\n\nI pushed a new patch to address your comments. \n\n\n it'd be interesting if instead of a simple boolean toggle, if it were a Predicate<String> fieldMatchPredicate so that only some fields could be collected in the query but not all. Just an idea.\n\nI agree and this is why I changed the patch to include your idea. By default nothing changes, queries are extracted based on the field name to highlight. Though with this change the user can now define which query (based on the field name) should be highlighted. I think it's better like this but I can revert if you think this should not implemented in the first iteration.\n\nI fixed the bugs that David spotted (terms from different fields not sorted after filteredExtractTerms and redundant initialization of the filter leaf reader for the span queries) and split the tests based on the type of query that is tested. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15722472",
            "date": "2016-12-05T15:00:21+0000",
            "content": "This is looking really good now Jim!  I like this Predicate<String> approach.\n\nUH:\n\n\tMaybe change  UH.extractTerms to simply be a Set (HashSet) since we needn't pay any sorting expense up front any longer.\n\tcouldn't defaultFieldMatcher be initialized to non-null to match the same field?  Then getFieldMatcher() would simply return it.\n\n\n\nPhraseHelper: \n\n\tthe comment on the fieldName field about being non-null isn't true anymore; in fact it's required.  Perhaps add Objects.requireNonNull(...) in c'tor if you want.\n\tI can see why you changed FieldFilteringTermHashSet to extend TreeSet.  But you now need to modify the javadocs & class name accordingly; perhaps removing the implementation detail like this\n\n\n\nNice tests.  That's it. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15722479",
            "date": "2016-12-05T15:03:29+0000",
            "content": "Tim, by the way, the style of checking booleans with == false is common in Lucene deliberately... some folks (like Rob and perhaps others) feel this is actually more clear than a leading exclamation point.  I sorta agree but don't have a strong opinion.  So I tend to follow this now too. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15722534",
            "date": "2016-12-05T15:26:22+0000",
            "content": "Thanks David !\nHere is a new patch to address your last comments. Now we have a FieldFilteringTermSet and extractTerms uses a simple HashSet.\n\n\ncouldn't defaultFieldMatcher be initialized to non-null to match the same field? Then getFieldMatcher() would simply return it.\n\nNot as a Predicate<String> since the predicate is only on the candidate field name. We could use a BiPredicate<String, String> to always provide the current field name to the predicate but I find it simpler this way.  ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15722577",
            "date": "2016-12-05T15:46:52+0000",
            "content": "Oh I see; right.\n\nI'll commit your patch later this evening. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15722580",
            "date": "2016-12-05T15:48:34+0000",
            "content": "Thanks David ! ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15723387",
            "date": "2016-12-05T21:12:07+0000",
            "content": "Commit 2e948fea300f883b7dfb586e303d5720d09b3210 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2e948fe ]\n\nLUCENE-7575: Add UnifiedHighlighter field matcher predicate (AKA requireFieldMatch=false) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15723408",
            "date": "2016-12-05T21:21:22+0000",
            "content": "Commit 4e7a7dbf9a56468f41e89f5289833081b27f1b14 in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4e7a7db ]\n\nLUCENE-7575: Add UnifiedHighlighter field matcher predicate (AKA requireFieldMatch=false)\n\n(cherry picked from commit 2e948fe) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15723421",
            "date": "2016-12-05T21:27:52+0000",
            "content": "Thank you.\n\nI was thinking a bit more about the wastefulness of re-creating SpanQueries with different field that are otherwise identical. Some day we could refactor out from WSTE a Query -> SpanQuery conversion utility that furthermore allows you to re-target the field.  With that in place, we could avoid the waste for PhraseQuery and MultiPhraseQuery \u2013 the most typical position-sensitive queries. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15723586",
            "date": "2016-12-05T22:35:11+0000",
            "content": "\nI was thinking a bit more about the wastefulness of re-creating SpanQueries with different field that are otherwise identical. Some day we could refactor out from WSTE a Query -> SpanQuery conversion utility that furthermore allows you to re-target the field. With that in place, we could avoid the waste for PhraseQuery and MultiPhraseQuery \u2013 the most typical position-sensitive queries.\n\nI agree, I'll work on this shortly. Thanks for the hint  ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15727038",
            "date": "2016-12-06T23:13:12+0000",
            "content": "Commit 2e948fea300f883b7dfb586e303d5720d09b3210 in lucene-solr's branch refs/heads/apiv2 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2e948fe ]\n\nLUCENE-7575: Add UnifiedHighlighter field matcher predicate (AKA requireFieldMatch=false) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15727187",
            "date": "2016-12-07T00:24:51+0000",
            "content": "6x backport (commit 4e7a7dbf) wasn't clean \u2013 added a 7.0.0 section to CHANGES.txt ... not sure if anything else came along for the ride that wasn't suppose to. ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-15736587",
            "date": "2016-12-09T22:54:43+0000",
            "content": "David Smiley Please see Hoss Man's comment above? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15737220",
            "date": "2016-12-10T04:58:18+0000",
            "content": "Hoss notified me of my screw-up on the dev list where I replied to him and told him I fixed it (on the 6th):\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201612.mbox/%3cCABEwPvF-Qjiuy7a4FT-EUmG4J2ptvufOLDjUKkdvoUxQaS+7NQ@mail.gmail.com%3e\nHere's the commit to CHANGES.txt  https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=blobdiff;f=lucene/CHANGES.txt;h=21a80e00619d6723fc6d163b5068eae6f25b097f;hp=853f17125b938559c3fab94a8d1aca91a620e29e;hb=8c943b6084ffec3e22b16f4997df1f9fc55f20f5;hpb=135604f6327032d0258227aaa524369203d40822\nPerhaps I should have referenced the issue but the change/correction itself was CHANGES.txt housekeeping that wasn't actually about any particular issue. ",
            "author": "David Smiley"
        }
    ]
}