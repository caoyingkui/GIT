{
    "id": "LUCENE-4510",
    "title": "when a test's heart beats it should also throw up (dump stack of all threads)",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "We've had numerous cases where tests were hung but the \"operator\" of that particular Jenkins instance struggles to properly get a stack dump for all threads and eg accidentally kills the process instead (rather awful that the same powerful tool \"kill\" can be used to get stack traces and to destroy the process...).\n\nIs there some way the test infra could do this for us, eg when it prints the HEARTBEAT message?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-10-26T21:16:38+0000",
            "content": "+1, this would eliminate operator error! ",
            "author": "Robert Muir",
            "id": "comment-13485204"
        },
        {
            "date": "2012-10-27T07:40:42+0000",
            "content": "I vaguely remember people on the mailing list expressed concerns even about the heartbeat messages so throwing stack traces at everyone would be probably a bit too much. I see a few options.\n\n1) Stack traces are dumped at test/suite timeout, so you could simply override the default and lower this timeout locally:\n\nFor tests only:\n-Dtests.timeout=5000!\n\nFor entire suites:\n-Dtests.timeoutSuite=10000!\n\nNote the '!' at the end which means the property should take precedence over annotations. The scale is millis.\n\n2) The above workaround has an obvious problem that the stack trace is not dumped repeatedly which can be extremely useful in telling  which parts of the code a thread was locked in. In fact, randomized runner once HAD a snippet of code which was doing it automatically \u2013 on timeout it would probe stack traces of all threads a few times at random intervals and then it would print the 'diverging' paths for each thread (along with the constant part). I removed it because it wasn't used by anybody \n\nSo... I could add yet another option that would dump stack traces on heartbeats but it would be turned off by default which I think is sensible. This option could also take a number which would mean roughly: \"start dumping stack traces after the N-th heartbeat\".\n\nLet me know if (2) sounds good to you. ",
            "author": "Dawid Weiss",
            "id": "comment-13485376"
        },
        {
            "date": "2012-10-27T07:43:23+0000",
            "content": "Oh, forgot \u2013 both props mentioned above are from randomized testing package so you'd have to add them to common-build.xml and pass them to <junit4:junit4> task. We could probably just replace all the props with a propertyset based on regexp so that all tests.* properties are passed automatically... but then it wouldn't be so explicit so maybe it's actually better the way it is. ",
            "author": "Dawid Weiss",
            "id": "comment-13485378"
        },
        {
            "date": "2012-10-27T12:52:07+0000",
            "content": "\nI vaguely remember people on the mailing list expressed concerns even about the heartbeat messages so throwing stack traces at everyone would be probably a bit too much. \n\nBut we have tests totally hanging and taking minutes of time. So I think their concerns can wait in line!\n\nOn the other hand if we like the test hangs and want to keep them  ",
            "author": "Robert Muir",
            "id": "comment-13485423"
        },
        {
            "date": "2012-10-27T14:09:32+0000",
            "content": "Ok, I'll add it to the heartbeat as an option. Will do it over the weekend. ",
            "author": "Dawid Weiss",
            "id": "comment-13485443"
        },
        {
            "date": "2012-10-27T15:53:05+0000",
            "content": "Thanks Dawid! ",
            "author": "Michael McCandless",
            "id": "comment-13485460"
        },
        {
            "date": "2012-10-27T20:01:47+0000",
            "content": "This is trickier than I thought. The problem is that heartbeats are in fact generated on the master side (not on the forked JVM) based on the activity in the event stream for a particular forked JVM (that's why it was possible to generate a heartbeat from an \"unknown\" location in the test execution timeline). The naming is confusing here, blame me.\n\nTo generate a stack trace of the forked JVM we'd need to do it remotely (and know its PID) or do it locally (and propagate it back to the master). This isn't a trivial refactoring, I'll need some time to do it. In the mean time I'll release the fix for the shutdown hooks issue \u2013 this should help in getting those stalled runs to complete (with a suite timeout on forked JVMs and corresponding stack traces). ",
            "author": "Dawid Weiss",
            "id": "comment-13485491"
        },
        {
            "date": "2012-10-27T20:27:59+0000",
            "content": "Actually getting to the step of printing the PID in the heartbeat message would be really useful! ",
            "author": "Robert Muir",
            "id": "comment-13485494"
        },
        {
            "date": "2012-10-27T20:33:19+0000",
            "content": "Funnily \u2013 that's the hardest part about it... there's just no API to get a PID of the forked process \u2013 I think I've seen a patch to JDK 1.8 somewhere that adds it but for now there's just none. It'd have to be platform-specific trickery to get it. ",
            "author": "Dawid Weiss",
            "id": "comment-13485496"
        },
        {
            "date": "2012-12-07T12:51:31+0000",
            "content": "http://jenkins.sd-datasolutions.de/job/Lucene-Solr-4.x-Linux/3089/console was another example of this.\n\nalternatively we could try to do something like hackup the parent process (ant) to respond to some signals in\na way that helps prevent operator errors. ",
            "author": "Robert Muir",
            "id": "comment-13526350"
        },
        {
            "date": "2012-12-07T13:01:30+0000",
            "content": "Actually getting to the step of printing the PID in the heartbeat message would be really useful!\n\nThe PID is accessible! The parent process cannot get id (the PID of forked process), but the child JVM can get its own PID using the javax.management API. I have to lookup example code. So the child JVM could print it on starting up. ",
            "author": "Uwe Schindler",
            "id": "comment-13526355"
        },
        {
            "date": "2012-12-07T13:03:04+0000",
            "content": "Here is it:\n\nThere exists no platform-independent way that can be guaranteed to work in all jvm implementations. ManagementFactory.getRuntimeMXBean().getName() looks like the best (closest) solution. It's short, and probably works in every implementation in wide use.\n\nOn linux it returns a value like 12345@localhost (12345 being the process id). Beware though that according to the docs, there are no guarantees about this value:\n\nReturns the name representing the running Java virtual machine. The returned name string can be any arbitrary string and a Java virtual machine implementation can choose to embed platform-specific useful information in the returned name string. Each running virtual machine could have a different name.\n(from http://stackoverflow.com/questions/35842/how-can-a-java-program-get-its-own-process-id) ",
            "author": "Uwe Schindler",
            "id": "comment-13526356"
        },
        {
            "date": "2012-12-07T13:06:01+0000",
            "content": "Yeah, it's the one. I can definitely add it to the framework so that it's reported in the logs, even if it's not guaranteed to return the PID. ",
            "author": "Dawid Weiss",
            "id": "comment-13526358"
        },
        {
            "date": "2012-12-07T13:09:59+0000",
            "content": "Maybe instead of printing \"J0\" and \"J1\",... just always print this identification string in all messages? It is platform specific but defined to be unique, so much better than J0, J1,... ",
            "author": "Uwe Schindler",
            "id": "comment-13526360"
        },
        {
            "date": "2012-12-07T13:18:18+0000",
            "content": "I can probably print those identifiers when a VM doesn't respond (and is heartbeating) and once at start? We don't know how long these will be and because they're variable length they can become pretty verbose. ",
            "author": "Dawid Weiss",
            "id": "comment-13526371"
        }
    ]
}