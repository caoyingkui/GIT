{
    "id": "SOLR-6286",
    "title": "TestReplicationHandler.doTestReplicateAfterCoreReload reliably reproducing seed failures comparing master commits before/after reload",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "7.4",
            "master (8.0)"
        ],
        "components": [
            "Tests"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "There have been a few failures on jenkins.\n\n\n3 tests failed.\nREGRESSION:  org.apache.solr.handler.TestReplicationHandler.doTestReplicateAfterCoreReload\n\nError Message:\nexpected:<[{indexVersion=1406477990053,generation=2,filelist=[_bta.fdt, _bta.fdx, _bta.fnm, _bta.si, _bta_Lucene41_0.doc, _bta_Lucene41_0.tim, _bta_Lucene41_0.tip, _bta_nrm.cfe, _bta_nrm.cfs, _nik.cfe, _nik.cfs, _nik.si, _yok.cfe, _yok.cfs, _yok.si, _yp3.cfe, _yp3.cfs, _yp3.si, _yp4.cfe, _yp4.cfs, _yp4.si, _yp5.cfe, _yp5.cfs, _yp5.si, _yp6.cfe, _yp6.cfs, _yp6.si, _yp7.cfe, _yp7.cfs, _yp7.si, _yp8.cfe, _yp8.cfs, _yp8.si, _yp9.cfe, _yp9.cfs, _yp9.si, _ypa.cfe, _ypa.cfs, _ypa.si, _ypu.cfe, _ypu.cfs, _ypu.si, _ypv.cfe, _ypv.cfs, _ypv.si, _ypw.cfe, _ypw.cfs, _ypw.si, _ypx.cfe, _ypx.cfs, _ypx.si, _ypy.cfe, _ypy.cfs, _ypy.si, segments_2]}]> but was:<[{indexVersion=1406477990053,generation=2,filelist=[_bta.fdt, _bta.fdx, _bta.fnm, _bta.si, _bta_Lucene41_0.doc, _bta_Lucene41_0.tim, _bta_Lucene41_0.tip, _bta_nrm.cfe, _bta_nrm.cfs, _nik.cfe, _nik.cfs, _nik.si, _yok.cfe, _yok.cfs, _yok.si, _yp3.cfe, _yp3.cfs, _yp3.si, _yp4.cfe, _yp4.cfs, _yp4.si, _yp5.cfe, _yp5.cfs, _yp5.si, _yp6.cfe, _yp6.cfs, _yp6.si, _yp7.cfe, _yp7.cfs, _yp7.si, _yp8.cfe, _yp8.cfs, _yp8.si, _yp9.cfe, _yp9.cfs, _yp9.si, _ypa.cfe, _ypa.cfs, _ypa.si, _ypu.cfe, _ypu.cfs, _ypu.si, _ypv.cfe, _ypv.cfs, _ypv.si, _ypw.cfe, _ypw.cfs, _ypw.si, _ypx.cfe, _ypx.cfs, _ypx.si, _ypy.cfe, _ypy.cfs, _ypy.si, segments_2]}, {indexVersion=1406477990053,generation=3,filelist=[_bta.fdt, _bta.fdx, _bta.fnm, _bta.si, _bta_Lucene41_0.doc, _bta_Lucene41_0.tim, _bta_Lucene41_0.tip, _bta_nrm.cfe, _bta_nrm.cfs, _nik.cfe, _nik.cfs, _nik.si, _ypc.cfe, _ypc.cfs, _ypc.si, _ypu.cfe, _ypu.cfs, _ypu.si, _ypv.cfe, _ypv.cfs, _ypv.si, _ypw.cfe, _ypw.cfs, _ypw.si, _ypx.cfe, _ypx.cfs, _ypx.si, _ypy.cfe, _ypy.cfs, _ypy.si, segments_3]}]>\n\nStack Trace:\njava.lang.AssertionError: expected:<[{indexVersion=1406477990053,generation=2,filelist=[_bta.fdt, _bta.fdx, _bta.fnm, _bta.si, _bta_Lucene41_0.doc, _bta_Lucene41_0.tim, _bta_Lucene41_0.tip, _bta_nrm.cfe, _bta_nrm.cfs, _nik.cfe, _nik.cfs, _nik.si, _yok.cfe, _yok.cfs, _yok.si, _yp3.cfe, _yp3.cfs, _yp3.si, _yp4.cfe, _yp4.cfs, _yp4.si, _yp5.cfe, _yp5.cfs, _yp5.si, _yp6.cfe, _yp6.cfs, _yp6.si, _yp7.cfe, _yp7.cfs, _yp7.si, _yp8.cfe, _yp8.cfs, _yp8.si, _yp9.cfe, _yp9.cfs, _yp9.si, _ypa.cfe, _ypa.cfs, _ypa.si, _ypu.cfe, _ypu.cfs, _ypu.si, _ypv.cfe, _ypv.cfs, _ypv.si, _ypw.cfe, _ypw.cfs, _ypw.si, _ypx.cfe, _ypx.cfs, _ypx.si, _ypy.cfe, _ypy.cfs, _ypy.si, segments_2]}]> but was:<[{indexVersion=1406477990053,generation=2,filelist=[_bta.fdt, _bta.fdx, _bta.fnm, _bta.si, _bta_Lucene41_0.doc, _bta_Lucene41_0.tim, _bta_Lucene41_0.tip, _bta_nrm.cfe, _bta_nrm.cfs, _nik.cfe, _nik.cfs, _nik.si, _yok.cfe, _yok.cfs, _yok.si, _yp3.cfe, _yp3.cfs, _yp3.si, _yp4.cfe, _yp4.cfs, _yp4.si, _yp5.cfe, _yp5.cfs, _yp5.si, _yp6.cfe, _yp6.cfs, _yp6.si, _yp7.cfe, _yp7.cfs, _yp7.si, _yp8.cfe, _yp8.cfs, _yp8.si, _yp9.cfe, _yp9.cfs, _yp9.si, _ypa.cfe, _ypa.cfs, _ypa.si, _ypu.cfe, _ypu.cfs, _ypu.si, _ypv.cfe, _ypv.cfs, _ypv.si, _ypw.cfe, _ypw.cfs, _ypw.si, _ypx.cfe, _ypx.cfs, _ypx.si, _ypy.cfe, _ypy.cfs, _ypy.si, segments_2]}, {indexVersion=1406477990053,generation=3,filelist=[_bta.fdt, _bta.fdx, _bta.fnm, _bta.si, _bta_Lucene41_0.doc, _bta_Lucene41_0.tim, _bta_Lucene41_0.tip, _bta_nrm.cfe, _bta_nrm.cfs, _nik.cfe, _nik.cfs, _nik.si, _ypc.cfe, _ypc.cfs, _ypc.si, _ypu.cfe, _ypu.cfs, _ypu.si, _ypv.cfe, _ypv.cfs, _ypv.si, _ypw.cfe, _ypw.cfs, _ypw.si, _ypx.cfe, _ypx.cfs, _ypx.si, _ypy.cfe, _ypy.cfs, _ypy.si, segments_3]}]>\n        at __randomizedtesting.SeedInfo.seed([E4FFCDCA8EC968BC:C128D6FAFE8166BF]:0)\n        at org.junit.Assert.fail(Assert.java:93)\n        at org.junit.Assert.failNotEquals(Assert.java:647)\n        at org.junit.Assert.assertEquals(Assert.java:128)\n        at org.junit.Assert.assertEquals(Assert.java:147)\n        at org.apache.solr.handler.TestReplicationHandler.doTestReplicateAfterCoreReload(TestReplicationHandler.java:1190)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\n\n\nhttps://builds.apache.org/job/Lucene-Solr-NightlyTests-4.x/585/",
    "attachments": {
        "SOLR-6286.patch": "https://issues.apache.org/jira/secure/attachment/12919298/SOLR-6286.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "ASF subversion and git services",
            "id": "comment-14075747",
            "date": "2014-07-27T20:27:50+0000",
            "content": "Commit 1613838 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1613838 ]\n\nSOLR-6286: Add logging on how long we slept and how many docs were found "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14075748",
            "date": "2014-07-27T20:28:36+0000",
            "content": "Commit 1613839 from shalin@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1613839 ]\n\nSOLR-6286: Add logging on how long we slept and how many docs were found "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14075942",
            "date": "2014-07-28T06:28:54+0000",
            "content": "What's happening here is that on a core reload, the old IndexWriter is closed which causes a commit and a new generation to be written out. I'd expect that since there were no pending changes, there's be no need to write a new segment. Anyhow, that happens and a comparison between the old and new commit information fails because now we have this new segment that we didn't before. This failure only happens sometimes. The indexversion doesn't change though and the slave says that it is in sync with the master. \n\nThe only difference I could find was that the noCFSRatio changed between the merge policy before reload and after. Before reload we had noCFSRatio=0.8239541096061591:\n\n   [junit4]   2> 4473463 T16555 oasu.RandomMergePolicy.<init> RandomMergePolicy wrapping class org.apache.lucene.index.LogByteSizeMergePolicy: [LogByteSizeMergePolicy: minMergeSize=1677721, mergeFactor=9, maxMergeSize=2147483648, maxMergeSizeForForcedMerge=9223372036854775807, calibrateSizeByDeletes=false, maxMergeDocs=2147483647, maxCFSSegmentSizeMB=8.796093022207999E12, noCFSRatio=0.8239541096061591]\n   [junit4]   2> 4473464 T16555 oasc.SolrDeletionPolicy.onInit SolrDeletionPolicy.onInit: commits: num=1\n   [junit4]   2> \t\tcommit{dir=MockDirectoryWrapper(RAMDirectory@48b4526 lockFactory=org.apache.lucene.store.SingleInstanceLockFactory@1e1c1e52),segFN=segments_1,generation=1}\n   [junit4]   2> 4473464 T16555 oasc.SolrDeletionPolicy.updateCommits newest commit generation = 1\n\n\n\nAfter reload, we had noCFSRatio=1.0:\n\n   [junit4]   2> 5017946 T16548 oasu.RandomMergePolicy.<init> RandomMergePolicy wrapping class org.apache.lucene.index.LogByteSizeMergePolicy: [LogByteSizeMergePolicy: minMergeSize=1677721, mergeFactor=9, maxMergeSize=2147483648, maxMergeSizeForForcedMerge=9223372036854775807, calibrateSizeByDeletes=false, maxMergeDocs=2147483647, maxCFSSegmentSizeMB=8.796093022207999E12, noCFSRatio=1.0]\n   [junit4]   2> 5017949 T16548 oasc.SolrDeletionPolicy.onInit SolrDeletionPolicy.onInit: commits: num=2\n   [junit4]   2> \t\tcommit{dir=MockDirectoryWrapper(RAMDirectory@48b4526 lockFactory=org.apache.lucene.store.SingleInstanceLockFactory@1e1c1e52),segFN=segments_2,generation=2}\n   [junit4]   2> \t\tcommit{dir=MockDirectoryWrapper(RAMDirectory@48b4526 lockFactory=org.apache.lucene.store.SingleInstanceLockFactory@1e1c1e52),segFN=segments_3,generation=3}\n   [junit4]   2> 5017949 T16548 oasc.SolrDeletionPolicy.updateCommits newest commit generation = 3\n   [junit4]   2> 5017950 T16548 oasu.DefaultSolrCoreState.newIndexWriter New IndexWriter is ready to be used.\n\n\n\nStill digging. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-15421208",
            "date": "2016-08-15T16:15:38+0000",
            "content": "This nightly branch_6x failure from my Jenkins reproduces for me, though it takes almost 10 minutes to do so: \n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestReplicationHandler -Dtests.method=doTestReplicateAfterCoreReload -Dtests.seed=1B0EF957D5556B48 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=es-MX -Dtests.timezone=Africa/Blantyre -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE  333s | TestReplicationHandler.doTestReplicateAfterCoreReload <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<[{indexVersion=1471276743771,generation=2,filelist=[_0.cfe, _0.cfs, _0.si, _1.cfe, _1.cfs, _1.si, _2.cfe, _2.cfs, _2.si, _3.cfe, _3.cfs, _3.si, _4.cfe, _4.cfs, _4.si, _5.cfe, _5.cfs, _5.si, segments_2]}]> but was:<[{indexVersion=1471276743771,generation=2,filelist=[_0.cfe, _0.cfs, _0.si, _1.cfe, _1.cfs, _1.si, _2.cfe, _2.cfs, _2.si, _3.cfe, _3.cfs, _3.si, _4.cfe, _4.cfs, _4.si, _5.cfe, _5.cfs, _5.si, segments_2]}, {indexVersion=1471276743771,generation=3,filelist=[_2.cfe, _2.cfs, _2.si, _3.cfe, _3.cfs, _3.si, _4.cfe, _4.cfs, _4.si, _6.fdt, _6.fdx, _6.fnm, _6.nvd, _6.nvm, _6.si, _6_LuceneVarGapDocFreqInterval_0.doc, _6_LuceneVarGapDocFreqInterval_0.tib, _6_LuceneVarGapDocFreqInterval_0.tiv, segments_3]}]>\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([1B0EF957D5556B48:3ED9E267A51D654B]:0)\n   [junit4]    >        at org.apache.solr.handler.TestReplicationHandler.doTestReplicateAfterCoreReload(TestReplicationHandler.java:1229)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-15421260",
            "date": "2016-08-15T16:56:20+0000",
            "content": "I am not sure if it is related: The nightly tests on ASF Jenkins regularily (always) fail currently with OOM errors. Jenkins found a \".hprof\" dump and failed the build because of that. As the tests do not fail with OOM, this looks like a suppressed OOM error and may be related to this one: https://builds.apache.org/job/Lucene-Solr-NightlyTests-master/ (all builds failed since July, all with a heap dump, e.g. https://builds.apache.org/job/Lucene-Solr-NightlyTests-master/1095/):\n\n\n/x1/jenkins/jenkins-slave/workspace/Lucene-Solr-NightlyTests-master/build.xml:771: The following error occurred while executing this line:\n/x1/jenkins/jenkins-slave/workspace/Lucene-Solr-NightlyTests-master/build.xml:715: Some of the tests produced a heap dump, but did not fail. Maybe a suppressed OutOfMemoryError? Dumps created:\n* java_pid26861.hprof\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-15536307",
            "date": "2016-09-30T15:45:06+0000",
            "content": "This nightly 6.x failure from my Jenkins http://jenkins.sarowe.net/job/Lucene-Solr-Nightly-6.x/168 reproduces for me, but only if I first remove -Dtests.method=doTestReplicateAfterCoreReload from the repro line - takes over 12 minutes on my server:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestReplicationHandler -Dtests.method=doTestReplicateAfterCoreReload -Dtests.seed=2E632BF89D2E9EC3 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=el-CY -Dtests.timezone=Asia/Ho_Chi_Minh -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE  441s J2 | TestReplicationHandler.doTestReplicateAfterCoreReload <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<[{indexVersion=1475239345178,generation=2,filelist=[_9by.fdt, _9by.fdx, _9by.fnm, _9by.nvd, _9by.nvm, _9by.si, _9by_FST50_0.doc, _9by_FST50_0.tfp, _ihg.cfe, _ihg.cfs, _ihg.si, _ms4.cfe, _ms4.cfs, _ms4.si, _ms5.cfe, _ms5.cfs, _ms5.si, _ms6.cfe, _ms6.cfs, _ms6.si, _ms7.cfe, _ms7.cfs, _ms7.si, _ms8.cfe, _ms8.cfs, _ms8.si, _ms9.cfe, _ms9.cfs, _ms9.si, _msa.cfe, _msa.cfs, _msa.si, _msb.cfe, _msb.cfs, _msb.si, _msc.cfe, _msc.cfs, _msc.si, _msd.cfe, _msd.cfs, _msd.si, _mse.cfe, _mse.cfs, _mse.si, _msf.cfe, _msf.cfs, _msf.si, _msg.cfe, _msg.cfs, _msg.si, _msh.cfe, _msh.cfs, _msh.si, _msi.cfe, _msi.cfs, _msi.si, _msj.cfe, _msj.cfs, _msj.si, _msk.cfe, _msk.cfs, _msk.si, _msl.cfe, _msl.cfs, _msl.si, _msm.cfe, _msm.cfs, _msm.si, _msn.cfe, _msn.cfs, _msn.si, _mso.cfe, _mso.cfs, _mso.si, _msp.cfe, _msp.cfs, _msp.si, _msq.cfe, _msq.cfs, _msq.si, _msr.cfe, _msr.cfs, _msr.si, _mss.cfe, _mss.cfs, _mss.si, _mst.cfe, _mst.cfs, _mst.si, _msu.cfe, _msu.cfs, _msu.si, _msv.cfe, _msv.cfs, _msv.si, _msw.cfe, _msw.cfs, _msw.si, _mtr.cfe, _mtr.cfs, _mtr.si, _mts.cfe, _mts.cfs, _mts.si, _mtt.cfe, _mtt.cfs, _mtt.si, _mtu.cfe, _mtu.cfs, _mtu.si, _mtv.cfe, _mtv.cfs, _mtv.si, _mtw.cfe, _mtw.cfs, _mtw.si, _mtx.cfe, _mtx.cfs, _mtx.si, _mty.cfe, _mty.cfs, _mty.si, _mtz.cfe, _mtz.cfs, _mtz.si, segments_2]}]> but was:<[{indexVersion=1475239345178,generation=2,filelist=[_9by.fdt, _9by.fdx, _9by.fnm, _9by.nvd, _9by.nvm, _9by.si, _9by_FST50_0.doc, _9by_FST50_0.tfp, _ihg.cfe, _ihg.cfs, _ihg.si, _ms4.cfe, _ms4.cfs, _ms4.si, _ms5.cfe, _ms5.cfs, _ms5.si, _ms6.cfe, _ms6.cfs, _ms6.si, _ms7.cfe, _ms7.cfs, _ms7.si, _ms8.cfe, _ms8.cfs, _ms8.si, _ms9.cfe, _ms9.cfs, _ms9.si, _msa.cfe, _msa.cfs, _msa.si, _msb.cfe, _msb.cfs, _msb.si, _msc.cfe, _msc.cfs, _msc.si, _msd.cfe, _msd.cfs, _msd.si, _mse.cfe, _mse.cfs, _mse.si, _msf.cfe, _msf.cfs, _msf.si, _msg.cfe, _msg.cfs, _msg.si, _msh.cfe, _msh.cfs, _msh.si, _msi.cfe, _msi.cfs, _msi.si, _msj.cfe, _msj.cfs, _msj.si, _msk.cfe, _msk.cfs, _msk.si, _msl.cfe, _msl.cfs, _msl.si, _msm.cfe, _msm.cfs, _msm.si, _msn.cfe, _msn.cfs, _msn.si, _mso.cfe, _mso.cfs, _mso.si, _msp.cfe, _msp.cfs, _msp.si, _msq.cfe, _msq.cfs, _msq.si, _msr.cfe, _msr.cfs, _msr.si, _mss.cfe, _mss.cfs, _mss.si, _mst.cfe, _mst.cfs, _mst.si, _msu.cfe, _msu.cfs, _msu.si, _msv.cfe, _msv.cfs, _msv.si, _msw.cfe, _msw.cfs, _msw.si, _mtr.cfe, _mtr.cfs, _mtr.si, _mts.cfe, _mts.cfs, _mts.si, _mtt.cfe, _mtt.cfs, _mtt.si, _mtu.cfe, _mtu.cfs, _mtu.si, _mtv.cfe, _mtv.cfs, _mtv.si, _mtw.cfe, _mtw.cfs, _mtw.si, _mtx.cfe, _mtx.cfs, _mtx.si, _mty.cfe, _mty.cfs, _mty.si, _mtz.cfe, _mtz.cfs, _mtz.si, segments_2]}, {indexVersion=1475239345178,generation=3,filelist=[_9by.fdt, _9by.fdx, _9by.fnm, _9by.nvd, _9by.nvm, _9by.si, _9by_FST50_0.doc, _9by_FST50_0.tfp, _ihg.cfe, _ihg.cfs, _ihg.si, _msy.cfe, _msy.cfs, _msy.si, _mtr.cfe, _mtr.cfs, _mtr.si, _mts.cfe, _mts.cfs, _mts.si, _mtt.cfe, _mtt.cfs, _mtt.si, _mtu.cfe, _mtu.cfs, _mtu.si, _mtv.cfe, _mtv.cfs, _mtv.si, _mtw.cfe, _mtw.cfs, _mtw.si, _mtx.cfe, _mtx.cfs, _mtx.si, _mty.cfe, _mty.cfs, _mty.si, _mtz.cfe, _mtz.cfs, _mtz.si, segments_3]}]>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([2E632BF89D2E9EC3:BB430C8ED6690C0]:0)\n   [junit4]    > \tat org.apache.solr.handler.TestReplicationHandler.doTestReplicateAfterCoreReload(TestReplicationHandler.java:1229)\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15924991",
            "date": "2017-03-14T21:03:54+0000",
            "content": "I recently filed a similar issue but only now noticed this one \u2013 i'll resolve SOLR-10251 as a dup, but here are my particular observations on this test/failure from that issue...\n\n\n  [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestReplicationHandler -Dtests.method=doTestReplicateAfterCoreReload -Dtests.seed=6F2AD3669775C0E9 -Dtests.nightly=true -Dtests.slow=true -Dtests.locale=ky-KG -Dtests.timezone=Etc/GMT+10 -Dtests.asserts=true -Dtests.file.encoding=ANSI_X3.4-1968\n   [junit4] FAILURE 57.2s | TestReplicationHandler.doTestReplicateAfterCoreReload <<<\n\n\n\n\nA few misc observations...\n\n\tthis line is comparing the commits on master now to the commits on master just prior to a core reload\n\t\n\t\tso failure has nothing to do with replicaiton\n\t\tLooks like a merge is happening before/after reload \u2013 but before test gets list of commits?\n\t\t\n\t\t\tPossible from RandomMergePolicy?\n\t\t\n\t\t\n\t\n\t\n\tAt this line where this test fails, a non-nightly run won't have indexed a single doc \u2013 so this particular failure will only be observable with -Dtests.nightly=true ...\n\n    int docs = TEST_NIGHTLY ? 200000 : 0;\n\n\n\ti don't understand the point of this test at all ... it doesn't compare anything between master/slave except after a commit \u2013 so where does the \"AfterCoreReload\" part come into play?\n\t\n\t\tit's particularly wonky given that half of the asserts comparing master/slave are about haven an identical numFound=0 for a *:* search against an empty index! (unless nightly)\n\t\n\t\n\n\n\n\n\nIn response to some earlier comments here in SOLR-6286...\n\n... I'd expect that since there were no pending changes, there's be no need to write a new segment. ...\n\nThat seems like a naive assumption given the randomized merge settings \u2013 there could easily be background merges in other threads, or the randomized merge scheduler could decide to do an arbitrary/useless merge on commit (IIRC)\n\n... This failure only happens sometimes. ...\n\nNote my other comments above: this test is virtually useless unless you are running in nightly mode ... you'll never see this failure w/o it.\n\nWhen nightly node is enabled, the seeds i've seen fail are reliable.\n\nThe indexversion doesn't change though and the slave says that it is in sync with the master. \n\nI'm not sure what the test looked like when this comment was made, but as of right now on master this test never makes any attempt to verify the slave's replication status / indexversion after (master) core reload \u2013 it only compares the slave numFound before the core reload, and then again after both the reload AND an additional master commit \u2013 an assert the test never reaches when failures like those listed in this issue happen \u2013 so it's impossible to reliably say the slave is in sync with the master at that point (let alone if it was in sync after the core reload, but but before the subsequent additional adds/commits) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15925005",
            "date": "2017-03-14T21:09:02+0000",
            "content": "here's another reproducible seed (as of master 09bd8612ce82c2852542127eb24b887c7b332a0d)\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestReplicationHandler -Dtests.method=doTestReplicateAfterCoreReload -Dtests.seed=29F881D77A7556D8 -Dtests.nightly=true -Dtests.slow=true -Dtests.locale=en-NG -Dtests.timezone=Israel -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 55.3s | TestReplicationHandler.doTestReplicateAfterCoreReload <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<[{indexVersion=1489525699190,generation=2,filelist=[_5u.fdt, _5u.fdx, _5u.fnm, _5u.nvd, _5u.nvm, _5u.si, _5u_FST50_0.doc, _5u_FST50_0.tfp, _5v.fdt, _5v.fdx, _5v.fnm, _5v.nvd, _5v.nvm, _5v.si, _5v_FST50_0.doc, _5v_FST50_0.tfp, _5w.fdt, _5w.fdx, _5w.fnm, _5w.nvd, _5w.nvm, _5w.si, _5w_FST50_0.doc, _5w_FST50_0.tfp, _5x.fdt, _5x.fdx, _5x.fnm, _5x.nvd, _5x.nvm, _5x.si, _5x_FST50_0.doc, _5x_FST50_0.tfp, _5y.fdt, _5y.fdx, _5y.fnm, _5y.nvd, _5y.nvm, _5y.si, _5y_FST50_0.doc, _5y_FST50_0.tfp, _5z.fdt, _5z.fdx, _5z.fnm, _5z.nvd, _5z.nvm, _5z.si, _5z_FST50_0.doc, _5z_FST50_0.tfp, _60.fdt, _60.fdx, _60.fnm, _60.nvd, _60.nvm, _60.si, _60_FST50_0.doc, _60_FST50_0.tfp, _61.fdt, _61.fdx, _61.fnm, _61.nvd, _61.nvm, _61.si, _61_FST50_0.doc, _61_FST50_0.tfp, _62.fdt, _62.fdx, _62.fnm, _62.nvd, _62.nvm, _62.si, _62_FST50_0.doc, _62_FST50_0.tfp, _63.fdt, _63.fdx, _63.fnm, _63.nvd, _63.nvm, _63.si, _63_FST50_0.doc, _63_FST50_0.tfp, _64.fdt, _64.fdx, _64.fnm, _64.nvd, _64.nvm, _64.si, _64_FST50_0.doc, _64_FST50_0.tfp, _65.fdt, _65.fdx, _65.fnm, _65.nvd, _65.nvm, _65.si, _65_FST50_0.doc, _65_FST50_0.tfp, _66.fdt, _66.fdx, _66.fnm, _66.nvd, _66.nvm, _66.si, _66_FST50_0.doc, _66_FST50_0.tfp, _67.fdt, _67.fdx, _67.fnm, _67.nvd, _67.nvm, _67.si, _67_FST50_0.doc, _67_FST50_0.tfp, _68.fdt, _68.fdx, _68.fnm, _68.nvd, _68.nvm, _68.si, _68_FST50_0.doc, _68_FST50_0.tfp, _69.fdt, _69.fdx, _69.fnm, _69.nvd, _69.nvm, _69.si, _69_FST50_0.doc, _69_FST50_0.tfp, _6a.fdt, _6a.fdx, _6a.fnm, _6a.nvd, _6a.nvm, _6a.si, _6a_FST50_0.doc, _6a_FST50_0.tfp, _6b.fdt, _6b.fdx, _6b.fnm, _6b.nvd, _6b.nvm, _6b.si, _6b_FST50_0.doc, _6b_FST50_0.tfp, _6c.fdt, _6c.fdx, _6c.fnm, _6c.nvd, _6c.nvm, _6c.si, _6c_FST50_0.doc, _6c_FST50_0.tfp, _6d.fdt, _6d.fdx, _6d.fnm, _6d.nvd, _6d.nvm, _6d.si, _6d_FST50_0.doc, _6d_FST50_0.tfp, _6e.fdt, _6e.fdx, _6e.fnm, _6e.nvd, _6e.nvm, _6e.si, _6e_FST50_0.doc, _6e_FST50_0.tfp, _6f.fdt, _6f.fdx, _6f.fnm, _6f.nvd, _6f.nvm, _6f.si, _6f_FST50_0.doc, _6f_FST50_0.tfp, _6h.fdt, _6h.fdx, _6h.fnm, _6h.nvd, _6h.nvm, _6h.si, _6h_FST50_0.doc, _6h_FST50_0.tfp, _6i.fdt, _6i.fdx, _6i.fnm, _6i.nvd, _6i.nvm, _6i.si, _6i_FST50_0.doc, _6i_FST50_0.tfp, segments_2]}]> but was:<[{indexVersion=1489525699190,generation=2,filelist=[_5u.fdt, _5u.fdx, _5u.fnm, _5u.nvd, _5u.nvm, _5u.si, _5u_FST50_0.doc, _5u_FST50_0.tfp, _5v.fdt, _5v.fdx, _5v.fnm, _5v.nvd, _5v.nvm, _5v.si, _5v_FST50_0.doc, _5v_FST50_0.tfp, _5w.fdt, _5w.fdx, _5w.fnm, _5w.nvd, _5w.nvm, _5w.si, _5w_FST50_0.doc, _5w_FST50_0.tfp, _5x.fdt, _5x.fdx, _5x.fnm, _5x.nvd, _5x.nvm, _5x.si, _5x_FST50_0.doc, _5x_FST50_0.tfp, _5y.fdt, _5y.fdx, _5y.fnm, _5y.nvd, _5y.nvm, _5y.si, _5y_FST50_0.doc, _5y_FST50_0.tfp, _5z.fdt, _5z.fdx, _5z.fnm, _5z.nvd, _5z.nvm, _5z.si, _5z_FST50_0.doc, _5z_FST50_0.tfp, _60.fdt, _60.fdx, _60.fnm, _60.nvd, _60.nvm, _60.si, _60_FST50_0.doc, _60_FST50_0.tfp, _61.fdt, _61.fdx, _61.fnm, _61.nvd, _61.nvm, _61.si, _61_FST50_0.doc, _61_FST50_0.tfp, _62.fdt, _62.fdx, _62.fnm, _62.nvd, _62.nvm, _62.si, _62_FST50_0.doc, _62_FST50_0.tfp, _63.fdt, _63.fdx, _63.fnm, _63.nvd, _63.nvm, _63.si, _63_FST50_0.doc, _63_FST50_0.tfp, _64.fdt, _64.fdx, _64.fnm, _64.nvd, _64.nvm, _64.si, _64_FST50_0.doc, _64_FST50_0.tfp, _65.fdt, _65.fdx, _65.fnm, _65.nvd, _65.nvm, _65.si, _65_FST50_0.doc, _65_FST50_0.tfp, _66.fdt, _66.fdx, _66.fnm, _66.nvd, _66.nvm, _66.si, _66_FST50_0.doc, _66_FST50_0.tfp, _67.fdt, _67.fdx, _67.fnm, _67.nvd, _67.nvm, _67.si, _67_FST50_0.doc, _67_FST50_0.tfp, _68.fdt, _68.fdx, _68.fnm, _68.nvd, _68.nvm, _68.si, _68_FST50_0.doc, _68_FST50_0.tfp, _69.fdt, _69.fdx, _69.fnm, _69.nvd, _69.nvm, _69.si, _69_FST50_0.doc, _69_FST50_0.tfp, _6a.fdt, _6a.fdx, _6a.fnm, _6a.nvd, _6a.nvm, _6a.si, _6a_FST50_0.doc, _6a_FST50_0.tfp, _6b.fdt, _6b.fdx, _6b.fnm, _6b.nvd, _6b.nvm, _6b.si, _6b_FST50_0.doc, _6b_FST50_0.tfp, _6c.fdt, _6c.fdx, _6c.fnm, _6c.nvd, _6c.nvm, _6c.si, _6c_FST50_0.doc, _6c_FST50_0.tfp, _6d.fdt, _6d.fdx, _6d.fnm, _6d.nvd, _6d.nvm, _6d.si, _6d_FST50_0.doc, _6d_FST50_0.tfp, _6e.fdt, _6e.fdx, _6e.fnm, _6e.nvd, _6e.nvm, _6e.si, _6e_FST50_0.doc, _6e_FST50_0.tfp, _6f.fdt, _6f.fdx, _6f.fnm, _6f.nvd, _6f.nvm, _6f.si, _6f_FST50_0.doc, _6f_FST50_0.tfp, _6h.fdt, _6h.fdx, _6h.fnm, _6h.nvd, _6h.nvm, _6h.si, _6h_FST50_0.doc, _6h_FST50_0.tfp, _6i.fdt, _6i.fdx, _6i.fnm, _6i.nvd, _6i.nvm, _6i.si, _6i_FST50_0.doc, _6i_FST50_0.tfp, segments_2]}, {indexVersion=1489525699190,generation=3,filelist=[_6f.fdt, _6f.fdx, _6f.fnm, _6f.nvd, _6f.nvm, _6f.si, _6f_FST50_0.doc, _6f_FST50_0.tfp, _6g.fdt, _6g.fdx, _6g.fnm, _6g.nvd, _6g.nvm, _6g.si, _6g_FST50_0.doc, _6g_FST50_0.tfp, _6h.fdt, _6h.fdx, _6h.fnm, _6h.nvd, _6h.nvm, _6h.si, _6h_FST50_0.doc, _6h_FST50_0.tfp, _6i.fdt, _6i.fdx, _6i.fnm, _6i.nvd, _6i.nvm, _6i.si, _6i_FST50_0.doc, _6i_FST50_0.tfp, segments_3]}]>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([29F881D77A7556D8:C2F9AE70A3D58DB]:0)\n   [junit4]    > \tat org.apache.solr.handler.TestReplicationHandler.doTestReplicateAfterCoreReload(TestReplicationHandler.java:1279)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [junit4]    > \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]    > \tat java.base/java.lang.reflect.Method.invoke(Method.java:547)\n   [junit4]    > \tat java.base/java.lang.Thread.run(Thread.java:844)\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15925007",
            "date": "2017-03-14T21:10:02+0000",
            "content": "updating summary to make it clear these aren't sporadic jenkins failures \u2013 these are reliably reproducing seeds "
        },
        {
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15925033",
            "date": "2017-03-14T21:22:00+0000",
            "content": "Would something like this work?\nhttps://github.com/apache/lucene-solr/blob/master/solr/core/src/test/org/apache/solr/update/TestInPlaceUpdatesDistrib.java#L86-L92 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-16302427",
            "date": "2017-12-23T13:11:54+0000",
            "content": "My Jenkins found a branch_7x seed that reproduced for me 4/5 times:\n\n\nChecking out Revision 136b2581e854a205a5a2e2a6c3dcc288138f0ce1 (refs/remotes/origin/branch_7x)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestReplicationHandler -Dtests.method=doTestReplicateAfterCoreReload -Dtests.seed=918B31009F59FEFF -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=en-IE -Dtests.timezone=Australia/North -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 67.8s J2 | TestReplicationHandler.doTestReplicateAfterCoreReload <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<[{indexVersion=1513967793357,generation=2,filelist=[_0.fdt, _0.fdx, _0.fnm, _0.nvd, _0.nvm, _0.si, _0_BlockTreeOrds_0.doc, _0_BlockTreeOrds_0.tio, _0_BlockTreeOrds_0.tipo, _1.fdt, _1.fdx, _1.fnm, _1.nvd, _1.nvm, _1.si, _1_BlockTreeOrds_0.doc, _1_BlockTreeOrds_0.tio, _1_BlockTreeOrds_0.tipo, _2.fdt, _2.fdx, _2.fnm, _2.nvd, _2.nvm, _2.si, _2_BlockTreeOrds_0.doc, _2_BlockTreeOrds_0.tio, _2_BlockTreeOrds_0.tipo, _3.fdt, _3.fdx, _3.fnm, _3.nvd, _3.nvm, _3.si, _3_BlockTreeOrds_0.doc, _3_BlockTreeOrds_0.tio, _3_BlockTreeOrds_0.tipo, _4.fdt, _4.fdx, _4.fnm, _4.nvd, _4.nvm, _4.si, _4_BlockTreeOrds_0.doc, _4_BlockTreeOrds_0.tio, _4_BlockTreeOrds_0.tipo, _5.fdt, _5.fdx, _5.fnm, _5.nvd, _5.nvm, _5.si, _5_BlockTreeOrds_0.doc, _5_BlockTreeOrds_0.tio, _5_BlockTreeOrds_0.tipo, segments_2]}]> but was:<[{indexVersion=1513967793357,generation=2,filelist=[_0.fdt, _0.fdx, _0.fnm, _0.nvd, _0.nvm, _0.si, _0_BlockTreeOrds_0.doc, _0_BlockTreeOrds_0.tio, _0_BlockTreeOrds_0.tipo, _1.fdt, _1.fdx, _1.fnm, _1.nvd, _1.nvm, _1.si, _1_BlockTreeOrds_0.doc, _1_BlockTreeOrds_0.tio, _1_BlockTreeOrds_0.tipo, _2.fdt, _2.fdx, _2.fnm, _2.nvd, _2.nvm, _2.si, _2_BlockTreeOrds_0.doc, _2_BlockTreeOrds_0.tio, _2_BlockTreeOrds_0.tipo, _3.fdt, _3.fdx, _3.fnm, _3.nvd, _3.nvm, _3.si, _3_BlockTreeOrds_0.doc, _3_BlockTreeOrds_0.tio, _3_BlockTreeOrds_0.tipo, _4.fdt, _4.fdx, _4.fnm, _4.nvd, _4.nvm, _4.si, _4_BlockTreeOrds_0.doc, _4_BlockTreeOrds_0.tio, _4_BlockTreeOrds_0.tipo, _5.fdt, _5.fdx, _5.fnm, _5.nvd, _5.nvm, _5.si, _5_BlockTreeOrds_0.doc, _5_BlockTreeOrds_0.tio, _5_BlockTreeOrds_0.tipo, segments_2]}, {indexVersion=1513967793357,generation=3,filelist=[_0.fdt, _0.fdx, _0.fnm, _0.nvd, _0.nvm, _0.si, _0_BlockTreeOrds_0.doc, _0_BlockTreeOrds_0.tio, _0_BlockTreeOrds_0.tipo, _1.fdt, _1.fdx, _1.fnm, _1.nvd, _1.nvm, _1.si, _1_BlockTreeOrds_0.doc, _1_BlockTreeOrds_0.tio, _1_BlockTreeOrds_0.tipo, _3.fdt, _3.fdx, _3.fnm, _3.nvd, _3.nvm, _3.si, _3_BlockTreeOrds_0.doc, _3_BlockTreeOrds_0.tio, _3_BlockTreeOrds_0.tipo, _4.fdt, _4.fdx, _4.fnm, _4.nvd, _4.nvm, _4.si, _4_BlockTreeOrds_0.doc, _4_BlockTreeOrds_0.tio, _4_BlockTreeOrds_0.tipo, _5.fdt, _5.fdx, _5.fnm, _5.nvd, _5.nvm, _5.si, _5_BlockTreeOrds_0.doc, _5_BlockTreeOrds_0.tio, _5_BlockTreeOrds_0.tipo, _6.cfe, _6.cfs, _6.si, segments_3]}]>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([918B31009F59FEFF:B45C2A30EF11F0FC]:0)\n   [junit4]    > \tat org.apache.solr.handler.TestReplicationHandler.doTestReplicateAfterCoreReload(TestReplicationHandler.java:1277)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-16440132",
            "date": "2018-04-16T22:47:26+0000",
            "content": "Hoss Man wrote:\ni don't understand the point of this test at all ... it doesn't compare anything between master/slave except after a commit \u2013 so where does the \"AfterCoreReload\" part come into play?\nExplained here: https://issues.apache.org/jira/browse/SOLR-2705?focusedCommentId=13082578&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13082578\n\nRationale from Mark Miller for checking that commits are the same before/after a core reload, also from SOLR-2705:\n\nI saw in the patch that you've added getIndexversion and getCommits, but haven't used them.\nRight - they where good for debugging and I figured I would use them to investigate SOLR-2326.\nCan Junit check for indexversion/commits to be same right before and right after coreReload?\nI've committed this check.\nI don't see how comparing commits before/after reload is providing useful information - as Hoss noted in a comment above in response to Shalin Shekhar Mangar's earlier commit:\n\n... I'd expect that since there were no pending changes, there's be no need to write a new segment. ...\nThat seems like a naive assumption given the randomized merge settings \u2013 there could easily be background merges in other threads, or the randomized merge scheduler could decide to do an arbitrary/useless merge on commit (IIRC)\nI'll attach a patch to remove this check from the test. \u00a0I'll wait a couple days before committing in case there are objections. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-16440146",
            "date": "2018-04-16T23:11:04+0000",
            "content": "Responding to another of Hoss Man's comments:\n\nAt this line where this test fails, a non-nightly run won't have indexed a single doc \u2013 so this particular failure will only be observable with -Dtests.nightly=true ...\n\nint docs = TEST_NIGHTLY ? 200000 : 0;\n\n\nI suspect that this was a typo when Mark Miller committed it on SOLR-4032 (http://svn.apache.org/viewvc/lucene/dev/trunk/solr/core/src/test/org/apache/solr/handler/TestReplicationHandler.java?r1=1414428&r2=1414427&pathrev=1414428) - likely the intent was for the non-nightly doc count to remain at the 10 docs it was before this change. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-16440151",
            "date": "2018-04-16T23:15:46+0000",
            "content": "I'll attach a patch to remove this check from the test. \n\nAttached patch allows the most recently reported Jenkins seed to succeed, from https://builds.apache.org/job/Lucene-Solr-NightlyTests-master/1529/:\n\n\nChecking out Revision 487daab62978b9e331ffa59ce6be2b527e6b5526 (refs/remotes/origin/master)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestReplicationHandler -Dtests.method=doTestReplicateAfterCoreReload -Dtests.seed=9BA58DE2918DAC59 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/jenkins-slave/workspace/Lucene-Solr-NightlyTests-master/test-data/enwiki.random.lines.txt -Dtests.locale=zh-HK -Dtests.timezone=America/Lower_Princes -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 2053s J1 | TestReplicationHandler.doTestReplicateAfterCoreReload <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<[{indexVersion=1523670807821,generation=2,filelist=[_5zu.fdt, _5zu.fdx, _5zu.fnm, _5zu.nvd, _5zu.nvm, _5zu.si, _5zu_Asserting_0.doc, _5zu_Asserting_0.tim, _5zu_Asserting_0.tip, _5zv.cfe, _5zv.cfs, _5zv.si, _5zw.cfe, _5zw.cfs, _5zw.si, _5zx.cfe, _5zx.cfs, _5zx.si, _5zy.cfe, _5zy.cfs, _5zy.si, _5zz.cfe, _5zz.cfs, _5zz.si, _600.cfe, _600.cfs, _600.si, segments_2]}]> but was:<[{indexVersion=1523670807821,generation=2,filelist=[_5zu.fdt, _5zu.fdx, _5zu.fnm, _5zu.nvd, _5zu.nvm, _5zu.si, _5zu_Asserting_0.doc, _5zu_Asserting_0.tim, _5zu_Asserting_0.tip, _5zv.cfe, _5zv.cfs, _5zv.si, _5zw.cfe, _5zw.cfs, _5zw.si, _5zx.cfe, _5zx.cfs, _5zx.si, _5zy.cfe, _5zy.cfs, _5zy.si, _5zz.cfe, _5zz.cfs, _5zz.si, _600.cfe, _600.cfs, _600.si, segments_2]}, {indexVersion=1523670807821,generation=3,filelist=[_601.fdt, _601.fdx, _601.fnm, _601.nvd, _601.nvm, _601.si, _601_Asserting_0.doc, _601_Asserting_0.tim, _601_Asserting_0.tip, segments_3]}]>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([9BA58DE2918DAC59:BE7296D2E1C5A25A]:0)\n   [junit4]    > \tat org.apache.solr.handler.TestReplicationHandler.doTestReplicateAfterCoreReload(TestReplicationHandler.java:1291)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70), sim=Asserting(org.apache.lucene.search.similarities.AssertingSimilarity@7bf91bd5), locale=zh-HK, timezone=America/Lower_Princes\n   [junit4]   2> NOTE: Linux 4.4.0-112-generic amd64/Oracle Corporation 1.8.0_152 (64-bit)/cpus=4,threads=1,free=87266800,total=527958016\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-16440170",
            "date": "2018-04-16T23:41:51+0000",
            "content": "likely the intent was for the non-nightly doc count to remain at the 10 docs it was before this change.\n\nYeah, mistake for sure. Small number of docs for normal runs and lots more for nightly was intent. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-16440171",
            "date": "2018-04-16T23:43:00+0000",
            "content": "I don't see how comparing commits before/after reload is providing useful information\n\nIndeed, doesn't make sense to check around core reload. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-16440346",
            "date": "2018-04-17T03:42:46+0000",
            "content": "\nlikely the intent was for the non-nightly doc count to remain at the 10 docs it was before this change.\nYeah, mistake for sure. Small number of docs for normal runs and lots more for nightly was intent.\n\nCool, I've updated the patch to up the non-nightly doc count.  Also added a CHANGES entry. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16444611",
            "date": "2018-04-19T18:50:07+0000",
            "content": "Commit 581983fd771b443d59696edb6eeef07e4a4442b5 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=581983f ]\n\nSOLR-6286: TestReplicationHandler.doTestReplicateAfterCoreReload(): stop checking for identical commits before/after master core reload; and make non-nightly mode test 10 docs instead of 0. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16444612",
            "date": "2018-04-19T18:50:09+0000",
            "content": "Commit 46037dc67494a746857048399c02a6cf6f7a07c1 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=46037dc ]\n\nSOLR-6286: TestReplicationHandler.doTestReplicateAfterCoreReload(): stop checking for identical commits before/after master core reload; and make non-nightly mode test 10 docs instead of 0. "
        }
    ]
}