{
    "id": "SOLR-10999",
    "title": "Support \"Accept-Encoding\" header to enable response gzip compression",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Server"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.3",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "Spinoff from email\n\nAccept-Encoding:\n\nAdvertises which content encoding, usually a compression algorithm, the client is able to understand\nhttps://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Encoding\n\nCould enable compression of large search results. SOLR-856 suggests that this is implemented,\nbut it does not work. Seems it is only implemented for replication. I\u2019d expect this to be useful for\nlarge /export or /stream requests. Example:\nAccept-Encoding: gzip\n\nCould be configured with the Jetty Gzip Handler",
    "attachments": {
        "SOLR-10999.patch": "https://issues.apache.org/jira/secure/attachment/12875541/SOLR-10999.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-03T19:03:19+0000",
            "content": "Patch ripped from https://github.com/ChronixDB/chronix.server/issues/67. Tested locally. \n\nTODO:\n\n\tUnit tests\n\tRefGuide docs\n\tSolrJ usage?\n\n ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16072824"
        },
        {
            "date": "2017-07-03T19:20:57+0000",
            "content": "Instead of placing into solr-jetty-context.xml, is embedding into the solr start script like is done with ssl possible? (ssl example below):\n\n\nSOLR_JETTY_CONFIG+=(\"--module=https\")\n\n ",
            "author": "Michael Braun",
            "id": "comment-16072830"
        },
        {
            "date": "2017-07-03T20:01:57+0000",
            "content": "Guess that could be possible, if it is any point at all to make it possible to remove it? The client can already control when to trigger compression with the Accept-Encoding header, so why would we want to disable the handler? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16072872"
        },
        {
            "date": "2017-07-10T11:10:53+0000",
            "content": "Michael Braun any comment to the benefit of setting module in start script? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16080174"
        },
        {
            "date": "2017-07-10T14:40:26+0000",
            "content": "Jan H\u00f8ydahl just to put the modules in one place and make easier to disable potentially, but this makes sense too.  ",
            "author": "Michael Braun",
            "id": "comment-16080422"
        },
        {
            "date": "2017-08-31T09:03:37+0000",
            "content": "I'm stopping progress on this since I won't be able to work on it for a few months. Anyone feel free to grab and improve, even assign yourself  ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16148684"
        },
        {
            "date": "2018-02-17T23:32:37+0000",
            "content": "Jan H\u00f8ydahl sorry for the delay in getting back with you after chatting about this at LSR 2017 - can I update your patch for the Jetty 9.4 version? ",
            "author": "Michael Braun",
            "id": "comment-16368404"
        },
        {
            "date": "2018-02-18T19:30:56+0000",
            "content": "Go ahead! ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16368641"
        }
    ]
}