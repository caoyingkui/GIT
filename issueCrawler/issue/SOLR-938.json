{
    "id": "SOLR-938",
    "title": "DataImportHandler: Add close hooks to the completion of a full-import process",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Adding a new feature that we need for continuation of a workflow based on a full-import procedure. When   a full-import completes , the pre-defined hook method is called at the end of the same. \n\nImplementations that need to notified , need to implement the new interface - DataImportCloseHook and register themselves in the data config file as follows. \n\n<dataConfig>\n\n.\n.\n.\n.\n   <closeHook type=\"com.myorg.fullimporter.closeHookImpl1\" />\n   <closeHook type=\"com.myorg.fullimporter.closeHookImpl2\" />\n</dataConfig>\n\nA single instance of them is created (as part of DataImporter) during instantiation and the same insance is reused across multiple invocations. \n\nSince the dataImporter is protected by a thread-lock - there is no thred-safe guarantee for the implementations of the full-import close hook.",
    "attachments": {
        "SOLR-938.patch": "https://issues.apache.org/jira/secure/attachment/12396743/SOLR-938.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Karthik K",
            "id": "comment-12659122",
            "date": "2008-12-24T17:39:50+0000",
            "content": "DataImportCloseHook.java : New interface to be implemented for handling closing hooks\n\nDataImporter.java / DataConfig.java :  add new close hook interfaces. \n\nTestDocBuilder.java : have a sample  schema (optional closehook type=\" \" ) and let TestDocBuilder parse the same.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12659124",
            "date": "2008-12-24T17:47:19+0000",
            "content": "Kay, you can also extend JdbcDataSource, override the close method and use this data source for your root entity. "
        },
        {
            "author": "Karthik K",
            "id": "comment-12659145",
            "date": "2008-12-24T18:59:50+0000",
            "content": "I am a little bit apprehensive about inheriting from JdbcDataSource since inheritance brings in tighter coupling. (The most important assumption about JdbcDataSource overriding is that the sub class' close() method calls super.close() - to avoid resource leaks). \n\nAnd also - doing a full-import a given query is different from closing the jdbc connection altogether ( even though the impl. might converge in their meaning ). \n\nInstead - from a workflow perspective - all I need is a pluggable independent hook without disrupting DIH but a notification from the same after its completion to move onto the next.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12659190",
            "date": "2008-12-25T08:36:56+0000",
            "content": "I wish to recommend the following. It is better not to limit this to close event. I try to minimize the no:of public interfaces. DIH is designed keeping non-java users also in mind. As far as possible users should not be forced to use java. \n\nIt can better be called an EventListener\n\n\npublic interface EventListener {\n    public void onEvent(Context ctx );    \n}\n\n\n\nIt could be registered as something like\n\n<document onImportEnd=\"script:endImport\" onImportStart=\"com.foo.Foo\" >\n <!-- entitiies go here-->.\n</document>\n\n\n\nSingle method interface is preferred because it should be possible to write the implementation in scripting languages\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12659449",
            "date": "2008-12-28T17:11:30+0000",
            "content": "script is not supported "
        },
        {
            "author": "Karthik K",
            "id": "comment-12659566",
            "date": "2008-12-29T15:58:52+0000",
            "content": "Noble - In the revised patch - did you mean to add EventListener to the source control as well since it would not compile at this point. \n\nAlso - with invokeEvent - I believe it might be better to reuse the EventListener instance instead of recreating them again, for every notification, since the ClassLoading and the instance creation might be expensive (especially Class Loading). Storing the information during the runtime might be useful for various event notification purposes.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12659577",
            "date": "2008-12-29T16:17:04+0000",
            "content": "I missed the file. this patch has it\n\nAlso - with invokeEvent - I believe it might be better to reuse the EventListener instance instead of recreating them again, for every notification, since the ClassLoading ...\n\n\nI guess caching is pointless for a class which is used only twice for a full import "
        },
        {
            "author": "Karthik K",
            "id": "comment-12659588",
            "date": "2008-12-29T17:21:30+0000",
            "content": "\n\n\n I guess caching is pointless for a class which is used only twice for a full import\n\n\n\n\n\nWe have a much larger query , for which we do a full-import . We split the data by the primary key range and perform multiple smaller 'full-import's consolidated together to form a  full-import . Hence the necessity for retaining the instance for the event handlers. \n\nBut I am ok with tracking that with a separate jira - if needed. When can we get this committed the current patch onto the trunk for now.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12661959",
            "date": "2009-01-08T12:48:12+0000",
            "content": "\n\tBringing patch in sync with trunk.\n\tAdded a test case\n\n\n\nI plan to commit shortly. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12661960",
            "date": "2009-01-08T12:52:48+0000",
            "content": "Committed revision 732695.\n\nThanks Kay and Noble! "
        },
        {
            "author": "Karthik K",
            "id": "comment-12662180",
            "date": "2009-01-08T23:54:52+0000",
            "content": "Thanks Shalin / Noble. \n\nFull Import and Delta Import are functionally 2 different things. We probably need a way to distinguish the event handlers as  onFullImportStart/End and onDeltaImportStart/End since they represent different events. May be there could be a separate jira to track this.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12662224",
            "date": "2009-01-09T02:10:19+0000",
            "content": "=Context#currentProcess() can tell you what is going on now.  "
        }
    ]
}