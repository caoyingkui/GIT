{
    "id": "SOLR-5783",
    "title": "Can we stop opening a new searcher when the index hasn't changed?",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.8",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I've been thinking recently about how/when we re-open searchers \u2013 and what the overhead of that is in terms of caches and what not \u2013 even if the underlying index hasn't changed.  \n\nThe particular real world case that got me thinking about this recently is when a deleteByQuery gets forwarded to all shards in a collection, and then the subsequent (soft)Commit (either auto or explicit) opens a new searcher \u2013 even if that shard was completley uneffected by the delete.\n\nIt got me wondering: why don't re-use the same searcher when the index is unchanged?\n\nFrom what I can tell, we're basically 99% of the way there (in <nrtMode/>)...\n\n\n\tIndexWriter.commit is already smart enough to short circut if there's nothing to commit\n\tSolrCore.openNewSearcher already uses DirectoryReader.openIfChanged to see if the reader can be re-used.\n\tfor \"realtime\" purposes, SolrCore.openNewSearcher will return the existing searcher if it exists and the DirectoryReader hasn't changed\n\n\n\n...The only reason I could think of for not always re-using the same searcher when the underlying DirectoryReader is identical (ie: that last bullet above) is in the situation where the \"live\" schema has changed \u2013 but that seems pretty trivial to account for.\n\nIs there any other reason why this wouldn't be a good idea for improving performance?",
    "attachments": {
        "SOLR-5783.patch": "https://issues.apache.org/jira/secure/attachment/12631432/SOLR-5783.patch",
        "SOLR-5783_harden_tests.patch": "https://issues.apache.org/jira/secure/attachment/12636503/SOLR-5783_harden_tests.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13913953",
            "date": "2014-02-27T02:27:45+0000",
            "content": "Here's a quick & dirty proof of concept path to make SolrCore.openNewSearcher return the current searcher when all of the following are true:\n\n\tthe indexConfig allows for re-open\n\tthere is already a current searcher open\n\tthe underling IndexReader is unchanged from the current searcher\n\tthe getLiveSchema has not changed from the current searcher.\n\n\n\nThe patch also changes SolrCore.getSearcher to skip warming when the \"newSearcher\" (returned by SolrCore.openNewSearcher) and the currentSearcher are identical (there's a nocommit here to fix indenting because i wanted to keep the patch simple \u2013 all i'm doing is wrapping a bunch of existing warming code in an \"if\" so i didn't increase the indent yet)\n\nThis seems to work fine, and solves the problem i've been thinking about: if you do a commit w/o any changes in the index \u2013 nothing happens.  same index, same reader, same searcher.\n\n\nAs is, this patch causes TestIndexSearcher.testRepopen to fail \u2013 but if i'm understanding that test correctly, this is because it's making an assumption about the index reader refcount being incremented by 1 after doing a changless commit - and in that case, with the patch, the reader refcount doesn't increase, because it's still the same searcher \u2013 so this should be pretty easy to fix.\n\nObviously, besides fixing TestIndexSearcher.testRepopen, a lot of new tests should be written before commiting this to ensure that the same searcher is re-used when we expect, and not re-use when we don't \u2013 but before i go down that rabbit hole (the tests are likeley to be much more complicated then the code itself) does anyone see any problems with this idea that i'm not thinking of?\n\n\n\n\n\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13915410",
            "date": "2014-02-28T03:13:23+0000",
            "content": "LGTM. There was a spot it looks like you meant to use newName and used name and I had to fix a test to get the current tests to pass, but it all looks sound to me. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13916133",
            "date": "2014-02-28T18:24:55+0000",
            "content": "LGTM.\n\nthanks mark.\n\nlooks like you meant to use newName\n\nnice catch.\n\nI had to fix a test...\n\nYour fix jives with that i was referring to \u2013 although i believe we can make that test more assertive: the reader refCounts should not only be the same, the searchers themselves should be identical.\n\nI'll work on adding some more test to increase my confidence "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13916493",
            "date": "2014-02-28T22:12:22+0000",
            "content": "Updated patch:\n\n\n\thardend the modified assertion in TestIndexSearcher.testReopen to verify it truly is the exact same searcher\n\tadded a new TestSearcherReuse to verify that we get the same searcher after doing various things that are No-Ops, and we get a new searcher after doing things that modify the index.\n\n\n\nstill one nocommit: i want to make this use managed-schema and include a check that modifing the schema w/o any data cahnges results in a newSearcher (need to poke around the managed schema tests more to figure out how to do that) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13918500",
            "date": "2014-03-03T19:46:00+0000",
            "content": "Updated patch with test asserting that opening a searcher after a schema change does result in a diff searcher, even if nothing in the underlying index didn't change.\n\nI'll commit after lunch if no one sees any problems "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13918606",
            "date": "2014-03-03T21:37:52+0000",
            "content": "Commit 1573763 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1573763 ]\n\nSOLR-5783: Requests to open a new searcher will now reuse the current registered searcher (w/o additional warming) if possible in situations where the underlying index has not changed "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13918635",
            "date": "2014-03-03T22:09:26+0000",
            "content": "Commit 1573777 from hossman@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1573777 ]\n\nSOLR-5783: Requests to open a new searcher will now reuse the current registered searcher (w/o additional warming) if possible in situations where the underlying index has not changed (merge r1573763) "
        },
        {
            "author": "David Smiley",
            "id": "comment-13919016",
            "date": "2014-03-04T04:55:24+0000",
            "content": "How do you trigger a new searcher on when the Solr instance receiving the commit isn't responsible for updating the index, such as when it's sharing an index on a shared disk with another Solr core that is doing the updates? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13919610",
            "date": "2014-03-04T16:56:04+0000",
            "content": "How do you trigger a new searcher on when the Solr instance receiving the commit isn't responsible for updating the index, such as when it's sharing an index on a shared disk with another Solr core that is doing the updates?\n\nDavid Smiley: That type of situation should not be affected at all \u2013 what changed here is that if DirectoryReader.openIfChanged(...) returns null to indicate that the underlying index hasn't changed, and the same reader should be re-used, then we also re-use the same searcher tha already wraps that reader.  (This is why the replication tests still work with this change)\n\nOf course: If you see a problem with some edge case in your setup, please, PLEASE let me know ASAP so i can try to dig into it. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13924904",
            "date": "2014-03-08T15:57:16+0000",
            "content": "Looking back at the original usecase:\nThe particular real world case that got me thinking about this recently is when a deleteByQuery gets forwarded to all shards in a collection, and then the subsequent (soft)Commit (either auto or explicit) opens a new searcher \u2013 even if that shard was completley uneffected by the delete.\nAnd...\nIndexWriter.commit is already smart enough to short circut if there's nothing to commit\nIf that's the case, why is there anything else to do?  Oh, maybe DUH2 no longer short circuits? (I'm pretty sure I had code in there at one time to do nothing if nothing had changed)\nshort circuiting at commit() rather than getSearcher/openSearcher seems a lot easier and less risky.\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13924911",
            "date": "2014-03-08T16:22:09+0000",
            "content": "It looks like one problem is that this patch does not distinguish between realtime searchers and normal caching searchers.\n\nFrom the comments on openNewSearcher:\n\n\n\t\"realtime\" means that we need to open quickly for a realtime view of the index, hence don't do any\n\tautowarming and add to the _realtimeSearchers queue rather than the _searchers queue (so it won't\n\tbe used for autowarming by a future normal searcher).  A \"realtime\" searcher will currently never\n\tbecome \"registered\" (since it currently lacks caching).\n\n\n\nHence a realtime searcher can be returned when a normal caching searcher was requested, and be used in the future for autowarming (which explains the stack trace Mark saw).\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13924934",
            "date": "2014-03-08T17:13:32+0000",
            "content": "Another issue that this change opens up code paths that were never executed before.\nFor example: before this patch, something like register() would only be called once and there was no need for it to be idempotent (nor is it currently).  Now it looks like it can be called an arbitrary number of times. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13924937",
            "date": "2014-03-08T17:29:27+0000",
            "content": "Yeah, there is another fail that may be related to this change that involves a nullpointer if i remember right. Might be related to that or another affect of the NRT searcher distinction or something else. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13925847",
            "date": "2014-03-10T16:18:00+0000",
            "content": "\n\tI'm not really understanding Yonik's alternative suggestion, but i don't have the code in front of me \u2013 if there is a better way to accomplish the same thing, then great.\n\tI\"m also not really understanding what problems Yonik & MArk are saying exist / may-exist with what got committed as part of this issue \u2013 but it should have just been a optimization, if it's causing problems we should definitely roll back.\n\tI'm not really in a position to commit anything over the next few days, and then i'm going to be completely offline for over a week \u2013 so if one of you two (Yonik Seeley, Mark Miller) who understands why it's problematic could please revert this ASAP i'd really appreciate it.\n\tIf you guys could attach patches with tests cases (or pseudo code descriptions showing how to create test cases) demonstrating the problems you see with the current code that would be really helpful when i finally get a chance to revisit this in a few weeks.\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13925878",
            "date": "2014-03-10T16:44:02+0000",
            "content": "I'm not really in a position to commit anything over the next few days\n\nNo worries...\nThere are definitely two different bugs caused by this that I see, but they should both be easy to fix (and I think that's probably the easiest way forward at this point.)  I'll try to get to it soon. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13933269",
            "date": "2014-03-13T14:01:36+0000",
            "content": "Commit 1577167 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1577167 ]\n\nSOLR-5783: fix mixing caching + non caching searchers, fix multiple registration of same searcher "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13933272",
            "date": "2014-03-13T14:02:19+0000",
            "content": "Commit 1577169 from Yonik Seeley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1577169 ]\n\nSOLR-5783: fix mixing caching + non caching searchers, fix multiple registration of same searcher "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13933313",
            "date": "2014-03-13T14:32:16+0000",
            "content": "I've committed what should be the correct fixes, but this issue should stay open until there's a proper test that fails w/o the last patch. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13946039",
            "date": "2014-03-25T02:22:56+0000",
            "content": "I've committed what should be the correct fixes, but this issue should stay open until there's a proper test that fails w/o the last patch.\n\nThanks Yonik Seeley - based on your fixes, i've attached a SOLR-5783_harden_tests.patch that triggers 2 test failures if you revert r1577167 against SolrCore.java, but works with current trunk.\n\nI think this covers the two problems you noticed, but if i missed some aspect of your fixes that should also be tested, please let me know.\n\nI'll plan on committing this tomorrow baring objections "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13946723",
            "date": "2014-03-25T16:10:15+0000",
            "content": "Commit 1581398 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1581398 ]\n\nSOLR-5783: harden tests "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13946738",
            "date": "2014-03-25T16:19:29+0000",
            "content": "Commit 1581403 from hossman@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1581403 ]\n\nSOLR-5783: harden tests (merge r1581398) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13982603",
            "date": "2014-04-27T23:25:56+0000",
            "content": "Close issue after release of 4.8.0 "
        }
    ]
}