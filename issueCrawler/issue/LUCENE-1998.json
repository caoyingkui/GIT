{
    "id": "LUCENE-1998",
    "title": "Use Java 5 enums",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.0"
        ],
        "affect_versions": "3.0",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Replace the use of o.a.l.util.Parameter with Java 5 enums, deprecating Parameter.\n\nReplace other custom enum patterns with Java 5 enums.",
    "attachments": {
        "LUCENE-1998_enum.patch": "https://issues.apache.org/jira/secure/attachment/12422740/LUCENE-1998_enum.patch",
        "LUCENE-1998_enum_BW.patch": "https://issues.apache.org/jira/secure/attachment/12422826/LUCENE-1998_enum_BW.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-10-20T22:27:49+0000",
            "content": "This issue and patch were part of LUCENE-1257, but may have backward compatibility issues. (I'll remove the patch from there.) ",
            "author": "DM Smith",
            "id": "comment-12767981"
        },
        {
            "date": "2009-10-21T07:23:36+0000",
            "content": "I tested it here, we have no backwards problem (at least with \"normal\" usage). The dynamic linker of Java when running old Java 1.4 code against the new enum classes has no problem with the replaced superclass: Old code compiled against Field.Store.XXX against lucene-core-2.9.jar with superclass Parameter works perfectly with the new lucene-core-3.0.jar. This works because we only use the parameter class as a type safe enumeration an did not call any methods (only maybe toString()) of it. So the linker has no problem.\n\nI would simply apply this ptach to trunk. I would also remove the Parameter class completely, as it breaks no code (only if somebody has used that class for own enums). Maybe we should deprecate Parameter in 2.9.1 and say that it will be removed in 3.0 as this version uses Java5's enum. But it also does not hurt if we keep it and mark it deprecated as in the patch.\n\nTo your patch: I only added the license header back in the Version class. It must be there. ",
            "author": "Uwe Schindler",
            "id": "comment-12768118"
        },
        {
            "date": "2009-10-21T07:24:40+0000",
            "content": "Patch with license header restored. ",
            "author": "Uwe Schindler",
            "id": "comment-12768119"
        },
        {
            "date": "2009-10-21T08:29:58+0000",
            "content": "Some fine tuning: You defined package protected abstract methods, but made them public in the enum constant. Changed to all-public. This was also a backwards-break in contrib/queryParser.\n\nI think this is ready to commit. ",
            "author": "Uwe Schindler",
            "id": "comment-12768128"
        },
        {
            "date": "2009-10-21T08:42:19+0000",
            "content": "Some samll problem that may appear in future: We had renamed some enum constants in 2.9 (TOKENIZED -> ANALYZED). No problems now, because deprec constants removed.\n\nIf we want to do the same in future, we can do it the same way, but need to do a hack (because it is not officially supprted by Java 5):\nhttp://forums.sun.com/thread.jspa?threadID=5137742\n\nSo it works, but not with switch statements. Just as a comment. But in my opinion, renaming enum constants is a bad thing...  ",
            "author": "Uwe Schindler",
            "id": "comment-12768132"
        },
        {
            "date": "2009-10-21T12:22:29+0000",
            "content": "Updated patch (merged with StandardAnalyzer version constants). Also added Lucene version 3.0 for completeness to enable users to build apps and do not need to use the CURRENT constant. ",
            "author": "Uwe Schindler",
            "id": "comment-12768195"
        },
        {
            "date": "2009-10-21T12:57:51+0000",
            "content": "I only added the license header back in the Version class. It must be there.\n\nSorry about wacking the license on Version. It must have been an accident. I know it needs to be there.\n\nSome fine tuning: You defined package protected abstract methods, but made them public in the enum constant. Changed to all-public. This was also a backwards-break in contrib/queryParser.\n\nThanks. Inadvertently,  I was following the pattern for an Interface, where scoping does not matter.\n\nSo it works, but not with switch statements.\nIMHO: Having a switch statement (or cascading if-then-else) over the collection of values is generally indicative of a bad design (or an opportunity for an improved design  By adding methods to each enum that return literals, we can eliminate this and at the same time, improve performance.\n\nThere is another tuning opportunity, which I didn't take. We are marshaling out the flags from the enums into member variables. I'm not sure how efficient the storage of a boolean vs an enum is. If it is a wash, then having an enum value as replacement would be a good thing. It sould clearly document what controls the flag.\n\nThe only complication would be the set/get for some of the flags. (E.g. AbstractField.setOmitNorms.) What's with that? Are the enum values merely a hint??? Does it make sense to allow omitNorms to be changed after an AbstractField is being used?\n ",
            "author": "DM Smith",
            "id": "comment-12768215"
        },
        {
            "date": "2009-10-21T13:51:54+0000",
            "content": "(it's \"bq.\" not \".bq\"  )\n\n\nSo it works, but not with switch statements.\nIMHO: Having a switch statement (or cascading if-then-else) over the collection of values is generally indicative of a bad design (or an opportunity for an improved design  By adding methods to each enum that return literals, we can eliminate this and at the same time, improve performance.\n\nYou are right, my problem was more for client code of Lucene that may for example have a switch statement on Field.Index (e.g. Solr) to control some further indexing steps. If we rename the constant, the switch statement would not work (it would work in already compiled code), but not if the code is recompiled against the modified version. That was my problem. In 3.0 this will not happen as there are no deprec enum constants, but maybe later. In this case, a CHANGES.txt entry should be added.\n\nThere is another tuning opportunity, which I didn't take. We are marshaling out the flags from the enums into member variables. I'm not sure how efficient the storage of a boolean vs an enum is. If it is a wash, then having an enum value as replacement would be a good thing. It sould clearly document what controls the flag.\n\nThis is currently not possibible because of backwards compatibility, because the fields are protected and not deprecated in 2.9. I think with your change we are fine.\n\nThe only complication would be the set/get for some of the flags. (E.g. AbstractField.setOmitNorms.) What's with that? Are the enum values merely a hint??? Does it make sense to allow omitNorms to be changed after an AbstractField is being used?\n\nIt is perfectly legal to change these constants after creating the field, so the setters must be there. ",
            "author": "Uwe Schindler",
            "id": "comment-12768242"
        },
        {
            "date": "2009-10-21T15:02:24+0000",
            "content": "I just noticed that enums are comparable. For the enum Version, we could take advantage for this and not store a number for each value. It would be important to maintain order of versions in the file from earliest to latest.\n\nShould we do this?\n\nThen the current patch's (comments removed for clarity):\n\npublic enum Version {\n  LUCENE_CURRENT (0),\n  LUCENE_20      (2000),\n  LUCENE_21      (2100),\n  LUCENE_22      (2200),\n  LUCENE_23      (2300),\n  LUCENE_24      (2400),\n  LUCENE_29      (2900),\n  LUCENE_30      (3000);\n\n  private Version(int v) \n{\n    this.v = v;\n  }\n\n  public boolean onOrAfter(Version other) \n{\n    return v == 0 || v >= other.v;\n  }\n\n  private final int v;\n}\n\nWould become (the comment on strict ordering is necessary):\n\npublic enum Version {\n\n  // These have to be ordered from the oldest to the newest version\n  LUCENE_20,\n  LUCENE_21,\n  LUCENE_22,\n  LUCENE_23,\n  LUCENE_24,\n  LUCENE_29,\n  LUCENE_30,\n  // This needs to be last\n  LUCENE_CURRENT;\n\n  /** A convienence method merely calling this.compareTo(other) >= 0 */\n  public boolean onOrAfter(Version other) \n{\n    return compareTo(other) >= 0;\n  }\n\n} ",
            "author": "DM Smith",
            "id": "comment-12768270"
        },
        {
            "date": "2009-10-21T15:09:36+0000",
            "content": "I thought about that, too: I would not do this. Especially because I want to have the 0-version (current) as first element for serialization purposes (changing the order of enum constants is bad, you should always add them at the end).\n\nEventually we want to make the accessor to the interver v somehow public (for more specific comaprisons and so on). ",
            "author": "Uwe Schindler",
            "id": "comment-12768273"
        },
        {
            "date": "2009-10-21T16:08:38+0000",
            "content": "changing the order of enum constants is bad, you should always add them at the end\nIs this true?\n\nI did not know how Java serializes enums so I went looking:\nSee: http://java.sun.com/j2se/1.5.0/docs/guide/serialization/relnotes15.html\n\nTurns out it serializes the text representation of the enum constant and class info. This is just like the Parameter class.\n\nIf I understand it correctly, with this, an enum is resilient to changes in order. New constants can go in any place (for example, we can later add LUCENE_291 before LUCENE_30) and not break serialization compatibility.\n\nThis is especially good for the future as it allows a path for deprecations. (E.g. deprecation of o.a.l.d.Field.Index.COMPRESS)\n\nSo having LUCENE_CURRENT at the end is fine.\n\nIf we wanted it first (or anywhere else) we could have onOrAfter to be:\npublic boolean onOrAfter(Version other) \n{ return other == LUCENE_CURRENT || compareTo(other) >= 0; }\n\nIf we wanted to expose version numbering info in the future, I'd suggest the following pattern (names are unimportant):\nLUCENE_29 {\n   public int getMajor() \n{ return 2; }\n   public int getMinor() \n{ return 9; }\n   public int getFix()      \n{ return 0; }\n}\nbecause it does not require storage and unlike \"2900\" does not have positional notation meaning (PIC code), e.g. public int getMajor() \n{ return int(2900/1000); } ",
            "author": "DM Smith",
            "id": "comment-12768304"
        },
        {
            "date": "2009-10-21T17:24:25+0000",
            "content": "I changed the Version enum. All test still pass. I also added a test for the backwards branch that tests, that the transition from Parameter -> enum is binary compatible and supported by Java's linker.\n\nI will commit soon. ",
            "author": "Uwe Schindler",
            "id": "comment-12768340"
        },
        {
            "date": "2009-10-21T17:35:53+0000",
            "content": "Better BW test ",
            "author": "Uwe Schindler",
            "id": "comment-12768343"
        },
        {
            "date": "2009-10-21T19:31:37+0000",
            "content": "Committed revision: 828156\n\nThanks DM Smith! ",
            "author": "Uwe Schindler",
            "id": "comment-12768376"
        }
    ]
}