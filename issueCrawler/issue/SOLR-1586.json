{
    "id": "SOLR-1586",
    "title": "Create Spatial Point FieldTypes",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.5",
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Per SOLR-773, create field types that hid the details of creating tiers, geohash and lat/lon fields.\n\nFields should take in lat/lon points in a single form, as in:\n<field name=\"foo\">lat lon</field>",
    "attachments": {
        "SOLR-1586.Mattmann.122609.patch.txt": "https://issues.apache.org/jira/secure/attachment/12428984/SOLR-1586.Mattmann.122609.patch.txt",
        "SOLR-1586-geohash.patch": "https://issues.apache.org/jira/secure/attachment/12428926/SOLR-1586-geohash.patch",
        "SOLR-1586.Mattmann.121209.geohash.outarr.patch.txt": "https://issues.apache.org/jira/secure/attachment/12427839/SOLR-1586.Mattmann.121209.geohash.outarr.patch.txt",
        "examplegeopointdoc.patch.txt": "https://issues.apache.org/jira/secure/attachment/12425810/examplegeopointdoc.patch.txt",
        "SOLR-1586.patch": "https://issues.apache.org/jira/secure/attachment/12428979/SOLR-1586.patch",
        "SOLR-1586.Mattmann.112409.geopointandgeohash.patch.txt": "https://issues.apache.org/jira/secure/attachment/12425977/SOLR-1586.Mattmann.112409.geopointandgeohash.patch.txt",
        "SOLR-1586.Mattmann.120709.geohashonly.patch.txt": "https://issues.apache.org/jira/secure/attachment/12427287/SOLR-1586.Mattmann.120709.geohashonly.patch.txt",
        "SOLR-1586.Mattmann.121209.geohash.outstr.patch.txt": "https://issues.apache.org/jira/secure/attachment/12427840/SOLR-1586.Mattmann.121209.geohash.outstr.patch.txt",
        "SOLR-1586.Mattmann.112209.geopointonly.patch.txt": "https://issues.apache.org/jira/secure/attachment/12425800/SOLR-1586.Mattmann.112209.geopointonly.patch.txt",
        "SOLR-1586.Mattmann.112509.geopointandgeohash.patch.txt": "https://issues.apache.org/jira/secure/attachment/12426191/SOLR-1586.Mattmann.112509.geopointandgeohash.patch.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781172",
            "date": "2009-11-22T17:51:44+0000",
            "content": "For reference, I'm going to put up a patch (or series of them) on this issue that implements Ryan McKinley's suggestion (from SOLR-773):\n\nIt would be great if the schema field type could define everything needed to index and search. There are (at least) three approaches to indexing points that each have their advantages (and disadvantages) - we should be able to support any of these options.\n\n\n\tGeoPointField (abstract? the standard stuff about dealing with points)\n\t\n\t\tGeoPointFieldHash (represented as a GeoHash, fast bounds query (with limited accuracy))\n\t\tGeoPointFieldTiers (highly scalable, fast, complex)\n\t\t\n\t\t\tGeoPointFieldTrie (...)\n\t\t\n\t\t\n\t\n\t\n\tGeoLineField...\n\tGeoPolygonField...\n\n\n\nI think it makes sense to try to follow the georss format to represent geometry:\n\n\n<georss:point>45.256 -71.92</georss:point>\n\n<georss:line>45.256 -110.45 46.46 -109.48 43.84 -109.86</georss:line>\n\n<georss:polygon>\n\t45.256 -110.45 46.46 -109.48 43.84 -109.86 45.256 -110.45\n</georss:polygon>\n\n<georss:box>42.943 -71.032 43.039 -69.856</georss:box>\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12781193",
            "date": "2009-11-22T19:32:11+0000",
            "content": "Sounds good, but how are you going to deal with the field types that need multiple fields (i.e. SOLR-1131)?\n\nWe certainly could put up a GeohashField to get things started. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781202",
            "date": "2009-11-22T19:52:45+0000",
            "content": "Hey Grant:\n\nSounds good, but how are you going to deal with the field types that need multiple fields (i.e. SOLR-1131)? \n\nHeh, I wasn't. I was just starting with GeoPointField, and was going to start indexing it as e.g., a single String value, in georss:point format. I thought about the whole 2-field approach, i.e., to do a double lat, double lon thingeee, but I just wanted to start simple, with what exists, and see where it leads me. Sound OK?\n\nCheers,\nChris "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12781215",
            "date": "2009-11-22T20:58:49+0000",
            "content": "I'm not sure what good that does to put a lat/lon in a single String in georss:point format.  What's your intent for searching/sorting/faceting?   "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781247",
            "date": "2009-11-22T23:15:12+0000",
            "content": "Good question: I'm not sure what my intent is yet either. Sorting on a lat,lon pair is different depending on which lines you are trying to follow (North, South, etc.), so it's not entirely clear to me the best way to do that. As far as searching my guess is that, at least in the beginning, like requiring the user to input Dates in ISO 8601, maybe we start out asking the users to input georss points, but then get smarter as we understand more. Dunno, just a thought. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12781262",
            "date": "2009-11-23T00:30:52+0000",
            "content": "I'd say wait until SOLR-1131 is done for everything other than the GeohashFieldType, as what you are proposing doesn't get you anything over just using StrField.  By all means, put up a patch for GeohashFieldType when you have.  We can commit that now. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781265",
            "date": "2009-11-23T00:42:26+0000",
            "content": "Hey Grant: \n\nwhat you are proposing doesn't get you anything over just using StrField.\n\nI sort of get this, but then I don't. The outlier is DateField \u2013 what does it get you other than some magic around ensuring that dates are stored as ISO 8601 dates? In the end, it's just a special type of StrField though too, right? Not trying to be difficult, just trying to understand.\n\nIn any case, I'll focus on GeoHashFieldType for now, regardless...\n\nCheers,\nChris\n "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781299",
            "date": "2009-11-23T04:24:02+0000",
            "content": "I'm linking this to SOLR-1592 since regardless of how we store the spatial point field types, we should have the ability to output those fields as georss per ryan's suggestion. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781306",
            "date": "2009-11-23T04:41:07+0000",
            "content": "\n\tpatch only includes GeoField, and doesn't do any fancy multi-field stuff yet, as discussed. However, the parts about writing its output in georss is probably still useable in its current form. Note to test this patch, post.sh the example doc I'm attaching to your solr instance using the mods to the example schema I've attached. Then, do a default solr query to get the doc back, and then observe a georss:point field coming back \n\n "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781307",
            "date": "2009-11-23T04:43:31+0000",
            "content": "\n\tnote check out this patch: I messed up the copyrights on the other one I included (Eclipse threw my work copyright ones in there rather than Apache)...\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12781945",
            "date": "2009-11-24T14:17:42+0000",
            "content": "Hey Chris,\n\nI'm not sure we want to bring in the actual namespace for georss.  That seems like overkill, but I'm open to hear what others think. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12781973",
            "date": "2009-11-24T15:11:02+0000",
            "content": "Also, where does this patch actually encode the Geohash value?   The Lucene spatial contrib JAR has GeoHashUtils for just this.  See the GeohashFunction for usage.  "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781975",
            "date": "2009-11-24T15:17:02+0000",
            "content": "Hey Grant:\n\nIt doesn't encode the geohash, I was working on that. What's hilarious is that I was reading up on Wikipedia on how to implement Geohash:  http://en.wikipedia.org/wiki/Geohash. I noted that it needed a Base32 encoder/decoder as part of this. So, of course I went over to commons-codec and looked for it there: http://commons.apache.org/codec/. I saw CODEC-88 and said oh, no one has implemented an ASL base32 encoder: I guess I'll implement one as part of this issue and then contribute it back to commons-codec. However if you are saying this exists already in the spatial contrib jar, acccck!!!! What's more if that implements the whole GeoHash thing then double acccck!\n\nI'll have a patch up in 30 minutes if that's the case. However, if it is the case, then I'm sad because I just got my Base32.encode function to work: http://tools.ietf.org/html/rfc3548 \n\nCheers,\nChris "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781991",
            "date": "2009-11-24T15:53:29+0000",
            "content": "sniffle, found the geohash in spatial contrib  Uh uh I mean, yes!\n\nPatch, attached... "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12781996",
            "date": "2009-11-24T15:58:20+0000",
            "content": "another Eclipse copyright snafu (I took it out back though and I don't think this will be happening again), please use this latest patch... "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12782774",
            "date": "2009-11-26T07:08:52+0000",
            "content": "\n\tupdated patch based on SOLR-1592 being committed...\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12787113",
            "date": "2009-12-07T21:10:57+0000",
            "content": "FYI, see the SOLR-1131 for an implementation of a Point Field Type. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12787115",
            "date": "2009-12-07T21:14:40+0000",
            "content": "we should have the ability to output those fields as georss per ryan's suggestion\n\nRyan can correct me if I am putting words in his mouth, but I don't think he literally meant we needed to use those exact tags.  I think he just meant the format of the actual values. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12787121",
            "date": "2009-12-07T21:24:39+0000",
            "content": "Hey Grant:\n\nRyan can correct me if I am putting words in his mouth, but I don't think he literally meant we needed to use those exact tags. I think he just meant the format of the actual values.\n\nAh no worries \u2013 I think it would be a nice feature to actual output using those exact tags. That's the point of a standard, right? With the tags comes namespacing and all that good stuff, which I believe to be important.\n\nAlso, since XmlWriter is even more flexible per SOLR-1592, then I see no reason not to use those tags in the output?\n\nCheers,\nChris "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12787150",
            "date": "2009-12-07T22:05:13+0000",
            "content": "FYI, see the SOLR-1131 for an implementation of a Point Field Type. \n\nSure, I'll take a look @ it and try to bring this patch up to speed w.r.t to that. Independently though, the geohash implementation i put up should be good to go right now. Please take a look and let me know if you are +1 to commit. I included an example doc to test it out with.\n\nCheers,\nChris "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12787198",
            "date": "2009-12-07T23:42:59+0000",
            "content": "Can you put a patch containing just the geohash stuff? "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12787282",
            "date": "2009-12-08T03:38:08+0000",
            "content": "updated patch containing only the geohash goodies. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12789823",
            "date": "2009-12-12T23:55:38+0000",
            "content": "Okay, so I gave up on outputting georss in the SOLRXmlResponse (sniffle). Instead, here's the 1st of 2 patches. This one outputs the point as a double array. I'm torn. It's probably more conceptually correct, but it's weirder from a I put in a string delimited by a whitespace and got out a point as an array. Nevertheless, I'm attaching it. Next one will just be a string. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12789824",
            "date": "2009-12-13T00:00:12+0000",
            "content": ", and #2, the string version. My +1 for this in the end. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794415",
            "date": "2009-12-24T13:06:34+0000",
            "content": "I committed PointType as part of SOLR-1131.  This leaves the geohash stuff, which I take a look at now. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794487",
            "date": "2009-12-24T19:37:10+0000",
            "content": "Here's a patch for Geohash along w/ tests and support in the examples.   "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12794494",
            "date": "2009-12-24T21:11:54+0000",
            "content": "Grant:\n\nThanks! +1 on the patch \u2013 I think it's pretty much ready to go.\n\nCheers,\nChris "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794620",
            "date": "2009-12-26T15:40:54+0000",
            "content": "Should have a CartesianTier field type patch today. "
        },
        {
            "author": "Chris Male",
            "id": "comment-12794627",
            "date": "2009-12-26T15:56:47+0000",
            "content": "Hi Grant,\n\nAre you building the CartesianTier field type against the existing CartesianTier API? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794628",
            "date": "2009-12-26T16:07:06+0000",
            "content": "For better or worse, yes.  It's either that, or it needs to be duplicated here until Solr is on 3.x of Lucene and can incorporate your changes there. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794634",
            "date": "2009-12-26T16:54:08+0000",
            "content": "Here's a patch with both geohash and Cartesian Tier.\n\nNote, the test for Cartesian Tier (in PolyFieldTest) is not yet correct even though I think the underlying functionality is. (In other words, the test itself is not right).\n\nComments/improvements welcome.  Still needs javadocs (and wiki docs on http://wiki.apache.org/solr/SpatialSearch).\n\nOne of the interesting things for Cart Tier is what the notion of a field query and range query are.  See my thoughts in the comments.  Also, I currently am throwing an UnsupportedOpException in getValueSource in Cart Tier stuff.  Not sure if it is meaningful or not to allow functions to operate on the whole tier. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12794649",
            "date": "2009-12-26T21:12:31+0000",
            "content": "\n\tupdated Grant's patch with more javadocs\n\tformatting updates\n\tfixed bug about referencing StrFieldSource via SOLR-1688\n\n\n\nI get errors on the following tests:\n\n   [junit] Tests run: 2, Failures: 1, Errors: 0, Time elapsed: 2.473 sec\n    [junit] Test org.apache.solr.search.function.distance.DistanceFunctionTest FAILED\n    [junit] Tests run: 5, Failures: 1, Errors: 0, Time elapsed: 6.32 sec\n    [junit] Test org.apache.solr.schema.PolyFieldTest FAILED\n\nWhich I think Grant noted in his prior comment. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794681",
            "date": "2009-12-27T12:50:33+0000",
            "content": "The DistanceFunctionTest failure is unrelated and has been fixed.  The PolyFieldTest failure is expected. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794682",
            "date": "2009-12-27T12:57:29+0000",
            "content": "fixed bug about referencing StrFieldSource via SOLR-1688\n\nWhat's the bug here? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794684",
            "date": "2009-12-27T14:59:21+0000",
            "content": "The problem w/ the PolyFieldTest is that the CartesianShapeFilterbuilder automatically picks the \"best fit\" tier w/o knowing what tiers were actually indexed.  So, it picks tier 15 when the test only sets up tiers 4-10. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12794690",
            "date": "2009-12-27T16:22:44+0000",
            "content": "One of the interesting things for Cart Tier is what the notion of a field query and range query are\n\nHmmm, why is there even a fieldType for cartesian tier?\nHow will it be used?  I don't see any examples of end-user config and query syntax this is meant to support.\n "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12794693",
            "date": "2009-12-27T16:31:14+0000",
            "content": "Hi Grant:\n\nWhat's the bug here?\n\nYour last patch referenced StrFieldSource in the GeoHashField class we developed:\n\n\n+  @Override\n+  public ValueSource getValueSource(SchemaField field, QParser parser) {\n+    return new StrFieldSource(field.name);\n+  }\n+\n\n\n\nOf course, StrFieldSource is a private class defined in StrField in the o.a.solr.schema package. This led me to take a look and realize that the FieldSources are really defined inconsistently (check out SOLR-1688, patch available).\n\nCheers,\nChris "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794694",
            "date": "2009-12-27T16:34:41+0000",
            "content": "How will it be used?\n\nIt's a common GIS technique for reducing the number of terms/space to enumerate in a single field by dynamically selecting the appropriate tier based on the lat/lon input and a distance.  It's mainly used for creating filters.\n\nOnce SOLR-1568 is converted to use this field type, then it will be fully supported. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794695",
            "date": "2009-12-27T16:35:53+0000",
            "content": "Of course, StrFieldSource is a private class\n\nNo it's not.  It's package private.  Is there something that isn't working? "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12794699",
            "date": "2009-12-27T16:49:32+0000",
            "content": "No it's not. It's package private. Is there something that isn't working?\n\nInteresting. Eclipse was giving me an error on using StrFieldSource in GeoHashField, right on that line I pasted above. It said StrFieldSource not found, and so taking a look it looked like StrFieldSource was an inner class (hard to see that little \"}\" at the end and whether it was defined inside of StrField or not). So I thought you were referencing an inner (private) class from StrField external to it. Funny now though after an Eclipse rebuild, Eclispe seems to be OK with StrFieldSource and its referencing in GeoHashField (which it should since they are both in the same package).\n\nRegardless though, this illustrates my point on SOLR-1688 \u2013 these FieldCacheSources should be defined a bit more consistently \u2013 when looking at a bunch of code, it's hard to see whether it was an inner class or a separate class defined in the same java file. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12794823",
            "date": "2009-12-28T15:00:19+0000",
            "content": "> How will it be used?\nIt's a common GIS technique\n\nI meant as it pertains to Solr... what will one put in their schema and then what will an example query look like that does both a filter and a sort by distance?  Or is that out of scope for this issue? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794834",
            "date": "2009-12-28T17:02:05+0000",
            "content": "There is an example of what goes in the schema on this patch:\n\n<!--\n      A CartesianTier is like a set of zoom levels on an interactive map (i.e. Google Maps or MapQuest).  It takes a lat/lon\n      field and indexes it into (endTier - startTier) different fields, each representing a different zoom level.\n      This can then be leveraged to quickly narrow the search space by creating a filter, at an appropriate tier level,\n      that only has to enumerate a minimum number of terms.\n\n      See http://wiki.apache.org/solr/SpatialSearch\n     -->\n    <fieldType name=\"tier\" class=\"solr.CartesianTierField\" start=\"4\" end=\"15\" subFieldSuffix=\"_d\"/>\n\n\n\nI think the filter question is best answered on SOLR-1568, but I'll give a brief thought.  Something like:\n\n&fq={!tier dist=20}location:49.32,-79.0\n\n\nor it could be:\n\n&fq={!tier lat=49.32 lat=-79.0 dist=20}\n\n\n\nI'm not sure which I prefer. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794888",
            "date": "2009-12-28T19:13:03+0000",
            "content": "Renamed CartesianTierFieldType to SpatialTileField and renamed the other nomenclature to be called a SpatialTileField as I think the \"tile\" name is much more commonly used in the GIS communities. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12794913",
            "date": "2009-12-28T20:18:23+0000",
            "content": "The reason why I was asking about interface examples is that it looks like filtering is being considered separate (i.e. it would be up to the user to correlate the point field with the tile field).  While it's fine to allow the explicit creation of a tile filter, it doesn't seem like we should require clients to know all the details.\n\n#gfilt short for geo-filter?\nq=foo&fq=\n{!gfilt p=10,20 f=store_location, d=1000}\n&sort=gdist(store_location,10,20)\n\nSo it would be really nice if the same request would work regardless of which point field was being used (trie based, spacial tile, or geohash). "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794922",
            "date": "2009-12-28T20:28:59+0000",
            "content": "So it would be really nice if the same request would work regardless of which point field was being used (trie based, spacial tile, or geohash).\n\nAgreed, how about I rename SOLR-1568 to be \"Create a Spatial Filter Parser Plugin\" or something to that effect and we handle it there? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12795006",
            "date": "2009-12-29T02:59:03+0000",
            "content": "Committed revision 894301. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12795069",
            "date": "2009-12-29T15:24:01+0000",
            "content": "Unlike PointType, it seems odd that a user would need to understand and declare any kind of subFieldTyp/Suffiix for SpatialTileField... seems like this one we really want to be an implementation detail somehow... and ultimately it seems like we want to allow the SpacialTileFIeld to be an implementation detail as well.  It would be nice to just define a SpacialTilePoint and just use it for everything (filtering, distance calculations, etc). "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12795070",
            "date": "2009-12-29T15:38:21+0000",
            "content": "Unlike PointType, it seems odd that a user would need to understand and declare any kind of subFieldTyp/Suffiix for SpatialTileField... seems like this one we really want to be an implementation detail somehow..\n\nI suppose they could just always be a DoubleField subtype, but how do you guarantee it is registered in the schema?  I suppose it is 99.99% likely it will be there, so we could just assume it.  I can change it to do this.\n\nand ultimately it seems like we want to allow the SpacialTileFIeld to be an implementation detail as well. It would be nice to just define a SpacialTilePoint and just use it for everything (filtering, distance calculations, etc).\n\nI'm not sure I see how to use a tile for anything other than filtering (is the point in the box or not).  I suppose it could be used for vary crude distance calculations, but that doesn't seem all that useful.  I think there may be too much of a goal to hide all the details from the application.  The choice of the data structure is going to depend on the application, just as one chooses to use int, float or double depending on their application needs.  Many applications will do just fine using PointType with a double, even for range queries.  Others may specifically want a tile approach as it best solves their problem. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12795073",
            "date": "2009-12-29T15:50:29+0000",
            "content": "I'm not sure I see how to use a tile for anything other than filtering \n\nThat's the point though - as a casual user, I want a point field.  I want to be able to do efficient spacial search on that field and not worry about all of the details.  See the example I gave above... it's doing everything spacial-related on the same field.  So a higher level SpatialTilePoint would be a point field (i.e. it would still have lat/lon separately) that used tiles under the cover for efficient bounding box / filters.\n\nedit: don't get me wrong, I think it's also good to also enable the use of SpatialTileField separately (as this issue does).  It's the overall spacial-solr capabilities I'm talking about.\n\nThe choice of the data structure is going to depend on the application\n\nThere will often be many applications / clients.  One should be able to change the underlying implementation and use the same requests.  We can do this today with range queries on any type of numeric field... we should be able to do it with a bounding box or distance filter. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12795075",
            "date": "2009-12-29T16:04:57+0000",
            "content": "A tile is not a point.  A tile is a box containing lots of points and is used as a quick substitution for all of those points in the box.  It's basically an indexing time optimization that precalculates the bounding boxes ahead of time.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12795076",
            "date": "2009-12-29T16:10:48+0000",
            "content": "A tile is not a point.\n\nThen we're talking past each other a bit.  I understand what a tile is.\nA tile can also be viewed as an implementation detail to speed up spacial querying / filtering.  So we could have a SpatialTilePoint that is a point, and under the covers, it also does stuff (like index spatial tiles) to speed up filtering.\n\nI'm not suggesting changing SpatialTileField... I'm suggesting that in the overall scheme of things, it's not the highest level abstraction we want. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12795077",
            "date": "2009-12-29T16:16:05+0000",
            "content": "\nA tile can also be viewed as an implementation detail to speed up spacial querying / filtering. So we could have a SpatialTilePoint that is a point, and under the covers, it also does stuff (like index spatial tiles) to speed up filtering.\n\nYeah, I debated whether we wanted the SpatialTileField to also index the point (as in deferring to PointType) but decided this was easily enough done via a copy field.  If you think there is value there, though, it would be trivial to implement the combination of PointType and SpatialTileField.  \n\nFWIW, I think SOLR-1568 will take care of hiding the details sufficiently from the user. "
        },
        {
            "author": "Chris Male",
            "id": "comment-12795081",
            "date": "2009-12-29T16:55:30+0000",
            "content": "Hi,\n\nI'm not entirely clear of the outcome of the discussion re the SpatialTilePoint, but I would really recommend keeping this as far away from the user as possible.  Ideally they shouldn't have to know about it at all since it seems that the implementation of the spatial tiling is still heavily in development.  Alternatives have even been suggested that would make it redundant.  \n\nI agree with the idea that to the user they should only be concerned about their documents have a Point.  It then frees us up to do all kinds of changes to the underlying logic, without the definition of their documents having to change. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12795087",
            "date": "2009-12-29T17:20:12+0000",
            "content": "Yep, the user still simply adds a Point to the document, that side of the coin won't change.   How the tile is implemented underneath the hood is in fact one of the benefits of doing it as a FieldType.  At some point, though, if a app designers does wants a tile-based system, they need to declare as much.  \n\nAlternatives have even been suggested that would make it redundant. \n\nWould be good to provide a reference if you have it handy, just so it is recorded here. "
        },
        {
            "author": "Chris Male",
            "id": "comment-12795097",
            "date": "2009-12-29T18:27:55+0000",
            "content": "The alternatives I'm alluding to are the use of TrieRanges to do an efficient bounding box style filter instead of the tiling system.  In SOLR-773 this was touched on, but I never saw an outcome to that discussion.  I think it is a worthwhile thing to explore, even as part of the work being done here in Solr. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12795108",
            "date": "2009-12-29T19:03:54+0000",
            "content": "Do you mean TrieFields (not familiar w/ TrieRanges)?  Assuming you do, Trie Fields can be used, but their downside is they require searching two fields instead of one.  They are already supported out of the box by Solr. "
        },
        {
            "author": "Chris Male",
            "id": "comment-12795112",
            "date": "2009-12-29T19:11:22+0000",
            "content": "Ah yes sorry TrieFields.  I don't see searching 2 fields as a downside since that's just an implementation detail like the Spatial Tile (which requires you to have upto 15 fields).  Assuming you can use the Point FieldType to index an x and y field, then it just becomes another option like Spatial Tile.  The fact they are supported out of box is part of the attraction, as it would reduce how much custom code has to be maintained.  "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12795116",
            "date": "2009-12-29T19:34:06+0000",
            "content": "I don't see searching 2 fields as a downside since that's just an implementation detail like the Spatial Tile \n\nSearching 2 fields instead of one can be significant.  AIUI, the big problem comes in when you have really dense areas that are used by high traffic sites, such as Manhattan or somewhere similar and could have a million lat/lon pairs all in a 5 mile radius. "
        },
        {
            "author": "Chris Male",
            "id": "comment-12795120",
            "date": "2009-12-29T19:42:35+0000",
            "content": "If its not something we want to support, then thats fine.  Particularly given the stats Patrick has, its been clear that in those high density environments its not a good choice.   My original point was that this aspect of the spatial search is still heavily in development and I was advocating trying to reduce the visibility of the Spatial Tile implementation so that we are freer to do that development. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12795129",
            "date": "2009-12-29T20:01:59+0000",
            "content": "My original point was that this aspect of the spatial search is still heavily in development and I was advocating trying to reduce the visibility of the Spatial Tile implementation so that we are freer to do that development.\n\n+1\nOne could also imagine future implementations that allow varying resolution depending on the area to help fix the dense city issues.\nAlso, an implementation based just on trie range queries might be nice, as a reference to test other implementations against.  As Patrick points out, the only missing code is that to determine the bounding box so that  range queries can be created. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12795160",
            "date": "2009-12-29T21:33:18+0000",
            "content": "Sounds good.  I'm open to specific suggestions on how to do that.  I think the key lies in the QParser, which will completely hide it from the app other than the schema designer needs to make the choice about setting up a field to index it.  I don't see it as something that would work as an attribute on the generic PointType, but we could have a derived 2D PointType that specifically captures both the point capabilities and the Tile capabilities.\n\nI also don't feel like having a SpatialTileField necessarily ties our hands dev. wise.  We can still change the underlying implementation (heck, it could likely all be done in a single field w/ payloads.  I'd like to see the performance characteristics of that)  The user is still just passing in a lat/lon pair against that field. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12795164",
            "date": "2009-12-29T21:50:05+0000",
            "content": "Sounds good. I'm open to specific suggestions on how to do that. I think the key lies in the QParser\n\nRight - I've mentioned a spacial base class a few times and this is why.  It allows the implementation to be hidden, while also allowing custom classes to plug right into it.  The QParser for \"sfilt\" would simply delegate to a method on the spacial base.\n\nI don't see it as something that would work as an attribute on the generic PointType, but we could have a derived 2D PointType that specifically captures both the point capabilities and the Tile capabilities. \n\nYep, that's what I had in mind. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872708",
            "date": "2010-05-27T23:20:36+0000",
            "content": "\nCorrecting Fix Version based on CHANGES.txt, see this thread for more details...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013224",
            "date": "2011-03-30T15:45:55+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}