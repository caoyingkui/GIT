{
    "id": "SOLR-3124",
    "title": "explain output is confusing when using trie fields (or any field type where the indexed terms are not human readable)",
    "details": {
        "affect_versions": "3.5",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "using the trunk example schema containing...\n\n\n<fieldType name=\"tint\" class=\"solr.TrieIntField\" precisionStep=\"8\" positionIncrementGap=\"0\"/>\n<dynamicField name=\"*_ti\" type=\"tint\"    indexed=\"true\"  stored=\"true\"/>\n\n\n\n...and indexing the doc...\n\n\n$ java -Ddata=args -jar post.jar '<add><doc><field name=\"id\">HOSS</field><field name=\"foo_ti\">42</field></doc></add>'\n\n\n\n...results in a query for foo_ti:42 producing the following debug output...\n\n\n  \"debug\":{\n    \"rawquerystring\":\"foo_ti:42\",\n    \"querystring\":\"foo_ti:42\",\n    \"parsedquery\":\"foo_ti:42\",\n    \"parsedquery_toString\":\"foo_ti:`\\b\\u0000\\u0000\\u0000*\",\n    \"explain\":{\n      \"HOSS\":{\n        \"match\":true,\n        \"value\":3.6741486,\n        \"description\":\"weight(foo_ti:`\\b\\u0000\\u0000\\u0000* in 0) [DefaultSimilarity], result of:\",\n        \"details\":[{\n            \"match\":true,\n            \"value\":3.6741486,\n            \"description\":\"fieldWeight in 0, product of:\",\n            \"details\":[{\n                \"match\":true,\n                \"value\":1.0,\n                \"description\":\"tf(freq=1.0), with freq of:\",\n                \"details\":[{\n                    \"match\":true,\n                    \"value\":1.0,\n                    \"description\":\"termFreq=1.0\"}]},\n              {\n                \"match\":true,\n                \"value\":3.6741486,\n                \"description\":\"idf(docFreq=1, maxDocs=29)\"},\n              {\n                \"match\":true,\n                \"value\":1.0,\n                \"description\":\"fieldNorm(doc=0)\"}]}]}},\n...",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13225648",
            "date": "2012-03-08T23:06:36+0000",
            "content": "generalizing summary & description since the issue actually has nothing to do with \"boosting\" and clarifying exactly how to reproduce (the field types used matter)\n\nBill: the fundamental problem is that the code for generating explain information works with the indexed terms in the queries, which for some field types is non-readable.  The Solr FieldType classes know how to format those indexed terms as readable strings, but the code for generating Explanation objects is at a lower level in lucene and doens't know about the schema at all.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13225653",
            "date": "2012-03-08T23:08:58+0000",
            "content": "if Explaination objects in lucnee were made morestructured, then Solr could process them and convert the \"raw\" indexed values into readable values based on the schema "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13226159",
            "date": "2012-03-09T15:53:59+0000",
            "content": "In trunk most of the explanation logic is now in the Sim itself: very little is done by the queries\nthemselves anymore: just the minimal basics like... toString'ing terms.\n\nIt seems the real problem here is how to toString() a Term right?\nWe currently have the confusing situation that Terms are generally toString()'ed with .utf8ToString():\n\n\n  public final String toString() { return field + \":\" + bytes.utf8ToString(); }\n\n\n\nbut this gives completely unhelpful output when they are actually binary, like this case. This goes for \nmore than just explanations really.\n\nMaybe since all the interning etc is removed and Term is rather simple in 4.0, we should make it non-final, this way subclasses\ncould override toString... or maybe it should really be a different method name in general (doing fancy stuff in toString is scary?)\n\nAnyway i'm not sure its the best approach forward, but I just wanted to put the idea out there. I think it sucks if explanations\naren't useful... but having subclasses of Term is scary in its own right too, especially if its just for debugging but breaks\nsearch code.\n\nFor example, this exact case is interesting because for a TermQuery.toString(), Term's toString() is actually not even used:\n\n\nif (!term.field().equals(field)) {\n  buffer.append(term.field());\n  buffer.append(\":\");\n}\nbuffer.append(term.text());\nbuffer.append(ToStringUtils.boost(getBoost()));\n\n\n\nSo the problem isn't very simple: especially since I'm sure there are places using Term.text() in other ways than\ndebugging...\n "
        }
    ]
}