{
    "id": "SOLR-2493",
    "title": "SolrQueryParser constantly parse luceneMatchVersion in solrconfig. Large performance hit.",
    "details": {
        "affect_versions": "3.1",
        "status": "Closed",
        "fix_versions": [
            "3.1.1",
            "3.2",
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I' m putting this as blocker as I think this is a serious issue that should be adressed asap with a release. With the current code this is no way near suitable for production use.\n\nFor each instance created SolrQueryParser calls\n\ngetSchema().getSolrConfig().getLuceneVersion(\"luceneMatchVersion\", Version.LUCENE_24)\n\ninstead of using\n\ngetSchema().getSolrConfig().luceneMatchVersion\n\nThis creates a massive performance hit. For each request, there is generally 3 query parsers created and each of them will parse the xml node in config which involve creating an instance of XPath and behind the scene the usual factory finder pattern quicks in within the xml parser and does a loadClass.\n\nThe stack is typically:\n\n   at org.mortbay.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:363)\n       at com.sun.org.apache.xml.internal.dtm.ObjectFactory.findProviderClass(ObjectFactory.java:506)\n       at com.sun.org.apache.xml.internal.dtm.ObjectFactory.lookUpFactoryClass(ObjectFactory.java:217)\n       at com.sun.org.apache.xml.internal.dtm.ObjectFactory.createObject(ObjectFactory.java:131)\n       at com.sun.org.apache.xml.internal.dtm.ObjectFactory.createObject(ObjectFactory.java:101)\n       at com.sun.org.apache.xml.internal.dtm.DTMManager.newInstance(DTMManager.java:135)\n       at com.sun.org.apache.xpath.internal.XPathContext.<init>(XPathContext.java:100)\n       at com.sun.org.apache.xpath.internal.jaxp.XPathImpl.eval(XPathImpl.java:201)\n       at com.sun.org.apache.xpath.internal.jaxp.XPathImpl.evaluate(XPathImpl.java:275)\n       at org.apache.solr.core.Config.getNode(Config.java:230)\n       at org.apache.solr.core.Config.getVal(Config.java:256)\n       at org.apache.solr.core.Config.getLuceneVersion(Config.java:325)\n       at org.apache.solr.search.SolrQueryParser.<init>(SolrQueryParser.java:76)\n       at org.apache.solr.schema.IndexSchema.getSolrQueryParser(IndexSchema.java:277)\n\n\nWith the current 3.1 code, I do barely 250 qps with 16 concurrent users with a near empty index.\n\nSwitching SolrQueryParser to use getSchema().getSolrConfig().luceneMatchVersion and doing a quick bench test, performance become reasonable beyond 2000 qps.",
    "attachments": {
        "SOLR-2493-3.x.patch": "https://issues.apache.org/jira/secure/attachment/12478135/SOLR-2493-3.x.patch",
        "SOLR-2493.patch": "https://issues.apache.org/jira/secure/attachment/12478132/SOLR-2493.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Sami Siren",
            "id": "comment-13028620",
            "date": "2011-05-04T06:00:15+0000",
            "content": "Trunk version of Solr has this same problem too, I just timed comparable difference in req/sec when caching the Version vs the current implementation. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13028637",
            "date": "2011-05-04T06:40:06+0000",
            "content": "This was broken by the commit of LUCENE-2458. Indeed, code should use the already parsed luceneMatchVersion from config (and that was also intended to be used like that from my original luceneMatchVersion patch, see SOLR-1677, but at this time QueryParser was not yet versionified and added later through LUCENE-2458).\n\nI think we should fix this by using the public field from SolrConfig, the current code is incorrect. I did not review that when that commit was made.\n\nTo prevent such errors, can we make the XML unaccessible after parsing the config initially, so code trying to access XPath later fails?\n\nThe fix is indeed simple, I will attach patch! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13028639",
            "date": "2011-05-04T06:46:55+0000",
            "content": "Patch for trunk, 3.x/3.1 is similar, will attach after merge. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13028641",
            "date": "2011-05-04T06:49:43+0000",
            "content": "Patch for 3.x and 3.1 branch. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13028642",
            "date": "2011-05-04T06:51:11+0000",
            "content": "I also reviewed other places where luceneMatchVersion is used, all other places are correct (SpellChecker...). "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13028646",
            "date": "2011-05-04T07:18:59+0000",
            "content": "Committed trunk revision: 1099340\nMerged 3.x revision: 1099347\nMerged 3.1 branch revision: 1099349\n\nYou can fix this in you local installation by using the latest 3.1 stable branch, if you can't wait for 3.1.1  "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13028647",
            "date": "2011-05-04T07:20:00+0000",
            "content": "Here the final 3.x patch (the prev one was incomplete) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13028727",
            "date": "2011-05-04T12:24:51+0000",
            "content": "this wasn't broken by the lucene commit.\n\nthis is solr's fault by having a getter that does some heavy duty xml shit.... I don't think the issue is fixed until these \"getters\" that parse xml are removed!!!!! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13028728",
            "date": "2011-05-04T12:27:26+0000",
            "content": "...as I said before  "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13028729",
            "date": "2011-05-04T12:31:13+0000",
            "content": "In my opinion, the correct way to solve this is to make all methods in o.a.solr.core.Config protected as they should only be called by subclasses doing the actual parsing.\n\nUwe "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13028734",
            "date": "2011-05-04T12:34:16+0000",
            "content": "\nIn my opinion, the correct way to solve this is to make all methods in o.a.solr.core.Config protected as they should only be called by subclasses doing the actual parsing\n\n+1 "
        },
        {
            "author": "Chris Male",
            "id": "comment-13028736",
            "date": "2011-05-04T12:40:09+0000",
            "content": "In my opinion, the correct way to solve this is to make all methods in o.a.solr.core.Config protected as they should only be called by subclasses doing the actual parsing.\n\n+1\n\nWe dont need getters doing parsing available to every component. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13028943",
            "date": "2011-05-04T20:35:10+0000",
            "content": "this is solr's fault by having a getter that does some heavy duty xml shit.\n\nthat sounds like some serious buck passing.\n\nAll of the \"get\" methods on the Config class take in xpath expressions \u2013 it should be obvious to any one who uses them that they are going to do xpath parsing.\n\nBy the looks of it, the SolrConfig constructor was already creating a public final \"luceneMatchVersion\" variable in it's constructor (using the xml parsing based COnfig method) it just wasn't getting used by the query parser.\n\nIn my opinion, the correct way to solve this is to make all methods in o.a.solr.core.Config protected as they should only be called by subclasses doing the actual parsing.\n\nI don't see how that would inherently protect us from this kind of mistake.\n\nThe cause of the problem came from needing public access to a \"getLuceneVersion\" type method on SolrConfig (which is a subclass of Config)\n\neven if all the methods in COnfig were protected, that could have very easily wound up being implemented like so ...\n\n\n  public Version getLuceneVersion() { return super.inefficientProtectedMethod(...) }\n\n\n\n...and we would have had the same problem.\n\nBottom line: we just need to be careful about how/when the Config XML parsing methods are used (protected or otherwise) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13028954",
            "date": "2011-05-04T20:46:54+0000",
            "content": "\nAll of the \"get\" methods on the Config class take in xpath expressions \u2013 it should be obvious to any one who uses them that they are going to do xpath parsing.\n\nHow is that obvious? There's definitely no javadoc saying this. In general, if you have an api that contains XYZ and you add a getXYZ() with absolutely no javadocs that behaves as more than a getter, thats a trap.\n\nSo I still agree with Uwe, it should be protected to prevent problems, also it would be nice if these methods were called *parse*XYZ() instead of *get*XYZ().\n\nOtherwise this is going to continue to happen! "
        },
        {
            "author": "Stephane Bailliez",
            "id": "comment-13028974",
            "date": "2011-05-04T21:27:43+0000",
            "content": "The problem is hardly about naming here, it is about correctly using classes when offered the choice. Mistake was made. That's it. We expect committers to be sufficiently knowledgeable about the codebase when committing code. That's true anywhere.\n\nYou can hardly expect a service ItemService to have methods such as:\n\ngetItemFromDatabase() or getItemFromServerOnTheOtherSideOfThePlanet() or getItemFromFile() or getItemFromMemory() if there are 4 different implementations of it., you have getItem() and the 4 different implementation do something different internally.\n\nI rather actually wonder why the config is not parsed entirely at startup rather than have nodes lying around and cherry-picked. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13028975",
            "date": "2011-05-04T21:27:51+0000",
            "content": "The cause of the problem came from needing public access to a \"getLuceneVersion\" type method on SolrConfig (which is a subclass of Config)\n\nThis is not true. getLuceneVersion is in Config not SolrConfig and its public like all the other getXxx() methods. Version is just a datatype like int/float/String. Thats all. It does not need to be public (like all other getters in Config class).\n\nIn general the bad thing about the whole config stuff in solr is mixing parsing and value holder. This should theoretically separate classes. So SolrConfig has no parse methods at all. In its ctor it would simply instantiate the ConfigParser (name the class like that) and use it to set the values in SolrConfig. That would be cotrrect design.\n\nThe good thing with this design: One could instantiate a SolrConfig and populate it programmatically or via a JSON parser or whatever. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13028980",
            "date": "2011-05-04T21:34:07+0000",
            "content": "I rather actually wonder why the config is not parsed entirely at startup rather than have nodes lying around and cherry-picked.\n\nIt is mostly and should. The problem here is as noted before: SolrConfig subclasses Config which is only for parsing. SolrConfig should simply sublass Object and simply instantiate a parser on ctor to parse and store all parsed content in itsself. After that the parser is useless and can be freed. This would even free the DTM/DOM staying alive until Solr shuts down. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13028986",
            "date": "2011-05-04T21:39:05+0000",
            "content": "How is that obvious?\n\nThe signature of these methods might be a tip-off:\n public double getDouble(String path, double def)\n\nOne can't be passing a String and have no idea what the string is used for  "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13028989",
            "date": "2011-05-04T21:44:12+0000",
            "content": "We should not again fight here against each other. The problem is fixed, we could release 3.1.1 if we fixed the last slowdown in MultiPhraseQuery.\n\nThe discussion here is just about how to prevent this. For me as a non-Solr comitter, when I did this code with Robert last year, I was also really confused about the design of Config (and in my opinion this is a wrong design). We should maybe open another issue and separate parsing and value-holding in two spearate classes (SolrConfig and ConfigParser). If we would do this all is solved (see above). "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13029003",
            "date": "2011-05-04T22:03:40+0000",
            "content": "I was also really confused about the design of Config (and in my opinion this is a wrong design)\n\nLike many things in solr/lucene the current design is the product many incremental back-compatible changes \u2013 not a top down view of what it should be.  I would love to use 4.0 as a chance to revisit configs and their relationship to xml/validation etc, but that is a load of work with very little glory...\n\n\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13029018",
            "date": "2011-05-04T22:34:13+0000",
            "content": "Ryan: I agree, this is why I always bring this up. With 4.0 we can reimplement APIs.\n\nOn the other hand: I thought Solr's backwards policy is about public HTTP-REST-APIs, why care on implementation details behind, why do we need to keep backwards? This is just a dumb question I never understood. As long as Solr behaves identical to the outside who cares if we change method signatures/class names? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13029028",
            "date": "2011-05-04T23:01:04+0000",
            "content": "I thought Solr's backwards policy is about public HTTP-REST-APIs, why care on implementation details behind, why do we need to keep backwards? This is just a dumb question I never understood. As long as Solr behaves identical to the outside who cares if we change method signatures/class names?\n\nYes, the compatibility priorities are for HTTP-REST APIs, next is probably the external config files \u2013 since changing them may be a hassel.\n\nIn 4.0, we should be able to change the internal method signatures/class names pretty easily.  If changing getDouble() to readDouble() makes things more clear, I'm +1  \u2013 but it still feels like a band-aid, one more incremental improvement.  \n\nLong term, i would love to see the custom config system we have replaced with something standard... like spring, or simly POJOs that are loaded (and saved!) via XStream.  This is the bigger pile of work I was referring to.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13029075",
            "date": "2011-05-05T00:47:23+0000",
            "content": "Ryan: yep... +1 to all that. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13029315",
            "date": "2011-05-05T13:06:04+0000",
            "content": "Long term, i would love to see the custom config system we have replaced with something standard... like spring, or simly POJOs that are loaded (and saved!) via XStream. This is the bigger pile of work I was referring to.\n\n+1\n\nI think XML is an poor configuration language.  It's great for one computer to talk to another, but for files that humans may edit, it's bad \u2013 too much stuff to type for the computer's benefit, too easy to make a silly mistake.\n\nI think something like Yaml is a better choice... this is what ElasticSearch uses, for example.\n\nAnd, while we're at it, I think we should make Solr's error checking brittle on startup: if anything is \"off\" about the configuration, the server refuses to start (see http://markmail.org/thread/ywkfmxjboyixkrjc). "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13029426",
            "date": "2011-05-05T16:42:29+0000",
            "content": "+1\n\n@Michael, agree on this. But instead of relying on a monolithic solrconfig.xml file or .yml file, isn't it better to re-design configuration to fit a path/node concept more fine-grained (like ZK nodes)? It doesn't feel quite right to store solrconfig.xml and schema.xml as a huge string in the SolrCloud ZK schema. It would be better to have stuff like /solr/configs/configA/general/abortOnConfigurationError=false as a separate config node. Likewise /solr/configs/configA/schema/types/text_en to define fieldType text_en. The config concept won't need to be bound to ZK either. There could be pluggable backend implementations, where one could read/write the existing XML formats. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13029433",
            "date": "2011-05-05T16:58:50+0000",
            "content": "Jan, I don't have any experience with ZooKeeper, but that sounds neat  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043605",
            "date": "2011-06-03T16:44:58+0000",
            "content": "Bulk close for 3.2 "
        }
    ]
}