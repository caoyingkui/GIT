{
    "id": "SOLR-11652",
    "title": "Cdcr TLogs doesn't get purged for Source collection Leader when Buffer is disabled from CDCR API",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Later",
        "status": "Resolved"
    },
    "description": "Cdcr transactions logs doesn't get purged on leader EVER when Buffer DISABLED from CDCR API.\n\nSteps to reproduce:\n\n1. Setup source and target collection cluster and START CDCR, BUFFER ENABLED.\n2. Index bunch of documents into source; make sure we have generated tlogs in decent numbers (>20)\n3. Disable BUFFER via API on source and keep on indexing\n4. Tlogs starts to get purges on follower nodes of Source, but Leader keeps on accumulating ever.",
    "attachments": {
        "SOLR-11652.patch": "https://issues.apache.org/jira/secure/attachment/12899181/SOLR-11652.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-20T22:35:09+0000",
            "content": "More details on the behavior:\n\n1. Cdcr target leader's tlogs doesn't get purged unless issues action=START at target\n2. Cdcr source leader's tlogs doesn't get purged when DISABLEBUFFER from API.\n3. Cdcr source if restarted, with DISABLEBUFFER from API earlier, behaves normally.\n4. The #3 point is expected, as source will read buffer config from ZK and load and mark tlogs at beginning, similarly reading from solrconfig.xml ",
            "author": "Amrit Sarkar",
            "id": "comment-16259966"
        },
        {
            "date": "2017-11-24T11:58:08+0000",
            "content": "I had a chance to chat with Erick Erickson, Varun Thacker to discuss the significance of \"buffering\" in CDC replication.\n\nMotivation for buffering in CDCR: listed on SOLR-11069 by Renaud:\n\nThe original goal of the buffer on cdcr is to indeed keep indefinitely the tlogs until the buffer is deactivated (https://lucene.apache.org/solr/guide/7_1/cross-data-center-replication-cdcr.html#the-buffer-element. This was useful for example during maintenance operations, to ensure that the source cluster will keep all the tlogs until the target clsuter is properly initialised. In this scenario, one will activate the buffer on the source. The source will start to store all the tlogs (and does not purge them). Once the target cluster is initialised, and has register a tlog pointer on the source, one can deactivate the buffer on the source and the tlog will start to be purged once they are read by the target cluster.\n\nWhat I understood looking at the code besides what Renaud explained:\n\nBuffer is always enabled on non-leader nodes of source. In source DC, sync b/w leaders and followers is maintained by buffer. If leader goes down, and someone else picks up, it uses bufferLog to determine the current version point.\n\nEssentially buffering was introduced to remind source that no updates has been sent over, because target is not ready, or CDCR is not started. The LastProcessedVersion for source is -1 when buffer enabled, suggesting no updates has been forwarded and it has to keep track of all tlogs. Once disabled, it starts to show the correct version which has been replicated to target.\n\nIn Solr 6.2, Bootstrapping is introduced which very well takes care of the above use-case, i.e. Source is up and running and have already received bunch of updates / documents and either we have not started CDCR or target is not available only until now. Whenever CDC replication is started (action=START invoked), Bootstrap is called implicitly, which copies the entire index folder (not tlogs) to the target. This is much faster and effective than earlier setup where all the updates from the beginning were sent to target linearly in batch size defined in the cdcr config. This earlier setup was achieved by Buffering (the tlogs from beginning).\n\nToday, if we see the current CDCR documentation page, buffering is \"disabled\" by default in both source and target. We don't see any purpose served by Cdcr buffering and it is quite an overhead considering it can take a lot heap space (tlogs ptr) and forever retention of tlogs on the disk when enabled. Also today, even if we disable buffer from API on source , considering it was enabled at startup, tlogs are never purged on leader node of shards of source, refer jira: SOLR-11652\n\nWe propose to make Buffer state default \"DISABLED\" in the code (CdcrBufferManager) and deprecate its APIs (ENABLE / DISABLE buffer). It will still be running for non-leader nodes on source implicitly and no user intervention is required whatsoever. ",
            "author": "Amrit Sarkar",
            "id": "comment-16265208"
        },
        {
            "date": "2017-11-24T14:16:16+0000",
            "content": "Please mind on the patch, I have commented out the relevant code from the module. I can remove them completely if that is how deprecation of APIs are done. ",
            "author": "Amrit Sarkar",
            "id": "comment-16265318"
        }
    ]
}