{
    "id": "LUCENE-8521",
    "title": "Change LatLonShape encoding to use selective indexing",
    "details": {
        "components": [],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "LUCENE-8496 allows for selecting the first n dimensions to be used for\u00a0building the index and the remaining dimensions to be used as data dimensions. This feature changes\u00a0LatLonShape encoding to a 7 dimension encoding instead of 6; where the first 4 are index dimensions defining the bounding box of the LatLonShape.Triangle and the remaining 3 data dimensions defining the vertices of the triangle.",
    "attachments": {
        "LUCENE-8521.patch": "https://issues.apache.org/jira/secure/attachment/12942311/LUCENE-8521.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16637409",
            "author": "Nicholas Knize",
            "content": "Attached patch changes LatLonShape encoding to 7 dimensions of size Long.BYTES. The first 4 dimensions are the bounding box of the triangle encoded as Integer.BYTES size. (leading zeros are compressed while building the common prefix of the nodes). The remaining 3 dimensions are the three vertices of the triangle encoded as Long.BYTES size in the form of X1Y1 X2Y2 X3Y3. With selective indexing provided by LUCENE-8496 the index is built as a 2 dimension bounding box, and the data dimensions are used when computing the triangle relation with the target query (Polygon or BoundingBox). ",
            "date": "2018-10-03T19:22:01+0000"
        },
        {
            "id": "comment-16637420",
            "author": "Nicholas Knize",
            "content": "From LUCENE-8496 I ran two benchmarks using 20 Million shape documents (linestring, polygon, multipolygon) from the planetOSM corpus of data. The results are as follows:\n\n6 dimension LatLonShape w/o selective indexing:\n\u2014\nINDEX SIZE: 4.944349942728877 GB\nREADER MB: 2.7018051147460938\nmaxDoc=20000000\nBEST M hits/sec: 0.9616386761834046\nBEST QPS: 5.816462716249435\n\n7 dimension LatLonShape w/ selective indexing (provided patch):\n\u2014\nINDEX SIZE: 8.462444095872343 GB\nREADER MB: 2.5924673080444336\nmaxDoc=20000000\nBEST M hits/sec: 1.5636273064182318\nBEST QPS: 9.457585426978618\n\nThis gives about a 70% performance boost at search time with the tradeoff of a larger index. ",
            "date": "2018-10-03T19:28:39+0000"
        },
        {
            "id": "comment-16653306",
            "author": "Ignacio Vera",
            "content": "It seems there is a typo in\u00a0LatLonShapeBoundingBoxQuery#relateRangeBBoxToQuery:\n\nFutureArrays.compareUnsigned(maxTriangle, maxYOffset, maxYOffset + BYTES, bbox, 2 * BYTES, 2 * BYTES) < 0\n\n\u00a0\n\napart from that +1.\n\n\u00a0\n\nJust for fun,\u00a0I have been playing limiting the number of indexed dimension to 8 and allowing more data dimensions so we can have an encoding using integers,\u00a010 data dimensions from which the first 4\u00a0are the bounding box. That seems more natural that using longs.\n\nRunning performance test on 30m polygons sample (dev= 10d, base=7d):\n\n||Index time (sec)||Index size (GB)||Reader heap (MB)||\n||Dev||Base||Diff ||Dev||Base||Diff||Dev||Base||Diff ||\n122.1s|119.5s| 2% ||2.77|2.83|-2%. ||0.77|0.92|-16%|\n\u00a0\n||Shape||M hits/sec\u00a0 \u00a0 \u00a0 ||QPS\u00a0 \u00a0 \u00a0 \u00a0 \u00a0 \u00a0 ||Hit count\u00a0 \u00a0 \u00a0 ||\n\u00a0      ||Dev||Base ||Diff||Dev||Base||Diff||Dev||Base||Diff||\nbox     |4.23|3.86. |10%. |26.22|23.93|10%|36262002|36262002| 0%|\npoly 10 |2.75|3.52  |-22% |9.47|12.11|-22%|65382571|65382571| 0%|\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\nThere is a mismatch of results.\n\n1) The index size does not change too much which I guess is due to good compression when using longs.\n\n2) Memory footprint is lower when using integers, still pretty low in both cases.\n\n3) Bounding box queries are faster but polygon queries are clearly slower.\u00a0Not sure why this difference.\n\nSo no clear\u00a0benefit of using integers.\n\n\u00a0 ",
            "date": "2018-10-17T10:08:19+0000"
        },
        {
            "id": "comment-16655713",
            "author": "ASF subversion and git services",
            "content": "Commit ed8a395948f406aca7ac55fd3bd0f5348af353c3 in lucene-solr's branch refs/heads/master from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ed8a395 ]\n\nLUCENE-8521: Change LatLonShape encoding to use selective indexing\n\nThis improvement changes LatLonShape encoding to 7 dimensions instead of 6. The first 4 are index dimensions defining the bounding box of the Triangle and the remaining 3 data dimensions define the vertices of the triangle. ",
            "date": "2018-10-18T18:30:38+0000"
        },
        {
            "id": "comment-16655728",
            "author": "ASF subversion and git services",
            "content": "Commit 2a04115a75c37e45015402f1056207da99fdebd1 in lucene-solr's branch refs/heads/branch_7x from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2a04115 ]\n\nLUCENE-8521: Change LatLonShape encoding to use selective indexing\n\nThis improvement changes LatLonShape encoding to 7 dimensions instead of 6. The first 4 are index dimensions defining the bounding box of the Triangle and the remaining 3 data dimensions define the vertices of the triangle. ",
            "date": "2018-10-18T18:38:38+0000"
        },
        {
            "id": "comment-16658729",
            "author": "ASF subversion and git services",
            "content": "Commit ed8a395948f406aca7ac55fd3bd0f5348af353c3 in lucene-solr's branch refs/heads/jira/http2 from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ed8a395 ]\n\nLUCENE-8521: Change LatLonShape encoding to use selective indexing\n\nThis improvement changes LatLonShape encoding to 7 dimensions instead of 6. The first 4 are index dimensions defining the bounding box of the Triangle and the remaining 3 data dimensions define the vertices of the triangle. ",
            "date": "2018-10-22T08:07:04+0000"
        }
    ]
}