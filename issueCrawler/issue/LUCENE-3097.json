{
    "id": "LUCENE-3097",
    "title": "Post grouping faceting",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/grouping"
        ],
        "type": "New Feature",
        "fix_versions": [
            "3.4",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This issues focuses on implementing post grouping faceting.\n\n\tHow to handle multivalued fields. What field value to show with the facet.\n\tWhere the facet counts should be based on\n\t\n\t\tFacet counts can be based on the normal documents. Ungrouped counts.\n\t\tFacet counts can be based on the groups. Grouped counts.\n\t\tFacet counts can be based on the combination of group value and facet value. Matrix counts.\n\t\n\t\n\n\n\nAnd properly more implementation options.\n\nThe first two methods are implemented in the SOLR-236 patch. For the first option it calculates a DocSet based on the individual documents from the query result. For the second option it calculates a DocSet for all the most relevant documents of a group. Once the DocSet is computed the FacetComponent and StatsComponent use one the DocSet to create facets and statistics.  \n\nThis last one is a bit more complex. I think it is best explained with an example. Lets say we search on travel offers:\n\n\n\nhotel\ndeparture_airport\nduration\n\n\nHotel a\nAMS\n5\n\n\nHotel a\nDUS\n10\n\n\nHotel b\nAMS\n5\n\n\nHotel b\nAMS\n10\n\n\n\n\n\nIf we group by hotel and have a facet for airport. Most end users expect (according to my experience off course) the following airport facet:\nAMS: 2\nDUS: 1\n\nThe above result can't be achieved by the first two methods. You either get counts AMS:3 and DUS:1 or 1 for both airports.",
    "attachments": {
        "LUCENE-30971.patch": "https://issues.apache.org/jira/secure/attachment/12487369/LUCENE-30971.patch",
        "LUCENE-3097.patch": "https://issues.apache.org/jira/secure/attachment/12480052/LUCENE-3097.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-05-14T16:21:23+0000",
            "content": "If we group by hotel and have a facet for airport. Most end users expect (according to my experience off course) the following airport facet:\n\n+1, I think that semantics is intuitive.  It treats each group as a doc w/ multi-valued field whose values are unioned from all docs within it.  So group \"Hotel a\" has values AMS, DUS for the departure_airport field. ",
            "author": "Michael McCandless",
            "id": "comment-13033575"
        },
        {
            "date": "2011-05-16T04:09:47+0000",
            "content": "Here is another example...\n\nDoctors have multiple offices. I want to store doctorid, doctor's name, gender (male/female), and office address as separate rows. Then I want to group by doctorid. I only want the one doctor. I then want to facet by gender and see the numbers after it is grouped. I also want the total rows to be after grouping.\n\ndoctorid, doctor's name,  gender, address\n1, Bill Bell, male, 55 east main St\n1, Bill Bell, male, 103 E 5th St\n2, Sue Jones, female, 67 W 97th St\n2, Sue Jones, female, 888 O'West St\n3, Toby Williams, male, 8 Vale St\n4, Margie Youth, female, 5 E Medical Center\n4, Margie Youth, female, 98456 E Rose St\n\nI would expect the grouping to return:\n\ntotal rows = 7\ngroup total rows = 4\ngroup_by\n1, \n   Bill Bell, male, 55 east main St\n   Bill Bell, male, 103 E 5th St\n2, \n   Sue Jones, female, 67 W 97th St\n   Sue Jones, female, 888 O'West St\n3, \n   Toby Williams, male, 8 Vale St\n4, \n   Margie Youth, female, 5 E Medical Center\n   Margie Youth, female, 98456 E Rose St\n\nI would expect if I say, rows=2, start=0, order by doctorid, I would get:\n\n1, \n   Bill Bell, male, 55 east main St\n   Bill Bell, male, 103 E 5th St\n2, \n   Sue Jones, female, 67 W 97th St\n   Sue Jones, female, 888 O'West St\n\nIf I say, facet.field=gender I would expect:\n\nmale: 2 (Bill Bell, Toby Williams)\nfemale: 2 (Sue Jones, Margie Youth)\n\nIf we had Spatial, and I had lat long for each address, I would expect if I say sort=geodist() asc that it would group and then find the closest \npoint for each grouping to return in the proper order. For example, if I was at 103 E 5th St, I would expect the output for doctorid=1 to be:\n\ngroup_by\n1, \n   Bill Bell, male, 103 E 5th St\n   Bill Bell, male, 55 east main St\n\n\nIf I only need the 1st point in the grouping I would expect the other points to be omitted. \n\ngroup_by\n1, \n   Bill Bell, male, 103 E 5th St\n2, \n   Sue Jones, female, 67 W 97th St\n3, \n   Toby Williams, male, 8 Vale St\n4, \n   Margie Youth, female, 5 E Medical Center\n\nThanks.\n ",
            "author": "Bill Bell",
            "id": "comment-13033865"
        },
        {
            "date": "2011-05-16T09:50:31+0000",
            "content": "Thanks for the example Bill \u2013 that makes sense!\n\nI think, in general, the post-group faceting should act \"as if\" you had indexed a single document per group, with multi-valued fields containing the union of all field values within that group, and then done \"normal\" faceting.  I believe this defines the semantics we are after for post-grouping faceting. ",
            "author": "Michael McCandless",
            "id": "comment-13033939"
        },
        {
            "date": "2011-05-16T09:59:27+0000",
            "content": "If I say, facet.field=gender I would expect:\nI think this can be achieved by basing the facet counts on the normal documents. Ungrouped counts.\n\n\nIf we had Spatial, and I had lat long for each address, I would expect if I say sort=geodist() asc that it would group and then find the closest \npoint for each grouping to return in the proper order. For example, if I was at 103 E 5th St, I would expect the output for doctorid=1 to be:\nThis just depends on the sort / group sort you provide. I think this should already work in the Solr trunk.\n\nIf I only need the 1st point in the grouping I would expect the other points to be omitted.\nThis depends on the group limit you provide in the request. ",
            "author": "Martijn van Groningen",
            "id": "comment-13033940"
        },
        {
            "date": "2011-05-16T10:10:38+0000",
            "content": "Right, gender in this example was single-valued per group.\n\nAnother way to visualize / define how post-group faceting should behave is: imagine for ever facet value (ie field + value) you could define an aggregator.  Today, that aggregator is just the count of how many docs had that value from the full result set.  But you could, instead define it to be \"count(distinct(doctor_id))\", and then you'll get the group counts you want.  (Other aggregators are conceivable \u2013 max(relevance), min+max(prices), etc.).\n\nConceptually I think this also defines the post-group faceting functionality, even if we would never implement it this way (ie count(distinct(doctor_id)) would be way too costly to do naively). ",
            "author": "Michael McCandless",
            "id": "comment-13033947"
        },
        {
            "date": "2011-05-16T10:23:39+0000",
            "content": "In fact, I think a very efficient way to implement post-group faceting is something like LUCENE-2454.\n\nIe, we just have to insure, at indexing time, that docs within the same \"group\" are adjacent, if you want to be able to count by unique group values.\n\nHmm... but I think this (what your \"identifier\" field is, for facet counting purposes) should be decoupled from how you group.  I may group by State, for presentation purposes, but count facets by doctor_id. ",
            "author": "Michael McCandless",
            "id": "comment-13033953"
        },
        {
            "date": "2011-05-16T21:10:04+0000",
            "content": "Ie, we just have to insure, at indexing time, that docs within the same \"group\" are adjacent, if you want to be able to count by unique group values.\nThis means that in the same group also need to be in the same segment, right? Or if we use this mechanism for faceting documents with the same facet need to be in the same segment??? If that is true, it would make the collectors easier. The SentinelIntSet we use in the collectors is not necessary, because we can lookup the norm from the DocIndexTerms. We won't find the same group in a different segment. On the other hand with scalability in mind would make it complex. Since documents with the in the same group need to be in the same segment. Which makes indexing complex. ",
            "author": "Martijn van Groningen",
            "id": "comment-13034312"
        },
        {
            "date": "2011-05-17T16:00:44+0000",
            "content": "Right, this'd mean all docs sharing a given group value are contiguous and in the same segment.  The app would have to ensure this, in order to use a collector that takes advantage of it. ",
            "author": "Michael McCandless",
            "id": "comment-13034836"
        },
        {
            "date": "2011-05-20T20:38:26+0000",
            "content": "Martjin, you should assigne this issue to you to make sure its not moved to version 3.3 ",
            "author": "Simon Willnauer",
            "id": "comment-13037070"
        },
        {
            "date": "2011-05-22T18:52:18+0000",
            "content": "Attached an initial patch with a collector that collects the most relevant documents for each group that match the query.\n\nThis collector can be used to create facets based on grouped counts. Actually the collector has many implementations for different situations. For example when the group sort within the groups is only score or fields. There is a general implementation that works for all sorts (e.g. a function).\n\nJust as in the caching collector there is a factory method that selects the most efficient collector based on the group sort.\n\nTODO:\n\n\tAdd tests\n\tClean up code / jdoc\n\n\n\nFeedback welcome! ",
            "author": "Martijn van Groningen",
            "id": "comment-13037643"
        },
        {
            "date": "2011-05-23T22:51:11+0000",
            "content": "\nPatch looks good Martijn!  A few small things:\n\n\n\tI think create() needs to be fixed to handle other SortField\n    types?  Eg, INT, FLOAT?\n\n\n\n\n\tI think you need to hold the docBase from each setNextReader and\n    re-base your docs stored in the GroupHead?  Because when you\n    retrieve them in the end you return them as top-level docIDs.\n\n\n\nThis would really benefit from the random test in TestGrouping \n\nThis can indeed help with post-facet counting, but I think only on\nfields whose value is constant within the group?  (Ie, because we pick\nonly the \"head\" doc, as long as the head doc is guaranteed to have the\nsame value for field X, it's safe to use that doc to represent the\nentire group for facet counting).\n\nOnce docs within one can have different values for field X then we\nneed a different approach for counting their facets... ",
            "author": "Michael McCandless",
            "id": "comment-13038297"
        },
        {
            "date": "2011-05-23T23:23:23+0000",
            "content": "I think create() needs to be fixed to handle other SortField types? Eg, INT, FLOAT?\nOops I forgot. We need to use the general impl for that.\n\nI think you need to hold the docBase from each setNextReader and re-base your docs stored in the GroupHead?\nI think I'm doing that. If you look at the updateHead() methods. You see that I rebasing the ids.\n\nOnce docs within one can have different values for field X then we need a different approach for counting their facets...\nBut that would only happen when if an update happen during a search? Then all collectors can have this problem, right? ",
            "author": "Martijn van Groningen",
            "id": "comment-13038317"
        },
        {
            "date": "2011-05-24T15:01:10+0000",
            "content": "\nI think you need to hold the docBase from each setNextReader and re-base your docs stored in the GroupHead?\n\nI think I'm doing that. If you look at the updateHead() methods. You see that I rebasing the ids.\n\nAhh excellent, I missed that.  Looks good!\n\n\nOnce docs within one can have different values for field X then we need a different approach for counting their facets...\n\nBut that would only happen when if an update happen during a search?\nThen all collectors can have this problem, right?\n\nThis is independent of updating during search I think.\n\nI don't think the existing collectors have a problem here?  Ie the\ngrouping collectors aren't normally concerned w/ multivalued fields of\nthe docs within each group.\n\nIt's only because we intend for these new group collectors to make\n\"post-grouping facet counting\" work in Solr that we have a problem.\nIe, these collectors won't properly count facets of fields that have\ndifferent values w/in one group?\n\nSay this is my original content:\n\n\n  name=3-wolf shirt\n    size=M, color=red\n    size=S, color=red\n    size=L, color=blue\n\n  name=frog shirt\n    size=M, color=white\n    size=S, color=red\n\n\n\nBut, I'm not using nested docs (LUCENE-2454), so I had to fully\ndenormalize into these docs:\n\n\n  name=3-wolf shirt, size=M, color=red\n  name=3-wolf shirt, size=S, color=red\n  name=3-wolf shirt, size=L, color=blue\n  name=frog shirt,   size=M, color=white\n  name=frog shirt,   size=S, color=red\n\n\n\nNow, if user does a search for \"color=red\"... without post-group\nfaceting (ie what Solr has today), you incorrectly see count=3 for\ncolor=red.\n\nWith post-group faceting, you should see count=2 for color=red (which\nthese collectors will do, correctly, I think?), but you should also\nsee count=2 for size=S, which I think these collectors will fail to\ndo?  (Ie, because they only retain the top doc per group...?). ",
            "author": "Michael McCandless",
            "id": "comment-13038605"
        },
        {
            "date": "2011-05-27T02:18:38+0000",
            "content": "One way to do this would be to treat each grouping as unique fields. That would solve both use cases:\n\nMy use case would work for top doc per group, but I can see that the counting looks for \"unique values in the field per group\". So your example would \"look like for counting\" for color:\n\n\n name=3-wolf shirt\n    color=red\n    color=blue\n\n  name=frog shirt\n    color=white\n    color=red\n\n\n\ncolor\n   red=2, blue=1, white=1\n\nFor size the counting looks like:\n\n\nname=3-wolf shirt\n    size=M, color=red\n    size=S, color=red\n    size=L, color=blue\n\n  name=frog shirt\n    size=M, color=white\n    size=S, color=red\n\n\n\nsize\n   M=2, S=2, L=1\n\nAnd the facets for size would not change for:\n\n\n\nname=3-wolf shirt\n    size=M, color=red\n    size=S, color=red\n    size=L, color=blue\n    size=S, color=blue\n    size=S, color=blue\n    size=L, color=blue\n\n  name=frog shirt\n    size=M, color=white\n    size=S, color=red\n\n\n\nThanks. ",
            "author": "Bill Bell",
            "id": "comment-13040033"
        },
        {
            "date": "2011-05-27T16:10:15+0000",
            "content": "Right, I think for post-grouping facet counts, the facet counting\nprocess must be aware of the groups.  Within each group, it can only\ncount each value (color=red, size=S) once... ",
            "author": "Michael McCandless",
            "id": "comment-13040304"
        },
        {
            "date": "2011-06-03T04:35:18+0000",
            "content": "OK... This issue seems stalled? Are we waiting on something else? ",
            "author": "Bill Bell",
            "id": "comment-13043210"
        },
        {
            "date": "2011-06-03T06:35:56+0000",
            "content": "OK... This issue seems stalled? Are we waiting on something else?\nFor the current attached patch I think that we first need to have the same abstraction as the collectors in LUCENE-3099 have. I think that it can be committed. After that we only need to wire it up in Solr (I'll open a new issue for that). Then we have the same behavior as in SOLR-236 patch with the facet.after option. Don't worry we'll get this soon!\n\nThis patch only support computing the grouped counts. Not the other the other count variant. I think for that we also depend on the faceting module. ",
            "author": "Martijn van Groningen",
            "id": "comment-13043229"
        },
        {
            "date": "2011-06-03T16:40:47+0000",
            "content": "bulk move 3.2 -> 3.3 ",
            "author": "Robert Muir",
            "id": "comment-13043561"
        },
        {
            "date": "2011-06-04T10:20:45+0000",
            "content": "Also, this patch won't properly count facets if the field ever has multiple values within one group.  But maybe that's fine for the first go.... progress not perfection. ",
            "author": "Michael McCandless",
            "id": "comment-13044256"
        },
        {
            "date": "2011-06-04T11:05:18+0000",
            "content": "Also, this patch won't properly count facets if the field ever has multiple values within one group\nThat is true. If facet values are different within a group the current collectors in the patch won't notice that.\nFor the case Bill is describing that facets work as expected with the current patch.\n\nBut maybe that's fine for the first go.... progress not perfection.\nDefinitely! But to continue I think we need the facet module. ",
            "author": "Martijn van Groningen",
            "id": "comment-13044269"
        },
        {
            "date": "2011-06-13T20:13:42+0000",
            "content": "An updated version of the patch. This is still work in progress.\n\nI basically rewrote the code in the same way as the other collectors were rewritten for LUCENE-3099.\n\nThings todo are creating tests and add some more documentation. This patch only covers the second facet / grouping method.  ",
            "author": "Martijn van Groningen",
            "id": "comment-13048742"
        },
        {
            "date": "2011-07-17T21:51:29+0000",
            "content": "Attached updated patch.\n\n\tUpdated to current trunk.\n\tAdded first test, that prove that the basic functionality is working.\n\n\n\nThings to be done:\n\n\tHook the collectors into the random test.\n\tSome more javadoc\n\tBackport to 3x.\n\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13066742"
        },
        {
            "date": "2011-07-21T22:26:39+0000",
            "content": "Updated the patch.\n\n\tIncluded the grouping collector into the random test.\n\tAdded more documentation.\n\n\n\nI think this collector is ready to be committed. This collector implements the second grouping / faceting case that I've described in the issue description. ",
            "author": "Martijn van Groningen",
            "id": "comment-13069249"
        },
        {
            "date": "2011-07-22T13:16:45+0000",
            "content": "Hmm I hit a test failure w/ this patch:\n\nant test -Dtestcase=TermAllGroupHeadsCollectorTest -Dtestmethod=testRetrieveGroupHeadsAsArrayAndOpenBitset -Dtests.seed=-8084704095495262480:-1926953444883897447\n\n\n\nAlso: can this collector use the new FixedBitSet instead of OpenBitSet...? ",
            "author": "Michael McCandless",
            "id": "comment-13069536"
        },
        {
            "date": "2011-07-24T12:40:18+0000",
            "content": "Updated the patch.\n\n\tFixed the test failure that Michael reported. The numbits in the bitset was equal to number of ids I set. There fore the Java assertion failed. Obviously the numbits must be one greater than the ids being set.\n\tChanged retrieveGroupHeads(maxDoc) return type to FixedBitSet.\n\tMoved random tests related to AbstractAllGroupHeadsCollector to TermAllGroupHeadsCollectorTest.\n\tDuring the random tests I ran into some other test failures related to sorting inside a group. I fixed those test failures as well.\n\n\n\nI think the patch is now ready to be committed! ",
            "author": "Martijn van Groningen",
            "id": "comment-13070158"
        },
        {
            "date": "2011-07-24T12:43:39+0000",
            "content": "Updated patch again. I forgot to update some jdocs. ",
            "author": "Martijn van Groningen",
            "id": "comment-13070160"
        },
        {
            "date": "2011-07-24T19:11:23+0000",
            "content": "Committed to trunk (rev. 1150470) and 3x branch (rev. 1150472). I'll keep this issue open for future developments. ",
            "author": "Martijn van Groningen",
            "id": "comment-13070231"
        },
        {
            "date": "2011-07-25T12:06:33+0000",
            "content": "The package.html still references OpenBitSet here? ",
            "author": "Michael McCandless",
            "id": "comment-13070451"
        },
        {
            "date": "2011-07-25T12:38:15+0000",
            "content": "I've fixed that. It now references FixedBitSet. ",
            "author": "Martijn van Groningen",
            "id": "comment-13070464"
        },
        {
            "date": "2011-07-25T13:13:31+0000",
            "content": "Thanks/\n\nWoops \u2013 also the comment in the java code in the package.html still says OpenBitSet! ",
            "author": "Michael McCandless",
            "id": "comment-13070486"
        },
        {
            "date": "2011-08-08T04:28:16+0000",
            "content": "Set this to resolved? ",
            "author": "Bill Bell",
            "id": "comment-13080735"
        },
        {
            "date": "2011-11-11T23:52:39+0000",
            "content": "martjin, is this done? seems like you committed to 3.x and trunk. if so can you close/resolve this issue? ",
            "author": "Simon Willnauer",
            "id": "comment-13148859"
        },
        {
            "date": "2011-11-12T08:28:08+0000",
            "content": "Well the code that got committed only creates facets for the most relevant document per group. This isn't really grouped facets. To implement this we need to modify Solr's faceting code / facet module code. So I think we can close this one and open a Solr issue to implement grouped facets in Solr (I do have some code for this, but it isn't perfect...) and maybe also an issue to add this to the faceting module ",
            "author": "Martijn van Groningen",
            "id": "comment-13149006"
        },
        {
            "date": "2011-11-14T12:22:07+0000",
            "content": "The support for real grouped faceting (matrix counts) needs to be added to Solr or faceting module. ",
            "author": "Martijn van Groningen",
            "id": "comment-13149601"
        },
        {
            "date": "2011-12-07T11:29:57+0000",
            "content": "Hi - is the matrix count feature available in Solr 3.5? Seeing as this is marked as closed I assume it is? If so do I need to do anything to use this feature? ",
            "author": "Ian Grainger",
            "id": "comment-13164331"
        },
        {
            "date": "2011-12-07T16:24:00+0000",
            "content": "Oh, sorry- I just read the previous comment properly - So the case I need fixing is SOLR-2898? ",
            "author": "Ian Grainger",
            "id": "comment-13164482"
        },
        {
            "date": "2011-12-07T16:37:06+0000",
            "content": "Yes, if you're using Solr. You can try to apply the patch it should work for field facets.  ",
            "author": "Martijn van Groningen",
            "id": "comment-13164496"
        }
    ]
}