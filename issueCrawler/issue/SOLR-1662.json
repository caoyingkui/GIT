{
    "id": "SOLR-1662",
    "title": "BufferedTokenStream incorrect cloning",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4.1",
            "1.5",
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "As part of writing tests for SOLR-1657, I rewrote one of the base classes (BaseTokenTestCase) to use the new TokenStream API, but also with some additional safety.\n\n public static String tsToString(TokenStream in) throws IOException {\n    StringBuilder out = new StringBuilder();\n    TermAttribute termAtt = (TermAttribute) in.addAttribute(TermAttribute.class);\n    // extra safety to enforce, that the state is not preserved and also\n    // assign bogus values\n    in.clearAttributes();\n    termAtt.setTermBuffer(\"bogusTerm\");\n    while (in.incrementToken()) {\n      if (out.length() > 0)\n        out.append(' ');\n      out.append(termAtt.term());\n      in.clearAttributes();\n      termAtt.setTermBuffer(\"bogusTerm\");\n    }\n\n    in.close();\n    return out.toString();\n  }\n\n\n\nSetting the term text to bogus values helps find bugs in tokenstreams that do not clear or clone properly. In this case there is a problem with a tokenstream AB_AAB_Stream in TestBufferedTokenStream, it converts A B -> A A B but does not clone, so the values get overwritten.\n\nThis can be fixed in two ways: \n\n\tBufferedTokenStream does the cloning\n\tsubclasses are responsible for the cloning\n\n\n\nThe question is which one should it be?",
    "attachments": {
        "SOLR-1662.patch": "https://issues.apache.org/jira/secure/attachment/12428290/SOLR-1662.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-12791370",
            "date": "2009-12-16T14:03:37+0000",
            "content": "Just the short desription from the API side in Lucene:\nLucene's documentation of TokenStream.next() says: \"The returned Token is a \"full private copy\" (not re-used across calls to next())\". AB_AAB_Stream.process() duplicates the token by just putting it uncloned into the outQueue. As the consumer of the BufferedTokenStream assumes that the Token is private it is allowed to change it - and by that it also changes the token in the outQueue. If you e.g. put another TokenFilter in fromt of this AB_AAB_Stream, and modify the token there it would break.\nIn my opinion, the responsibility to clone is in AB_AAB_Stream, BufferedTokenStream will never return the same token twice by itsself. So its a bug in the test. But Robert told me that e.g. RemoveDuplicates has a similar problem.\nThe general contract for writing such streams is: whenever you return a Token from next(), never put it somewhere else uncloned, because the caller can change it.\n\nThe fix is to do: write((Token) t.clone()); "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12791374",
            "date": "2009-12-16T14:09:16+0000",
            "content": "but Robert told me that e.g. RemoveDuplicates has a similar problem.\n\nRight, there is no cloning in RemoveDuplicates. CommonGrams creates a new Token() when it grams, but its not clear that this one is correct either.\n\nSo if we decide its the responsibility of the subclass, these implementations need thorough tests to see if they are ok or not.\nIf we add the cloning to BufferedTokenStream itself, then we know they are ok...  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12791866",
            "date": "2009-12-17T10:15:46+0000",
            "content": "\nSo if we decide its the responsibility of the subclass, these implementations need thorough tests to see if they are ok or not.\nIf we add the cloning to BufferedTokenStream itself, then we know they are ok...\n\nI think cloning should be done by sub-classes before writing. If BufferedTokenStream clones the token then every sub-class pays the price even though the use-case may just be to throw the token away. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12791867",
            "date": "2009-12-17T10:19:46+0000",
            "content": "I think cloning should be done by sub-classes before writing. If BufferedTokenStream clones the token then every sub-class pays the price even though the use-case may just be to throw the token away.\n\n+1, that was what i said in my first comment, too. Because BufferedTokenStream itsself never reuses the token. The problem is the test and RemoveDuplicates, that push the same instance twice into the queue. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12791888",
            "date": "2009-12-17T11:45:19+0000",
            "content": "cool, will work up a patch with javadocs wordage (I think we need this at least, its not obvious and there is no mention of it), and any fixes. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12791910",
            "date": "2009-12-17T13:06:21+0000",
            "content": "attached is patch to fix the javadocs and test (this same test is also an example in the javadocs header...)\n\nedit: also btw i finished converting the tests to assertTokenStreamContents for the other BufferedTokenStreams, there are no problems in DuplicateFilter or CommonGrams, so this should be all we need. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12791940",
            "date": "2009-12-17T14:12:41+0000",
            "content": "+1 Looks good! "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12792122",
            "date": "2009-12-17T20:48:39+0000",
            "content": "Committed revision 891889.\n\nThanks Robert and Uwe! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872780",
            "date": "2010-05-28T02:52:50+0000",
            "content": "\nCorrecting Fix Version based on CHANGES.txt, see this thread for more details...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12873375",
            "date": "2010-05-30T04:41:00+0000",
            "content": "Committed revision 949472.\n\nmerged to branch-1.4 for 1.4.1 "
        }
    ]
}