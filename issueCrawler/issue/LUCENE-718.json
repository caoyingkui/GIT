{
    "id": "LUCENE-718",
    "title": "possible build.xml addition to ensure 1.4 class compatibility",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "As encountered recently, setting the \"source\" and \"target\" values for the java compiler don't acctually test that the classes/methods are 1.4 compatible \u2013 just that the language syntax/features are...\n\nhttp://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6333296\n\n...i've come up with one possible solution, that's really feels like a hack, but i wanted to throw it out here for comment, in a nutshell:\n   1) we support a new optional javac.bootclasspath property indicating with path the \n       compiler should use.\n   2) people compiling with 1.4 can ignore that property\n   3) anyone who has a 1.5 compiler by default, can set this proprety to point at a 1.4 copy \n        of the rt.jar \u2013 which is not inlcuded (users would need to install it themselves)\n   4) as part of the \"init\" target the build file will attempt to compile a java class that is\n       syntactically correct in java 1.4, but utilizes a method only available in 1.5 ... if this \n       class compiles cleanly, the task will fail.\n   5) java 1.5 users that aren't concerned about submitting compatible patches back to \n        the comunity and don't want to hassle with a 1.4 version of rt.jar, can set \n        a\"javac.trustbootclasspath\" and go about their merry way.\n\nThe main idea here being that if someone has both JVMs installed and accidently uses the wrong one to test something before submitting a patch or committing, their build will either fail with a helpful message, or compile against the correct set of core classes anyway if they've done a small amount of setup.\n\nCaveats to commiting this:\n   a) it's a hack, so i don't wnat to commit unless multiple people like it\n   b) at the moment, all \"successful\" ant executions print a confusing compiler error as right \n       off the bat, it would be better if we could supress that somehow.\n   c) the BUILD.txt should be updated accordingly.",
    "attachments": {
        "check.bootclasspath.patch": "https://issues.apache.org/jira/secure/attachment/12345323/check.bootclasspath.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-11-20T02:43:08+0000",
            "content": "patch with changes ",
            "author": "Hoss Man",
            "id": "comment-12451209"
        },
        {
            "date": "2007-01-08T20:50:22+0000",
            "content": "i recently realized that <antcall> let's you specify the level of messages to be logged - so it might be possible to supress the \"good\" compile errors that way ... before i had a chance to test that, i realized a far easier way to check the classpath would be to use the <available> task to loook for a class added in java1.5 that wasn't in java1.4 ... no kludgy compilation of bogus code.\n\nthe one other big hurdle i just realized, is that as it stands the patch prevents the gdata-server from compiling ... before something like this could be commited, we'd need a way for contribs which want to use 1.5 to access the real bootclasspath when compiling so that people using a 1.5 JVM can specify a 1.4 rt.jar for use when compiling things by default, but can still compile 1.5 contribs cleanly.\n\nmost likely this could be done by adding some more optional params to the compile macro, and change the gdata build.xml files to pass non-default values to tose params ... but i don't really have time to play with that at the moment ... i'll go ahead and post an updated patch so people can give feedback if they are interested. ",
            "author": "Hoss Man",
            "id": "comment-12463124"
        },
        {
            "date": "2009-08-19T05:32:58+0000",
            "content": "Lucene 3.0 and JDK 1.5 are coming soon!  ",
            "author": "Michael Busch",
            "id": "comment-12744898"
        },
        {
            "date": "2009-08-19T05:37:21+0000",
            "content": "you realize we're going to have this same problem with 1.6 right? ",
            "author": "Hoss Man",
            "id": "comment-12744901"
        },
        {
            "date": "2009-08-19T05:48:40+0000",
            "content": "Yeah, but I thought nobody worked on this for 18 months, and it doesn't seem to be a big problem. But of course feel free to reopen!\nWe have >250 unscheduled issues in JIRA, I wanted to start cleaning up a bit as we're almost in the code freeze phase now... ",
            "author": "Michael Busch",
            "id": "comment-12744903"
        }
    ]
}