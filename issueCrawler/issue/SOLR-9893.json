{
    "id": "SOLR-9893",
    "title": "EasyMock/Mockito no longer works with Java 9 b148+",
    "details": {
        "components": [
            "Tests"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "7.0",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Blocker"
    },
    "description": "EasyMock does not work anymore with latest Java 9, because it uses cglib behind that is trying to access a protected method inside the runtime using setAccessible. This is no longer allowed by Java 9.\n\nActually this is really stupid. Instead of forcefully making the protected defineClass method available to the outside, it is much more correct to just subclass ClassLoader (like the Lucene expressions module does).\n\nI tried updating to easymock/mockito, but all that does not work, approx 25 tests fail. The only way is to disable all Mocking tests in Java 9. The underlying issue in cglib is still not solved, master's code is here: https://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/core/ReflectUtils.java#L44-L62\n\nAs we use an old stone-aged version of mockito (1.x), a fix is not expected to happen, although cglib might fix this!\n\nWhat should we do? This stupid issue prevents us from testing Java 9 with Solr completely!",
    "attachments": {
        "SOLR-9893.patch": "https://issues.apache.org/jira/secure/attachment/12847490/SOLR-9893.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-12-26T20:29:14+0000",
            "author": "Uwe Schindler",
            "content": "Sample stack trace:\n\n\n   [junit4] ERROR   0.38s J2 | TestManagedSchemaThreadSafety.testThreadSafety <<<\n   [junit4]    > Throwable #1: java.lang.ExceptionInInitializerError\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([8E654E5E1F32A757:142F5A06CCAD15A1]:0)\n   [junit4]    >        at org.mockito.cglib.core.KeyFactory$Generator.generateClass(KeyFactory.java:167)\n   [junit4]    >        at org.mockito.cglib.core.DefaultGeneratorStrategy.generate(DefaultGeneratorStrategy.java:25)\n   [junit4]    >        at org.mockito.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:217)\n   [junit4]    >        at org.mockito.cglib.core.KeyFactory$Generator.create(KeyFactory.java:145)\n   [junit4]    >        at org.mockito.cglib.core.KeyFactory.create(KeyFactory.java:117)\n   [junit4]    >        at org.mockito.cglib.core.KeyFactory.create(KeyFactory.java:109)\n   [junit4]    >        at org.mockito.cglib.core.KeyFactory.create(KeyFactory.java:105)\n   [junit4]    >        at org.mockito.cglib.proxy.Enhancer.<clinit>(Enhancer.java:70)\n   [junit4]    >        at org.mockito.internal.creation.jmock.ClassImposterizer.createProxyClass(ClassImposterizer.java:85)\n   [junit4]    >        at org.mockito.internal.creation.jmock.ClassImposterizer.imposterise(ClassImposterizer.java:62)\n   [junit4]    >        at org.mockito.internal.creation.jmock.ClassImposterizer.imposterise(ClassImposterizer.java:56)\n   [junit4]    >        at org.mockito.internal.creation.CglibMockMaker.createMock(CglibMockMaker.java:23)\n   [junit4]    >        at org.mockito.internal.util.MockUtil.createMock(MockUtil.java:26)\n   [junit4]    >        at org.mockito.internal.MockitoCore.mock(MockitoCore.java:51)\n   [junit4]    >        at org.mockito.Mockito.mock(Mockito.java:1243)\n   [junit4]    >        at org.apache.solr.schema.TestManagedSchemaThreadSafety.createZkController(TestManagedSchemaThreadSafety.java:135)\n   [junit4]    >        at org.apache.solr.schema.TestManagedSchemaThreadSafety.testThreadSafety(TestManagedSchemaThreadSafety.java:118)\n   [junit4]    >        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]    >        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [junit4]    >        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]    >        at java.base/java.lang.reflect.Method.invoke(Method.java:538)\n   [junit4]    >        at java.base/java.lang.Thread.run(Thread.java:844)\n   [junit4]    > Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make protected final java.lang.Class java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int,java.security.ProtectionDomain) throws java.lang.ClassFormatError accessible: module java.base does not \"opens java.lang\" to unnamed module @4cbd6df7\n   [junit4]    >        at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:207)\n   [junit4]    >        at java.base/java.lang.reflect.Method.checkCanSetAccessible(Method.java:192)\n   [junit4]    >        at java.base/java.lang.reflect.Method.setAccessible(Method.java:186)\n   [junit4]    >        at org.mockito.cglib.core.ReflectUtils$2.run(ReflectUtils.java:57)\n   [junit4]    >        at java.base/java.security.AccessController.doPrivileged(Native Method)\n   [junit4]    >        at org.mockito.cglib.core.ReflectUtils.<clinit>(ReflectUtils.java:47)\n   [junit4]    >        ... 55 more\n   [junit4]   2> 64469 INFO  (SUITE-TestManagedSchemaThreadSafety-seed#[8E654E5E1F32A757]-worker) [    ] o.a.s.c.ZkTestServer connecting to 127.0.0.1:51648 51648\n   [junit4]   2> 64474 INFO  (Thread-158) [    ] o.a.s.c.ZkTestServer connecting to 127.0.0.1:51648 51648\n   [junit4]   2> 64478 INFO  (SUITE-TestManagedSchemaThreadSafety-seed#[8E654E5E1F32A757]-worker) [    ] o.a.s.SolrTestCaseJ4 ###deleteCore\n   [junit4]   2> NOTE: leaving temporary files on disk at: C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-lusolr1\\solr\\build\\solr-core\\test\\J2\\temp\\solr.schema.TestManagedSchemaThreadSafety_8E654E5E1F32A757-001\n   [junit4]   2> Dez. 26, 2016 8:47:14 NACHM. com.carrotsearch.randomizedtesting.ThreadLeakControl checkThreadLeaks\n   [junit4]   2> WARNUNG: Will linger awaiting termination of 2 leaked thread(s).\n   [junit4]   2> NOTE: test params are: codec=Lucene70, sim=RandomSimilarity(queryNorm=false): {}, locale=so-KE, timezone=Etc/GMT+4\n   [junit4]   2> NOTE: Windows 10 10.0 amd64/Oracle Corporation 9-ea (64-bit)/cpus=4,threads=1,free=188820656,total=266338304\n   [junit4]   2> NOTE: All tests run in this JVM: [TestRandomFaceting, TestCharFilters, BlockJoinFacetSimpleTest, SolrCmdDistributorTest, TestTolerantUpdateProcessorRandomCloud, TestManagedSchemaThreadSafety]\n   [junit4] Completed [31/670 (1!)] on J2 in 0.83s, 1 test, 1 error <<< FAILURES!\n\n ",
            "id": "comment-15778937"
        },
        {
            "date": "2016-12-26T20:50:35+0000",
            "author": "Mark Miller",
            "content": "I imagine this will get addressed at some point as problems bubble up. I would just leave a blocker issue open for whatever version we expect to ship on 9 and ignore those tests for java 9.\n\nWe should probably open issues against these libs if they don't already exist. ",
            "id": "comment-15778968"
        },
        {
            "date": "2016-12-26T20:53:19+0000",
            "author": "Mark Miller",
            "content": "I am a proponent of only using one of these mock libs. It's too much to ask devs to deal with two.\n\nI hate even having to deal with one, but I do love how it forces devs to understand more than they want to make some changes. Changing some of these tests can be such a painful process though.\n\nI use simple object mocks wherever I can instead. ",
            "id": "comment-15778972"
        },
        {
            "date": "2016-12-26T21:24:10+0000",
            "author": "Uwe Schindler",
            "content": "Hi Mark,\nI fully agree with you. I will keep this issue open as a blocker. I will first fix the remaining issues in Lucene and then check out all usages of mocking libraries. Unfortunately, as you said, we have multiple mock libs. But all have the same problem behind: CGLIB. The underlying issue is the static initializer of CGLIB's ReflectUtils. I will open a bug report on their Github account later.\n\nJava 9 will (hopefully) be released this summer, so we should really work on solving the remaining Java 9 issues. From my participation in OpenJDK mailing lists I know that it is unlikely they will fix the setAccessible on runtime classes (public APIs) - they only have special cases for sun.misc.Unsafe and sun.misc.ReflectUtils.\n\nOne \"quick'n'dirty\" solution would be to add a command line option to the test runners in Solr only that opens \"java.lang\" for reflection (which is still possible). As this only affects tests and not production code, we may be able to live with this. I will also investigate that. ",
            "id": "comment-15779005"
        },
        {
            "date": "2016-12-26T21:34:22+0000",
            "author": "Uwe Schindler",
            "content": "I opened: https://github.com/cglib/cglib/issues/93 ",
            "id": "comment-15779017"
        },
        {
            "date": "2017-01-07T18:59:15+0000",
            "author": "Julian Hyde",
            "content": "We are running into the same issue in Calcite/Avatica: CALCITE-1567. Do you know if there is a Mockito bug logged for this? Somewhere in https://github.com/cglib/cglib/issues/93 someone suggests that it is fixed in a later version of Mockito. If so I would like to upgrade to that version of Mockito. ",
            "id": "comment-15807982"
        },
        {
            "date": "2017-01-09T11:42:30+0000",
            "author": "Uwe Schindler",
            "content": "Hi Julian Hyde,\n\nI have no further information about this. I'd suggest to ask on the Github issue. We will disable the tests for now (using some assumeFalse(\"does not work\", Constants.JRE_IS_MINIMUM_JAVA9)). For Solr it's a bit more work as it historically uses many mocking frameworks and all of these broke.\n\nIt is also not easy to fix this, as CGLIB is included in shaded form and bundled with the mocking jars, so you cannot just replace cglib dependency at one central place and all would work. You have to wait for updates of all those mocking frameworks.\n\nNot sure how to proceed  ",
            "id": "comment-15811569"
        },
        {
            "date": "2017-01-09T18:25:51+0000",
            "author": "Julian Hyde",
            "content": "Uwe Schindler, Thanks for replying. I agree with your strategy. I've disabled our offending tests using Assume, and we can still claim that Avatica works on JDK9, albeit with less coverage.\n\nI am concerned that the Mockito/Cglib community seem to think that JDK9 support == adding support for new JDK9 features. Whereas we just want the same old functionality to run on a JDK9 runtime. (We can't use JDK9 features until we drop support for JDK1.7 and JDK1.8.) I'll weigh in on https://github.com/cglib/cglib/issues/93 and until then I guess we'll have to be patient. ",
            "id": "comment-15812465"
        },
        {
            "date": "2017-01-14T00:19:19+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nI was able to update Solr-Code's Test Dependencies to latest Mockito/Bytebuddy. This makes most Mocking tests works again.\nBut Easymock did not release a new version (and seems no longer maintained). If somemody has time to rewrite those tests (about 13 Suites with 23 tests, only!!!!) to use Mockito, too - we would be able to run our tests with Java 9:\n\nSome of those tests that failed in my local run may be unrelated, this is just the output:\n\n[junit4] Tests with failures [seed: A99FA98E35E3349A] (first 10 out of 23):\n   [junit4]   - org.apache.solr.cloud.TestSolrCloudWithDelegationTokens.testDelegationTokenCancelFail\n   [junit4]   - org.apache.solr.core.BlobRepositoryMockingTest.testGetBlobIncrRefStringDecoder\n   [junit4]   - org.apache.solr.core.BlobRepositoryMockingTest.testGetBlobIncrRefString\n   [junit4]   - org.apache.solr.core.BlobRepositoryMockingTest.testCachedAlready\n   [junit4]   - org.apache.solr.core.BlobRepositoryMockingTest.testCloudOnly\n   [junit4]   - org.apache.solr.cloud.SyncSliceTest (suite)\n   [junit4]   - org.apache.solr.cloud.OverseerCollectionConfigSetProcessorTest (suite)\n   [junit4]   - org.apache.solr.handler.component.DistributedFacetPivotWhiteBoxTest (suite)\n   [junit4]   - org.apache.solr.servlet.SolrRequestParserTest.testStandardFormdataUploadLimit\n   [junit4]   - org.apache.solr.servlet.SolrRequestParserTest.testStandardParseParamsAndFillStreamsISO88591\n\nThe problem with Easymock is: Old versions (Solr uses 3.0) depend on outdated cglib that has no Java 9 compatible release. Newer versions (3.4) ships with CGLIB bundled and shaded. So even if CGLIB releases a newer version, it won't help, because Easymock uses the shaded and bundled broken version. Easymock seems dead to me. So let's nuke it. Mockito is the way to go.\n\nFor now my only chance is to disable all Easymock based tests, they are incompatible to Java 9. ",
            "id": "comment-15822550"
        },
        {
            "date": "2017-01-14T00:24:59+0000",
            "author": "Uwe Schindler",
            "content": "Here is the patch for the Mockito Update to be Java 9 compatible (Thanks to Rafael Winterhalter for fixing Bytebuddy). ",
            "id": "comment-15822558"
        },
        {
            "date": "2017-01-14T09:22:56+0000",
            "author": "Uwe Schindler",
            "content": "I found this about more or less \"automated rewrite\" of EasyMock tests to Mockito:\n\n\thttps://wiki.magnolia-cms.com/display/DEV/Converting+Easymock-Tests+to+Mockito\n\tA script doing this: https://gist.github.com/stefanbirkner/1095194/904909cc229b6acb55c18f529e396089129e20e9\n\n\n\nIt is not many tests, so this would be a great cleanup.\n\n\tcontrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestJdbcDataSource.java\n\tcore/src/test/org/apache/solr/cloud/ClusterStateTest.java\n\tcore/src/test/org/apache/solr/cloud/OverseerCollectionConfigSetProcessorTest.java\n\tcore/src/test/org/apache/solr/core/BlobRepositoryMockingTest.java\n\tcore/src/test/org/apache/solr/core/CoreSorterTest.java\n\tcore/src/test/org/apache/solr/security/TestPKIAuthenticationPlugin.java\n\tcore/src/test/org/apache/solr/servlet/SolrRequestParserTest.java\n\tsolrj/src/test/org/apache/solr/client/solrj/impl/CloudSolrClientCacheTest.java\n\n\n\nI will work on a patch. ",
            "id": "comment-15822768"
        },
        {
            "date": "2017-01-14T10:22:33+0000",
            "author": "Uwe Schindler",
            "content": "Here is a patch that makes all of Solr working with Java 9:\n\n\tUpdate Mockito to 2.6.2 (that is compatible to Java 9, because it uses ByteBuddy).\n\tDisable all tests that use EasyMock. I will open a separate issue to do the migration away from IMHO \"no longer maintained\" EasyMock. There are scripts to do this more or less automatically.\n\n\n\nI will further update the patch and add missing sha1-sums and license files. ",
            "id": "comment-15822781"
        },
        {
            "date": "2017-01-14T11:39:37+0000",
            "author": "Uwe Schindler",
            "content": "Final patch with all licenses corrected and SHA1 sums.\n\nI will commit this in a moment and update Policeman Jenkins to user Java 9 build 151. ",
            "id": "comment-15822803"
        },
        {
            "date": "2017-01-14T11:43:42+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 4eafdb337ab88553506e15bc186cd06464ea14f9 in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4eafdb3 ]\n\nSOLR-9893: Update Mockito to version 2.6.2 for Java 9 support. Disable all legacy EasyMock tests when running on Java 9 until they were migrated to Mockito ",
            "id": "comment-15822805"
        },
        {
            "date": "2017-01-14T11:44:54+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ddca27a7c6255d250d9e700efb0da0b82cd67b64 in lucene-solr's branch refs/heads/branch_6x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ddca27a ]\n\nSOLR-9893: Update Mockito to version 2.6.2 for Java 9 support. Disable all legacy EasyMock tests when running on Java 9 until they were migrated to Mockito ",
            "id": "comment-15822806"
        },
        {
            "date": "2017-01-14T12:13:58+0000",
            "author": "Uwe Schindler",
            "content": "I opened SOLR-9966 for migrating EasyMock tests to Mockito. ",
            "id": "comment-15822811"
        },
        {
            "date": "2017-01-15T09:07:42+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 27ec40d3f5117d22a14e179506bec8e545906077 in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=27ec40d ]\n\nSOLR-9893: For full Java 9 compatibility also update to latest Objenesis 2.5 (this allows mocking frameworks to instantiate objects without a ctor) ",
            "id": "comment-15823083"
        },
        {
            "date": "2017-01-15T09:09:09+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 6c0ec822a6d83a186c23b0a87c9fc2b0b62c6178 in lucene-solr's branch refs/heads/branch_6x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6c0ec82 ]\n\nSOLR-9893: For full Java 9 compatibility also update to latest Objenesis 2.5 (this allows mocking frameworks to instantiate objects without a ctor) ",
            "id": "comment-15823084"
        },
        {
            "date": "2017-01-15T09:10:10+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 47b25354d721a47211294690aee3096f78ccd6a4 in lucene-solr's branch refs/heads/branch_6_4 from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=47b2535 ]\n\nSOLR-9893: For full Java 9 compatibility also update to latest Objenesis 2.5 (this allows mocking frameworks to instantiate objects without a ctor) ",
            "id": "comment-15823085"
        },
        {
            "date": "2017-01-16T16:50:30+0000",
            "author": "David Smiley",
            "content": "Awesome; thanks Uwe! ",
            "id": "comment-15824282"
        }
    ]
}