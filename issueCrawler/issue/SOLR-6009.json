{
    "id": "SOLR-6009",
    "title": "edismax mis-parsing RegexpQuery",
    "details": {
        "affect_versions": "4.7.2",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "edismax appears to be leaking its IMPOSSIBLE_FIELD_NAME into queries involving a RegexpQuery.  Steps to reproduce on 4.7.2:\n\n1) remove the explicit <field /> definition for 'text'\n2) add a catch-all '*' dynamic field of type text_general\n\n\n<dynamicField name=\"*\" type=\"text_general\" multiValued=\"true\" indexed=\"true\" stored=\"true\" />\n\n\n\n3) index the exampledocs/ data\n4) run a query like the following:\n\n\nhttp://localhost:8983/solr/collection1/select?q={!edismax%20qf=%27text%27}%20/.*elec.*/&debugQuery=true\n\n\n\nThe debugQuery output will look like this:\n\n\n<lst name=\"debug\">\n<str name=\"rawquerystring\">{!edismax qf='text'} /.*elec.*/</str>\n<str name=\"querystring\">{!edismax qf='text'} /.*elec.*/</str>\n<str name=\"parsedquery\">(+RegexpQuery(\ufffc\ufffc\ufffc:/.*elec.*/))/no_coord</str>\n<str name=\"parsedquery_toString\">+\ufffc\ufffc\ufffc:/.*elec.*/</str>\n\n\n\nIf you copy/paste the parsed-query into a text editor or something, you can see that the field-name isn't actually blank.  The IMPOSSIBLE_FIELD_NAME ends up in there.\n\nI haven't been able to reproduce this behavior on 4.7.2 without getting rid of the explicit field definition for 'text' and using a dynamicField, which is how things are setup on the machine where this issue was discovered.  The query isn't quite right with the explicit field definition in place either, though:\n\n\n<lst name=\"debug\">\n<str name=\"rawquerystring\">{!edismax qf='text'} /.*elec.*/</str>\n<str name=\"querystring\">{!edismax qf='text'} /.*elec.*/</str>\n<str name=\"parsedquery\">(+DisjunctionMaxQuery((text:elec)))/no_coord</str>\n<str name=\"parsedquery_toString\">+(text:elec)</str>\n\n\n\nnumFound=0 for both of these.  This site is useful for looking at the characters in the first variant:\n\nhttp://rishida.net/tools/conversion/",
    "attachments": {
        "SOLR-6009.patch": "https://issues.apache.org/jira/secure/attachment/12670319/SOLR-6009.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13983586",
            "date": "2014-04-28T21:31:42+0000",
            "content": "I did a quick skim of ExtendedDismaxQParser and from what i can tell nothing was ever done to support regex syntax.\n\nIt also scares the hee-bee-jee-bees out of me that the (erroneous) behavior of edismax is different depending on whether the field exists in the schema, or is matched because of a \"*\" dynamicField ... particularly since I can't reproduce the same IMPOSSIBLE_FIELD_NAME leakage when using an existing text_general dynamicField like qf=foo_txt.\n\nsmells like 2 interconnected bugs: one is just that needs regex support added to the parser, the other is that while regex support is missing, something is getting tickled that causes really bad behavior when the fields in use exist because of \"*\" dynamicField "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14142679",
            "date": "2014-09-21T20:31:58+0000",
            "content": "Actually there are 2linked issues:\n1. edismax was not supported Regex queries\n2. since regex queries was not supported RegexpQuery was created by org.apache.solr.parser.SolrQueryParserBase#getRegexpQuery without taking into account aliasing and org.apache.solr.search.ExtendedDismaxQParser#IMPOSSIBLE_FIELD_NAME\n\nAttached patch provide support for RegexQueries and fix issue with leaking impossible field name. Also added tests covering case with defined field and undefined field (but matching by '*' dynamic field) and DebugQuery output. "
        }
    ]
}