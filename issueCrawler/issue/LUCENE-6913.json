{
    "id": "LUCENE-6913",
    "title": "Standard/Classic/UAX tokenizers could be more ram efficient",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "These tokenizers map codepoints to character classes with the following datastructure (loaded in clinit):\n\n\n  private static char [] zzUnpackCMap(String packed) {\n    char [] map = new char[0x110000];\n\n\n\nThis requires 2MB RAM for each tokenizer class (in trunk 6MB if all 3 classes are loaded, in branch_5x 10MB since there are 2 additional backwards compat classes).\n\nOn the other hand, none of our tokenizers actually use a huge number of character classes, so char is overkill: e.g. this map can safely be a byte [] and we can save half the memory. Perhaps it could make these tokenizers faster too.",
    "attachments": {
        "LUCENE-6913.not.a.patch": "https://issues.apache.org/jira/secure/attachment/12774768/LUCENE-6913.not.a.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15031280",
            "author": "Robert Muir",
            "date": "2015-11-30T03:10:56+0000",
            "content": "Just showing what i mean... not actually the way we want to do this. I think ideally we want to fix jflex to use byte[] when there are <= 256 character classes? "
        },
        {
            "id": "comment-15046185",
            "author": "Steve Rowe",
            "date": "2015-12-08T02:11:56+0000",
            "content": "I think ideally we want to fix jflex to use byte[] when there are <= 256 character classes?\n\n+1 "
        },
        {
            "id": "comment-15430895",
            "author": "Robert Muir",
            "date": "2016-08-22T14:43:53+0000",
            "content": "I started looking into this but I think our find-replace hacks in our ant jflex task are incompatible with the code generated from jflex's master branch. I tried messing around with them but couldn't make tests pass, so I'm stuck on that first.\n\nThere is already an issue at jflex (https://github.com/jflex-de/jflex/issues/196), I added a comment with the idea I am looking at. "
        }
    ]
}