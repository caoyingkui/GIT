{
    "id": "LUCENE-4362",
    "title": "ban tab-indented source",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This makes code really difficult to read and work with.\nIts easy enough to prevent.\n\n\nIndex: build.xml\n===================================================================\n--- build.xml\t(revision 1380979)\n+++ build.xml\t(working copy)\n@@ -77,11 +77,12 @@\n         <or>\n           <containsregexp expression=\"@author\\b\" casesensitive=\"yes\"/>\n           <containsregexp expression=\"\\bno(n|)commit\\b\" casesensitive=\"no\"/>\n+          <containsregexp expression=\"\\t\" casesensitive=\"no\"/>\n         </or>\n       </fileset>\n       <map from=\"${validate.currDir}${file.separator}\" to=\"* \"/>\n     </pathconvert>\n-    <fail if=\"validate.patternsFound\">The following files contain @author tags or nocommits:${line.separator}${validate.patternsFound}</fail>\n+    <fail if=\"validate.patternsFound\">The following files contain @author tags, tabs or nocommits:${line.separator}${validate.patternsFound}</fail>\n   </target>",
    "attachments": {
        "LUCENE-4362.patch": "https://issues.apache.org/jira/secure/attachment/12543865/LUCENE-4362.patch",
        "LUCENE-4362_4x.patch": "https://issues.apache.org/jira/secure/attachment/12544366/LUCENE-4362_4x.patch",
        "LUCENE-4362_trunk.patch": "https://issues.apache.org/jira/secure/attachment/12545317/LUCENE-4362_trunk.patch",
        "LUCENE-4362_core.patch": "https://issues.apache.org/jira/secure/attachment/12543808/LUCENE-4362_core.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-05T04:47:31+0000",
            "content": "\nBUILD FAILED\n/home/rmuir/workspace/lucene-trunk/build.xml:85: The following files contain @author tags, tabs or nocommits:\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianAnalyzer.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/br/BrazilianStemmer.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/DictionaryCompoundWordTokenFilterFactory.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/compound/HyphenationCompoundWordTokenFilterFactory.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/cz/CzechAnalyzer.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/CapitalizationFilterFactory.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilter.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/miscellaneous/HyphenatedWordsFilterFactory.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/path/PathHierarchyTokenizerFactory.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/query/QueryAutoStopWordAnalyzer.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/shingle/ShingleFilter.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/UAX29URLEmailTokenizerImpl.java\n* lucene/analysis/common/src/java/org/apache/lucene/analysis/wikipedia/WikipediaTokenizerImpl.java\n* lucene/analysis/common/src/java/org/tartarus/snowball/Among.java\n* lucene/analysis/common/src/java/org/tartarus/snowball/SnowballProgram.java\n* lucene/analysis/common/src/test/org/apache/lucene/analysis/br/TestBrazilianStemmer.java\n* lucene/analysis/common/src/test/org/apache/lucene/analysis/core/WordBreakTestUnicode_6_1_0.java\n* lucene/analysis/common/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest.java\n* lucene/analysis/common/src/test/org/apache/lucene/analysis/fr/TestFrenchAnalyzer.java\n* lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestHyphenatedWordsFilter.java\n* lucene/analysis/common/src/test/org/apache/lucene/analysis/nl/TestDutchStemmer.java\n* lucene/analysis/common/src/test/org/apache/lucene/analysis/pattern/TestPatternTokenizer.java\n* lucene/analysis/common/src/test/org/apache/lucene/analysis/th/TestThaiAnalyzer.java\n* lucene/analysis/common/src/test/org/apache/lucene/analysis/util/TestWordlistLoader.java\n* lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseTokenizer.java\n* lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/BinaryDictionary.java\n* lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/Dictionary.java\n* lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UnknownDictionary.java\n* lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/dict/UserDictionary.java\n* lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/util/CSVUtil.java\n* lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseTokenizer.java\n* lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/dict/UserDictionaryTest.java\n* lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/TokenInfoDictionaryBuilder.java\n* lucene/analysis/kuromoji/src/tools/java/org/apache/lucene/analysis/ja/util/UnknownDictionaryBuilder.java\n* lucene/analysis/phonetic/src/test/org/apache/lucene/analysis/phonetic/TestPhoneticFilterFactory.java\n* lucene/analysis/smartcn/src/java/org/apache/lucene/analysis/cn/smart/hhmm/AbstractDictionary.java\n* lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/utils/StreamUtils.java\n* lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/tasks/WriteLineDocTaskTest.java\n* lucene/benchmark/src/test/org/apache/lucene/benchmark/byTask/utils/StreamUtilsTest.java\n* lucene/core/src/java/org/apache/lucene/codecs/FixedGapTermsIndexReader.java\n* lucene/core/src/java/org/apache/lucene/codecs/lucene40/BitVector.java\n* lucene/core/src/java/org/apache/lucene/index/CheckIndex.java\n* lucene/core/src/java/org/apache/lucene/index/DocumentsWriterFlushControl.java\n* lucene/core/src/java/org/apache/lucene/index/IndexFileDeleter.java\n* lucene/core/src/java/org/apache/lucene/index/IndexWriter.java\n* lucene/core/src/java/org/apache/lucene/index/SegmentInfo.java\n* lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java\n* lucene/core/src/java/org/apache/lucene/search/FieldCache.java\n* lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java\n* lucene/core/src/java/org/apache/lucene/search/FilteredDocIdSetIterator.java\n* lucene/core/src/java/org/apache/lucene/search/MultiPhraseQuery.java\n* lucene/core/src/java/org/apache/lucene/search/PhrasePositions.java\n* lucene/core/src/java/org/apache/lucene/search/PhraseQuery.java\n* lucene/core/src/java/org/apache/lucene/search/payloads/MinPayloadFunction.java\n* lucene/core/src/java/org/apache/lucene/search/payloads/PayloadFunction.java\n* lucene/core/src/java/org/apache/lucene/search/payloads/PayloadNearQuery.java\n* lucene/core/src/java/org/apache/lucene/search/spans/NearSpansOrdered.java\n* lucene/core/src/java/org/apache/lucene/search/spans/NearSpansUnordered.java\n* lucene/core/src/java/org/apache/lucene/search/spans/SpanNearQuery.java\n* lucene/core/src/java/org/apache/lucene/search/spans/SpanPositionCheckQuery.java\n* lucene/core/src/java/org/apache/lucene/search/spans/Spans.java\n* lucene/core/src/java/org/apache/lucene/store/BufferedIndexInput.java\n* lucene/core/src/java/org/apache/lucene/store/Lock.java\n* lucene/core/src/java/org/apache/lucene/util/Constants.java\n* lucene/core/src/java/org/apache/lucene/util/PriorityQueue.java\n* lucene/core/src/test/org/apache/lucene/index/TestLongPostings.java\n* lucene/core/src/test/org/apache/lucene/index/TestParallelReaderEmptyIndex.java\n* lucene/core/src/test/org/apache/lucene/index/TestSameTokenSamePosition.java\n* lucene/core/src/test/org/apache/lucene/index/TestTransactionRollback.java\n* lucene/core/src/test/org/apache/lucene/index/TestTransactions.java\n* lucene/core/src/test/org/apache/lucene/search/TestCachingCollector.java\n* lucene/core/src/test/org/apache/lucene/search/TestDocIdSet.java\n* lucene/core/src/test/org/apache/lucene/search/TestFuzzyQuery.java\n* lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadNearQuery.java\n* lucene/core/src/test/org/apache/lucene/search/spans/TestBasics.java\n* lucene/core/src/test/org/apache/lucene/store/TestWindowsMMap.java\n* lucene/core/src/test/org/apache/lucene/util/TestBitUtil.java\n* lucene/core/src/test/org/apache/lucene/util/TestFixedBitSet.java\n* lucene/core/src/test/org/apache/lucene/util/TestOpenBitSet.java\n* lucene/facet/src/java/org/apache/lucene/facet/taxonomy/directory/DirectoryTaxonomyReader.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/DefaultEncoder.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/Encoder.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/Formatter.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/GradientFormatter.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/Highlighter.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/InvalidTokenOffsetsException.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/QueryTermExtractor.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLEncoder.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLFormatter.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/SpanGradientFormatter.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/TextFragment.java\n* lucene/highlighter/src/java/org/apache/lucene/search/highlight/WeightedTerm.java\n* lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/DualFloatFunction.java\n* lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/MultiBoolFunction.java\n* lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ScaleFloatFunction.java\n* lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleBoolFunction.java\n* lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/SimpleFloatFunction.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/FastCharStream.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/core/nodes/FieldQueryNode.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/FastCharStream.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/FastCharStream.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/BasicQueryFactory.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/RewriteQuery.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/query/SimpleTermRewriteQuery.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CoreParser.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/CorePlusExtensionsParser.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/DOMUtils.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/FilterBuilder.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/ParserException.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryBuilder.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/QueryTemplateManager.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/CachedFilterBuilder.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/NumericRangeFilterBuilder.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/SpanQueryBuilder.java\n* lucene/queryparser/src/java/org/apache/lucene/queryparser/xml/builders/UserInputQueryBuilder.java\n* lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/TestQueryTemplateManager.java\n* lucene/sandbox/src/java/org/apache/lucene/sandbox/queries/FuzzyLikeThisQuery.java\n* lucene/sandbox/src/test/org/apache/lucene/sandbox/queries/TestSlowFuzzyQuery.java\n* lucene/suggest/src/java/org/apache/lucene/search/spell/DirectSpellChecker.java\n* lucene/suggest/src/java/org/apache/lucene/search/spell/SpellChecker.java\n* lucene/suggest/src/java/org/apache/lucene/search/suggest/tst/TernaryTreeNode.java\n* lucene/test-framework/src/java/org/apache/lucene/analysis/MockTokenizer.java\n* lucene/test-framework/src/java/org/apache/lucene/util/LuceneTestCase.java\n* lucene/test-framework/src/java/org/apache/lucene/util/RunListenerPrintReproduceInfo.java\n* solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHLogLevels.java\n* solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DIHWriter.java\n* solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImportHandler.java\n* solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DataImporter.java\n* solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DebugLogger.java\n* solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/DocBuilder.java\n* solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/EntityProcessorBase.java\n* solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SimplePropertiesWriter.java\n* solr/contrib/dataimporthandler/src/java/org/apache/solr/handler/dataimport/SolrWriter.java\n* solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/AbstractDIHCacheTestCase.java\n* solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSortedMapBackedCache.java\n* solr/contrib/uima/src/test/org/apache/solr/uima/ts/EntityAnnotation_Type.java\n* solr/contrib/uima/src/test/org/apache/solr/uima/ts/SentimentAnnotation_Type.java\n* solr/contrib/velocity/src/java/org/apache/solr/response/PageTool.java\n* solr/core/src/java/org/apache/solr/cloud/CloudDescriptor.java\n* solr/core/src/java/org/apache/solr/core/Config.java\n* solr/core/src/java/org/apache/solr/core/CoreContainer.java\n* solr/core/src/java/org/apache/solr/handler/component/ResponseBuilder.java\n* solr/core/src/java/org/apache/solr/handler/component/SpellCheckComponent.java\n* solr/core/src/java/org/apache/solr/handler/loader/CSVLoaderBase.java\n* solr/core/src/java/org/apache/solr/response/PHPSerializedResponseWriter.java\n* solr/core/src/java/org/apache/solr/response/RawResponseWriter.java\n* solr/core/src/java/org/apache/solr/response/SolrQueryResponse.java\n* solr/core/src/java/org/apache/solr/schema/SchemaField.java\n* solr/core/src/java/org/apache/solr/search/QParser.java\n* solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java\n* solr/core/src/java/org/apache/solr/spelling/AbstractLuceneSpellChecker.java\n* solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker.java\n* solr/core/src/java/org/apache/solr/spelling/DirectSolrSpellChecker.java\n* solr/core/src/java/org/apache/solr/util/LongPriorityQueue.java\n* solr/core/src/test/org/apache/solr/TestDistributedGrouping.java\n* solr/core/src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java\n* solr/core/src/test/org/apache/solr/handler/XsltUpdateRequestHandlerTest.java\n* solr/core/src/test/org/apache/solr/handler/component/DistributedSpellCheckComponentTest.java\n* solr/core/src/test/org/apache/solr/handler/component/SpellCheckComponentTest.java\n* solr/core/src/test/org/apache/solr/handler/component/StatsComponentTest.java\n* solr/core/src/test/org/apache/solr/highlight/DummyHighlighter.java\n* solr/core/src/test/org/apache/solr/highlight/HighlighterConfigTest.java\n* solr/core/src/test/org/apache/solr/search/SpatialFilterTest.java\n* solr/core/src/test/org/apache/solr/search/function/NvlValueSourceParser.java\n* solr/core/src/test/org/apache/solr/spelling/DirectSolrSpellCheckerTest.java\n* solr/core/src/test/org/apache/solr/spelling/SpellCheckCollatorTest.java\n* solr/core/src/test/org/apache/solr/spelling/SpellPossibilityIteratorTest.java\n* solr/core/src/test/org/apache/solr/update/UpdateParamsTest.java\n* solr/solrj/src/java/org/apache/solr/client/solrj/beans/DocumentObjectBinder.java\n* solr/solrj/src/java/org/apache/solr/client/solrj/request/LukeRequest.java\n* solr/solrj/src/java/org/apache/solr/client/solrj/response/SpellCheckResponse.java\n* solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java\n* solr/solrj/src/java/org/apache/solr/common/util/NamedList.java\n* solr/solrj/src/test/org/apache/solr/client/solrj/response/TestSpellCheckResponse.java\n\nTotal time: 2 seconds\n\n ",
            "author": "Robert Muir",
            "id": "comment-13448474"
        },
        {
            "date": "2012-09-05T04:47:58+0000",
            "content": "Here's a start. I did lucene/core src only. ",
            "author": "Robert Muir",
            "id": "comment-13448475"
        },
        {
            "date": "2012-09-05T04:50:21+0000",
            "content": "Well damn. ",
            "author": "Chris Male",
            "id": "comment-13448478"
        },
        {
            "date": "2012-09-05T10:35:05+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13448619"
        },
        {
            "date": "2012-09-05T10:38:06+0000",
            "content": "Yeah, and with the ANT check, so it is enforced!\nIf somebody wants to use a tab, e.g. in a string, he can always do \\t ",
            "author": "Uwe Schindler",
            "id": "comment-13448621"
        },
        {
            "date": "2012-09-05T15:55:56+0000",
            "content": "updated patch to trunk, and fixed a few more files with just stray tabs. ",
            "author": "Robert Muir",
            "id": "comment-13448836"
        },
        {
            "date": "2012-09-06T13:57:02+0000",
            "content": "Rolls up both the other patches and removes the rest of the tabs from the java files ",
            "author": "Erick Erickson",
            "id": "comment-13449686"
        },
        {
            "date": "2012-09-06T13:57:09+0000",
            "content": "I took Robert's patch, applied it and spent some time on a flight playing with tabs. I went through the diffs on a fast scan and indented some egregious indentation that jumped out.\n\nHonest, I tried to restrain myself when reformatting code rather than just indenting some stray lines, but in a few cases I just couldn't stand it and reformatted a couple of files (almost all the lines had tabs anyway) and a few complete methods that also had almost all tabbed lines so there shouldn't be very many gratuitous changes...\n\nHowever, a curious thing happens when I try \"ant test\". There's some kind of never-ending process that I'm seeing occasionally on my machine. I won't have a chance to really look at it for a bit, I'll report more detail when I do. I'll need to roll back my changes and see if it occurs without them, the usual.... ",
            "author": "Erick Erickson",
            "id": "comment-13449687"
        },
        {
            "date": "2012-09-06T14:02:55+0000",
            "content": "as mentioned on the list, i dont think we should change the generated files (e.g. standardtokenizerimpl etc).\n\nWe should fix those separately as part of the generation process / get jflex fixed for the one line it generates that causes this, etc  ",
            "author": "Robert Muir",
            "id": "comment-13449694"
        },
        {
            "date": "2012-09-06T16:04:05+0000",
            "content": "OK, my test failures apparently related to this patch, I'm getting the same thing after rolling it all back. I'll post on the dev list. ",
            "author": "Erick Erickson",
            "id": "comment-13449766"
        },
        {
            "date": "2012-09-08T18:41:47+0000",
            "content": "\nRobert:\nYou're right in that a number of tabs are introduced into the generated files, I'll leave those for another day.\n\nSo, I didn't change any of the .java files that had a corresponding .jj or .jflex file, but I did try to run the \"ant jflex\" target in lucene/analysis/common after taking out all the tabs in the .jj or .jflex files. I figure that that's worth doing separate from fixing the injected tabs. Unfortunately I keep getting\n\njflex-UAX29URLEmailTokenizer:\n    [jflex] \n    [jflex] Error: JFlex has run out of memory. Please try increasing the maximum JVM heap size\n    [jflex] \n\n. What's the magic to increase the JVM heap? Or should I just not bother?\n\nI tried setting ANT_OPTS JAVA_OPTS, changing the jflex script in <jflex_home>/jflex/bin to $JAVA -Xmx2G JFlex.Main $@, and I keep getting the same error. Which means there's an incredibly simple way to do this that I don't know about......\n\nAny hints? ",
            "author": "Erick Erickson",
            "id": "comment-13451387"
        },
        {
            "date": "2012-09-08T22:28:12+0000",
            "content": "Current versions, but I can't build the jflex files, and I'm still having the test problem with the unresponsive process.\n\nSo, anyone who already has jflex set up want to try applying this, running jflex and maybe the tests?\n\nThe state of these patches:\n> all the tabs removed from java files that don't have corresponding .jj or .jflex files.\n> All the tabs removed from the .jflex and jj files. I'm a little nervous about this...\n> Partial run of jflex until I ran out of memory, which I can't seem to get around. So a couple the corresponding generated files have been changed (several StandardTokenizerImpl's and a ClassicTokenizerImpl).\n> I'm sure as Robert points out that there'll be a couple of tabs re-introduced by running the parser compilers, but at least the source going in doesn't have any. \n> My daughter and her husband want to go hiking. I've got better things to do for a while than fight jflex this afternoon <G>...\n\nOr should I just forget about the jflex nonsense for the time being?\n ",
            "author": "Erick Erickson",
            "id": "comment-13451424"
        },
        {
            "date": "2012-09-11T20:17:04+0000",
            "content": "OK, after waiting 50 minutes for the tests to complete, all tests pass with these two patches (trunk and 4x).\n\nSo if I check all this in, it'll change the generated java files since they were newly generated from the changes to the jflex/jj files. Is this the usual procedure?\n\nThis doesn't address the tabs introduced by the parser compilers.\n\nIf no one objects, I'll check this in probably tonight or tomorrow.\n\nBut I'd still like to keep this open even so. Between last week and now more tabs have been introduced into source.\n\nAny suggestions about what to do about tabs introduced into generated files? ",
            "author": "Erick Erickson",
            "id": "comment-13453361"
        },
        {
            "date": "2012-09-11T20:22:58+0000",
            "content": "\nAny suggestions about what to do about tabs introduced into generated files?\n\nWell as a workaround, we can add a replace-regexp to the ant that generates them.\n\nBut e.g. in the jflex case it seemed like the tab was not intentional (just a comment) so we\ncan probably just ask them if they can fix it for the long term. ",
            "author": "Robert Muir",
            "id": "comment-13453369"
        },
        {
            "date": "2012-09-11T20:25:56+0000",
            "content": "But e.g. in the jflex case it seemed like the tab was not intentional (just a comment) so we can probably just ask them if they can fix it for the long term.\n\nI'm one of them - I'll take a look. ",
            "author": "Steve Rowe",
            "id": "comment-13453371"
        },
        {
            "date": "2012-09-11T20:27:26+0000",
            "content": "Steve, thanks for taking a look. you can see it in Erick's first patch:\n\nIndex: lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java\n===================================================================\n--- lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java\t(revision 1381159)\n+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/StandardTokenizerImpl.java\t(working copy)\n@@ -936,7 +936,7 @@\n       }     \n     }\n \n-\t// numRead < 0\n+  // numRead < 0\n     return true;\n   }\n\n\n\nSo all the generated files seem to have that one lone tab. ",
            "author": "Robert Muir",
            "id": "comment-13453374"
        },
        {
            "date": "2012-09-11T20:44:24+0000",
            "content": "There's also a section of comments that's tabbed in the generated file, it may very well be the same issue of introducing tabs in the comments...\n\n...../trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java\n\n\n// QueryNode Query(CharSequence field) :\n// {\n// List clauses = new ArrayList();\n//   List modifiers = new ArrayList();\n//   QueryNode q, firstQuery=null;\n//   ModifierQueryNode.Modifier mods;\n//   int conj;\n// }\n// {\n//   mods=Modifiers() q=Clause(field)\n//   {\n//     if (mods == ModifierQueryNode.Modifier.MOD_NONE) firstQuery=q;\n//     \n//     // do not create modifier nodes with MOD_NONE\n//    \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n//    \t\tq = new ModifierQueryNode(q, mods);\n//    \t}\n//    \tclauses.add(q);\n//   }\n//   (\n//     conj=Conjunction() mods=Modifiers() q=Clause(field)\n//     { \n// \t    // do not create modifier nodes with MOD_NONE\n// \t   \tif (mods != ModifierQueryNode.Modifier.MOD_NONE) {\n// \t   \t\tq = new ModifierQueryNode(q, mods);\n// \t   \t}\n// \t   \tclauses.add(q);\n// \t   \t//TODO: figure out what to do with AND and ORs\n//   }\n//   )*\n//     {\n//      if (clauses.size() == 1 && firstQuery != null)\n//         return firstQuery;\n//       else {\n//   \t\treturn new BooleanQueryNode(clauses);\n//       }\n//     }\n// }\n\n ",
            "author": "Erick Erickson",
            "id": "comment-13453393"
        },
        {
            "date": "2012-09-11T20:47:43+0000",
            "content": "\nThere's also a section of comments that's tabbed in the generated file, it may very well be the same issue of introducing tabs in the comments...\n\n...../trunk/lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java\n\nqueryparser uses JavaCC, not JFlex, right? ",
            "author": "Steve Rowe",
            "id": "comment-13453396"
        },
        {
            "date": "2012-09-16T13:13:54+0000",
            "content": "Right. Finally got back to this, traveling really hurts. Anyway...\n\nI'm about ready to check this all in, running tests now.\n\nregenerated all the .jj and .jflex files, those get checked in too, right? Speak now or....\n\nAll that's left as far as .java files is concerned is the pesky \n\t// numRead < 0\nin things like HtmlStripCharFilterFactory.java that jflex generates.\n\nAnd can we please put in the check real soon now? Two more files have been checked in over the last week with tabs....\n\nNote, I've only looked at java files and their precursors. I've ignored all .xml, .vm, .js, .<anything except java>\n\nLatest patches attached. ",
            "author": "Erick Erickson",
            "id": "comment-13456570"
        },
        {
            "date": "2012-09-16T14:11:09+0000",
            "content": "But Steven fixed JFlex? Maybe you must update your JFlex checkout and rebuild with maven?\n\nOtherwise +1 to commit (the generated files are checked in, yes, and need to be regenerated). But when regenerating, check that the output looks almost the same, just to be sure that you are not using the wrong version. JavaCC is hard linked to a IVY-Download with specific version, but JFlex is trunk, so take care of unwanted changes, e.g. introduced by too old versions! ",
            "author": "Uwe Schindler",
            "id": "comment-13456577"
        },
        {
            "date": "2012-09-16T16:32:09+0000",
            "content": "I don't think so. Thanks to your help, I did nuke my jflex, re-checkout, mvn install and re-run jflex.\n\nMy generated files have this notation:\n\n/**\n\n\tThis class is a scanner generated by\n\t<a href=\"http://www.jflex.de/\">JFlex</a> 1.5.0-SNAPSHOT\n\ton 9/16/12 12:10 PM from the specification file\n\t<tt>/Users/Erick/apache/4x_4326/lucene/analysis/common/src/java/org/apache/lucene/analysis/charfilter/HTMLStripCharFilter.jflex</tt>\n\n\n\n\nso I think I have the right jflex, but the tabs still appear in things like HTMLStripCharFilterFactory. And the files aren't comparable by eyeball, at least by me. The order of that huge, ugly case statement is different in the two files, but when I spot-checked a couple of the cases they appear identical.\n\nSo I'll try running the silly tests again and disable my troublesome one. If they pass I'm checking this in unless there are howls of protest.\n\nI'm attaching another pair of files just to insure that what I check in is exactly what I have on my machine. ",
            "author": "Erick Erickson",
            "id": "comment-13456601"
        },
        {
            "date": "2012-09-16T18:04:31+0000",
            "content": "But Steven fixed JFlex?\n\nWell, I fixed the non-fixed-case-order problem, but not the tabs-in-generated-source problem.\n\nSo while the case order you see in sources generated with current trunk JFlex will be different from previously checked in Jflex-generated code, it should be stable from now on.\n\nI'll work on tabs in generated code today, Erick, so could you hold off a little before checking in? ",
            "author": "Steve Rowe",
            "id": "comment-13456617"
        },
        {
            "date": "2012-09-16T21:11:42+0000",
            "content": "Steve:\n\nSure, just let me know when things are ready. ",
            "author": "Erick Erickson",
            "id": "comment-13456669"
        },
        {
            "date": "2012-09-17T12:49:16+0000",
            "content": "I got rid of the tab in front of the \"// numRead < 0\" comment - update JFlex to rev 615 and mvn install.\n\nErick, I applied your patch on trunk, regenerated all jflex-based sources, and then ran ant validate patched to complain about tabs, and the build was successful. ",
            "author": "Steve Rowe",
            "id": "comment-13456975"
        },
        {
            "date": "2012-09-17T14:42:31+0000",
            "content": "Is this issue for 5.0 only or for 4.0 as well? No \"Fix Version\" is listed, but I do see a \"4x\" patch. ",
            "author": "Jack Krupansky",
            "id": "comment-13457059"
        },
        {
            "date": "2012-09-17T15:44:57+0000",
            "content": "Final patch, will commit momentarily\n\nThanks Steve! All tabs generated by jflex are now gone. ",
            "author": "Erick Erickson",
            "id": "comment-13457096"
        },
        {
            "date": "2012-09-17T15:47:58+0000",
            "content": "Thanks for taking ahold of this Erick! ",
            "author": "Robert Muir",
            "id": "comment-13457099"
        },
        {
            "date": "2012-09-17T16:04:17+0000",
            "content": "committed:\n\n4x:    1386675\ntrunk: 1386681\n\nCan we add the check real soon now? Tabs seem to creep in quite regularly.\n\nIt's probably a good idea to update, there are lots and lots and lots of files this touches. ",
            "author": "Erick Erickson",
            "id": "comment-13457111"
        },
        {
            "date": "2012-09-17T16:16:23+0000",
            "content": "Erick: I committed the checks to build.xml: passes on both branches.\n\nBye bye tabs! ",
            "author": "Robert Muir",
            "id": "comment-13457118"
        },
        {
            "date": "2012-09-17T16:25:34+0000",
            "content": "And good riddance to them! Now on to my next vista.... formatting all the code. All it takes is cmd-alt-l form the root in Intellij... NOT.... ",
            "author": "Erick Erickson",
            "id": "comment-13457126"
        },
        {
            "date": "2012-09-24T21:32:18+0000",
            "content": "There was a dyslexic patch that was far too easy to confuse with the real patch (4326 rather than 4362 for trunk) so I removed it. It was never applied anyway. ",
            "author": "Erick Erickson",
            "id": "comment-13462165"
        },
        {
            "date": "2013-03-22T16:37:42+0000",
            "content": "[branch_4x commit] Robert Muir\nhttp://svn.apache.org/viewvc?view=revision&revision=1386689\n\nLUCENE-4362: add the check to build.xml ",
            "author": "Commit Tag Bot",
            "id": "comment-13610820"
        },
        {
            "date": "2013-03-22T16:37:50+0000",
            "content": "[branch_4x commit] Erick Erickson\nhttp://svn.apache.org/viewvc?view=revision&revision=1386675\n\nFix for LUCENE-4362, ban tabs-indent ",
            "author": "Commit Tag Bot",
            "id": "comment-13610821"
        },
        {
            "date": "2013-05-10T10:33:07+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653832"
        }
    ]
}