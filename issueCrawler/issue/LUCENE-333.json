{
    "id": "LUCENE-333",
    "title": "[PATCH] BooleanScorer can score documents in non increasing order",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Later",
        "status": "Closed"
    },
    "description": "This has been the subject of occasional discussions on lucene-dev \nsince quite some time. Doug once called this \"arguably a bug\" \nso I'm giving a minor severity. \n\nIt should be noted that this behaviour of BooleanScorer does not \ncause bugs in the current versions of Lucene. \n\nThe main reason I'm entering it now is that it blocks the introduction \nof filters based on other more compact data structures than \njava.util.BitSet (see bug 32965). \n\nAn alternative scorer for BooleanQuery is available that always \nscores documents in increasing document order (see bug 31785). \nIt might also be possible to improve the current BooleanScorer \nto always score documents in increasing order. \n\nA somewhat related problem is that the current BooleanScorer does \nnot implement skipTo(). \n\nRegards, \nPaul Elschot",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--BooleanScorer.java": "https://issues.apache.org/jira/secure/attachment/12312500/ASF.LICENSE.NOT.GRANTED--BooleanScorer.java",
        "ASF.LICENSE.NOT.GRANTED--TestBoolean2Patch4.txt": "https://issues.apache.org/jira/secure/attachment/12312502/ASF.LICENSE.NOT.GRANTED--TestBoolean2Patch4.txt",
        "ASF.LICENSE.NOT.GRANTED--BooleanQueryPatch4.txt": "https://issues.apache.org/jira/secure/attachment/12312501/ASF.LICENSE.NOT.GRANTED--BooleanQueryPatch4.txt",
        "ASF.LICENSE.NOT.GRANTED--BooleanScorer1.java": "https://issues.apache.org/jira/secure/attachment/12312504/ASF.LICENSE.NOT.GRANTED--BooleanScorer1.java",
        "ASF.LICENSE.NOT.GRANTED--BooleanScorerPatch1.txt": "https://issues.apache.org/jira/secure/attachment/12312499/ASF.LICENSE.NOT.GRANTED--BooleanScorerPatch1.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-01-17T06:26:01+0000",
            "content": "Created an attachment (id=14026)\nPatch adding skipTo() and possibly next() to BooleanScorer.java\n\nI have not tested this yet, this might take a while.\nIn case I understood the current working of the buckets\nthis might actually work.\n\nIn case someone else wants to try and test this sooner,\nplease go ahead.\n\nIt is useful in when the BooleanScorer is a subscorer itself.\nAs a subscorer, it should problably use a smaller bucket size than\nthe current 1024, eg. 8 or 16 or 32 might do well.\n\nOnce skipTo() works on BooleanScorer, BooleanQuery should\nuse BooleanScorer as subscorer of ConjunctionScorer.\nAlso the FilteredScorer that uses skipTo could be used.\n\nRegards,\nPaul Elschot. ",
            "author": "Paul Elschot",
            "id": "comment-12322142"
        },
        {
            "date": "2005-01-20T05:12:29+0000",
            "content": "For this to work correctly the list of valid buckets should \nalways be sorted, ie. it is necessary to uncomment the sorting \ncall in added in next(). \nOtherwise next() might return a higher document \nnumber than skipTo() would skip to, ie. a lower document number \nwould not be scored at all. \nIn that case the implementation of skipTo can also be simplified \nsomewhat because it would only have to delete from the beginning \nof the valid bucket list. \n\nI think a version of BooleanScorer modified with this patch could \nbe used as a BooleanSubScorer. \nAs a top level scorer, BooleanScorer is difficult to beat in performance \nfor non required clauses, and on the top level it is not a problem that \ndocuments are not processed strictly in order, normally they will be used \nin a Hits that presents them in another other anyway. \n\nFor a non top level scorer, or when the document order should be \nfollowed strictly, the patched version could be used \nas BooleanSubScorer, or the DisjunctionScorer posted earlier \ncould be used. Below top level, DisjunctionScorer could be \nfaster because it never works ahead into a bucket list. \n\nA strict document order would also be an advantage when creating an \nIterFilter from a BooleanQuery. \n\nRegards, \nPaul Elschot \n ",
            "author": "Paul Elschot",
            "id": "comment-12322143"
        },
        {
            "date": "2005-01-25T06:04:31+0000",
            "content": "Paul,\n\nWould be quite interesting to compare the performance with your BooleanScorer2.\n\nin skipTo shouldn\u00b4t it be\n\n<         if (target > scorer.doc()) {\n>         if (target <= scorer.doc()) \n{\n            more = true;\n          } else if (scorer.skipTo(target)) {            more = true;          }\n else {\n            sub.done = true;\n\nSetting end in skipTo could avoid some looping in subsequrnt next().\n\nCould you add a method to switch between sorting and non-sorting behavior.\nThe non-sorting version should not use more resources than the original\nBooleanScorer.\n\nChristoph ",
            "author": "Christoph Goller",
            "id": "comment-12322144"
        },
        {
            "date": "2005-01-25T07:42:02+0000",
            "content": "(In reply to comment #3) \n> Paul, \n>  \n> Would be quite interesting to compare the performance with your \nBooleanScorer2. \n>  \n> in skipTo shouldn\u00b4t it be \n>  \n> <         if (target > scorer.doc()) { \n> >         if (target <= scorer.doc()) \n{ \n \nVery likely, yes. (I have not yet looked at the code again.) \n \n>             more = true; \n>           }\n else if (scorer.skipTo(target)) \n{ \n>             more = true; \n>           }\n else { \n>             sub.done = true; \n>  \n> Setting end in skipTo could avoid some looping in subsequrnt next(). \n>  \n> Could you add a method to switch between sorting and non-sorting behavior. \n> The non-sorting version should not use more resources than the original \n> BooleanScorer. \n\nI thought about that, too. I'll try it later. Basically it would be a flag \nallowing to use skipTo() and keeping the valid buckets sorted. \n\nRegards, \nPaul  ",
            "author": "Paul Elschot",
            "id": "comment-12322145"
        },
        {
            "date": "2005-01-26T17:39:59+0000",
            "content": "Created an attachment (id=14105)\nAdded allowSkipTo() to BooleanScorer.java\n\nThis passes the current tests with the internal flag (keepSorted) set, ie.\nas if allowSkipTo() was used.\nSome more tests would be needed, because the above way of testing\nverifies this new BooleanScorer against the new BooleanScorer2.\n\nRegards,\nPaul Elschot ",
            "author": "Paul Elschot",
            "id": "comment-12322146"
        },
        {
            "date": "2005-02-23T05:18:49+0000",
            "content": "Created an attachment (id=14347)\nControl allowSkipTo() on 1.4 scorer from BooleanQuery ",
            "author": "Paul Elschot",
            "id": "comment-12322147"
        },
        {
            "date": "2005-02-23T05:22:23+0000",
            "content": "Created an attachment (id=14348)\nAdapted TestBoolean2.java to use skipTo on the 1.4 scorer\n\nThese two patches allow experiments with 3 versions of BooleanScorer:\n\n\tthe 1.4 scorer (almost) unmodified,\n\tthe 1.4 scorer implementing skipTo() and scoring docs in order,\n\tthe new default scorer.\n\n ",
            "author": "Paul Elschot",
            "id": "comment-12322148"
        },
        {
            "date": "2005-03-27T07:13:19+0000",
            "content": "Created an attachment (id=14569)\nBooleanScorer.java with more sorting done when skipTo is allowed\n\nWhile doing some performance measurements on disjunctions,\nthe run times of BooleanScorer with and without skipTo allowed\nhardly differed.\nWith this change, the sorting is also done in the score(HitCollector, maxDoc)\nmethod, and the measurements now show that this slows down the internal runtime\nof BooleanScorer roughly by a factor 5. This is more than expected, probably\ndue to the simplistic implementation of the sorting. ",
            "author": "Paul Elschot",
            "id": "comment-12322149"
        },
        {
            "date": "2005-03-28T01:38:07+0000",
            "content": "Removed dependency on fixed bug 31785  ",
            "author": "Paul Elschot",
            "id": "comment-12322150"
        },
        {
            "date": "2005-03-30T07:30:27+0000",
            "content": "Created an attachment (id=14589)\nBooleanScorer1.java\n\nThis is an alternative to BooleanScorer that uses buckets for speed.\nHere an extra array of indexes into the bucket array is used instead\nof a linked list over the buckets.\n\nThe indexes in this extra array consist of the low bits of the document\nnumbers in the current range. This can be sorted by a simple call to\nArrays.sort() by allowSkipTo().\nDoing such sorting retrieves the docs in order and allows\nskipTo on BooleanScorer1, but it also doubles the overhead time of\nBooleanScorer1.\n\nTo my suprise BooleanScorer1 without skipTo() takes 85%-98% of the time\nrequired by the current BooleanScorer in test cases of\nTestDisjunctionPerf1.java. In other words,\nBooleanScorer1 is a bit faster than the current BooleanScorer on disjunctions.\nThe only cause\tI can think of for the performance improvement is better\nuse of L2/L1 cache.\n\nTo keep things from getting simple, the current performance order of the\nvarious boolean scorers on disjunctions is:\n\n1. BooleanScorer1 without skipTo()\n2. BooleanScorer without skipTo()\n3. DisjunctionScorer\n4. BooleanScorer1 with skipTo()\n5. BooleanScorer (as posted on 26 March) with skipTo()\n\nSo I would propose that BooleanScorer1 replaces the current BooleanScorer.\nI used a new name BooleanScorer1 because it is a rather drastic change\nto BooleanScorer and I'd like to see some verification before the replacement.\n\nRegards,\nPaul Elschot ",
            "author": "Paul Elschot",
            "id": "comment-12322151"
        },
        {
            "date": "2005-04-08T05:37:30+0000",
            "content": "Created an attachment (id=14652)\nBooleanScorer1.java, slimmed down.\n\nFurther slimming: dropped the intermediate hit collector\nand merged the bucket table into the scorer.\nAlso a slight further performance improvement (using java 1.5.0_01-b08, x86)\non the obsoleted version.\n\nRegards,\nPaul Elschot ",
            "author": "Paul Elschot",
            "id": "comment-12322152"
        },
        {
            "date": "2006-05-16T03:15:22+0000",
            "content": "The only reason this issue is still open is that it contains some code that might\nbe useful for implementing disjunctions. I just left a reference there (performance of\nDisjunctionSumScorer), so this can be closed as \"later\". ",
            "author": "Paul Elschot",
            "id": "comment-12402407"
        }
    ]
}