{
    "id": "LUCENE-6163",
    "title": "Use NGramPhraseQuery via QueryBuilder",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "5.0",
        "components": [
            "core/other",
            "modules/analysis"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "New Feature"
    },
    "description": "This is derived from SOLR-3055.\nTo gain performance improvement of LUCENE-3426, QueryBuilder should  generate NGramPhraseQuery to optimize n-gram based phrase query. \n(especially good for CJK languages, but the benefit is not limited to those.)",
    "attachments": {
        "LUCENE-6163.patch": "https://issues.apache.org/jira/secure/attachment/12690078/LUCENE-6163.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14264595",
            "author": "Tomoko Uchida",
            "date": "2015-01-05T13:50:31+0000",
            "content": "I've added a patch for NGramTokenizer.\nOther n-gram based tokenizer/filters like CJKBigramFilter could be modified in a similar way. (another issue is needed?) "
        },
        {
            "id": "comment-14264602",
            "author": "Robert Muir",
            "date": "2015-01-05T14:00:58+0000",
            "content": "I don't think the optimization is safe if any tokenfilter modifies the tokens after ngram, it will give the wrong results. "
        },
        {
            "id": "comment-14264677",
            "author": "Tomoko Uchida",
            "date": "2015-01-05T15:28:50+0000",
            "content": "Thanks for the response.\n\n> I don't think the optimization is safe if any tokenfilter modifies the tokens after ngram, it will give the wrong results.\n\nI understand your indication. Your point is about my patch, not about NGramPhraseQuery itself?\nIf my approach is bad, another way, as noted in the past comment of SOLR-3055, could still be possible.\nany suggestions will be appreciated. "
        }
    ]
}