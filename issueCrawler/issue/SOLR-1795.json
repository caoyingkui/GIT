{
    "id": "SOLR-1795",
    "title": "Subclassing QueryComponent for fetching results from a database",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "SearchComponents - other"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "This is a request to change the access on a few fields from package to public.\n\nI've subclassed QueryComponent to allow me to fetch results from a database (based upon the stored uniqueKey field) instead of from the shards. The only stored field in solr is the uniqueKey field, and whatever fields I might need for sorting.  To do this I've overridden QueryComponent.finishStage so that after executing the query, SolrDocuments are created with the uniqueKey field.  A later component populates the rest of the fields in the documents by reading them from a database.\n\n\npublic void finishStage(ResponseBuilder rb) {\n   if (rb.stage == ResponseBuilder.STAGE_EXECUTE_QUERY) {\n      // Create SolrDocument's from the ShardDoc's\n      boolean returnScores = (rb.getFieldFlags() & SolrIndexSearcher.GET_SCORES) != 0;\n      for (ShardDoc sdoc : rb.resultIds.values()) {\n         SolrDocument doc = new SolrDocument();\n         doc.setField(\"id\", sdoc.id);\n         if (returnScores && sdoc.score != null) {\n            doc.setField(\"score\", sdoc.score);\n         }\n         rb._responseDocs.set(sdoc.positionInResponse, doc);\n      }\n   }\n}\n\n\n\nEverything works fine, but ResponseBuilder variables: resultIds and _responseDocs, and ShardDoc variables: id, score, and positionInResponse currently all have package visibility.  I needed to modify the core solr files to change their visibility to public so that I could access them in the function above. Is there any chance that they could be changed to public in a future version of Solr, or somehow make them accessible outside the package?\n\nIf people are interested, I could post the QueryComponent subclass and database component that I wrote. But it gets a bit involved because the QueryComponent subclass also handles parsing the query just at the main solr server, and sending serialized parsed queries to the shards.  (Query parsing in my environment is pretty cpu- and memory-intensive so I do it just at the main server instead of the shards.)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16018993",
            "date": "2017-05-21T22:08:34+0000",
            "content": "Closing ancient issue as won't fix. A better way to pull results from a DB would be through streaming expressions these days. "
        }
    ]
}