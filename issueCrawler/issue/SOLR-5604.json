{
    "id": "SOLR-5604",
    "title": "Remove deprecations caused by httpclient 4.3.x upgrade",
    "details": {
        "affect_versions": "4.7",
        "status": "Closed",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "SOLR-5590 upgraded httpclient in Solr and Lucene to version 4.3.x.  This version deprecates a LOT of classes and methods, recommending that they all be replaced with various methods from the HttpClientBuilder class.",
    "attachments": {
        "SOLR-5604.patch": "https://issues.apache.org/jira/secure/attachment/12634960/SOLR-5604.patch",
        "SOLR-5604-4x-just-lucene.patch": "https://issues.apache.org/jira/secure/attachment/12621478/SOLR-5604-4x-just-lucene.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13861788",
            "date": "2014-01-03T19:05:43+0000",
            "content": "I made the same upgrade in my SolrJ application some time ago.  At the time, in an attempt to get rid of the deprecated stuff in my own code, I tried to make everything use HttpClientBuilder.  I got exceptions when I tried to use the resulting HttpClient object with SolrJ.  I ended up switching over to using the HttpClientUtil class in SolrJ to build the client, which punted the problem upstream \u2013 this issue.\n\nI am willing to attempt the fix for this issue if someone can assist with pointers for the rough spots, otherwise someone else should jump in.\n\nDo we need a separate issue for the related changes in documentation? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13862367",
            "date": "2014-01-04T17:37:01+0000",
            "content": "I made an attempt at a start and ran into problems, so I'll either need to give up or be able to discuss it with someone who knows how to deal with HttpClientBuilder and related classes like CloseableHttpClient properly.  I hang out on five lucene/solr related freenode IRC channels during \"reasonable\" US timezone hours. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13862376",
            "date": "2014-01-04T18:04:17+0000",
            "content": "It's starting to look like the entire approach we currently use is deprecated.  Right now, we create a SystemDefaultHttpClient and then tweak its properties, even when parameters are sent on the createClient call.  The current approach lets you change parameters after a client is created, too.\n\nI can't see any way to do what I've just described that doesn't use deprecated classes or methods.  From what I can see, the intended path forward is to set the options on the builder object and then build the resulting CloseableHttpClient in one final build() call. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13862378",
            "date": "2014-01-04T18:08:59+0000",
            "content": "My current thought, and I don't know whether it's a good idea or not, is to deprecate HttpClientUtil entirely and create HttpClientBuilderUtil. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13862408",
            "date": "2014-01-04T20:28:54+0000",
            "content": "This is a patch against 4x that only makes changes in the HttpClient usage in Lucene, because that usage is a lot more simple than the usage in Solr.  I hope someone can review what I've done, tell me whether I'm even heading in the right direction, and offer some guidance.\n\nThe classes that I've changed here are marked experimental, so I don't feel like it's a major problem if the change breaks user code.  I've left some deprecated stuff in HttpClientBase, but I've deprecated the methods that use it.  They can be removed without introducing any errors, but they're public, so I thought I should leave them in 4x. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13862411",
            "date": "2014-01-04T20:46:07+0000",
            "content": "Thinking out loud: I hate to join a mailing list just for one little question, but it may be a good idea to ask the HC experts about how to minimize being affected by future deprecations.  It would be very nice if we were able to code correctly so that we'll be fine through HC 5.x. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13865753",
            "date": "2014-01-08T19:00:52+0000",
            "content": "Oleg Kalnichevski replied to my httpclient-users post.  Thank you!\n\nSome general thoughts regarding how SolrServer implementations use HttpClient:  Currently we have a number of methods that change HttpClient settings after a SolrServer is created.  I think there are two choices for dealing with this, and the actual solution might be a blend of both:\n\n1) Deprecate those methods and require users to create their own HttpClient object if they want to change those settings.\n\n2) Have those methods change fields in the class which are then used to change settings when HC request objects are built.\n\nI think the httpclient changes for Lucene need to be split off into a separate issue under the LUCENE project. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13903423",
            "date": "2014-02-17T18:25:37+0000",
            "content": "In what qualifies as my spare time, I have been trying to address this.\n\nGiven the problems I see appear when I try to change it, I am thinking that HttpClientUtil cannot be changed, it just needs to be deprecated entirely.\n\nI can create a new class called HttpClientBuilderUtil, but it would really be nothing more than a very thin wrapper over HttpClientBuilder.  Is there any value in doing that, aside from the warm fuzzies a user might get from only using Solr methods and not needing to handle the external class directly?\n\nWe need to do something about all the HttpSolrServer methods that make changes to the HttpClient object after it's created.  One option is to deprecate all those methods and have them throw exceptions unless the HttpClient object is one of the old types that can be modified.  Another is slightly more complicated - create the HttpClient object as soon as the first request is made.  If the HttpClient object has already been created, calling those methods would throw an exception, but if it hasn't, then it would alter a list of internal options for the HttpClient.\n\nI am still willing to try and tackle this issue, but I have to admit that my experience level with HttpClient is low.  Anyone who has ideas for how to proceed, please let me know. "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13903430",
            "date": "2014-02-17T18:32:07+0000",
            "content": "Hi Shawn,\n\nI'm mainly interested in what happens to SolrJ classes.  It seems to me that you will want to do two things right now:\n(1) Maintain the current SolrJ API in a deprecated fashion, continuing to make use of the deprecated way of configuring an HttpClient object, and\n(2) Introduce a brand-new way of doing SolrJ initialization, where you probably will want to pass in a builder object instead of a configured HttpClient.\n\nThoughts?\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13903441",
            "date": "2014-02-17T18:44:39+0000",
            "content": "Keep in mind that HttpClientUtil is not just a helper class to set those params - it's also a factory for our HttpClient instances that respects a Configurer object that you can set. "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13903452",
            "date": "2014-02-17T19:02:19+0000",
            "content": "Hmm.  Thinking further about this, one of the advantages of the current SolrJ API (which optionally accepts a configured HttpClient object) is that you can keep the HttpClient object around, and it won't get repeatedly recreated.  If you simply substituted a builder (or Configurer) object instead, you guarantee that recreation of the HttpClient class would occur on every SolrJ call.  (I take it that SolrJ needs to configure the HttpClient object further and that is where the problem lies when switching over to the builder paradigm.)\n\nAn alternative would be to create a class that has two members: an HttpClient reference, and a builder (or Configurer).  This class would be used wherever HttpClient is used right now.  The HttpClient reference would be initialized the first time it is needed, and subsequent changes to the builder/Configurer would either be flagged as illegal, or would force a new HttpClient instance to be created to replace the existing one.\n\nI think this meets all the criteria... please let me know if I am wrong. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13903469",
            "date": "2014-02-17T19:26:59+0000",
            "content": "Keep in mind that HttpClientUtil is not just a helper class to set those params - it's also a factory for our HttpClient instances that respects a Configurer object that you can set.\n\nI fully expect that there will be things I haven't thought of, like this.  From what I've seen, Lucene and Solr utilize every nuance of the Java language, and they do it very well.  Once all the complexity is understood, you can think and write with high-level concepts really easily, but paradigm shifts in low level dependencies like the new HttpClient cause a lot of disruption. "
        },
        {
            "author": "Oleg Kalnichevski",
            "id": "comment-13903482",
            "date": "2014-02-17T19:56:12+0000",
            "content": " We need to do something about all the HttpSolrServer methods that make changes to the HttpClient object after it's created  \n\nLet me venture a guess that most (likely all) those configuration parameters can be chaged at the context or request level without changing HttpClient itself.\n\nOleg   "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13903495",
            "date": "2014-02-17T20:43:32+0000",
            "content": "Let me venture a guess that most (likely all) those configuration parameters can be chaged at the context or request level without changing HttpClient itself.\n\nThank you for the attention and advice!\n\nHere's where I show my ignorance of the inner workings of HttpClient, and tell you that I have no idea.  I see the following HttpSolrServer setters that modify HttpClient or one of its components.  Can all of these be handled with lower levels that you can change?  If they can, then migrating might be easier than I thought, and we can expose additional knobs without a lot of work.\n\n\n\tsetConnectionTimeout\n\tsetSoTimeout\n\tsetAllowCompression\n\tsetFollowRedirects\n\tsetDefaultMaxConnections\n\tsetMaxTotalConnections\n\n\n\nHttpClientUtil has all of the options mentioned above, plus these:\n\n\n\tsetBasicAuth\n\tsetUseRetry\n\n "
        },
        {
            "author": "Oleg Kalnichevski",
            "id": "comment-13903505",
            "date": "2014-02-17T21:04:57+0000",
            "content": "\n\tsetConnectionTimeout\nsettable through request config\n\tsetSoTimeout\nsettable through request config\n\tsetAllowCompression\nplease explain what exactly this parameter is intended to do\n\tsetFollowRedirects\nsettable through request config\n\tsetDefaultMaxConnections\nsettable through connection manager\n\tsetMaxTotalConnections\nsettable through connection manager\n\tsetBasicAuth\nplease explain what exactly this parameter is intended to do\n\tsetUseRetry\nplease explain what exactly this parameter is intended to do\n\n\n\nOleg\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13903515",
            "date": "2014-02-17T21:35:56+0000",
            "content": "How do you change connection manager properties after the HttpClient is created?  ClientConnectionManager and HttpClient#getConnectionManager are deprecated.\n\nAn implementation detail: I do not see 'context' anywhere in HttpSolrServer.  We must not be using that.\n\nHere's answers to your questions:\n\n\tsetAllowCompression calls an HttpClientUtil method that says it controls HTTP payload compression.  That method adds request and response interceptors that are defined locally, extending HttpRequestInterceptor and HttpResponseInterceptor.  If the client passed to the method is not a DefaultHttpClient, the method throws an exception.\n\tsetBasicAuth gets the CredentialsProvider and then sets the UsernamePasswordCredentials with a provided username and password.\n\tsetUseRetry calls HttpClient#setHttpRequestRetryHandler.\n\n "
        },
        {
            "author": "Oleg Kalnichevski",
            "id": "comment-13903532",
            "date": "2014-02-17T21:50:35+0000",
            "content": " How do you change connection manager properties after the HttpClient is created? ClientConnectionManager and HttpClient#getConnectionManager are deprecated. \n\nWhat prevents you from keeping a reference to the connection manager along with that to HttpClient? Connection pools are separate entities. They have their separate life cycles and can be shared by multiple clients. One can create a new client that makes use of an existing connection pool.\n\n\n\tsetAllowCompression\nCreate protocol interceptors at HttpClient construction times but use a custom context variable to enable and disable them at run time if desired \n\tsetBasicAuth\nSettable through context\n\tsetUseRetry\nCreate a custom handler that can be customized through context at run time if desired\n\n\n\nOleg\n\nOleg "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13903559",
            "date": "2014-02-17T22:30:27+0000",
            "content": "What prevents you from keeping a reference to the connection manager along with that to HttpClient? Connection pools are separate entities. They have their separate life cycles and can be shared by multiple clients. One can create a new client that makes use of an existing connection pool.\n\nWhen I first started looking at this, I didn't see any way to set these options with the interface \u2013 HttpClientConnectionManager.  When I looked deeper I found PoolingHttpClientConnectionManager, where it is possible to set the connection limits after creation.  There will be some restrictions, but i think that means that I can maintain the connection limit setters.\n\nI may be able to get a little further with this now.  I need to look deeper into the docs. "
        },
        {
            "author": "Oleg Kalnichevski",
            "id": "comment-13911429",
            "date": "2014-02-25T09:45:00+0000",
            "content": "Shawn\n\nIf you feel stuck I could take a stab at this issue.\n\nOleg "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13911758",
            "date": "2014-02-25T17:30:51+0000",
            "content": "I think I have a high level grasp of what I need to do, but my free time lately has been limited.  I am not completely sure about the details, which means that I need to dedicate a large block of time.  If it's possible to split this into multiple issues, that might be a good idea - deal with one chunk at a time.\n\nPlease feel free to work on a patch.  You know more about this than I do. "
        },
        {
            "author": "Oleg Kalnichevski",
            "id": "comment-13912707",
            "date": "2014-02-26T09:50:19+0000",
            "content": "Shawn,\nI do not want to jump in unless I absolutely have to. If, however, you want me to work on some particular chunk of code, feel free to let me know a branch and a module or a class you want me to look at. I am a huge Lucene fan but I never hacked on. So, I would need you to work me in.\n\nOleg "
        },
        {
            "author": "Steve Davids",
            "id": "comment-13936449",
            "date": "2014-03-16T06:25:35+0000",
            "content": "Created a patch to prompt a discussion (some tests are broken) with a few highlights:\n\n\tUpdated HttpClientUtil to drop all of the setXXX methods, essentially the only thing remaining is the createClient(SolrParams...)\n\tHttpClientConfigurer was updated to take a HttpClientBuilder and is properly setting all of the properties specified in HttpClientUtil\n\tCreated an abstract HttpClientSolrServer which allows for setters (internally mapping to the properties) then when the first time the getHttpClient() method is called, the client is created\n\t\n\t\tThis is currently problematic in a few cases like CloudSolrServer or LBSolrServer because they call getHttpClient() in the constructor. Further work needs to be done to flesh this one out, generally when you are in this half-built state there is an init/@PostConstruct method that is called to finally build the client.\n\t\n\t\n\n\n\nUnfortunately you aren't able to get access to the ConnectionManager when using the HttpClientBuilder because it returns an 'InternalHttpClient' which doesn't give you access, it just returns a no-op manager when you call getConnectionManager(); "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13936460",
            "date": "2014-03-16T06:55:08+0000",
            "content": "Steve Davids, thank you for putting work in on this.  I promise to look at your patch when time permits.\n\nA note about deleting attachments, comments, and other things: Because Apache develops completely in the open, we prefer to keep all historical data in Jira unless there's a really compelling reason to delete it. Sometimes the trail of how we arrived and the mistakes we made getting there is just as important as the final solution.\n\nWhen you attach a file that has the same name as a previous version, Jira automatically greys out the download link for previous versions.  See SOLR-2906 for an example of a patch that went through a number of revisions. "
        },
        {
            "author": "Steve Davids",
            "id": "comment-13937150",
            "date": "2014-03-16T13:24:46+0000",
            "content": "Sorry about that, I just had a stupid mistake by not adding a newly created class to svn tracking before uploading the patch.\n\n-Steve\n\nSent from my iPhone\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971016",
            "date": "2014-04-16T12:56:54+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14372544",
            "date": "2015-03-21T06:08:49+0000",
            "content": "Informational, I'm not sure that there's any need to get really worried yet:\n\nWhile digging around for info relating to SOLR-6865, I discovered that the HTTPCORE project in Jira has bugs showing 5.0-alpha1 for the \"Fixed Version.\"  This version currently has no open bugs, though there's not yet a 5.0.x branch in svn.  It looks like the first time this version was used was in November 2014, for HTTPCORE-375. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14375096",
            "date": "2015-03-22T18:26:47+0000",
            "content": "Info learned on SOLR-6865:  It's going to be at least a year before HC 5.0 is ready for a GA release, because 5.0 will have partial HTTP/2 support.\n\nThis takes some pressure off for this issue, but I hope we can fix it before we are forced into it. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-15211342",
            "date": "2016-03-25T03:06:09+0000",
            "content": "I am working on getting this done now as part of SOLR-4509. "
        }
    ]
}