{
    "id": "LUCENE-6531",
    "title": "Make PhraseQuery immutable",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Mutable queries are an issue for automatic filter caching since modifying a query after it has been put into the cache will corrupt the cache. We should make all queries immutable (up to the boost) to avoid this issue.",
    "attachments": {
        "LUCENE-6531.patch": "https://issues.apache.org/jira/secure/attachment/12738377/LUCENE-6531.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14577389",
            "author": "Adrien Grand",
            "date": "2015-06-08T15:52:18+0000",
            "content": "Here is a patch. PhraseQuery has a main constructor: PhraseQuery(int slop, String field, List<TermAndPosition> termsAndPositions) and some sugar constructors such as PhraseQuery(String field, String... terms) that will search for terms at consecutive positions in field with a slop of 0. "
        },
        {
            "id": "comment-14577396",
            "author": "Robert Muir",
            "date": "2015-06-08T16:01:55+0000",
            "content": "I think TermAndPosition is very awkward. Can we somehow avoid a new class here?\n\nThe only advantage it has, is that you cant screw up by using a different field, but we shouldn't fashion APIs around error/abuse cases, and the disadvantages here (new class, and now position is mandatory but its confusing what it should be, should it start at 0 or 1, etc etc).\n\nThis stuff adds up to make it way harder than today, where its a POJO with simple add() method and position is optional.\n\n\nPhraseQuery q = new PhraseQuery();\nq.add(new Term(...));\nq.add(new Term(...));\n\n "
        },
        {
            "id": "comment-14577414",
            "author": "Adrien Grand",
            "date": "2015-06-08T16:16:58+0000",
            "content": "I think TermAndPosition is very awkward. Can we somehow avoid a new class here?\n\nIf we don't want to have a wrapper around a term and a position, then the only options I see would be to either require users to provide two arrays/lists, one for terms and one for positions, or to use a builder in order to hide this wrapper: the builder could have a add(BytesRef term, int position) method like PhraseQuery does today. I don't really like APIs that expect users to provide parallel arrays, and even though I don't mind builders in general I think some other committers strongly dislike them so I thought the Term/position wrapper was a good option. It's also similar to how BooleanClause wraps a Query and an Occur?\n\nshould it start at 0 or 1\n\nBoth would work since positions are relative. "
        },
        {
            "id": "comment-14577421",
            "author": "Robert Muir",
            "date": "2015-06-08T16:23:02+0000",
            "content": "Right, I guess I feel there are even more options in addition to what is here. For example positions could be relative rather than absolute: in other words you provide the gap. \n\nAs far as the builder solution, I think its an interesting option here, because we could have a coherent way of solving this across other queries. As far as \"strongly dislike\", my major problems are (as witnessed by codebases using them):\n\n\tabsolute nonsense like \"AbstractBuilder\"s going with them\n\timpossible to read code due to chaining/indentation\n\tloss of standard getXXX() setXXX() notation\n\n\n\nIn my opinion, none of these things are really \"related\" to builders. Builders are an OK tool and if you look in this codebase you will see that they are used. Its the \"Builder pattern\" which drags along all that above shit that is truly horrible. "
        },
        {
            "id": "comment-14577436",
            "author": "Adrien Grand",
            "date": "2015-06-08T16:29:25+0000",
            "content": "Thanks for the suggestions. So would you be fine with a new PhraseQuery.Builder class that would have the following skeleton?\n\n\nPhraseQuery.Builder {\n  void add(BytesRef term, int positionIncrement); // positionIncrement is relative to the previously added term\n  void setSlop(int slop);\n  PhraseQuery build();\n}\n\n "
        },
        {
            "id": "comment-14577440",
            "author": "Robert Muir",
            "date": "2015-06-08T16:33:54+0000",
            "content": "As mentioned above I really think it should have add() without any position stuff to go along with what is there in PhraseQuery today. In general can't we just give it the exact API of phrasequery today? (defer this String field stuff, again i dont think its very important and we have the advantage of making it easier for people to move to the new api) "
        },
        {
            "id": "comment-14577463",
            "author": "Adrien Grand",
            "date": "2015-06-08T16:52:10+0000",
            "content": "OK, I'll work on a patch where the builder has the same API as PhraseQuery today then if nobody has objections. "
        },
        {
            "id": "comment-14577466",
            "author": "Michael McCandless",
            "date": "2015-06-08T16:55:44+0000",
            "content": "+1 for a sane builder API. "
        },
        {
            "id": "comment-14579348",
            "author": "Adrien Grand",
            "date": "2015-06-09T18:15:40+0000",
            "content": "Here is a new patch that adds PhraseQuery.Builder with the same API as today's PhraseQuery.\n\nI kept the \"sugar\" constructors on PhraseQuery that make it easy to create simple phrase queries, like new PhraseQuery(\"body_field\", \"quick\", \"fox\"). "
        },
        {
            "id": "comment-14587712",
            "author": "Adrien Grand",
            "date": "2015-06-16T08:59:33+0000",
            "content": "I'll commit shortly if there are no objections. "
        },
        {
            "id": "comment-14587802",
            "author": "ASF subversion and git services",
            "date": "2015-06-16T10:18:43+0000",
            "content": "Commit 1685754 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1685754 ]\n\nLUCENE-6531: Make PhraseQuery immutable. "
        },
        {
            "id": "comment-14587906",
            "author": "Cao Manh Dat",
            "date": "2015-06-16T11:40:50+0000",
            "content": "Adrien Grand : It look like we can modify PhraseQuery api a little bit. For a long time we set PhraseQuery.field base on the field of first term added to PhraseQuery, and it throw exception when terms added to PhraseQuery not have same field. We even allow null for field and in rewrite method we return and empty BooleanQuery with boost (what!!). Since we have a builder today, why not modify it little bit to make PhraseQuery clearer? \n\n\tChange PhraseQuery.Builder() -> PhraseQuery.Builder(String field)\n\tChange PhraseQuery.Builder.add(Term term) -> PhraseQuery.Builder.add(String termText)\n\tWe then deprecated all public constructor of PhraseQuery\n\n\n\nAfter that PhraseQuery we be much clearer! I will happy to submit a patch. "
        },
        {
            "id": "comment-14587986",
            "author": "Adrien Grand",
            "date": "2015-06-16T12:49:21+0000",
            "content": "I agree with you it would make the API nicer, it has not been done in this issue in order to focus on making PhraseQuery immutable while changing the API as little as possible (the only change is that setters moved the the Builder class). We can open another issue if we want to improve the API, it's indeed a bit weird to expect consumers to provide terms that all have the same field. "
        },
        {
            "id": "comment-14588082",
            "author": "Cao Manh Dat",
            "date": "2015-06-16T14:13:32+0000",
            "content": "I agree that it will be nice if Lucene is backward compatible. I will open an issue where we can discuss more about PhraseQuery modification. "
        },
        {
            "id": "comment-14644164",
            "author": "ASF subversion and git services",
            "date": "2015-07-28T10:01:19+0000",
            "content": "Commit 1693059 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1693059 ]\n\nLUCENE-6531: Make PhraseQuery immutable. "
        },
        {
            "id": "comment-14644173",
            "author": "ASF subversion and git services",
            "date": "2015-07-28T10:08:00+0000",
            "content": "Commit 1693060 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1693060 ]\n\nLUCENE-6531: backported to 5.3. "
        },
        {
            "id": "comment-14647690",
            "author": "Terry Smith",
            "date": "2015-07-30T14:31:52+0000",
            "content": "Adrien Grand The PhraseQuery.Builder setter methods are all void, where as the ones for BooleanQuery and BlendedTermQuery return the Builder itself.\n\nCan the set/add methods on PhraseQuery.Builder return this to make the various Query builders consistent with each other? "
        },
        {
            "id": "comment-14647699",
            "author": "Adrien Grand",
            "date": "2015-07-30T14:34:27+0000",
            "content": "Thanks Terry for catching this. This issue was discussed for BooleanQuery after PhraseQuery had already been checked in, and I didn't think of changing PhraseQuery.Builder methods to return this afterwards. I'll do it now. "
        },
        {
            "id": "comment-14647701",
            "author": "Terry Smith",
            "date": "2015-07-30T14:36:14+0000",
            "content": "Awesome, you rock! "
        },
        {
            "id": "comment-14647892",
            "author": "Adrien Grand",
            "date": "2015-07-30T16:26:58+0000",
            "content": "I fixed it through LUCENE-6707. "
        },
        {
            "id": "comment-14713253",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:13+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}