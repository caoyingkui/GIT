{
    "id": "SOLR-544",
    "title": "Dates with \"optional\" milliseconds are not equivilent",
    "details": {
        "affect_versions": "1.1.0,                                            1.2,                                            1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Something that occured to me while working n SOLR-470 is that since the earliest versions of Solr, \"DateField\" has advertised it's format as...\n\ndate field shall be of the form \"1995-12-31T23:59:59Z\"  The trailing \"Z\" designates UTC time and is mandatory. Optional fractional seconds are allowed: \"1995-12-31T23:59:59.999Z\"  All other parts are mandatory.\n\nThe problem is that Solr has always remained happily ignorant about wether you were using milliseconds or not, even in the case of \"0\" milliseconds, so the following input strings do not result in Terms which are truly equal...\n\n\n\t1995-12-31T23:59:59Z\n\t1995-12-31T23:59:59.0Z\n\t1995-12-31T23:59:59.00Z\n\t1995-12-31T23:59:59.000Z\n\n\n\n...which means if people are inconsistent about how they interact with DateField (sometimes including the millis and sometimes not including them) the can get incorrect behavior in various situations:\n\n\tsorting by date with a secondary sort can cause hte secondary sort to be ignored when the dates should be considered equal.\n\trange queries might miss items equal to the end points but with fewer/more characters then the input\n\n\n\nAny solution would require true parsing & normalizing of any date input (currently dates are only parsed if they involve DateMath) and complete reindexing\n\nNOTE: I don't personally think fixing this issue in DateField is worthwhile. i think it would be better to document it as a caveat and require people to be consistent in their usage of milliseconds (ie: if you are going to use them, then always use them even if they are 0). \nInstead we should probably focus on a new Long based Date Field (see SOLR-440) since that would always require parsing to get to the internal representation anyway.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12591019",
            "date": "2008-04-21T19:54:07+0000",
            "content": "From the schema:\n\nThe format for this date field is of the form 1995-12-31T23:59:59Z, and\nis a more restricted form of the canonical representation of dateTime\nhttp://www.w3.org/TR/xmlschema-2/#dateTime\nThe trailing \"Z\" designates UTC time and is mandatory.\nOptional fractional seconds are allowed: 1995-12-31T23:59:59.999Z\nAll other components are mandatory.\n\nPart of the canonical representation referenced states that\n\nThe fractional second string, if present, must not end in '0';\n\nSo not an oversight, but not enforced either.\n\nI agree with using a more efficient internal storage mechanism though.  The current one really just stems from the observation that the values already sorted correctly if the 'Z' was lopped off. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12591037",
            "date": "2008-04-21T20:39:41+0000",
            "content": "good point yonik ... perhaps we should just reiterate the \"no trailing 0\" aspect of the millis more strenuously in the docs. and move on to SOLR-440. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12591039",
            "date": "2008-04-21T20:41:04+0000",
            "content": "we should make sure we have something in 1.3 that addresses this (even if it is just documentation) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12598113",
            "date": "2008-05-19T22:03:39+0000",
            "content": "patch in SOLR-470 both improves the documentation regarding trailing zeros in addition to adding a parser that ensures all dates are in the canonical format.\n\nCommitted revision 658003. "
        }
    ]
}