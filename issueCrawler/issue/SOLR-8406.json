{
    "id": "SOLR-8406",
    "title": "AddSchemaFieldsUpdateProcessorFactory should handle list fields better",
    "details": {
        "components": [
            "Data-driven Schema"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "paraphrasing from offline discussion with Hossman:\n\nwhen AddSchemaFieldsUpdateProcessorFactory mappings refer to fieldtypes that are multivalued=false, it should either skip that mapping, or explicitly specify multivalued=true, when a document with values matching that mapping contains multiple values\n\nbasically, I'm submitting a document with foo = [ \"bar\", \"baz\" ] and field guessing doesn't figure out that foo is multi-valued unless my default is set to strings ...",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-11T23:09:39+0000",
            "author": "Hoss Man",
            "content": "A better way to put that might be...\n\n\nIf you are using AddSchemaFieldsUpdateProcessorFactory, and there is a mapping X such that:\n\n\tThe fieldType refered to by X is multiValued=\"false\"\n\tA SolrInputDocument contains multiple values for a field which (currently) matches the mapping X\n\n\n\nThen, one of the following 2 things should happen:\n\n\tThe \"newField\" call made by AddSchemaFieldsUpdateProcessorFactory should explicitly include multiValued=\"true\" when adding the field using the type specified by X\n\tThe X mapping should be ignored since the cardinality of values in the doc vs the multivalued-ness of the fieldType don't align.\n\n\n\nI'm a proponent of the later choice, because it means you could have fieldtypes like this..\n\n\n<fieldType name=\"int\" docValues=\"true\" stored=\"true\" indexed=\"true\" multiValued=\"false\" />\n<fieldType name=\"ints\" docValues=\"false\" stored=\"true\" indexed=\"true\" multiValued=\"true\" />\n\n\n...and ordered valueType mappings like this...\n\n<lst name=\"typeMapping\">\n  <str name=\"valueClass\">java.lang.Integer</str>\n  <str name=\"fieldType\">int</str> <!-- efficiently sortable if only one value -->\n</lst>\n<lst name=\"typeMapping\">\n  <str name=\"valueClass\">java.lang.Integer</str>\n  <str name=\"fieldType\">ints</str> <!-- multivalued fallback w/dif fieldType defaults -->\n</lst>\n\n\n\nBut we could just as easily support either option with a <bool name=\"addMultiValuedFieldForSingleValuedTypes\">true</bool> option on the update processor. ",
            "id": "comment-15053757"
        }
    ]
}