{
    "id": "LUCENE-8531",
    "title": "QueryBuilder hard-codes inOrder=true for generated sloppy span near queries",
    "details": {
        "components": [
            "core/queryparser"
        ],
        "status": "Resolved",
        "resolution": "Fixed",
        "fix_versions": [
            "7.6",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Bug"
    },
    "description": "QueryBuilder.analyzeGraphPhrase() generates SpanNearQuery-s with passed-in phraseSlop, but hard-codes inOrder ctor param as true.\n\nBefore multi-term synonym support and graph token streams introduced the possibility of generating SpanNearQuery-s, QueryBuilder generated (Multi)PhraseQuery-s, which always interpret slop as allowing reordering edits. \u00a0Solr's eDismax query parser generates phrase queries when its pf/pf2/pf3 params are specified, and when multi-term synonyms are used with a graph-aware synonym filter, SpanNearQuery-s are generated that require clauses to be in order; unlike with (Multi)PhraseQuery-s, reordering edits are not allowed, so this is a kind of regression. \u00a0See\u00a0SOLR-12243 for edismax pf/pf2/pf3 context. \u00a0(Note that the patch on SOLR-12243 also addresses another problem that blocks eDismax from generating queries at all under the above-described circumstances.)\n\nI propose adding a new analyzeGraphPhrase() method that allows configuration\u00a0of inOrder, which would allow eDismax to specify inOrder=false. \u00a0The existing analyzeGraphPhrase() method would remain with its hard-coded inOrder=true, so existing client behavior would remain unchanged.",
    "attachments": {
        "LUCENE-8531.patch": "https://issues.apache.org/jira/secure/attachment/12944015/LUCENE-8531.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16650768",
            "author": "Steve Rowe",
            "content": "CC Uwe Schindler ",
            "date": "2018-10-15T20:45:47+0000"
        },
        {
            "id": "comment-16650813",
            "author": "Jim Ferenczi",
            "content": "(Multi)PhraseQuery-s allows some reordering but the semantic is different from an unordered span near query.\nI don't think we can respect the slop correctly if we continue to use span queries here. We switched to span queries to avoid searching duplicate terms in multiple phrase queries but I agree that the behavior is not consistent when using a slop. Maybe we could switch to the old method of building one phrase query per path if a slop is used ? This way we could apply the slop to each phrase query independently. This is more costly than the span method but it would be semantically correct.  ",
            "date": "2018-10-15T21:22:26+0000"
        },
        {
            "id": "comment-16650910",
            "author": "Jim Ferenczi",
            "content": "Here is a patch to demonstrate the proposed changes in the last comment. ",
            "date": "2018-10-15T22:40:27+0000"
        },
        {
            "id": "comment-16654895",
            "author": "Uwe Schindler",
            "content": "Thanks Jim for the idea.\n\nI was following the previous issue on the Solr side and I agree that the behaviour needs to be consistent. But as Jim says, there is no need for some additional \"inOrder\" parameter as Steve suggested. The analyzePhrase stuff should always behave identical to a pure phrase query, so the inOrder behaviour needs to be consistent with a pure phrase query. If slop is > 0 then in order should be false, no optional parameter needed.\n\nThis would also fix Solr's bug and Lucene would be consistent. Jim's workaround to prevent using SpanQuery if slop is > 1 is perfectly fine, although might be a bit slower. It would be interesting how Elasticsearch handles this in its matchPhrase queries. ",
            "date": "2018-10-18T09:03:53+0000"
        },
        {
            "id": "comment-16654896",
            "author": "Uwe Schindler",
            "content": "IMHO, no need for extra param, as this is/was a bug. ",
            "date": "2018-10-18T09:04:54+0000"
        },
        {
            "id": "comment-16654901",
            "author": "Jim Ferenczi",
            "content": "> It would be interesting how Elasticsearch handles this in its matchPhrase queries.\n\nThe match query in Elasticsearch uses a QueryBuilder under the hood so we have the same bug.\u00a0\n\n> IMHO, no need for extra param, as this is/was a bug.\n\nagreed, we should adapt the query depending on the slop value to ensure consistency\n\u00a0 ",
            "date": "2018-10-18T09:10:07+0000"
        },
        {
            "id": "comment-16657043",
            "author": "Jim Ferenczi",
            "content": "Since this is a bug I am planning to commit the proposed patch soon unless there are objections. It will be a bit slower than the current version as Uwe Schindler outlined but I think consistency is more important here. ",
            "date": "2018-10-19T16:35:59+0000"
        },
        {
            "id": "comment-16657089",
            "author": "Uwe Schindler",
            "content": "+1, please do this. I will then take care of the Solr issue. This is not fully related, but the Solr code depends on the structure of Lucene queries produced and then reorders them with lots of instanceof checks. Which is bad spaghetti-code, but that's how it is.\n\nI'd like to get a Lucene class that allows you to generate edismax-like queries that parses some text, creates bigram and trigram shingles out of it to allow a \"match\" query to assign a higher score for hits when you have terms in order and close to each other (put a higher precedence if bigrams or trigrams in your query string are close together in the document). A lot of people use this, but currently it only works with Solr's edismax and whenever you want to use this for other custom Solr query parser or custom elasticsearch qp, you have to reimplement the shingling. ",
            "date": "2018-10-19T16:57:09+0000"
        },
        {
            "id": "comment-16657266",
            "author": "ASF subversion and git services",
            "content": "Commit e1da5f953731b4e2990e054d09ec0bcb2e5146b8 in lucene-solr's branch refs/heads/master from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e1da5f9 ]\n\nLUCENE-8531: QueryBuilder#analyzeGraphPhrase now creates one phrase query per finite strings in the graph if the slop is greater than 0.\nSpan queries cannot be used in this case because they don't handle slop the same way than phrase queries. ",
            "date": "2018-10-19T18:45:24+0000"
        },
        {
            "id": "comment-16657274",
            "author": "ASF subversion and git services",
            "content": "Commit 36ce83bc9add02a900e38b396b42c3c729846598 in lucene-solr's branch refs/heads/branch_7x from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=36ce83b ]\n\nLUCENE-8531: QueryBuilder#analyzeGraphPhrase now creates one phrase query per finite strings in the graph if the slop is greater than 0.\nSpan queries cannot be used in this case because they don't handle slop the same way than phrase queries. ",
            "date": "2018-10-19T18:54:53+0000"
        },
        {
            "id": "comment-16657275",
            "author": "Jim Ferenczi",
            "content": "Thanks Steve Rowe and Uwe Schindler. ",
            "date": "2018-10-19T18:54:59+0000"
        },
        {
            "id": "comment-16657475",
            "author": "Uwe Schindler",
            "content": "Thanks Jim! ",
            "date": "2018-10-19T21:42:08+0000"
        },
        {
            "id": "comment-16658732",
            "author": "ASF subversion and git services",
            "content": "Commit e1da5f953731b4e2990e054d09ec0bcb2e5146b8 in lucene-solr's branch refs/heads/jira/http2 from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e1da5f9 ]\n\nLUCENE-8531: QueryBuilder#analyzeGraphPhrase now creates one phrase query per finite strings in the graph if the slop is greater than 0.\nSpan queries cannot be used in this case because they don't handle slop the same way than phrase queries. ",
            "date": "2018-10-22T08:07:08+0000"
        },
        {
            "id": "comment-16660880",
            "author": "Michael Gibney",
            "content": "I recognize that this was a bug (in that using\u00a0SpanNearQuery with\u00a0inOrder=true and\u00a0slop > 0 changed the behavior, rather than simply the implementation, of the built query).\n\nThat said, there surely are potential use cases for the\u00a0inOrder=true behavior, which is supported by SpanNearQuery but not by (Multi)PhraseQuery. Would it be worth opening a new issue to consider introducing the ability to specifically request construction of SpanNearQuery and/or inOrder=true behavior? The work that went into building SpanNearQuery for phrases (commit 96e8f0a0afe) is still useful and relevant, even if the result isn't backward-compatible for the case where slop > 0. ",
            "date": "2018-10-23T16:07:39+0000"
        },
        {
            "id": "comment-16660913",
            "author": "Steve Rowe",
            "content": "+1, thanks Jim Ferenczi.\n\n(Multi)PhraseQuery-s allows some reordering but the semantic is different from an unordered span near query.\n\nCan you explain, or point to docs that explain what you mean? ",
            "date": "2018-10-23T16:20:18+0000"
        },
        {
            "id": "comment-16661015",
            "author": "Jim Ferenczi",
            "content": ">\u00a0Can you explain, or point to docs that explain what you mean?\n\nI am referring to the javadoc of PhraseQuery#getSlop where it is explained how unordered terms could match:\n\n* <p>The slop is an edit distance between respective positions of terms as\n* defined in this {@link PhraseQuery} and the positions of terms in a\n* document.\n*\n* <p>For instance, when searching for {@code \"quick fox\"}, it is expected that\n* the difference between the positions of {@code fox} and {@code quick} is 1.\n* So {@code \"a quick brown fox\"} would be at an edit distance of 1 since the\n* difference of the positions of {@code fox} and {@code quick} is 2.\n* Similarly, {@code \"the fox is quick\"} would be at an edit distance of 3\n* since the difference of the positions of {@code fox} and {@code quick} is -2.\n* The slop defines the maximum edit distance for a document to match.\n*\n* <p>More exact matches are scored higher than sloppier matches, thus search\n* results are sorted by exactness.\n*/\n\nThis is different than an unordered span near query which does not take the terms query order into account.\n\nThis is also what is explained in the description of the issue:\n\nunlike with (Multi)PhraseQuery-s, reordering edits are not allowed, so this is a kind of regression.\u00a0\n\n\u00a0\n\n> That said, there surely are potential use cases for the\u00a0inOrder=true\u00a0behavior, which is supported by\u00a0SpanNearQuery\u00a0but not by (Multi)PhraseQuery. Would it be worth opening a new issue to consider introducing the ability to specifically request construction of\u00a0SpanNearQuery\u00a0and/or\u00a0inOrder=true}}behavior? The work that went into building\u00a0{{SpanNearQuery\u00a0for phrases (commit\u00a096e8f0a0afe) is still useful and relevant, even if the result isn't backward-compatible for the case where\u00a0slop > 0.\n\n\u00a0\n\nI think it's something specific that can be handled in a custom QueryBuilder. The API specifically mentions that it builds a phrase so the default implementation should follow the semantic of a PhraseQuery. If we can optimize with a SpanNearQuery instead we need to ensure that it matches the same document than the multi phrase queries approach. That's not the case when slop is greater than 0 so I think we should keep the default behavior as is. You can still override QueryBuilder#analyzeGraphPhrase to apply a different logic on your side if you want.\n\n\u00a0 ",
            "date": "2018-10-23T17:32:18+0000"
        },
        {
            "id": "comment-16661054",
            "author": "Steve Rowe",
            "content": "Thanks for the explanation Jim Ferenczi. ",
            "date": "2018-10-23T17:53:56+0000"
        },
        {
            "id": "comment-16661087",
            "author": "Michael Gibney",
            "content": "> I think we should keep the default behavior as is. You can still override QueryBuilder#analyzeGraphPhrase to apply a different logic on your side if you want.\n\nCertainly agreed the default behavior should be left as-is. I'm content with the flexibility to override, but my suggestion was based on a sense that the desire to support inOrder=true could be a pretty common use case.\n\nThe API does specify \"phrase\", but with a lower-case \"p\", does this necessarily imply that exclusively PhraseQuery semantics should be supported? It's the de facto case that PhraseQuery semantics\u00a0have been supported, so it definitely makes sense for that to continue to be the default \u2013 but I don't think it'd be unreasonable to add configurable stock support for inOrder=true. If such support were to be added,\u00a0QueryBuilder would seem like a logical place to do it, and since the logic necessary to implement is already here (in analyzeGraphPhrase), it should be a trivial addition.\n\nI'm thinking something along the lines of splitting the SpanNearQuery part of analyzeGraphPhrase() (everything after the \"if (phraseSlop > 0)\" shortcircuit) into its own method. Even if split into a protected method, this would allow any override of analyzeGraphPhrase() to more cleanly leverage the existing logic for building SpanNearQuery.\n\nI'm just explaining my thinking here; I guess the decision ultimately depends on how general a use case folks consider inOrder=true to be. ",
            "date": "2018-10-23T18:14:57+0000"
        },
        {
            "id": "comment-16662277",
            "author": "Uwe Schindler",
            "content": "Yeah, but that's a separate issue, IMHO. This issue just fixes the bug that existed for graph synonyms, which were not correct in comparison for queries without synonyms and were violating the documentation and behaviour of Lucene since version 1.0. ",
            "date": "2018-10-24T13:15:03+0000"
        },
        {
            "id": "comment-16662397",
            "author": "Michael Gibney",
            "content": "Thanks Uwe Schindler, and I agree that it would be a separate issue (^\"Would it be worth opening a new issue to consider introducing the ability to specifically request construction of\u00a0SpanNearQuery\u00a0and/or\u00a0inOrder=true\u00a0behavior?\"). I've created LUCENE-8543, so discussion can move there if anyone's interested.\n\nI also created LUCENE-8544, proposing\u00a0the addition of support for (Multi)PhraseQuery phrase semantics in SpanNearQuery. I think it should be achievable, at least in the context of a proposed patch for\u00a0LUCENE-7398. ",
            "date": "2018-10-24T15:05:05+0000"
        }
    ]
}