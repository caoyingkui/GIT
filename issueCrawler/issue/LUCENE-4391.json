{
    "id": "LUCENE-4391",
    "title": "Lucene40Codec methods should be final",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I think all methods but getPostingsFormatForField should be made final so that users can't create a Codec that redefines any of the formats of Lucene40 by subclassing (since the codec name can't be overriden by subclassing, Lucene will fail at loading segments that use such codecs).",
    "attachments": {
        "LUCENE-4391.patch": "https://issues.apache.org/jira/secure/attachment/12545416/LUCENE-4391.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-15T10:07:06+0000",
            "content": "+1, I was thinking aout a similar thing, too! If somebody wants to create another codec, reusing some Lucene40 stuff, he should subclass Codec directly and delegate the needed things to Codec.forName(\"Lucene40\").fooBar()\n\nThe same should be done for Lucene40 PostingsFormat! ",
            "author": "Uwe Schindler",
            "id": "comment-13456361"
        },
        {
            "date": "2012-09-15T12:40:30+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13456383"
        },
        {
            "date": "2012-09-15T12:48:27+0000",
            "content": "Unassigned issues -> 4.1 ",
            "author": "Robert Muir",
            "id": "comment-13456386"
        },
        {
            "date": "2012-09-17T13:45:28+0000",
            "content": "New patch:\n\n\tmakes codecs and postings formats methods final whenever it may lead to broken subclassing,\n\tadds a new ForwardingCodec class that makes it easy to build a codec by reusing some functionality of another codec.\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13457016"
        },
        {
            "date": "2012-09-17T13:48:47+0000",
            "content": "Instead of ForwardingCodec having an abstract delegate(), can we maybe have it look like this:\n\n\nFilterCodec(String name, Codec in) {\n...\n\n\n\n(Suggesting FilterCodec to be consistent with FilterReader, FilterTerms, ....)\n ",
            "author": "Robert Muir",
            "id": "comment-13457019"
        },
        {
            "date": "2012-09-17T14:19:15+0000",
            "content": "The reason I used a delegate() method is that setting the delegate in the constructor seems to generate cyclic dependencies when used in combination with Codec.forName. (For example, if I use super(\"Appending\", Codec.forName(\"Lucene40\")); in AppendingCodec's constructor, I get a:\n\n[junit4:junit4]    > Throwable #1: java.util.ServiceConfigurationError: Cannot instantiate SPI class: org.apache.lucene.codecs.appending.AppendingCodec\n[junit4:junit4]    > \tat org.apache.lucene.util.NamedSPILoader.reload(NamedSPILoader.java:72)\n[junit4:junit4]    > \tat org.apache.lucene.util.NamedSPILoader.<init>(NamedSPILoader.java:42)\n[junit4:junit4]    > \tat org.apache.lucene.util.NamedSPILoader.<init>(NamedSPILoader.java:37)\n[junit4:junit4]    > \tat org.apache.lucene.codecs.Codec.<clinit>(Codec.java:39)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleSetupAndRestoreClassEnv.before(TestRuleSetupAndRestoreClassEnv.java:133)\n[junit4:junit4]    > \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:44)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n[junit4:junit4]    > \tat java.lang.Thread.run(Thread.java:722)\n[junit4:junit4]    > Caused by: java.lang.NullPointerException\n[junit4:junit4]    > \tat org.apache.lucene.codecs.Codec.forName(Codec.java:89)\n[junit4:junit4]    > \tat org.apache.lucene.codecs.appending.AppendingCodec.<init>(AppendingCodec.java:35)\n[junit4:junit4]    > \tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n[junit4:junit4]    > \tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:57)\n[junit4:junit4]    > \tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n[junit4:junit4]    > \tat java.lang.reflect.Constructor.newInstance(Constructor.java:525)\n[junit4:junit4]    > \tat java.lang.Class.newInstance0(Class.java:372)\n[junit4:junit4]    > \tat java.lang.Class.newInstance(Class.java:325)\n[junit4:junit4]    > \tat org.apache.lucene.util.NamedSPILoader.reload(NamedSPILoader.java:62)\n[junit4:junit4]    > \t... 17 more\n\n\n)\n\nSo I thought it would be less error-prone to let users specify the delegate through an abstract method? ",
            "author": "Adrien Grand",
            "id": "comment-13457040"
        },
        {
            "date": "2012-09-17T17:16:14+0000",
            "content": "Same patch, but with ForwardingCodec renamed as FilterCodec. I however didn't change the way it gets the delegate codec because of the issue mentioned above. ",
            "author": "Adrien Grand",
            "id": "comment-13457163"
        },
        {
            "date": "2012-09-18T16:10:54+0000",
            "content": "Just committed (r1387222 on trunk and r1387229 on branch 4.x). ",
            "author": "Adrien Grand",
            "id": "comment-13457904"
        },
        {
            "date": "2012-09-27T13:17:19+0000",
            "content": "I really don't like the delegate() solution ... every method calls this, which in turn calls Codec.forName(). I have a solution and a simple patch to this. I'll open a separate issue as it's focused just on FilterCodec. ",
            "author": "Shai Erera",
            "id": "comment-13464704"
        },
        {
            "date": "2013-03-22T16:36:52+0000",
            "content": "[branch_4x commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1387229\n\nLUCENE-4391: Make Lucene40Codec's methods final (merged from r1387222).\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13610811"
        },
        {
            "date": "2013-05-10T10:34:26+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654219"
        }
    ]
}