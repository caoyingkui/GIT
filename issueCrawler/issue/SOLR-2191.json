{
    "id": "SOLR-2191",
    "title": "Change SolrException cstrs that take Throwable to default to alreadyLogged=false",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Because of misuse, many exceptions are now not logged at all - can be painful when doing dev. I think we should flip this setting and work at removing any double logging - losing logging is worse (and it almost looks like we lose more logging than we would get in double logging) - and bad solrexception/logging patterns are proliferating.",
    "attachments": {
        "SOLR-2191.patch": "https://issues.apache.org/jira/secure/attachment/12457945/SOLR-2191.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-12924423",
            "date": "2010-10-25T01:58:54+0000",
            "content": "patch that enables the logging of a whole slew of exceptions "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12924452",
            "date": "2010-10-25T06:16:34+0000",
            "content": "See also the comments in SOLR-2124 where the funkiness of logOnce is causing a real problem with the Ping handler. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13026714",
            "date": "2011-04-28T21:50:59+0000",
            "content": "Yes, lets do this!  I was just about to log a bug when I found it's already been reported.  I had some stupid error in my solr config and it never got logged. Because of the error, the core never got registered into the container. And then when I went to do any queries, Solr kept telling me I didn't specify a core name when I never had to before (using the default). I was in the twilight zone for a while.\n\nMark, you're a committer yet you supplied a patch.  Why didn't you simply commit it?  I heard on the dev list recently that Solr is supposedly CTR (commit then review), yet we clearly act here as RTC.  So even if RTC is it, wouldn't there be some threshold to let simple things like this through without a review? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13026794",
            "date": "2011-04-29T00:34:43+0000",
            "content": "Why didn't you simply commit it? I heard on the dev list recently that Solr is supposedly CTR (commit then review), yet we clearly act here as RTC. \n\nDepends really - on the change and on the committer. We like to keep trunk extra shiny, and I think our practice is good myself. But it's up to each committer.\n\nSo even if RTC is it, wouldn't there be some threshold to let simple things like this through without a review?\n\nYes - and many small things are simply committed. Likely when I ran into this, I was doing other things - and I made a quick patch, but not something I was willing to stake my name on as a commit. I like to do a thorough review first. And then this just fell off my radar. Sometimes you are just not sure of all of the ramifications of your change - a lot of times this is a mini side track while I'm doing something else, and so it's nice to just toss up a patch and get feedback from the likes of Hossman and others before just cowboying on trunk. Again though - each situation is handled by each committer based on their level of comfort, and the general culture of the community.\n\nYeah, this bug is annoying - I'm happy to look at this again soon - I happen to be unusually busy at this time, but I'll certainly try to get this in by this weekend. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13026798",
            "date": "2011-04-29T00:45:42+0000",
            "content": "Also keep in mind that Review-Then-Commit at Apache means you need consensus and 3 votes before committing I believe:\n\nSee\n\nhttp://www.apache.org/foundation/glossary.html\n\n\nConsensus Approval\n'Consensus approval' refers to a vote (sense 1) which has completed with at least three binding +1 votes and no vetos. Compare .\n\nReview-Then-Commit\n(Often referenced as 'RTC' or 'R-T-C'.) Commit policy which requires that all changes receive consensus approval in order to be committed. Compare , and see the description of the voting process. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13026799",
            "date": "2011-04-29T00:45:43+0000",
            "content": "Also keep in mind that Review-Then-Commit at Apache means you need consensus and 3 votes before committing I believe:\n\nSee\n\nhttp://www.apache.org/foundation/glossary.html\n\n\nConsensus Approval\n'Consensus approval' refers to a vote (sense 1) which has completed with at least three binding +1 votes and no vetos. Compare .\n\nReview-Then-Commit\n(Often referenced as 'RTC' or 'R-T-C'.) Commit policy which requires that all changes receive consensus approval in order to be committed. Compare , and see the description of the voting process. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13026830",
            "date": "2011-04-29T03:48:13+0000",
            "content": "Thanks for clarification on Review Then Commit (RTC); I verified through ASF's documentation that indeed three votes is necessary.  Wow, it'd take forever to get things done that way; it seems impractical for anything but perhaps security related code (e.g. crypto). I didn't see any info exceptions for \"minor\" changes (e.g. adding documentation, code formatting). I'm glad we don't do that officially.\n\nI'm about to take the conversation further on the dev list RE jira issues falling through the cracks... "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13027915",
            "date": "2011-05-02T23:21:15+0000",
            "content": "Is anyone else interested in entertaining the notion that the \"alreadyLogged\" concept is more trouble then it's worth and we should just rip the whole damn thing out? (deprecate logOnce, etc...)\n\nis there such a thing as logging an exception \"too much\"? and if there is, couldn't we fix those code paths to be less chatty?  "
        },
        {
            "author": "David Smiley",
            "id": "comment-13028240",
            "date": "2011-05-03T14:09:18+0000",
            "content": "Ehh... I kind of like the notion but wether it is kept or not, I think a general error/exception strategy needs to be devised.  \n\nIn code I write, I tend to almost never log exceptions; I let them get to the highest possible point to ensure they are logged there once, which is usually one place.  Beforehand I might catch an exception to do a log.error() to provide some context and then rethrow the exception.  I also wrap with RuntimeExceptions.\n\nAn alternative is to log exceptions early (with contextual error message), and then rethrow but don't log it higher up (e.g. earlier up) the stack. But how can that early point know the exception has been handled?  It can't generically know making your suggestion of \"fix those code paths to be less chatty\" problematic. Perhaps our code will always assume that we logged an exception before wrapping it in SolrException right before we throw them. I think that's a reasonable policy and wouldn't require an alreadyLogged flag. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13028246",
            "date": "2011-05-03T14:25:36+0000",
            "content": "In code I write, I tend to almost never log exceptions; I let them get to the highest possible point to ensure they are logged there once, which is usually one place. Beforehand I might catch an exception to do a log.error() to provide some context and then rethrow the exception.\n\nRight.  And logging immediately can be problematic since one may not know if it's really an error that should be logged since Exceptions can sometimes be handled (dismax is one example).\n\nAnyway, certainly a +1 from me for changing the default of alreadyLogged and improving the strategy in general. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13030742",
            "date": "2011-05-09T13:57:32+0000",
            "content": "I have not forgot about this - just has gotten bigger with recent comments - perhaps we commit this first, then address the larger issue? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043737",
            "date": "2011-06-03T16:46:49+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106435",
            "date": "2011-09-16T14:51:05+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Sami Siren",
            "id": "comment-13181193",
            "date": "2012-01-06T08:09:38+0000",
            "content": "I also ran into this problem too (SOLR-3006).\n\nb1. I have not forgot about this - just has gotten bigger with recent comments - perhaps we commit this first, then address the larger issue?\n\nSounds like a good start to me. The current situation where log messages can easily get lost is really annoying.\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13181362",
            "date": "2012-01-06T14:52:12+0000",
            "content": "Yes please commit this for pete's sake!  This is one of those JIRA issues that has fallen through the cracks and nearly forgotten. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13184299",
            "date": "2012-01-11T19:22:08+0000",
            "content": "The issue needs to be updated. I think the right approach is to remove logOnce.  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13184417",
            "date": "2012-01-11T21:44:31+0000",
            "content": "\nWhat does \"remove logOnce\" mean in this case? Remove the method, sure. But note that the log(...) methods at least set the 'logged' value. Should that variable be removed too in your opinion?\n\nI think I favor just removing logOnce, and expanding the use of 'logged' in the log(...) methods to return if it's already set at the top. I really dislike the idea of trying to keep track of where an exception is really reported, there are just too many code paths.....\n\nIf people want to let the upper layers handle reporting, they can wrap the exception in a SolrException and re-throw, optionally logging the error at that point. If they don't wrap the exception and do log it, it may be re-logged later but that's a personal problem that should be dealt with on a case-by-case basis.\n\nShould anything be done with 3.6, i.e. deprecate whatever we decide so we can nuke it in 5.x?\n\nI may well commit this and open up another JIRA for further work. SOLR-3022 deals with this too. I'd like to consolidate all this by this weekend, any others out there? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13184444",
            "date": "2012-01-11T22:12:02+0000",
            "content": "personal problem that should be dealt with on a case-by-case basis.\n\nI think it's more of a project level problem - we have to decide how we want to handle logging and stick with it I think. It still seems the most sensible thing is to drop this logOnce concept entirely - logging should be handled at the fringes once the exception bubbles up.\n\nShould that variable be removed too in your opinion?\n\nYup - I think logged and logOnce should die die die. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13184657",
            "date": "2012-01-12T01:48:01+0000",
            "content": "I think it's more of a project level problem - we have to decide how we want to handle logging and stick with it I think.\n\nThere's not much of a choice is there?  Logging early isn't always possible since there is a lack of context (for logging and for deciding if it should be logged).  Logging last means your missing context for extra debugging info.  I guess that leaves us living with logging the same exception multiple times (since we don't know if it's already been logged). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13184684",
            "date": "2012-01-12T02:55:36+0000",
            "content": "Logging last means your missing context for extra debugging info.\n\nWhy? You just include the extra context in the exception that you throw.\n\nI guess that leaves us living with logging the same exception multiple times\n\nI don't see why - I still think they should bubble up and get logged at the top. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13185010",
            "date": "2012-01-12T15:07:54+0000",
            "content": "I agree with Mark.  In code I write, I am always sure to tag on the old exception to a new one, assuming I need to throw a different exception, and I almost never log exceptions.  I let the top layers handle that.  Code that does otherwise has redundant logs which I find annoying. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13185019",
            "date": "2012-01-12T15:40:05+0000",
            "content": "Why? You just include the extra context in the exception that you throw.\n\nI vaguely recall having issues (way in the past) with big multi-line exception messages.\nGuess I'll have to wait and see how it works in practice. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13185023",
            "date": "2012-01-12T15:44:33+0000",
            "content": "OK, this really breaks out into two parts. I've fixed the SolrException part in both 3.6 and trunk. I'll leave this part to Mark (he agrees) as far as dealing with ZooKeeper messages. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13185025",
            "date": "2012-01-12T15:45:10+0000",
            "content": "back to you for the ZK stuff. SolrException changes are committed. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13185074",
            "date": "2012-01-12T17:10:28+0000",
            "content": "One last comment. Let's move further discussion of this over to SOLR-3032 where I'll be putting up a first-cut today or tomorrow (hopefully). "
        },
        {
            "author": "James Dyer",
            "id": "comment-13204672",
            "date": "2012-02-09T17:35:45+0000",
            "content": "With SOLR-3022 and SOLR-3032 complete, should this one be closed also? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13204686",
            "date": "2012-02-09T17:45:54+0000",
            "content": "Sure, makes sense to me. "
        }
    ]
}