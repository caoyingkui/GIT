{
    "id": "SOLR-379",
    "title": "KStem Token Filter",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "A Lucene / Solr implementation of the KStem stemmer.  Full credit goes to Harry Wagner for adapting the Lucene version found here:\nhttp://ciir.cs.umass.edu/cgi-bin/downloads/downloads.cgi\n\nBackground discussion to this stemmer (including licensing issues) can be found in this thread:\nhttp://www.nabble.com/Embedded-about-50--faster-for-indexing-tf4325720.html#a12376295\n\nI've made some minor changes to KStemFilterFactory so that it compiles cleanly against trunk:\n1) removed some unnecessary imports\n2) changed the init() method parameters introduced by SOLR-215\n3) moved KStemFilterFactory into package org.apache.solr.analysis\n\nOnce compiled and included in your Solr war (or as a jar in your lib directory, the KStem filter can be used in your schema very easily:\n\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\"/>\n        <filter class=\"solr.StandardFilterFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.KStemFilterFactory\" cacheSize=\"20000\"/>\n        <filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\n      </analyzer>",
    "attachments": {
        "KStemSolr.zip": "https://issues.apache.org/jira/secure/attachment/12367736/KStemSolr.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Pieter Berkel",
            "id": "comment-12534762",
            "date": "2007-10-15T07:29:03+0000",
            "content": "I've attached a zip file containing the KStem source rather than a patch as I'm not sure how this code will be eventually integrated with Solr.\n\nSince I did not write this and am unsure of the legal status of this code, I have not granted ASF license, although recent discussion suggests the license included with KStem is compatible with the Apache license.\n\nHopefully we'll be able to resolve these above issues fairly quickly. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12597185",
            "date": "2008-05-15T16:38:17+0000",
            "content": "It would be great to have this available in Solr.  Because of Kstem's incompatible library, I don't know how we can handle this.  Incompatible license really just means we cannot distribute the KStem code (and cannot have it in the Lucene/Solr svn repository).  Usually when incompatible licensing is a problem we say \"modify the build script to download the needed library on demand if it's not present locally\".  This is what some of the Lucene contrib components do, for example.\n\nHowever, looking at your ZIP file I see:\n\n  rw-rr-      2836  15-Oct-2007  17:16:46  src/java/org/apache/solr/analysis/KStemFilterFactory.java\n  rw-rr-     42222  15-Oct-2007  16:28:08  src/java/org/apache/lucene/analysis/KStemmer.java\n  rw-rr-      4501  15-Oct-2007  17:08:38  src/java/org/apache/lucene/analysis/KStemFilter.java\n  rw-rr-     34259  15-Oct-2007  16:28:24  src/java/org/apache/lucene/analysis/KStemData8.java\n  rw-rr-     39918  15-Oct-2007  16:28:28  src/java/org/apache/lucene/analysis/KStemData7.java\n  rw-rr-     41412  15-Oct-2007  16:28:34  src/java/org/apache/lucene/analysis/KStemData6.java\n  rw-rr-     40457  15-Oct-2007  16:28:40  src/java/org/apache/lucene/analysis/KStemData5.java\n  rw-rr-     40823  15-Oct-2007  16:28:44  src/java/org/apache/lucene/analysis/KStemData4.java\n  rw-rr-     39808  15-Oct-2007  16:28:50  src/java/org/apache/lucene/analysis/KStemData3.java\n  rw-rr-     42696  15-Oct-2007  16:29:00  src/java/org/apache/lucene/analysis/KStemData2.java\n  rw-rr-     40020  15-Oct-2007  16:29:14  src/java/org/apache/lucene/analysis/KStemData1.java\n\nBut this is really just a duplicate of what's in http://ciir.cs.umass.edu/downloads/files/KStem.jar, plus the Solr-specific KStemFilterFactory.java.\n\nSo, could we simply download KStem.jar on demand?  And is KStemFilterFactory.java really copyright CIIR?  If we can change that to ASL then we can include it in the repo and with the modified build that downloads KStem.jar before compiling this class would compile. "
        },
        {
            "author": "Pieter Berkel",
            "id": "comment-12605169",
            "date": "2008-06-15T23:43:49+0000",
            "content": "As far as I'm aware KStemFilterFactory.java was written by Harry Wagner so if he's happy to grant ASL it should be possible to include that in the repo.  Everything in \"/src/java/org/apache/lucene/analysis\" has been copied from KStem.jar which was originally downloaded from CIIR, so if that can possibly be loaded on demand, then it should be fairly straightforward to include support for this stemmer in Solr. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12934562",
            "date": "2010-11-22T19:10:36+0000",
            "content": "Rather then update this for the current Filter/FilterFactor for token reuse, i think it makes more sense to just use the PhoneticFilter with an encoder:\n\n\n\nimport org.apache.commons.codec.EncoderException;\nimport org.apache.commons.codec.StringEncoder;\n\n\npublic class KStemEncoder implements StringEncoder\n{\n  final KStemmer stemmer;\n  \n  public KStemEncoder( KStemmer stemmer )\n  {\n    this.stemmer = stemmer;\n  }\n\n  @Override\n  public String encode(String string) throws EncoderException {\n    return stemmer.stem( string );\n  }\n\n  @Override\n  public Object encode(Object v) throws EncoderException {\n    return stemmer.stem( (String)v );\n  }\n}\n\n\n\nand\n\n\npublic class KStemFilterFactory extends BaseTokenFilterFactory \n{\n  private int cacheSize = 20000;\n  private boolean inject = false;\n  \n  public void init(Map<String,String> args) {\n    super.init( args );\n    String v = args.get(\"cacheSize\");\n    if (v != null) {\n      cacheSize = Integer.parseInt(v);\n    }\n    v = args.get(\"inject\");\n    if (v != null) {\n      inject = Boolean.parseBoolean( v );\n    }\n  }\n  \n  public TokenStream create(TokenStream input) {\n    KStemEncoder encoder = new KStemEncoder( new KStemmer( cacheSize ) );\n    return new PhoneticFilter(input, encoder, inject);\n  }\n}\n\n "
        }
    ]
}