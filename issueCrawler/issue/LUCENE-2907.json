{
    "id": "LUCENE-2907",
    "title": "automaton termsenum bug when running with multithreaded search",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "This one popped in hudson (with a test that runs the same query against fieldcache, and with a filter rewrite, and compares results)\n\nHowever, its actually worse and unrelated to the fieldcache: you can set both to filter rewrite and it will still fail.",
    "attachments": {
        "seeks_diff.txt": "https://issues.apache.org/jira/secure/attachment/12470376/seeks_diff.txt",
        "LUCENE-2907_repro.patch": "https://issues.apache.org/jira/secure/attachment/12470379/LUCENE-2907_repro.patch",
        "LUCENE-2907.patch": "https://issues.apache.org/jira/secure/attachment/12470396/LUCENE-2907.patch",
        "incorrect_seeks.txt": "https://issues.apache.org/jira/secure/attachment/12470378/incorrect_seeks.txt",
        "correct_seeks.txt": "https://issues.apache.org/jira/secure/attachment/12470377/correct_seeks.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-02-06T00:00:04+0000",
            "content": "by printing seeks its easy to see, its not related to automaton.\n\ni created files per-segment printing the seeks (and what the terms enum hands back)... here's the diff\n\nso when it fails, automaton seeks to seek:[7f 2f e6 8c b0 ce 8d d2 8b cb ae f4 84 b2 a2] and the termsenum skips over a large portion of the terms and returns the wrong result. ",
            "author": "Robert Muir",
            "id": "comment-12991087"
        },
        {
            "date": "2011-02-06T00:03:23+0000",
            "content": "here are the two files that I diffed, but note, this isnt the only segment that had wrong seeks... its just an example ",
            "author": "Robert Muir",
            "id": "comment-12991088"
        },
        {
            "date": "2011-02-06T00:07:27+0000",
            "content": "here's my patch to make the test more easily to reproduce (it simply runs the exact same query, against the same index over and over again until it pops!)\n\nAlso it logs the seeks to the files, because otherwise its too much to try to look at.\n\njust use the original commandline to reproduce:\n\n \nant test \n-Dtestcase=TestFieldCacheRewriteMethod -Dtestmethod=testRegexps\n-Dtests.seed=4072768173808710270:-6218549422363059201\n-Dtests.multiplier=3\n\n ",
            "author": "Robert Muir",
            "id": "comment-12991089"
        },
        {
            "date": "2011-02-06T09:25:06+0000",
            "content": "Have you found out what happens or where a thread-safety issue could be? Each thread and each query should have its own TermsEnum! Is there maybe a cache on codec-level involved? At least there are no multiple-instance (static) caches in the  search-side of the TermsEnums, so there must be a multi-threading issue in the underlying SegmentReaders.\n\nTo conclude: At least Robert found out that FieldCacheTermsEnum always works correct? Is this true? The information on this issue is too small, there seems to be lots of IRC/GTalk communication in parallel. ",
            "author": "Uwe Schindler",
            "id": "comment-12991130"
        },
        {
            "date": "2011-02-06T09:43:43+0000",
            "content": "Have you found out what happens or where a thread-safety issue could be?\n\nYes, i found the bug... unfortunately it is actually my automaton problem \nI will create a nice patch today.\n\nThe information on this issue is too small, there seems to be lots of IRC/GTalk communication in parallel.\n\nwhat do you mean? mike was working a long time on the bug, but quickly had to stop working on it, so he emailed me all of his state. I took over from there for a while, and i opened this issue with my debugging... though I didn't have much time to work on it yesterday (only like 1 hour), because I already had plans.\n\nI tried to be completely open and dump all of my state/debugging information/brainstorming on this JIRA issue, but it only resulted in me reporting misleading and confusing information... so I think the information on this issue is actually too much? ",
            "author": "Robert Muir",
            "id": "comment-12991133"
        },
        {
            "date": "2011-02-06T10:09:49+0000",
            "content": "A bug in automaton that only hapoens in multi-threaded? So its the cache there? ",
            "author": "Uwe Schindler",
            "id": "comment-12991137"
        },
        {
            "date": "2011-02-06T10:16:19+0000",
            "content": "in combination with other things. in my opinion the problem is the cache in getNumberedStates.\n\nBut the real solution (in my opinion) is to clean up all this crap so the termsenum only\ntakes a completely immutable view of what it needs and for the Query to compile once in its ctor,\nand remove any stupid caching. \n\nSo, this is what I am working on now. ",
            "author": "Robert Muir",
            "id": "comment-12991140"
        },
        {
            "date": "2011-02-06T10:22:41+0000",
            "content": "Yes the numbered states cache was always bugging me. But at least it is now synchronized (it was not even that at the beginning). I think the problem may be that the parallel queries doing different segments with different numbered states at the same time.\n\n+1 to remove the cache and calculate on ctor, then its really stateless! ",
            "author": "Uwe Schindler",
            "id": "comment-12991141"
        },
        {
            "date": "2011-02-06T13:02:15+0000",
            "content": "editing description so its not confusing, sorry  ",
            "author": "Robert Muir",
            "id": "comment-12991149"
        },
        {
            "date": "2011-02-06T13:05:32+0000",
            "content": "attached is a patch. I removed all the transient/synchronized stuff from the query.\n\nInstead: AutomatonTermsEnum only takes an immutable, compiled form of the automaton (essentially a sorted transitions array).\n\nthe query computes this compiled form (or any other simpler rewritten form) in its ctor. ",
            "author": "Robert Muir",
            "id": "comment-12991150"
        },
        {
            "date": "2011-02-06T17:02:29+0000",
            "content": "here's the same patch, but cleaned up a bit (e.g. making some things private, final, etc) ",
            "author": "Robert Muir",
            "id": "comment-12991175"
        },
        {
            "date": "2011-02-06T17:15:03+0000",
            "content": "patch looks good - just being super picky: you don't need all the this.bla in CompiledAutomaton \n\nI am not sure if CompiledAutomation is a good name since it is not really an automaton is it?\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12991178"
        },
        {
            "date": "2011-02-06T17:20:41+0000",
            "content": "I am not sure if CompiledAutomation is a good name since it is not really an automaton is it?\n\nit is a compiled form of the automaton... and it is a dfa, mathematically.\n\nAt the end of the day this CompiledAutomaton is an internal api, we can change its name at any time. ",
            "author": "Robert Muir",
            "id": "comment-12991180"
        },
        {
            "date": "2011-02-06T18:17:34+0000",
            "content": "Committed revision 1067720. ",
            "author": "Robert Muir",
            "id": "comment-12991194"
        },
        {
            "date": "2011-02-06T18:43:55+0000",
            "content": "Thanks, really nice now  ",
            "author": "Uwe Schindler",
            "id": "comment-12991198"
        }
    ]
}