{
    "id": "LUCENE-2316",
    "title": "Define clear semantics for Directory.fileLength",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "On this thread: http://mail-archives.apache.org/mod_mbox/lucene-java-dev/201003.mbox/%3C126142c1003121525v24499625u1589bbef4c0792e7@mail.gmail.com%3E it was mentioned that Directory's fileLength behavior is not consistent between Directory implementations if the given file name does not exist. FSDirectory returns a 0 length while RAMDirectory throws FNFE.\n\nThe problem is that the semantics of fileLength() are not defined. As proposed in the thread, we'll define the following semantics:\n\n\n\tReturns the length of the file denoted by <code>name</code> if the file exists. The return value may be anything between 0 and Long.MAX_VALUE.\n\tThrows FileNotFoundException if the file does not exist. Note that you can call dir.fileExists(name) if you are not sure whether the file exists or not.\n\n\n\nFor backwards we'll create a new method w/ clear semantics. Something like:\n\n\n/**\n * @deprecated the method will become abstract when #fileLength(name) has been removed.\n */\npublic long getFileLength(String name) throws IOException {\n  long len = fileLength(name);\n  if (len == 0 && !fileExists(name)) {\n    throw new FileNotFoundException(name);\n  }\n  return len;\n}\n\n\n\nThe first line just calls the current impl. If it throws exception for a non-existing file, we're ok. The second line verifies whether a 0 length is for an existing file or not and throws an exception appropriately.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--LUCENE-2316.patch": "https://issues.apache.org/jira/secure/attachment/12441620/ASF.LICENSE.NOT.GRANTED--LUCENE-2316.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-03-13T14:12:04+0000",
            "content": "I am not sure we should mark getFileLength deprecated though, in order to alert users that it will become abstract. Can we instead just note that in its Javadocs? It will be awkward if we deprecate both fileLength and getFileLength . ",
            "author": "Shai Erera",
            "id": "comment-12844882"
        },
        {
            "date": "2010-03-13T15:49:24+0000",
            "content": "Is it really necessary to obtain the length of a file from the Directory? Lucy\ndoesn't implement that functionality, and we haven't missed it \u2013 we're able\nto get away with using the length() method on InStream and OutStream. \n\nI see that IndexInput and IndexOutput already have length() methods. Can you\nsimply eliminate all uses of Directory.fileLength() within core and deprecate\nit without introducing a new method? ",
            "author": "Marvin Humphrey",
            "id": "comment-12844906"
        },
        {
            "date": "2010-04-11T15:01:26+0000",
            "content": "I don't think Lucene relies on file length; we do use it for diagnostics/logging (eg IW's infoStream).\n\nHmm I guess we do use it for merging purposes (LogByteSizeMergePolicy), where we try to merge roughly similarly sized (by net size in bytes) segments.\n\nI would rather not increase our reliance on it (eg LUCENE-2373 proposes to do so) \u2013 it's a piece of metadata that is sometimes (eg over NFS) less reliable than file contents.  The less we rely on from the filesystem the more robust/portable Lucene will be...\n\nNet/net I think we should keep the method, but restrict our use of it.\n\nI do think we should move to throwing FNFE if the file does not exist... though I think a break in back compat may be OK, here?  (Vs do the new method/deprecated/abstract approach). ",
            "author": "Michael McCandless",
            "id": "comment-12855736"
        },
        {
            "date": "2010-04-11T22:38:21+0000",
            "content": "I like Marvin's suggestion - deprecate/delete Dir.fileLength, and rely on InStream.length if needed (I believe if we actually open the file for reading, NFS gives us the correct length?).\nIf not - throw FNFE, and go for backcompat break instead of new/deprecate cycle. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12855787"
        },
        {
            "date": "2010-04-12T07:28:25+0000",
            "content": "Well ... dir.fileLength is also used by SegmentInfos.sizeInBytes to compute the size of all the files in the Directory. If we remove fileLength, then SI will need to call dir.openInput.length() and the close it? Seems like a lot of work to me, for just obtaining the length of the file. So I agree that if you have an IndexInput at hand, you should call its length() method rather than Dir.fileLength. But otherwise, if you just have a name at hand, a dir.fileLength is convenient?\n\nI'm also ok w/ the bw break rather than going through the new/deprecate cycle. ",
            "author": "Shai Erera",
            "id": "comment-12855873"
        },
        {
            "date": "2010-04-12T10:34:32+0000",
            "content": "I'm also ok w/ the bw break rather than going through the new/deprecate cycle.\n\n+1\n\nI think we should keep both Dir.fileLength and II.fileLength. ",
            "author": "Michael McCandless",
            "id": "comment-12855916"
        },
        {
            "date": "2010-04-13T16:15:18+0000",
            "content": "Patch clarifies the contract, fixes the directories to adhere to it and adds a CHANGES under backwards section. All tests pass. ",
            "author": "Shai Erera",
            "id": "comment-12856466"
        },
        {
            "date": "2010-04-13T18:16:00+0000",
            "content": "That's a fairly trivial patch, therefore I plan to commit tomorrow. Just FYI ",
            "author": "Shai Erera",
            "id": "comment-12856531"
        },
        {
            "date": "2010-04-14T08:29:50+0000",
            "content": "Committed revision 933879. ",
            "author": "Shai Erera",
            "id": "comment-12856800"
        },
        {
            "date": "2010-05-05T20:17:19+0000",
            "content": "backport to 3.1 ",
            "author": "Shai Erera",
            "id": "comment-12864485"
        },
        {
            "date": "2010-05-05T20:25:17+0000",
            "content": "Committed revision 941468. ",
            "author": "Shai Erera",
            "id": "comment-12864491"
        },
        {
            "date": "2011-03-30T15:49:53+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013291"
        }
    ]
}