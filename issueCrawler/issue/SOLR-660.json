{
    "id": "SOLR-660",
    "title": "Simplify UpdateRequestProcessor API",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "SOLR-269 introduced UpdateRequestProcessor.  The existing API/configuration is too complicated and should be simplified before release 1.3",
    "attachments": {
        "SOLR-660-update-processor.patch": "https://issues.apache.org/jira/secure/attachment/12386913/SOLR-660-update-processor.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12617016",
            "date": "2008-07-25T19:17:38+0000",
            "content": "patch that removes the no-op factory and forces eveything to be a chain.  Now the configuration looks like this:\n\n<updateRequestProcessorChain name=\"name\" default=\"true\">\n  <processor class=\"solr.CustomUpdateRequestProcessorFactory\" >\n   <lst name=\"name\">\n     <str name=\"n1\">x1</str>\n     <str name=\"n2\">x2</str>\n   </lst>\n  </processor>\n  <processor class=\"solr.RunUpdateProcessorFactory\" />\n  <processor class=\"solr.LogUpdateProcessorFactory\" />\n</updateRequestProcessorChain>\n\n\n\nThe big changes are:\n\n\tprocessor factories are now loaded with NamedListInitalizedPluginLoader \u2013 it is no longer custon Node parsing.\n\tthe Factories no longer have direct access to core.  if they need it, they can implement SorlCoreAware\n\tmoves all config parsing out of the processor classes.\n\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12617027",
            "date": "2008-07-25T19:47:39+0000",
            "content": "Thanks for opening this issue Ryan!\n\nThe configuration looks much better and going with the NamedListInitializedPlugin and SolrCoreAware makes it more consistent with the RequestHandler and SearchComponent code base. Let me see how I can help  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12617106",
            "date": "2008-07-26T00:27:41+0000",
            "content": "just committed this and updated the text on:\nhttp://wiki.apache.org/solr/UpdateRequestProcessor\n\nShalin, if you could add more documentation / comments from your experience using it, that would be great. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12617118",
            "date": "2008-07-26T02:57:15+0000",
            "content": "This looks very good, Ryan .The configuration is obvious as what it is doing though I'm still not convinced of the need for a factory (Eitherway it does not matter). I guess it would be nice to make the UpdateRequestProcessorFactory implements SolrCoreAware. Any initialization with the core can be done here.\nI have changed the wiki too\n\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12617119",
            "date": "2008-07-26T03:14:33+0000",
            "content": "I guess it would be nice to make the UpdateRequestProcessorFactory\n\nany UpdateRequestProcessorFactory that needs access to SolrCore just needs to implement SolrCoreAware, then it will be initialized via the standard plugin stuff.  Our base UpdateRequestProcessorFactory should not need SolrCore.\n\nIt does not need to be a factory, but the chaining and state implementations (for non-trivial processors) is much more straight forward. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12617235",
            "date": "2008-07-27T03:40:43+0000",
            "content": "I noticed one more inconsistency. Factories are provided to control the creation of instances by the API consumers. In this design you almost force the implementers to create a new instance if the user needs to access the solrQueryRequest, solrQueryResponse parameters. As a design, constructing the UpdateRequestProcessor instance should not need these objects. By making available a runtime objects in the construction time only , the API disallow the user from having a singleton. The optimal design is to move all the runtime objects to method arguments "
        }
    ]
}