{
    "id": "SOLR-6547",
    "title": "CloudSolrServer query getqtime Exception",
    "details": {
        "affect_versions": "4.10,                                            5.3",
        "status": "Closed",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "components": [
            "SolrJ"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We are using CloudSolrServer to query ,but solrj throw Exception ;\njava.lang.ClassCastException: java.lang.Long cannot be cast to java.lang.Integer \tat org.apache.solr.client.solrj.response.SolrResponseBase.getQTime(SolrResponseBase.java:76)",
    "attachments": {
        "SOLR-6547.patch": "https://issues.apache.org/jira/secure/attachment/12681752/SOLR-6547.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Anurag Sharma",
            "id": "comment-14174699",
            "date": "2014-10-17T03:50:49+0000",
            "content": "Can you mention the exact query it will become easy to investigate/reproduce "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14174776",
            "date": "2014-10-17T06:38:31+0000",
            "content": "i suspect this has something to do with the code in CloudSolrServer.condenseResponse ?\n\nI honestly have no idea what that method is for or what it's doing, but a quick grep suggests that's the only place in the code base where a \"long\" value is getting assocaited with \"QTime\"\n\n\n\tCloudSolrServer.condenseResponse should be fixed to use an int for QTime\n\tSolrResponseBase.getQTime can (and probably should) be hardended to do something like this instead of just a direct Integer cast...\n\nreturn ((Number) header.get(\"QTime\")).intValue()\n\n\n...that kind of pattern can help protect us in the future if we decide that QTime should be a long\n\n "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14175867",
            "date": "2014-10-18T05:39:46+0000",
            "content": "Hi Hoss,\n\nThanks for your update. \n\nTime is usually returned as long value. Since getQTime returns, int looks like the interest is to return value in seconds and not milliseconds. \n\nI agree with your suggestion to change the return type to either long or use intValue while returning in the current method.\n\nIs there a way I can reproduce the java.lang.ClassCastException mentioned in the description?\nKevin - Any suggestion?\n\nAnurag "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14175888",
            "date": "2014-10-18T06:40:34+0000",
            "content": "There's merit either way.\n\nInteger.MAX_VALUE in milliseconds is a little more than 24 days.  I doubt you would ever run into a query that would actually take that long and still have enough resources to actually finish, so an int has plenty of capacity to handle QTime.  The difference is tiny for a single value, but a long does take up twice as much memory.  If most of the existing code uses an int, I am inclined to stick with that and change the deviating code.\n\nOn the other hand ... everything else related to time in Java is represented as a long, as Anurag Sharma mentioned.  If the value is ever used for calculation with any of those other numbers, it might save a tiny bit of CPU time if Java doesn't have to convert.\n\nSwitching everything to a long is likely to involve quite a bit of effort to locate and change every place that it's used, which is a big part of why I suggest sticking with int.  I don't think we would ever need a long for relative times. "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14175969",
            "date": "2014-10-18T12:04:13+0000",
            "content": "I am not sure of the usage. If there is a use case to calculate the response time then long would be precise to respond the query time in millisecond. With int the millisecond detail is missed. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14176006",
            "date": "2014-10-18T14:05:41+0000",
            "content": "QTime is always in milliseconds, no matter what size the primitive datatype is.  The maximum value of a signed integer is 2147483647.  In seconds, this is about 68 years \u2013 the UNIX epoch is the beginning of 1970, and the 32-bit signed counter will run out in 2038.  In milliseconds, this number is only 24 days. "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14176048",
            "date": "2014-10-18T16:05:02+0000",
            "content": "Based on the above comment we are good to go with Hoss Mann comment to extract the intValue from long:\n\nreturn ((Number) header.get(\"QTime\")).intValue()\n\n\n\nA couple of failing unit tests can help in fixing and creating the patch.  "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14184481",
            "date": "2014-10-26T13:27:54+0000",
            "content": "QTime is saved as long after truncating nano second part of time. This is equivalent to capturing the time in milliseconds. Here is the code snippet of what's happening in the CloudSolrServer. \n\nlong start = System.nanoTime();\n.\n.\nlong end = System.nanoTime();\nRouteResponse rr =  condenseResponse(shardResponses, (long)((end - start)/1000000));\n\n\n\ncondenseResponse function\n\npublic RouteResponse condenseResponse(NamedList response, long timeMillis) {\n  .\n  .\n  cheader.add(\"QTime\", timeMillis);\n  .\n  .\n}\n\n\n\nSince the time in seconds can be captured with Integer, there are two ways to fix the issue:\n\n\tIn CloudSolrServer, truncate the milliseconds part as well and save QTime in Integer. This way getQTime won't throw Long to Integer ClassCastException as the object coming to it already Integer.\n\tIn SolrResponseBase.getQTime function, check the instanceOf Object and get integer from it as shown in the code snippet below\n\n        int qtime = 0;\n        if(obj instanceof Long) {\n        \tqtime = (int)(((Long) obj).longValue()/1000);\n        } else if (obj instanceof Integer) {\n        \tqtime = (Integer)obj;\n        } else if (obj instanceof String) {\n        \tqtime = Integer.parseInt((String) obj);        \t\n        }\n        return qtime;\n\n\n\n\n\nPlease vote for proceeding the best approach. Also like to get opinion on writing unit test in CloudSolrServerTest class. "
        },
        {
            "author": "Anurag Sharma",
            "id": "comment-14213698",
            "date": "2014-11-15T17:11:59+0000",
            "content": "Fix using #2 approach, without UT. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14226153",
            "date": "2014-11-26T13:09:49+0000",
            "content": "no need to check for string etc.\n\nIs it possible to get a testcase for this? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14747011",
            "date": "2015-09-16T07:00:32+0000",
            "content": "Test + fix. I'll commit shortly. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14747027",
            "date": "2015-09-16T07:06:24+0000",
            "content": "Commit 1703335 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1703335 ]\n\nSOLR-6547: ClassCastException in SolrResponseBase.getQTime "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14747061",
            "date": "2015-09-16T07:19:07+0000",
            "content": "Commit 1703343 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1703343 ]\n\nSOLR-6547: ClassCastException in SolrResponseBase.getQTime "
        }
    ]
}