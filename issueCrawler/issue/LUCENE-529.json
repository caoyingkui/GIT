{
    "id": "LUCENE-529",
    "title": "TermInfosReader and other + instance ThreadLocal => transient/odd memory leaks =>  OutOfMemoryException",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.9",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "TermInfosReader uses an instance level ThreadLocal for enumerators.\nThis is a transient/odd memory leak in lucene 1.4.3-1.9 and applies to current JVMs, \nnot just an old JVM issue as described in the finalizer of the 1.9 code.\n\nThere is also an instance level thread local in SegmentReader....which will have the same issue.\nThere may be other uses which also need to be fixed.\n\nI don't understand the intended use for these variables.....however\n\nEach ThreadLocal has its own hashcode used for look up, see the ThreadLocal source code. Each instance of TermInfosReader will be creating an instance of the thread local. All this does is create an instance variable on each thread when it accesses the thread local. Setting it to null in the finaliser will set it to null on one thread, the finalizer thread, where it has never been created.  There is no point to this \n\nI assume there is a good concurrency reason why an instance variable can not be used...\n\nI have not used multi-threaded searching, but I have used a lot of threads each making searchers and searching.\n1.4.3 has a clear memory leak caused by this thread local. This use case above is definitely solved by setting the thread local to null in the close(). This at least has a chance of being on the correct thread  \nI know reusing Searchers would help but that is my choice and I will get to that later .... \n\nNow you wnat to know why....\n\nThread locals are stored in a table of entries. Each entry is weak reference to the key (Here the TermInfosReader instance)  and a simple reference to the thread local value. When the instance is GCed its key becomes null. \nThis is now a stale entry in the table.\nStale entries are cleared up in an ad hoc way and until they are cleared up the value will not be garbage collected.\nUntil the instance is GCed it is a valid key and its presence may cause the table to expand.\nSee the ThreadLocal code.\n\nSo if you have lots of threads, all creating thread locals rapidly, you can get each thread holding a large table of thread locals which all contain many stale entries and preventing some objects from being garbage collected. \nThe limited GC of the thread local table is not enough to save you from running out of memory.  \n\nSummary:\n========\n\n\tremove finalizer()\n\tset the thread local to null in close()\n\tvalues will be available for gc",
    "attachments": {
        "ThreadLocalTest.java": "https://issues.apache.org/jira/secure/attachment/12324501/ThreadLocalTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-03-23T04:32:46+0000",
            "content": "This sounds like something that should be reproducable when written as a JUnit test.  Could you write one and attach it to this?  We could then clearly see the OOM problems and how your changes (patch?) fix it.\n\nAlso, you said you made your changes locally and things work now.  Have you been running your locally-modified code in a serious production environment for days/weeks, and have you observed any side-effects? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12371463"
        },
        {
            "date": "2006-03-23T21:06:14+0000",
            "content": "Attached is a test which you can use to see how ThreadLocals are left around.\nGetting an out of memory exception depends on a number things....it is set up to fail for 64M\n\nNow I understand what is going on, there are a few alternatives:\n\n1) set null on close\n\n\tfine for single thread use\n\tprobably leaves (n-1)*segments*2    things hanging around for n threaded use\n\n\n\n2) Use a weak reference and leave it up to GC to get rid of the referent when it is not being used\n\n3) Manage the things youself by object id and thread id - and clean up on object close() \n\nI would go with option 1) and 2) although it may mean things get GCed before a call to close() when not used.\n\nThe fix I initially suggested is in production, and has been stress tested with a couple of hundred users continually pounding the app,\n but not for multithreaded use of IndexReaders. Each time does a couple of simple searches with no clever reuse of index readers (which is on the todo list)\n\nI do not see how setting the thread local to null on close() has any negative impact. You are not going to use the cached information again??\n\nBefore the fix: 10-100 threads - 1G JVM - OOM in a few hours \nAfter: 10-100 threads 256M JVM -  days with a flat memory footprint\n\nI am not sure why the thread local table is so big for us, but that is not really the issue.\nIt could just be building lots of IndexReaders (with thread locals hanging - probably making 10/instance ) and gc not kicking in so this table grows and can hold a lot of stale entries.  I may get time to investigate further ",
            "author": "Andy Hind",
            "id": "comment-12371558"
        },
        {
            "date": "2006-05-01T22:13:42+0000",
            "content": "I'm experiencing a memory leak in Lucene 1.9.1 that might be related to this problem.  Looks like I'll be creating my own patched version of Lucene in the meantime. ",
            "author": "Nicholaus Shupe",
            "id": "comment-12377225"
        },
        {
            "date": "2006-05-01T22:24:34+0000",
            "content": "As was pointed out in the email threads related to this, the submitters test cases are incorrect.\n\nThis bug shoul dbe closed as invalid. ",
            "author": "robert engels",
            "id": "comment-12377228"
        },
        {
            "date": "2006-05-01T23:20:47+0000",
            "content": "This bug seems to be a dupe of http://issues.apache.org/jira/browse/LUCENE-436, invalid or not. ",
            "author": "Nicholaus Shupe",
            "id": "comment-12377239"
        },
        {
            "date": "2006-05-05T01:07:12+0000",
            "content": "Duplicate of LUCENE-436 ",
            "author": "Otis Gospodnetic",
            "id": "comment-12377860"
        }
    ]
}