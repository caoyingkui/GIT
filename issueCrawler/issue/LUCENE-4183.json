{
    "id": "LUCENE-4183",
    "title": "Simplify CompoundFileDirectory opening in 4.x",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The compiler bug in JDK 8EA let me look at the code again. I opened bug report with simple test case at Oracle, but the code on our side is still too complicated to understand.\n\nThe attached path for 4.x removes the nested try-finaly block and simpliefies success=true handling (which was in fact broken). It uses a more try-with-resources like approach with only one finally block.",
    "attachments": {
        "LUCENE-4183.patch": "https://issues.apache.org/jira/secure/attachment/12534180/LUCENE-4183.patch",
        "LUCENE-4183-priorE-pattern.patch": "https://issues.apache.org/jira/secure/attachment/12534266/LUCENE-4183-priorE-pattern.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-02T06:11:15+0000",
            "content": "right patch, sorry. ",
            "author": "Uwe Schindler",
            "id": "comment-13404900"
        },
        {
            "date": "2012-07-02T09:09:47+0000",
            "content": "\nThe attached path for 4.x removes the nested try-finaly block and simpliefies success=true handling (which was in fact broken). \n\nHow was it broken? Shouldnt TestIndexWriterExceptions fail?\n\nBut i am +1 to the patch, thanks  ",
            "author": "Robert Muir",
            "id": "comment-13404952"
        },
        {
            "date": "2012-07-02T10:38:18+0000",
            "content": "How was it broken? Shouldnt TestIndexWriterExceptions fail?\n\nIt is not completely broken, but the code does not always set success=true when it succeeds. This causes that the wrong Exception is throws/rethrown. The problem is the stacktrace: if close() throws exception in the finally block, it is visible only if success=true otherwise the system supresses it.\n\nUnfortunately, we now have too many patterns for correct try-with-resources like Exception handling, lots of cases suppress exceptions in Java 7 systems completely, others throw the wrongf exception, so user does no longer see the root cause, just because close() itsself throws ex and overrides the cause (happens often with buffered streams or network connections).\n\nWe should deprecate all unneeded methods in IOUtils and for future development only use the official pattern using:\n\n\nIOException priorE=null;\nCloseable a = null, b = null,...;\ntry {\n  a = new Closeable()...\n  ...\n} catch (IOExeception ioe) {\n  priorE = ioe;\n} finally {\n  // this will handle rethrowing the right exception, with supressed exceptions atached as supression cause, and handle null if no error\n  closeWhileHandlingException(priorE, a, b,...);\n}\n\n\n\nExample code see my work on Kumoroji!\n\nThe code using the boolean-only success supresses too much information. I dont want to fix existing code unless behaving incorrectly.\n\nFor Lucene 5.0 I propose to go to Java 7 as minimum requirement and use the syntactic sugar that always does-the-right thing:\n\n\ntry (Closeable a = new Closeable(), b =...) {\n  ...\n}\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13404989"
        },
        {
            "date": "2012-07-02T10:40:43+0000",
            "content": "I will commit the patch soon and also update trunk a little bit (without sophisticated backwards). ",
            "author": "Uwe Schindler",
            "id": "comment-13404991"
        },
        {
            "date": "2012-07-02T10:45:52+0000",
            "content": "btw, the block of code in this issue is the classical example for above pattern! Should I rewrite it? The code is also much shorter than the current if then else stuff in finally. ",
            "author": "Uwe Schindler",
            "id": "comment-13404995"
        },
        {
            "date": "2012-07-02T11:10:14+0000",
            "content": "For comparison, here the most correct pattern (emulated try-with-resources, java7's javac synthetic code looks identical byte-code wise). Unfortunately for this type of method we need the last line until Java 7. javac would otherwise complain about missing return statement (because compiler does not know that it can never be reached).\n\nI have no preference what to commit, comments? ",
            "author": "Uwe Schindler",
            "id": "comment-13405003"
        },
        {
            "date": "2012-07-02T11:36:41+0000",
            "content": "Here again the original patch with the confusing variable names fixed. ",
            "author": "Uwe Schindler",
            "id": "comment-13405007"
        },
        {
            "date": "2012-07-03T08:44:25+0000",
            "content": "Committed the new pattern to 4.x revision: 1356608\nI merged the cleanup to trunk, but without backwards, just the pattern, revision: 1356614 ",
            "author": "Uwe Schindler",
            "id": "comment-13405694"
        }
    ]
}