{
    "id": "LUCENE-8133",
    "title": "Small polygon fails with misleading error:  Convex polygon has a side that is more than 180 degrees",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "modules/spatial3d"
        ],
        "fix_versions": [
            "6.7",
            "7.3",
            "master (8.0)"
        ]
    },
    "description": "Hi [~karl wright],\n\nI am trying to create a polygon that is valid but I am getting an error which is probably incorrect. I think it is a problem with precision.\n\nI will attach a test.",
    "attachments": {
        "image-2018-01-22-12-52-21-656.png": "https://issues.apache.org/jira/secure/attachment/12907097/image-2018-01-22-12-52-21-656.png",
        "LUCENE-8133.patch": "https://issues.apache.org/jira/secure/attachment/12907082/LUCENE-8133.patch",
        "image-2018-01-22-12-55-17-096.png": "https://issues.apache.org/jira/secure/attachment/12907098/image-2018-01-22-12-55-17-096.png"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16334177",
            "date": "2018-01-22T11:48:57+0000",
            "content": "Ignacio Vera Could you give an example of the error that you are getting in the issue description? It's quite hard to figure out what the issue is about without context. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16334179",
            "date": "2018-01-22T11:55:34+0000",
            "content": "Note I am trying to construct the following polygon:\n\n\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16334286",
            "date": "2018-01-22T13:58:42+0000",
            "content": "I will be able to look at this by this afternoon.\n\n\u00a0 ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16334341",
            "date": "2018-01-22T14:41:55+0000",
            "content": "Since we're on the subject of\u00a0JIRA etiquette, please don't address\u00a0JIRA\u00a0issues to specific people \u2013 as in \"hello ____\". \u00a0Everyone should feel invited to participate, even if, practically speaking, certain parts of our code have historically only been improved by one person. \u00a0That said, CC away to anyone you think would take an interest in the issue. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16334344",
            "date": "2018-01-22T14:42:18+0000",
            "content": "One thing to note is the javadoc for createGeoPolygon():\n\n\n  /** Create a GeoPolygon using the specified points and holes, using order to determine \n   * siding of the polygon.  Much like ESRI, this method uses clockwise to indicate the space\n   * on the same side of the shape as being inside, and counter-clockwise to indicate the\n   * space on the opposite side as being inside.\n   * @param pointList is a list of the GeoPoints to build an arbitrary polygon out of.  If points go\n   *  clockwise from a given pole, then that pole should be within the polygon.  If points go\n   *  counter-clockwise, then that pole should be outside the polygon.\n   * @return a GeoPolygon corresponding to what was specified.\n   */\n\n\n\nIn other words, the behavior is quite different depending on the order the points come in.  The code considers the order to determine the \"pole\" \u2013 that is, the point that's actually within the polygon.  Here are the points in the test case:\n\n\n+    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(-23.434456), Geo3DUtil.fromDegrees(14.459204)));\n+    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees( -23.43394), Geo3DUtil.fromDegrees(14.459206)));\n+    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(-23.434196), Geo3DUtil.fromDegrees(14.458647)));\n+    points.add(new GeoPoint(PlanetModel.SPHERE, Geo3DUtil.fromDegrees(-23.434452), Geo3DUtil.fromDegrees(14.458646)));\n\n\n\nMy guess is that the \"pole\" chosen for this ordering is in the part of the sphere that is \"everything but\" the polygon that was intended.  That should work nevertheless. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16334514",
            "date": "2018-01-22T16:32:52+0000",
            "content": "That is odd. I have been using the factory to build simple square polygons and the behavior has been more like WKT, where points are defined in a counter clockwise direction as it will be seen from the \"top\":\n\n(lat,lon)-> (0 0), (0 1),(1 1), (1 0) gives you a convex polygon. Points are CCW from the \"top\".\n\n(lat,lon)-> (0 0), (1 0),(1 1), (0 1) gives you a concave polygon. Points are CW from the \"top\".\n\nIs that the opposite to what is expected? or I am messed up with directions.\n\nDavid Smiley: Noted, Jira tickets should not be exclusive.\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16334643",
            "date": "2018-01-22T18:04:24+0000",
            "content": "Ignacio Vera, the first example you gave ( (0 0), (0 1),(1 1), (1 0) ) seems clockwise to me.  Increasing latitude is north, and increasing longitude is east.  So it's working as described in the javadoc. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16334782",
            "date": "2018-01-22T19:34:47+0000",
            "content": "I understand that is clockwise when looking from the inside of the planet, anyhow we have a common understanding.\n\nI have a closer look to the problem and I think I understand what is going on. When you look to the shortest edge and check if the points used to generate, one of them is actually not within.\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16334818",
            "date": "2018-01-22T20:03:34+0000",
            "content": "It should be possible to generate a single concave polygon to cover this case.  What it's apparently doing, though, is trying to tile it with multiple convex polygons, which is why it gets into trouble.\n\nThe way to debug it is to log (using System.out.println) the decisions it is making during the tiling process, and why those decisions are being made.  Then we find where the error is and figure out why it made the bad decision. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16335070",
            "date": "2018-01-22T22:38:01+0000",
            "content": "Ok, what is happening is that the polygon tiling code \"tries\" a few things to see if they work out.  It's expecting the GeoConvexPolygon construction to be successful when it does this.  The problem is that sometimes the constructor throws an IllegalArgumentException \u2013 not something the code was expecting.\n\nThe solution seems to be to just catch the exception and signal that the tiling can't be created:\n\n\n      try {\n        // No holes, for test\n        final GeoPolygon testPolygon = new GeoConvexPolygon(planetModel, points, null, internalEdges, returnIsInternal);\n        if (testPolygon.isWithin(testPoint)) {\n          return null;\n        }\n      } catch (IllegalArgumentException e) {\n        return null;\n      }\n\n\n\nIgnacio Vera, can you extend your test case to verify that the shape produced works properly?  If that passes I will commit my fix. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16335416",
            "date": "2018-01-23T06:38:42+0000",
            "content": "I disagree with the assessment. I think the factory is doing the right job and it is trying to create a convex polygon with the provided points as expected. The issue is that when creating one of the edges, the final plane suffers from numerical imprecision resulting of some of the points being out of the plane.\n\nI attached the test with extra code that creates the bogus plane.\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16335509",
            "date": "2018-01-23T08:43:13+0000",
            "content": "Hmm.\n\nThere is code in Vector which is supposed to prevent that kind of thing from happening:\n\n\n  public Vector(final Vector A, final Vector B) {\n    // x = u2v3 - u3v2\n    // y = u3v1 - u1v3\n    // z = u1v2 - u2v1\n    final double thisX = A.y * B.z - A.z * B.y;\n    final double thisY = A.z * B.x - A.x * B.z;\n    final double thisZ = A.x * B.y - A.y * B.x;\n    final double magnitude = magnitude(thisX, thisY, thisZ);\n    if (Math.abs(magnitude) < MINIMUM_RESOLUTION) {\n      throw new IllegalArgumentException(\"Degenerate/parallel vector constructed\");\n    }\n    final double inverseMagnitude = 1.0 / magnitude;\n    this.x = thisX * inverseMagnitude;\n    this.y = thisY * inverseMagnitude;\n    this.z = thisZ * inverseMagnitude;\n  }\n\n  /** Compute a magnitude of an x,y,z value.\n   */\n  public static double magnitude(final double x, final double y, final double z) {\n    return Math.sqrt(x*x + y*y + z*z);\n  }\n\n\n\nThere is also code further up in GeoPolygonFactory which merges points that are too close together.  Both of these checks have to somehow not do the right thing for the situation in question to develop.  I'll research. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16335514",
            "date": "2018-01-23T08:46:44+0000",
            "content": "\n[junit4]   1> Magnitude = 9.005955889077574E-6\n\n\n\nThat's way larger than the precision limit... ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16335535",
            "date": "2018-01-23T09:08:44+0000",
            "content": "I'm going to need to think about this.  The precision limit of MINIMUM_RESOLUTION is a linear distance, and so is a vector's magnitude, so the comparision with MINIMUM_RESOLUTION is indeed valid.  But the resulting plane is poorly determined nonetheless.   ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16335560",
            "date": "2018-01-23T09:27:08+0000",
            "content": "One thing I notice is that if the normalization of the normal vector is removed, then the plane seems well defined. It is the normalization that seems to add noise. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16335685",
            "date": "2018-01-23T12:15:04+0000",
            "content": "The normalization was added because if it isn't there there are downstream effects; these vectors cannot be reliably used in further vector operations without it. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16335695",
            "date": "2018-01-23T12:23:07+0000",
            "content": "The distance from the plane constructed to the points that were used to construct it are almost within the 1e-12 range:\n\n\n   [junit4]   1> -1.4149458514578495E-12\n   [junit4]   1> -1.414946935660022E-12\n\n\n\nOne solution could be to increase the value of MINIMUM_RESOLUTION to 1.5e-12.  That's basically saying we can't construct planes any better than that, which is what the math is saying already... ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16335715",
            "date": "2018-01-23T12:35:38+0000",
            "content": "Commit a7a28ec170a0e1afdff343a1cfe1489541e1c928 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a7a28ec ]\n\nLUCENE-8133: Increase MINIMUM_RESOLUTION to 1.5e-12. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16335717",
            "date": "2018-01-23T12:36:43+0000",
            "content": "Commit 8fb6e8307a21220b2d7c40680d02fed52d02dec0 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8fb6e83 ]\n\nLUCENE-8133: Increase MINIMUM_RESOLUTION to 1.5e-12. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16335719",
            "date": "2018-01-23T12:37:39+0000",
            "content": "Commit 922188185e125c43328b3704d06acc6a6619e976 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9221881 ]\n\nLUCENE-8133: Increase MINIMUM_RESOLUTION to 1.5e-12. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16335720",
            "date": "2018-01-23T12:38:22+0000",
            "content": "I increased the MINIMUM_RESOLUTION as described and all seems happy now. ",
            "author": "Karl Wright"
        }
    ]
}