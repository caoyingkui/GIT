{
    "id": "LUCENE-4873",
    "title": "corner case in MinShouldMatchSumScorer when there are many terms",
    "details": {
        "components": [
            "core/query/scoring"
        ],
        "fix_versions": [],
        "affect_versions": "4.3",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I think this bug is some extreme corner case...\n\nThis test currently only uses up to 9 terms. By increasing it to 26 and blasting the test, I was able to uncover a bug.\n\nHere's the seed: ant test  -Dtestcase=TestMinShouldMatch2 -Dtests.method=testNextAllTerms -Dtests.seed=E0334C37E6E190D8 -Dtests.slow=true -Dtests.locale=pl_PL -Dtests.timezone=Asia/Thimphu -Dtests.file.encoding=US-ASCII\n\nHere's the patch to make the test use 26 terms.\n\nIndex: lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java\n===================================================================\n--- lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java\t(revision 1459937)\n+++ lucene/core/src/test/org/apache/lucene/search/TestMinShouldMatch2.java\t(working copy)\n@@ -56,7 +56,7 @@\n   static final String alwaysTerms[] = { \"a\" };\n   static final String commonTerms[] = { \"b\", \"c\", \"d\" };\n   static final String mediumTerms[] = { \"e\", \"f\", \"g\" };\n-  static final String rareTerms[]   = { \"h\", \"i\", \"j\" };\n+  static final String rareTerms[]   = { \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\" };\n   \n   @Override\n   public void setUp() throws Exception {",
    "attachments": {
        "LUCENE-4873.patch": "https://issues.apache.org/jira/secure/attachment/12575223/LUCENE-4873.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-24T11:53:25+0000",
            "content": "I screwed up the implementation of the heap operation that I added (minheapRemove), so actually no extreme corner case, it only didn't pop up because this method is called rarely.\n\nPatch attached (sorry, I also reformatted and cleaned up up some comments in the same patch). I added a method to check the validity of the heap (minheapCheck) that I call within asserts after every relevant operation, please remove these expensive operation calls if you think that assertions should be fast because many users run with assertions enabled and could be irritated.\n\nI couldn't produce any other test failings, and lucenebench shows the same results.\n\nThis just exemplifies that one shouldn't re-implement basic data structures in each and every class.\nWould it make sense to add heap operations to e.g. ArrayUtil and refactor the codebase? Or is it known that this would mean prohibitive performance impact? ",
            "author": "Stefan Pohl",
            "id": "comment-13612072"
        },
        {
            "date": "2013-03-24T16:38:51+0000",
            "content": "Thanks Stefan:\n\nplease remove these expensive operation calls if you think that assertions should be fast because many users run with assertions enabled and could be irritated.\n\ngood call: I disabled the expensive ones at least for now. I'll commit this for now, but I think as a next step if we can refactor, we can instead unit test the utility heap methods directly and feel a lot better.\n\n\nThis just exemplifies that one shouldn't re-implement basic data structures in each and every class.\nWould it make sense to add heap operations to e.g. ArrayUtil and refactor the codebase? Or is it known that this would mean prohibitive performance impact?\n\nYes: I think we should do this. This was my original motivation for having a base class between DisjunctionSum and DisjunctionMax scorers: but this sounds like it might be a better way to do it. We can just benchmark that it doesnt have a performance impact. ",
            "author": "Robert Muir",
            "id": "comment-13612143"
        }
    ]
}