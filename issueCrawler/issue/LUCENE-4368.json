{
    "id": "LUCENE-4368",
    "title": "make sentinel object in HitQueue a singleton?",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "4.0-BETA",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "Via jvisualvm, I see that one of my Lucene processes is spending a lot of time in HitQueue.getSentinelObject. That's a very simple method that currently looks like:\n\n  protected ScoreDoc getSentinelObject() \n{\n    return new ScoreDoc(Integer.MAX_VALUE, Float.NEGATIVE_INFINITY);\n  }\n\nSince the same sentinel is always returned, perhaps the sentinel should be declared as a static variable on HitQueue and then getSentinelObject() would just return that static value?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-09T10:55:13+0000",
            "content": "Hi,\n\nthis is not possible, as the sentinel objects are reused and modified. While collecting the hits, all sentinel objects are reused and reinserted into the hit queue. If you return the same global singleton, this singleton would be modified all the time, changing all contents of the HitQueue. The default entries in the hit queue must be different instances.\n\nThe problem you are seing may be related to the fact that you are making your HitQueue too big, by passing a too large number of hits to be returned. ",
            "author": "Uwe Schindler",
            "id": "comment-13451566"
        },
        {
            "date": "2012-09-09T11:02:04+0000",
            "content": "I see. Thanks for the explanation! ",
            "author": "Steven Bethard",
            "id": "comment-13451568"
        },
        {
            "date": "2012-09-09T11:06:50+0000",
            "content": "In general you shoul definitly not pass Integer.MAX_VALUE to IndexSearcher.search()! This would cause all results to be collected, which is not a correct use case of this method. It would use IndexReader.maxDoc() while collecting. ",
            "author": "Uwe Schindler",
            "id": "comment-13451569"
        },
        {
            "date": "2012-09-09T11:43:18+0000",
            "content": "Yeah, I was actually using IndexReader.maxDoc, but the index has 14M documents, so that's still large enough to provoke a lot of sentinel object creations. While for my application, it's more correct to collect all possible results, in practice it's not too awful to limit it to 100,000 or so. That's what I'm doing now, and that made HitQueue.getSentinelObject go down to only ~5% of the CPU, rather than 70% where it was before. ",
            "author": "Steven Bethard",
            "id": "comment-13451575"
        },
        {
            "date": "2012-09-09T11:48:33+0000",
            "content": "If you want to callect all hits, its stupid to use TopDocs at all - because TopDocs is made to get \"few\" top-scoring documents. To collect all hits, implement your own Collector subclass and the score would be unimportant, so the whole overhead of score calculation is uneeded. ",
            "author": "Uwe Schindler",
            "id": "comment-13451576"
        },
        {
            "date": "2012-09-09T11:51:13+0000",
            "content": "TopDocs collecting only works fast with muuuuuuch smaller topdocs count (10 or 20 or 100, not 100,0000!!!). With so many hits you can only write your own collector to get all, otherwise you burn your cpus for no reason. ",
            "author": "Uwe Schindler",
            "id": "comment-13451578"
        },
        {
            "date": "2012-09-09T12:27:22+0000",
            "content": "Makes sense. Thanks again. ",
            "author": "Steven Bethard",
            "id": "comment-13451585"
        }
    ]
}