{
    "id": "LUCENE-2942",
    "title": "toString() methods on term/queries/etc are wrong: assume utf-8 encoded bytes.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "In Lucene's trunk, a Term is just a Bytesref.\nIn a lot of cases this is a UTF-8 encoded string, but in some cases its not (e.g. collation fields).\n\nThe problem is that the toString methods all currently call utf8ToString().\nThis is wrong, though from a practical point of view i think just printing the bytes won't be very helpful for debugging most cases where the bytes really are utf-8 encoded.\n\nSo i think in these cases we should use the following technique: if the bytes are a valid utf-8 sequence, use BytesRef.utf8tostring(), otherwise just print the bytes: BytesRef.toString()\n\nits no problem for performance because toString is only for debugging anyway.",
    "attachments": {
        "LUCENE-2942.patch": "https://issues.apache.org/jira/secure/attachment/12472210/LUCENE-2942.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-02-28T17:44:46+0000",
            "content": "Maybe we should add a method to BytesRef that is called: toHumanReadableString(). Internally it could quickly be implemneted as calling utf8ToString() and fallback on Exception. Or is there a faster was to detect if its valid UTF-8?\n\nThis method could also be used e.g. in analysis.jsp in Solr, where it currently always prints utf8ToString(), which may also fail. ",
            "author": "Uwe Schindler",
            "id": "comment-13000427"
        },
        {
            "date": "2011-02-28T17:59:35+0000",
            "content": "Uwe: my plan is to actually fix toString itself (toString should be human readable, thats its purpose!)\n\nThe existing code should be bytesToString() or hexToString() or something of that nature,\nthis way if you explicitly want bytes you can get that.\n\n\nInternally it could quickly be implemneted as calling utf8ToString() and fallback on Exception. Or is there a faster was to detect if its valid UTF-8?\n\nNot really, you cannot trust the JRE to do this correctly, e.g. http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6982052\n\nAdditionally the behavior of malformed bytes is undefined, e.g. IBM JREs use IGNORE but Sun JREs use REPLACE... even if they actually detected correctly \n\nDon't worry I will take care of this part. ",
            "author": "Robert Muir",
            "id": "comment-13000435"
        },
        {
            "date": "2011-02-28T18:25:54+0000",
            "content": "here's a patch, i only converted the really safe stuff over: toString()s and assertions and some tools in contrib/misc such as HighFreqTerms. ",
            "author": "Robert Muir",
            "id": "comment-13000451"
        }
    ]
}