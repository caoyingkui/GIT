{
    "id": "LUCENE-1485",
    "title": "Use OpenBitSet instead of BitVector in SegmentReader",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.4",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Tried out BitVector.get vs OpenBitSet.get here's the results which are about the same after running 25 times in milliseconds.  It is assumed that implementing DocIdSetIterator in SegmentTermDocs will speed things up more.\n\nbit set size: 10,485,760\nset bits count: 524,032\nopenbitset: 68\nbitvector: 89\n\n24% speed increase.\n\nI will implement a patch that adds the WriteableBitSet interface and make a subclass of OpenBitSet that is writeable to disk.  We're working on an isSparse method for OpenBitSet.",
    "attachments": {
        "TestDeletedDocsSpeed.java": "https://issues.apache.org/jira/secure/attachment/12395671/TestDeletedDocsSpeed.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-12-09T20:09:15+0000",
            "content": "TestDeletedDocsSpeed.java\n\nExecutes get on BitVector and OpenBitSet.  FastGet is called on OpenBitSet.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12654935"
        },
        {
            "date": "2008-12-09T22:44:19+0000",
            "content": "This above test was using the -client option in the JVM on Mac OS X.  Using -server the numbers look almost the same for OpenBitSet and BitVector with BitVector being slightly faster.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12654994"
        },
        {
            "date": "2008-12-10T22:17:24+0000",
            "content": "Is the \"slightly\" in the noise? ",
            "author": "Grant Ingersoll",
            "id": "comment-12655385"
        },
        {
            "date": "2008-12-12T01:48:40+0000",
            "content": "Grant write: \"Is the \"slightly\" in the noise? \"\n\nSeems to be.  Perhaps it needs more performance tests.  It is somewhat surprising given OpenBitSet is supposed to be the \"fastest\" bitset.  It seems that Lucene should have ways to incorporate new bitset implementations in the future using interfaces and things.  That being said it would be great if in Lucene 3.0 the entire IndexReader class tree was rewritten to not be such as mess with the locking, reopen, and ref counting.  Marvin is proposing some good ideas to make it all more pluggable.  I need to spend some time with folks figuring what APIs would be optimal for not tying all the APIs together like the twisted mess it is now.  For example, IndexReader shouldn't have a static open method attached to it.  It seems like new index features like column stride fields implemented in todays system would exacerbate the problem because then there's more code that is impossible to customize if desired.  SegmentMerger needs to be pluggable as today it cannot be customized without possibly breaking the entirety of Lucene, and the custom code cannot be checked in as a contrib.  There more to write but I should save it for a more structured and timely discussion. ",
            "author": "Jason Rutherglen",
            "id": "comment-12655849"
        },
        {
            "date": "2008-12-12T02:25:45+0000",
            "content": "It is somewhat surprising given OpenBitSet is supposed to be the \"fastest\" bitset\n\nFor doing population counts, and intersection/union population counts, yes.  And it's also \"Open\" so if there is a faster method of doing something, it can still be done.  The point was not to make a faster get(bitnum) - that's really going to be in the noise and certainly not worth writing a whole new BitSet class over.\n\nw.r.t. Lucene's BitVector, it's byte based, so is likely to be slightly faster on x86, esp 32 bit.  No need to check a long when you can check a byte for a flipped bit.\n\nIt seems that Lucene should have ways to incorporate new bitset implementations in the future using interfaces and things.\n\nDocIdSet? ",
            "author": "Yonik Seeley",
            "id": "comment-12655862"
        },
        {
            "date": "2011-01-24T21:16:50+0000",
            "content": "Won't be working on these and they're old ",
            "author": "Jason Rutherglen",
            "id": "comment-12986028"
        }
    ]
}