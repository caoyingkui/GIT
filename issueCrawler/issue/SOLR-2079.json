{
    "id": "SOLR-2079",
    "title": "Expose HttpServletRequest object from SolrQueryRequest object",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "components": [
            "Response Writers",
            "search"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This patch adds the HttpServletRequest object to the SolrQueryRequest object. The HttpServletRequest object is needed to obtain the client's IP address for geotargetting, and is part of the patches from W. Quach and C. Mattmann.",
    "attachments": {
        "SOLR-2079.patch": "https://issues.apache.org/jira/secure/attachment/12579395/SOLR-2079.patch",
        "SOLR-2079.Quach.Mattmann.082310.patch.txt": "https://issues.apache.org/jira/secure/attachment/12452816/SOLR-2079.Quach.Mattmann.082310.patch.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12901430",
            "date": "2010-08-23T15:07:58+0000",
            "content": "Ah yes \u2013 i remember wanting to do this a long time ago.\n\nHoss convinced me that it really is not a good idea \u2013 SolrQueryRequest is intentionally abstracted from HttpServletRequest \u2013 adding it directly explodes the various ways things could be passed around.   \n\nIn my own code I subclass SolrDispatchFilter and attach whatever we need there:\n\n\n@Override\n  protected final void execute( HttpServletRequest req, SolrRequestHandler handler, SolrQueryRequest sreq, SolrQueryResponse rsp)\n  {    \n    sreq.getContext().put( \"IP\", req.getRemoteAddr() );\n    super.execute(req, handler, sreq, rsp);\n  }\n\n\n "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-12901431",
            "date": "2010-08-23T15:10:52+0000",
            "content": "chris, wouldn't it be enough to expose the clients address which is less bound to a servlet than exposing the servlet request. Many users might use solr via their own protocols which are not necessarily exposed via Servlets. If you have code depending on the accessing the HttpServletRequest some people might run into problems. As far as I can see from your description you only need to expose the InetAddress right? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12901433",
            "date": "2010-08-23T15:13:42+0000",
            "content": "yeah, this has been something I've desired too.  SOLR-1354 is related to this, and I commented there that one way is to do this generically at the dispatch filter level like Ryan has done, taking all HTTP headers and metadata and stuff it into SolrQueryRequest params perhaps prefixed with \"http\" or something like that. \n\nWe need to be sure that we're not tying embedded Solr to container/HTTP classes. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12901434",
            "date": "2010-08-23T15:14:10+0000",
            "content": "Hey Guys: yep, whatever is the easiest way is fine with me. We just need the IP address so that we can do Geotargetting based on the host IP. This is part of the slew of patches that William and I put together. This is the way we saw it and it works but not the only way to do it, for sure! "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12901439",
            "date": "2010-08-23T15:26:01+0000",
            "content": "The IP may be often that of a load balancer or proxy that sits in front of Solr... "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12901443",
            "date": "2010-08-23T15:28:46+0000",
            "content": "The IP may be often that of a load balancer or proxy that sits in front of Solr...\n\nYep, that's certainly true, but not always the case. Additionally, this kind of sets the stage for more formalized IP detection (or more flexible), but it at least gets us started in that direction. Furthermore, it's likely that a load balancer would be \"close\" even geographically to the eventual destination server, so geotargetting would still be useful in that sense.\n\nBut, I agree this isn't the only or best solution. I'm just opening the door here to be able to do interesting things... "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12901546",
            "date": "2010-08-23T19:15:34+0000",
            "content": "I'm really torn on stuff like this \u2013 as Ryan mentioned, i think it's important to keep Solr abstract from HTTP so we don't wind up with functionality that requires the use of HTTP \u2013 but on the other hand things like the API allowing RequestHandlers to specify when/if to allow HTTP Caching are kind of important, so we made special hooks for it\n\nI'm not 100% opposed to SolrDispatchFilter adding the HttpServletRequest into the SolrQueryRequest.getContext() map so custom plugins can use it \u2013 but i am 100% opposed to having any requesthandlers/components ship with Solr that require it to work \u2013 because those would be completely non-functional for embedded Solr users.\n\nIn a lot of cases, i think it probably makes more sense to ask that the client include the information directly as SolrParams \u2013 but that generally assumes that a client that knows about Solr conventions is constructing the request \u2013 which doesn't work as well now that more and more people want to let end user browser/clients talk directly to Solr and use Velocity or custom response writers to format the response.\n\nMy preference would be to write components that might care about these sorts of things to utilize regular SolrParams from the SolrQueryRequest, and then add generic logic to the SolrDispatchFilter to map HTTP Headers to SolrParams.  (thus people doing embedded logic can still use the functionality by specifying the appropriate SolrParams)\n\nthe key questions with an approach like this would then be fairly simple:\n\n\twhat type of convention to use for the http header => param naming?\n\twhat should take precedence in the event of name collision: the HTTP Request Query Params, or the HTTP Request Headers?\n\n\n\nFor people who really want direct access to the HttpServletRequest/Response in their custom plugins (like in SOLR-1944), and don't care about about embedded solr users, then we can also include them in the Context (no reason to make a bunch of people re-invent the same DIspatchFilter over and over) but i really feel that nothing that ships with Solr should assume it's there and utilize it directly.\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-12902359",
            "date": "2010-08-25T09:41:53+0000",
            "content": "I have been using SolrParams to convey metadata from frontends to middleware layer, and I think it has worked really well. In addition, you get it included in the query logs!\nAs for load balancers, most have an option to convey the client's IP in the \"X-Forwarded-For\" header.\n\nWhat if the dispatchFilter adds all HTTP headers to the SolrQueryRequest context. Then we could map explicitly in requestHandler config how to use them:\n\n\n<lst name=\"invariants\">\n    <str name=\"_http_remote-ip\">$HTTP_HEADERS(X-Forwarded-For, Remote-Address)</str>\n</lst>\n\n\n\nThis would mean that if HTTP header X-Forwarded-For exists in the context, it will be mapped to param _http_remote-ip, if not, it will use Remote-Address. In this way each application can choose whether to \"pollute\" the SolrParams with headers or not, choose naming as well as whether it should be invariant or default. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12903789",
            "date": "2010-08-28T06:35:15+0000",
            "content": "+1 on Chris' comments. \n\nPersonally, I would keep it as it is.  To keep the camel out of the tent, start with the camel's nose.  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12988441",
            "date": "2011-01-29T12:25:10+0000",
            "content": "Moving out all unassigned issues set to 3.1 per this email: http://www.lucidimagination.com/search/document/f026cc56081b5a51/unassigned_jira_issues_set_for_3_1 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043718",
            "date": "2011-06-03T16:46:42+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106348",
            "date": "2011-09-16T14:50:41+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234668",
            "date": "2012-03-21T18:08:48+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13635572",
            "date": "2013-04-18T19:30:22+0000",
            "content": "I would find this very useful, specially for custom components that may require the original request information like headers. Right now there are no good options to get this information, out of the box is not available and there is no easy way to extend the SolrRequestParsers or SolrDispatchFilter (without recompiling/redeploying) to customize this parsing. \nI like the proposition of adding the object to the SolrRequest context. I'm attaching a possible solution.  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13636679",
            "date": "2013-04-19T18:12:35+0000",
            "content": "Patch looks good Tomas: I like this solution better than copying individual headers to the map. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13636690",
            "date": "2013-04-19T18:21:45+0000",
            "content": "Yes, I first thought about adding just the headers but that would mean that the value of each header was going to be always an Enumeration<String>, which would require to iterate, even when only one value is expected for a header key, so I thought it was going to be better to just add the request object, and then the custom components could use getHeader(String) or getHeaders(String) depending on the needs, will make the component code cleaner.  "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13636721",
            "date": "2013-04-19T18:48:46+0000",
            "content": "Tom\u00e1s - maybe a little risky, or at least something that needs to be warned about here... what if a component asked for the session from the request object?   Wouldn't that cause sessions to be created within Solr and potentially consume resources?\n\nBut in general, +1 to getting HTTP headers (and the entire request object) into the Solr request.  Very useful! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13636731",
            "date": "2013-04-19T18:55:41+0000",
            "content": "\nmaybe a little risky, or at least something that needs to be warned about here... what if a component asked for the session from the request object? Wouldn't that cause sessions to be created within Solr and potentially consume resources?\n\nBut this is just a brokenness with the servlet api that any user should be aware of: in this case the user didn't read the javadocs, they should have used getSession(false). If they don't read those javadocs, why would they read ours? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13636831",
            "date": "2013-04-19T20:17:45+0000",
            "content": "I agree with Robert. We should pass the HttpServletRequest down with the Solr params. The issue about calling getSession() is not our problem. For Lucene-internal packages we should simply prevent this by adding the APIs to the forbidden-apis signatures (we already have one for servlet-api.jar: lucene/tools/forbiddenApis/servlet-api.txt). If somebody in a 3rd party plugin calls getSession, its his problem. And there might be a valid use-case for this! We just don't want to create sessions in Solr's code, so let's forbid those APIs. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13638154",
            "date": "2013-04-22T16:44:18+0000",
            "content": "[trunk commit] rmuir\nhttp://svn.apache.org/viewvc?view=revision&revision=1470614\n\nSOLR-2079: Add option to pass HttpServletRequest in the SolrQueryRequest context map "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13638168",
            "date": "2013-04-22T16:56:22+0000",
            "content": "[branch_4x commit] rmuir\nhttp://svn.apache.org/viewvc?view=revision&revision=1470617\n\nSOLR-2079: Add option to pass HttpServletRequest in the SolrQueryRequest context map "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13638169",
            "date": "2013-04-22T16:57:06+0000",
            "content": "Thanks Tomas! "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13716790",
            "date": "2013-07-23T18:38:36+0000",
            "content": "Bulk close resolved 4.4 issues "
        }
    ]
}