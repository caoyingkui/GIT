{
    "id": "SOLR-6191",
    "title": "Self Describing SearchComponents, RequestHandlers, params. etc.",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "We should have self describing parameters for search components, etc.\nI think we should support UNIX style short and long names and that you should also be able to get a short description of what a parameter does if you ask for INFO on it.\n\nFor instance, &fl could also be &fieldList, etc.\nAlso, we should put this into the base classes so that new components can add to it.",
    "attachments": {
        "SOLR-6191.patch": "https://issues.apache.org/jira/secure/attachment/12651997/SOLR-6191.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14040965",
            "date": "2014-06-23T16:59:21+0000",
            "content": "All methods in SolrParams are migrated to enum approach, old methods with string field name marked as deprecated.\nMigrated MLT params to enum containing params description.\nComponent/Handler that has self described parameters should implement\nSelfDescribableParameters<T> where T is enum type describing each parameter. This enum type should implement ParameterDescription interface in order to provide same contact for all parameter description enums. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14045680",
            "date": "2014-06-27T07:54:47+0000",
            "content": "This looks great, thank you Vitaliy! "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14083889",
            "date": "2014-08-03T06:36:00+0000",
            "content": "I guess it is better to use java annotations to describe the params than using interfaces. The problem with interfaces is that you need to instantiate a class to get the details. I shall take another stab at this and post a patch "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14083927",
            "date": "2014-08-03T09:12:54+0000",
            "content": "This annotates the corresponding class with the parameter info\n\n\nTake a look at PingRequestHandler.java for an example\n\nThere is a coreadmin API called methodinfo which can give you these details and lookup can be done by the name or the class name\n\nexample : http://localhost:8983/solr/admin/cores?action=methodinfo&name=/admin/ping&core=collection1&wt=json "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14083941",
            "date": "2014-08-03T10:46:26+0000",
            "content": "With a testcase\n\nI guess Shalin Shekhar Mangar's admin UI enhancements would need this. I would need to annotate other classes. But the core plumbing is here.\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14086726",
            "date": "2014-08-05T20:49:23+0000",
            "content": "Nice idea, Noble Paul, a couple questions:\n\n\n\tYou imply by naming the outer annotation Method that it will always be applied to classes that serve as REST(-like) endpoints, but that won't be true for components; I guess since Method.path defaults to empty it could be ignored by components, but maybe we should have another container annotation like Params to hold multiple Param annotations when the class doesn't need a path?\n\tHandlers can be respond to multiple endpoints, which is configured in solrconfig.xml, rather than at compile-time; how do you think this should be handled?\n\tI think whatever solution we land on, it should be possible to fully describe parameters in a single place.  Will annotations suffice to handle all param-related functionality?  E.g. when initializing and testing handlers/components, will annotations provide a clean interface to pull named parameters out?  (Your patch doesn't illustrate this at all.)\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14087670",
            "date": "2014-08-06T13:39:41+0000",
            "content": "I guess since Method.path defaults to empty it could be ignored by components\nThat is optional . It won't be enforced. Only for requesthandlers with fixed paths (We plan to fix it for some like, /admin/ping, /replication) we plan to provide this\n\nbut maybe we should have another container annotation like Params\nYeah, I plan to add something like a ParamSet or Whatever. This must be taking care of the multiple pseudo methods handled by a single API example: CollectionHandler , CoreAdminHandler\n\nHandlers can be respond to multiple endpoints, which is configured in solrconfig.xml\n\nYes, You can lookup by path in solrconfig.xml . When the call is received, the component is looked up and the annotations are fetched at that point\n\nI think whatever solution we land on, it should be possible to fully describe parameters in a single place\n\nYes, absolutely\n\nE.g. when initializing and testing handlers/components, will annotations provide a clean interface to pull named parameters out\n\nThat is not taken care of.  I agree that it should\n\n\n\n\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14088891",
            "date": "2014-08-07T06:22:08+0000",
            "content": "I think we should split this issue into two APIs:\n\n\tA node capabilities API which returns all the paths and the request handlers supported by a node\n\tA method introspection API which returns all the parameters required for a method.\n\n\n\nThey might actually be one API endpoint but this will simplify the development because #1 just needs the information in solrconfig.xml and no annotations or interfaces are necessary. #2 can be implemented after the implementation details are fleshed out. Another reason for asking this separation is that I am blocked by the need of #1 for SOLR-6235. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14090410",
            "date": "2014-08-08T07:07:57+0000",
            "content": "I'm confused about the name of the handler /meta\n\nother options are\n\n\n\t/help\n\t/man linux command\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14090692",
            "date": "2014-08-08T12:05:27+0000",
            "content": "Every path, including the collection admin, core admin etc can respond to the /meta suffix. If the component is annotated the details are spit out , otherwise a TODO message is print out.\n\nFor SearchHandlers , the components can be annotated and they will also be included \n\nPlease review  "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14100051",
            "date": "2014-08-17T18:45:10+0000",
            "content": "Annotation approach is beautiful, but it does not describe used in code parameter names since it just string constants. Original goal was to replace all parameter string names with strong typed enum containing parameter string description, see org.apache.solr.common.params.SolrParams. Probably make sense to use both ways and use Parameter enum implementing org.apache.solr.common.params.ParameterDescription as @Param value and don't require component to extend interface.\n\nThis will bring strong typing code usages and provide generic API for describing parameters. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14102544",
            "date": "2014-08-19T17:55:59+0000",
            "content": "Vitaliy Zhovtyuk The objective of this ticket is not to bring in type safety . The entire Solr commands are implemented without type safety and we should address that separately , if required. The objective here is to self document APIs for the users . Type safety is for developers . It is not easy to achieve it without large-scale rewrite of our components.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14111119",
            "date": "2014-08-26T18:41:22+0000",
            "content": "A minimal implemenation on a couple of methods. Treat it as a PoC "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14112984",
            "date": "2014-08-27T22:41:51+0000",
            "content": "About type safety: maybe wrong term, but in my opinion having \n\nSolrParams.get(MoreLikeThisParameters.MLT)\n\n is more safe then \n\nSolrParams.get(\"mlt\")\n\n used a lot in code, MoreLikeThisParameters enum relates to documenting parameters and is not so error prone like string hardcodes, it should be same way for components and handlers to refer parameters. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14113000",
            "date": "2014-08-27T22:47:03+0000",
            "content": "I completely agree with you that constants help . But, do we need enums for them? I'm happy to use Strings (Others may have their own opinion) . That is a a lot of enums to create. It does not have to be a part of the self describing thing though "
        },
        {
            "author": "David Smiley",
            "id": "comment-14203989",
            "date": "2014-11-09T16:43:37+0000",
            "content": "This feature is going to be awesome; great work guys!  I heard about this on the \"Solr Cluster\" podcast. "
        }
    ]
}