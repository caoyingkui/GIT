{
    "id": "SOLR-2003",
    "title": "report errors for wrongly-encoded files in ResourceLoader.getLines()",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "ResourceLoader is used to load things like stopwords and synonyms files, but it uses the default 'Charset' argument for this.\n\nwhen you open an InputStream with a Charset, you get:\n\ndecoder = charset.newDecoder().onMalformedInput(\n    CodingErrorAction.REPLACE).onUnmappableCharacter(\n    CodingErrorAction.REPLACE);\n\n\n\nFor cases like malformed encoded stopwords and synonyms files, I think its more helpful to use CodingErrorAction.REPORT than to silently replace with a replacement char. Then the user gets an exception.\n\nSee: http://www.lucidimagination.com/search/document/1e50cb0992727fa1/foreign_characters_question",
    "attachments": {
        "SOLR-2003_friendly.patch": "https://issues.apache.org/jira/secure/attachment/12449664/SOLR-2003_friendly.patch",
        "SOLR-2003.patch": "https://issues.apache.org/jira/secure/attachment/12449467/SOLR-2003.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-12888421",
            "date": "2010-07-14T16:33:53+0000",
            "content": "patch with the example from the user's list as a test (i encoded it as an ISO-8859-1 stopwords file, instead of UTF-8) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12888459",
            "date": "2010-07-14T17:55:16+0000",
            "content": "If there's a way to tell that the file is in the \"wrong\" encoding, then +1 to throwing an exception\n\nI didn't even know that was possible. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12888460",
            "date": "2010-07-14T17:59:29+0000",
            "content": "If there's a way to tell that the file is in the \"wrong\" encoding, then +1 to throwing an exception\n\nWell technically, its just the action of what to do for an exceptional case when decoding something malformed (e.g. illegal byte sequence).\nThe default action is to silently ignore, and substitute a replacement character (U+FFFD), but you can change this to throw an exception.\n\nSo we can't detect all cases, only ones that are \"obviously\" wrong and cause the decoder to get angry. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12888805",
            "date": "2010-07-15T14:01:43+0000",
            "content": "Committed revision 964430 (trunk) / 964433 (3x) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12889168",
            "date": "2010-07-16T13:19:20+0000",
            "content": "reopening as Mark hit this in cloud tests, but the exception could be friendlier (its from a low level inputstream and doesnt know the filename you were trying to load, etc) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12889169",
            "date": "2010-07-16T13:20:26+0000",
            "content": "attached is an improvement to make the error more friendly. \nit wraps the low-level exception, but provides the filename and suggests it might be in the wrong encoding "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12889857",
            "date": "2010-07-19T13:32:25+0000",
            "content": "forgot to mark this resolved.\n\nCommitted \"friendly error\" improvement revisions 964832 / 964838 (3x) "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013120",
            "date": "2011-03-30T15:45:37+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}