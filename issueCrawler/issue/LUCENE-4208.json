{
    "id": "LUCENE-4208",
    "title": "Spatial distance relevancy should use score of 1/distance",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/spatial"
        ],
        "type": "New Feature",
        "fix_versions": [
            "4.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The SpatialStrategy.makeQuery() at the moment uses the distance as the score (although some strategies \u2013 TwoDoubles if I recall might not do anything which would be a bug).  The distance is a poor value to use as the score because the score should be related to relevancy, and the distance itself is inversely related to that.  A score of 1/distance would be nice.  Another alternative is earthCircumference/2 - distance, although I like 1/distance better.  Maybe use a different constant than 1.\n\nCredit: this is Chris Male's idea.",
    "attachments": {
        "LUCENE-4208_makeQuery_return_ConstantScoreQuery,_standardize_makeDistanceValueSource_behav.patch": "https://issues.apache.org/jira/secure/attachment/12545031/LUCENE-4208_makeQuery_return_ConstantScoreQuery%2C_standardize_makeDistanceValueSource_behav.patch",
        "LUCENE-4208_makeQuery_return_ConstantScoreQuery_and_remake_TwoDoublesStrategy.patch": "https://issues.apache.org/jira/secure/attachment/12544881/LUCENE-4208_makeQuery_return_ConstantScoreQuery_and_remake_TwoDoublesStrategy.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-11T23:03:46+0000",
            "content": "bulk cleanup of 4.0-ALPHA / 4.0 Jira versioning. all bulk edited issues have hoss20120711-bulk-40-change in a comment ",
            "author": "Hoss Man",
            "id": "comment-13412311"
        },
        {
            "date": "2012-07-27T02:39:09+0000",
            "content": "Thinking more about this, I like the overall curve shape of the inverted distance but it definitely has problems.  For example if the query center is practically on top of some data point then the score ends up being close to infinity.  And how quickly the score curve slides is doesn't vary based on the overall query shape; I think it should.\n\nThe reciprocal makes sense:   c/(x+c)  where x = the distance.  'c' is roughly 1/10th of the distance to the query shape edge. ",
            "author": "David Smiley",
            "id": "comment-13423638"
        },
        {
            "date": "2012-07-27T13:01:03+0000",
            "content": "I'm concerned this obfuscates the actual distance too much, making it difficult to retrieve x again.  It's not impossible but suddenly anybody wanting to retrieve the actual distance must calculate c again. ",
            "author": "Chris Male",
            "id": "comment-13423851"
        },
        {
            "date": "2012-07-28T14:39:20+0000",
            "content": "Having thought about this more I think the best way forward is to just emulate free-text queries and have a SpatialSimilarity abstraction.  I'm not sure of the exact nature of the API for this but I think there are times with using 1/x is sufficient and there are probably times when a more convoluted algorithm fits.  We should allow the consumer to control what they choose.  \n\nI think the Similarity should be given the Query Shape, the matched docID and the current SpatialOperation as a minimum.  I'd like to somehow see a way to also pass in a pre-computed distance (for Queries that compute it as part of their matching) and possibly the matched grid hash for anything using the PrefixTrees.  We might have to have subclasses for those, or maybe a Command or something, I'm not sure.\n\nOther benefits:\n\n\tWe immediately open up the ability to have more complex similarity scores based on overlap percentage or anything really.\n\tIt is plausible that a SpatialSimilarity might use a cache of indexed Shapes to facilitate more complex algorithms.  By having this abstraction we offload the caching from the main API.\n\tIt is also plausible that a SpatialSimilarity instance could be misused to cache calculated distances if the consumer so wanted.\n\n\n\nI think we should consider whether we want SpatialSimilarities to also be given the current IndexReader (and so be able to use it in any caches or other lookups) or whether we want them to be IR independent.\n\nWe will also need some custom Queries to actually make use of the SpatialSimilarity.  Need to think this one through a little.\n ",
            "author": "Chris Male",
            "id": "comment-13424358"
        },
        {
            "date": "2012-08-07T03:41:33+0000",
            "content": "rmuir20120906-bulk-40-change ",
            "author": "Robert Muir",
            "id": "comment-13429721"
        },
        {
            "date": "2012-09-08T22:49:24+0000",
            "content": "What's the status of this? are query results being properly sorted based on distance? ",
            "author": "Itamar Syn-Hershko",
            "id": "comment-13451430"
        },
        {
            "date": "2012-09-09T02:19:23+0000",
            "content": "I have some in-progress code I need to finish, then post as a patch.  \n\nI think the most important thing is for the strategies to expose the distance as a ValueSource.  This is the case currently with PrefixTreeStrategy and TwoDoublesStrategy.  With this, you can do what you want \u2013 inverse reciprocal distance or whatever.  By default, I'd like a Query's score to be something like that and this is what this issue is about, but even without it you could do something like:\n\nnew FilteredQuery(new FunctionQuery(myValueSource), spatialStrategy.makeFilter(...))\n\n ",
            "author": "David Smiley",
            "id": "comment-13451462"
        },
        {
            "date": "2012-09-09T06:08:51+0000",
            "content": "I actually totally agree with David here.  Using ValueSource (instead of my SpatialSimilarity idea) is an excellent solution which leverages existing Lucene code.  Having it this way means that even if a Strategy has a custom Query implementation (maybe for performance reasons) it would still be possible to make use of the ValueSource in scoring.\n\nI definitely think we should expose this on a per Strategy basis rather than all Strategys as some Strategys may not be able to compute distance and we shouldn't force them to. ",
            "author": "Chris Male",
            "id": "comment-13451508"
        },
        {
            "date": "2012-09-12T04:23:18+0000",
            "content": "This being said, something relatively simple should be done to advance this issue for v4 (and I'll do the work now).  It comes down to what is the score of makeQuery()?  The strategies are doing different things right now.  Here are 3 options I can think of:\n\n\tStandardize on the reciprocal distance using some specific formula like c/(d+c) where c is 1/10th the distance to the nearest query shape edge.\n\tDocumented loosely to allow any \"reasonable\" shape similarity so that it will at least sort sensibly (this precludes returning the distance directly).\n\tAdd a ValueSource parameter to makeQuery(). This allows the caller to pick something.  If null is supplied then you get a ConstantScoreQuery.  A convenience method on Strategy can be provided to return a ValueSource of the reciprocal distance formula if the caller wants to use that.\n\n\n\nThe #3 the ValueSource parameter seems appealing to me but then I remember why makeQuery() exists instead of letting the user combine the distance valueSource & makeFilter.  If the filter requires the valueSource (such as a [working] TwoDoubles given a query shape other than a rect), then the valueSource might be invoked twice: first for matching and second for the score.  One idea to alter option #3 is to make the argument an implementation of a single-method interface that accepts the distance valueSource and returns a valueSource for the score. ",
            "author": "David Smiley",
            "id": "comment-13453692"
        },
        {
            "date": "2012-09-12T04:52:30+0000",
            "content": "I don't think there is a clear solution here.  But I feel ValueSource provides maximum flexibility going forward.  If we continue to support makeValueSource then people can sort, or include it in their query if they want, or just retrieve the value at some later stage.  makeQuery() should just return a ConstantScoreQuery.  We can consider in future versions what if anything we want to do around its score.\n\nWRT to TwoDoubles.  This Strategy was a nice start to this work awhile back and was designed to replicate existing point-distance functionality.  But it has huge limitations and it constantly feels like we're being held back by it.  Every Strategy has its limitations, and I dont feel we should hold back changes just because it impacts TwoDoubles. ",
            "author": "Chris Male",
            "id": "comment-13453708"
        },
        {
            "date": "2012-09-12T05:56:53+0000",
            "content": "If we standardize on ConstantScoreQuery then it's dubious if makeQuery() should even exist \u2013 just use makeFilter().  If the user code wants a Query then it can wrap the Filter.  It could first detect if the Filter is a QueryWrapperFilter and if so grab the Query object from that.  This algorithm could even be the default implementation in SpatialStrategy. ",
            "author": "David Smiley",
            "id": "comment-13453743"
        },
        {
            "date": "2012-09-12T06:00:14+0000",
            "content": "I disagree that makeQuery shouldn't exist.  There are optimizations to be had in Query code, such as using BooleanQuery and its associated highly optimized scorer algs.  I think it should continue to exist but should have a default implementation that creates a CSQ by calling makeFilter. ",
            "author": "Chris Male",
            "id": "comment-13453746"
        },
        {
            "date": "2012-09-12T22:03:03+0000",
            "content": "This patch is the start of something I hope to finish tonight.  makeValueSource is makeDistanceValueSource to make abundantly clear.  TwoDoubles is getting overhauled to support the dateline and any query shape--should probably go into another issue. ",
            "author": "David Smiley",
            "id": "comment-13454416"
        },
        {
            "date": "2012-09-13T02:13:03+0000",
            "content": "TwoDoubles is getting overhauled to support the dateline and any query shape--should probably go into another issue.\n\nYes please! ",
            "author": "Chris Male",
            "id": "comment-13454581"
        },
        {
            "date": "2012-09-13T19:39:17+0000",
            "content": "Patch with these changes:\n\n\tmakeValueSource is makeDistanceValueSource to make abundantly clear. And it takes Point instead of SpatialArgs.\n\tStandardized behavior of makeDistanceValueSource across the 3 strategies, including null value behavior (it's '180' if geo, Double.MAX_VALUE otherwise).\n\tTests for makeDistanceValueSource in DistanceStrategyTest\n\tAdded final method SpatialStrategy.makeRecipDistanceValueSource(queryShape) including tested it.  This addresses the title of this JIRA issue.\n\n\n\nI'll put off overhauling TwoDoubles into another JIRA issue.  I've already done some work for that. ",
            "author": "David Smiley",
            "id": "comment-13455174"
        },
        {
            "date": "2012-09-14T03:20:36+0000",
            "content": "Here's an updated patch.  To avoid the danger of two methods being implemented in terms of each other, I made makeFilter abstract again.\n\nOddly IntelliJ put the files in the patch in a different order, so you can't diff the patches across each other to see my changes; ah well.\n\nI'm looking forward to seeing this committed, pending a +1. ",
            "author": "David Smiley",
            "id": "comment-13455553"
        },
        {
            "date": "2012-09-14T13:08:36+0000",
            "content": "Things are looking pretty good, we're almost there.  \n\n\n\tWhere are we on multi-valued fields? In the documentation on makeDistanceValueSource it doesn't say what happens when multiple values are indexed.  Do we support that in the ValueSource implementations? is the behaviour undefined? If it is supposed to be defined, can we document it?\n\t\"Returns a ValueSource useful as a score\" Can we drop this claim? Part of the reason we've moved to having ConstantScoreQuerys is that it isn't clear what the score for the queries should be.  This value isn't useful for every spatial operation or implementation.\n\n\n\nOnce these have gotten addressed, I'm +1 for committing. ",
            "author": "Chris Male",
            "id": "comment-13455768"
        },
        {
            "date": "2012-09-14T13:46:43+0000",
            "content": "Here are my proposed updates to the javadocs:\n\nmakeDistanceValueSource:\n\n  /**\n   * Make a ValueSource returning the distance between the center of the\n   * indexed shape and {@code queryPoint}.  If there are multiple indexed shapes\n   * then the closest one is chosen.\n   */\n\n\n\nmakeRecipDistanceValueSource:\n\n  /**\n   * Returns a ValueSource with values ranging from 1 to 0, depending inversely\n   * to the distance from {@link #makeDistanceValueSource(com.spatial4j.core.shape.Point)}.\n   * The formula is <code>c/(d + c)</code> where 'd' is the distance and 'c' is\n   * one tenth the distance to the farthest edge from the center. Thus the\n   * scores will be 1 for indexed points at the center of the query shape and as\n   * low as ~0.1 at its furthest edges.\n   */\n  public final ValueSource makeRecipDistanceValueSource(Shape queryShape) {\n\n ",
            "author": "David Smiley",
            "id": "comment-13455788"
        },
        {
            "date": "2012-09-15T16:46:08+0000",
            "content": "Chris thinks its good and I made the commit.  trunk: r1385074 + 89, and 4x: r1385122 ",
            "author": "David Smiley",
            "id": "comment-13456441"
        },
        {
            "date": "2013-03-22T16:38:50+0000",
            "content": "[branch_4x commit] David Wayne Smiley\nhttp://svn.apache.org/viewvc?view=revision&revision=1385122\n\nLUCENE-4208 makeQuery return ConstantScoreQuery, standardize makeDistanceValueSource behavior ",
            "author": "Commit Tag Bot",
            "id": "comment-13610835"
        },
        {
            "date": "2013-05-10T10:34:35+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654266"
        }
    ]
}