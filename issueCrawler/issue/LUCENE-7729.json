{
    "id": "LUCENE-7729",
    "title": "Support for string type separator for CustomSeparatorBreakIterator",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": []
    },
    "description": "LUCENE-6485: currently CustomSeparatorBreakIterator breaks the text when the char passed is found.\n\nImproved CustomSeparatorBreakIterator; as it now supports separator of string type of arbitrary length.",
    "attachments": {
        "LUCENE-7729.patch": "https://issues.apache.org/jira/secure/attachment/12855604/LUCENE-7729.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15892008",
            "date": "2017-03-02T10:22:58+0000",
            "content": "LUCENE-7729.patch uploaded:\n\n\n\tmodified:   lucene/highlighter/src/java/org/apache/lucene/search/postingshighlight/CustomSeparatorBreakIterator.java\n\tmodified:   lucene/highlighter/src/test/org/apache/lucene/search/postingshighlight/TestCustomSeparatorBreakIterator.java\n\tmodified:   lucene/highlighter/src/test/org/apache/lucene/search/uhighlight/LengthGoalBreakIteratorTest.java\n\tmodified:   solr/core/src/java/org/apache/solr/highlight/PostingsSolrHighlighter.java\n\tmodified:   solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java\n\tmodified:   solr/core/src/test/org/apache/solr/highlight/TestPostingsSolrHighlighter.java\n\tmodified:   solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter.java\n\n\n\nDavid Smiley here is our string type separator for Custom break iterator. I used char-by-char strings matching technique.\n\nThe patch can be applied on current updated branch. Thank you. ",
            "author": "Amrit Sarkar"
        },
        {
            "id": "comment-15936179",
            "date": "2017-03-22T12:04:03+0000",
            "content": "David Smiley will appreciate your feedback on this too. Let me know if this is useful or any improvements required on this. ",
            "author": "Amrit Sarkar"
        },
        {
            "id": "comment-15936180",
            "date": "2017-03-22T12:04:08+0000",
            "content": "David Smiley will appreciate your feedback on this too. Let me know if this is useful or any improvements required on this. ",
            "author": "Amrit Sarkar"
        },
        {
            "id": "comment-15936810",
            "date": "2017-03-22T18:00:49+0000",
            "content": "Nice work Amrit.  Just curious; is this feature driven by a search-app requirement or ...\n\nOne issue with the implementation I see is that if it starts to find a match but ultimately doesn't, then the position is not reset back to the start (plus 1).  This means hypothetically a string separator of ab would fail to find the substring in the input aab.  I didn't try with your patch but do you concur?  I'm a little concerned about possible overhead for this mode.  Maybe subclassing to override advanceForward and advanceBackward would make sense.  If this were an inner class to do the string, then a factory method instead of constructor could be used.  I think CustomSeparatorBreakIterator should continue to accept a single char constructor arg; I imagine most uses of this would remain to be one character.\n\nnitpick: most Lucene/Solr code is stylistically different than yours.  Please always use braces where they are optional in Java.  And please always put spaces around keywords, and around squiggly brackets.  If per chance you use IntelliJ, then \"ant idea\" should have the formatting already configured. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15937052",
            "date": "2017-03-22T20:18:55+0000",
            "content": "Thank you David for looking into this. Updated: LUCENE-7729.patch\n\nOne issue with the implementation I see is that if it starts to find a match but ultimately doesn't, then the position is not reset back to the start (plus 1). This means hypothetically a string separator of ab would fail to find the substring in the input aab. I didn't try with your patch but do you concur? \n\nIt is taken care in the following section in the original patch:\nCustomSeparatorBreakIterator::advanceForward()::72\nCustomSeparatorBreakIterator::advanceBackward()::121\n\n\nif(sep_index != separator.length() - 1) { // separator len > 1\n          sep_index = separator.length() - 1;\n          if(c == separator.charAt(sep_index)){ //check the current token match with last element\n            sep_index --;\n          }\n        }\n\n\n\nif(sep_index != 0) { //separator len > 0\n          sep_index = 0;\n          if (c == separator.charAt(sep_index)) { //check the current token match with first element\n            sep_index ++;\n          }\n        }\n\n\n\nI have added relevant test cases to prove the same:\n\nTestCustomSeparatorBreakIterator::testFollowingPrecedingBreakOnCustomSeparator::100\n\nseparator = \"xz\";\n\n\nI'm a little concerned about possible overhead for this mode. Maybe subclassing to override advanceForward and advanceBackward would make sense. If this were an inner class to do the string, then a factory method instead of constructor could be used. I think CustomSeparatorBreakIterator should continue to accept a single char constructor arg; I imagine most uses of this would remain to be one character.\n\nI am not able to find an overhead for this implementation. String of length>0 is acceptable which is kind of better than just single char, no? I understand the most use cases will not demand more than single char, that's why we specially have whitespace, but having string arg as default brings no harm as internally char-by-char matching is done.\n\nThank you for the valuable coding standard tips too. Ishan corrected me on above stated points on other JIRA and it slipped my mind that I already attached a patch for this one with improper indentation and style. I will take care of this in future for sure. ",
            "author": "Amrit Sarkar"
        },
        {
            "id": "comment-15937061",
            "date": "2017-03-22T20:27:02+0000",
            "content": "Regarding,\n\nJust curious; is this feature driven by a search-app requirement or ...\n\nThis is follow-up of the conversation we had for SOLR-10153:\nDavid: .... Hmmm; do we even need hl.bs.type==CUSTOM if the user sets hl.bs.separatorChar? I guess it should be set so that there is consistency in mapping the type to an algorithm. Though maybe use the value SEPARATOR? And maybe just name this hl.bs.separator to open the door for possibly using an arbitrary length string in the future?\n\nI observed the code and understood it will not require major refactoring to change the current implementation for arbitrary length string. ",
            "author": "Amrit Sarkar"
        },
        {
            "id": "comment-15937656",
            "date": "2017-03-23T03:36:23+0000",
            "content": "BTW in multiple places in your code as comments plus this issue commentary I've seen this: len > 0 (as a comment) but in all cases you probably mean len > 1?\n\nRE resetting a failed match: Good point that your patch addresses the specific example I gave, and apparently any separator of length 2. Let me give a better example of length 3:  aab would fail to match aaab.  I just wrote a test for that to confirm it failed.  Here's another example of length 4 that may be more clear:  A separator of acab would fail to be detected in acacab.\n\ntestBreakOnCustomSeparator: you commented out a couple assertions because they didn't apply if the separator is > 1 length.  Instead you could add a condition to only test when length 1.\n\nRE my proposed single char constructor org: this is just syntactic sugar (i.e. convenience).  A bunch of changes in your diff would then be able to stay the same.\n\nI observed the code and understood it will not require major refactoring to change the current implementation for arbitrary length string.\n\nYeah I figured.  I envy the time you have on your hands to implement a feature that nobody has (yet) asked for   To be clear, I never asked or recommended.  I sometimes work on something fun to me too; scratch some itch.\n\nSpeaking of scratching itches... check out SimplePatternTokenizer (recently added to Lucene) and how it works with an Automaton.  Now I'm sure that would be useful to users; the original Highlighter (via Solr at least) had a regexp passage splitter.  One possible direction you might take is to leave CustomSeparatorBreakIterator be and instead do one taking a regexp/automaton... and then if some user wants to split on a string then they could use this guy. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15937734",
            "date": "2017-03-23T05:07:44+0000",
            "content": "len > 0 (as a comment) but in all cases you probably mean len > 1?\nYes, that is correct.\n\nLet me give a better example of length 3: aab would fail to match aaab. I just wrote a test for that to confirm it failed. Here's another example of length 4 that may be more clear: A separator of acab would fail to be detected in acacab.\nI see. The implemented is flawed, the algorithm I thought is incomplete and though some minor tweaking will make it work surely. I never considered repetitive pattern in the separator.\n\nTo be clear, I never asked or recommended. \nDavid, I completely understand and aware, I just pointed out the conversation which motivates me to look into it. I am thankful to you for taking your time out to provide healthy insights and feedback on the patch. I will not get discouraged if some of my work doesn't get into the main project, even I want to contribute which is useful not flawed.\n\nWith that, I will check out SimplePatternTokenizer and the Automaton part. Thank you for your time again, really appreciate that. Should I leave this JIRA as it is? or instead atleast fix the implementation? ",
            "author": "Amrit Sarkar"
        },
        {
            "id": "comment-15938378",
            "date": "2017-03-23T14:10:27+0000",
            "content": "With that, I will check out SimplePatternTokenizer and the Automation part.\n\nAwesome; I'm excited to see what you come up with   BTW you can use CharacterIterator.setIndex to reset the position back to where the match failed.\n\nShould I leave this JIRA as it is? or instead atleast fix the implementation?\n\nI think just let it be.  I think the desire for this feature (that nobody asked for) will vanish once the use-case can be addressed through a hypothetical PatternBreakIterator. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15952490",
            "date": "2017-04-02T01:35:03+0000",
            "content": "\n\nI looked into the SimplePatternTokenizer and how it does the pattern matching utilising finite-state deterministic automata. CharacterRunAutomaton is the one fundamental for the hypothetical PatternBreakIterator. It should not be much work considering everything has been implemented very extensively and SimplePatternTokenizer provides a perfect example. I will try to devise something out of it and update soon. ",
            "author": "Amrit Sarkar"
        }
    ]
}