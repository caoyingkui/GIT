{
    "id": "LUCENE-328",
    "title": "Some utilities for a compact sparse filter",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "Two files are attached that might form the basis for an alternative \nfilter implementation that is more memory efficient than one bit \nper doc when less than about 1/8 of the docs pass through the filter. \n\nThe document numbers are stored in RAM as VInt's from the Lucene index \nformat. These VInt's encode the difference between two successive \ndocument numbers, much like a PositionDelta in the Positions: \nhttp://jakarta.apache.org/lucene/docs/fileformats.html \n\nThe getByteSize() method can be used to verify the compression \nonce a SortedVIntList is constructed. \nThe precise conditions under which this is more memory efficient than \none bit per document are not easy to specify in advance.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--IntArraySortedIntList.java": "https://issues.apache.org/jira/secure/attachment/12312481/ASF.LICENSE.NOT.GRANTED--IntArraySortedIntList.java",
        "ASF.LICENSE.NOT.GRANTED--DocNrSkipper.java": "https://issues.apache.org/jira/secure/attachment/12312475/ASF.LICENSE.NOT.GRANTED--DocNrSkipper.java",
        "ASF.LICENSE.NOT.GRANTED--TestDocNrSkippers.java": "https://issues.apache.org/jira/secure/attachment/12312485/ASF.LICENSE.NOT.GRANTED--TestDocNrSkippers.java",
        "ASF.LICENSE.NOT.GRANTED--TestSortedVIntList.java": "https://issues.apache.org/jira/secure/attachment/12312474/ASF.LICENSE.NOT.GRANTED--TestSortedVIntList.java",
        "ASF.LICENSE.NOT.GRANTED--AndDocNrSkipper.java": "https://issues.apache.org/jira/secure/attachment/12312484/ASF.LICENSE.NOT.GRANTED--AndDocNrSkipper.java",
        "ASF.LICENSE.NOT.GRANTED--SortedVIntList.java": "https://issues.apache.org/jira/secure/attachment/12312472/ASF.LICENSE.NOT.GRANTED--SortedVIntList.java",
        "ASF.LICENSE.NOT.GRANTED--BitSetSortedIntList.java": "https://issues.apache.org/jira/secure/attachment/12312482/ASF.LICENSE.NOT.GRANTED--BitSetSortedIntList.java",
        "ASF.LICENSE.NOT.GRANTED--OrDocNrSkipper.java": "https://issues.apache.org/jira/secure/attachment/12312483/ASF.LICENSE.NOT.GRANTED--OrDocNrSkipper.java",
        "IntArraySortedIntList.java": "https://issues.apache.org/jira/secure/attachment/12320844/IntArraySortedIntList.java",
        "SkipFilter1.patch": "https://issues.apache.org/jira/secure/attachment/12331912/SkipFilter1.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-01-04T00:40:39+0000",
            "content": "Created an attachment (id=13878)\nSortedVIntList.java ",
            "author": "Paul Elschot",
            "id": "comment-12322102"
        },
        {
            "date": "2005-01-04T00:41:32+0000",
            "content": "Created an attachment (id=13879)\nintIterator.java ",
            "author": "Paul Elschot",
            "id": "comment-12322103"
        },
        {
            "date": "2005-01-05T19:25:44+0000",
            "content": "(From update of attachment 13878)\npublic SortedVIntList(BitSet bits) loops indefinitely. A \"+1\" is needed on the\nparamater to the last \"nextSetBit\" call.\n\nMark Harwood ",
            "author": "Mark Harwood",
            "id": "comment-12322104"
        },
        {
            "date": "2005-01-05T22:34:52+0000",
            "content": "Mark, \n\nThanks. I did not test BitSet constructor. \nI'll finish the test code and add that and \nyour correction later. \n\nPaul Elschot \n ",
            "author": "Paul Elschot",
            "id": "comment-12322105"
        },
        {
            "date": "2005-01-06T03:21:41+0000",
            "content": "Created an attachment (id=13901)\nJUnit test case for SortedVIntList\n\nThe only change needed to SortedVIntList to pass the tests\nis the\t\"+ 1\" in the BitSet constructor as Mark noted:\n\n  public SortedVIntList(BitSet bits) {\n    initBytes();\n\n    int lastInt = 0;\n    int nextInt = bits.nextSetBit(lastInt);\n    while (nextInt != -1) \n{\n      add(nextInt, lastInt);\n      lastInt = nextInt;\n      nextInt = bits.nextSetBit(lastInt + 1); // correction here\n    }\n\n    resizeBytes(lastBytePos);\n  }\n\nso I'm not attaching the corrected version.\n\nThe test code suppresses the test BitSet test for\nsome special cases: too large integers that cause\ntoo much memory used in the BitSet, and duplicates\nin the list of integers that cannot be represented\nin a BitSet.\n\nI'll try and not post untested code again \n\nRegards, and thanks again Mark,\nPaul Elschot ",
            "author": "Paul Elschot",
            "id": "comment-12322106"
        },
        {
            "date": "2005-01-17T02:00:57+0000",
            "content": "Created an attachment (id=14020)\nDocNrSkipper.java to replace intIterator.java\n\nImplementors of this interface can be used for SkipFilter ",
            "author": "Paul Elschot",
            "id": "comment-12322107"
        },
        {
            "date": "2005-01-17T02:04:26+0000",
            "content": "Created an attachment (id=14021)\nSortedVIntList.java providing a DocNrSkipper instead of an intIterator\n\nBasic data structure of differences stored as VInts unchanged. ",
            "author": "Paul Elschot",
            "id": "comment-12322108"
        },
        {
            "date": "2005-01-17T02:06:47+0000",
            "content": "Created an attachment (id=14022)\nTestSortedVIntList.java, adapted for DocNrSkipper ",
            "author": "Paul Elschot",
            "id": "comment-12322109"
        },
        {
            "date": "2005-02-09T04:43:20+0000",
            "content": "Created an attachment (id=14210)\nAssigned copyright to ASF ",
            "author": "Paul Elschot",
            "id": "comment-12322110"
        },
        {
            "date": "2005-02-09T04:44:16+0000",
            "content": "Created an attachment (id=14211)\nAssigned copyright to ASF ",
            "author": "Paul Elschot",
            "id": "comment-12322111"
        },
        {
            "date": "2005-02-09T04:46:37+0000",
            "content": "Created an attachment (id=14213)\nTestSortedVIntList.java, assigned copyright to ASF ",
            "author": "Paul Elschot",
            "id": "comment-12322112"
        },
        {
            "date": "2005-06-21T01:51:05+0000",
            "content": "Paul,\nWhat was the status with this code - its been a while since you posted it.\nI've got some extensions which could be added here:\n\n\tBitSet and IntArray based implementations of DocNrSkipper\n\tOrDocNoSkipper and AndDocNoSkipper wrapper implementations which both take 2\nDocNrSkippers in their constructor and offer \"OR\" or \"AND\" based iteration\nacross the sets' intersections. These are DocNrSkipper implementations too so\ncan be arbitrarily nested within each other (like BooleanQuery does).\nCheers\nMark\n\n ",
            "author": "Mark Harwood",
            "id": "comment-12322113"
        },
        {
            "date": "2005-06-21T05:14:30+0000",
            "content": "(In reply to comment #12) \n> Paul, \n> What was the status with this code - its been a while since you posted it. \n\nIt's working nicely for me. \n\n> I've got some extensions which could be added here: \n> * BitSet and IntArray based implementations of DocNrSkipper \n\nThese would be useful because they have different tradeoffs in memory use \nand runtime. \n\n> * OrDocNoSkipper and AndDocNoSkipper wrapper implementations which both take \n2 \n> DocNrSkippers in their constructor and offer \"OR\" or \"AND\" based iteration \n> across the sets' intersections. These are DocNrSkipper implementations too so \n> can be arbitrarily nested within each other (like BooleanQuery does). \n\nIn case you prefer DocNoSkipper or something else I don't mind. \nUsing both DocNo and DocNr in names will cause confusion, though. \n\nThe OrDocNoSkipper and AndDocNoSkipper would be good to implement \nconstant scoring queries. The top level OR iterator could then be \nimplemented by iterating on the DocNrSkippers separately into \na BitSet. \nDid you also consider more than two arguments to these AND and OR \niterators? \nFor completeness a \"NOT\" based iteration \nwould also be needed, but that can be added when needed. \n\nI'm interested in extending QueryParser to use these \nmechanisms on 'boolean' fields like dates and primary keys. \n\nTo easily implement boolean operations with a constant scoring term, \na \"close relative\" of TermScorer might directly implement the \nDoc\n{No/Nr}\nSkipper interface. Any opinions on a: \n\nclass TermConstantScorer \nextends Scorer \nimplements DocNrSkipper { \n  ... \n} \n\n? \n\nIt might also be good to put all new things related \nto skipping filters and constant scoring queries \nin (a) new subpackage(s) of org.apache.lucene.search. \n\nRegards, \nPaul Elschot \n\n ",
            "author": "Paul Elschot",
            "id": "comment-12322114"
        },
        {
            "date": "2005-06-21T18:19:39+0000",
            "content": "Created an attachment (id=15483)\nIntArraySortedIntList ",
            "author": "Mark Harwood",
            "id": "comment-12322115"
        },
        {
            "date": "2005-06-21T18:20:17+0000",
            "content": "Created an attachment (id=15484)\nBitSetSortedIntList ",
            "author": "Mark Harwood",
            "id": "comment-12322116"
        },
        {
            "date": "2005-06-21T18:20:42+0000",
            "content": "Created an attachment (id=15485)\nOrDocNrSkipper ",
            "author": "Mark Harwood",
            "id": "comment-12322117"
        },
        {
            "date": "2005-06-21T18:21:08+0000",
            "content": "Created an attachment (id=15486)\nAndDocNrSkipper ",
            "author": "Mark Harwood",
            "id": "comment-12322118"
        },
        {
            "date": "2005-06-21T18:21:42+0000",
            "content": "Created an attachment (id=15487)\nTestDocNrSkippers ",
            "author": "Mark Harwood",
            "id": "comment-12322119"
        },
        {
            "date": "2005-06-21T18:41:00+0000",
            "content": ">>Did you also consider more than two arguments to these AND and OR \niterators? \n\nThe ability to nest one OrDocNrSkipper in another is effectively a way of\nachieving the same result. Maybe a static helper method could be useful to\nconstruct these nested objects, given an array of DocNrSkippers that need to be\nOr-ed together. \nThinking about it though, there is an advantage to a \"flat\" arrangement rather\nthan a \"nested\" approach in the AND iterator. In a flat scheme the skipTo calls\nwill always be optimized to jumping to the largest docNr in the whole group\nwhereas a nested arrangement may make multiple skip calls within each nested\npair to achieve the same result. I'll look at redoing the AndDocNrSkipper with\nthis in mind.\n\nI'm using these classes for things other than query scoring at the moment so I\ndon't have an immediate answer to your questions on their possible application\nin scoring - I'll have to have a dig around the scoring code some more.  ",
            "author": "Mark Harwood",
            "id": "comment-12322120"
        },
        {
            "date": "2005-06-21T19:52:27+0000",
            "content": "Created an attachment (id=15488)\nAndDocNrSkipper with support for iterating multiple DocNrSkippers ",
            "author": "Mark Harwood",
            "id": "comment-12322121"
        },
        {
            "date": "2005-06-21T19:53:13+0000",
            "content": "Created an attachment (id=15489)\nOrDocNrSkipper with support for iterating multiple DocNrSkippers ",
            "author": "Mark Harwood",
            "id": "comment-12322122"
        },
        {
            "date": "2005-06-21T19:53:37+0000",
            "content": "Created an attachment (id=15490)\nTestDocNrSkippers ",
            "author": "Mark Harwood",
            "id": "comment-12322123"
        },
        {
            "date": "2005-09-23T03:47:34+0000",
            "content": "How about adding a next() or nextDocNr() to DocNrSkipper that doesn't take the current id as a parameter? It would allow more efficient implementations of DocNrSkipper when you want to simply iterate over all the docs. \n\nIt would also make some code using it a little cleaner. ",
            "author": "Yonik Seeley",
            "id": "comment-12330216"
        },
        {
            "date": "2005-10-16T00:22:03+0000",
            "content": "About adding a nextDocNr() without current doc argument to DocNrSkipper:\nI considered that but left it out initially for code simplicity in DocNrSkipper implementations.\n\nIt's much the same as with Scorer.next() and Scorer.skipTo(docNr), so it would fit\nin the environment of Lucene to add nextDocNr() without argument to DocNrSkipper.\nIn case someone has a real performance advantage of such an addition, it would\nbe worthwhile to have.\n\nRegards,\nPaul Elschot\n\n ",
            "author": "Paul Elschot",
            "id": "comment-12332155"
        },
        {
            "date": "2005-10-16T00:30:46+0000",
            "content": "I've been working a little on a faster version of BitSet.  That's one place where a stateful iterator implementing nextDocNr() can be faster than nextDocNr(docNr) , so I would like to see the nextDocNr() added.\n ",
            "author": "Yonik Seeley",
            "id": "comment-12332156"
        },
        {
            "date": "2005-11-22T07:07:03+0000",
            "content": "Removed unused code ",
            "author": "Mark Harwood",
            "id": "comment-12358203"
        },
        {
            "date": "2005-12-30T00:10:05+0000",
            "content": "I've been looking at this code and found some minor enhancements that could be done:\n\n1. Any particular reason for SortedVIntList not to implement DocNrSkipper interface, the method getDocNrSkipper() is there, but declaration is missing. \n\n2. Should getDocNrSkipper() DocNrSkipper interface throw IOException? I have tried to add TermDocsSortedIntList to the family, but all methods in TermDocs are throwing IOException, and it is not nice to eat silently this exception too early in DocNrSkipper. Better ideas to deal with that? \n\n3. Paul, why SkipFilter exists (here I refer to the JIRA-330 )? Wouldn't be better to use DocNrSkipper interface instead (SkipFilter does nothing but wrapping this interface). Also, the same question applies to IterFilter. Did I get something wrong here? \n\n\nMust say, excelent work! \nA lot of use cases related to Filtering and non-scoring  queries can be done efficiently with this  ",
            "author": "Eks Dev",
            "id": "comment-12361375"
        },
        {
            "date": "2006-01-02T05:33:33+0000",
            "content": "> 1. Any particular reason for SortedVIntList not to implement DocNrSkipper interface, the method getDocNrSkipper() is there, but declaration is missing. \n\nThe object returned by the getDocNrSkipper() method implements the interface by adding a bit of state\nfor the iteration over the document numbers. This allows more than one iterator on the (non modifiable)\nSortedVIntList.\n\n> 2. Should getDocNrSkipper() DocNrSkipper interface throw IOException? I have tried to add TermDocsSortedIntList to the family, but all methods in TermDocs are throwing IOException, and it is not nice to eat silently this exception too early in DocNrSkipper. Better ideas to deal with that? \n\nI have no problem with the addition of throwing an IOException to the DocNrSkipper interface.\nThe idea is to filter query results from RAM from which one would not normally expect\nan IOException , so one could also consider rethrowing the IOException wrapped in an Error.\nOTOH, the ability to obtain a DocNrSkipper directly from an index is certainly appealing,\nand then IOException is unavoidable.\n\n\n> 3. Paul, why SkipFilter exists (here I refer to the JIRA-330 )? Wouldn't be better to use DocNrSkipper interface instead (SkipFilter does nothing but wrapping this interface). Also, the same question applies to IterFilter. Did I get something wrong here? \n\nThe presence of class BitSet in the bits() method of Filter\nmakes it impossible to provide another implementation of a Filter.\nSkipFilter/DocNrSkipper are intended to be parallel to Filter/BitSet,\nand the DocNrSkipper interface allows alternative implementations.\nBoth SkipFilter and Filter are interfaces for factories/caches of for filter data structures.\n\nI'd like to somehow have these parallel paths merged, but I don't now how to\ndo that. Perhaps SkipFilter could allow backward compatibility by also\nproviding a bits() method, and use that method when it does not throw for\nexample an UnsupportedOperationException.\nAnother way would be to deprecate Filter in favour of SkipFilter, but that would\nhave a lot of backward compatibility issues, and perhaps also some\nperformance issues.\nThe FilteredQuery of LUCENE-330 allows for both paths to be used,\nboth paths are joined at line 211 in this FilteredQuery.\n\nThe IterFilter of LUCENE-330 was replaced by SkipFilter, I forgot\nto indicate that when I downloaded the replacement. I have just deleted\nIterFilter there.\n\n> Must say, excelent work! \n\nThanks. I should add that most of the hard work had already been done in\norg.apache.lucene.store.InputStream.readVInt() and\norg.apache.lucene.store.OutputStream.writeVInt().\n\n\nRegards,\nPaul Elschot ",
            "author": "Paul Elschot",
            "id": "comment-12361490"
        },
        {
            "date": "2006-05-15T23:17:49+0000",
            "content": "This patches Filter.java and IndexSearcher.java .\n\nFilter.java is modified to implement SkipFilter, to provide\na first step in a backward compatible way to slowly make Filter\nindependent of BitSet.\nIndexSearcher.java is modified to test for a DocNrSkipper from\na given Filter, and to use that. In that case also skipTo() is used\non the scorer of the query being filtered.\nThis patch requires org.apache.lucene.util.DocNrSkipper, which\navailable at this issue.\nAlso required is org.apache.lucene.search.SkipFilter, which\nis available at LUCENE-330.\n\nThe patch also contains some commented test code for Filter.java.\nThis test code always provides a DocNrSkipper (from the BitSet).\nWith and without this test code, all tests pass here.\n\nWhen extending Filter in this way, SkipFilter may not be necessary\nat all. I left it in to allow a path forward to complete independence \nfrom BitSet.\nIn case SkipFilter stays, it would be good to add (a) new method(s)\nto IndexSearcher allowing a SkipFilter to filter a query.\n\nThe DocNrSkipper interface contains only one method:\nnextDocNr(int docNr).\nIt may be good for performance to also add a nextDocNr()\nmethod without any argument, much like skipTo(target) and next()\non Scorer. IOW, I do not consider DocNrSkipper stable at this moment.\n\nI don't think this patch should be added to release 2.0. ",
            "author": "Paul Elschot",
            "id": "comment-12402339"
        },
        {
            "date": "2006-05-16T02:28:35+0000",
            "content": "Starting from SkipFilter1.patch as above, a replacement of Filter by SkipFilter in the various API's\n(Searcher, Searchable and implementors) is straightforward. The only thing further needed is a \nchecked cast to Filter in IndexSearcher.search(weight, filter, hitcollector) for the case when\nthe DocNrSkipper is null. (When that cast to Filter fails an IllegalArgumentException can be thrown).\nAfter that, all tests pass again, with and without the test code in Filter to always use a DocNrSkipper.\n\nThat means that it is easier than expected to replace Filter by SkipFilter altogether. ",
            "author": "Paul Elschot",
            "id": "comment-12402392"
        },
        {
            "date": "2006-06-28T00:59:02+0000",
            "content": "This issue is outdated now. The related LUCENE-584 has a new implementation. ",
            "author": "Paul Elschot",
            "id": "comment-12418078"
        },
        {
            "date": "2006-06-28T01:38:45+0000",
            "content": "Moved to LUCENE-584.\nThose of you who voted for this (5 votes!) may want to vote for LUCENE-584 now. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12418083"
        }
    ]
}