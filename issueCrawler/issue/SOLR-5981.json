{
    "id": "SOLR-5981",
    "title": "Please change method visibility of getSolrWriter in DataImportHandler to public (or at least protected)",
    "details": {
        "affect_versions": "4.0",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "I've been using the org.apache.solr.handler.dataimport.DataImportHandler for a bit and it's an excellent model and architecture.  I'd like to extend the usage of it to plugin my own DIHWriter, but, the code doesn't allow for it.  Please change ~line 227 in the DataImportHander class to be:\n\npublic SolrWriter getSolrWriter\n\ninstead of:\n\nprivate SolrWriter getSolrWriter\n\nor, at a minimum, protected, so that I can extend DataImportHandler and override this method.\n\nThank you sincerely in advance for the quick turn-around on this.  If the change can be made in 4.6.0 and upstream, that'd be ideal.\n\nThanks!",
    "attachments": {
        "SOLR-5981.patch": "https://issues.apache.org/jira/secure/attachment/12639913/SOLR-5981.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13967112",
            "date": "2014-04-11T21:21:46+0000",
            "content": "Can you please attach a time machine to the issue?  "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13967253",
            "date": "2014-04-11T23:51:52+0000",
            "content": "Unless someone else has a reason not to, I think we can probably change both of the private methods to protected.  They are only used locally, and if you have a good use case for extending the class, there's probably no reason we can't make that possible.  If your use case is compelling, perhaps you'd like to share it?\n\nIt is very unlikely you'll see this backported to the 4.6 branch.  There's a slim possibility that it could make it into the 4.7 branch at a later date.  Getting it into 4.8 is the earliest likely version.  I need to drive home from work right now, but when I get there, I may have some time to work on this and get it into the 4.8 branch, if nobody else jumps on it. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13967375",
            "date": "2014-04-12T03:30:41+0000",
            "content": "Proposed patch against trunk.  It is a little more invasive than I had originally planned.\n\nI changed everything that was private to protected, with the exception of the Logger object.  If an extending object wants to do some logging, it will need to create its own.\n\nI also did some work to eliminate some of the warnings in eclipse.  The imports required a number of deletions, so I opted to reorganize them and changed the wildcard import to specific imports.  I did not do anything to fix the rawtypes warnings, because I couldn't fix them without touching other files.\n\nThe getSolrWriter method did get some reformatting. "
        },
        {
            "author": "Aaron LaBella",
            "id": "comment-13967471",
            "date": "2014-04-12T10:49:43+0000",
            "content": "@Shawn, Thanks!  That was super fast.  The patch looks good to me.  And, for what it's worth, I had actually done a test before posting this issue in the svn trunk by changing the getSolrWriter method scope to public and it worked just fine, so, I'm sure changing everything to protected will be equally as helpful.  Thanks again, I think this is a great change to extend the usage of DataImportHandler.  I vote yes to the patch. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13967488",
            "date": "2014-04-12T12:31:43+0000",
            "content": "Aaron:\n\nIn future, please feel perfectly free to post any patches you create, see the \"How to contribute\" page here: http://wiki.apache.org/solr/HowToContribute. Don't worry whether it's polished or not. For more complex changes, if you're unsure whether something is a good idea, comment with //nocommit, that'll fail the 'ant precommit' step and people won't commit the patch but will be able to help with the work. It's a common practice.\n\nThe convention is to call the patch SOLR-####.patch, SOLR-5981.patch in this case and post successive versions of the patch with the same name, all the copies are kept and that makes it easier to see what the most recent one was.\n\nFWIW,\nErick\n "
        },
        {
            "author": "Aaron LaBella",
            "id": "comment-13967816",
            "date": "2014-04-13T13:08:38+0000",
            "content": "Erick,\n\nThanks \u2013 will do.  I probably would've done that but my SVN skills aren't that great.  I accidentally built from trunk first, and then realized I should've built against a branch.  Then, I tried to run git svn clone ... but that seemed to take forever as well.  Just curious \u2013 are there any plans to migrate lucene/solr to a git repository?  +1 for git from me \n\nThanks.\n\nAaron "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13970405",
            "date": "2014-04-16T04:18:35+0000",
            "content": "Switching to git has been discussed on the dev list quite recently.  There is widespread support for the idea, but a very vocal minority opposition as well.\n\nThere are two main git mirrors of the subversion repo, one at apache and one at github.  Search for \"lucene\" on this page for links to both of them:\n\nhttp://git.apache.org/ "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13970416",
            "date": "2014-04-16T04:43:27+0000",
            "content": "When it comes to whether to choose trunk or a branch for your work, that depends.  If you're working on something to try out that you want to put into production, you'll probably want branch_4x or one of the specific tags/branches.\n\nIf you're creating a patch that you hope will be committed to the project, generally the most recent trunk revision is the best option.  You'll want to create a patch that will apply cleanly against either the latest trunk or the latest stable branch (currently branch_4x). "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13970994",
            "date": "2014-04-16T12:56:50+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Aaron LaBella",
            "id": "comment-13980061",
            "date": "2014-04-24T18:24:21+0000",
            "content": "I'm not seeing this fix in the git mirror of lucene-solr?  I'm also wondering why it was moved from 4.8 into 4.9, I thought it was ready to go?\n\nThanks. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13980307",
            "date": "2014-04-24T21:25:56+0000",
            "content": "I created a patch, but it hasn't been committed.  The move to 4.9 was automatic because the issue is still open and Uwe is the release manager for 4.8.\n\ni was waiting to see if someone objected before I committed the patch, and then real life got in the way. "
        },
        {
            "author": "Aaron LaBella",
            "id": "comment-13980508",
            "date": "2014-04-24T23:47:44+0000",
            "content": "Shawn,\n\nNo problem, makes sense ... when you get a chance, can you go ahead and commit the patch?\nThanks! "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13981062",
            "date": "2014-04-25T14:37:13+0000",
            "content": "+1 LGTM\n\nAaron, can you tell us why you need to extend SolrWriter? I'm just curious. I don't have any objections to this change. "
        },
        {
            "author": "Aaron LaBella",
            "id": "comment-13981186",
            "date": "2014-04-25T16:01:21+0000",
            "content": "Sure ... I did a proof of concept to use the DataImportHandler framework to import into mongodb.  I think the architecture and functionality that DIH supports is fantastic (ie: evaluators, transformers, etc.), and the only \"import\" that mongodb supports (as far as I know) is a csv.\n\nSo, I took advantage of the solr code base here to do everything that the DIH does, ie: connect to a DB and get data, just instead of dumping the results into the solr index, I actually create mongodb documents.  Actually, my proof of concept supports two modes: insert and copy \u2013 the former just inserts into mongodb and skips solr, the second will insert documents into both.\n\nTurns out someone else had a similar idea, but, they re-wrote half the solr dih framework:\nhttp://code.google.com/p/sql-to-nosql-importer/\n\nMy solution only requires a small extension... I'm happy to share it with the solr community if anyone else wants it.  I think using mongodb as the document store and solr to index just the fields of the document you want to search on has the most potential for serious scalability.\n\nLet me know if you have any additional questions/thoughts/comments.\n\nThanks. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13981214",
            "date": "2014-04-25T16:28:44+0000",
            "content": "The idea with the introduction of the DIHWriter interface was that users can have DIH bring documents into other environments than Solr.  But because DIH runs within Solr, it still passes the SolrWriter to DocBuilder.  Really this should have been refactored not to do this (see SOLR-3671).  This way you wouldn't need to be extending SolrWriter at all. "
        },
        {
            "author": "Aaron LaBella",
            "id": "comment-13981251",
            "date": "2014-04-25T17:02:56+0000",
            "content": "James, good point.  But, I think the natural place to start extending things is by extending the DataImportHandler so that you can take advantage of a request handler, ie:\n\n<requestHandler name=\"/dih\" class=\"org.apache.solr.handler.dataimport.DataImportHandler\">\n\nOtherwise, you have to start doing all that work yourself. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13981880",
            "date": "2014-04-26T04:34:03+0000",
            "content": "James Dyer, I'm not very familiar with DIH code.  Are you saying that I shouldn't commit this patch? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13981887",
            "date": "2014-04-26T05:05:49+0000",
            "content": "I did a proof of concept to use the DataImportHandler framework to import into mongodb\n\nOh, that's awesome. I wanted to do something similar in SOLR-853 but didn't get the time to work on it. I'd like to have DIH as an API which can be used e.g. with SolrJ. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13983033",
            "date": "2014-04-28T14:15:35+0000",
            "content": "Shawn,\n\nI think its ok to commit, but to fully implement the DIHWriter and let the writers be truly plugabble is probably the best situation.  This patch is easier to do and what's the harm?  Should a future maintainer want to do it differently, it might not be backwards-compatible.  DIH is perpetually \"expeirmental, subject to change\" and I think the bar is low in this case.  And to give it a new use-case indexing a no-sql db, might make it more attractive to someone to maintain this in the future. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13984700",
            "date": "2014-04-29T19:45:22+0000",
            "content": "Aaron,\n\nPlease try the up-to-date patch I just attached to SOLR-3671.  I believe this is a cleaner approach to your goal.  With SOLR-3671 applied, all you have to do is create a DIHWriter implementation, then specify \"writerImpl=classname\" on your request (see oas.handler.dataimport.TestWriterImpl for a concrete example).  It should write the documents created by DIH to your custom Writer rather than to the default SolrWriter.\n\nIf the fix on SOLR-3671 meets your needs, then we can commit that rather than this one.  If it doesn't please clearly explain why SOLR-3671 is inadequate.  Thanks! "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13985143",
            "date": "2014-04-30T04:06:12+0000",
            "content": "I haven't looked at the other patch, but James understands the code a lot better than I do. I would expect that his patch is better. "
        },
        {
            "author": "Aaron LaBella",
            "id": "comment-13989625",
            "date": "2014-05-05T15:46:22+0000",
            "content": "James,\n\nI downloaded the patch from SOLR-3671 and refactored my code/test case and everything works fine.  Can you go ahead and commit that to branch_4x?  Your patch cleans up the code to use the DIHWriter interface, which is better anyhow.\n\nThanks. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13989765",
            "date": "2014-05-05T17:51:10+0000",
            "content": "Based on Aaron's comments, I committed SOLR-3671 and subsequently we do not need this one also. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13989789",
            "date": "2014-05-05T18:15:07+0000",
            "content": "Sounds good to me.  Thanks! "
        }
    ]
}