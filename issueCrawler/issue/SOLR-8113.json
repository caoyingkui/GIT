{
    "id": "SOLR-8113",
    "title": "Accept replacement strings in CloneFieldUpdateProcessorFactory",
    "details": {
        "components": [
            "update"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "5.3",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Presently CloneFieldUpdateProcessorFactory accepts regular expressions to select source fields, which mirrors wildcards in the source for copyField in the schema. This patch adds a counterpart to copyField's wildcards in the dest attribute by interpreting the dest parameter as a regex replacement string.",
    "attachments": {
        "SOLR-8113.patch": "https://issues.apache.org/jira/secure/attachment/12764681/SOLR-8113.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-01T20:56:31+0000",
            "author": "Gus Heck",
            "content": "Patch vs 5x ",
            "id": "comment-14940396"
        },
        {
            "date": "2015-10-01T21:03:31+0000",
            "author": "Gus Heck",
            "content": "This was motivated by the response to SOLR-8109. This bridges the gap in the suggested alternate solution, but does look like it will likely be a lot less performant. I couldn't find a way to re-use the match done by the FieldNameSelector, so the regex matches have to execute twice. All attempts I made to do that resulted in major API changes.\n\nThis is however more flexible, will not interfere with atomic updates (as copyField apparently does) and Allows further movement away from the use of copyField.\n\nIt would be nice if both this and SOLR-8109 to become available since speed is one tradeoff, and atomic update support etc is another. ",
            "id": "comment-14940413"
        },
        {
            "date": "2015-10-09T23:05:05+0000",
            "author": "Hoss Man",
            "content": "Gus, just read through your patch.\n\nMy chief concerns are:\n\n\n\tyou've redefined the semantics of how the dest string is interpreted when a fieldRegex is used to identify the source (so there's a back compat break there depending on the value of dest)\n\tYou've designed the \"config syntax\" for this new feature around the requirement that it can only be used if at least one fieldRegex is used to identify the source fields ...\n\n\n\nThe original purpose of the FieldSelector API was to provide more general appoaches for configuring which fields and UpdateProcessor should care about beyond simple string field name glob/pattern matching.  I think that pattern replacements for destination field naming should (in general) be independent of the original selection criteria, so that a user could say something like...\n\nI want to make a copy of any StrField in my documents such that the copy has the same name as the original but with _t appended.\n\n...and that shold be possible with this feature, regardless of wether the user is using an specific naming convention (ie \"*_s\") for all StrFields in their index, using some syntax that might look like this...\n\n\n<processor class=\"solr.CloneFieldUpdateProcessorFactory\">\n  <!-- existing source selector syntax -->\n  <lst name=\"source\">\n    <str name=\"typeClass\">solr.StrField</str>\n  </lst>\n  <!-- hypothetical new destination pattern syntax -->\n  <lst name=\"dest\">\n    <str name=\"pattern\">.*</str>\n    <str name=\"replacement\">$0_t</str>\n  </lst>\n</processor>\n\n\n\n...while prefix->prefix and suffix->suffix style of cloning similar to what copyField supports could also be specified.  Example: a <copyField src=\"*_s\" dest=\"*_t\" /> equivilent would be...\n\n\n<processor class=\"solr.CloneFieldUpdateProcessorFactory\">\n  <!-- existing source selector syntax -->\n  <lst name=\"source\">\n    <str name=\"fieldRegex\">^(.*)_s$</str>\n  </lst>\n  <!-- hypothetical new destination pattern syntax -->\n  <lst name=\"dest\">\n    <str name=\"pattern\">^(.*)_s$</str>\n    <str name=\"replacement\">$1_t</str>\n  </lst>\n</processor>\n\n\n\n\nThat's fairly verbose, but if we get the nuts & blots of the general case implemented, then it should be trivial to add syntactic sugar to simplify the configuration...\n\n\n<processor class=\"solr.CloneFieldUpdateProcessorFactory\">\n  <!-- hypothetical syntactic sugar equivilent to the above example -->\n  <!-- since no other source selector args are specified, assume pattern based cloning -->\n  <str name=\"pattern\">^(.*)_s$</str>\n  <str name=\"replacement\">$1_t</str>\n</processor>\n\n\n\nWhat do you think? ",
            "id": "comment-14951357"
        },
        {
            "date": "2015-10-10T00:14:30+0000",
            "author": "Gus Heck",
            "content": "Thanks for the review. You make some good points. I'd probably never want to ask the user to repeat patterns that had to match (or want to have to write validation around that)... nobody will want to type the regex twice, it could only lead to a mistake. Maybe it's as simple as using \"replacement\" rather than dest, and documenting/validating that only one or the other should be supplied. If neither is supplied default to ^(.*)$ for the fieldRegex? This results in something like:\n\n\n<processor class=\"solr.CloneFieldUpdateProcessorFactory\">\n  <lst name=\"source\">\n    <str name=\"typeClass\">solr.StrField</str>\n  </lst>\n  <str name=\"replacement\">$1_t</str> <!-- relies on default ^(.*)$ fieldRegex -->\n</processor>\n\n\nfor your first example. In the event they do want to specify a particular regex...\n\n\n<processor class=\"solr.CloneFieldUpdateProcessorFactory\">\n  <lst name=\"source\">\n    <str name=\"typeClass\">solr.StrField</str>\n    <str name=\"fieldRegex\">^(.*)_s$</str>\n  </lst>\n  <str name=\"replacement\">$1_t</str> \n</processor>\n\n\nand thus your second example (with no string type) looks like this:\n\n\n<processor class=\"solr.CloneFieldUpdateProcessorFactory\">\n  <lst name=\"source\">\n    <str name=\"fieldRegex\">^(.*)_s$</str>\n  </lst>\n  <str name=\"replacement\">$1_t</str>\n</processor>\n\n\nThis also seems to avoid the user needing to think about whether or not they should use $0 or $1. (except in some sort of funky exotic cases where they might be using both $0 and $1, $2, etc... which will involve them supplying a pattern anyway and should still work).  ",
            "id": "comment-14951432"
        },
        {
            "date": "2015-10-18T23:36:10+0000",
            "author": "Gus Heck",
            "content": "After chatting briefly with Hoss Man at Lucene/Solr Revolution it became clear that the key point of his suggestion was the complete separation of the selection phase and the replacement phase. The attached patch provides his suggested configuration options. This does introduce the possibility that a field could match the selector and not match the replacement pattern. I have handled this case by ignoring such fields (as if they were not selected) and logging a debug message. I also wound up creating my own entire unit test before I found the existing tests in FieldMutatingProcessorFactoryTest. I have moved the tests from there into my test class (CloneFieldUpdateFactoryTest) as well so that they are easier to find.  Both tests read the same config file. ",
            "id": "comment-14962687"
        },
        {
            "date": "2015-10-22T12:56:30+0000",
            "author": "Gus Heck",
            "content": "Any thoughts on my latest patch Hoss Man? Others? comments welcome.  ",
            "id": "comment-14969112"
        },
        {
            "date": "2015-10-23T18:33:42+0000",
            "author": "Hoss Man",
            "content": "Gus: I've been out sick most of this week, and am now way behind on a bunch of stuff \u2013 but this issue is on my radar, and I will try to review ASAP. ",
            "id": "comment-14971561"
        },
        {
            "date": "2015-10-28T03:54:39+0000",
            "author": "Hoss Man",
            "content": "\nGus: This is definitely along the lines of what I had in mind \u2013 and i like your test refactoring / additions.\n\nI've updated the patch as I reviewed \u2013 mainly in the ariea of documentation and additional error handling/messages when parsing the config...\n\n\n\n\tremoved stray addition to FirstFieldValueUpdateProcessorFactory javadocs ... left over from old patch?\n\tCloneFieldUpdateProcessorFactory javadocs:\n\t\n\t\tfixed <pattern> to <str name=\"pattern\"> (and likewise for replacement\n\t\tclarify what the the literals & types were for the new config in the description\n\t\treworded example description to be bulleted list instead of run on sentence(s)\n\t\tmoved/reworded \"common case\" explanation to the end, after all the major functionality is explained, to clarify it's syntactic sugar and put next to it's example.\n\t\treplaced the one off comment about FirstValueUpdateProcessor with a more general comment about cloning into multivalue fields and various FieldValueSubsetUpdateProcessorFactory options\n\t\n\t\n\tCloneFieldUpdateProcessorFactoryTest\n\t\n\t\tstandardized indenting\n\t\tupdated testCloneFieldExample to include the additions made to the javadoc example\n\t\tupdated testCloneCombinations to include a first value clone test\n\t\t\n\t\t\tadded corrisponding clone-first to solrconfig-update-processor-chains.xml\n\t\t\n\t\t\n\t\tupdated testCloneField with more equivilence tests \u2013 this helps ensure we've got good coverage for the case where multi-selector + pattern + replacement that results in single dest field getting values from multiple source fields.\n\t\t\n\t\t\tadded corrisponding new clone-single-regex, clone-multi-regex, clone-array-regex, clone-selector-regex and clone-simple-regex-syntax to solrconfig-update-processor-chains.xml as needed\n\t\t\n\t\t\n\t\n\t\n\tCloneFieldUpdateProcessorFactory code:\n\t\n\t\tfixed getInstance to use getSourceSelector for safe error handling (eliminates the unused warning you asked about)\n\t\trefactored init method into 2 helper methods specific to the two syntax styles (readability)\n\t\ttweaked config error messages & added additional error handling of bad config combos\n\t\timproved error reporting when pattern is invalid and can't be compile\n\t\n\t\n\n\n\nMy one remaining concern with this patch is the use of Matcher.replaceFirst ... i feel like we should probably be using Matcher.replaceAll since it would provide a feature superset of replaceFirst (ie: using replaceAll can still support all the current patch behavior via start/end bound constraints + capture groups, but replaceFirst can't support everything possible with replaceAll).\n\nGus: What do you think? ",
            "id": "comment-14977672"
        },
        {
            "date": "2015-10-28T20:57:05+0000",
            "author": "Gus Heck",
            "content": "All your updates look fine. I notice that most of my tests disappeared, but probably there was a lot of overlap with your original tests (which also verified boost maintenance whereas mine did not). I'm trusting that you are happy with the coverage there.\n\nI also added 2 more validations of config parameters to give nicer messages if someone uses 3 or 4 of the possible parameters (src/dest/pattern/replacement). This would have been caught by the \"extra params\" check at the end but is less clear. I also moved the extra params check to the main method as a safety net for all cases.\n\nI had been on the fence WRT replace vs replaceAll, (simplicity vs flexibility) but in looking around I notice FieldNameMutatingUpdateProcessor uses replace all. Consistency seems like a good idea.  ",
            "id": "comment-14979214"
        },
        {
            "date": "2015-10-29T01:12:38+0000",
            "author": "Gus Heck",
            "content": "Correction... a combination of the formatting change and my memory inflating the number of tests in the test class fooled me into thinking my tests disappeared when I looked too quickly. They are in fact there, so I think we're good to go per our conversation tonight. ",
            "id": "comment-14979619"
        },
        {
            "date": "2015-11-03T00:01:38+0000",
            "author": "Hoss Man",
            "content": "\nPatch Updates...\n\n\tFixed javadocs to refer to replaceAll (code change was already previous patch)\n\tadded testCloneFieldRegexReplaceAll to prove replaceAll usecases would work.\n\t\n\t\ttest initially failed due to the Matcher.replaceAll being conditional on a succesful \"Mather.match()\" call.\n\t\tReplaced \"Mather.match()\" with a \"Matcher.find()\" call to ensure replaceAll would work as intended\n\t\n\t\n\tUpdated the javadocs example config (and corrisponding test config) refering to \"ending in _price\" to actually use string ending bounds.\n\tUpdated the test configs to include the start/end boundary rules for (^feat(.*)s$) so it matches the javadocs\n\n\n\n\n...i plan to commit & start backporting as soon as my full test + precommit finishes ",
            "id": "comment-14986317"
        },
        {
            "date": "2015-11-03T00:43:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1712195 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1712195 ]\n\nSOLR-8113: CloneFieldUpdateProcessorFactory now supports choosing a dest field name based on a regex pattern and replacement init options. ",
            "id": "comment-14986387"
        },
        {
            "date": "2015-11-03T03:10:45+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1712204 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1712204 ]\n\nSOLR-8113: CloneFieldUpdateProcessorFactory now supports choosing a dest field name based on a regex pattern and replacement init options. (merge r1712195) ",
            "id": "comment-14986575"
        },
        {
            "date": "2015-11-03T04:30:35+0000",
            "author": "Hoss Man",
            "content": "Thanks Gus. ",
            "id": "comment-14986664"
        }
    ]
}