{
    "id": "LUCENE-5170",
    "title": "Add getter for reuse strategy to Analyzer, make AnalyzerWrapper's reuse strategy configureable, fix strategy to be stateless",
    "details": {
        "components": [
            "core/other",
            "modules/analysis"
        ],
        "fix_versions": [
            "4.5",
            "6.0"
        ],
        "affect_versions": "4.4",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "If you write an Analyzer that wraps another one (but without using AnalyzerWrapper) you may need use the same reuse strategy in your wrapper. This is not possible as there is no way to get the reuse startegy (private field and no getter).\n\nAn example is ES's NamedAnalyzer, see my comment: https://github.com/elasticsearch/elasticsearch/commit/b9a2fbd8741aa1b9beffb7d2922fc9b4525397e4#src/main/java/org/elasticsearch/index/analysis/NamedAnalyzer.java\n\nThis would add a getter, just a 3-liner.",
    "attachments": {
        "LUCENE-5170.patch": "https://issues.apache.org/jira/secure/attachment/12597694/LUCENE-5170.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-08-13T10:01:41+0000",
            "content": "Patch.\n\nMaybe we should rethink AnalyzerWrapper, too. So it would use the strategy of the wrapped Analyzer, too, unless you have something field-specific? In that case your would pass explicit reuse strategy in the ctor, but the default is the one of the inner analyzer. ",
            "author": "Uwe Schindler",
            "id": "comment-13738045"
        },
        {
            "date": "2013-08-13T10:49:58+0000",
            "content": "+1 ",
            "author": "Simon Willnauer",
            "id": "comment-13738077"
        },
        {
            "date": "2013-08-13T10:57:45+0000",
            "content": "+1. I agree we should rethink AnalyzerWrapper too.\n\nmy preference: just make it a mandatory arg to the protected ctor of this class.\n ",
            "author": "Robert Muir",
            "id": "comment-13738089"
        },
        {
            "date": "2013-08-13T11:57:22+0000",
            "content": "Robert: After reviewing the code:\nThe fixed-nonchangeable \"default\" in AnalyzerWrapper is PerField, which is a large overhead and should only be used in stuff like PerFieldAnalyzerWrapper (this class should call super(PerField) in its own ctor). But for other use cases of AnalyzerWrapper I have to use global strategy or the one of a wrapped analyzer). It looks like the current impl in AnalyzerWrapper is somehow assuming you want to wrap per field.\n\nI would suggest to make it mandatory in Lucene trunk, and add the missing ctor in Lucene 4.x, too. The default one should be deprecated with a hint that it might be a bad idea to use this default.\n\nMy use case is:\nI have lots of predefined Analyzers for several languages or functionality in my search application. I have some additional AnalyzerWrappers around that simply turn any other analyzer into a phonetic one or ASCIIFolding one (so I can use that with another field). So, my wrapper just takes one of these per-language Analyzers and wraps with another additional TokenFilter. As the underlying Analyzer is global reuse, I need to make the wrapper global, too - currently impossible. Per field is a waste of resources in this case.\n\nOnly PerFieldAnalyzerWrapper should use PerField strategy hardcoded (as it is per field), the base class not!\n\nSo I would suggest to make the base class AnalyzerWrapper copy the ctor of the superclass Analyzer and deprecate the default ctor in 4.x. For my above example (to wrap another analyzer), I still need the resuse strategy of the inner analyzer, so I need set getter on Analyzer.java, too (see current patch). ",
            "author": "Uwe Schindler",
            "id": "comment-13738113"
        },
        {
            "date": "2013-08-13T12:03:16+0000",
            "content": "\nI would suggest to make it mandatory in Lucene trunk, and add the missing ctor in Lucene 4.x, too. The default one should be deprecated with a hint that it might be a bad idea to use this default.\n\nYes, this is exactly what i think we should do. i really should be a mandatory parameter today (but cannot really work without also having the getter available!) ",
            "author": "Robert Muir",
            "id": "comment-13738120"
        },
        {
            "date": "2013-08-13T12:28:06+0000",
            "content": "There is a major problem:\nStrategy is no strategy at all, it holds state!\n\nSo my idea to make the getter available is wrong, because it would make the private \"state\" of the analyzer public to the outside! So this is a misdesign in the API. The correct way to do this would be:\n\nMake the strategy a ENUM like class (no state). The ThreadLocal should not be sitting on the strategy, the strategy should only implement the strategy, not also take care of storing the data in the ThreadLocal.\n\nI have no idea how to fix this - it looks like we need to backwards break to fix this! ",
            "author": "Uwe Schindler",
            "id": "comment-13738132"
        },
        {
            "date": "2013-08-13T12:34:54+0000",
            "content": "The definition of the strategy pattern can be found here, no state involved: http://en.wikipedia.org/wiki/Strategy_pattern ",
            "author": "Uwe Schindler",
            "id": "comment-13738143"
        },
        {
            "date": "2013-08-13T14:11:15+0000",
            "content": "\nMake the strategy a ENUM like class (no state). The ThreadLocal should not be sitting on the strategy, the strategy should only implement the strategy, not also take care of storing the data in the ThreadLocal.\n\nI like this idea, i think it could simplify the thing a lot.\n\n\nI have no idea how to fix this - it looks like we need to backwards break to fix this!\n\nPersonally i support that in this case: because i think we can minimize the breaks at the end of the day.\n\nFor example if we switch to enums, in 4.x, we could still allow 'instantiation' but its just useless (since the object is stateless) and deprecated. and the 'constants' would be declared like MultiTermQuery rewrite? ",
            "author": "Robert Muir",
            "id": "comment-13738258"
        },
        {
            "date": "2013-08-14T10:07:42+0000",
            "content": "Attached is my patch which fixes the stateful strategy, which is a serious bug:\n\n\tThe strategy is now looking like RewriteMethod of MTQ\n\tThe strategy is no longer Closeable (because its stateless)\n\tThe ThreadLocal is now part of Analyzer itsself (private), the reuse strategy has access to it through the protected final getters and setters (taking the Analyzer instance like in RewriteMethod)\n\tThe ThreadLocal is closed by the analyzer like before, just directly not through the strategy\n\tThe 2 default strategies are available as static final constants (singletons in trunk): GLOBAL_REUSE_STRATEGY and PER_FIELD_REUSE_STRATEGY\n\n\n\nTo preserve backwards:\n\n\tThe public constructors of the implementation classes were kept alive, so code using the ReuseStrategy in the old-fashined stateful way can be kept unchanged. It only reports a deprecation warning to use the constants instead.\n\tWe only have a backwards break for users that implement their own strategy, which is unlikely, because what else can you do in a strategy? I have no idea, maybe reuse components by checksum of field name? A fieldname prefix (this looks like the only sensible use-case)? Maybe have a lifetime (reuse only for a limited time because synonyms update)?\n\n\n\nAll tests pass. ",
            "author": "Uwe Schindler",
            "id": "comment-13739475"
        },
        {
            "date": "2013-08-14T10:23:17+0000",
            "content": "Javadocs fixes. I think, it is ready to commit, I just want to have some opinions! Robert? ",
            "author": "Uwe Schindler",
            "id": "comment-13739491"
        },
        {
            "date": "2013-08-14T12:39:38+0000",
            "content": "This patch removes the crazy NPE handling which makes no sense as it is not performance critical. ",
            "author": "Uwe Schindler",
            "id": "comment-13739606"
        },
        {
            "date": "2013-08-14T13:50:32+0000",
            "content": "+1\n\nThanks for cleaning this up! ",
            "author": "Robert Muir",
            "id": "comment-13739675"
        },
        {
            "date": "2013-08-14T14:41:38+0000",
            "content": "Commit 1513903 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1513903 ]\n\nLUCENE-5170: Add getter for reuse strategy to Analyzer, make AnalyzerWrapper's reuse strategy configurable, fix strategy to be stateless ",
            "author": "ASF subversion and git services",
            "id": "comment-13739727"
        },
        {
            "date": "2013-08-14T14:44:57+0000",
            "content": "Commit 1513908 from Uwe Schindler in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1513908 ]\n\nMerged revision(s) 1513903 from lucene/dev/trunk:\nLUCENE-5170: Add getter for reuse strategy to Analyzer, make AnalyzerWrapper's reuse strategy configurable, fix strategy to be stateless ",
            "author": "ASF subversion and git services",
            "id": "comment-13739733"
        },
        {
            "date": "2013-08-14T14:52:38+0000",
            "content": "Commit 1513914 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1513914 ]\n\nLUCENE-5170: Remove deprecated code ",
            "author": "ASF subversion and git services",
            "id": "comment-13739739"
        },
        {
            "date": "2013-10-05T10:19:14+0000",
            "content": "4.5 release -> bulk close ",
            "author": "Adrien Grand",
            "id": "comment-13787104"
        }
    ]
}