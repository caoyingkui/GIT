{
    "id": "LUCENE-483",
    "title": "QueryParser.getFieldQuery(String,String) doesn't set default slop on MultiPhraseQuery",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "1.9"
        ],
        "affect_versions": "1.9",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "there seems to have been an oversight in calling mph.setSlop(phraseSlop) in QueryParser.getFieldQuery(String,String).  The result being that in some cases, the \"default slop\" value doesnt' get set right (sometimes, ... see below).\n\nwhen i tried amending TestMultiAnalyzer to demonstrate the problem, I discovered that the grammer aparently always calls getFieldQuery(String,String,int) \u2013 even if no \"~slop\" was specified in the text being parsed, in which case it passes the default as if it were specified.\n(just to clarify: i haven't comfirmed this from a detailed reading of the grammer/code, it's just what i've deduced based on observation of the test)\n\nThe problem isn't entirely obvious unless you have a subclasses of QueryParser and try to call getFieldQuery(String,String) directly.   \n\nIn my case, I had overridden getFieldQuery(String,String) to call super.getFieldQuery(String,String) and wrap the result in a DisjunctionMaxQuery ... I don't care about supporting the ~slop syntax, but i do care about the default slop and i wasn't getting lucky the way QueryParser does, because getFieldQuery(String,String,int) wasn't getting back something it could call setSlop() with the (default) value it got from the javacc generated code.\n\nMy description may not make much sense, but hopefull the test patch i'm about to attach will.  The fix is also in the patch, and is fairly trivial.\n\n(disclaimer: i don't have javacc installed, so I tested this patch by manually making the change to both QueryParser.java ... it should only be commited by someone with javacc who can regen the java file and confirm that my jj change doesn't have some weird bug in it)",
    "attachments": {
        "LUCENE-483.patch": "https://issues.apache.org/jira/secure/attachment/12321700/LUCENE-483.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-01-05T11:50:56+0000",
            "content": "patch containing test changes demonstrating the problem, and the fix in both QueryParser.jj and QueryParser.java ",
            "author": "Hoss Man",
            "id": "comment-12361809"
        },
        {
            "date": "2006-01-06T07:27:42+0000",
            "content": "Hmmm, it seems like the problem is that the Query isn't fully formed after a call to getFieldQuery(String,String).  getFieldQuery(String,String,int slop) finishes things up by setting the slop, but, if it's no longer a PhraseQuery or MultiPhraseQuery, the slop value is lost.\n\nReally, it seems like the method constructing the query should have access to any specified slop, and should also be able to distinguish if slop was specified at all.\n\nI'm not sure what the right fix is, but your patch is better than the current state.\nI'll look into how to deal with the JavaCC stuff.\n ",
            "author": "Yonik Seeley",
            "id": "comment-12361888"
        },
        {
            "date": "2006-01-06T07:44:36+0000",
            "content": "\n> Really, it seems like the method constructing the query should have access to any\n> specified slop, and should also be able to distinguish if slop was specified at all.\n\nWell, the method for construction the query when slop is specificed in the string is getFieldQuery(String,String,int) \u2013 so it does have the specified slop (third param).\n\nSomething that might be worth considering is inverting the delegation logic \u2013 move the meat of getFieldQuery(String,String) into getFieldQuery(String,String,int) and make the two arg version delegate to the three arg version (specifying a slop of whatever this.phraseSlop is)   the down side to that is that existing subclasses which override the three arg version could find themselves with an infinite recursive loop. ",
            "author": "Hoss Man",
            "id": "comment-12361890"
        },
        {
            "date": "2006-01-09T07:42:34+0000",
            "content": "I made the patch to QueryParser.jj and rebuilt with JavaCC 3.2 just to be safe.\nI tried JavaCC 4.0 first, but it doesn't currently work. ",
            "author": "Yonik Seeley",
            "id": "comment-12362133"
        },
        {
            "date": "2006-02-16T03:19:24+0000",
            "content": "\n\nYonik: the PATCH also included additions to TestMultiAnalyzer.java but those don't seem to have been commited.\n ",
            "author": "Hoss Man",
            "id": "comment-12366515"
        },
        {
            "date": "2006-02-16T03:36:27+0000",
            "content": "Thanks for the heads up.  I just committed it. ",
            "author": "Yonik Seeley",
            "id": "comment-12366517"
        }
    ]
}