{
    "id": "SOLR-12587",
    "title": "Reuse Lucene's PriorityQueue for the ExportHandler",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "We have a priority queue in Lucene\u00a0 org.apache.lucene.utilPriorityQueue . The Export Handler also implements a PriorityQueue org.apache.solr.handler.export.PriorityQueue\u00a0. Both are obviously very similar with minor API differences.\u00a0\n\n\u00a0\n\nThe aim here is to reuse Lucene's PQ and remove the Solr implementation.",
    "attachments": {
        "SOLR-12587.patch": "https://issues.apache.org/jira/secure/attachment/12932968/SOLR-12587.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-07-24T19:12:52+0000",
            "content": "Hi Joel Bernstein\n\nI'm trying to understand why we need the cache\u00a0array in SortQueue\u00a0 .\u00a0\n\nIn reset could we simply do this?\u00a0\n\nprotected void reset() {\n  Object[] heap = getHeapArray();\n  for (int i=1; i< heap.length; i++) {\n    heap[i] = proto.copy();\n  }\n  size = maxSize;\n}\n\n\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16554688"
        },
        {
            "date": "2018-07-24T20:15:30+0000",
            "content": "Here's a version of SortQueue looks functionally the same .\n\nclass SortQueue extends PriorityQueue<SortDoc> {\n\n  final private SortDoc proto;\n\n  public SortQueue(int len, SortDoc proto) {\n    super(len);\n    this.proto = proto;\n  }\n\n  protected boolean lessThan(SortDoc t1, SortDoc t2) {\n    return t1.lessThan(t2);\n  }\n\n  // reset get's called even before we collect the first set of docs so we can initialize\n  // heap with proto here\n  protected void reset() {\n    Object[] heap = getHeapArray();\n    for (int i=1; i< heap.length; i++) {\n      heap[i] = proto.copy();\n    }\n    size = maxSize;\n  }\n\n}\n\n\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16554746"
        },
        {
            "date": "2018-07-24T23:06:44+0000",
            "content": "I've put out a patch which is just exploring the idea . Tests pass but wanted to see what others feel about this before spending more time\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16554890"
        },
        {
            "date": "2018-07-25T16:18:08+0000",
            "content": "I think you could fix your first nocommit by passing prepopulate=true to the constructor and implementing getSentinelObject with {{return proto.copy(); }}. For your reset() method, you could also take advantage of the fact that PriorityQueue extends Iterable so you don't need casts or to know that indices start at 1 in the heap array. ",
            "author": "Adrien Grand",
            "id": "comment-16555903"
        },
        {
            "date": "2018-07-25T16:59:08+0000",
            "content": "Hi Adrien,\n\nI thought about that approach initially but won't proto be null at that point?\n\npublic SortQueue(int len, SortDoc proto) {\n  super(len, true);\n  this.proto = proto;\n..\n}\n\n@Override\nprotected SortDoc getSentinelObject() {\n  return proto.copy(); //proto has not been initialized\n}\n ",
            "author": "Varun Thacker",
            "id": "comment-16555979"
        },
        {
            "date": "2018-07-25T20:53:46+0000",
            "content": "Oh I see, a chicken-and-egg issue! I think this getSentinelObjet is designed to be implemented in an anonymous class. Maybe we should change PriorityQueue to take eg. a Supplier<T> in place of the boolean prepopulate and remove getSentinelObject. ",
            "author": "Adrien Grand",
            "id": "comment-16556261"
        },
        {
            "date": "2018-07-26T06:44:48+0000",
            "content": "I opened LUCENE-8428 for discussion. ",
            "author": "Adrien Grand",
            "id": "comment-16556968"
        },
        {
            "date": "2018-07-26T06:45:45+0000",
            "content": "Thanks Adrien! I worked on a prototype patch and i'll post in the on the lucene Jira tomorrow\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16556970"
        },
        {
            "date": "2018-07-26T18:46:52+0000",
            "content": "Updated patch which will apply cleanly once\u00a0LUCENE-8428 has been committed ",
            "author": "Varun Thacker",
            "id": "comment-16558743"
        },
        {
            "date": "2018-08-20T05:03:26+0000",
            "content": "When I took a deeper look at it today there are still a few subtle things that wasn't obvious to me :\n\n\tThe Solr PQ has a reset method which resets the size to maxSize and then does a\u00a0System.arraycopy . If we were to use the Lucene PQ we don't have a way to reset size to maxSize . Secondly we would no longer do\u00a0System.arraycopy and instead reset the heap in the for loop which is probably slower and hence was done like this in the first place? A 25M export on the \"id\" field used to take 7m15s\u00a0now took 10.54s\u00a0when i\u00a0simulated this by\u00a0not reusing the PQ and\u00a0creating a new PQ for every 30k docs collected in ExportWriter (which was earlier using the reset )\n\nprotected void reset() {\n  Object[] heap = getHeapArray();\n  if(cache != null) {\n    System.arraycopy(cache, 1, heap, 1, heap.length-1);\n    size = maxSize;\n  } else {\n    populate();\n  }\n}\n\n\n\n\n\n\tWe could perhaps do a \"true\" reset and even avoid doing a\u00a0System.arraycopy , if we never nulled the\u00a0object we popped and relied on size do do the right thing. Then reset would simply change\u00a0call SortDoc#reset and change back size to maxSize.\u00a0We would\u00a0save a lot of objects generated\n\npublic final T pop() {\n  if (size > 0) {\n    T result = heap[1];       // save first value\n    heap[1] = heap[size];     // move last to first\n    heap[size] = null;        // permit GC of objects //<---------- remove this line\n    size--;\n    downHeap();               // adjust heap\n    return result;\n  } else {\n    return null;\n  }\n}\n// pseudo code for reset\nprotected void reset() {\n  Object[] heap = getHeapArray();\n  for (int i = 1; i < heap.length; i++) {\n    ((SortDoc) heap[i]).reset();\n  }\n  size = maxSize;\n}\n\n\u00a0\n\n\n\nIn approach 1 , we'd essentially be giving up on whatever optimizations\u00a0System.arraycopy does ( being a native call ) vs relying on a for loop.\u00a0\nIn approach 2 , we'd basically be creating some sort of a reusable PQ\u00a0\n\n\n\nThoughts ? ",
            "author": "Varun Thacker",
            "id": "comment-16585428"
        }
    ]
}