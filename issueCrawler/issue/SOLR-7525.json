{
    "id": "SOLR-7525",
    "title": "Add ComplementStream to the Streaming API and Streaming Expressions",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Implemented",
        "priority": "Minor"
    },
    "description": "This ticket adds a ComplementStream to the Streaming API and Streaming Expression language.\n\nThe ComplementStream will wrap two TupleStreams (StreamA, StreamB) and emit Tuples from StreamA that are not in StreamB.\n\nStreaming API Syntax:\n\nComplementStream cstream = new ComplementStream(streamA, streamB, comp);\n\n\n\nStreaming Expression syntax:\n\n\ncomplement(search(...), search(...), on(...))\n\n\n\nInternal implementation will rely on the ReducerStream. The ComplementStream can be parallelized using the ParallelStream.",
    "attachments": {
        "SOLR-7525.patch": "https://issues.apache.org/jira/secure/attachment/12769659/SOLR-7525.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-27T12:42:55+0000",
            "author": "Dennis Gove",
            "content": "I've got a patch for this that also includes an IntersectStream (return tuples from streamA that also exist in streamB). I just want to add some additional tests before a post the patch. ",
            "id": "comment-14976307"
        },
        {
            "date": "2015-10-29T22:58:28+0000",
            "author": "Dennis Gove",
            "content": "Includes both ComplementStream and IntersectStream. All tests pass.\n\nDepends on SOLR-8198. ",
            "id": "comment-14981511"
        },
        {
            "date": "2015-12-11T03:51:19+0000",
            "author": "Joel Bernstein",
            "content": "Ah, I didn't realize there was already a patch for this. I can add the parallel tests tomorrow. ",
            "id": "comment-15052115"
        },
        {
            "date": "2015-12-18T04:14:31+0000",
            "author": "Jason Gerlowski",
            "content": "Hi all.\n\nI wanted to take a stab at adding the missing parallel tests that Joel\nalluded to in his most recent comment.\n\nWhen I went to pull it down though, I realized that this patch no longer\napplies cleanly on top of the recent changes to ReduceOperation/ReducerStream.\n\nTo main highlights of the recent ReducerStream changes are:\n  1.) ReducerStream now requires a ReducerOperation.\n  2.) (Currently), the only ReducerOperation implementation is GroupOperation\n  3.) GroupOperation requires a StreamComparator, and an int 'size'.  The \n      size is used to limit the number of tuples to hold on to in each grouping.\n      When the upper bound is reached, the least tuple is dropped (according to the \n      comparator).\n  4.) The only StreamComparator implementations are FieldComparator, and \n      MultiFieldComparator, both of which require a field name.\n\nThe net effect of these changes is that IntersectStream and ComplementStream need\na field name at creation time (because they rely on ReducerStream, which relies on\nReducerOperation, which...).\n\nAs I see it, IntersectStream and ComplementStream shouldn't need\nthis chain of objects.  AFAICT, since their job is to do logical operations,\nit'd be wrong for their internal ReducerStream to drop tuples based on an\narbitrary limit.  And since we don't want to drop tuples, there's no need for a\nStreamComparator either.\n\nTwo resolutions come to mind here:\n  1.) Modify GroupOperation so that the 'size' (and comparator) can be optional.\n  2.) Create a no-op StreamComparator, or one that always returns \"equal\", to pass\n      into the existing GroupOperation.\n\nI'm leaning towards the first option.  It seems more generally useful, and creating\na no-op class seems like a bit of a hack.\n\nAnyone have opinions/thoughts on this?  Have I missed something obvious/simple here,\nor misread the code entirely?  Is there another option to resolve this conflict that\nI missed?\n\nIn any case, just wanted to get some feedback on the best way to resolve this change\nbefore I move onto actually adding the new tests. ",
            "id": "comment-15063407"
        },
        {
            "date": "2015-12-18T04:55:30+0000",
            "author": "Dennis Gove",
            "content": "I'll rebase this off trunk so it is a little cleaner but I think the use of ReducerStream still holds. \n\nThe purpose of Complement and Intersect is to return tuples in A which either do or do not exist in B. The tuples in B aren't used for anything and are dropped as soon as possible. The reason they make use of the ReducerStream is because B having 1 instance of some tuple found in A is the same as B having 100 instances of some tuple found in A. Whether its 1 or 100 the tuple exists in B so its twin in A can either be returned from A or not. For this reason the size of the ReducerStream can always just be 1 because we only care about the first one and all others can be dropped from B. The fieldName (or fieldNames because you can do an intersect on N fields) provided to the ReducerStream are the fields the Intersect or Complement streams are acting on. \n\nEssentially, the goal is to take all the tuples in B and reduce them down to a unique list of tuples where uniqueness is defined over the fields that the intersect or complement is being checked over. Given that B is a set of unique tuples it is much easier to know when to move onto the next tuple in B.\n\nI'll take a look at the GroupOperation but I would suspect that it can use a StreamEqualitor instead of a StreamComparator. A comparator allows order while an equalitor just checks if they are equal. There may be a reason it allows for ordering, though. ",
            "id": "comment-15063456"
        },
        {
            "date": "2015-12-18T12:33:16+0000",
            "author": "Joel Bernstein",
            "content": "Let's not change the GroupOperation because it has useful functionality. Let's create a new ReduceOperation that behaves the way we need it to.\n\nThe main reason for adding ReduceOperations was so that we could specialize the reduce behavior. ",
            "id": "comment-15063898"
        },
        {
            "date": "2015-12-18T14:39:01+0000",
            "author": "Jason Gerlowski",
            "content": "the tuples in B aren't used for anything and are dropped as soon as possible. The reason they make use of the ReducerStream is because B having 1 instance of some tuple found in A is the same as B having 100 instances of some tuple found in A. Whether its 1 or 100 the tuple exists in B so its twin in A can either be returned from A or not. For this reason the size of the ReducerStream can always just be 1\n\nAh, this makes sense now.  I was misreading ReducerStream.  That makes most of the rest of my comment invalid.  But, learn something new every day I guess...Looking forward to seeing your update to the patch, so I can get a better idea of how this should work.  Thanks for the clarification Dennis. ",
            "id": "comment-15064009"
        },
        {
            "date": "2015-12-18T21:51:53+0000",
            "author": "Dennis Gove",
            "content": "Rebases off of trunk and adds a DistinctOperation for use in the ReducerStream. The DistinctOperation ensures that for any given group only a single tuple will be returned. Currently it is implemented to return the first tuple in a group but a possible enhancement down the road could be to support a parameter asking for some other tuple in the group (such as the first in a sub-sorted list).\n\nAlso, while implementing this I realized that the UniqueStream can be refactored to be just a type of ReducerStream with DistinctOperation. That change is not included in this patch but will be done under a separate ticket.\n\nAlso of note, I'm not sure if the getChildren() function declared in TupleStream is necessary any longer. If I recall correctly that function was used by the StreamHandler when passing streams to workers but since all that has been changed to pass the result of toExpression(....)  I think we can get rid of the getChildren() function. I will explore that possibility. ",
            "id": "comment-15064830"
        },
        {
            "date": "2015-12-18T22:05:41+0000",
            "author": "Dennis Gove",
            "content": "As it turns out IntersectStream and ComplementStream can both make use of a UniqueStream which makes use of a ReducerStream. As such this new patch implements Intersect and Complement with streamB as an instance of UniqueStream. UniqueStream is changed to be implemented as a type of ReducerStream. ",
            "id": "comment-15064846"
        },
        {
            "date": "2015-12-19T21:02:53+0000",
            "author": "Jason Gerlowski",
            "content": "Hey Dennis, question about the new patch.\n\nIs there a reason that DistinctOperation was created with a ctor taking in a StreamExpression and a StreamFactory?  Is there a reason that both ctors call into an empty init() function? Is that a consistency/style thing that we're trying to stick to in this part of the code (keep all the ReduceOperation implementations structured similarly).  Or is there a technical reason for this?\n\nOther than that question, everything looks good to me. ",
            "id": "comment-15065531"
        },
        {
            "date": "2015-12-19T21:12:46+0000",
            "author": "Dennis Gove",
            "content": "Yes, you hit that right on the head. It was for consistency in the structure of Expressible classes. Also, currently it's implemented to return the first seen tuple in a group. However, I could see an enhancement where one could provide a selector to choose maybe the last seen, or the first based on some alternative order. For example, were someone to use the DistinctOperation in an expression it would currently look like this \n\ndistinct()\n\n\nbut I could also see it looking like one of these\n\ndistinct(first, sort=\"fieldA desc, fieldB desc\")\ndistinct(first, having=\"fieldA != null\")\n\n\nEssentially, although not currently supported it would be possible to expand the reducer operations to support complex selectors when a choice over which tuple to select is required.\n\nAll that said, for now it's just for consistency. ",
            "id": "comment-15065536"
        },
        {
            "date": "2015-12-20T14:59:21+0000",
            "author": "Jason Gerlowski",
            "content": "I added two test clauses in StreamExpressionTest that combine the use of Complement/Intersect with a ParallelStream.  testParallelComplementStream and testParallelIntersectStream.\n\nHopefully this is what Joel was looking for when he mentioned that this could use some parallel tests. ",
            "id": "comment-15065793"
        },
        {
            "date": "2015-12-30T20:46:26+0000",
            "author": "Jason Gerlowski",
            "content": "Uh, oh.  When I uploaded my recent patch, I neglected to svn add some files that Dennis had created in his prior revision.\n\nThis updated patch fixes the prior mistake.\n\nJoel Bernstein Is there anything else you were looking for test-wise on this patch?  I added tests that mirrored the parallel-tests from other streams, but I might've missed something. ",
            "id": "comment-15075387"
        },
        {
            "date": "2015-12-30T21:32:16+0000",
            "author": "Joel Bernstein",
            "content": "Jason Gerlowski, the latest patch looks pretty far along. I may add a few more tests before committing but it's pretty close.\nThanks for your work on this! ",
            "id": "comment-15075420"
        },
        {
            "date": "2016-01-13T15:51:28+0000",
            "author": "Dennis Gove",
            "content": "Rebased against trunk ",
            "id": "comment-15096377"
        },
        {
            "date": "2016-01-13T17:41:42+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1724468 from dpgove@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1724468 ]\n\nSOLR-7525: Add ComplementStream and IntersectStream to the Streaming API and Streaming Expressions ",
            "id": "comment-15096654"
        }
    ]
}