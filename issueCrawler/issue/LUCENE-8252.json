{
    "id": "LUCENE-8252",
    "title": "ArrayIndexOutOfBoundsException hit in lucene50.ForUtil.readBlock",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Invalid",
        "affect_versions": "6.6.2",
        "status": "Resolved",
        "type": "Bug",
        "components": [],
        "fix_versions": []
    },
    "description": "We hit this on an autowarming query with a phrase on a particular shard, and it keeps happening with similar errors (and on other position-sensitive queries) post-restart on both that particular autowarming query and other queries. I'm guessing somehow a file in the index got written incorrectly with regard to positions.\n\n\n10:11:58 ERROR 04-06 17:52:06.360 org.apache.solr.handler.RequestHandlerBase (searcherExecutor-9-thread-1-processing-n:ourip:8983_solr x:collection_shardY_replica1 s:shardY c:collection) [s:Y ] java.lang.ArrayIndexOutOfBoundsException: -95\n        at org.apache.lucene.codecs.lucene50.ForUtil.readBlock(ForUtil.java:196)\n        at org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.refillPositions(Lucene50PostingsReader.java:638)\n        at org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.skipPositions(Lucene50PostingsReader.java:747)\n        at org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$BlockPostingsEnum.nextPosition(Lucene50PostingsReader.java:768)\n        at org.apache.lucene.search.ExactPhraseScorer.phraseFreq(ExactPhraseScorer.java:128)\n        at org.apache.lucene.search.ExactPhraseScorer.access$000(ExactPhraseScorer.java:27)\n        at org.apache.lucene.search.ExactPhraseScorer$1.matches(ExactPhraseScorer.java:73)\n        at org.apache.lucene.search.Weight$DefaultBulkScorer.scoreAll(Weight.java:253)\n        at org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:197)\n        at org.apache.lucene.search.BulkScorer.score(BulkScorer.java:39)\n        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:668)\n        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:472)\n        at org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:217)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1582)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1399)\n        at org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:566)\n        at org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:545)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:296)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:173)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:2477)\n        at org.apache.solr.core.QuerySenderListener.newSearcher(QuerySenderListener.java:74)\n        at org.apache.solr.core.SolrCore.lambda$getSearcher$15(SolrCore.java:2249)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n        at org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$execute$0(ExecutorUtil.java:229)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n        at java.lang.Thread.run(Thread.java:748)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16437365",
            "date": "2018-04-13T14:32:21+0000",
            "content": "Can you run CheckIndex on this index to check whether this is a bug or your index is corrupt? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16437461",
            "date": "2018-04-13T15:39:45+0000",
            "content": "Aha thanks - sorry, had thought it checked checksums on load rather than requiring a checkindex to verify just that piece- \n\n\n    test: check integrity.....FAILED\n    WARNING: exorciseIndex() would remove reference to this segment; full exception:\norg.apache.lucene.index.CorruptIndexException: checksum failed (hardware problem?) : expected=92621dd7 actual=87fba3fa (resource=BufferedChecksumIndexInput(MMapIndexInput(path=\".../collection/collection_shardY_replica1/data/index.20180403111745790/_24ov_Lucene50_0.pos\")))\n        at org.apache.lucene.codecs.CodecUtil.checkFooter(CodecUtil.java:419)\n        at org.apache.lucene.codecs.CodecUtil.checksumEntireFile(CodecUtil.java:526)\n        at org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.checkIntegrity(Lucene50PostingsReader.java:1286)\n        at org.apache.lucene.codecs.blocktree.BlockTreeTermsReader.checkIntegrity(BlockTreeTermsReader.java:339)\n        at org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.checkIntegrity(PerFieldPostingsFormat.java:348)\n        at org.apache.lucene.index.CodecReader.checkIntegrity(CodecReader.java:374)\n        at org.apache.lucene.index.CheckIndex.checkIndex(CheckIndex.java:708)\n        at org.apache.lucene.index.CheckIndex.doCheck(CheckIndex.java:2771)\n        at org.apache.lucene.index.CheckIndex.doMain(CheckIndex.java:2673)\n        at org.apache.lucene.index.CheckIndex.main(CheckIndex.java:2599)\n\n\n\nIf this is expected to happen on occasion and checksum checking is only done on checkindex, then this jira should be withdrawn. Thanks for your help Adrien Grand ",
            "author": "Michael Braun"
        },
        {
            "id": "comment-16437514",
            "date": "2018-04-13T16:17:38+0000",
            "content": "This error indicates that your shard is corrupt indeed. We automatically verify checksums on merge since we need to read the data for the merge anyway, so it only introduces little additional CPU overhead. However checking a read-only index that is heavily searched is more challenging since you don't want the checksum verifications to trash your I/O cache. ",
            "author": "Adrien Grand"
        }
    ]
}