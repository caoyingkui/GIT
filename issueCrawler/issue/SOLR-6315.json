{
    "id": "SOLR-6315",
    "title": "Remove SimpleOrderedMap",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "As I described on SOLR-912, SimpleOrderedMap is redundant and generally useless class, with confusing jdocs. We should remove it. I'll attach a patch shortly.",
    "attachments": {
        "SOLR-6315.patch": "https://issues.apache.org/jira/secure/attachment/12659537/SOLR-6315.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shai Erera",
            "id": "comment-14083936",
            "date": "2014-08-03T10:33:18+0000",
            "content": "Simple patch. It's a rote search-and-replace which touches many places in the code, but the change is really simple. I ran tests and it seems that they aren't happy with the change though. I think one problem is with JSONResponseWriter which serializes the response based on the type of NamedList, and then some tests rely on it. I.e. now that no code creates a SimpleOrderedList, it never serializes the NamedList as writeNamedListAsMapWithDups() ...\n\nSo does SimpleOrderedList exists solely for response writing?? If so, we should document that that's its only purpose, and that e.g. there's nothing \"simple\" about it.\n\nBut maybe we can fix JSONResponseWriter somehow ... I'll dig there. If anyone knows this code and have a suggestion, please chime in. "
        },
        {
            "author": "Shai Erera",
            "id": "comment-14083954",
            "date": "2014-08-03T11:42:07+0000",
            "content": "I thought about it, I think it's odd that whoever creates the NamedList instance needs to decide on the type based on how it's going to be serialized. Likewise for JSONResponseWriter to decide to write a NamedList as \"map\" style, if it's SimpleOrderedMap. In fact, I think it's somewhat broken: even if you pass json.nl=flat, most of the response would still be serialized as a map, because most of the code today creates a SimpleOrderedMap.\n\nI think that in fact our default should have been \"map\". Yes, today it's \"flat\", but if you look at SolrTestCaseJ4 it assumes it's a \"map\", and that happens because of that hack around SimpleOrderedMap. Also, because so much code creates SimpleOrderedMap, the effective default is \"map\".\n\nI don't know what do others feel about changing the default from \"flat\" to \"map\" (I personally think it's odd for a JSON writer to not use JSON style, that is map, by default), but I don't think we should keep SimpleOrderedMap in the code only because of response writing.\n\nSo would appreciate some guidance here \u2013 we should fix this somehow. If we change the default to \"map\", I think it will let us remove SimpleOrderedMap, and fix the few places in the code which are badly written anyway as they rely on some default, yet not well defined (and some arcane), behavior. SolrTestCaseJ4 can easily be fixed to assume a Map and not List. But this changes back-compat, so I'm not sure \u2013 should this be done for trunk only? I hope not, because it's a big change and would complicate future merges with 4x. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-14083962",
            "date": "2014-08-03T12:29:29+0000",
            "content": "Is \"order\" a part of the contract for the usages of this class? I mean, the current Javadoc does explicitly say that repetition and null values are NOT a part of the contract, but it doesn't say that order, another feature of NameList, is not important, while the name itself says \"Ordered\". Kind of ambiguous, so a first order (Hah!) of business is to clarify whether maintaining order is a part of the contract, and then to validate that contract with actual usages.\n\nSwitching to \"map\" implies that order is no longer part of the contract, so it will be free to vary from release to release or between JVMs. Personally, I wish that Map was UnorderedMap, or even UnstableOrderMap, to make the contract crystal clear.\n\nIn fact it would be great to have the ordering of serialization of Map be a seeded random test framework parameter to catch cases where the code or test cases have become dependent on order of map serialization or any other non-contract behavior for that matter.\n\nWill this change have ANY behavior change that will be visible to Solr application developers or users? "
        },
        {
            "author": "Shai Erera",
            "id": "comment-14083970",
            "date": "2014-08-03T13:02:04+0000",
            "content": "First, this class is entirely bogus the way I see it. Its javadocs are completely unrelated to the class itself. SimpleOrderedMap ===== NamedList ... well, at least if you ignore JSONResponseWriter hack around it. This issue is about fixing that \u2013 removing that bogus class and make the rest of the code use the right thing, which is NamedList.\n\nAs for ordering, of NamedList in general, I didn't see places in the code that rely on ordering between keys. That is if you set the keys \"k2\" and \"k1\", that anywhere some piece of code relies on getting them in that order. The only ordering I see is between a certain key's values.\n\nFor Solr users, changing the default json.nl to \"map\" from \"flat\" will require users to review their app on upgrade. But as I noted, since the majority of the code uses SimpleOrderedMap, and since JSONResponseWriter always serializes it as a \"map\", totally ignoring json.nl, I doubt if that's a real backwards break.\n\nI'd welcome any solution that will allow us to get rid of that redundant class and keep Solr act as it does today ... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14083981",
            "date": "2014-08-03T14:16:53+0000",
            "content": "Will this change have ANY behavior change that will be visible to Solr application developers or users?\n\nMost certainly.  Aside from internal interface changes, it will change a great deal of JSON output.  I doubt tests would pass.  But this is also probably under-tested (anything that only tests via XML won't see the difference). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14084016",
            "date": "2014-08-03T16:05:50+0000",
            "content": "First, this class is entirely bogus the way I see it. Its javadocs are completely unrelated to the class itself.\n\nYou know... I'm so tired of this style of communication (that seems like it has become the norm in Lucene and is now expanding in Solr) that I almost didn't respond.  The validity of one's arguments has become conflated with the force and aggressiveness with which the argument is made.  It almost feels like it's a wolf pack complete with alpha male.  If you're not forceful and aggressive, you risk getting steamrolled.  Hand in hand with adjectives designed to make more of an impact... \"shit\", \"broken\", \"horrible\",\"fucked up\", \"terrible\", \"bogus\", \"stupid\", etc...\n\nMaking strong assertions also hampers collaboration since it causes unnecessary strong emotional attachment to initial positions (http://en.wikipedia.org/wiki/Confirmation_bias#Persistence_of_discredited_beliefs)\n\nWe used to speak in terms of improving things, and avoided denigrating contributions (new or past).\n\nThe history of some of these cultural changes is interesting (esp the need to \"up the ante\" via adjectives... everything has become \"horrible\" or \"completely broken\"):\nhttp://markmail.org/search/?q=shit+list%3Aorg.apache.lucene.java-dev\nhttp://markmail.org/search/?q=horrible+list%3Aorg.apache.lucene.java-dev\nhttp://markmail.org/search/?q=stupid+list%3Aorg.apache.lucene.java-dev\n\nIt's also instructive to go back and look at the first time that \"horrible\" was even used on the list (2004):\n\n> I thought that it might be a good candidate for Lucene 2 as the FSDirectory\n> code is horrible and non-J2EE compliant.\n\nYour constructive criticism is greatly appreciated!\n\nHave a nice day,\n\nDoug\n\nI'm bringing this up because I think some committers have gone down this \"supercharge all your arguments\" path without consciously realizing it because it has become more common.  To those who recognize and resist taking that path, thank you. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14084023",
            "date": "2014-08-03T16:29:44+0000",
            "content": "\"supercharge all your arguments\" path without consciously realizing it because it has become more common.\n\nI think it's up to each person to decide which of their arguments they want to super charge with \"powerful\" adjectives such as \"horrible\" or \"stupid\". Easy obstructionism became so common as well, that I think it's a natural reaction. It's also just how some of our committers communicate - and there has been some of it in some of the earliest committers if you don't cherry pick the terms. Let's not pretend it's some brand new thing. It became so difficult to improve some things, it's no wonder a ton of people have ended up somewhat frustrated in my opinion.\n\nIf Shai thinks this class is now \"spurious\" or \"bogus\", why shouldn't he say so? Perhaps it is now. Perhaps it's not. I don't see the comment as negative or supercharged at all. He's discussing pretty politely. Judging the whole statement and even the whole series of statements by this one word just seems silly.\n\nhttp://markmail.org/search/?q=horrible+list%3Aorg.apache.lucene.java-dev\n\nReading through these, most of it is fine usage IMO.\n\nAll that said, I'd rather see this kind of effort spent on something else and just leave poor SimpleOrderedMap alone. Small win IMO, but to each his own. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14084031",
            "date": "2014-08-03T16:51:04+0000",
            "content": "\"just how some people communicate\" and the idea that it's OK to say anything that comes to mind (because that's what you think) can be used to excuse any form of communication whatsoever.  Everyone was just saying what they thought in LUCENE-5859 too.  No thank you.\n\nIt's not like single instances of this are \"fine\" or \"not fine\"... I was trying to make a general point how pervasive use of supercharging arguments fosters conflict and inhibits cooperation and consensus. "
        },
        {
            "author": "Shai Erera",
            "id": "comment-14084077",
            "date": "2014-08-03T18:28:27+0000",
            "content": "Yonik Seeley, please excuse me if I used the word \"bogus\" inappropriately. I'll admit that as a non-native English speaker, I often make mistakes. I assumed that the word \"bogus\" is just a synonym for \"fake\", but perhaps it's used in the English language in negative contexts. If this is the case, this was not my intention ... you know me better than that.\n\nBut I do think this class pretends to be something that it is not. Its documentation is misleading and conflicting (\"use if it access by key is more important...\" and \"this class does not provide efficient lookup by key\"). The class itself contains absolutely no code beyond NamedList. It contains 3 ctors which delegate to super() as-is, and a clone() which is exactly like NamedList's, only returns a SimpleOrderedMap. Also, the class's name is misleading \u2013 see Jack's comment above and the word 'order'. It looks as if the class pretends to be an ordered map, where its jdocs specifically say that you should use it if you prefer access by key than maintaining order...\n\nI was merely pointing facts about the class, and why I think it should be removed. Maybe once it had another role, or actually did something different than NamedList, but it isn't today. Having said all that, you don't see me commit anything, or jump to conclusions .. I sincerely ask for guidance from people who know this code better than I do, like you, what's the best way to deal with it.\n\nMark Miller, I don't think that leaving this class alone is a good resolution in this case. I consider redundant code as something that needs to go. Especially if it's confusing, and more so public API. Even if not a user-facing API, it's still an API w/ many uses in the code. I realize there are probably other places I can contribute to Solr, much more important ones, but this is where I started when I reviewed the code. I'm BTW not trying to fix this class, but to fix/simplify NamedList overall (see my last comment on SOLR-912). This helps me get familiar with the code, and I'm sure that I'll learn more as I get comments about what I'm trying to do. Sometimes a fresh set of eyes lead to simplifications that others just don't have the time to notice.\n\nMore so, I feel that JSONResponseWriter misbehaves. I'm sure that there are good reasons to it, too. But the way I see it, no matter what style you ask it to output, if it encounters a SimpleOrderedMap, it always output it as a \"map\". This feels wrong to me ...\n\nAnd worse, if I'm a Solr developer and need to create a NamedList instance, I need to choose between Named to Simple because of how they are output differently.\n\nAnd, the tests that currently fail, only fail because they assume some undocumented behavior of JSONResponseWriter (maybe as Yonik said, it's because this isn't well tested). Why would a test assume that the JSON response it parsed, is parsed to a Map, when the default style is \"flat\"? And of course, as soon as I removed the instanceof check in JSONResponseWriter, these tests failed to cast a List to a Map.\n\nThis leads me to believe that the effective default style is \"map\", no matter what the code says.\n\nAs a side comment I stated that I find it odd that a JSON response writer/formatter's default style is not common JSON. Not that an array output is not valid, just that it's not common. And I admit that I don't know the reason for the \"flat\" style, but I'm sure if it's there, it's probably used by someone.\n\nLook at JSONWriterTest.toJson(). It creates a SolrQueryResponse (which uses SimpleOrderedMap internally) and a JSONResponseWriter with style \"arrarr\" (array-of-array). Yet it expects an output that looks like a \"map\". In fact, it's a mixed style of \"map\" and \"flat\"/\"arr\". This is because JSONResponseWriter completely ignores the style once it encounters the SimpleOrderedMap. I don't understand if this is really an expected behavior, or this test tests buggy behavior... why would such a test ever pass, when the output is not what it expects?\n\nSo again, this started on my part as a simple attempt to improve and cleanup NamedList and friends. But I now wonder if our JSON formatter does the right thing or not. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14084079",
            "date": "2014-08-03T18:32:19+0000",
            "content": "I don't think that leaving this class alone is a good resolution in this case.\n\nOh, I'm not suggesting a resolution. I'm just giving my opinion on the effort to remove this class and maintain reasonable back compat. I don't feel strongly about this issue either way. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14084095",
            "date": "2014-08-03T19:15:02+0000",
            "content": "If one is unsure of something, questions will go further than bold assertions, and avoid putting unnecessary stakes in the ground...  e.g.\n\"It seems like SimpleOrderedMap doesn't do anything different than NamedList.  Can it be removed?\"\nAssertions like \"Its javadocs are completely unrelated to the class itself.\" leave me totally at a loss of where to begin... it's like saying \"it's all just wrong\".  Excuse us, we tried to make the javadoc as clear as possible.\n\nSo, to the technical issues explaining why the things are the way they are:\n1) Solr started with XML only, and NamedList was a container to hold data for XML serialization.  NamedList appeared all over in the code.\n2) When we added JSON support, we realized that for some data, one would want it serialized as a map, and for other data, one would want it serialized as something that would preserve order (unfortunately many/most clients that consume JSON do not preserve order of \"objects\").\n3) We added a subclass of NamedList, called \"SimpleOrderedMap\" to make this semantic distinction (think of it like a marker interface...).\n4) The \"JSONResponseWriter hack\" you refer to is the entire point of the class... to make the semantic distinction to serializers.\n\nSo changing all uses of SimpleOrderedMap to NamedList would lose all that semantic information (and break back compat for anything other than XML responses).\n\nSome of the javadoc snippets are being taken out of context.  I'll quote the full javadoc for both NamedList and SimpleOrderedMap for people's reference:\n\nNamedList:\n\n/**\n * A simple container class for modeling an ordered list of name/value pairs.\n *\n * <p>\n * Unlike Maps:\n * </p>\n * <ul>\n *  <li>Names may be repeated</li>\n *  <li>Order of elements is maintained</li>\n *  <li>Elements may be accessed by numeric index</li>\n *  <li>Names and Values can both be null</li>\n * </ul>\n *\n * <p>\n * A NamedList provides fast access by element number, but not by name.\n * </p>\n * <p>\n * When a NamedList is serialized, order is considered more important than access\n * by key, so ResponseWriters that output to a format such as JSON will normally\n * choose a data structure that allows order to be easily preserved in various\n * clients (i.e. not a straight map).\n * If access by key is more important for serialization, see {@link SimpleOrderedMap},\n * or simply use a regular {@link Map}\n * </p>\n *\n */\n\n\n\nSimpleOrderedMap:\n\n/** <code>SimpleOrderedMap</code> is a {@link NamedList} where access by key is more\n * important than maintaining order when it comes to representing the\n * held data in other forms, as ResponseWriters normally do.\n * It's normally not a good idea to repeat keys or use null keys, but this\n * is not enforced.  If key uniqueness enforcement is desired, use a regular {@link Map}.\n * <p>\n * For example, a JSON response writer may choose to write a SimpleOrderedMap\n * as {\"foo\":10,\"bar\":20} and may choose to write a NamedList as\n * [\"foo\",10,\"bar\",20].  An XML response writer may choose to render both\n * the same way.\n * </p>\n * <p>\n * This class does not provide efficient lookup by key, it's main purpose is\n * to hold data to be serialized.  It aims to minimize overhead and to be\n * efficient at adding new elements.\n * </p>\n */\n\n\n\nAre there changes to the javadoc we can make that would make it more clear? "
        },
        {
            "author": "Shai Erera",
            "id": "comment-14084111",
            "date": "2014-08-03T19:44:35+0000",
            "content": "Thanks Yonik for explaining this. I realized as I started to debug test failures that SimpleOrderedMap is sort of a marker interface. What bothered me in the javadocs are the things that I noted above (the conflicting statements about when to use this class, its name in relation to Jack's comment). Maybe this could be named MapNamedList or something, without mentioning order or access by key and efficiency. And a comment about how this class is a marker interface for response writers to output its content as a map ...\n\nI also wish that JSONResponseWriter would decouple itself from a particular type of NamedList. It feels like a hack to me, and I don't mean that negatively. For example, a better 'hack' IMO is if we added to NamedList a preferedOutputStyle member, which could be null for all NLs other than MapNamedList. Maybe we won't even need that specific class, we could add a ctor argument .. there are options. And then JSONResponseWriter could check the preferedOutputStyle as an override to the default style it received ... maybe then it would make sense to me, I don't know.\n\nAs a user of the API, maybe even Solr's REST API, it's not clear to me how should I refer to \"json.nl\". It seems that when I set it, I determine the output of some elements in the response JSON, but not all of them. It's as if I need to set the style, run some queries, note the elements that do not correspond to the style that I asked for, and rely on that output's style?\n\none would want it serialized as something that would preserve order\n\nWhat do you mean by \"preserve order\"? The order of all values of a single key, or order between both keys and values? An example, if I make these series of sets: set(\"k1\", \"v1\"); set(\"k2\",\"v3\"); set(\"k1\", \"v2\");, which of the following outputs do you refer to as preserving order:\n\n\n{\n  \"k1\": [ \"v1\", \"v2\" ],\n  \"k2\" : \"v3\"\n}\n\n\n\nOR\n\n\n[ \"k1\", \"v1\", \"k2\", \"v3\", \"k1\", \"v2\" ]\n\n\n\nI realize the second one adheres to any order preservation, but I don't understand if that's the intention, or the former format is considered as preserving order too.\n\nWhat's your recommendation then for this issue? I feel like there are some things we can do to improve the code here. Maybe there are minor like a class rename, javadocs clarification and that's it. Maybe they are slightly broader, e.g. the preferedOutputStyle parameter to NamedList.\n\nWhat's also your opinion about JSONResponseWriter ignoring the \"json.nl\" parameter for SimpledOrderedMap? Is this OK, API-wise? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14084130",
            "date": "2014-08-03T21:06:28+0000",
            "content": "I guess my confusion is why this is confusing at all...\nI'l try to put it as succinctly as possible to try and reduce confusion:\n\n\nIf you want the data serialized as a \"JSON Object\", use SimpleOrderedMap.\nGiven that some clients will lose \"JSON Object\" ordering information, use NamedList to serialize to something that will preserve order (e.g. [key1,val1,key2,val2])\n\n\n\nAt the end of the day, this is really all about JSON and client / language adapters.  An unordered Map has a natural mapping to JSON... but something where order is more important (represented by NamedList) does not.  This is why we picked one [k1,v1,k2,v2,...] but allowed it to be overridden by json.nl: http://wiki.apache.org/solr/SolJSON#JSON_specific_parameters\n\nIf someone feels the javadoc needs to be improved, please put up a patch. "
        },
        {
            "author": "Shai Erera",
            "id": "comment-14084374",
            "date": "2014-08-04T06:53:55+0000",
            "content": "OK, so I think if the jdocs said exactly (and only) what you wrote above, that would be fine. It will definitely remove the confusion around this class, as as you state it \u2013 it's only used for JSON formatting. I would even call it a MapNamedList or JSONMapNamedList, to make it more clear.\n\nI still don't like it that whoever creates a NamedList has any saying about, or need to be aware of, how it will be output eventually. I don't understand why the different RequestHandlers decide to create a SimpleOrderedMap and not a NamedList \u2013 why do they care how the Java class will be written as a response? It should be the job of the response writer, and then e.g. users who care about different output formats should worry about it, not the developer who codes the RequestHandler.\n\nSo maybe if we decoupled NamedList and SimpleOrderedMap, into two separate implementations (same interface though), such that the RequestHandler's decision was more intelligent and intentional: SimpleOrderedMap would use a Map<String,Object> internally, forbid the use of a null key, or multi-valued keys and NamedList would allow anything.\n\nThen, whoever initializes it must decide in advance if it's going to need null or multi-valued keys and if it doesn't, it uses the simple implementation. Otherwise it uses the more generic NamedList. And JSONResponseWriter deciding to write a SimpleOrderedMap as a JSON \"map\" would make sense. And default to \"flat\" for NamedList would also make sense, since by definition it allows null keys, multi-valued keys etc.\n\nIs that something you think we could explore? Do you think that if I did that, existing handlers would break (because today SimpleOrderedMap does not limit you like that)? I don't mind doing this work, but would like to get your feedback first. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14088061",
            "date": "2014-08-06T19:05:10+0000",
            "content": "Looking over these notes, those on SOLR-912, and the actual implementation of SimpleOrderedMap ... it looks to me like SimpleOrderedMap has zero behavior difference from NamedList.  If I'm wrong about that, will someone please point me at the code that makes them different?\n\nWhen I was poking through the code making a patch to remove SimpleOrderedMap, I do remember seeing one place where another class makes a decision based on whether the object is a SimpleOrderedMap or not, and it turns out that it was in JSONResponseWriter, which is mentioned above.\n\nThere are exactly three places in trunk where \"instanceof SimpledOrderedMap\" appears.  One of them is in code that decides how to encode javabin, which adds yet another possible complication to the entire notion of dropping SimpleOrderedMap.  The javabin codec has ORDERED_MAP and NAMED_LST as distinct object types.\n\nA derivative class should only exist if its implementation is different than the parent, or if it makes sense within the human mind to think of them as different things because the distinction is concrete and will be required frequently.\n\nThe three places I mentioned are cases where an entirely new class (different only in the name) is used instead of implementing a setting within the class that other code can use to make decisions.  Although the existing method uses slightly less memory, I think it's the wrong approach.  I know that I'm only one voice, and I may be overruled.\n\nOne option for the stated purpose of this issue is to add a boolean flag within NamedList (possibly with a getter/setter) to use in JSONResponseWriter.  Another is to bite the bullet and actually implement an extension of NamedList that behaves differently \u2013 in this case (based on what I see in JSONResponseWriter and the javadocs), preventing duplicates and being more efficient for key lookups. "
        },
        {
            "author": "Shai Erera",
            "id": "comment-14088894",
            "date": "2014-08-07T06:23:51+0000",
            "content": "\nOne option for the stated purpose of this issue is to add a boolean flag within NamedList (possibly with a getter/setter) to use in JSONResponseWriter. Another is to bite the bullet and actually implement an extension of NamedList that behaves differently \u2013 in this case (based on what I see in JSONResponseWriter and the javadocs), preventing duplicates and being more efficient for key lookups.\n\nThis is exactly what I proposed in my last comment \u2013 to make SimpleOrderedMap a useful on its own NamedList, by e.g. forbidding duplicates and null values. I just have no idea which tests will fail, and e.g. if there are places in the code that use SimpleOrderedMap for outputting in \"map\" form, but rely on being able to add multiple values to the same key.\n\nIt looks weird to me that we allow that and still output as map, because the JSON parser has to do something about these mult-valued keys. So I wrote this simple test, to check what happens if you do that:\n\n\npublic static void main(String[] args) throws Exception {\n  JSONResponseWriter writer = new JSONResponseWriter();\n  StringWriter sw = new StringWriter();\n  SolrQueryRequest req = new LocalSolrQueryRequest(null, new NamedList<Object> ());\n  SolrQueryResponse rsp = new SolrQueryResponse();\n  rsp.add(\"foo\", 1);\n  rsp.add(\"foo\", 2);\n  writer.write(sw, req, rsp);\n  String json = sw.toString();\n  System.out.println(json);\n  \n  Map rspMap = (Map)ObjectBuilder.fromJSON(json);\n  System.out.println(rspMap);\n}\n\n\n\nAnd it prints:\n\n\n{\"foo\":1,\"foo\":2}\n\n{foo=2}\n\n\n\nThis makes me believe that whoever uses SimpleOrderedMap does not in fact add multiple values to the same key, because at parse time only the last one prevails? But I guess Yonik would know the answer to that better.\n\nIf indeed that's the case, I think it's best if we just make SimpleOrderedMap simple, disallow null and multi-valued keys. And then outputting it in \"map\" style would make sense. "
        }
    ]
}