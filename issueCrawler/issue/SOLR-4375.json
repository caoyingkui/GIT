{
    "id": "SOLR-4375",
    "title": "Add config or schema option to turn off compressed stored fields in the Lucene 4.1 index format",
    "details": {
        "affect_versions": "4.1",
        "status": "Closed",
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "There have been performance complaints on the mailing list about the default compressed stored fields in the 4.1 index format.  There should be an option to turn the compression off.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13565401",
            "date": "2013-01-29T14:35:19+0000",
            "content": "I opened this as an issue for Solr, because there probably is already a way in Lucene to disable the compression.  If that turns out to not be the case, we may need an additional issue for Lucene. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13565404",
            "date": "2013-01-29T14:39:45+0000",
            "content": "You can configure Solr to use another codec, but I'm curious why you wouldn't want stored fields to be compressed? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13565407",
            "date": "2013-01-29T14:43:03+0000",
            "content": "As a workaround, a user should be able to use postingsFormat in schema.xml to switch to the Lucene40 format.  I offered this solution to the latest solr-user thread about this. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13565410",
            "date": "2013-01-29T14:45:43+0000",
            "content": "Unfortunately, postings formats and stored fields formats are not related: if someone using Solr 4.1 configures his schema in order to use the Lucene 4.0 postings format, his index will still use Lucene 4.1 (compressed) stored fields format. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13565416",
            "date": "2013-01-29T14:50:28+0000",
            "content": "Some users are complaining of poor performance.  The most recent thread says they are seeing queries take two to five times as long as they do under Solr 4.0. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13565432",
            "date": "2013-01-29T15:02:06+0000",
            "content": "Certain CPU-intensive activities like compression seem like trivial things and perform very well when you are on a recent CPU architecture.  If you go back a few CPU generations or you have a very low clock speed, these activities can become performance bottlenecks.  This is common on affordable (low-end) hardware from only a few years ago. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13565440",
            "date": "2013-01-29T15:12:00+0000",
            "content": "I was reviewing the mailing list. Actually only one user complained, but you did not ask him about backgrounds. Please note, he also complained about searches without term vectors are slower, which makes no sense, unless you look deeper into Solr and how he might use it:\n\n\tThere may be a slowdown if you have every field in your schema stored in Solr and you retrieve something like ten-thousands of results with all stored fields.\n\tTerm vectors and stord fields don't affect search times in Lucene, the problem is only post-result collection document fetching (see above)\n\tIf searches without term vectors are slower in Lucene that's easy to explain: I assume he highlights, too and this is faster with term vectors. This interesting detail about his index may also explain the stored fields slowdown: If he hoighlight also the tenthousands of documents he fetches, the current setup of Solr and the highlighter may cause stored fields to be read multiple times (because stored fields cache is too small). If you only read one small field for highlighting out hundreds of fields (all stored), the block-nature of the stored fields format may have an block-decompressing overhead (which is not related to the decompression, but more that blocks must be read).\n\n\n\nAs mentioned before, everybody is free to change the default codec, no need for an extra setter.\n\n-1 to change anything without more details (schema, query URL thats slower,...). "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13565453",
            "date": "2013-01-29T15:26:36+0000",
            "content": "I think Uwe is right, and we should not perform modifications without further details.\n\nCertain CPU-intensive activities like compression seem like trivial things and perform very well when you are on a recent CPU architecture.*\n\nSure, but I assumed that the compression algorithm we use in Lucene would be lighter than other things Lucene needs to do such as document inversion, maybe I'm wrong. If someone can provide me with a dataset which is significantly slower to index when stored fields are compressed, I'd be happy to debug it. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13565466",
            "date": "2013-01-29T15:38:26+0000",
            "content": "I had not considered some of the things Uwe mentioned.  If adding this config knob is not trivial, and they have a wildly unusual setup, it isn't worth the committer effort.  Those few users with the wildly unusual setups can either change their approach or write custom code. "
        },
        {
            "author": "Artem Lukanin",
            "id": "comment-13565506",
            "date": "2013-01-29T16:42:37+0000",
            "content": "I don't use highlights (there are no &hl=true in my queries and there is no such a default setting in my handlers, I test Solr 4.1 using solrmeter) and I don't use MoreLikeThis (there are no &mlt=true in my queries and there is no such a default setting in my handlers). So I hope termVectors must be unnecessary. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13565518",
            "date": "2013-01-29T16:53:08+0000",
            "content": "I think before we assume compression is even to blame, someone needs to perform their tests without it then compare their results to disabling it. If we can find a few of those data points, I think a simple option to disable it becomes very important and is a no brainer. You shouldn't have to mess with codecs to get back pre 4.1 speed. Without that evidence though, who knows anything. There are too many variables. "
        },
        {
            "author": "Artem Lukanin",
            "id": "comment-13565548",
            "date": "2013-01-29T17:30:57+0000",
            "content": "Yes, sure, here are my numbers for mean response time:\nSolr 4.0 with termVectors: 4,47887323943662 ms\nSolr 4.1 with termVectors: 7,23474178403756 ms\nSolr 4.1 without termVectors: 8,0093896713615 ms\n\nTested during 2130 sec every time with full-import using DIH (after clearing data folder) before the tests.\n\nmaster-slave configuration with 20 sec for replication, NRT enabled\n\nI will try to make a custom 4.1 codec without compression and report results "
        },
        {
            "author": "Artem Lukanin",
            "id": "comment-13566327",
            "date": "2013-01-30T09:38:25+0000",
            "content": "I failed to make a custom codec LUCENE_41CUSTOM, so I've made a patch and rebuilt Solr. The results:\n\nSolr 4.1 with termVectors and without compression: 5,75586854460094 ms\n\npatch for the test:\n\n\n===================================================================\n--- lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41Codec.java\t(date 1359358135000)\n+++ lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41Codec.java\t(revision )\n@@ -32,6 +32,7 @@\n import org.apache.lucene.codecs.lucene40.Lucene40LiveDocsFormat;\n import org.apache.lucene.codecs.lucene40.Lucene40NormsFormat;\n import org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoFormat;\n+import org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsFormat;\n import org.apache.lucene.codecs.lucene40.Lucene40TermVectorsFormat;\n import org.apache.lucene.codecs.perfield.PerFieldPostingsFormat;\n \n@@ -48,7 +49,7 @@\n // if they are backwards compatible or smallish we can probably do the backwards in the postingsreader\n // (it writes a minor version, etc).\n public class Lucene41Codec extends Codec {\n-  private final StoredFieldsFormat fieldsFormat = new Lucene41StoredFieldsFormat();\n+  private final StoredFieldsFormat fieldsFormat = new Lucene40StoredFieldsFormat();\n   private final TermVectorsFormat vectorsFormat = new Lucene40TermVectorsFormat();\n   private final FieldInfosFormat fieldInfosFormat = new Lucene40FieldInfosFormat();\n   private final DocValuesFormat docValuesFormat = new Lucene40DocValuesFormat();\n\n "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13566339",
            "date": "2013-01-30T10:08:16+0000",
            "content": "Given how fast your queries are, I assume that all your index is in your I/O cache and your queries are rather simple. In that case, sure, stored fields compression can make your queries a little slower. However, I still think it is a good default: with sufficiently complex queries, the decompression overhead should be unnoticeable and it helps save disk seeks (which can take 10ms per stored document) when the index grows beyond the size of the I/O cache. "
        },
        {
            "author": "Artem Lukanin",
            "id": "comment-13566358",
            "date": "2013-01-30T10:45:31+0000",
            "content": "Yes, default is good. Just it would be better if users can select the degree of compression (in my case to turn it off) without patching the source code. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13566364",
            "date": "2013-01-30T10:49:58+0000",
            "content": "without patching the source code\n\nThis shouldn't be necessary: you can define your own codec (http://lucene.apache.org/core/4_1_0/core/org/apache/lucene/codecs/package-summary.html#package_description) and then use it in Solr using a custom CodecFactory (http://wiki.apache.org/solr/SolrConfigXml#codecFactory). "
        },
        {
            "author": "Artem Lukanin",
            "id": "comment-13566376",
            "date": "2013-01-30T11:08:12+0000",
            "content": "Thank you. I will try to do it. "
        }
    ]
}