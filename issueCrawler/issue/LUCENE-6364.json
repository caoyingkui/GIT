{
    "id": "SOLR-7264",
    "title": "DocValues should support BoolField",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "5.0",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.2",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "DocValues supports numerics and strings, but it currently does not support booleans. Please add this support.\n\nHere is the error message you get if you try to use DocValues with a BoolField.\n\nERROR - 2015-03-18 00:49:54.041; org.apache.solr.common.SolrException; null:org.apache.solr.common.SolrException: SolrCore 'test' is not available due to init failure: Could not load conf for core test: F\nield type boolean{class=org.apache.solr.schema.BoolField,analyzer=org.apache.solr.schema.FieldType$DefaultAnalyzer,args={sortMissingLast=true, class=solr.BoolField}} does not support doc values. Schema fi\nle is /Users/kosborn/solr/server/solr/test/conf/schema.xml",
    "attachments": {
        "SOLR-7264.patch": "https://issues.apache.org/jira/secure/attachment/12705697/SOLR-7264.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14367263",
            "author": "Erick Erickson",
            "date": "2015-03-18T15:04:40+0000",
            "content": "Patches are always welcome! "
        },
        {
            "id": "comment-14367333",
            "author": "Robert Muir",
            "date": "2015-03-18T15:42:40+0000",
            "content": "docvalues already supports booleantype by passing 0/1 to NUMERIC/SORTED_NUMERIC type. This is a solr issue. "
        },
        {
            "id": "comment-14367560",
            "author": "Kevin Osborn",
            "date": "2015-03-18T17:57:17+0000",
            "content": "So, are booleans just stored as in int in Lucene? I will try to take a stab at this. Looks like I need to implement createField and createFields. I looked at the implementation in TrieField. If I am understanding it correctly, I should just treat my boolean value as an int. Correct? "
        },
        {
            "id": "comment-14367612",
            "author": "Hoss Man",
            "date": "2015-03-18T18:22:41+0000",
            "content": "So, are booleans just stored as in int in Lucene?\n\nhow lucene \"stores\" values is ambigiuous when talking about datatimes, and not particularly relevant when talking about DocValues.  I think the point rmuir was making is that lucene doesn't have any special low level support for boolean values in the DocValues api is because (if i remember correctly) there isn't really any reason to do so \u2013 when the DocValues for a field are all small int values (like \"0\" and \"1\") then the automatic encoding/compression of those values is just as efficient as if there was special single bit support.\n\nSo yes: if you patch BoolField to implement the appropriate methods for supporting docValues and you do so by using (int)1 for true and (int)0 for false that should work fine and be plenty efficient. "
        },
        {
            "id": "comment-14370070",
            "author": "Kevin Osborn",
            "date": "2015-03-19T20:38:10+0000",
            "content": "Here is my patch. It passes my environment tests. Please take a look to make sure that everything is done how it should be. Thanks. "
        },
        {
            "id": "comment-14495069",
            "author": "Kevin Osborn",
            "date": "2015-04-14T22:51:08+0000",
            "content": "It has been a while since I submitted this patch. Can someone take a look at this so that it can hopefully be committed. Thanks. "
        },
        {
            "id": "comment-14556975",
            "author": "Hoss Man",
            "date": "2015-05-22T23:10:08+0000",
            "content": "took a quick look at the patch...\n\nAt first glance it seems mostly fine \u2013 but tests are key. Take a look at DocValuesTest.java, DocValuesMissingTest.java, and DocValuesMultiTest.java (and the corresponding schema files) for examples of the bare bones basics we should be sanity checking are working properly with the new code. "
        },
        {
            "id": "comment-15326137",
            "author": "Erick Erickson",
            "date": "2016-06-12T02:01:26+0000",
            "content": "Added as part of SOLR-9187 "
        },
        {
            "id": "comment-15438999",
            "author": "Michael McCandless",
            "date": "2016-08-26T13:59:35+0000",
            "content": "Bulk close resolved issues after 6.2.0 release. "
        }
    ]
}