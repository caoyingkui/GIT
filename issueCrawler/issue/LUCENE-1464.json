{
    "id": "LUCENE-1464",
    "title": "FSDirectory.getDirectory always creates index path",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.4,                                            2.9",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This was reported to me as a Luke bug, but going deeper it proved to be a non-intuitive (broken?) behavior of FSDirectory.\n\nIf you use FSDirectory.getDirectory(File nonexistent) on a nonexistent path, but one that is located under some existing parent path, then FSDirectory:174 uses file.mkdirs() to create this directory. One would expect a variant of the method with a boolean flag to decide whether or not to create the output path. However, the API with \"create\" flag is now deprecated, with a comment that points to IndexWriter's \"create\" flag. This comment is misleading, because the indicated path is created anyway in the file system just by calling FSDirectory.getDirectory().\n\nI propose to do one of the following:\n\n\n\treinstate the variant of the method with \"create\" flag. In case if this flag is false, and the index directory is missing, either return null or throw an IOException,\n\n\n\n\n\tkeep the API as it is now, but either return null or throw IOException if the index dir is missing. This breaks the backwards compatibility, because now users are required to do file.mkdirs() themselves prior to calling FSDirectory.getDirectory().",
    "attachments": {
        "LUCENE-1464.patch": "https://issues.apache.org/jira/secure/attachment/12394478/LUCENE-1464.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-11-21T19:48:29+0000",
            "content": "How about just moving the create logic to the first time createOutput is called? ",
            "author": "Michael McCandless",
            "id": "comment-12649774"
        },
        {
            "date": "2008-11-22T10:22:18+0000",
            "content": "Attached patch that just creates the dir the first time createOutput is called.  I plan to commit in a day or so. ",
            "author": "Michael McCandless",
            "id": "comment-12649909"
        },
        {
            "date": "2008-11-22T16:29:31+0000",
            "content": "The patch looks fine to me in the sense that it solves my issue, I'm not sure though if this behavior isn't even less intuitive than before. I'm curious why we shouldn't re-instate the no-create API in Directory? ",
            "author": "Andrzej Bialecki",
            "id": "comment-12649940"
        },
        {
            "date": "2008-11-22T17:16:52+0000",
            "content": "I'm curious why we shouldn't re-instate the no-create API in Directory?\n\nSee LUCENE-773 for the full explanation.\n\nThe short answer is that it's confusing because IndexWriter also has a\ncreate boolean and I think there should be only one.  Plus,\nIndexWriter's impl of \"create=true\" is better than FSDir's (it will\nretry deleting files if they are still in use, instead of throwing\nIOException, and, it will allow the deletion policy to decide what to\ndo with the older commit points). ",
            "author": "Michael McCandless",
            "id": "comment-12649946"
        },
        {
            "date": "2008-11-22T17:22:30+0000",
            "content": "Well, if it's the IndexWriter's job to create a placeholder for Directory, then maybe we shouldn't silently do mkdirs() at all in Directory? ",
            "author": "Andrzej Bialecki",
            "id": "comment-12649950"
        },
        {
            "date": "2008-11-22T17:29:18+0000",
            "content": "I don't understand what you mean by \"it's the IndexWriter's job to\ncreate a placeholder for Directory\".\n\nIt's IndexWriter's job to create a new index.  It's FSDir's job to\ndeal with the particulars of a file system like having to make the\ncontaining directory before creating a file.\n\nWith this patch we aren't silently creating dirs.  Rather, we create\nthe dir the first time we need to create a file in that dir.  That\nseems like the right time to create the dir? ",
            "author": "Michael McCandless",
            "id": "comment-12649952"
        },
        {
            "date": "2008-11-22T17:57:02+0000",
            "content": "Ok, after reading LUCENE-773 I reluctantly agree. I think that my doubts are related to the fact that now we can get a valid instance of Directory, which points to an invalid filesystem path, one which perhaps cannot be created at all, and we are going to discover this only when opening IndexWriter with create=true flag. In all other situations we are going to get an IOException about the missing \"segments\" file, which may be misleading.\n\nFor this reason I thought it would be better to test the presence of the index path immediately, and create the directory if necessary in Directory only when it's really needed, i.e. when we intend to use Directory for writing. Essentially, I prefer to distinguish between read-only and read-write Directory on the API level of Directory.\n\nAnyway, as I said, I'm fine with this patch. ",
            "author": "Andrzej Bialecki",
            "id": "comment-12649954"
        },
        {
            "date": "2008-11-24T13:26:57+0000",
            "content": "I suppose we could consider adding \"boolean readOnly\" API to FSDirectory.  But I feel like that's overkill.  It would also be a problem with the single-instance that the now deprecated FSDir.getDirectory still enforces.  I think FSDir should be (remain) a simple conduit.\n\nOne improvement we could make is if you try to open an IndexReader on an FSDir for which the directory you specified does not exist, instead of saying \"no segments* files found\" we could say \"directory 'XXX' does not exist\"?  That's a more transparent error.\n\nThe problem is, that'd be a change in the API: instead of returning null from FSDir.list, we'd throw an IOException.  Maybe we could do this as part of LUCENE-1468, if we introduce a new \"listAll\" method. ",
            "author": "Michael McCandless",
            "id": "comment-12650199"
        },
        {
            "date": "2008-11-29T12:17:34+0000",
            "content": "Committed revision 721670.\n\nI'll take up the \"throw more transparent IOException instead of returning null\" approach with LUCENE-1468. ",
            "author": "Michael McCandless",
            "id": "comment-12651710"
        },
        {
            "date": "2015-02-04T09:38:39+0000",
            "content": "Github user uschindler commented on the pull request:\n\n    https://github.com/apache/lucenenet/pull/70#issuecomment-72822745\n\n    Hi,\n    I checked the Lucene Core 4.8 code. In fact it does not create the directory. The comment is just bogus. I removed it in Lucene 4.10: http://svn.apache.org/r1657033\n\n    In Lucene 5, the move to Java NIO.2 now creates the direczory in the ctor. This is in my opinion wrong to do, so I started a discussion. In fact, Mike McCandless stated, that there was already a bug open about this: https://issues.apache.org/jira/browse/LUCENE-1464\n\n    The thread is CC'ed to the dev@lucenenet list. ",
            "author": "ASF GitHub Bot",
            "id": "comment-14304835"
        }
    ]
}