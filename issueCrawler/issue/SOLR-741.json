{
    "id": "SOLR-741",
    "title": "Add support for rounding dates in DateField",
    "details": {
        "affect_versions": "1.4",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "As discussed at http://www.nabble.com/Rounding-date-fields-td19203108.html\n\nSince rounding dates to a coarse value is an often recommended solution to decrease number of unique terms, we should add support for doing this in DateField itself. A number of syntax were proposed, some of them were:\n\n\t<fieldType name=\"date\" class=\"solr.DateField\" sortMissingLast=\"true\"omitNorms=\"true\" roundTo=\"-1MINUTE\" /> (Shalin)\n\t<fieldType name=\"date\" class=\"solr.DateField\" sortMissingLast=\"true\" omitNorms=\"true\" round=\"DOWN_MINUTE\" /> (Otis)\n\n\n\nHoss proposed more general enhancements related to arbitary pre-processing of values prior to indexing/storing using pre-processing analyzers.\n\nThis issue aims to build a consensus on the solution to pursue and to implement that solution inside Solr.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12627176",
            "date": "2008-08-30T00:56:18+0000",
            "content": "I propose a lot of \"more general\" things \u2013 but I'm also a fan of simple, direct, specific enhancements to solve common problems.  I'm on board with adding support for something like this directly to DateField.\n\nReusing the DateMathParser syntax makes a lot of sense \u2013 it has a lot of flexibility and should already be familiar to people doing non trivial things with DateField.  Calling it \"round\" or \"roundTo\" seems like it would pigeon hole it a bit ... perhaps \"forceMath\" or \"appendMath\" or \"mutate\" or something that better conveys the idea of \"general modification made to all dates\"\n\nThe downsides: \n\n\tit has no simple syntax for \"round up\" but it can be expressed somewhat verbosely (\"+1DAY-1MILLI/DAY\" rounds up to the nearest day)\n\tit has no notion of \"round to the nearest 5 minutes\" which some people might expect\n\n\n\n...but honestly, those could easily be added as new features to DateMathParser  \u2013 and then they'd benefit this issue as well as general Date Math usages in queries (like date faceting)\n\nsyntax wise: perhaps \"\\FOO\" could be the round up equivalent of \"/FOO\" ? ... with \"/nFOO\" and \"\\nFOO\" being the \"round down/up to the nearest nth value for unit FOO\" ? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12646122",
            "date": "2008-11-09T22:19:44+0000",
            "content": "I agree with adding the accuracy directly to the DateField type. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12646225",
            "date": "2008-11-10T11:28:41+0000",
            "content": "An average user may not very familiar w/ Date Math syntax . Does this require something like DateMath. \nhow about the following . \n\n <!-- precision can have values \nyear|month|day|hour|minute|second|millis\n -->\n<fieldType name=\"date\" class=\"solr.DateField\" precision=\"minute\" /> \n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12646407",
            "date": "2008-11-10T23:21:05+0000",
            "content": "An average user may not very familiar w/ Date Math syntax .\n\nbut if they're doing enough stuff with dates that they're worried about the precision they probably ought to be.\n\nthat said: a more straight forward \"precision\" option would certainly be better then forcing the user to know the Date Math Parser syntax if all we are supporting rounding down ... my previous suggestion was mainly along the lines of \"if we want to support both rounding down or up, or support rounding to an interval (ie: 5 minutes) let's add those features to Date Math and reuse that syntax\"\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12646464",
            "date": "2008-11-11T04:15:37+0000",
            "content": "most of the users would just need a precision like thing and it is intuitive as to how it behaves. May be roundTo can be another option (for the advanced users) "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12683134",
            "date": "2009-03-18T19:12:51+0000",
            "content": "Deferring to 1.5 \u2013 with trie support coming in, this has less significance now. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12796124",
            "date": "2010-01-04T09:27:48+0000",
            "content": "With the introduction of Trie fields is it not irrelevant now? can we close it "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12835008",
            "date": "2010-02-17T21:41:33+0000",
            "content": "With the introduction of Trie fields is it not irrelevant now? can we close it \n\nTrieFields make it more efficient to do range searches on numeric fields indexed at full precision, but it doesn't actually do anything to round the fields for people who genuinely want their stored and index values to only have second/minute/hour/day precision regardless of what the initial raw data looks like.\n\nSo while TrieFields definitely make this less of a priority from a performance standpoint, it doens't solve hte full problem.\n\n(Unless i'm missing something, actually rounding the values prior to indexing will still help improve performance in general because it will reduce the total number of Terms ... with TrieFields isn't the original value is always indexed regardless of the precisionStep? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872414",
            "date": "2010-05-27T22:04:48+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043638",
            "date": "2011-06-03T16:46:15+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106468",
            "date": "2011-09-16T14:51:13+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234679",
            "date": "2012-03-21T18:08:51+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Upayavira",
            "id": "comment-13693088",
            "date": "2013-06-25T14:51:36+0000",
            "content": "Another approach to the same issue: https://issues.apache.org/jira/browse/SOLR-4772\n\nThat is, using an UpdateProcessor. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13695095",
            "date": "2013-06-27T22:06:07+0000",
            "content": "As a temporary workaround, a StatelessScript update processor can be used to execute a concise JavaScript script to perform the desired date rounding. I just coded one today (normalize-date.js) which will appear in the next early access release of my book at the end of next week. It lets you specify the unit of truncation (no \"rounding\"), from second to decade. It also \"normalizes\" abbreviated dates such as \"2012\", \"2012-04-15\", and missing \"Z\". It works for multivalued data fields as well. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717311",
            "date": "2013-07-23T18:47:50+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971197",
            "date": "2014-04-16T12:57:26+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-14043126",
            "date": "2014-06-25T07:18:41+0000",
            "content": "Looks like UpdateRequestProcessor is the best answer here. Should be safe to close? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14043413",
            "date": "2014-06-25T13:06:44+0000",
            "content": "Yeah, I think we can close it. We should pursue the update request processor. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14043414",
            "date": "2014-06-25T13:07:20+0000",
            "content": "See SOLR-4772 for an alternative approach. "
        }
    ]
}