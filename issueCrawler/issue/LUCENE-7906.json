{
    "id": "LUCENE-7906",
    "title": "Spatial relationship between Geoshapes",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "modules/spatial3d"
        ],
        "fix_versions": []
    },
    "description": "Hi,\n\nWorking with geosahpes and trying to resolve spatial relationships between them I came accross a big limitation when trying to solve the relationship between two geopolygons. This object does not expose the internal structure. In particular at some point, it is necessary to check if one polygon intersects the edges of the other polygon which currently is not possible as edges are not exposed.\n\nTo be able to perform such operation it can be several options. The ones I can think of are:\n\n1) Expose the edges of the polygon ( and probably the notable points for the edges) adding getters in the GeoPolygon interface. Easy to implement and leave users the responsability of coding the spatial relationship.\n\n2) Extends GeoPolygon interface to extends geoarea and leave the object make the spatial relationship. \n\n3) Extends GeoShape  interface so all shapes can infer the spatial relationship with other GeoShapes.\n\nI might be bias as my interest is in 2d Shapes in the unit sphere and there might be some cases which what I propose cannot be implemented or are againts the aim of the library.\n\nWhat do you think?\n\nCheers,\n\nIgnacio",
    "attachments": {
        "LUCENE-7906-Generator_update.patch": "https://issues.apache.org/jira/secure/attachment/12887053/LUCENE-7906-Generator_update.patch",
        "test-degenerate_point.patch": "https://issues.apache.org/jira/secure/attachment/12883690/test-degenerate_point.patch",
        "LUCENE-7906-test.patch": "https://issues.apache.org/jira/secure/attachment/12886351/LUCENE-7906-test.patch",
        "LUCENE-7906.patch": "https://issues.apache.org/jira/secure/attachment/12879984/LUCENE-7906.patch",
        "LUCENE-7906-AreaShape.patch": "https://issues.apache.org/jira/secure/attachment/12880228/LUCENE-7906-AreaShape.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16089649",
            "date": "2017-07-17T11:09:42+0000",
            "content": "Hi Ignacio Vera,\n\nIn Geo3D, there is currently only support for computing the intersection with shapes that implement GeoArea.  These only include GeoBBox (2D) and XYZSolid (3D).  Currently, GeoPolygon objects do not implement GeoArea.  This is by design.  There are many cases and corner cases that would need algorithmic development to properly implement polygon intersection.\n\nIf you need to support this case, feel free to supply a patch where GeoPolygon extends GeoArea.  You will need to implement getRelationship() for GeoComplexPolygon, GeoConvexPolygon, GeoConcavePolygon, and GeoCompositePolygon.  I would also urge you to include many test cases to be sure your code is working as designed. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16089690",
            "date": "2017-07-17T11:39:46+0000",
            "content": "Hi  Karl Wright,\n\nI would try to do so. I have already some code that works for simple polygons. Let see if I manage for more complex cases. I am concern with the case of GeoComplexPolygon but I will have a try.\n\nBy the way, there is something in the implementation of getRelationship in GeoRectangle that seems wrong. The  method call another method in  GeoBaseBox called isShapeInsideBBox. In this methods there is the following call:\n\nfinal GeoPoint[] pathPoints = path.getEdgePoints();\n\nExpecting more than one point returned that is not true as the doc says:\n\n  /**\n\n\tReturn a sample point that is on the outside edge/boundary of the shape.\n   *\n\t@return samples of all edge points from distinct edge sections.  Typically one point\n\tis returned, but zero or two are also possible.\n   */\n  public GeoPoint[] getEdgePoints();\n\n\n\nI think that method is not doing what it is expected. Still the overall method getRelationship seems to work.\n\nCheers,\n\nI.\n\n\n\n\n\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16089707",
            "date": "2017-07-17T11:51:38+0000",
            "content": "Multiple edge points must get returned when there are disconnected sections of the shape, when projected onto the world surface.  This happens in a couple of situations, most notably for XYZSolids, which can slice straight through a world and manifest themselves as multiple actual areas.\n\nThere is also no harm in returning more than one point, even for a connected area, except for performance loss. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16089788",
            "date": "2017-07-17T13:00:23+0000",
            "content": "Ok, I understand and I will try to follow similar strategy for polygons when possible.\n\nThanks!\n\nIgnacio ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16093125",
            "date": "2017-07-19T13:58:50+0000",
            "content": "Hi Karl Wright,\n\nAttached is the patches implementing GeoArea for polygons. I provide extended testing, \nSome notes:\n\na) I have to modified the method getEdgePoints() from GeoCompositeMembershipShape. It ewas returning only the edge points for the first shape which seems incorrect. My implementation is not very efficient but works.\n\nb)To be able able to bound the intersection of convex polygons I create the conves counter part. Maybe there is more efficient way of doing that.\n\nc) Would it be worthy to push the geoArea interface down to GeoShape? \n\nCheers,\n\nI.\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16093166",
            "date": "2017-07-19T14:34:18+0000",
            "content": "Hi Ignacio Vera, we do not want to push GeoArea implementation down to GeoShape, because of shapes that cannot compute intersections readily, e.g. GeoCircle.\n\nI agree that your implementation of GeoCompositePolygon.getEdgePoints() is correct.\n\nI'll review your patch when time permits; it will have to wait until tomorrow, most likely. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16093239",
            "date": "2017-07-19T15:10:26+0000",
            "content": "I had a quick look at the diff, and found this issue:\n\n\n+  @Override\n+  public int getRelationship(GeoShape shape){\n+    boolean isWithin = false;\n+    boolean isContains = false;\n+    for (int i=0; i<shapes.size(); i++) {\n+      GeoPolygon pol = (GeoPolygon) shapes.get(i);\n+      int relationship = pol.getRelationship(shape);\n+      switch (relationship){\n+        case GeoArea.OVERLAPS: return relationship;\n+        case GeoArea.WITHIN: isWithin=true; break;\n+        case GeoArea.CONTAINS: isContains=true;break;\n+        case GeoArea.DISJOINT: break;\n+      }\n+    }\n\n\n\nI note that OVERLAPS subcomponents return OVERLAPS as the result.  But this cannot be correct because an OVERLAP between a subcomponent might actually be WITHIN. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16094338",
            "date": "2017-07-20T08:17:55+0000",
            "content": "I thought it was enough with skipping the internal edges but I can reproduce the behavior when I have a collection of shapes inside a GeoCompositeMembershipShape. \n\nThe wrong behavior happens because of this call GeoBaseShape.isShapeInsidePolygon(final GeoShape geoShape).\n\nWhen checking in a multishape you might get SOME_INSIDE and therefore overlaps.\n\nThe Polygon to be compared should be the composite polygon and not the subcomponent so the methods returns the correct answer ALL_INSIDE.\n\nWhat it means is that either GeoConvexPolygon and GeoConcavePolygon should have a reference to the parent composite polygon. I have implemented it and it works but it means that the contructor for those objects need to change. Is that ok?\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16094483",
            "date": "2017-07-20T10:21:06+0000",
            "content": "Hi Ignacio Vera, I think it is OK to include a reference to the containing GeoPolygon in the constructor \u2013 but then you'd also need a pointer to the enclosing GeoPolygon in the constructor for GeoCompositePolygon, because they can be nested (and the factory constructs them in a nested fashion).\n\nI don't think you'll be able to have GeoCompositePolygon simply call the getRelationship() methods of its child GeoPolygon members.  I think you'll need to compute the intersection from first principles in GeoCompositePolygon itself, by asking the child polygons if any of their external edges get intersected etc.  That may require the addition of a new method to GeoPolygon, but that's what I think is needed. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16094628",
            "date": "2017-07-20T12:43:33+0000",
            "content": "Yes, adding a new interface method to the polygon interface does the trick. I have added the method GeoPolygon.intersects(Geshape geoshape) and it is working as expected. Patch attached ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16094674",
            "date": "2017-07-20T13:23:22+0000",
            "content": "Ignacio Vera, I had a quick glance at the newer patch.  So far, so good, but have a care for spelling and for code style.  Have a look here:\n\n\n+  private boolean instersectsEdge(GeoShape other,Edge currentEdge,Edge firstEdge){\n+    if (currentEdge == firstEdge){\n+      return false;\n+    }\n+    if (other.intersects(currentEdge.plane,currentEdge.notablePoints,currentEdge.startPlane,currentEdge.endPlane)) {\n+      return  true;\n+    }\n+    if (firstEdge == null){\n+      firstEdge = currentEdge;\n+    }\n+    return instersectsEdge(other,currentEdge.next,firstEdge);\n+  }\n\n\n\nFirst note: \"instersectsEdge\" is misspelled; let's fix that before proceeding to commit.\nSecond, the style guide for Lucene states that there's a space after commas in argument lists for methods.\n\nMinor details, but important.  I'll have a longer look this evening.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16094753",
            "date": "2017-07-20T14:20:57+0000",
            "content": "Yes, you are right.\n\nI fixed the spelling mistake and improve coding style. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16094784",
            "date": "2017-07-20T14:47:56+0000",
            "content": "Move the getRelationship method down to the GeoBasePolygon.  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16095531",
            "date": "2017-07-20T23:08:25+0000",
            "content": "Hi Ignacio Vera, I had a more detailed look a this patch.\n\nI note that there is a symmetry difference between GeoConcavePolygon and GeoConvexPolygon that I don't understand.  GeoConcavePolygon has the following lazy-init'd member variable:\n\n\n+  /** Convex polygon counter part used for bounding intersections. Lazy initialized */\n+  protected GeoPolygon convexPolygon=null;\n+\n\n\n\nGeoConvexPolygon has no similar member variable.  Can you explain why one has the converse shape, and the other doesn't?  What is the code trying to do here?\n\nI also worry a bit when a direct shape inversion is used, because points that are on a shape edge will be members of both the shape and its inverse.  That may not be what you want.\n\nThe tests look good so far, but you really want to consider adding a randomized test as well.  Have a look at extending some of the randomized Geo3d testing classes under spatial-extras to include testing intersections against polygons:\n\n\n06/29/2017  01:39 PM            10,420 Geo3dRptTest.java\n06/29/2017  01:39 PM             9,563 Geo3dShapeRectRelationTestCase.java\n04/17/2016  03:38 PM             3,418 Geo3dShapeSphereModelRectRelationTest.java\n04/05/2016  06:10 AM             6,144 Geo3dShapeWGS84ModelRectRelationTest.java\n03/31/2016  08:08 PM            10,239 RandomizedShapeTestCase.java\n\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16095821",
            "date": "2017-07-21T05:56:24+0000",
            "content": "Hi Karl Wright,\n\nThe problem with convex polygons is that the whole plane is within the shape and therefore if you try to bound the intersection with the convex polygon you get OVERLAP when the shape is actually WITHIN. What it holds true is that the bounds for an intersection for convex polygons are the ones defined by the convex counter part. Therefore I need to invert the shape to bound the intersection. The class variable is to cash the object so it is only created once. Does it make sense?\n\nI will try to implement randomized tests as well but it will take a bit longer because I have never used the framework and I am actually having problems running those tests (environment issues).\n\nFinally, I want to go back to the idea of moving GeoArea down to GeoShape. If the implementation for polygons is valid, it means that any shape that can implement the new interface method intersects(GeoShape geoShape) can implement GeoArea. You were concerned about circle intersection but I think it is a trivial implementation. We only need to add the interface GeoOutsideDistance to GeoShape which is free as all shapes already implement the interface. Then intersection is trivial by calculating the distance of the shape to the center of the circle. What do you think?\n\nCheers,\n\nIgnacio\n\n\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16095869",
            "date": "2017-07-21T06:53:43+0000",
            "content": "Ignacio Vera, requiring GeoArea implementation for all GeoShapes very much complicates the implementation of new GeoShapes, and I would be very much against it.  You are welcome to try to implement GeoArea for GeoCircles but remember that your distance computation does not work in WGS84, only in SPHERE.  Complex shapes like GeoPaths are not only messy to make work generally, but they also have even messier considerations when you use WGS84.  Polygons in WGS84 aren't much harder than polygons in SPHERE which is why I thought that was doable, but after that point it gets much tougher.  The \"GeoCircle\" is by definition the intersection of a specific plane with the unit ellipsoid, so it's in fact an ellipse and distance calculations are exorbitantly expensive.\n\nOne of the reasons I am absolutely certain we need to include GeoPolygons in the randomized testing is because, for the geo3d world, such testing is essential to be sure you've really covered all the corner cases and have no numeric precision problems.  So this is something we need to tackle I'm afraid.\n\nIf your concern is that you want new shapes to be able to support your way of computing intersection, let me point out that any shape where the edge planes go through the ellipsoid center is likely to be represented as a polygon, so you've got that well covered.  It's the shapes that don't have that characteristic that I don't think are straightforward to implement.  So for that reason I'm OK with the way it's set up now.\n\nThanks! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16095888",
            "date": "2017-07-21T07:17:32+0000",
            "content": "\nThe problem with convex polygons is that the whole plane is within the shape and therefore if you try to bound the intersection with the convex polygon you get OVERLAP when the shape is actually WITHIN. What it holds true is that the bounds for an intersection for convex polygons are the ones defined by the convex counter part. Therefore I need to invert the shape to bound the intersection. The class variable is to cash the object so it is only created once. Does it make sense?\n\nYes, I understand the limitations.  I'm not, however, thrilled with the lazy-init part of this since it gives us some thread safety concerns, and the \"inverse shape\" way of doing things has problems as I described earlier.  If all you are trying to do is model the bounds for each edge plane, you're probably better off, and safer too, computing and saving those bounds when the polygon is constructed.  You'll especially need to worry about almost-coplanar adjacent polygon edges; it may be better to construct a pair of perpendicular planes for each edge if you need a good bound.  Or, you can use the adjoining edges but just invert their sidedness; there's a SidedPlane constructor that does that.  Let me look carefully at the code for both kinds of polygon and give you my recommendation.\n\nThe above concerns are exactly why randomized tests are so valuable, by the way, and why they really need to be there before we can have assurance that your implementation is not going to generate a slew of bug reports when it hits the real world.\n\nThe randomized tests I pointed you at earlier construct mainly GeoBBox shapes to intersect against.  You'd want almost the same test but with random (but regular and not self-overlapping) GeoPolygons.  You'll need to put some thought into how to construct a random, non-degenerate GeoConvexPolygon or GeoConcavePolygon, especially with holes.  There are IllegalArgumentException conditions thrown by the constructors when shapes are found to be illegal for some reason, but I believe we removed some of these in the polygon constructors because of their cost.  Other randomized tests that construct GeoPolygons use a center point, and walk around the center point N times with a random angle each time and a random arc distance; that guarantees non-self-intersecting but doesn't prevent concavity/convexity.  You could use the GeoPolygonFactory method, though, to create a composite polygon from this consisting of multiple child shapes and that is guaranteed to work and be legal.  So I encourage you to look at how polygon construction is done in the existing tests.\n\nThanks! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16095906",
            "date": "2017-07-21T07:26:52+0000",
            "content": "Hi Ignacio Vera, for both GeoConcavePolygon and GeoConvexPolygon, there is a member variable already constructed as follows:\n\n\n  /** A bounds object for each sided plane */\n  protected Map<SidedPlane, Membership> eitherBounds = null;\n\n\n\nThis map can be used to look up the bounds, as a single Membership object, for every edge plane in the polygon.  I suggest you use this rather than some other way of doing it.\n\nThanks! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16096164",
            "date": "2017-07-21T11:54:10+0000",
            "content": "Ok, I did not know that distance calculation is only support for unit sphere. That is my use case so I guess I am bias. It is totally fine to leave things then as they are.\n\nThanks for your suggestions, I will try to put everything together in the next week or so.\n\nCheers,\n\nIgnacio ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16100839",
            "date": "2017-07-25T21:48:00+0000",
            "content": "Ignacio Vera, arcDistance is defined well for ellipsoids but surfaceDistance requires an iterative convergent loop.  Also, the GeoCircle is in fact a single plane which slices through the ellipsoid forming an ellipse.  Since surfaceDistance is prohibitively expensive to calculate for all but a sphere, an approximation is required either way, and the GeoCircle is fitted specially to the ellipsoid in order to be a good approximation for WGS84. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16101644",
            "date": "2017-07-26T13:05:07+0000",
            "content": "My qiestion is, is there any issue to implement intersects in the circle as:\n\n  @Override\n  public boolean intersects(GeoShape shape) {\n    if (circlePlane == null) \n{\n      return false;\n    }\n    return shape.intersects(circlePlane, circlePoints);\n  }\n\nOn another topic, I am having problems with GeoComplexPolygon. It seems they way I have implemented and the more efficient way of intersects with plane on the class give different results. I tried to implement an IntersectorShapeIterator but some of my test were failing. I need to have a closer look into that. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16101664",
            "date": "2017-07-26T13:27:13+0000",
            "content": "\nMy qiestion is, is there any issue to implement intersects in the circle as:\n\nIgnacio Vera Are you using \"p\" when you mean \"circlePlane\"?  This may work for circles, but it would need to be thoroughly tested.\n\n\nOn another topic, I am having problems with GeoComplexPolygon. It seems they way I have implemented and the more efficient way of intersects with plane on the class give different results. I tried to implement an IntersectorShapeIterator but some of my test were failing. I need to have a closer look into that.\n\nI am not sure quite what you mean here?  Can you give me a snippet of code? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16101670",
            "date": "2017-07-26T13:37:02+0000",
            "content": "I corrected the code above.\n\nI found the issue, it is in line 496 of GeoComplexPolygon:\n\nif (right != null && minValue >= low && right.traverse(edgeIterator, minValue, maxValue) == false) {\n\n\n\n\nIt seems that the condition  minValue >= low prevents to look for necessary planes. If a change the condition to maxValue >= low my test run smooth but I don't know if it is correct. What it is sure is that the condition is not right. Any ideas?\n\n\n\n\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16101674",
            "date": "2017-07-26T13:45:12+0000",
            "content": "Hi Ignacio Vera, the GeoComplexPolygon implementation of Node was modeled directly on Robert Muir's implementation of 2D polygons.  The code is very complex and very sensitive to changes, so before we change anything we must confirm that I made an error in revising the original code for the 3D case. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16101677",
            "date": "2017-07-26T13:49:54+0000",
            "content": "Here is the current 2D polygon code.  It has changed somewhat since I originally used it as a baseline.\n\n\n  /** \n   * Returns true if the point is contained within this polygon.\n   * <p>\n   * See <a href=\"https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html\">\n   * https://www.ecse.rpi.edu/~wrf/Research/Short_Notes/pnpoly.html</a> for more information.\n   */\n  public boolean contains(double latitude, double longitude) {\n    if (latitude <= maxY && longitude <= maxX) {\n      if (componentContains(latitude, longitude)) {\n        return true;\n      }\n      if (left != null) {\n        if (left.contains(latitude, longitude)) {\n          return true;\n        }\n      }\n      if (right != null && ((splitX == false && latitude >= minLat) || (splitX && longitude >= minLon))) {\n        if (right.contains(latitude, longitude)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n  \n  /** Returns true if the point is contained within this polygon component. */\n  private boolean componentContains(double latitude, double longitude) {\n    // check bounding box\n    if (latitude < minLat || latitude > maxLat || longitude < minLon || longitude > maxLon) {\n      return false;\n    }\n    \n    if (tree.contains(latitude, longitude)) {\n      if (holes != null && holes.contains(latitude, longitude)) {\n        return false;\n      }\n      return true;\n    }\n    \n    return false;\n  }\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16101694",
            "date": "2017-07-26T14:01:13+0000",
            "content": "The 2D tree creation code now looks like this:\n\n\n  /** \n   * Creates an edge interval tree from a set of polygon vertices.\n   * @return root node of the tree.\n   */\n  private static Edge createTree(double polyLats[], double polyLons[]) {\n    Edge edges[] = new Edge[polyLats.length - 1];\n    for (int i = 1; i < polyLats.length; i++) {\n      double lat1 = polyLats[i-1];\n      double lon1 = polyLons[i-1];\n      double lat2 = polyLats[i];\n      double lon2 = polyLons[i];\n      edges[i - 1] = new Edge(lat1, lon1, lat2, lon2, Math.min(lat1, lat2), Math.max(lat1, lat2));\n    }\n    // sort the edges then build a balanced tree from them\n    Arrays.sort(edges, (left, right) -> {\n      int ret = Double.compare(left.low, right.low);\n      if (ret == 0) {\n        ret = Double.compare(left.max, right.max);\n      }\n      return ret;\n    });\n    return createTree(edges, 0, edges.length - 1);\n  }\n\n  /** Creates tree from sorted edges (with range low and high inclusive) */\n  private static Edge createTree(Edge edges[], int low, int high) {\n    if (low > high) {\n      return null;\n    }\n    // add midpoint\n    int mid = (low + high) >>> 1;\n    Edge newNode = edges[mid];\n    // add children\n    newNode.left = createTree(edges, low, mid - 1);\n    newNode.right = createTree(edges, mid + 1, high);\n    // pull up max values to this node\n    if (newNode.left != null) {\n      newNode.max = Math.max(newNode.max, newNode.left.max);\n    }\n    if (newNode.right != null) {\n      newNode.max = Math.max(newNode.max, newNode.right.max);\n    }\n    return newNode;\n  }\n\n\n\nIf we adopt the new membership code we would need to adapt the new tree construction code as well. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16101725",
            "date": "2017-07-26T14:29:02+0000",
            "content": "My feel is that there is a min value missing:\n\n\n\thigh: higher value of the node\n\tlow: lower value ofthe node\n\tmax: maximum value of the tree\n\tmin: (missing) minimum value of the tree.\n\n\n\nThe condition you want to add is: minValue>=min insterad of minValue>=low ... then you discard edges out of scope.  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16101726",
            "date": "2017-07-26T14:29:10+0000",
            "content": "Ah, I included the wrong code.  The \"crosses\" detection uses this logic:\n\n\n        if (left != null) {\n          if (left.crosses(minLat, maxLat, minLon, maxLon)) {\n            return true;\n          }\n        }\n        \n        if (right != null && maxLat >= low) {\n          if (right.crosses(minLat, maxLat, minLon, maxLon)) {\n            return true;\n          }\n        }\n\n\n\nSo, you are correct; the code should read \"maxValue >= low\". ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16101735",
            "date": "2017-07-26T14:36:08+0000",
            "content": "Commit 2eba4cebc5fa963dc90cf31e8b10801c0161fc55 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2eba4ce ]\n\nLUCENE-7906: Logic fix for crosses condition ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16101736",
            "date": "2017-07-26T14:37:39+0000",
            "content": "Commit 5aa71427f2e4b22da22836e923fb52361f0d1721 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5aa7142 ]\n\nLUCENE-7906: Logic fix for crosses condition ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16101740",
            "date": "2017-07-26T14:38:31+0000",
            "content": "Commit 5d0e58fd7ac7f9cbe9f520f848b7fef847869130 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5d0e58f ]\n\nLUCENE-7906: Logic fix for crosses condition ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16101744",
            "date": "2017-07-26T14:40:10+0000",
            "content": "Ignacio Vera, I have pushed the change to GeoComplexPolygon that you suggested to all pertinent branches.  Hopefully this will no longer block development for you. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16101746",
            "date": "2017-07-26T14:40:32+0000",
            "content": "Great! Shall I add it to the patch?\n\nI have the random test almost ready except for polygon with holes. I am concern because sometimes get a bit stuck when trying to build shapes with very specific characteristics. I will send you a new patch soon.\n\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16101751",
            "date": "2017-07-26T14:42:38+0000",
            "content": "Ignacio Vera The patch should not contain the GeoComplexPolygon fix, since that has been already committed.  You may want to git pull before generating the new patch? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16110521",
            "date": "2017-08-02T08:29:57+0000",
            "content": "Hi Karl Wright,\n\nI have attached a new path withrandom test. I have actually created a randomGeoShapeGenerator that allows me to generate Random shapes with known spatial properties.  All tests seems ok.\n\nI have tried to push down GeoArea down to GeoShape and I didn't get any surpises and it can be easily test with small modification in the new random shape generator. But (there is always a but), the implementation is currently not so clean because the class GeoCompositeMembershipShape does not extends any of the base classes. \n\nCheers,\n\nI.\n\n\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16110811",
            "date": "2017-08-02T12:43:07+0000",
            "content": "Ignacio Vera, thanks for the tests!  I've had a look, and I think this is in good enough shape to commit.\n\nThe only comments I have are:\n\n(1) If there's any thought that the \"intersects\" method being added to GeoPolygon might need to be added to other shapes, e.g. GeoCircle or GeoPath, then we should think about the interface structure more, as you have hinted.  There are a number of possibilities here; I'm interested mainly in permitting shapes that do not understand how to intersect with other shapes.  Maybe we want to insert another level in the interface hierarchy that would allow this characteristic to be separable, e.g. GeoIntersectableShape?\n\n(2) The randomized tests seem to concentrate on PlanetModel.SPHERE.  Are there any WGS84 tests?  That's where a lot of issues might arise.\n\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16110828",
            "date": "2017-08-02T12:49:50+0000",
            "content": "No, The current patch is very similar to the last one only adding GeoArea to GeoPolygons but with the radomShapeGenerator tests. I am looking forward to hearing what you want to propose.  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16110887",
            "date": "2017-08-02T13:26:37+0000",
            "content": "Ignacio Vera, here is my hierarchy change proposal.\n\nThe current main hierarchy is:\n\nGeoDistanceShape -> GeoMembershipShape -> GeoShape\n\nThe various Geo shapes all implement either GeoDistanceShape or GeoMembershipShape.\n\nI would propose that we expand the hierarchy in this way:\n\nGeoDistanceShape -> GeoAreaShape ->  GeoMembershipShape -> GeoShape\n\nThe \"intersects\" method would be defined in GeoAreaShape, and it would also include \"implements GeoArea\".  The base class hierarchy would, likewise, be extended, and a new GeoBaseAreaShape base class added.\n\nWhat do you think? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16110911",
            "date": "2017-08-02T13:39:55+0000",
            "content": "(1) I propose is to create a new interface that implements GeoShape and GeoArea and adds the insersects method. I would prefer to call the interface GeoAreaShape. \n\n(2) No, the randomized tests use a random planetmodel calling the method randomPlanetModel(). Note I kept the orginal hardcoded test I developed at the begining, which are focused in the SPHERE. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16110917",
            "date": "2017-08-02T13:41:54+0000",
            "content": "We clearly agree on the name. 100% agree, I will work on that! ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16112389",
            "date": "2017-08-03T08:14:05+0000",
            "content": "Hi Karl Wright,\n\nAttached is a new Patch with the new proposed interface GeoAreaShape.  It was trivial to add this new interface for existing Shapes.\n\nI created a new composite for GeoAreaShape and use it as the base class for GeoCompositePolygon. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16112638",
            "date": "2017-08-03T12:23:29+0000",
            "content": "Hi Ignacio Vera, I tried folding your patch into my workarea and running the standard \"ant test\" on it.\n\n(1) I got 20 warnings that look like we should fix them:\n\n\n    [javac]                                     ^\n    [javac] C:\\wipgit\\lucene4\\lucene-solr\\lucene\\spatial3d\\src\\test\\org\\apache\\lucene\\spatial3d\\geom\\RandomGeoShapeRelationshipTest.java:131: warning: auxiliary class Constraints in C:\\wipgit\\lucene4\\lucene-solr\\lucene\\spatial3d\\src\\test\\org\\apache\\lucene\\spatial3d\\geom\\RandomGeoShapeGenerator.java should not be accessed from outside its own source file\n    [javac]         constraints = new Constraints();\n    [javac]                           ^\n\n\n\nThe new test RandomGeoShapeRelationshipTest takes too long to run (5 minutes) for normal consumption.  Usually tests have a certain relatively small number of iterations but we run them multiple times through the process known as \"beasting\".  For example:\n\n\nant beast -Dbeast.iters=100 -Dtestcase=TestGeo3DPoint -Dtestmethod=testRandomMedium -Dtests.dups=6 -Dtests.iters=10\n\n\n\nCan you reduce the number of internal iterations that test does?  Or better yet, point me at where I'd do that?  Thanks!\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16112676",
            "date": "2017-08-03T13:00:09+0000",
            "content": "Attached a new version. The compiler warnings should be gone now.\n\nI lower the iterations so the complete suit typically runs in ~30 sec. The slower test in the new suite is the contains because sometimes it takes a few seconds to find the right shape.\n\nyou can control iteration under the class RandomGeoShapeRelationshipTest. At the moment is set to 5 except for contains which is not repeated.\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16112771",
            "date": "2017-08-03T13:59:34+0000",
            "content": "I committed this to master, branch_6x, and branch_7x.\n\nIgnacio Vera, I highly recommend \"beasting\" the new tests to see if we get anything out of them under more extreme conditions.  If very few iterations require a lot of time to come up with good shapes, it might worth reconsidering shape construction in the tests so that it is less likely to arrive at crazy shapes that need to be discarded.  We want to achieve confidence that the tests are in fact heavily exercising the logic you've written.\n\nThanks again for the contribution!  I will be looking forward to using this code myself in the next few months, depending on how things go.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16112812",
            "date": "2017-08-03T14:26:51+0000",
            "content": "Karl Wright, thanks for committing this new feature, I hope it will prove very useful as well for my use case.  I am already using them in LUCENE with very promising results.\n\nThe big offender is the CONTAINS test as finding the right shape can be difficult because there is too much freedom. I have considered removing it all together as the feature is tested in the WITHIN test (being the opposite case). Then the tests converge quite fast.\n\n\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16112814",
            "date": "2017-08-03T14:27:36+0000",
            "content": "FWIW, the commit messages for this ticket describe it as LUCENE-7606, not 7906.  My apologies!! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16112839",
            "date": "2017-08-03T14:41:05+0000",
            "content": "The https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=39d6be4 commit for this ticket appears to have broken ant precommit - specifically saying Rat problems were found! re: missing Apache License header(s). ",
            "author": "Christine Poerschke"
        },
        {
            "id": "comment-16112859",
            "date": "2017-08-03T14:53:03+0000",
            "content": "Christine Poerschke, \"ant precommit\" for me blows up on the solr dev guide.  I've been blocked from using it for days.  I opened a discussion thread in the dev list.\n\nPerhaps you know why this is happening for me? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16112866",
            "date": "2017-08-03T14:55:28+0000",
            "content": "Commit a381bdbaaab60c9d53a574ba1c8a4b4815b51b85 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a381bdb ]\n\nLUCENE-7906: Fix ant precommit issue with test license header. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16112869",
            "date": "2017-08-03T14:56:42+0000",
            "content": "Commit e9ce58b20e182361790edf79a44c38e006395c38 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e9ce58b ]\n\nLUCENE-7906: Fix ant precommit issue with test license header. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16112871",
            "date": "2017-08-03T14:57:56+0000",
            "content": "Commit 934db4a9c42af1186617afead7edb8dcebcb18eb in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=934db4a ]\n\nLUCENE-7906: Fix ant precommit issue with test license header. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16112922",
            "date": "2017-08-03T15:22:45+0000",
            "content": "Ignacio Vera, I'm getting an \"ant documentation-lint\" error for the new class GeoCompositeAreaShape; says there's missing javadoc.  I can't find anything obviously wrong with it however. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16112927",
            "date": "2017-08-03T15:26:59+0000",
            "content": "Commit c6ae0496627236b0108941e35cb4646935ad53c3 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c6ae049 ]\n\nLUCENE-7906: Add missing override, fixing javadoc ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16112929",
            "date": "2017-08-03T15:28:12+0000",
            "content": "Commit 4a882739592aea109503c8e62c5730cd9b6ea64b in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4a88273 ]\n\nLUCENE-7906: Add missing override, fixing javadoc ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16112933",
            "date": "2017-08-03T15:29:03+0000",
            "content": "Commit 893ea166ef286a7118c3ac5ffc90f27e5b94789d in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=893ea16 ]\n\nLUCENE-7906: Add missing override, fixing javadoc ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16112955",
            "date": "2017-08-03T15:43:53+0000",
            "content": "Commit dd00446bb912cbb7143d4e8d2394ac9960735f49 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dd00446 ]\n\nLUCENE-7906: Add missing constructor to make precommit happy ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16112969",
            "date": "2017-08-03T15:45:06+0000",
            "content": "Commit daa12d18cade4fec523d53ceac3a3594aee017f4 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=daa12d1 ]\n\nLUCENE-7906: Add missing constructor to make precommit happy ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16112971",
            "date": "2017-08-03T15:45:58+0000",
            "content": "Commit 752d57ef4e2e128fd03dccb681a3e0a05557f3b5 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=752d57e ]\n\nLUCENE-7906: Add missing constructor to make precommit happy ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16113527",
            "date": "2017-08-03T21:28:45+0000",
            "content": "Commit ac1727d9480645f28c8ea749b622b3f60c8951d7 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ac1727d ]\n\nLUCENE-7906: More fixes for precommit breakage: can't use Math.toRadians ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16113528",
            "date": "2017-08-03T21:29:49+0000",
            "content": "Commit 23d383765b1effaf1df8fd5a0132d32dd17b6840 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=23d3837 ]\n\nLUCENE-7906: More fixes for precommit breakage: can't use Math.toRadians ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16113531",
            "date": "2017-08-03T21:30:38+0000",
            "content": "Commit 08be919d3e4029f7ab53dc37a62e7cfd764b03e7 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=08be919d ]\n\nLUCENE-7906: More fixes for precommit breakage: can't use Math.toRadians ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16114054",
            "date": "2017-08-04T07:32:26+0000",
            "content": "thanks for fixing these issues. I found the ticket about the issue of using Math.toRadians and I understand why it is troblesome. Hopefully it will be stable now!\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16116428",
            "date": "2017-08-07T11:01:58+0000",
            "content": "Commit 18e1b40b1c4a15379da865fef05f9a58a2dbdcbf in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=18e1b40 ]\n\nLUCENE-7918: Revamp the API for composites so that it's generic and useful for many kinds of shapes.  Committed (as was LUCENE-7906) on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16116430",
            "date": "2017-08-07T11:03:41+0000",
            "content": "Commit e3f5aed562b2e398a40ea85ee8264d28fc0e023b in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e3f5aed ]\n\nLUCENE-7918: Revamp the API for composites so that it's generic and useful for many kinds of shapes.  Committed (as was LUCENE-7906) on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16116432",
            "date": "2017-08-07T11:04:33+0000",
            "content": "Commit 7d1c7e757668337ec33bc543c9718320fd6974fe in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7d1c7e7 ]\n\nLUCENE-7918: Revamp the API for composites so that it's generic and useful for many kinds of shapes.  Committed (as was LUCENE-7906) on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16141443",
            "date": "2017-08-25T09:57:47+0000",
            "content": "I think I found an issue with degenerate geopoints. If the degenerate Geopoint lays on the boundary of a shape, the relationships between the objects are not symetrical:\n\nThe bounding box thinks it contains the degenerated point.\nThe degenerated point thinks it intersects the shape.\n\n Not sure what is the right answer:\n\nIf the answer is WITHIN/CONTAINS: Method intersects(Plane plane, ....) should always return false.\n\nIf the answer is OVERLAPS/OVERLAPS: Method intersects(GeoShape geoShape) should pass a plane for a degenerated GeoPoint. In this case I think we should consider creating a Geoshape containing a point and the plane.\n\nThanks,\n\nI.\n\n\n\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16141541",
            "date": "2017-08-25T12:26:55+0000",
            "content": "Ignacio Vera, a point that is on the edge of a shape should be considered to be within the shape.  So the proper answer is WITHIN/CONTAINS.\n\nCan you create a new ticket for this issue?  Thanks!\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16160782",
            "date": "2017-09-11T06:20:04+0000",
            "content": "Hi Karl Wright,\n\nI attach a new version of the random shape generator class. I think it belongs to this ticket. Main changes are:\n\n\n\tRename the class to \"Geo3d\"\n\tAdded two new shapes, GeoPointShape and degenerate path.\n\tImprove test by providing feedback in case they fail\n\n\n\n\nI \"beasted\" the test and run precommit successfully.\n\nThanks! ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16161042",
            "date": "2017-09-11T10:32:57+0000",
            "content": "Hi Ignacio Vera, I can't get this patch to apply; it's created from the wrong point within the hierarchy.  Can you recreated it and reattach?  Thanks! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16161050",
            "date": "2017-09-11T10:46:25+0000",
            "content": "The problem seems to be that there's an earlier patch that's missing:\n\n\nerror: lucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeo3dShapeGenerator.java: No such file or directory\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16161064",
            "date": "2017-09-11T11:00:52+0000",
            "content": "sorry about this Karl Wright,\n\nI have the feeling I generated the patch and the project was not clean. Attached a new version, I hope this work.\n\nThanks! ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16161073",
            "date": "2017-09-11T11:05:11+0000",
            "content": "Ignacio Vera, I'm getting the same error.\nMaybe you can do a fresh checkout and copy your changes into it before generating a new patch? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16161100",
            "date": "2017-09-11T11:23:34+0000",
            "content": "I have recreated the patch from scratch and it is generated using plain git command. This should work. sorry again! ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16161148",
            "date": "2017-09-11T12:29:30+0000",
            "content": "As an aside, this is a good illustration on the weaknesses of patch files compared to GitHub Pull Requests. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16161183",
            "date": "2017-09-11T13:01:06+0000",
            "content": "Commit cd425d609cee8bcea6dbfeab8b3d42b1ce48eb40 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cd425d6 ]\n\nLUCENE-7906: Add new shapes to testing paradigm.  Committed on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16161186",
            "date": "2017-09-11T13:02:27+0000",
            "content": "Commit 38474e047dd3a5ac9dbe5fbb96595a0a74fec8da in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=38474e0 ]\n\nLUCENE-7906: Add new shapes to testing paradigm.  Committed on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16161188",
            "date": "2017-09-11T13:03:33+0000",
            "content": "Commit 3c7ceab4183aace9f31363a220f1f4dfc952ccbe in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3c7ceab ]\n\nLUCENE-7906: Add new shapes to testing paradigm.  Committed on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16161222",
            "date": "2017-09-11T13:20:06+0000",
            "content": "I think something did not go as expected:\n\nlucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomBinaryCodecTest.java \t\tdiff | blob | history\nlucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeGenerator.java \t[deleted file] \tblob | history\nlucene/spatial3d/src/test/org/apache/lucene/spatial3d/geom/RandomGeoShapeRelationshipTest.java \t\tdiff | blob | history\n\nThe RandomGeoShapeGenerator.java class was deleted but not replaced with RandomGeo3dShapeGenerator.java ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16161384",
            "date": "2017-09-11T14:48:26+0000",
            "content": "Commit e44ee16c74832031556e0c2c2e0b9fd0588e968b in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e44ee16 ]\n\nLUCENE-7906: Include missing file ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16161385",
            "date": "2017-09-11T14:49:36+0000",
            "content": "Commit 1a55be800bd63efb11098c7e8929d8ff88232ec7 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1a55be8 ]\n\nLUCENE-7906: Include missing file ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16161386",
            "date": "2017-09-11T14:50:34+0000",
            "content": "Commit 665f84843c8ac75d997ee107255bc51426226e5c in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=665f848 ]\n\nLUCENE-7906: Include missing file ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16161388",
            "date": "2017-09-11T14:52:04+0000",
            "content": "Ignacio Vera, for some reason git commit -a did not pick up the added file.  My apologies.  I had to explicitly add it.  Should be fixed now. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16165891",
            "date": "2017-09-14T07:33:36+0000",
            "content": "Hi Karl Wright,\n\nI have realized there is something no correct in the random shape generator. Currently it is only building shapes in a portion of the planet! (lat and lon between 0 and 1) Attached is the fix to build shapes in the whole planet.\n\nI \"beasted\" the test and there were no surpises and performance seems to improve. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16165914",
            "date": "2017-09-14T07:52:37+0000",
            "content": "Commit 12b0acdf7c03a905151300c9b635c23e9453e26d in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=12b0acd ]\n\nLUCENE-7906: Fix random shape generator.  Committed on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16165916",
            "date": "2017-09-14T07:53:47+0000",
            "content": "Commit 1ed0d4e5fb24ee82d3c0931051ead663d468ec62 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1ed0d4e ]\n\nLUCENE-7906: Fix random shape generator.  Committed on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16165917",
            "date": "2017-09-14T07:55:02+0000",
            "content": "Commit d3982f0dab77bcf31a29e3425cb471fcc1019671 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d3982f0 ]\n\nLUCENE-7906: Fix random shape generator.  Committed on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16165919",
            "date": "2017-09-14T07:56:21+0000",
            "content": "Ignacio Vera, I've committed this latest patch.\n\nThis ticket has been ongoing now for six weeks.  I think it's time to open new tickets when you find new problems.  So let's do that in the future. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16165923",
            "date": "2017-09-14T07:59:21+0000",
            "content": "Agree. Thanks! ",
            "author": "Ignacio Vera"
        }
    ]
}