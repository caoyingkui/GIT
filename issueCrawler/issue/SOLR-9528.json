{
    "id": "SOLR-9528",
    "title": "Make _docid_ (lucene id) a pseudo field",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "7.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "Lucene document id is a transitory id that cannot be relied on as it can change on document updates, etc.\n\nHowever, there are circumstances where it could be useful to use it in a search. The primarily use is a debugging where some error messages provide only lucene document id as the reference. For example:\n\n\nchild query must only match non-parent docs, but parent docID=38200 matched childScorer=class org.apache.lucene.search.DisjunctionSumScorer\n\n\n\nWe already expose the lucene id with [docid] transformer with _docid_ sorting.\n\nOn the email list, Yonik Seeley proposed that docid should be a legitimate pseudo-field, which would make it returnable, usable in function queries, etc.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-18T17:18:48+0000",
            "author": "Erick Erickson",
            "content": "The point about debugging is very well taken. Would that functionality be served by having the debug information return the internal Lucene doc ID? That would make it less tempting to use as input...\n\nAt first  blush though, I'm not a fan of allowing docid to be used as input to a query without a compelling real-world use-case. Partly I don't want to deal with \"query responses differ when using the same ID\" questions and having to unravel \"Oh, you mean the internal ID, not the <uniqueKey>\" . Allowing docid to be an output is fine IMO. This isn't a super-strong objection but I would like to see the practical application (not theoretical, one someone is actually using in the field) before going down this path though.\n ",
            "id": "comment-15501317"
        },
        {
            "date": "2016-09-18T18:01:18+0000",
            "author": "Yonik Seeley",
            "content": "I'm not a fan of allowing docid to be used as input to a query without a compelling real-world use-case. \n\nWe already do though... one can do \"sort=docid asc\"\nTo not totally be confused by that, one must understand what docid is (and that it can change across commits).\nSo in my view, it's not a matter of adding a new magic field, but just making the exisitng one more consistent.  If you can sort by it, and retrieve it, let one query by it as well. ",
            "id": "comment-15501376"
        },
        {
            "date": "2016-09-19T07:00:56+0000",
            "author": "Mikhail Khludnev",
            "content": "This might be off topic, but I'd like to remove internal docnum from that exception message.  ",
            "id": "comment-15502530"
        },
        {
            "date": "2016-09-19T07:05:53+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\n\nThis might be off topic, but I'd like to remove internal docnum from that exception message.\n\n\"docnum\" is a much better name anyways! Because itr does not contain the magical term \"id\", which has some \"persistent\" association in people's brain. I'd also be a fan to change the method parameter names in Lucene to use this term. ",
            "id": "comment-15502538"
        },
        {
            "date": "2016-09-19T10:11:05+0000",
            "author": "Alexandre Rafalovitch",
            "content": "+1 on changing the names if that helps.\n\n-1 on removing it from the message, unless something better is put there (like Solr document id....).  ",
            "id": "comment-15502960"
        },
        {
            "date": "2016-09-19T12:12:50+0000",
            "author": "Yonik Seeley",
            "content": "-1 to changing the name.\n\n_docid_ has been around forever (at least since 2010), and there's a high bar for breaking back compat.  It's a major source of frustration for users.  Additionally, I've never actually seen anyone that has run into _docid_ confuse it with anything else.  If people didn't read the docs carefully, they would be just as likely to fall into a trap of considering \"docnum\" to be persistent (why wouldn't it be? it's the document number)\n\nnew meme: \"hypothetical confusion considered harmful\"  ",
            "id": "comment-15503230"
        },
        {
            "date": "2016-09-20T00:17:10+0000",
            "author": "Hoss Man",
            "content": "I don't understand, practially/actionable, what this sentence means...\n\n\n...proposed that _docid_ should be a legitimate pseudo-field, which would \nmake it returnable, usable in function queries, etc.\n\n\n\n\n\tHow is (anyone) defining \"legitimate pseudo-field\" in this context?\n\tThere's not enough context to understand what is implied by the \"etc.\" in this sentence \u2013 what are some concrete examples of what users would be able to do in the future that they can't do now\n\t\n\t\talternatively: what are some examples of existing vs new syntax that is being proposed (either in configs or requests) for functionality that is already supported?\n\t\n\t\n\n\n\n\n\nIf the crux of this idea here is simply that the string _docid_ should be usable anywhere that a fieldname can be used even when it's not defined in the schema, then that seems like a particularly bad/inconsistent idea to me since all of the other magic _underscore_ fields that exist in solr are definied in the schema, and it's actually important how/if they are stored, docValues, etc...\n\nI've never been a huge fan of any magic field names in solr, and I personally would be confused as hell if we started doing encouraging users to use magic field names that look like real field names but don't actually exist \u2013 especailly because i would never be sure when a user is asking a question if they actually added _docid_ to their schema \u2013 a situation i have actaully encountered in real live and was then VERY confused by the described behavior of sort=_docid_ asc.  \n\nMy straw man proposal would be to (informally/formally) deprecate using _docid_ in the sort param, and insitead offer a docid() (or docnum(), whatever folks prefer) ValueSourceParser out of the box, that people could pass to other functions (for the purpose of filtering, sorting, whatever...), or request in the response via fl etc...   \n\nSpecial syntax like _docid_ in the sort param made sense in the early days of Solr, but feel hackish now that we have first order functions (which are clearly a \"computed\" value, with no ambiguity that it might be stored)\n\n(for that matter, i would argue we should do the same thing with \"score\" => score(), and add a random(seed) to replace the way users currently have to configure solr.RandomField ... but i'll save those fights for different jiras) ",
            "id": "comment-15505121"
        },
        {
            "date": "2016-09-20T01:04:56+0000",
            "author": "David Smiley",
            "content": "Special syntax like docid in the sort param made sense in the early days of Solr, but feel hackish now that we have first order functions (which are clearly a \"computed\" value, with no ambiguity that it might be stored)\n\n+1 to what you say Hoss. We've got ValueSourceParsers & DocumentTransformers now for this sorta thing.\n\nSo I suppose this means a Won't-Fix for this issue, and might mean other new issues, and possibly a removal of \"_docid_\" in the Ref guide (being deprecated, yet still works in some situations (I know it doesn't always work)). ",
            "id": "comment-15505203"
        },
        {
            "date": "2016-09-20T01:10:44+0000",
            "author": "Hoss Man",
            "content": "So I suppose this means a Won't-Fix for this issue, ...\n\nAssuming my vague guess at what's being suggested here is accurate, then yeah \u2013 that would be my vote.  But i'm still not certain i actaully understand the objective\n\nIf my guess was correct, then we could also just change the title of this jira and use it to track creating a patch that adds docid() as a ValueSource, and only once it exists update the ref guide to suggest it in any place where _docid_ is currently suggested ",
            "id": "comment-15505214"
        },
        {
            "date": "2016-09-20T01:29:04+0000",
            "author": "Yonik Seeley",
            "content": "docid() as a value source is a good idea... as you say, makes it clearer that it's a computed value.\nThat works for many contexts, except perhaps Alex's original usecase: fetch me the document that corresponds to a specific _docid_ .\nOne could use something like frange(l=123456789,u=123456789)docid() but that's pretty clunky ",
            "id": "comment-15505254"
        },
        {
            "date": "2016-09-20T17:03:18+0000",
            "author": "Hoss Man",
            "content": "That works for many contexts, except perhaps Alex's original usecase: fetch me the document that corresponds to a specific _docid_ .\n\nAh, ok see \u2013 i'm glad i asked: that usecase (\"search for a document using it's internal id\") was not actaully mentioned anywhere in this issue.\n\nI would argue that we should few that as a broader problem (in a distinct jira): \"make it less to find documents that have a specific function value\" (ie: add a new qparser/syntaxtic sugar for the behavior frange where the low/high values are the same ... maybe...\n\nq={!func eq=123456789}docid()\n\n ",
            "id": "comment-15507135"
        }
    ]
}