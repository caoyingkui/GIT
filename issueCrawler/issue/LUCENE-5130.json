{
    "id": "LUCENE-5130",
    "title": "fail the build on compilation warnings",
    "details": {
        "components": [],
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Many modules compile w/o warnings ... we should lock this in and fail the build if warnings are ever added, and try to fix the warnings in existing modules.",
    "attachments": {
        "LUCENE-5130.patch": "https://issues.apache.org/jira/secure/attachment/12593937/LUCENE-5130.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-24T13:48:29+0000",
            "content": "analyzers-common fixed ",
            "author": "Robert Muir",
            "id": "comment-13718372"
        },
        {
            "date": "2014-03-19T20:42:16+0000",
            "content": "I'm trying to coordinate an effort to clean up warnings in the IDEs that we support.  Before putting serious effort into that, I am tackling Uwe's recommendation to clean up warnings in the actual build first.  I think this may require its own issue rather than doing it on this issue, but I thought I would ask here first. ",
            "author": "Shawn Heisey",
            "id": "comment-13940959"
        },
        {
            "date": "2014-03-19T21:01:28+0000",
            "content": "Hi,\n\none important thing: We should not use something like \"+all warning -some warnings\". In that case we would prevent later java versions with more possible warnings (covered by +all) from suceeding the build. Failing on warnings should be done with an explicit set of warnings given. This is just a warning about the warnings  ",
            "author": "Uwe Schindler",
            "id": "comment-13940979"
        },
        {
            "date": "2014-03-19T23:26:37+0000",
            "content": "Uwe Schindler, I need to catch you on IRC sometime.\n\nWhat I am doing today is looking at what actually gets listed as a warning in the output from 'ant clean compile' on an unmodified trunk.  Then I ask Eclipse to turn one specific kind of warning that gets found there into an actual error, and I go and change things so that the \"problem\" is either fixed or the warning is suppressed.\n\nI'm starting with things that are easy to fix.  So far I have separate patches for case fallthrough and for redundant casts.  I did find a couple of things I need to ask about on the case fallthrough, and right now I am running tests after cleaning up redundant casts.\n\nI don't think this work really fits in this issue, but I wanted to ask before I open a new one. ",
            "author": "Shawn Heisey",
            "id": "comment-13941165"
        },
        {
            "date": "2014-03-20T07:15:06+0000",
            "content": "Shawn: this was referring to the actual config of the warnings:\n\n\n  <property name=\"javac.args\" value=\"-Xlint -Xlint:-deprecation -Xlint:-serial -Xlint:-options\"/>\n\n\n\nThis setting has the effect that all warnings are enabled (-Xlint)  minus the ones listed (-Xlint:-deprecation -Xlint:-serial -Xlint:-options). For pure warnings, this is no problem at all. But if we fail on warnings, this combination of flags is a bad idea: E.g.Java 8 or Java 9 or another compiler like J9's has another set of \"default\" warnings (the ones enabled by -Xlint). If somebody uses this newer version, the build will fail for no reason.\n\nBecause of this: If we fail builds on warnings, we should give an explicit list of warnings to report, like:\n\n\n  <property name=\"javac.args\" value=\"-Xlint:+unchecked -Xlint:+rawtypes -Xlint:+fallthrough ...\"/>\n\n\n\nIn that case, we dont compile against a unknown set of warnings (which may fail our build on newer Oracle JDKs or different JDK vendors), but against a set of warnings we agreed on.\n\nIn short: I am against to fail the build on warnings, if the set of warnings is not defined explicit. ",
            "author": "Uwe Schindler",
            "id": "comment-13941476"
        },
        {
            "date": "2014-03-25T00:26:34+0000",
            "content": "After a couple of days, it's all starting to filter through and make sense.  Thanks for continuing to pound me with information, Uwe.\n\nIs there any way with javac to pick and choose which warnings we want to simply report and which ones we want to actually turn into errors?  I suspect that the answer to that question is \"no.\" ",
            "author": "Shawn Heisey",
            "id": "comment-13945911"
        },
        {
            "date": "2014-04-16T12:54:48+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970888"
        },
        {
            "date": "2015-08-10T05:12:57+0000",
            "content": "<<Non-IBMers please ignore this message>>\n\nDont see this as a bug against IBM JDK.\n\nThanks and Regards\nBrijesh Nekkare\nIBM Java team ",
            "author": "Brijesh Nekkare",
            "id": "comment-14679574"
        }
    ]
}