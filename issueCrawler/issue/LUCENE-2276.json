{
    "id": "LUCENE-2276",
    "title": "Add IndexReader.document(int, Document, FieldSelector)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Wish",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "The Document object passed in would be populated with the fields identified by the FieldSelector for the specified internal document id\n\nThis method would allow reuse of Document objects when retrieving stored fields from the index",
    "attachments": {
        "LUCENE-2276+2539.patch": "https://issues.apache.org/jira/secure/attachment/12449625/LUCENE-2276%2B2539.patch",
        "LUCENE-2276.patch": "https://issues.apache.org/jira/secure/attachment/12449435/LUCENE-2276.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-07-14T08:44:22+0000",
            "content": "This patch adds the document(int,Document,FieldSelector) method to IndexReader.\n\nI had the implementation call document(int,FieldSelector) and then copy the data into the provided document (if it's not null).\nThis is not as \"good\" as having document(int,FS) call document(int, null, FS), but, as all currently implemented Readers are only bound to implement document(int,FS), which is abstract, it seemed safest to leave that method abstract rather than introducing a new abstract method.\n\nas such, subclasses can override document((int,doc,fs) for improved object reuse, as is done for SegmentReader and ParallelReader etc. where they allocate the Doc only if needed.\n\nUnit tests included to validate expected \"append to provided doc, if not null\" documented behavior. ",
            "author": "Woody Anderson",
            "id": "comment-12888252"
        },
        {
            "date": "2010-07-14T13:04:45+0000",
            "content": "instead of doing the following everywhere:\n\nfinal Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n   return doc(n, null, fieldSelector); \n}\n\n\n\nyou could do:\n\nfinal Document doc(int n, FieldSelector fieldSelector) throws CorruptIndexException, IOException {\n   return doc(n, new Document(), fieldSelector); \n}\n\n\n\nthen, the interface for doc(int, Document, FieldSelector) can state that the document must not be null, and can skip the if null, new Document check later on\n ",
            "author": "Tim Smith",
            "id": "comment-12888323"
        },
        {
            "date": "2010-07-15T15:47:58+0000",
            "content": "I could, but i prefer not to.\n\nI'll create another ticket/patch for the improvement that shows why.\nThat is, if you don't know that you want to re-use a document (the normal case), you can save some GC if you wait to allocate the document until inside the FieldsReader, and you know how many fields etc. you're going to need to accomodate (provided the FieldSelector is null).\nSo, leaving the allocation until the point of most information is the best idea i think.\n\nif not for this potential gain, i would agree with your comment. ",
            "author": "Woody Anderson",
            "id": "comment-12888833"
        },
        {
            "date": "2010-07-16T03:55:56+0000",
            "content": "LUCENE-2539 provides the reason for delaying construction of the Document in the FieldsReader.\n\nSince both patches affect the line of code where Document is allocated, i've included a joined patch that should apply cleanly.\nAlternately, you could apply 2276 and then 2539, and then resolve the pretty trivial conflict. ",
            "author": "Woody Anderson",
            "id": "comment-12889003"
        },
        {
            "date": "2012-03-20T15:42:44+0000",
            "content": "The StoredFieldVisitor API (4.0) makes this possible... ",
            "author": "Michael McCandless",
            "id": "comment-13233501"
        }
    ]
}