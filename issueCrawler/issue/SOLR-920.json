{
    "id": "SOLR-920",
    "title": "Cache and reuse IndexSchema",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "if there are 1000's of cores then the cost of loading unloading schema.xml can be prohibitive\nsimilar to SOLR-919 we can also cache the DOM object of schema.xml if the location on disk is same.  All the dynamic properties can be replaced lazily when they are read.\n\nWe can go one step ahead in this case. Th IndexSchema object is immutable . So if there are no core properties then the same IndexSchema object can be used across all the cores",
    "attachments": {
        "SOLR-920.patch": "https://issues.apache.org/jira/secure/attachment/12408789/SOLR-920.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12710625",
            "date": "2009-05-19T05:58:54+0000",
            "content": "how about an extra attribute in the cores tag to enable sharing as follows.\n\n\n<solr>\n  <cores adminPath=\"/admin/cores\" shareSchema=\"true\">\n  </cores>\n</solr>\n\n\n\nif shareSchema is set to true then for a given path only one instance of IndexSchema is created and it will be shared . It is the responsibilty of the user to ensure that he does not use any core specific properties in the schema.xml when this attribute is set to true "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12711856",
            "date": "2009-05-21T23:21:27+0000",
            "content": "Looks good to me.  What happens when a core has a copy of schema.xml in its conf/ dir and that schema.xml is potentially different from the shared one? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12711941",
            "date": "2009-05-22T04:36:35+0000",
            "content": "What happens when a core has a copy of schema.xml in its conf/ dir and that schema.xml is potentially different from the shared one?\n\n\nfor a given path on disk one instance of IndexSchema is maintained in memory. The cache looks as follows .\n\n\n// in CoreContainer.java. \n//The key is the absolute path to the schema.xml. The value is the IndexSchema instance.\nprivate Map<String,IndexSchema> schemaCache;\n\n\n\nIt is also possible to maintain a timestamp of the file also in the key (say /data/solr/confschema.xml:yyyyMMddhhmmss)so that if the file is modified a new instance of IndexScema can be created "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12712113",
            "date": "2009-05-22T14:40:12+0000",
            "content": "So if my core has its own schema.xml in the right place (in conf/schema.xml), that schema will be used, not the shard one? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12712349",
            "date": "2009-05-23T04:00:27+0000",
            "content": "So if my core has its own schema.xml in the right place (in conf/schema.xml), that schema will be used, not the shard one? \n\n\nright. one instance per (file+version). "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12712652",
            "date": "2009-05-25T07:32:29+0000",
            "content": "I plan to commit this in a day or two "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12712962",
            "date": "2009-05-26T11:18:20+0000",
            "content": "committed revision:778652 "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12713883",
            "date": "2009-05-28T05:26:39+0000",
            "content": "the attribute is not persisted back to solr.xml "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12718298",
            "date": "2009-06-11T05:14:46+0000",
            "content": "logging that re-use is done and the path is made right "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12718299",
            "date": "2009-06-11T05:15:55+0000",
            "content": "committed :r783631 "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12729955",
            "date": "2009-07-11T07:04:00+0000",
            "content": "I think this change is not mentioned in the CHANGES.txt? Also, the fix version should be marked as 1.4. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12764350",
            "date": "2009-10-10T13:48:11+0000",
            "content": "Just got around to reviewing this.... seems like it's an unbounded cache?\nIf someone kept modifying the schema and reloading the core (as can happen with replication too), then all the older versions hang around in the cache forever, right? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12764556",
            "date": "2009-10-12T05:27:17+0000",
            "content": "seems like it's an unbounded cache?\n\nyes. It is unbounded. Let us make it bounded "
        },
        {
            "author": "Drew Morris",
            "id": "comment-12833814",
            "date": "2010-02-15T14:42:35+0000",
            "content": "Just reviewing the syntax of the XML...  if you have 2 different schemas that should be shared with multiple cores... will this still work? So if I had 1000 cores sharing 1 schema and 1000 cores sharing a different schema will that be possible with this implementation? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12833857",
            "date": "2010-02-15T15:48:00+0000",
            "content": "yes . it is possible "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12833858",
            "date": "2010-02-15T15:50:10+0000",
            "content": ", then all the older versions hang around in the cache forever, right?\n\n\nnope. The cache key is the FQN of the  file . in replication , the same file is overwritten. So the cache entry is overwritten "
        }
    ]
}