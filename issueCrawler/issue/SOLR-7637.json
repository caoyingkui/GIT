{
    "id": "SOLR-7637",
    "title": "Improve error logging in the zkcli CLUSTERPROP command",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Trivial"
    },
    "description": "SOLR-7176 introduced capability to update Solr cluster properties via ZK CLI. The error logging implemented as part of that fix was not proper (i.e. the actual error was getting masked). We should improve the error logging to explicitly state the root cause.",
    "attachments": {
        "SOLR-7637.patch": "https://issues.apache.org/jira/secure/attachment/12737647/SOLR-7637.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-06-04T18:13:37+0000",
            "author": "Hrishikesh Gadre",
            "content": "Here is the patch. I have also removed redundant code handling NodeExistsException/BadVersionException since we retrying internally in the ZkStateReader::setClusterProperty(...) API. ",
            "id": "comment-14573299"
        },
        {
            "date": "2015-06-25T21:06:33+0000",
            "author": "Gregory Chanan",
            "content": "Why is the first cause the important one to print?  Seems arbitrary?\n\nWhy are the errors going to stderr when all the other errors in the script go to stdout? ",
            "id": "comment-14601945"
        },
        {
            "date": "2015-06-25T21:29:01+0000",
            "author": "Hrishikesh Gadre",
            "content": ">>Why is the first cause the important one to print? Seems arbitrary?\n\nFrom debugging perspective we are mostly insterested in ZOOKEEPER exception - which is represented by the first cause.\n\n>>Why are the errors going to stderr when all the other errors in the script go to stdout?\n\nAt least in Cloudera Manager environment, using System.err simplifies debugging since all the script executions are logged in stderr.log file. If we use System.out, the error message will go to stdout.log file instead (which can be confusing for the user). May be add it to both? ",
            "id": "comment-14601977"
        },
        {
            "date": "2015-06-25T21:33:53+0000",
            "author": "Hrishikesh Gadre",
            "content": "It looks like Java Throwable::printStackTrace() method also uses System.err. So I think it is appropriate (at least not incorrect) to use it for error reporting.\n\nhttp://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7u40-b43/java/lang/Throwable.java#Throwable.printStackTrace%28%29 ",
            "id": "comment-14601991"
        },
        {
            "date": "2015-06-25T21:41:09+0000",
            "author": "Gregory Chanan",
            "content": "From debugging perspective we are mostly insterested in ZOOKEEPER exception - which is represented by the first cause.\n\nIt is today \u2013 there's no guarantee that it will be in the future.  I realize the first exception today is pretty useless.  What about getting the root cause, e.g. http://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/exception/ExceptionUtils.html#getRootCause(java.lang.Throwable) ?  Or providing an example where that is not the correct thing to do.\n\nAt least in Cloudera Manager environment, using System.err simplifies debugging since all the script executions are logged in stderr.log file. If we use System.out, the error message will go to stdout.log file instead (which can be confusing for the user). May be add it to both?\n\nI think this is a reasonable argument, but seems most appropriate for a different jira.  If you are motivated, feel free to open another jira to discussing moving the errors from System.out to System.err. ",
            "id": "comment-14602005"
        },
        {
            "date": "2015-06-25T21:56:05+0000",
            "author": "Hrishikesh Gadre",
            "content": ">>It is today \u2013 there's no guarantee that it will be in the future. I realize the first exception today is pretty useless. What about getting the root cause, e.g. http://commons.apache.org/proper/commons-lang/javadocs/api-3.1/org/apache/commons/lang3/exception/ExceptionUtils.html#getRootCause(java.lang.Throwable) ? Or providing an example where that is not the correct thing to do.\n\nI personally don't see a lot of value of going below Zookeeper exception object especially since it has error code associated with it. But if you think that is important, we can simply print the exception trace so that all the stack trace will be available for debugging.\n\n>>I think this is a reasonable argument, but seems most appropriate for a different jira. If you are motivated, feel free to open another jira to discussing moving the errors from System.out to System.err.\n\nOk that is fine. ",
            "id": "comment-14602025"
        },
        {
            "date": "2015-06-25T22:03:39+0000",
            "author": "Gregory Chanan",
            "content": "I personally don't see a lot of value of going below Zookeeper exception object especially since it has error code associated with it. But if you think that is important, we can simply print the exception trace so that all the stack trace will be available for debugging.\n\nWhat's an example of \"going below Zookeeper exception object?\"  Can you give me a before vs after?  I'm not sure a backtrace is ideal for a CLI command, that sounds like something that should go in a log (though I don't think there is any log set up for the zkcli). ",
            "id": "comment-14602031"
        },
        {
            "date": "2015-06-26T00:19:57+0000",
            "author": "Hrishikesh Gadre",
            "content": ">>What's an example of \"going below Zookeeper exception object?\" Can you give me a before vs after? I'm not sure a backtrace is ideal for a CLI command, that sounds like something that should go in a log (though I don't think there is any log set up for the zkcli).\n\nNever mind. I found that the way KeeperException is constructed, it can not contain a different exception object as a root-cause. So we are guaranteed to get KeeperException even if we use ExceptionUtils.getRootCause(...)\nhttps://github.com/apache/zookeeper/blob/trunk/src/java/main/org/apache/zookeeper/KeeperException.java ",
            "id": "comment-14602171"
        }
    ]
}