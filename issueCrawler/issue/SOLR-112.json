{
    "id": "SOLR-112",
    "title": "Hierarchical Handler Config",
    "details": {
        "affect_versions": "1.3",
        "status": "Reopened",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "From J.J. Larrea on SOLR-104\n\n2. What would make this even more powerful would be the ability to \"subclass\" (meaning refine and/or extend) request handler configs: If the requestHandler element allowed an attribute extends=\"<another-requesthandler-name>\" and chained the SolrParams, then one could do something like:\n\n  <requestHandler name=\"search/products/all\" class=\"solr.DisMaxRequestHandler\" >\n    <lst name=\"defaults\">\n     <float name=\"tie\">0.01</float>\n     <str name=\"qf\">\n        text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4\n     </str>\n     ... much more, per the \"dismax\" example in the sample solrconfig.xml ...\n  </requestHandler>\n\n  ... and replacing the \"partitioned\" example ...\n  <requestHandler name=\"search/products/instock\" extends=\"search/products/all\" >\n    <lst name=\"appends\">\n      <str name=\"fq\">inStock:true</str>\n    </lst>\n  </requestHandler>",
    "attachments": {
        "SOLR-112.patch": "https://issues.apache.org/jira/secure/attachment/12349065/SOLR-112.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12465380",
            "date": "2007-01-17T07:42:04+0000",
            "content": "I attached a simple implementaion.  This includes the NamedList changes from SOLR-107\n\nI could not figure out any good way to test this with unit tests.  Any ideas? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12465689",
            "date": "2007-01-18T08:57:42+0000",
            "content": "Damn Ryan ... you keep taking on cool features nad churning out patches too fast for me to read them!\n\nthis sounds like a cool idea, the one big caveat is documenting exactly how the NamedList \"merge\" method you wrote is expected to work ... ie:\n\n\twhat it does if both named lists have the same key?\n\tdoes it do deep merging of nested named list/collections?\n\twhat does it do if one list has an element without a name (first and formost a\n    NamedLIst is an order list after all - the names are optional)\n\n\n\n..as far as unit tests go, the easiest way to test something like this is to start by writing a unit test of just the NamedList mergin logic \u2013 independent of anything else (this class would be a good place to put a test of the SOLR-107 changes too by the way).  \n\nnext would be to test that the merge logic is getting used as you expect, with a test that uses a config file with several handlers all inheriting various properties from one another, and then a test that does queries against them \u2013 the easiest way to do validate that the init params were getting inherited correctly would probably be to use an \"EchoConfigRequestHandler\" that looked something like this...\n\n   public class EchoConfigRequestHandler impliments SolrRequestHandler {\n     private NamedList initParams;\n     public void init(NamedList nl) { initParams = nl);\n     public void handleRequest(SOlrQueryRequest req, SolrQueryResponse rsp) \n{\n         rsp.add(initParams);\n     }\n   }\n\nthe AbstractSolrTestClass makes it easy for you to use any solrconfig file you want by overriding a method \u2013 so you could even write one test case using one config file with lots of examples of inherited init params and a test method for each asserting that the params are what is expected, and then subclass it with another test class instance that's exactly the same except for the using a differnet solrconfig file where all of hte params are duplicated out explicitly \u2013 testing your assumptions so to speak. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12466290",
            "date": "2007-01-21T02:30:11+0000",
            "content": "random idea i had that we might consider, not sure yet if i like it yet but i wanted to throw it out there...\n\nif someone has..\n\n  <requestHandler name=\"foo\" class=\"FooHandler\"> ... <requestHandler>\n  <requestHandler name=\"bar\" extends=\"foo\"> ... <requestHandler>\n  <requestHandler name=\"foo/baz\"> ... <requestHandler>\n\n(NOTE: foo/baz has no class or extends) \n\ncould/should we assume that \"foo/baz\" extends \"foo\" since it's a prefix of the name? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12466291",
            "date": "2007-01-21T03:21:35+0000",
            "content": "I think that path should be specified explicitly.\n\nI like that\n <requestHandler name=\"foo\" class=\"FooHandler\"> ... <requestHandler> \n\nwill only match /select?wt=foo\n\nand that:\n <requestHandler name=\"/foo\" class=\"FooHandler\"> ... <requestHandler> \n\nwill match\n /foo  (and /select?wt=/foo)\n\nI like the idea that somone adding the prefix '/' is an explicit gesture they want to set the URL path. (even if it overrides something else, for example /admin)\n\n "
        },
        {
            "author": "J.J. Larrea",
            "id": "comment-12466304",
            "date": "2007-01-21T07:00:02+0000",
            "content": "I'm sure you won't like your extemperaneous suggestion (foo/baz implicitly extending foo with baz) once you get a chance to think about it, Hoss. \n\nThe concern of efficiently structuring request handlers in solrconfig is quite different from he concern of publishing them to the outside world.  For example, mightn't one set up the equivalent of an \"abstract base class\" request config which has no value being invoked directly in a request, but has great value as the root of a tree of request configs which will be invoked?  And similarly, shouldn't one be able to rearrange the internal configuration (e.g. refactoring) without affecting an already \"published\" request syntax?\n\nIf it didn't break backwards compatibility, one could even consider having separate arguments defining an internal name (used for extending) and an external name (used for invoking), with either one being optional \u2013 allowing configs which are uninvokable but extendable, and vice versa.  Or for better backwards compatibility, one name could default to the other, but could be explicitly overridden (potentially to the empty string) if so desired.  I am not advocating either of these approaches (simpler is perhaps better) as much as using them to illustrate the separability of the concerns.\n\nDoes this make sense? "
        },
        {
            "author": "J.J. Larrea",
            "id": "comment-12466308",
            "date": "2007-01-21T07:44:24+0000",
            "content": "Re foo vs. /foo:\n\nI think of the SolrServlet as being just one way to invoke the request dispatcher.  One could for example write a SOAP or other RPC message receiver which called a method something like handleRequest(String reqName, SolrQueryRequest req, SolrQueryResponse rsp)1.  So I wouldn't want to bind the request invocation syntax too tightly to a URL-based mechanism for invocation.\n\nSimilarly, I think of allowing slashes in request handler names as merely a convention; it could be \"search.products.instock\" or \"search-products-instock\" just as easily.  Of course, it is advantageous for the handler name to be RFC1738-compliant (as those examples both are) so the pathInfo can be used to set the name, as we all like, e.g. http://localhost:8989/solr/select/search-products-instock\n\nWhat your suggestion comes down to, Ryan, is whether the pathInfo-parsed request adds a leading / slash to the request name, or not.  If it does it forces URL syntax into the request-naming space, and while that won't particularly hurt anything I'm not sure it buys anything either...  Why should a SOLR configurer need to make an explicit gesture to indicate they want to use the more \"modern\" pathInfo-based invocation style rather than the older qt= invocation style?  And shouldn't the request handler definition be either agnostic as to the request method (GET, POST, pathINFO, qt=, SOAP, direct API call, ...) or else have access to a more comprehensive mechanism for filtering which methods they respond to? \n\n1 (I haven't yet had a chance to catch up on the voluminous SOLR-104 discussion so this may not be the currently contemplated syntax, but hopefully my argument for potentially supporting non-URL-based invokers still holds.) "
        },
        {
            "author": "J.J. Larrea",
            "id": "comment-12466317",
            "date": "2007-01-21T09:31:42+0000",
            "content": "Regarding SOLR-112.patch, +1 on on the NamedList changes included from SOLR-107.\n\nBut I'm not  sure a \"blind\" NamedList merging is going to accomplish what is needed for an extends mechanism.  As it stands that merges defaults into defaults, invariants into invariants, appends into appends, along with any other named lists that happen to be in the base list.  That could stand some further thought...\n\nFirst, each existing SolrRequestHandler implementation (Standard and DisMax) in init() now parses defaults, appends, and invariants sub-NamedLists  into individual SolrParams,  and in handleRequest passes those and the request SolrParams into SolrPluginUtils.setDefaults, which sets up a dynamic chain:\n\n    params => invariant-parms -> ((request-params -> default-params) + appended-params)\n\nsuch that invariant-params override request-params which override default-params, with appended-params appended before the invariants override.  It's pretty cool.\n\nThe semantics of extended request handler configs may perhaps need to be similar, with the extender's invariant params overriding any params in the extendee, extendee invariants perhaps overriding non-invariants in the extender , extender defaults overriding extendee defaults, and the appends concatenated.  I suppose given the above rule, it would simply be:\n\n    invariant-params => extender-invariants -> extendee-invariants\n    default-params => extender-defaults -> extendee defaults\n    appended-params => extender-appends + extendee-appends\n\n(answering Hoss' question about what should happen if the keys are identical, but not his other questions)\n\nIn some ways this would be neatest if implemented at the SolrParams level, since there are nice classes like DefaultSolrParams and AppendedSolrParams, implementing the -> and + operators I used above, respectively, and which have informative toString()s.  Unfortunately that's not so simple without serious refactoring, since SolrRequestHandler.init takes a NamedList; as  defined, a handler could look for handler-specific initialization data in the NamedList, and also doesn't necessarily need to parse and chain invariants, defaults, and appends.\n\nI suppose this would still work at the NamedList level, as long as there were a flag for how to treat key conflicts (override vs. append), and that key were set specifically for invariants and defaults, or just appends.\n\nIf done that way, it still leaves the question of whether the \"merge\" is done statically by changing the NamedList, or dynamically by allowing NamedLists to be chained.  I suppose the only advantage of chaining is that toString() would be more informative, and alone that's probably not sufficient to justify the additional complexity. \n\nAnyway, those are some ideas for discussion. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12467712",
            "date": "2007-01-26T00:45:58+0000",
            "content": "I think you're dead on JJ ... any generic NamedList merging won't neccessarily do \"the right thing\" in all cases when talking about RequestHandler init args \u2013 very special logic would need to be used to deal with the defaults/appends/invarients in a logical manner, and that logic may not be bale to take into account other init params that other RequestHandlers (subclasses of the core ones perhaps) might add.\n\na cleaner way to deal with this might just be to have the individual RequestHandlers manage this themselves \u2013 using SolrCore.getRequestHandler(String) and protected methods they explicitly support to allow other instances to get access to their SolrParams.\n\nie...\n\n  <requestHandler name=\"search/products/all\" class=\"solr.DisMaxRequestHandler\" >\n    <lst name=\"defaults\">\n     <str name=\"facet.field\">category</str>\n     <float name=\"tie\">0.01</float>\n     <str name=\"qf\">\n        text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4\n     </str>\n  </requestHandler>\n\n  <requestHandler name=\"search/products/instock\" class=\"solr.DisMaxRequestHandler\">\n    <str name=\"extends\">search/products/all</str>\n    <lst name=\"defaults\">\n       <str name=\"facet.query\">price:[0 TO 100]</str>\n       <str name=\"facet.query\">price:[100 TO *]</str>\n    </lst>\n    <lst name=\"appends\">\n      <str name=\"fq\">inStock:true</str>\n    </lst>\n  </requestHandler> \n\n...where DisMaxRequestHandler (or most likely teh new Base class Ryan has written) has methods like...\n\n   protected SolrParams getDefaults()\n   protected SolrParams getInvarients()\n   protected SolrParams getAppends()\n\n...and the init method looks for an \"extends\" arg, if it's there fetches it from the SolrCore, tests it's class and casts it, then calls the methods above and builds up it's own SolrParams usign a combination of those and the ones explicitly specified in it's config. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835719",
            "date": "2013-11-30T13:25:35+0000",
            "content": "2013 Old JIRA cleanup "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-16533202",
            "date": "2018-07-05T02:41:55+0000",
            "content": "We now have initParams and useParams. This should be enough for this use-case.\n\nSafe to close? "
        },
        {
            "author": "David Smiley",
            "id": "comment-16533246",
            "date": "2018-07-05T03:44:01+0000",
            "content": "+1 to close; initParams is probably good enough (albeit I'd rather have the mechanism described here which is more intuitive to me). "
        }
    ]
}