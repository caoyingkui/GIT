{
    "id": "SOLR-12027",
    "title": "ThreadLeakError: 1 thread leaked from SUITE scope at org.apache.solr.search.join.BlockJoinFacetDistribTest",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Tests"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.3"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I tried to look into the sub.\u00a0The symptoms looks like.\u00a0\n\nWARN  (jetty-closer-2-thread-2) [    ] o.e.j.u.t.QueuedThreadPool QueuedThreadPool@qtp860938026{STOPPING,8<=9<=10000,i=0,q=1} Couldn't stop Thread[qtp860938\n\n\nThe thread successfully handled one request before. Then we have:\n\n 2> Feb 23, 2018 11:20:41 PM com.carrotsearch.randomizedtesting.ThreadLeakControl checkThreadLeaks\n  2> SEVERE: 1 thread leaked from SUITE scope at org.apache.solr.search.join.BlockJoinFacetDistribTest: \n  2>    1) Thread[id=76, name=qtp860938026-76, state=TIMED_WAITING, group=TGRP-BlockJoinFacetDistribTest]\n  2>         at sun.misc.Unsafe.park(Native Method)\n  2>         at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n  2>         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2163)\n  2>         at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.reservedWait(ReservedThreadExecutor.java:308)\n  2>         at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:373)\n  2>         at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:708)\n  2>         at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:626)\n  2>         at java.lang.Thread.run(Thread.java:745)\n\n\nand then\n\n  2> SEVERE: There are still zombie threads that couldn't be terminated:\n  2>    1) Thread[id=76, name=qtp860938026-76, state=TIMED_WAITING, group=TGRP-BlockJoinFacetDistribTest]\n  2>         at sun.misc.Unsafe.park(Native Method)\n  2>         at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n...\n[23:19:41.186] ERROR   0.00s | BlockJoinFacetDistribTest (suite) <<<\n   > Throwable #1: com.carrotsearch.randomizedtesting.ThreadLeakError: 1 thread leaked from SUITE scope at org.apache.solr.search.join.BlockJoinFacetDistribTest: \n   >    1) Thread[id=76, name=qtp860938026-76, state=TIMED_WAITING, group=TGRP-BlockJoinFacetDistribTest]\n   >         at sun.misc.Unsafe.park(Native Method)\n   >         at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n   >         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2163)\n   >         at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.reservedWait(ReservedThreadExecutor.java:308)\n\n \nThis also happen to other tests as well, not deterministic, but more or less is reproduced with ant beast.",
    "attachments": {
        "SOLR-12027.patch": "https://issues.apache.org/jira/secure/attachment/12911931/SOLR-12027.patch",
        "jetty-threadleak-problem-still.txt": "https://issues.apache.org/jira/secure/attachment/12911929/jetty-threadleak-problem-still.txt",
        "jetty-threadleak-problem.txt": "https://issues.apache.org/jira/secure/attachment/12911930/jetty-threadleak-problem.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-24T21:04:53+0000",
            "content": "The problem looks like is caused by ReservedThreadExecutor which has idle time for inactive thread 1 minute by default and I've found it's hard to adjust.\nIt doesn't sound weird but, that what you might see during test finishing: \n\n2018-02-24 10:34:04\nFull thread dump Java HotSpot(TM) 64-Bit Server VM (25.111-b14 mixed mode):\n\n\"Attach Listener\" #279 daemon prio=9 os_prio=31 tid=0x00007fa86d8ea000 nid=0x6407 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"qtp860938026-32\" #32 prio=5 os_prio=31 tid=0x00007fa86d465800 nid=0x8003 waiting on condition [0x000070000290e000]\n   java.lang.Thread.State: TIMED_WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000007be6fd818> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n        at java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:215)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2163)\n        at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.reservedWait(ReservedThreadExecutor.java:308)\n        at org.eclipse.jetty.util.thread.ReservedThreadExecutor$ReservedThread.run(ReservedThreadExecutor.java:373)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:708)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:626)\n        at java.lang.Thread.run(Thread.java:745)\n\n\"SUITE-BlockJoinFacetDistribTest-seed#[A8545A49DBAAAC5B]\" #12 prio=5 os_prio=31 tid=0x00007fa86a9da800 nid=0x5c0f waiting on condition [0x00007000016d8000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(Native Method)\n        at com.carrotsearch.randomizedtesting.ThreadLeakControl.checkThreadLeaks(ThreadLeakControl.java:582)\n        at com.carrotsearch.randomizedtesting.ThreadLeakControl$2.evaluate(ThreadLeakControl.java:439)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:705)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:139)\n        at com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:626)\n\n\"JUnit4-serializer-daemon\" #10 daemon prio=5 os_prio=31 tid=0x00007fa86a9c1800 nid=0x5603 waiting on condition [0x00007000015d5000]\n   java.lang.Thread.State: TIMED_WAITING (sleeping)\n        at java.lang.Thread.sleep(Native Method)\n        at com.carrotsearch.ant.tasks.junit4.events.Serializer$1.run(Serializer.java:50)\n...\n\n  \nThe only explanation is that interrupt() can not unpark that Jetty thread. A guy in a pub told me that it might happen.\nSo, if I set @ThreadLeakLingering(linger = 80000) it keeps beast happy thousand times on this test.\n\nMy proposal is to set lingering time above 1 min for all Solr tests and for Lucene ones which hit the same issue. Opinions?      ",
            "author": "Mikhail Khludnev",
            "id": "comment-16375772"
        },
        {
            "date": "2018-02-24T21:09:13+0000",
            "content": "I also checked the hint about StatsHandler for Jetty. I didn't make any significant difference to the beast.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16375775"
        },
        {
            "date": "2018-02-26T02:48:53+0000",
            "content": "Options?\n\u00a0\n\nI debugged it a little and it seems to me\u00a0that if add something like\u00a0\n\nSelectorManager manager = (server.getConnectors()[0]).getBean(SelectorManager.class);\nReservedThreadExecutor reservedThreadExecutor = new ReservedThreadExecutor(manager.getExecutor(), manager.getReservedThreads(),manager);\nreservedThreadExecutor.setIdleTimeout(10, TimeUnit.SECONDS);\nmanager.addBean(reservedThreadExecutor, true);\n\nin\u00a0 JettySolrRunner\u00a0class BEFORE call of\n\nserver.start()\n\nthen custom ReservedThreadExecutor\u00a0instance would be in charge.\u00a0\n\n\u00a0\n\n\u00a0...doesn't sound like a very good idea though.\u00a0 ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16376345"
        },
        {
            "date": "2018-02-26T04:10:25+0000",
            "content": "Commit d3ef153b09461aa0bd2f735954905321d6b72aed in lucene-solr's branch refs/heads/master from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d3ef153 ]\n\nSOLR-12027: Increasing thread lingering to 80s\n\nSometimes Jetty can't stop for a minute. We need tests wait more than a minute in the worst case\nto avoid test noise like ThreadLeakError: 1 thread leaked from SUITE scope. ",
            "author": "ASF subversion and git services",
            "id": "comment-16376377"
        },
        {
            "date": "2018-02-26T04:12:24+0000",
            "content": "Commit aa9b7d834e42b6a9dddb4eadec5df8e97b129e83 in lucene-solr's branch refs/heads/branch_7x from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=aa9b7d8 ]\n\nSOLR-12027: Increasing thread lingering to 80s\n\nSometimes Jetty can't stop for a minute. We need tests wait more than a minute in the worst case\nto avoid test noise like ThreadLeakError: 1 thread leaked from SUITE scope. ",
            "author": "ASF subversion and git services",
            "id": "comment-16376378"
        },
        {
            "date": "2018-02-26T11:43:55+0000",
            "content": "Andrey Kudryavtsev, thanks for your keen consideration as usual. Watching tests.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16376710"
        }
    ]
}