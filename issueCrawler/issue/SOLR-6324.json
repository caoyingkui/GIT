{
    "id": "SOLR-6324",
    "title": "Set finite default timeouts for select and update",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [
            "search",
            "update"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently HttpShardHandlerFactory and UpdateShardHandler default to infinite timeouts for socket connection and read. This can lead to undesirable behaviour, for example, if a machine crashes, then searches in progress will wait forever for a result to come back and end up using threads which will only get terminated at shutdown.\n\nWe should have some finite default, however conservative it might be. These parameters are already configurable, so for expert uses, they can be increased if necessary anyway.\n\nWill attach a patch to set connection timeout to 60s and read timeout to 600s, but I am not too concerned about the actual value as long as there is one.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "ASF GitHub Bot",
            "id": "comment-14086635",
            "date": "2014-08-05T19:23:26+0000",
            "content": "GitHub user andyetitmoves opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/79\n\n    Set default connTimeout to 60s, soTimeout to 600s\n\n    Patch for SOLR-6324.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/bloomberg/lucene-solr trunk-finite-timeouts\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/79.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #79\n\n\ncommit 3c8237f216d5e07edb2ab5a10d0d79f93f499605\nAuthor: Ramkumar Aiyengar <andyetitmoves@gmail.com>\nDate:   2014-08-05T18:17:41Z\n\n    Set default connTimeout to 60s, soTimeout to 600s\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14227220",
            "date": "2014-11-27T03:39:28+0000",
            "content": "Agreed - we need timeouts of some fine length.\n\nWe may want to be even more conservative on the read timeout though - I'm on the fence. Really, we have to consider what we want for something like an optimize request that takes 3 hours to return. Do we care that the call will timeout? Probably something like that should be kicked off and the status pulled, but we should still think about any standard long calls. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14227497",
            "date": "2014-11-27T10:42:03+0000",
            "content": "People shouldn't use optimize anyway, I wouldn't worry so much about breaking them and them having to change defaults if they really want to do it.\n\nMy preference is for keeping this number as low as sensible, I would rather have them fail early than wait for the first time a machine crashes and they see through the consequences of a long read timeout \u2013 not many people test for that. But that said, if there are other things which genuinely take more than this time, we can certainly consider increasing this (and contemplate if some kind of an asynchronous API or optimization suits better than making a client wait at one time for more than 10 mins!) "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14227600",
            "date": "2014-11-27T12:37:54+0000",
            "content": "People shouldn't use optimize anyway\n\nThat's not really true. There are still valid reasons to use optimize. There was just a backlash against it because it was over used and under understood.  "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14227682",
            "date": "2014-11-27T14:10:52+0000",
            "content": "Sorry, wasn't aware of that, thought it was always discouraged. As far as this discussion goes, sure, if that's a common enough thing to require a larger timeout, that's fine, it's still better than no timeout really \u2013 that's the bit that really troubles me. Though if we really were to support optimize as a supported mechanism, and it can take 3 hours, we should really be making it a proper async call so that you don't expect a client to hold on to a connection for 3 hours to get a response. I understand that would require a bit more effort though.. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14228011",
            "date": "2014-11-28T00:41:55+0000",
            "content": "This patch doesn't set any timeouts for updates? I've found that many people don't know about the update shard handler timeouts because it's not mentioned in the example solr.xml by default in contrast to the search timeouts. \n\nLarge timeouts are equally useless as no timeouts for heavy users but at least by having both update/search timeouts in solr.xml, people might pay more attention and actually set some sane values.\n\n+1 to the change. I swear I had opened an issue for the same thing a month back but I can't find it now. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14228013",
            "date": "2014-11-28T00:49:22+0000",
            "content": "Im still not happy about breaking optimize - it's a terrible user experience. We need to change it to just kick off and not wait or something more sensible than just breaking its current behavior for many, many cases by default.  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14228014",
            "date": "2014-11-28T00:53:11+0000",
            "content": "if that's a common enough thing to require a larger timeout\n\nAny feature we support should not have a call that gives a timeout as a fairly normal course of action. It needs to be mitigated in some way.  "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14228092",
            "date": "2014-11-28T06:24:14+0000",
            "content": "This patch doesn't set any timeouts for updates?\n\nThat's the change in ConfigSolr.java in code. If you are referring to the xml change, I can probably add that as well.. I agree it's currently a bad experience though that select and update timeouts are in different places.. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14228804",
            "date": "2014-11-29T15:56:01+0000",
            "content": "I rebased the change to trunk and resolved conflicts, as well as added update timeouts to the solr.xml as a guide for anyone changing them.. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14228807",
            "date": "2014-11-29T16:04:53+0000",
            "content": "If you are referring to the xml change, I can probably add that as well\n\nYes, that's what I meant. Thanks for adding those. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14250953",
            "date": "2014-12-18T01:24:09+0000",
            "content": "Well I'm unhappy about optimize still. It becomes a pretty ugly call. However, it's not very high on my list at the moment, and it's looking like SOLR-4509 will effectively enforce client side idle timeouts anyway. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14251594",
            "date": "2014-12-18T12:34:58+0000",
            "content": "I did look at seeing what I can do about optimize, but couldn't come up with any approach short of rearchitecting optimize to be async which I didn't have time for. The other possibility here was that we apply a different timeout on a per request basis (which btw is generally useful and something i wished for), but that ran to a dead end as well \u2013 I don't recall why now..\n\nThe stale check removal does force an idle timeout, but the connection timeouts still need to be made finite? "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14272586",
            "date": "2015-01-10T16:58:37+0000",
            "content": "Commit 1650768 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1650768 ]\n\nSOLR-6324: Set finite default timeouts for select and update. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14272588",
            "date": "2015-01-10T17:01:18+0000",
            "content": "Commit 1650769 from Mark Miller in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1650769 ]\n\nSOLR-6324: Set finite default timeouts for select and update. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14273040",
            "date": "2015-01-11T20:03:37+0000",
            "content": "I keep forgetting to use the message tag to close the pull request. I'll try and remember that in the future. "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-14273043",
            "date": "2015-01-11T20:23:59+0000",
            "content": "Github user andyetitmoves closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/79 "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332623",
            "date": "2015-02-23T05:01:01+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}