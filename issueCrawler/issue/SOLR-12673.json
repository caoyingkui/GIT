{
    "id": "SOLR-12673",
    "title": "Superset Query",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Here's the use-case I am trying to solve for document level access control.\n\nDocuments :\n\n[\n  {\"id\" : \"1\", \"users\" : [\"user1\"]},\n  {\"id\" : \"2\", \"users\" : [\"user4\"]},\n  {\"id\" : \"3\", \"users\" : [\"user1\", \"user2\"]},\n  {\"id\" : \"4\", \"users\" : [\"user1\", \"user2\", \"user3\"]},\n  {\"id\" : \"5\", \"users\" : [\"user1\", \"user2\", \"user3\", \"user4\"]}\n]\n\n\u00a0\n\nQuery : If the document has any user apart from user1, user2 or user3 don't show it.\nResults : id:1, id:3, id:4\n\nQuery : If the document has any user apart from user1, user2 don't show it.\nResults : id:1, id:3\n\nI'm thinking this can be solved by writing a post-filter\n\nSyntax:\n\n{!union_has_all field=users}user1,user2,user3\n\nThe post filter would get each document at a time and see if there is a user in that document that is not part of the query.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-17T00:29:12+0000",
            "content": "After some offline discussion with Steve a superset query would be a more accurate description of what this feature means.\n\nCurious if this should be a LUCENE issue ?\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16583217"
        },
        {
            "date": "2018-08-17T00:39:48+0000",
            "content": "I think you can accomplish this with a RegexpQuery, which allows for negation. Something like:\n\n\u00a0\u00a0\u00a0 ~(user1|user2)\n\nIt will be OK if the number of distinct users is not too large. I'm not sure you can do any better without some kind of precomputation of groups. For example, you could use the RegExp query and caching, or proactively come up with user anti-groups that are frequently queried together, and index those. ",
            "author": "Mike Sokolov",
            "id": "comment-16583225"
        },
        {
            "date": "2018-08-17T09:27:23+0000",
            "content": "I just want to make sure that you are aware of\u00a0LUCENE-7621 or tricks like\u00a0https://issues.apache.org/jira/browse/LUCENE-7148?focusedCommentId=15227916&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#comment-15227916 ",
            "author": "Mikhail Khludnev",
            "id": "comment-16583693"
        },
        {
            "date": "2018-08-20T08:45:35+0000",
            "content": "I suppose it can be solved by exclusive ranges over sorted terms\u00a0\n\n\u00a0fq=-([* TO user1} \\{user1 TO user2} {user2 TO *])\n\n\u00a0 ",
            "author": "Mikhail Khludnev",
            "id": "comment-16585637"
        },
        {
            "date": "2018-08-20T18:56:46+0000",
            "content": "Thanks everyone for the tips!\n\nHere's a index\n\n[\n{\"id\" : \"1\", \"users_ss\" : [\"user1\"], \"count_i\" : 1},\n{\"id\" : \"2\", \"users_ss\" : [\"user4\"], \"count_i\" : 1},\n{\"id\" : \"3\", \"users_ss\" : [\"user1\", \"user2\"], \"count_i\" : 2},\n{\"id\" : \"4\", \"users_ss\" : [\"user1\", \"user2\", \"user3\"], \"count_i\" : 3},\n{\"id\" : \"5\", \"users_ss\" : [\"user1\", \"user2\", \"user3\", \"user4\"], \"count_i\" : 4}\n]\n\nQuery : If the document has any user apart from user1, user2 don't show it.\n Results : id:1, id:3\n\nThis is what I tried so far :\n Mikhail, here is the frange query . Here's the query I fired\n\nq=*:*&fq={!frange cache=false l=0 incl=true}sub(sum(query($bq1),query($bq2)),count_i)&bq1=users_ss:user1^=1&bq2=users_ss:user2^=1\n\nThis however gives me only document 3 . We don't get document1 because of http://lucene.apache.org/core/7_4_0/queries/org/apache/lucene/queries/function/valuesource/MultiFunction.html#allExists-int-org.apache.lucene.queries.function.FunctionValues:A-\n\n\u00a0\n\nEDIT: Change func to frange to filter out score=0 documents\u00a0\n\nHere's another approach I tried with a solution Hoss has proposed\u00a0\n\nq={!frange u=1}eq(count_i,sum(termfreq(users_ss,\"user1\"),termfreq(users_ss,\"user2\")))\n\nThis seems to be doing the job\n\n{\n  \"responseHeader\":{\n    \"zkConnected\":true,\n    \"status\":0,\n    \"QTime\":7,\n    \"params\":{\n      \"q\":\"*:*\",\n      \"fl\":\"id,sum(termfreq(users_ss,\\\"user1\\\"),termfreq(users_ss,\\\"user2\\\")),count_i,score\",\n      \"fq\":\"{!frange l=1}eq(count_i,sum(termfreq(users_ss,\\\"user1\\\"),termfreq(users_ss,\\\"user2\\\")))\",\n      \"_\":\"1534788187996\"}},\n  \"response\":{\"numFound\":2,\"start\":0,\"maxScore\":1.0,\"docs\":[\n      {\n        \"id\":\"1\",\n        \"count_i\":1,\n        \"sum(termfreq(users_ss,\\\"user1\\\"),termfreq(users_ss,\\\"user2\\\"))\":1.0,\n        \"score\":1.0},\n      {\n        \"id\":\"3\",\n        \"count_i\":2,\n        \"sum(termfreq(users_ss,\\\"user1\\\"),termfreq(users_ss,\\\"user2\\\"))\":2.0,\n        \"score\":1.0}]\n  }} \n\n\n\u00a0\n\nSo looks like solutions do exist : My question would be is it worth writing a specialized query and would it be more efficient than these solutions ? ",
            "author": "Varun Thacker",
            "id": "comment-16586377"
        },
        {
            "date": "2018-08-21T19:12:23+0000",
            "content": "The problem with \"frange\" is that it doesn't leverage the underlying index to scale. \u00a0It's O(docs) where \"docs\" is the number of docs in the index, or possible smaller if used with other filters. \u00a0In your example there were no other filters.\n\nI rather like Mikhail Khludnev's solution of exclusive ranges; it is quite clever . \u00a0My instinct is to use CoveringQuery as Mikhail also pointed out. \u00a0I suspect it may perform the best since unlike the exclusive range queries, it only has to \"visit\" the number of terms in your query, not all the other terms that might exist. \u00a0Although even Mikhail's idea could be improved to address that by using numbers instead of strings, and thus leverage the points index. \u00a0Still, I recommend CoveringQuery. ",
            "author": "David Smiley",
            "id": "comment-16587883"
        }
    ]
}