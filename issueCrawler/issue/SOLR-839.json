{
    "id": "SOLR-839",
    "title": "XML Query Parser support (deftype=xmlparser)",
    "details": {
        "affect_versions": "1.3,                                            5.4,                                            6.0",
        "status": "Closed",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "components": [
            "query parsers"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Lucene includes a query parser that is able to create the full-spectrum of Lucene queries, using an XML data structure.\n\nThis patch adds \"xml\" query parser support to Solr.\n\nExample (from lucene/queryparser/src/test/org/apache/lucene/queryparser/xml/NestedBooleanQuery.xml):\n\n<BooleanQuery fieldName=\"contents\">  \n  <Clause occurs=\"should\">\n    <BooleanQuery fieldName=\"contents\">\n      <Clause occurs=\"must\">\n        <TermQuery>doesNotExistButShouldBeOKBecauseOtherClauseExists</TermQuery>\n      </Clause>\n    </BooleanQuery>\n  </Clause>\n  <Clause occurs=\"should\">\n    <TermQuery>bank</TermQuery>\n  </Clause>\n</BooleanQuery>",
    "attachments": {
        "lucene-xml-query-parser-2.4-dev.jar": "https://issues.apache.org/jira/secure/attachment/12393499/lucene-xml-query-parser-2.4-dev.jar",
        "SOLR-839-object-parser.patch": "https://issues.apache.org/jira/secure/attachment/12570793/SOLR-839-object-parser.patch",
        "SOLR-839.patch": "https://issues.apache.org/jira/secure/attachment/12393500/SOLR-839.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-12645735",
            "date": "2008-11-07T10:40:08+0000",
            "content": "XML Query Parser API.  I just noticed this is a 2.4-dev version (though no changes in 2.9-dev for this component).  We'll upgrade it to the same build as Lucene itself before committing. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12645736",
            "date": "2008-11-07T10:41:19+0000",
            "content": "Basic support for XML query parser.  There are likely to be configuration options desired to wire in extensions. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12645737",
            "date": "2008-11-07T10:43:35+0000",
            "content": "Example usage: http://localhost:8983/solr/select?q=%3CTermQuery%20fieldName=%22text%22%3Eipod%3C/TermQuery%3E&defType=xml&debugQuery=true\n\n=>\n\n<str name=\"querystring\"><TermQuery fieldName=\"text\">ipod</TermQuery></str>\n<str name=\"parsedquery\">text:ipod</str> "
        },
        {
            "author": "Mark Harwood",
            "id": "comment-12645751",
            "date": "2008-11-07T12:13:47+0000",
            "content": "A couple of comments, Erik.\n\nYou can probably look to cache the CorePlusExtensionsQueryParser - it's designed to be threadsafe.\n\nOne alternative interface you can possibly look at providing also is to let clients send name/value pairs as criteria (e.g. typical HTML form input) and use QueryTemplateManager along with XSL files in Solr server to map the input parameters into executable XML.  This keeps the client interface freer of Lucene internals e.g. filters vs queries etc and the Solr administrator able to maintain and tweak the appropriate query templates.\n\nQueryTemplateManager is described in contrib unit tests and also written up in my LIA2 contribution (I posted this to Mike McCandless)\n\nCheers\nMark "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12645757",
            "date": "2008-11-07T13:30:18+0000",
            "content": "Thanks Mark.  I've now read your LIA2 contribution and will implement the optional XSL'ing and caching as you suggest.  Good stuff. "
        },
        {
            "author": "Karl Wettin",
            "id": "comment-12668728",
            "date": "2009-01-30T03:29:56+0000",
            "content": "The patch does not parse UTF8. Not sure if it is supposed to do that by default? Below is my version of the class. It needs to pick up the contentEncoding from the properties, but I'm not sure where and how.\n\n\nimport org.apache.solr.common.params.SolrParams;\nimport org.apache.solr.common.util.NamedList;\nimport org.apache.solr.request.SolrQueryRequest;\nimport org.apache.solr.search.QParserPlugin;\nimport org.apache.solr.search.QParser;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.queryParser.ParseException;\nimport org.apache.lucene.xmlparser.CorePlusExtensionsParser;\nimport org.apache.lucene.xmlparser.ParserException;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.UnsupportedEncodingException;\n\npublic class XmlQParserPlugin extends QParserPlugin {\n\n  private String contentEncoding = \"UTF8\";\n\n  public void init(NamedList args) {\n  }\n\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    return new XmlQParser(qstr, localParams, params, req);\n  }\n\n\n  class XmlQParser extends QParser {\n    public XmlQParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n      super(qstr, localParams, params, req);\n    }\n\n    public Query parse() throws ParseException {\n      CorePlusExtensionsParser parser = new CorePlusExtensionsParser(getReq().getSchema().getQueryAnalyzer(), getReq().getSchema().getSolrQueryParser(null));\n      try {\n        return parser.parse(new ByteArrayInputStream(getString().getBytes(contentEncoding)));\n      } catch (UnsupportedEncodingException e) {\n        throw new ParseException(e.getMessage());\n      } catch (ParserException e) {\n        throw new ParseException(e.getMessage());\n      }\n    }\n  }\n\n}\n\n "
        },
        {
            "author": "Karl Wettin",
            "id": "comment-12668745",
            "date": "2009-01-30T04:36:01+0000",
            "content": "There seems to be a bug here somewhere. As the xml query hit 6-7 kb data or 60-70 clauses i start getting connection resets. If I switch to BoostingTermQuery then it seems to indicate it has to do with the amount of xml data and not to do with number of clauses. I get nothing in my Solr log about this failing request. \n\n\n    SolrQuery solrQuery = new SolrQuery();\n    solrQuery.add(\"fl\", \"score\");\n    solrQuery.add(\"defType\", \"xml\");\n\n    StringBuilder xml = new StringBuilder(10000);\n    xml.append(\"<BooleanQuery fieldName=\\\"\").append(FieldNames.shingles).append(\"\\\">\");\n\n    for (int i = 0; i < 10000; i++) {\n      xml.append(\"<Clause occurs=\\\"should\\\">\");\n      xml.append(\"<TermQuery boost=\\\"1.0\\\">\");\n      xml.append(\"foo\");\n      xml.append(\"</TermQuery>\");\n      xml.append(\"</Clause>\");\n\n      solrQuery.setQuery(xml.toString() + \"</BooleanQuery>\");\n\n      System.out.println(i + \"\\t\" + solrQuery.getQuery().length());\n      \n      try {\n        SearchService.getInstance().getSolr().query(solrQuery);\n      } catch (SolrServerException e) {\n        if (e.getCause() != null && e.getCause().getCause() != null && e.getCause().getCause() instanceof java.net.SocketException) {\n          throw e;\n        }\n      }\n    }\n\n\n\n\n\n0\t121\n1\t192\n2\t263\n3\t334\n4\t405\n5\t476\n6\t547\n7\t618\n8\t689\n9\t760\n10\t831\n11\t902\n12\t973\n13\t1044\n14\t1115\n15\t1186\n16\t1257\n17\t1328\n18\t1399\n19\t1470\n20\t1541\n21\t1612\n22\t1683\n23\t1754\n24\t1825\n25\t1896\n26\t1967\n27\t2038\n28\t2109\n29\t2180\n30\t2251\n31\t2322\n32\t2393\n33\t2464\n34\t2535\n35\t2606\n36\t2677\n37\t2748\n38\t2819\n39\t2890\n40\t2961\n41\t3032\n42\t3103\n43\t3174\n44\t3245\n45\t3316\n46\t3387\n47\t3458\n48\t3529\n49\t3600\n50\t3671\n51\t3742\n52\t3813\n53\t3884\n54\t3955\n55\t4026\n56\t4097\n57\t4168\n58\t4239\n59\t4310\n60\t4381\n61\t4452\n62\t4523\n63\t4594\n64\t4665\n65\t4736\n66\t4807\n67\t4878\n68\t4949\n69\t5020\n70\t5091\n71\t5162\n72\t5233\n73\t5304\n74\t5375\n75\t5446\n76\t5517\n2097 [main] INFO  org.apache.commons.httpclient.HttpMethodDirector  - I/O exception (org.apache.commons.httpclient.NoHttpResponseException) caught when processing request: The server localhost failed to respond\n2098 [main] INFO  org.apache.commons.httpclient.HttpMethodDirector  - Retrying request\n2100 [main] INFO  org.apache.commons.httpclient.HttpMethodDirector  - I/O exception (org.apache.commons.httpclient.NoHttpResponseException) caught when processing request: The server localhost failed to respond\n2100 [main] INFO  org.apache.commons.httpclient.HttpMethodDirector  - Retrying request\n2102 [main] INFO  org.apache.commons.httpclient.HttpMethodDirector  - I/O exception (org.apache.commons.httpclient.NoHttpResponseException) caught when processing request: The server localhost failed to respond\n2102 [main] INFO  org.apache.commons.httpclient.HttpMethodDirector  - Retrying request\n77\t5588\n2108 [main] INFO  org.apache.commons.httpclient.HttpMethodDirector  - I/O exception (org.apache.commons.httpclient.NoHttpResponseException) caught when processing request: The server localhost failed to respond\n2109 [main] INFO  org.apache.commons.httpclient.HttpMethodDirector  - Retrying request\n\norg.apache.solr.client.solrj.SolrServerException: Error executing query\n\tat org.apache.solr.client.solrj.request.QueryRequest.process(QueryRequest.java:96)\n\tat org.apache.solr.client.solrj.SolrServer.query(SolrServer.java:109)\n\tat se.hundraartonetthundra.TestSearch.test(TestSearch.java:68)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:81)\n\tat com.intellij.rt.junit4.Junit4ClassSuite.run(Junit4ClassSuite.java:99)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:40)\nCaused by: org.apache.solr.client.solrj.SolrServerException: java.net.SocketException: Connection reset\n\tat org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.request(CommonsHttpSolrServer.java:391)\n\tat org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.request(CommonsHttpSolrServer.java:183)\n\tat org.apache.solr.client.solrj.request.QueryRequest.process(QueryRequest.java:90)\n\t... 22 more\nCaused by: java.net.SocketException: Connection reset\n\tat java.net.SocketInputStream.read(SocketInputStream.java:168)\n\tat java.io.BufferedInputStream.fill(BufferedInputStream.java:218)\n\tat java.io.BufferedInputStream.read(BufferedInputStream.java:237)\n\tat org.apache.commons.httpclient.HttpParser.readRawLine(HttpParser.java:78)\n\tat org.apache.commons.httpclient.HttpParser.readLine(HttpParser.java:106)\n\tat org.apache.commons.httpclient.HttpConnection.readLine(HttpConnection.java:1116)\n\tat org.apache.commons.httpclient.MultiThreadedHttpConnectionManager$HttpConnectionAdapter.readLine(MultiThreadedHttpConnectionManager.java:1413)\n\tat org.apache.commons.httpclient.HttpMethodBase.readStatusLine(HttpMethodBase.java:1973)\n\tat org.apache.commons.httpclient.HttpMethodBase.readResponse(HttpMethodBase.java:1735)\n\tat org.apache.commons.httpclient.HttpMethodBase.execute(HttpMethodBase.java:1098)\n\tat org.apache.commons.httpclient.HttpMethodDirector.executeWithRetry(HttpMethodDirector.java:398)\n\tat org.apache.commons.httpclient.HttpMethodDirector.executeMethod(HttpMethodDirector.java:171)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:397)\n\tat org.apache.commons.httpclient.HttpClient.executeMethod(HttpClient.java:323)\n\tat org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.request(CommonsHttpSolrServer.java:335)\n\t... 24 more\n\n\n\n "
        },
        {
            "author": "Karl Wettin",
            "id": "comment-12668904",
            "date": "2009-01-30T15:42:08+0000",
            "content": "No, that was not a bug, it was that I don't know Solr that well. Sorry. I suppose I hit the upper limit of HTTP get request length.\n\n\n.query(solrQuery, SolrRequest.METHOD.POST);\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12683136",
            "date": "2009-03-18T19:17:51+0000",
            "content": "Erik/Karl, are you still interested in this issue? or should we defer it to 1.5? "
        },
        {
            "author": "Karl Wettin",
            "id": "comment-12683141",
            "date": "2009-03-18T19:39:40+0000",
            "content": "Erik/Karl, are you still interested in this issue? or should we defer it to 1.5?\n\nI use this in a live environment and would very much like to see it committed. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12683768",
            "date": "2009-03-20T06:46:50+0000",
            "content": "I use this in a live environment and would very much like to see it committed.\n\nOk sure, let's keep this for 1.4. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12705431",
            "date": "2009-05-03T17:58:11+0000",
            "content": "It's a shame that the String needs to be re-encoded in UTF8 just for the XML parser to make Strings again... but that's just implementation and can always be sped up in the future.\n\nInstead of using getSchema().getSolrQueryParser(null), we should construct a SolrQueryParser with the current XML QParser. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12738741",
            "date": "2009-08-04T01:30:19+0000",
            "content": "Any progress on this or should we mark for 1.5? "
        },
        {
            "author": "Karl Wettin",
            "id": "comment-12738761",
            "date": "2009-08-04T02:04:39+0000",
            "content": "Any progress on this or should we mark for 1.5?\n\nYonik had a comment there about the UTF8, is this what you are refeering to? Perhaps Solr isn't always using UTF8 as encoding for the XML? Let me know where I can pick up the prefered content encoding and I'll fix a new patch. Except for that I don't know what else might be required. I'd be happy to see this as a part of Solr as I'm using it in production, so let me know what I can do to help out. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12738940",
            "date": "2009-08-04T12:17:59+0000",
            "content": "As Yonik mentioned, we should use a SolrQueryParser with the XML QParser. Currently, queries on numeric fields (both legacy and trie) and date fields do not work. The current patch just enables one to use the Lucene XML QParser with Solr. It is not integrated with Solr as well as other qparsers are. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12738941",
            "date": "2009-08-04T12:24:29+0000",
            "content": "Marking for 1.5 and unassigning.  I'll come back to this eventually, and integrate it fully.  Or someone else can take the lead. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872610",
            "date": "2010-05-27T22:09:09+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043800",
            "date": "2011-06-03T16:47:08+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106476",
            "date": "2011-09-16T14:51:15+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13537626",
            "date": "2012-12-21T02:22:42+0000",
            "content": "I'll aim this for 5.0, and once it's done will consider backporting to 4.x.  Might not be for 4.1, but will aim that way at least.  Sorry for letting this one collect dust for so long. "
        },
        {
            "author": "Daniel Collins",
            "id": "comment-13537767",
            "date": "2012-12-21T09:18:38+0000",
            "content": "We have a version of this we have built with Solr 4.0, it is still WIP, but this is what we have.\n\n\nimport org.apache.solr.common.params.CommonParams;\nimport org.apache.solr.common.params.SolrParams;\nimport org.apache.solr.common.util.NamedList;\nimport org.apache.solr.request.SolrQueryRequest;\nimport org.apache.solr.search.*;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.queryparser.classic.ParseException;\nimport org.apache.lucene.queryparser.xml.*;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.UnsupportedEncodingException;\n\npublic class XmlQParserPlugin extends QParserPlugin {\n\n    private String contentEncoding = \"UTF8\";\n\n    public void init(NamedList args) {\n    }\n\n    public QParser createParser(String qstr, SolrParams localParams,\n            SolrParams params, SolrQueryRequest req) {\n        return new XmlQParser(qstr, localParams, params, req);\n    }\n\n    class XmlQParser extends QParser {\n        public XmlQParser(String qstr, SolrParams localParams,\n                SolrParams params, SolrQueryRequest req) {\n            super(qstr, localParams, params, req);\n        }\n\n        public Query parse() throws ParseException {\n            SolrQueryParser lparser;\n\n            String qstr = getString();\n            if (qstr == null || qstr.length() == 0)\n                return null;\n\n            String defaultField = getParam(CommonParams.DF);\n            if (defaultField == null) {\n                defaultField = getReq().getSchema().getDefaultSearchFieldName();\n            }\n            lparser = new SolrQueryParser(this, defaultField);\n\n            lparser.setDefaultOperator(QueryParsing\n                    .getQueryParserDefaultOperator(getReq().getSchema(),\n                            getParam(QueryParsing.OP)));\n\n            CoreParser parser = new CoreParser(getReq().getSchema().getQueryAnalyzer(), lparser);\n            // CorePlusExtensions parser requires lucene sandbox, which isn't bundled with Solr (yet).\n//            CorePlusExtensionsParser parser = new CorePlusExtensionsParser(\n//                    getReq().getSchema().getQueryAnalyzer(), lparser);\n            try {\n                return parser.parse(new ByteArrayInputStream(getString()\n                        .getBytes(contentEncoding)));\n            } catch (UnsupportedEncodingException e) {\n                throw new ParseException(e.getMessage());\n            } catch (ParserException e) {\n                throw new ParseException(e.getMessage());\n            }\n        }\n    }\n}\n\n\n\nAs the comment mentions, we can't use the CorePlusExtensionsParser as it requires the lucene-sandbox.jar which isn't currently bundled with Solr 4.0? "
        },
        {
            "author": "Daniel Collins",
            "id": "comment-13537769",
            "date": "2012-12-21T09:21:35+0000",
            "content": "Other issues we are considering: should things like BoostingQuery really be in the extensions, why are they not part of core?\n\nAdditionally, we've noticed that CoreParser is missing some queries:\n\n1) PhraseQuery\n2) PayloadTermQuery (it has it under the \"old\" name of BoostingTermQuery, should there be an alias?)\n3) FunctionQuery (not sure if this is even possible, presumably would require a lot of configuration about the function to call)\n\nMight look at some of those if I get bored of relatives over Xmas  "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13585887",
            "date": "2013-02-25T14:37:22+0000",
            "content": "This patch depends on the \"object parsing\" approach in SOLR-4351.  \n\nThis is a different approach from using Lucene's XML Query Parser.  The XMLQueryParser is neat and all, but the builders aren't going to work well with Solr's schema.\n\nI tinkered with a SolrQueryBuilder, and that mostly works, but nested XML queries weren't working, so I revamped using the object parser. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13585897",
            "date": "2013-02-25T14:51:55+0000",
            "content": "With the latest patch, these queries work (borrowed from SOLR-4351's tests):\n\n\n  <term f=\"id\">11</term>\n\n  <field f=\"text\">Now Cow</field>\n\n  <prefix f=\"text\">brow</prefix>\n\n  <frange l=\"20\" u=\"24\">mul(foo_i,2)</frange>\n\n  <join from=\"qqq_s\" to=\"www_s\">id:10</join>\n\n  <join from=\"qqq_s\" to=\"www_s\"><term f=\"id\">10</term></join>\n\n  <lucene>text:Cow -id:1</lucene>\n\n\n\nThe \"object parser\" path worked easily, but it's not as powerful as it needs to be.  There needs to be a way to make BooleanQuery's (without having to use the lucene query parser) and then, like the XMLQueryParser, do stuff with span queries and so on.\n\nMaybe it's not worthwhile to have both JSON and XML query parsing as they both should probably use the same infrastructure.  But I would hate to see a JSON form of XSLT used here.  Ideally, the query \"tree\" would be defined server-side and lean/clean parameters would be passed in to fill in the blanks, but also possibly having some logic based on the values of the parameters (&in_stock=true, would if specified add a filter for inStock:true, for example)\n\nThe XMLQParser in the last patch has xsl capability as well, so that you could define id.xsl to be:\n\n\n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">\n  <xsl:template match=\"/Document\">\n    <term f=\"id\"><xsl:value-of select=\"id\"/></term>\n  </xsl:template>\n</xsl:stylesheet>\n\n\n\nThen using &defType=xml&xsl=id&id=SOLR1000 a term query will be generated.  (this is too simple of an example, as there would be other leaner/cleaner ways to do this exact one) "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13944989",
            "date": "2014-03-24T13:07:34+0000",
            "content": "Any plans on continuing on this or should effort go into the JSON parser in SOLR-4351 instead? "
        },
        {
            "author": "Karl Wettin",
            "id": "comment-13945003",
            "date": "2014-03-24T13:24:01+0000",
            "content": "Personally I didn't use this in anything new since my 2009 patch and comments . Actually I didn't use Solr at all since then. \nIf my vote counts for anything then it would be for the JSON parser. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-13945590",
            "date": "2014-03-24T19:34:23+0000",
            "content": "We have improved on this since and added support for Solr schema and analysis chain, as well as a few new builder classes. Ideally we would like to move to the object parser as well, but this was an interim solution. We just haven't got it in a shape to be contributed as yet, but can do soon.. "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15071130",
            "date": "2015-12-24T17:00:32+0000",
            "content": "Attached SOLR-839.patch against latest trunk, building on previous patches and code blocks on this ticket. Patch summary:\n\n\txml query parser support itself:\n\t\n\t\ta new SolrCoreParser class which for now merely extends Lucene's CoreParser class but in future could be adding extra query builders\n\t\ta TestXmlQParser class (should this actually be called TestSolrCoreParser instead?) which extends Lucene's TestCoreParser class and in future would have extra tests added e.g. corresponding to any extra query builders in Solr's SolrCoreParser class\n\t\n\t\n\txml query parser support as a (standard) plugin:\n\t\n\t\ta new XmlQParserPlugin class for the (private) XmlQParser class\n\t\tin QParserPlugin.java added the XmlQParserPlugin as a standard plugin\n\t\ta simple testMatchAllDocsQueryXmlParser test in QueryEqualityTest.java\n\t\n\t\n\tbuild files:\n\t\n\t\tsmall solr/common-build.xml and solr/core/build.xml changes to allow Solr's test to inherit from Lucene's test\n\t\n\t\n\trelated prior refactoring tickets:\n\t\n\t\tLUCENE-6893 factor out CorePlusQueriesParser from CorePlusExtensionsParser\n\t\tLUCENE-6907 make TestParser extendable\n\t\tLUCENE-6945 factor out TestCorePlus(Queries|Extensions)Parser from TestParser, rename TestParser to TestCoreParser\n\t\n\t\n\n "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15083664",
            "date": "2016-01-05T19:53:16+0000",
            "content": "Erik Hatcher - if you have no objections then I will re-assign this ticket to myself with a view towards committing it later this month, to trunk and branch_5x.\n\nEveryone - the latest patch builds on previous patches and code blocks in this ticket (patch summary above), reviews, comments, suggestions etc. welcome. Thank you. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15085850",
            "date": "2016-01-06T17:13:13+0000",
            "content": "Thanks Christine Poerschke for taking this on!   I've long felt this (a DOM-based) query parser was the way to go. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15094376",
            "date": "2016-01-12T17:49:30+0000",
            "content": "Commit 1724293 from Christine Poerschke in branch 'dev/trunk'\n[ https://svn.apache.org/r1724293 ]\n\nSOLR-839: XML QueryParser support (deftype=xmlparser) "
        },
        {
            "author": "Ahmet Arslan",
            "id": "comment-15094613",
            "date": "2016-01-12T19:37:20+0000",
            "content": "This patch replaces utf8 constant string with StandardCharsets.UTF_8 as suggested by LUCENE-5560 "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15094644",
            "date": "2016-01-12T19:51:47+0000",
            "content": "Thanks Ahmet! I'll complete the branch_5x merge and then apply your patch to use StandardCharsets.UTF_8 instead of the UTF8 constant. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15094658",
            "date": "2016-01-12T19:59:14+0000",
            "content": "Commit 1724306 from Christine Poerschke in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1724306 ]\n\nSOLR-839: XML QueryParser support (deftype=xmlparser) (merge in revision 1724293 from trunk) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15094904",
            "date": "2016-01-12T20:44:54+0000",
            "content": "Commit 1724318 from Christine Poerschke in branch 'dev/trunk'\n[ https://svn.apache.org/r1724318 ]\n\nSOLR-839: in XmlQParserPlugin replace \"UTF8\" with StandardCharsets.UTF_8 as suggested by LUCENE-5560. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15094939",
            "date": "2016-01-12T21:03:26+0000",
            "content": "Commit 1724321 from Christine Poerschke in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1724321 ]\n\nSOLR-839: in XmlQParserPlugin replace \"UTF8\" with StandardCharsets.UTF_8 as suggested by LUCENE-5560. (merge in revision 1724318 from trunk) "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15098119",
            "date": "2016-01-14T13:56:01+0000",
            "content": "Christine Poerschke - thank you for pushing this one through!   I think this one is a bigger deal than most will initially think.  Great stuff. "
        },
        {
            "author": "Daniel Collins",
            "id": "comment-15106641",
            "date": "2016-01-19T12:08:55+0000",
            "content": "I think this broke the Maven build option within Solr, due to a new dependency. The XML Parser test code is now dependent on Lucene test code, which the maven pom.xml files don't allow for.\n\nWill create a new JIRA and issue a patch to fix that. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15110086",
            "date": "2016-01-21T05:33:56+0000",
            "content": "Commit 1725866 from Steve Rowe in branch 'dev/trunk'\n[ https://svn.apache.org/r1725866 ]\n\nSOLR-8567: Maven build: Add solr-core test dependency on the lucene queryparser test-jar, required for SOLR-839 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15110101",
            "date": "2016-01-21T05:42:47+0000",
            "content": "Commit 1725868 from Steve Rowe in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1725868 ]\n\nSOLR-8567: Maven build: Add solr-core test dependency on the lucene queryparser test-jar, required for SOLR-839 (merged trunk r1725866) "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15119258",
            "date": "2016-01-27T13:57:27+0000",
            "content": "Christine Poerschke - can param substitution be used with the xmlparser?   Could, for example, a couple of arbitrary query parameters (say \"&author=smith&title=searching\") be slotted into a pre-defined tree query expression? "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15119272",
            "date": "2016-01-27T14:10:37+0000",
            "content": "Do you mean something like this?\n\n&garment=coat&material=wool&q=\n<BooleanQuery fieldName=\"description\">\n  <Clause occurs=\"must\"> <TermQuery>${garment}</TermQuery> </Clause>\n  <Clause occurs=\"mustnot\"> <TermQuery>plain</TermQuery> </Clause>\n  <Clause occurs=\"should\"> <TermQuery>${material}</TermQuery> </Clause>\n  <Clause occurs=\"must\">\n    <BooleanQuery fieldName=\"size\">\n      <Clause occurs=\"should\"> <TermsQuery>S M L</TermsQuery> </Clause>\n    </BooleanQuery>\n  </Clause>\n</BooleanQuery>\n\n\nNo, I don't think that's supported but it is an interesting possibility. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-15119395",
            "date": "2016-01-27T15:05:18+0000",
            "content": "Christine Poerschke - yeah, like that!   I'll have to experiment and see about enhancing it to allow param substitution.\n\nBut regarding that example - why does fieldName appear on BooleanQuery?   Can one specify the fieldName on <TermQuery> instead (or in addition to)?   And could that fieldName itself be dynamically specified too? "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15119732",
            "date": "2016-01-27T16:38:51+0000",
            "content": "why does fieldName appear on BooleanQuery? Can one specify the fieldName on <TermQuery> instead (or in addition to)?\n\nAs i understand it the fieldname on the BooleanQuery will only get used if the Term(s)Query does not specify its own fieldName. TermQuery certainly can specify its own fieldname, we usually use TermQuery like that.\n\nlucene/queryparser/src/test/org/apache/lucene/queryparser/xml has various test *.xml files, not sure if/where there's more formal documentation re: the various queries that are supported and what their xml elements and attributes are. "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15119741",
            "date": "2016-01-27T16:43:14+0000",
            "content": "And could that fieldName itself be dynamically specified too?\n\nSo basically something like descriptionFieldName=productSummary&q=<BooleanQuery fieldName=\"${descriptionFieldName}\">...</BooleanQuery> - not supported as-is but if substitution is supported for elements themselves (garment and material in the example above) then it would be logical/nice to also support substitution for attributes. "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15122248",
            "date": "2016-01-28T20:11:24+0000",
            "content": "Erik Hatcher - I revise my response here to \"don't know\". Until just now I was unaware of SOLR-7212 which might well mean that parameter substitution is already supported with the xmlparser. SOLR-8620 created for finding out whether or not is is supported. "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15150658",
            "date": "2016-02-17T15:44:56+0000",
            "content": "Created LUCENE-7034 wishing for org.apache.lucene.queryparser.xml javadocs/examples - noticed when drafting the Solr Reference Guide's XML Query Parser sub-section. "
        }
    ]
}