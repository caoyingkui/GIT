{
    "id": "LUCENE-3281",
    "title": "OpenBitSet should report the configured capacity/size",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/other"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.0,                                            3.0.1,                                            3.0.2,                                            3.0.3,                                            3.1,                                            3.2",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "OpenBitSet rounds up the capacity() to the next multiple of 64 from what was specified. However, this is particularly damaging with the new asserts, which trigger when anything above the specified capacity is used as an index. The simple fix is to return numBits for capacity().",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-07-06T17:32:28+0000",
            "content": "See LUCENE-3280, it looks like Lucene will be switching to FastBitSet for most things?\nOpenBitSet is meant to be expert level and not impose any additional overhead (like keeping track of the largest bit that has been set).\nBut yeah, the new asserts do make things a little odd w.r.t. capacity()... how about the following:\n\n   /** Returns the current capacity in bits (1 greater than the index of the last bit) */\n-  public long capacity() { return bits.length << 6; }\n+  public long capacity() {\n+    long cap = bits.length << 6;\n+    assert( (cap = numBits) >= 0);\n+    return cap;\n+  }\n\n\n ",
            "author": "Yonik Seeley",
            "id": "comment-13060711"
        },
        {
            "date": "2011-07-06T17:34:44+0000",
            "content": "Also to return this number, size() is the right method (at least in trunk). ",
            "author": "Uwe Schindler",
            "id": "comment-13060714"
        },
        {
            "date": "2011-07-06T17:53:49+0000",
            "content": "Well, size() and capacity() are currently the same. But all that is needed is actually:\n\n/** Returns the current capacity in bits (1 greater than the index of the last bit) */\n\n\tpublic long capacity() \n{ return bits.length << 6; }\n+  public long capacity() \n{ return numBits; }\n\n\n\nThat will have the same effect. You throw away the first value for cap in the above, after all. Checking for numButs to be non-negative should be done in the constructor, if added, and maybe with a documented exception instead of an assert. ",
            "author": "Robert Ragno",
            "id": "comment-13060722"
        },
        {
            "date": "2011-07-06T18:46:50+0000",
            "content": "I think the challenge here is numBits is currently not maintained unless assertions are enabled (eg, see expandingWordNum), so we can't just always return numBits from capacity()...\n\nMaybe we should just always maintain numBits (ie, even when asserts are off)?  Then capacity() could return numBits. ",
            "author": "Michael McCandless",
            "id": "comment-13060757"
        },
        {
            "date": "2011-07-06T19:39:04+0000",
            "content": "Ah, good point. It seems cleaner to maintain it (which is straightforward). The other sensible alternative would be to make the asserts all refer to the up-rounded capacity. However, it seems reasonable and consistent to have an OBS present the capacity it was constructed with.\n\nI suppose there is room to split capacity() and size(), but that might confuse existing uses.\n\nIncidentally, if it were open to behavioral changes... I would find it more convenient if the asserts were replaced with assuming that the vector was infinite, filled with zeros. This seems more consistent with the set operations, anyway. And the union operation, and so on. (And it is not as if anyone can properly be relying on the current asserts to control flow.) ",
            "author": "Robert Ragno",
            "id": "comment-13060786"
        }
    ]
}