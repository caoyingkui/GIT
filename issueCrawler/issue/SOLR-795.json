{
    "id": "SOLR-795",
    "title": "spellcheck: buildOnOptimize",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "spellchecker"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I see that there's an option to automatically rebuild the spelling index on a commit.  That's a nice feature that we'll consider using, but we run commits every few thousand document updates, which would yield ~100 spelling index rebuilds a day.  OTOH, we run an optimize about once/day which seems like a more appropriate schedule for rebuilding the spelling index.\n\nIs there or could there be an option to rebuild the spelling index on optimize?\n\nGrant:\nSeems reasonable, could almost do it via the postOptimize call back already in the config, except the SpellCheckComponent's EvenListener is private static and has an empty postCommit implementation (which is what is called after optimization, since it is just like a commit in many ways)\n\nThus, a patch would be needed.\n\nShalin:\npostCommit/postOptimize callbacks happen after commit/optimize but before a\nnew searcher is opened. Therefore, it is not possible to re-build spellcheck\nindex on those events without opening a IndexReader directly on the solr\nindex. That is why the event listener in SpellCheckComponent uses the\nnewSearcher listener to build on commits.\n\nI don't think there is anything in the API currently to do what Jason wants.\n\nHoss:\nFWIW: I believe it has to work that way because postCommit events might\nmodify the index. (but i'm just guessing)\n\ncouldn't the Listener's newSearcher() method just do something like\nthis...\n\nif (rebuildOnlyAfterOptimize &&\n   ! (newSearcher.getReader().isOptimized() &&\n      ! oldSearcher.getReader().isOptimized()) {\n return;\n} else {\n // current impl\n}\n\n...assuming a new \"rebuildOnlyAfterOptimize\" option was added?\n\nGrant:\nThat seems reasonable.\n\nAnother thing to think about, is maybe it is useful to provide some event metadata to the events that contain information about what triggered them.  Something like a SolrEvent class such that postCommit looks like\npostCommit(SolrEvent evt)\n\nand\npublic void newSearcher(SolrEvent evt, SolrIndexSearcher newSearcher, SolrIndexSearcher currentSearcher);\n\nOf course, since SolrEventListener is an interface...\n\nShalin:\nYup, that will work.",
    "attachments": {
        "SOLR-795.patch": "https://issues.apache.org/jira/secure/attachment/12392855/SOLR-795.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12641364",
            "date": "2008-10-21T12:01:55+0000",
            "content": "Marking for 1.4 "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12642870",
            "date": "2008-10-27T07:53:45+0000",
            "content": "Attached patch to add this feature.\n\nChanges\n\n\t\"buildOnOptimize\" is added as a configuration\n\tSpellCheckerListener uses the values of buildOnCommit and buildOnOptimize to decide when to build the index\n\tTo build index only on optimize, specify buildOnOptimize as true. No need to specify buildOnCommit.\n\n\n\nI'll commit this in a day or two. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12643323",
            "date": "2008-10-28T20:00:05+0000",
            "content": "Committed revision 708653.\n\nThanks Jason! "
        }
    ]
}