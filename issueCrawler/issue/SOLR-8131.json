{
    "id": "SOLR-8131",
    "title": "Make ManagedIndexSchemaFactory as the default in Solr",
    "details": {
        "components": [
            "Data-driven Schema",
            "Schema and Analysis"
        ],
        "type": "Wish",
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The techproducts and other examples shipped with Solr all use the ClassicIndexSchemaFactory which disables all Schema APIs which need to modify schema. It'd be nice to be able to support both read/write schema APIs without needing to enable data-driven or schema-less mode.\n\nI propose to change all 5.x examples to explicitly use ManagedIndexSchemaFactory and to enable ManagedIndexSchemaFactory by default in trunk (6.x).",
    "attachments": {
        "create-core.png": "https://issues.apache.org/jira/secure/attachment/12782526/create-core.png",
        "SOLR-8131_5x.patch": "https://issues.apache.org/jira/secure/attachment/12776051/SOLR-8131_5x.patch",
        "SOLR-8131.patch": "https://issues.apache.org/jira/secure/attachment/12773649/SOLR-8131.patch",
        "SOLR-8131-schemaless-fix.patch": "https://issues.apache.org/jira/secure/attachment/12777308/SOLR-8131-schemaless-fix.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-06T13:13:38+0000",
            "author": "Noble Paul",
            "content": "\ud83d\udc4d ",
            "id": "comment-14945005"
        },
        {
            "date": "2015-10-06T13:18:58+0000",
            "author": "Varun Thacker",
            "content": "+1 \n\nJust to clarify what we'll have is a `managed-schema` file and no `schema.xml` file in the default configs right? ",
            "id": "comment-14945010"
        },
        {
            "date": "2015-10-06T13:22:08+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Just to clarify what we'll have is a `managed-schema` file and no `schema.xml` file in the default configs right?\n\nYeah, I think the default is to rename any existing schema.xml file to schema.xml.bak and afterwards use 'managed-schema' as the generated schema file name. ",
            "id": "comment-14945013"
        },
        {
            "date": "2015-10-06T13:27:57+0000",
            "author": "Varun Thacker",
            "content": "Yeah, I think the default is to rename any existing schema.xml file to schema.xml.bak and afterwards use 'managed-schema' as the generated schema file name.\n\nThe current data_driven config doesn't have a schema.bak file . \n\nAlso if we enable it by default in 6.0 is the \"mutable\" flag useful then? ",
            "id": "comment-14945019"
        },
        {
            "date": "2015-10-06T13:39:22+0000",
            "author": "Alexandre Rafalovitch",
            "content": "What about all the embedded documentation in the examples that disappears on the first run with managed schema? Including all the commented-out sections and \"this is default\" sections. ",
            "id": "comment-14945039"
        },
        {
            "date": "2015-10-06T13:53:32+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "The current data_driven config doesn't have a schema.bak file\n\nThat's because the data driven config does not have a schema.xml and starts off directly with a managed-schema file. The techproducts and basic configs example do have a schema.xml (which I wasn't planning on removing) which will be renamed to schema.xml.bak\n\nWhat about all the embedded documentation in the examples that disappears on the first run with managed schema? Including all the commented-out sections and \"this is default\" sections.\n\nGood point, Alexandre. What do you think we should do? Maybe we can create a page in the ref guide which has all that information instead? Another option (don't know how feasible it'd be) is to have a describe mode in the /schema API which prints helpful documentation about every enabled option/plugin in the schema? ",
            "id": "comment-14945050"
        },
        {
            "date": "2015-10-06T14:04:59+0000",
            "author": "Alexandre Rafalovitch",
            "content": "I would be all over anything that's self-documenting. API endpoints, analyzers, etc. For API, something like http://swagger.io/ could help. That would enable other newbie-oriented use cases too. E.g. auto-generated UI for https://www.getpostman.com/ .\n\nThis deserves its own discussion, really.\n\nA page in ref-guide could be a - simpler - option too, especially if the comments are hyperlinked into the specific guide sections. That would give people jump off points from the context of the config file into more detailed descriptions. ",
            "id": "comment-14945064"
        },
        {
            "date": "2015-10-07T17:15:59+0000",
            "author": "Erick Erickson",
            "content": "Apologies in advance if I'm missing something here and don't get me wrong, I love where this could go; \"use solr/bin to set up your test cluster then go to the admin UI to modify your configs\" would simplify greatly the new user experience. \n\nThe current \"use zkcli to update your config set after you make changes\" is really clumsy and I've seen countless users confused by this, especially misunderstanding of the bootstrapping options. Not to mention all the confusion when a manual edit introduces a syntax error and we get \"help me, all of the sudden Solr doesn't start\"....\n\nHowever (you knew this was coming):\nIf this is the default, then the only way to modify the schema will be with the Schema API, right? So rather than allow someone to get into the schema file and do a bunch of manual edits we'll force them to issue some long command like below. I'm NOT knocking it as an API call, it's a perfectly fine API, but I'm sure not going to be happy typing it out 100 times for adding 100 fields to my schema. Or writing a script.....\n\ncurl -X POST -H 'Content-type:application/json' --data-binary '{\n  \"add-field\":\n{\n     \"name\":\"sell-by\",\n     \"type\":\"tdate\",\n     \"stored\":true }\n}' http://localhost:8983/solr/gettingstarted/schema\n\nSure, I can do all the mods to schema.xml first then switch to managed, but that's obscure and certainly not something that someone would even think about when just starting out. Or we can tell a novice to ignore the message about \"generated by... do not modify\".\n\nSo my proposal would be do one of two things:\n1> provide a \"schema builder\" as part of the new Angular Admin. Wouldn't have to be anything all that complex to start and could grow over time. I can imagine several approaches that would be more or less work, discuss this in any tickets that come up I suppose.\nor\n2> enhance the bin/solr script to add/delete/replace schema elements. I'd really like this option to allow changing one and only one parameter as an option (syntax TBD) to make it simple to, say, just change stored from \"true\" to \"false\" for some field/fieldType.\n3> ???\n\nI prefer <1> by far, but \"progress not perfection\" is the goal here. And this could be quite a simple UI, we'd of course have to be careful that it didn't upload arbitrary XML, but that should be relatively simple.\n\nI'd go so far as advocate that whatever we decide about <1> or <2> be put in a JIRA that blocks this one. I can be talked out of that, especially if making a UI that used the managed schema stuff under the covers would take a long time. ",
            "id": "comment-14947230"
        },
        {
            "date": "2015-10-07T17:51:24+0000",
            "author": "Upayavira",
            "content": "What I'd like to see is the techproducts sample stay the same (it has always been a static schema, let it stay that way), but update the bin/solr script (or such) to upload a standard managed schema config on first start up - or allow it via an argument:\n\nbin/solr -conf managed start\n\nThat way, once the server is started, everything needed can be done via the UI.\n\nI'd love to see this soon, as I want to use it in my talk at LuceneRevolution next week!! I'll also add basic \"add field\", \"add dynamic field\" and \"copy field\" support to the schema browser in time for that talk also \n\nWhat I'm saying is - there's no such thing as default configset anymore. What I'd suggest is that Solr starts with a single configset uploaded, which is in managed schema mode, or there is a very easy way to do it, on startup. ",
            "id": "comment-14947263"
        },
        {
            "date": "2015-10-07T18:56:10+0000",
            "author": "Erick Erickson",
            "content": "Guess this kind of makes the discussion about whether  8139 should block this irrelevant doesn't it \n\nI'm sure 8139 will drive people toward the new admin UI as well... ",
            "id": "comment-14947366"
        },
        {
            "date": "2015-10-07T20:14:51+0000",
            "author": "Alexandre Rafalovitch",
            "content": "You mean \"bin/solr create_core -d\", right? As a standard configset! Stored in the same place as the others, etc. Just checking? Otherwise, yet another way to create the collection would cause confusion. ",
            "id": "comment-14947500"
        },
        {
            "date": "2015-10-07T20:25:29+0000",
            "author": "Upayavira",
            "content": "No, I don't want to create a collection. I want an empty managed-schema config set to be uploaded to a SolrCloud setup, either by default, or with a single switch on the bin/solr start command.\n\nOr... an extension to the configset API that says \"load one of these standard configsets from disk\", e.g:\n\n/admin/configs?action=LOAD&set=managed_schema\n\nThere's no real security risks here, as the files are coming off disk. It allows the UI to pull in one of a set of sample configsets from the server/solr/configsets directory. ",
            "id": "comment-14947514"
        },
        {
            "date": "2015-10-07T20:33:38+0000",
            "author": "Upayavira",
            "content": "I'm sure 8139 will drive people toward the new admin UI as well...\n\nThat's my idea. Make the new UI visible via the \"new UI\" link, then start jamming it so full of new features that people will demand that it be made the default! ",
            "id": "comment-14947525"
        },
        {
            "date": "2015-10-08T09:29:20+0000",
            "author": "Noble Paul",
            "content": "Upayavira why do you think the people will resist moving to the new admin UI. I don't remember seeing any discussion where people are opposed to it.\n\nI'm NOT knocking it as an API call, it's a perfectly fine API, but I'm sure not going to be happy typing it out 100 times for adding 100 fields to my schema. Or writing a script.....\n\nI see the pain Erick Erickson .\n\nApart from what is proposed in SOLR-8139 , we should add a modify-field command where you can just update one value of the field\ne.g\n\ncurl -X POST -H 'Content-type:application/json' --data-binary '{\n\"modify-field\":\n{ \"name\":\"sell-by\", \"stored\":true }\n}' http://localhost:8983/solr/gettingstarted/schema\n\n\n\nWe should provide a simple admin page where I can type arbitrary commands to an endpoint . So all I need to do is type\n\n{\n\"modify-field\":\n{ \"name\":\"sell-by\", \"stored\":true }\n}\n\n\n\nWe plan to support hocon as well. so all you need to type would be\n\nmodify-field {name:sell-by, stored:true}\n\n ",
            "id": "comment-14948364"
        },
        {
            "date": "2015-10-08T09:34:31+0000",
            "author": "Varun Thacker",
            "content": "What I'd like to see is the techproducts sample stay the same (it has always been a static schema, let it stay that way), but update the bin/solr script (or such) to upload a standard managed schema config on first start up\n\nI don't think thats a good idea. We might end up having the same issue we had with collection1 .\n\nIf ManagedIndexSchemaFactory is by default  we can have the schema editor thats in your plan without any problems? ",
            "id": "comment-14948377"
        },
        {
            "date": "2015-10-08T09:59:23+0000",
            "author": "Upayavira",
            "content": "What I want is a way to say \"when you start, start with some configs\". Equally there can be a \"start without configs\" option. Or, an API that says \"load a sample config set from disk (i.e from server/solr/configsets) so the user can bootstrap via the UI from one of the known provided configsets.\n\nIs the intention that a non-managed schema be deprecated? If not, I'd like there to be an example that works that way, and techproducts seems like a reasonable candidate. ",
            "id": "comment-14948410"
        },
        {
            "date": "2015-10-08T10:01:43+0000",
            "author": "Upayavira",
            "content": "bq: Upayavira why do you think the people will resist moving to the new admin UI. I don't remember seeing any discussion where people are opposed to it.\n\nBecause people don't like change. Because once people start using the new UI, I put money on the fact that they will start finding all sorts of details that I haven't considered. Giving some new features at least counterbalances that risk somewhat. ",
            "id": "comment-14948414"
        },
        {
            "date": "2015-11-21T10:17:11+0000",
            "author": "Varun Thacker",
            "content": "Patch which changes all example schema files to explicitly use ManagedIndexSchemaFactory. If a schema factory is not specified starting from 6.0 Solr will use ManagedIndexSchemaFactory by default.\n\n\nI have no idea how to make the tests pass with this change. We rewrite all the schema files to managed-schema . Firstly we need to give the tests write permissions to managed-schema ( solr-tests.policy ) . More importantly tests which don't run in their own VM will overwrite the files under test-files/solr/collection1/solr ? ",
            "id": "comment-15020376"
        },
        {
            "date": "2015-11-21T11:02:47+0000",
            "author": "Uwe Schindler",
            "content": "I have no idea how to make the tests pass with this change. We rewrite all the schema files to managed-schema . Firstly we need to give the tests write permissions to managed-schema ( solr-tests.policy ) . More importantly tests which don't run in their own VM will overwrite the files under test-files/solr/collection1/solr ?\n\nPlease don't do this permanently! Maybe only rewrite the old schemas once (automatically), disabling the security manager (e.g. run tests with -Dtests.useSecurityManager=false). After that all schemas should be converted. Then just cleanup the directory and remove the old files and commit the changes.  After that nothing should change the schemas anymore?\n\nThe general rule is to make a clone of the core directory for tests that actually modify the core directory, e.g. update the schema. Most tests already do this. ",
            "id": "comment-15020393"
        },
        {
            "date": "2015-11-22T04:49:51+0000",
            "author": "Varun Thacker",
            "content": "The way ManagedSchemaFactory initializes itself is that it looks for the default schema file ( \"managed-schema\" ) .\nIf it's not present then it takes the specified schema-name.xml ( default is schema.xml  ) and renames it to a file called managed-schema or to a name explicitly mentioned.\n\nWe have lots of solrconfigs and schema files in a common directory and each test can use any combination of that. Since we need to specify the new managed-schema file name in the solrconfig file and that a test can use any combination we can't manually change anything either. \n\nI don't see a way where we can have multiple schema/solrconfig files in the same directory and support any renaming logic from ManagedSchemaFactory ",
            "id": "comment-15020835"
        },
        {
            "date": "2015-11-22T09:43:47+0000",
            "author": "Uwe Schindler",
            "content": "renames it to a file called managed-schema or to a name explicitly mentioned.\n\nWhy not specify \"schema.xml\" as the specified schema name? I have no idea why we need a different name here? In any case, we cannot allow write access to src/test-files! So 2 possibilities:\n\n\tFix all schema/configs throughout solr\n\ttests that directly access the test-files folder have to copy to a temporary dir (like most tests already do). There is some utility method in SolrTestcaseJ4 / TestHarness to do this (I think).\n\n ",
            "id": "comment-15020911"
        },
        {
            "date": "2015-11-22T09:47:53+0000",
            "author": "Uwe Schindler",
            "content": "I still don't understand why you cannot use the follwoing approach as described before! Run all tests one time with -Dtests.useSecurityManager=false. After this test run, all schema files should be renamed accordingly. All later runs then would not need write access anymore, so security manager can be enabled again. To persist the modified/renamed schemas just commit the changes after the run without security manager. ",
            "id": "comment-15020913"
        },
        {
            "date": "2015-11-22T09:58:09+0000",
            "author": "Varun Thacker",
            "content": "Hi Uwe,\n\nThe problem is , we have lots of schema-.xml / solrconfig-.xmlfiles under test-files/solr/collection1/conf . ManagedSchemaIndexFactory will rename a schema file to \"managed-schema\" . So the test runs will overwrite the same file when run without the security manager.\n\nWe cannot even specify a specific  name instead of \"managed-schema\" in the solrconfig.xml files since a test can use any combination of solrconfig/schema files..\n ",
            "id": "comment-15020915"
        },
        {
            "date": "2015-11-22T10:18:38+0000",
            "author": "Uwe Schindler",
            "content": "OK. So why do you want to change those configs to use managed schema at all? Those are static test only schema, never changed. The classic schema factory is not deprecated and should never be. So why not leave the \"test schemas\" as they are.\n\nI just want to say: These are different issues: Making the new schema the default for new Solr installations and fixing test schemas.\n\nSo just change the defaults in this issue and then open new issues to change tests one by one to use managed schema (although I am against this, because we should also test the classic schema factory). All tests that use the manages schema factory have to be rewritten to use SolrTestcaseJ4's copy functionality to create a writeable clone. This also makes the tests behave correct, because all would get a clean setup, not overwriting files already there. ",
            "id": "comment-15020927"
        },
        {
            "date": "2015-11-22T11:14:45+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "All tests that use the manages schema factory have to be rewritten to use SolrTestcaseJ4's copy functionality to create a writeable clone.\nNot sure if this helps here, but I once wrote a test based on managed schema, SpatialRPTFieldTypeTest (extends AbstractBadConfigTestBase, which extends SolrTestcaseJ4). \n\nAFAICT, that test copied all configs and schemas specified into temp directory. Then, it tried to find \"managed-schema\", couldn't find it and loaded schema-minimal.xml after copying it over to \"managed-schema\".\n\no.a.s.s.ManagedIndexSchemaFactory The schema is configured as managed, but managed schema resource managed-schema not found - loading non-managed schema schema-minimal.xml instead\n\n\n\nDo you think the needed schema file for each test can be copied over to the temp directory as \"schema-minimal.xml\", from where it gets loaded up as \"managed-schema\"? I'm assuming that all tests would have a different temp directory, so there won't be a conflict there. ",
            "id": "comment-15020943"
        },
        {
            "date": "2015-11-22T11:21:16+0000",
            "author": "Uwe Schindler",
            "content": "I'm assuming that all tests would have a different temp directory, so there won't be a conflict there.\n\nExactly. This is why I said, that all tests that actually modify the schmea, have to be copied over. Those with static schemas never changed should (In my opinion) still use the classic schema factory. ",
            "id": "comment-15020946"
        },
        {
            "date": "2015-11-23T06:57:03+0000",
            "author": "Varun Thacker",
            "content": "Those with static schemas never changed should (In my opinion) still use the classic schema factory.\n\nMakes sense. I'll work on a new patch where these static schemas use the classic schema factory. ",
            "id": "comment-15021617"
        },
        {
            "date": "2015-11-24T07:41:48+0000",
            "author": "Varun Thacker",
            "content": "New patch.\n\n\n\tAll example solrconfigs explicitly use ManagedIndexSchemaFactory by default\n\tAll tests solrconfigs explicitly use ClassicIndexSchemaFactory unless they were using ManagedIndexSchemaFactory / testing managed schema\n\tIf a solrconfig doesn't mention a schemaFactory then ManagedIndexSchemaFactory will be used from 6.0\n\n\n\nWe will keep the current behaviour in 5.x i.e If a solrconfig doesn't mention a schemaFactory then ClassicIndexSchemaFactory is used.\n\nAlthough the patch has become quite big it should't take long to review. ",
            "id": "comment-15023920"
        },
        {
            "date": "2015-12-02T13:52:00+0000",
            "author": "Erik Hatcher",
            "content": "Varun Thacker - here's some feedback on that patch:\n\n\n\tShowFileRequestHandlerTest.java: maybe use the DEFAULT_MANAGED_SCHEMA_RESOURCE_NAME constant instead on \"QueryRequest request = new QueryRequest(params(\"file\",\"managed-schema\"));\"\n\n\n\n\n\tIn the spirit of less (explicit) config, we could maybe get away from specifying this incantation\n\n+  <schemaFactory class=\"ManagedIndexSchemaFactory\">\n+    <bool name=\"mutable\">true</bool>\n+    <str name=\"managedSchemaResourceName\">managed-schema</str>\n+  </schemaFactory>\n\n\nexplicitly in all the shipped configs and just leave it out entirely.  (for one, no one really needs to change the resource name)\n\n\n\n\n\tI like the test of managed schema being set in the shipped configs!\n\n ",
            "id": "comment-15035820"
        },
        {
            "date": "2015-12-03T06:43:55+0000",
            "author": "Varun Thacker",
            "content": "Updated patch which trunk which takes Erik's feedback into account. \n\nWith the current patch this will be the change in behaviour on trunk.\n\n\n\tIf no schema factory is mentioned in the solrconfig.xml file then ManagedSchemaFactory will be used by default if Lucene_Version > 6.0 else ClassicSchemaFactory will be used.\n\tAll shipped configs don't explicitly mention a schema factory. Hence it will default to ManagedSchemaFactory automatically in trunk.\n\n ",
            "id": "comment-15037370"
        },
        {
            "date": "2015-12-03T06:46:18+0000",
            "author": "Varun Thacker",
            "content": "Hi Erik,\n\nShowFileRequestHandlerTest.java: maybe use the DEFAULT_MANAGED_SCHEMA_RESOURCE_NAME constant instead on \"QueryRequest request = new QueryRequest(params(\"file\",\"managed-schema\"));\"\n\nI didn't make this change. The argument being we should leave hardcoded constants in our tests. That way is someone in the future accidentally changed DEFAULT_MANAGED_SCHEMA_RESOURCE_NAME the tests would atleast catch it as a break.\n\nexplicitly in all the shipped configs and just leave it out entirely. (for one, no one really needs to change the resource name)\n\nIncorporated in the patch ",
            "id": "comment-15037376"
        },
        {
            "date": "2015-12-03T08:39:26+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Varun, there's one reproducible test failure with your patch applied:\n\n\n  [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSolrCLIRunExample -Dtests.method=testInteractiveSolrCloudExample -Dtests.seed=B06DF3AE906F4D27 -Dtests.slow=true -Dtests.locale=es_PY -Dtests.timezone=Pacific/Easter -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   5.32s J1 | TestSolrCLIRunExample.testInteractiveSolrCloudExample <<<\n   [junit4]    > Throwable #1: org.apache.solr.client.solrj.impl.CloudSolrClient$RouteException: Error from server at http://localhost:54786/solr/testCloudExamplePrompt_shard1_replica2: This IndexSchema is not mutable.\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([B06DF3AE906F4D27:6B1C1364A71A8841]:0)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.CloudSolrClient.directUpdate(CloudSolrClient.java:633)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.CloudSolrClient.sendRequest(CloudSolrClient.java:982)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.CloudSolrClient.requestWithRetryOnStaleState(CloudSolrClient.java:871)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.CloudSolrClient.request(CloudSolrClient.java:807)\n   [junit4]    > \tat org.apache.solr.client.solrj.SolrRequest.process(SolrRequest.java:150)\n   [junit4]    > \tat org.apache.solr.client.solrj.SolrClient.add(SolrClient.java:174)\n   [junit4]    > \tat org.apache.solr.client.solrj.SolrClient.add(SolrClient.java:139)\n   [junit4]    > \tat org.apache.solr.client.solrj.SolrClient.add(SolrClient.java:153)\n   [junit4]    > \tat org.apache.solr.util.TestSolrCLIRunExample.testInteractiveSolrCloudExample(TestSolrCLIRunExample.java:445)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]    > Caused by: org.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException: Error from server at http://localhost:54786/solr/testCloudExamplePrompt_shard1_replica2: This IndexSchema is not mutable.\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.HttpSolrClient.executeMethod(HttpSolrClient.java:575)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:241)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:230)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.LBHttpSolrClient.doRequest(LBHttpSolrClient.java:372)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.LBHttpSolrClient.request(LBHttpSolrClient.java:325)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.CloudSolrClient$2.call(CloudSolrClient.java:608)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.CloudSolrClient$2.call(CloudSolrClient.java:605)\n   [junit4]    > \tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n   [junit4]    > \tat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor$1.run(ExecutorUtil.java:232)\n   [junit4]    > \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n   [junit4]    > \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n   [junit4]    > \t... 1 more\n\n\n ",
            "id": "comment-15037493"
        },
        {
            "date": "2015-12-03T09:11:56+0000",
            "author": "Varun Thacker",
            "content": "Updated patch. The one additional change in behaviour with this patch is that mutable=true for ManagedSchema by default. This was there in my first patch but slipped out in the subsequent ones.\n\nThis also fixes the test failure which Shalin pointed out. Additionally there were some SolrJ tests failing because I had missed out some solrconfig files to add the schema factory to. Those have been fixed as well.\n\nIf everything is looking fine then I'll run the tests one final time with nightly tests to make sure everything is okay and then commit it tomorrow ( Friday ) ",
            "id": "comment-15037545"
        },
        {
            "date": "2015-12-03T13:48:24+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "There are still some test failures, Varun\n\n\n   [junit4] Tests with failures [seed: EF2ABB6034EFC3BC]:\n   [junit4]   - org.apache.solr.analytics.facet.FieldFacetTest (suite)\n   [junit4]   - org.apache.solr.analytics.expression.ExpressionTest (suite)\n   [junit4]   - org.apache.solr.analytics.NoFacetTest (suite)\n   [junit4]   - org.apache.solr.analytics.util.valuesource.FunctionTest (suite)\n   [junit4]   - org.apache.solr.analytics.facet.RangeFacetTest (suite)\n   [junit4]   - org.apache.solr.analytics.facet.FieldFacetExtrasTest (suite)\n   [junit4]   - org.apache.solr.analytics.facet.QueryFacetTest (suite)\n\n\n\nMost are of the form:\n\n   [junit4] ERROR   0.00s J1 | QueryFacetTest (suite) <<<\n   [junit4]    > Throwable #1: java.security.AccessControlException: access denied (\"java.io.FilePermission\" \"/home/shalin/work/oss/trunk/solr/contrib/analytics/src/test-files/solr/collection1/conf/managed-schema\" \"write\")\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([EF2ABB6034EFC3BC]:0)\n   [junit4]    > \tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)\n   [junit4]    > \tat java.security.AccessController.checkPermission(AccessController.java:884)\n   [junit4]    > \tat java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\n   [junit4]    > \tat java.lang.SecurityManager.checkWrite(SecurityManager.java:979)\n   [junit4]    > \tat java.io.FileOutputStream.<init>(FileOutputStream.java:200)\n   [junit4]    > \tat java.io.FileOutputStream.<init>(FileOutputStream.java:162)\n   [junit4]    > \tat org.apache.solr.schema.ManagedIndexSchema.persistManagedSchema(ManagedIndexSchema.java:130)\n   [junit4]    > \tat org.apache.solr.schema.ManagedIndexSchemaFactory.upgradeToManagedSchema(ManagedIndexSchemaFactory.java:271)\n   [junit4]    > \tat org.apache.solr.schema.ManagedIndexSchemaFactory.create(ManagedIndexSchemaFactory.java:186)\n   [junit4]    > \tat org.apache.solr.schema.ManagedIndexSchemaFactory.create(ManagedIndexSchemaFactory.java:46)\n   [junit4]    > \tat org.apache.solr.schema.IndexSchemaFactory.buildIndexSchema(IndexSchemaFactory.java:75)\n   [junit4]    > \tat org.apache.solr.util.TestHarness.<init>(TestHarness.java:97)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.createCore(SolrTestCaseJ4.java:572)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.initCore(SolrTestCaseJ4.java:562)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.initCore(SolrTestCaseJ4.java:404)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.initCore(SolrTestCaseJ4.java:393)\n   [junit4]    > \tat org.apache.solr.analytics.facet.QueryFacetTest.beforeClass(QueryFacetTest.java:39)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n ",
            "id": "comment-15037788"
        },
        {
            "date": "2015-12-07T07:23:47+0000",
            "author": "Varun Thacker",
            "content": "Updated patch which fixes the failing tests Shalin pointed out. All tests and precommit passes with this patch. I'll commit this soon. ",
            "id": "comment-15044494"
        },
        {
            "date": "2015-12-07T07:32:45+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1718258 from Varun Thacker in branch 'dev/trunk'\n[ https://svn.apache.org/r1718258 ]\n\nSOLR-8131: Make ManagedIndexSchemaFactory the default schemaFactory when luceneMatchVersion >= 6 ",
            "id": "comment-15044507"
        },
        {
            "date": "2015-12-07T08:27:43+0000",
            "author": "Varun Thacker",
            "content": "Patch against the 5x branch. It changes no default behaviour and only modifies the example config files to use ManagedSchema  ",
            "id": "comment-15044557"
        },
        {
            "date": "2015-12-07T08:52:19+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1718264 from Varun Thacker in branch 'dev/trunk'\n[ https://svn.apache.org/r1718264 ]\n\nSOLR-8131: Add CHANGES entry under solr 5.4 as well mentioning change to ManagedIndexSchemaFactory in all example config files ",
            "id": "comment-15044580"
        },
        {
            "date": "2015-12-07T09:09:42+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1718265 from Varun Thacker in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1718265 ]\n\nSOLR-8131: Make ManagedIndexSchemaFactory the default schemaFactory in all example config files ",
            "id": "comment-15044612"
        },
        {
            "date": "2015-12-07T09:35:43+0000",
            "author": "Varun Thacker",
            "content": "Marking this Jira as Resolved. Thanks everyone! ",
            "id": "comment-15044648"
        },
        {
            "date": "2015-12-07T11:18:33+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1718307 from Varun Thacker in branch 'dev/trunk'\n[ https://svn.apache.org/r1718307 ]\n\nSOLR-8131: fix test solrconfig.xml files for the contrib modules ",
            "id": "comment-15044780"
        },
        {
            "date": "2015-12-09T06:48:26+0000",
            "author": "Varun Thacker",
            "content": "The example/files/solrconfig.xml in trunk still explicitly mentions the schemaFactory. Reopening this to remove it from trunk. ",
            "id": "comment-15048163"
        },
        {
            "date": "2015-12-09T07:21:11+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1718768 from Varun Thacker in branch 'dev/trunk'\n[ https://svn.apache.org/r1718768 ]\n\nSOLR-8131: example/files config doesn't explicitly mention a schema factory + imporove upgrading instructions ",
            "id": "comment-15048196"
        },
        {
            "date": "2015-12-12T21:30:25+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "This has broken the schemaless feature in trunk. An easy way to reproduce is to create at least 2 shards and index some arbitrary json. The following errors repeat ad nauseam:\n\nERROR - 2015-12-12 14:53:45.526; [c:gettingstarted s:shard1 r:core_node1 x:gettingstarted_shard1_replica1] org.apache.solr.schema.ManagedIndexSchema; Bad version when trying to persist schema using 0 due to: org.apache.zookeeper.KeeperException$BadVersionException: KeeperErrorCode = BadVersion for /configs/gettingstarted/managed-schema\nINFO  - 2015-12-12 14:53:45.526; [c:gettingstarted s:shard1 r:core_node1 x:gettingstarted_shard1_replica1] org.apache.solr.schema.ManagedIndexSchema; Failed to persist managed schema at /configs/gettingstarted/managed-schema - version mismatch\n\n\n\nThis indicated that the schema version is not being updated from ZooKeeper. I found that the watch was not being set because the ManagedSchemaIndexFactory.inform() was never called. This was because in case there is no schema factory set in the solrconfig.xml, the IndexSchemaFactory.buildIndexSchema() created a ManagedIndexSchemaFactory object directly. This is a SolrCoreAware class and it must be created using the resource loader so that the inform method can be called automatically. ",
            "id": "comment-15054641"
        },
        {
            "date": "2015-12-12T21:41:47+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Trivial fix.\n\nBut we need to add an integration test which can catch such problems. ",
            "id": "comment-15054646"
        },
        {
            "date": "2015-12-15T07:07:54+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "The same fix but I removed the explicit mention of the IndexSchemaFactory from solrconfig-schemaless.xml which makes TestCloudSchemaless fail without this fix. ",
            "id": "comment-15057474"
        },
        {
            "date": "2015-12-15T07:32:34+0000",
            "author": "Varun Thacker",
            "content": "Hi Shalin,\n\nDoes it make sent to have TestCloudSchemaless randomize between two solrconfig.xml's instead? One which explicitly specifies managed-schema and one which doesn't?  ",
            "id": "comment-15057498"
        },
        {
            "date": "2015-12-15T07:47:47+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I was assuming that we have a test which will fail if no index schema factory definition defaults to ClassicIndexSchemaFactory accidentally? ",
            "id": "comment-15057514"
        },
        {
            "date": "2015-12-15T07:56:05+0000",
            "author": "Varun Thacker",
            "content": "Yes we have a test for that - TestManagedSchema#testDefaultSchemaFactory  . Okay so then we don't need to randomize here..  ",
            "id": "comment-15057530"
        },
        {
            "date": "2015-12-15T07:58:35+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Cool, I'll commit this then. All tests pass. ",
            "id": "comment-15057539"
        },
        {
            "date": "2015-12-15T08:00:57+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1720083 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1720083 ]\n\nSOLR-8131: Use SolrResourceLoader to instantiate ManagedIndexSchemaFactory when no schema factory is specified in solrconfig.xml ",
            "id": "comment-15057547"
        },
        {
            "date": "2016-01-15T01:45:55+0000",
            "author": "Mark Miller",
            "content": "I think this made it so that you cannot use the Admin UI to add a SolrCore out of the box? I think that's a tough user experience. ",
            "id": "comment-15101033"
        },
        {
            "date": "2016-01-15T07:43:28+0000",
            "author": "Varun Thacker",
            "content": "Hi Mark,\n\nSorry I didn't quite follow your comment.\n\nAre you saying that the Admin UI to add a core is broken? I think that didn't work out of the box in earlier versions as well. ",
            "id": "comment-15101380"
        },
        {
            "date": "2016-01-15T13:00:00+0000",
            "author": "Mark Miller",
            "content": "What part was broken?\n\nNow you can't create a core because it makes you specify a schema.xml, which will fail. ",
            "id": "comment-15101733"
        },
        {
            "date": "2016-01-15T13:31:11+0000",
            "author": "Varun Thacker",
            "content": "Hi Mark,\n\nI just tried this out on trunk\n1. Start solr using ./bin/solr start -e techproducts\n2. cp -r techproducts test; rm -r test/data/ test/core.properties -  from the example/techproducts/solr folder to create an instance dir and have a conf/ directory\n3. Ran the core admin create command from the UI and it created the core successfully for me. Attaching a screenshot of what I put in. \n\nCould you please tell me how you tried it out. I'll file a bug and fix whatever is broken ",
            "id": "comment-15101763"
        }
    ]
}