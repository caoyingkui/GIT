{
    "id": "SOLR-11488",
    "title": "Do not allow collections and aliases to have the same name",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently you can define an alias with the same name as a collection and (perhaps) vice-versa. The more I think about this the worse idea it seems. See the discussion at the linked JIRAs.\n\nProposal: We should fail to create a collection if an alias already exists with the same name and vice-versa.\n\nThis should depend on SOLR-11444 and supersede SOLR-11218, this JIRA will include tests that define the intended behavior making SOLR-11218 obsolete. We'll close SOLR-11218 as \"contained by\" this JIRA.\n\nThis will take away the ability to\n1> create a collection, call it \"old\" and index to it.\n2> decide you want to change the schema\n3> create a collection call it \"new\" and index to it.\n4> create an alias old->new THIS WILL FAIL.\n5> delete the \"old\" collection\n\nPeople will have to create an alias pointing to \"old\" and change their clients to use it, then they can do step 4 above....\n\nThis is kind of a pain, but much better than following an alias and deleting \"new\". I'd also argue that it's a maintenance problem to have collections and aliases with the same name.\n\nWhat do people think? I'll try to work up a preliminary patch. If we do this, we should probably coordinate committing this and SOLR-11444 and I'll also change the docs to reflect this and upgrade notes.",
    "attachments": {
        "SOLR-11488.patch": "https://issues.apache.org/jira/secure/attachment/12892194/SOLR-11488.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-14T04:12:40+0000",
            "content": "Preliminary patch. The actual code changes are pretty minimal. I did add a method to Aliases.java, not sure I like the name or if it's in the right place, but it's late Friday.\n\nI have not run precommit or all tests on this yet, and the patch doesn't contain documentation fixes, I'll do these later if we move forward with this..\n\nLet me know what people think, particularly David Smiley. ",
            "author": "Erick Erickson",
            "id": "comment-16204471"
        },
        {
            "date": "2017-10-14T04:25:44+0000",
            "content": "+1 very nice Erick. ",
            "author": "David Smiley",
            "id": "comment-16204474"
        },
        {
            "date": "2017-10-14T05:27:30+0000",
            "content": "I'd hate to tell users that the alias re-index strategy will no longer work.\n\nThis is kind of a pain, but much better than following an alias and deleting \"new\"\n\nDo you mean someone wants to delete data or add data and it ends up in the wrong collection?\n\n\nHere's an idea Shalin and I had long back discussed :\n\nWhenever someone creates a collection foo Solr should do two things under the hood\n\n\tInternally store the collection as _foo\n\tCreate an alias \"foo\"\n\n\n\nNever allow users to create aliases with an underscore prefix\n\nAll routing logic in Solr ( CloudSolrClient / HttpSolrCall ) only check if the foo alias exists and then fetches the underlying collection details and processes the request.\n\nToday the routing logic first checks if an alias exists . If it doesn't it checks if an actual collection with the name exists. I believe we are trying to solve this ambiguity problem for more consistent routing logic and the approach mentioned probably addresses the concerns? ",
            "author": "Varun Thacker",
            "id": "comment-16204491"
        },
        {
            "date": "2017-10-14T16:54:34+0000",
            "content": "bq: Do you mean someone wants to delete data or add data and it ends up in the wrong collection?\n\nWell, that's possible too, it's not the case I was worrying about though. I mean if the code changes such that the delete collection logic follows the alias the new collection would get deleted.\n\nAt this point, having an alias that's the same name as a collection only does the right thing on delete by chance and there are no safeguards in the test suite insuring that behavior. Some innocent change could very easily delete the wrong collection!\n\nInteresting idea (the underscore bit). Off the top of my head, it would solve the ambiguity problem. Under the covers, it has similar way of eliminating problems: there would never be a collection and an alias with the same name.\n\nI guess there'd be some heartburn because the state.json file would have the underscore, but we've already changed the shard naming convention and as long as the users didn't notice (since they could use \"foo\") that would be an implementation detail. \n\nThere's a little additional  level of indirection, we have clients with 1000's of collections. Does that matter enough to worry about? I suppose if someone really wanted to not use the aliases, they could reference the collection name with the underscore, and then if they told us \"we can't use aliases for reindexing because all our applications use _foo\" I wouldn't be too sympathetic.\n\nI think it boils down to whether we're willing to tell people \"in order to re-index, you have to create an alias to your old collection first and have your client use that\". I'm waffling frankly. I just know that there'll be some clients who'll reply \"we can't change the client\". This can still be worked around, but would take more effort, to whit:\n> create your new collection and index\n> plan a service interruption\n> delete the old collection (backup first!)\n> create an alias with the old collection name pointing to the new collection.\n\nI don't particularly like this as it takes away the fallback of going back to the old collection.  It'd work though.\n\nI suppose the alternative is to leave things as they are and create a boatload of tests that insure that aliases take precedence over names everywhere, everywhen. Updates, deletes, collection admin operations, queries, basically anywhere we operate on a collection by name. I'd much rather have a systemic fix, either this JIRA or your idea (or some other for that matter).\n\nI'm going to create a new JIRA for the underscore idea and link it here so we can track them separately. ",
            "author": "Erick Erickson",
            "id": "comment-16204733"
        },
        {
            "date": "2017-10-15T13:07:16+0000",
            "content": "I suppose the alternative is to leave things as they are and create a boatload of tests that insure that aliases take precedence over names everywhere, everywhen.\n\nI think that's pretty reasonable.  Maybe I too quickly plus-one'ed the patch; I was mostly looking at the actual patch rather than the big picture of what seems to be supported now that we'd take away here.  I don't think the alias->collection resolve should happen for any admin operations (e.g. delete collection); it should only be fore add's and select.  Why should an admin operation resolve an alias? ",
            "author": "David Smiley",
            "id": "comment-16205105"
        },
        {
            "date": "2017-10-15T16:40:26+0000",
            "content": "Yeah, I looked after typing that and realized that \"aliases take precedence\" would do exactly what I don't want in the reindex case.\n\nOK, the more this sloshes around in my brain the more I think we need to get the code right and add tests to insure the right thing get's done. We can defer the entire question is SOLR-11489 for later, it'll take some consensus building.\n\nHow about these for rules:\n\n1> all admin operations operate on collections, NOT aliases\n2> aliases take precedence over collections for collection-level operations (i.e. add/delete/update etc).\n\nHow well covered is <1> in the tests already? I don't see many tests other than in AliasIntegrationTest.\n\nI guess that still leaves open the question of an alias pointing to an alias but that's a separate issue.\n\nSo I'll change 11218 to reflect just that we need to beef up alias tests in general and particularly for admin operations and we'll go from there? ",
            "author": "Erick Erickson",
            "id": "comment-16205188"
        },
        {
            "date": "2017-10-15T17:02:47+0000",
            "content": "1> all admin operations operate on collections, NOT aliases\n\nCan you give an example of an admin call where today it could go wrong? \n\n\nWe can defer the entire question is SOLR-11489 for later\nyeah that's a much longer task so I'm +1 for not committing this but ensuring we document the behaviour that we want and back it up with tests.  ",
            "author": "Varun Thacker",
            "id": "comment-16205206"
        },
        {
            "date": "2017-10-15T17:10:21+0000",
            "content": "\"aliases take precedence\" would do exactly what I don't want in the reindex case.\nFor the reindex case: If aliases aren't allowed to recursively resolve (aliases pointing to aliases) \u2013 and I don't like it FWIW, then you could still usefully have aliases with the same name as a collection for the re-index case.  Here, you would use another alias for the re-index that refers to the underlying collection to get a full import of new data.  In this scenario, you might migrate from an initially alias-less setup (initially not knowing if you needed them), to eventually having an 'A' and 'B' collection, probably eventually deleting the original collection to avoid confusion with the alias, although it wouldn't be necessary to do that.  All through this, searching clients needn't change.  Ad-hoc updates probably needn't change either.  The re-index client process would need to be aware of this scheme though, which is fair enough as it's likely the one orchestrating this shell game.\n\nSo I'll change 11218 to reflect just that we need to beef up alias tests in general and particularly for admin operations and we'll go from there?\n\n+1 ",
            "author": "David Smiley",
            "id": "comment-16205212"
        },
        {
            "date": "2017-10-23T04:03:59+0000",
            "content": "Side comment regarding aliases pointing at aliases:  I think that we should support that \u2013 but only a limited number of levels of indirection, two or three.  Not in this issue \u2013 if you guys think it's worth doing, it would need its own issue.\n\nThe most basic example I can think of where that feature would be useful is one where there's an \"everything\" alias that points at multiple aliases, and each of THOSE aliases are set up such that the underlying index can be completely rebuilt without taking the current index offline.\n\nIf recursive aliases do get implemented, it probably should not be possible to index on a recursive alias.  I don't know what happens if an indexing request is sent to an alias that points at multiple collections, but I would hope that such a request would also fail. ",
            "author": "Shawn Heisey",
            "id": "comment-16214608"
        },
        {
            "date": "2017-10-24T14:00:09+0000",
            "content": "If recursive aliases do get implemented, it probably should not be possible to index on a recursive alias. I don't know what happens if an indexing request is sent to an alias that points at multiple collections, but I would hope that such a request would also fail.\n\nIndexing to a list of collections (wether that list came from an alias, or alias to alias, or if the client provided comma delimited list) will go to the first collection.  This was true and still is true. ",
            "author": "David Smiley",
            "id": "comment-16216952"
        }
    ]
}