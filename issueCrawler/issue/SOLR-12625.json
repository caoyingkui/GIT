{
    "id": "SOLR-12625",
    "title": "Combine SolrDocumentFetcher and RetrieveFieldsOptimizer",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.5",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We have SolrDocumentFetcher and RetrieveFieldsOptimizer. The\nrelationship between the two is unclear at first glance. Using\nSolrDocumentFetcher by itself is (or can be) inefficient.\n\nWDYT about combining the two? Is there a good reason you would want to\nuse SolrDocumentFetcher instead of RetrieveFieldsOptimizer?\n\nIdeally I'd want to be able to write code like:\n\nsolrDocumentFetcher.fillDocValuesMostEfficiently\n\nThat created an optimizer and \"did the right thing\".\n\nAssigning to myself to keep track, but if anyone feels motivated feel free to take it over.",
    "attachments": {
        "SOLR-12625.patch": "https://issues.apache.org/jira/secure/attachment/12934688/SOLR-12625.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-07T18:38:34+0000",
            "content": "Here's a PoC, it has nocommits etc. David Smiley and Cao Manh Dat I'm particularly interested in whether you think it is a good approach.\n\nReally I hacked together something quickly to see if it makes architectural sense. In this version, the pattern to use this is:\n\nObject fetchOptimizer = docFetcher.optimizeForFetchingTheseFields(srf);\nwhile (more docs) {\n        List<String> vals = docFetcher.getValsAsStrings(docFetcher.docOptimizedFetch(docId, fetchOptimizer), uniqFieldName);\n\n     // do whatever you want with the returned values. Single-valued fields will return a 1-element list.\n}\n\n\nNotes:\n\nSince SolrDocumentFetcher is reused I elected to require that the callers get back an object (intended to be opaque) that's currently a RetrieveFieldsOptimizer that then needs to be passed in to fetch the actual document. It's a little clumsy, but...\n\nThe names I've given the new methods are clumsy, suggestions welcome. I do want something to indicate that we want to get things in an optimized fashion to draw attention to it though.\n\nFinally, I find the necessity of having calling code try to resolve objects error-prone and unnecessarily complex when you just want a value, man. So I added\n\npublic List<String> getValsAsStrings(SolrDocument sdoc, String field) {\n\n\nto SolrDocumentFetcher. It does leave it up to the caller to make the distinction between single-valued and multi-valued fields when it's important though.\n\nI'll look this all over several more times before it's ready to commit of course, but this is the first thing that I tried that seems to work. All tests pass (but I haven't run precommit yet).\n\nSpeaking of tests, I've commented everything in\u00a0 TestRetrieveFieldsOptimizer since this is a PoC, if I go forward with this I'll have to figure out how to test this. I'm not quite sure how to determine that we really do only get values from DV fields or only stored fields or a combination as appropriate. We can, of course, figure out that we get the results back in the docs, but that doesn't tell us where we get them from, stored or DV. ",
            "author": "Erick Erickson",
            "id": "comment-16572134"
        },
        {
            "date": "2018-08-08T21:10:56+0000",
            "content": "Thanks for filing this Erick.  I like some of what you did but I think we can do better.  The method docFetcher.optimizeForFetchingTheseFields that is declared to return Object just feels clumsy to me.  What if instead we use ReturnFields (== SolrReturnFields) to hold this metadata on how some fields should be returned?  In this scheme, the caller would quite simply call docFetcher.solrDoc(returnFields).  The call to solrDoc would inspect the SolrReturnFields to see if it has the computed information that is today present on RetrieveFieldsOptimizer, and if not then compute that.  Subsequent calls will find it and it won't need to be re-computed.\n\nRE getValsAsString: I hear ya; it's too complex.  Again; thanks for filing this issue \u2013 I love cleanups. Perhaps we could add a boolean to the proposed solrDoc(...) method to declare if the values should be resolved using their field types to appropriate objects (be it String or Number subclass or Date, etc.).  WDYT?\n\nYour change to SolrDocument appears purely code formatting; true? ",
            "author": "David Smiley",
            "id": "comment-16573893"
        },
        {
            "date": "2018-08-08T22:25:57+0000",
            "content": "Thanks for looking at this!\nI think we can do better\nI sure hope so\n\u00a0\n ...Object just feels clumsy to me... The call to\u00a0solrDoc\u00a0would inspect the SolrReturnFields to see if it has the computed information that is today present on RetrieveFieldsOptimizer, and if not then compute that...The call to\u00a0solrDoc\u00a0would inspect the SolrReturnFields to see if it has the computed information that is today present on RetrieveFieldsOptimizer...\nMe too. Which is one reason I posted it as a PoC so you could generate better ideas .\n\ndocFetcher is in the SolrIndexSearcher and can interleave docs, fetching different fields. This came to light because one of the tests fetches children (IIRC) which means there's a different set of fields to be retrieved on subsequent calls. One of the things I also want to do is write a test that has multiple threads querying for different field lists to stress this kind of thing.\n\nAre you thinking of putting the RetrieveFieldsOptimizer in SolrReturnFields and Moving the\u00a0class over there?\n\n\u00a0\n\n\u00a0\nPerhaps we could add a boolean to the proposed solrDoc....\nHow about just put the method over in SolrDocument like\n\nString[] getValuesAsStrings(fieldName)? Seems cleaner.\n\n\u00a0\nYour change to SolrDocument appears purely code formatting; true?\nRats. I've been having trouble with my new machine and getting IntelliJ to really not screw around with lines that haven't been changed, looks like I have more work to do there. Yep, purely formatting, I'll revert.\n\n\u00a0\n\nThanks again. ",
            "author": "Erick Erickson",
            "id": "comment-16573982"
        },
        {
            "date": "2018-08-09T04:22:24+0000",
            "content": "docFetcher is in the SolrIndexSearcher and can interleave docs, fetching different fields. This came to light because one of the tests fetches children (IIRC) which means there's a different set of fields to be retrieved on subsequent calls. \n\nInteresting; which test is this?  Per chance TestChildDocTransformer?  Any way, I don't imagine this would be a problem since if you want different fields for children, then you could simply use a different SolrReturnFields, and so there's no mismatch.\n\nAre you thinking of putting the RetrieveFieldsOptimizer in SolrReturnFields and Moving the class over there?\n\nI didn't completely think that through yet.  Eh... it's debatable.  It'd be nice if SolrReturnFields didn't itself have to reference anything in SolrDocumentFetcher since that would create a bidirectional reference which I'd like to avoid as a matter of design taste.  So therefore I think most of the decision logic should go in SolrDocumentFetcher in some form.  I've always found SolrReturnFields to be a bit confusing so I don't love adding stuff to make it more complex but if these two field lists are clearly documented (to include when and who sets them) then it's okay I think.  Maybe names like \"fetchStoredFields\" and \"fetchDocValueFields\".\n\nHow about just put the method over in SolrDocument like String[] getValuesAsStrings(fieldName)? Seems cleaner.\n\nFirst, why just Strings when the type might be something else like a Date?  So there's that.  Then... I don't really like values like Lucene IndexableField winding up as-is on a SolrDocument.  It's a SolrDocument, not a Lucene Document.  But I understand the motivation: it was a way (though not the only possible way) to have lazy loading as late as possible.  But this has led to some clumsy gotchas with consumers needing to be aware they have to deal with this Lucene IndexableField value when they just want a String (or a Date etc.).  I bet the lazy load aspect might be better implemented as another subclass of SolrDocument or in SolrDocument itself, so that the caller doesn't have to even be aware.  But that seems out of scope of this issue.  My proposed boolean flag would be minor enough, though. ",
            "author": "David Smiley",
            "id": "comment-16574271"
        },
        {
            "date": "2018-08-09T05:15:46+0000",
            "content": "OK, here's another cut. It's still a bit inelegant, it just stuffs a RetrieveFieldsOptimizer into SolrReturnFields. At least that's concealed from most users though and the initialization is done only once per use of srf.\n\nI'm not all that crazy about having to use s SolrReturnFields rather than ReturnFields in some places, but don't really see a lightweight alternative.\n\nPutting\u00a0getValuesAsStrings(fieldName) \n\nover in SolrDocument doesn't work either as that would require a dependency on luceneCore for the \"StoredField\" class.\n\nSo this gets rid of the opaque Object and still only initializes the RetrieveFieldsOptimizer once.\n\nIt also implements your suggestion to tell the proposed solrDoc to convert all the fields to Strings up-front.\n\nI haven't tested this very much yet, putting it up for perusal.\n\n\u00a0 ",
            "author": "Erick Erickson",
            "id": "comment-16574303"
        },
        {
            "date": "2018-08-09T15:49:45+0000",
            "content": "Per chance TestChildDocTransformer?\nYeah, and the latest iteration has fails in three Transformers....\nIt'd be nice if SolrReturnFields didn't itself have to reference\nPutting it in SolrReturnFields was super-ugly, either a bidirectional reference which I dislike too or I would have had to pass 4 different lists , neither of which I could stand. Having just a set/get for the optimizer isn't great either, but it's better.\nFirst, why just Strings when the type might be something else like a Date?\nWhat does the calling code look like then? I have this SolrDocument and I want to get \"field1\". Do I have code like\n\nif (val instanceof String) {\n\u00a0 \u00a0 \u00a0String eoeS = (String)val;\n } else if (val instanceof Date) {\n\u00a0 \u00a0 \u00a0Date eoeD = (Date)val;\n } etc?\n\n\nThat's its own kind of ugly.\n\nor\n\n      if (fieldType instanceof IntValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new IntFieldWriter(field);\n        }\n      } else if (fieldType instanceof LongValueFieldType) {\n        if (multiValued) {\n          writers[i] = new MultiFieldWriter(field, fieldType, schemaField, true);\n        } else {\n          writers[i] = new LongFieldWriter(field);\n        }\n      } else if (fieldType instanceof FloatValueFieldType) {\n\netc....\n\n\nThat said, it's another kind of ugly to have code that parses the string that's been automagically converted.\n\nWDYT about\n\n1> making the code convert to native types and have a getValAsString() method that at least conceals the above ugliness when the user doesn't care?\n\n2> forgetting the boolean for SolrDocumentFetcher.solrDoc, just convert to native types regardless. I don't really see a good purpose to be served by allowing the option here. The goal is to make it simpler to use so one less option seems good. ",
            "author": "Erick Erickson",
            "id": "comment-16575035"
        },
        {
            "date": "2018-08-09T17:53:33+0000",
            "content": "1> making the code convert to native types and have a getValAsString() method that at least conceals the above ugliness when the user doesn't care?\n+0... maybe warn that the native type might actually be a number or date, therefore this method might do a conversion.\n\nCan you give a couple examples of what the caller is going to do with this \u2013 why they want specifically a String? ",
            "author": "David Smiley",
            "id": "comment-16575213"
        },
        {
            "date": "2018-08-09T22:20:06+0000",
            "content": "Can you give a couple examples of what the caller is\u00a0\n\u00a0\n\nI only\u00a0have a single case at the moment\u00a0in TermVectorComponent. I'm going to give up returning any kind of transformed SolrDocument as part of this JIRA.\u00a0We can raise a separate Jira if we want to add in a to-native option.\n\nI think just combining these two classes is enough here and the \"simplification\" of having the SolrDocument come back with specific types isn't useful enough outside of this one case to make it worth spending more time on.\n\nI do wonder whether we can re-use/abstract/whatever some of the writer code somehow, but don't want to go there now. ",
            "author": "Erick Erickson",
            "id": "comment-16575481"
        },
        {
            "date": "2018-08-10T04:56:14+0000",
            "content": "Sounds good.  Looking forward to the next patch.  This'll be a nice step forward. ",
            "author": "David Smiley",
            "id": "comment-16575754"
        },
        {
            "date": "2018-08-13T02:05:06+0000",
            "content": "Nikolay:\n\nThanks for pointing this out. I'm in the middle of\u00a0rearranging RetrieveFieldsOptimizer and writing tests that exercise the optimization process, especially in terms of determining that fields are fetched from the expected places, I'll incorporate your fix into anything I find.\u00a0 ",
            "author": "Erick Erickson",
            "id": "comment-16577764"
        },
        {
            "date": "2018-08-15T04:38:06+0000",
            "content": "Latest iteration, with unit tests (which is what I've been spending most of my time on in the past few days).\n\nI'm experimenting with the tests on how easy/difficult it would be to just use the mutable schemas rather than continue the proliferation of schemas, so some of the code in the test may move elsewhere, but in a future JIRA.\n\nNot final yet, there are several TODOs and the like. Do note that the unit tests showed some bugs in the optimizer that I fixed.\n\nAny feedback welcome. ",
            "author": "Erick Erickson",
            "id": "comment-16580708"
        },
        {
            "date": "2018-08-15T14:35:03+0000",
            "content": "Little review....\n\n\tOverall I'm loving it\n\tRetrieveFieldsOptimizer is now an inner class but you either forgot to declare it static, or you forgot to remove the now pointless argument to the SolrDocumentFetcher within it since it will already have access to the doc fetcher.\n\tI like the Supplier use\n\tWow there's a lot to that test.  A minor point: those classes you created local to the test (e.g. FieldHolder) could be simpler by forgoing JavaBean conventions, as they are internal so just use field access.\n\n ",
            "author": "David Smiley",
            "id": "comment-16581158"
        },
        {
            "date": "2018-08-15T16:40:03+0000",
            "content": "David Smiley Thanks!\u00a0A lot of things moved around as I was getting it all to work and there's cruft laying around, thanks for pointing it out. I'll fix those. And look at it all again after my eyes rest a bit \n\nThe test kind of grew into an ungainly beast. There's a lot of work just to get the schema in place, then not a lot of code to test. Basically it's:\n\n\tuse\u00a0a lot of\u00a0code setting up a field type for all the kinds of fields I want to test.\n\tuse\u00a0a little code to populate a few documents with the data (one weakness is it's the same data for each doc, I'll look at that).\n\tspend not much code at all insuring that the fields\u00a0\n\t\n\t\twere retrieved from the expected place\n\t\tare the values expected\n\t\n\t\n\n\n\nAnd not I have a better idea what's useful if I ever get time to go forward with SOLR-10229. ",
            "author": "Erick Erickson",
            "id": "comment-16581324"
        },
        {
            "date": "2018-08-16T17:57:37+0000",
            "content": "Latest version incorporating David's comments and general clean-up as well as finally figuring out that Trie fields are SORTED_SET and Point fields are SORTED_NUMERIC and making that adjustment in the test code.\n\nPending objections, I'll probably commit this this weekend. The test has considerable randomization in it, one of the relatively rare problems was duplicate values so I also added explicit duplicate values in the fields to insure coverage there.\n\n1,000 beast iterations last night and all is well. I'll hit it again tonight just in case my \"minor cosmetic rearrangements\" this morning foo'd something.\n\n\u00a0 ",
            "author": "Erick Erickson",
            "id": "comment-16582871"
        },
        {
            "date": "2018-08-16T23:34:44+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   2m  7s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   4m  6s \n  the patch passed  \n\n\n +1 \n  javac  \n   4m  6s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   4m  6s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   4m  6s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   4m  6s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n  85m 24s \n  core in the patch failed.  \n\n\n  \n   \n  96m  2s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.cloud.cdcr.CdcrBidirectionalTest \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12625 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12935902/SOLR-12625.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 585ba16 \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 20 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/163/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/163/testReport/ \n\n\n modules \n C: solr solr/core U: solr \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/163/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16583188"
        },
        {
            "date": "2018-08-17T20:44:08+0000",
            "content": "Final patch unless there are objections. This patch differs from the last one only in that the test now fires of several threads in order to insure that the document fetcher is not inappropriately re-using the fetch optimizer.\n\nWill commit over the weekend. ",
            "author": "Erick Erickson",
            "id": "comment-16584362"
        },
        {
            "date": "2018-08-18T03:05:36+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 14s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m  0s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m  0s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m  4s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m  0s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m  0s \n  the patch passed  \n\n\n +1 \n  Validate ref guide  \n   1m  0s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  40m 30s \n  core in the patch passed.  \n\n\n  \n   \n  45m 21s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12625 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12936083/SOLR-12625.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  validaterefguide  \n\n\n uname \n Linux lucene1-us-west 4.4.0-130-generic #156~14.04.1-Ubuntu SMP Thu Jun 14 13:51:47 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 9f615fb \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/164/testReport/ \n\n\n modules \n C: solr solr/core solr/solr-ref-guide U: solr \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/164/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16584599"
        },
        {
            "date": "2018-08-20T17:37:39+0000",
            "content": "Commit 66d500b5a59e1aefe9170e8c5cb70a9e0b0f1033 in lucene-solr's branch refs/heads/master from Chris Erickson\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=66d500b ]\n\nSOLR-12625: Combine SolrDocumentFetcher and RetrieveFieldsOptimizer ",
            "author": "ASF subversion and git services",
            "id": "comment-16586278"
        },
        {
            "date": "2018-08-20T17:41:10+0000",
            "content": "Commit 82c64af84b903df40e457ed6e338b3abf43a7534 in lucene-solr's branch refs/heads/branch_7x from Chris Erickson\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=82c64af ]\n\nSOLR-12625: Combine SolrDocumentFetcher and RetrieveFieldsOptimizer\n\n(cherry picked from commit 66d500b5a59e1aefe9170e8c5cb70a9e0b0f1033) ",
            "author": "ASF subversion and git services",
            "id": "comment-16586282"
        },
        {
            "date": "2018-08-21T01:30:39+0000",
            "content": "Commit 66d500b5a59e1aefe9170e8c5cb70a9e0b0f1033 in lucene-solr's branch refs/heads/jira/http2 from Chris Erickson\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=66d500b ]\n\nSOLR-12625: Combine SolrDocumentFetcher and RetrieveFieldsOptimizer ",
            "author": "ASF subversion and git services",
            "id": "comment-16586763"
        },
        {
            "date": "2018-09-05T17:47:30+0000",
            "content": "Commit 4f0558800786c087391e04828d5e38d7ca7693dc in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4f05588 ]\n\nSOLR-12625: fix typos...\"an\" -> \"and\" ",
            "author": "ASF subversion and git services",
            "id": "comment-16604719"
        },
        {
            "date": "2018-09-05T17:49:19+0000",
            "content": "Commit 712aa631beeb324c1931e9a0bd7de0b6da10df3c in lucene-solr's branch refs/heads/branch_7x from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=712aa63 ]\n\nSOLR-12625: fix typos...\"an\" -> \"and\" ",
            "author": "ASF subversion and git services",
            "id": "comment-16604724"
        }
    ]
}