{
    "id": "SOLR-8847",
    "title": "SolrJ JDBC - Implement \"Select *\"",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The sql query \"Select *\" is commonly used, but currently all fields need to be specified.  This can cause some troubles as \"Select *\" has been used to pull back column metadata in some JDBC clients.",
    "attachments": {
        "SOLR-8847.patch": "https://issues.apache.org/jira/secure/attachment/12794570/SOLR-8847.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-14T17:44:02+0000",
            "author": "Kevin Risden",
            "content": "Just some notes on the topic. Currently the Schema API supports getting the schema, but this won't get dynamic fields that are present in the collection. ie: *_i will come back but mycount_i will not. There are a few workarounds for this, but nothing that seems well supported.\n1) use the luke request handler\n2) use csv wt and headers to get back the columns.\nBoth of these were provided to a stackoverflow answer previously: http://stackoverflow.com/questions/3211139/solr-retrieve-field-names-from-a-solr-index ",
            "id": "comment-15193727"
        },
        {
            "date": "2016-03-14T17:44:48+0000",
            "author": "Kevin Risden",
            "content": "This probably relates to the work that would be required to get the Apache Calcite optimizer into the SQL handling. ",
            "id": "comment-15193728"
        },
        {
            "date": "2016-03-15T12:22:29+0000",
            "author": "Kevin Risden",
            "content": "note: This could fix the manual string concatenation of fl and use String.join in SQLHandler. ",
            "id": "comment-15195192"
        },
        {
            "date": "2016-03-15T13:08:08+0000",
            "author": "Joel Bernstein",
            "content": "I was thinking the same thing. We might want to implement this as part of the Calcite implementation. ",
            "id": "comment-15195266"
        },
        {
            "date": "2016-03-21T18:50:19+0000",
            "author": "Trey Cahill",
            "content": "Added a patch to handle \"Select *\".  It is based off of SOLR-8823, which implements the getColumns that \"Select *\" uses when rewriting the query. ",
            "id": "comment-15204883"
        },
        {
            "date": "2016-04-19T21:55:45+0000",
            "author": "Kevin Risden",
            "content": "Update patch based on changes from updating SOLR-8823 to master. Need to review more ",
            "id": "comment-15248760"
        },
        {
            "date": "2016-04-20T14:51:09+0000",
            "author": "Kevin Risden",
            "content": "Trey Cahill - Some initial comments:\n\nCan this logic be pulled out into a helper method or better yet use the SQL parser to detect this case instead of manually doing it?\n\n(sql.contains(\"*\") && !sql.contains(\"(*)\"))\n\n\n\nIs it possible to avoid making a new CloudSolrClient and using the solrclientcache? ",
            "id": "comment-15250027"
        },
        {
            "date": "2017-02-20T03:31:56+0000",
            "author": "Kevin Risden",
            "content": "SOLR-8593 implemented support for select * ",
            "id": "comment-15873991"
        },
        {
            "date": "2017-05-17T18:55:46+0000",
            "author": "Yury Kats",
            "content": "\"SELECT *\" still does not work for queries without a LIMIT, even when all fields in the schema are docValues. \nThe query fails with\n\njava.io.IOException: score is not a valid field for unlimited queries\n\n\nSince the user has no control over the \"score\" field, there is no way to make this work for the end user. ",
            "id": "comment-16014628"
        }
    ]
}