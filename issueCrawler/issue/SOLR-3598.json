{
    "id": "SOLR-3598",
    "title": "Provide option to allow aliased field to be included in query for EDisMax QParser",
    "details": {
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "I currently have a situation where I'd like the original field included in the query, for instance I have several fields with differing granularity, name, firstname and lastname.  Some of my sources differentiate between these so I can fill out firstname and lastname, while others don't and I need to just place this information in the name field.  When querying I'd like to be able to say name:Jamie and have it translated to name:Jamie first_name:Jamie last_name:Jamie.  In order to do this it creates an alias cycle and the EDisMax Query parser throws an exception about it.  Ideally there would be an option to include the original field as part of the query to support this use case.",
    "attachments": {
        "alias.patch": "https://issues.apache.org/jira/secure/attachment/12535321/alias.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jamie Johnson",
            "id": "comment-13407716",
            "date": "2012-07-06T05:29:47+0000",
            "content": "simple patch which supports this.  I didn't run any exhaustive tests but the aliasing piece works. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13410912",
            "date": "2012-07-10T21:12:09+0000",
            "content": "Couldn't you achieve the same through different field naming in your schema?\n\nFields = firstname, lastname, fullname\n\nAlias: f.name.qf=firstname,lastname,fullname "
        },
        {
            "author": "Jamie Johnson",
            "id": "comment-13412962",
            "date": "2012-07-12T17:19:40+0000",
            "content": "Just to make sure I understand you're saying create a pseudo field which we use for querying the actual fields?  so basically\n\npseudofield=realfield1,realfield2,realfield3 "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13413268",
            "date": "2012-07-12T21:52:41+0000",
            "content": "Yes, f.<fieldname>.qf will wire up \"fieldname\" as a valid \"pseudo field\" to be queried, even if it does not exist in your index schema. Can you test it and report back if it solved your use case? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13425263",
            "date": "2012-07-30T21:30:26+0000",
            "content": "Closing - Known workaround exists "
        },
        {
            "author": "Eduard Moraru",
            "id": "comment-13560845",
            "date": "2013-01-23T17:23:13+0000",
            "content": "Why so quick to dismiss this idea?\n\nI have just discovered field aliasing and I think it's great. My scenario was basically to do query expansion for specific fields, but, just like the OP, I needed the actually expanded field to be kept in the resulting query, like \"f.who.qf=who,what,where\" (which currently causes a loop exception).\n\nNow, applying the suggested workaround, I have to rename my field in the schema.xml to something that is semantically incoherent, only so that I can include that renamed field in my alias list, like: \"f.who.qf=who_real,what,where\"\n\nI really think that having some field-based option that prevents further alias expansion would be great and would keep the schema.xml consistent.\n\nWDYT? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13561052",
            "date": "2013-01-23T20:15:32+0000",
            "content": "I think it would cause confusion if \"who\" is both a physical schema field and an alias for itself plus something else. I could perhaps buy in on the idea if I am presented with a REAL useful usecase which is very hard to solve otherwise. "
        }
    ]
}