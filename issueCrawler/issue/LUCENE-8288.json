{
    "id": "LUCENE-8288",
    "title": "Context query with regex \".\" produces an assertion failure",
    "details": {
        "components": [],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Bug"
    },
    "description": "When a RegexCompletionQuery of \".\" is provided to ContextQuery, the following assertion failure occurs:\n\njava.lang.AssertionError: input should not end with a context separator followed by SEP_LABEL\n\nat org.apache.lucene.search.suggest.document.ContextQuery$ContextCompletionWeight.setInnerWeight(ContextQuery.java:299)\nat org.apache.lucene.search.suggest.document.ContextQuery$ContextCompletionWeight.setNextMatch(ContextQuery.java:275)\nat org.apache.lucene.search.suggest.document.NRTSuggester.lookup(NRTSuggester.java:221)\nat org.apache.lucene.search.suggest.document.CompletionScorer.score(CompletionScorer.java:70)\nat org.apache.lucene.search.BulkScorer.score(BulkScorer.java:39)\nat org.apache.lucene.search.suggest.document.SuggestIndexSearcher.suggest(SuggestIndexSearcher.java:78)\nat org.apache.lucene.search.suggest.document.SuggestIndexSearcher.suggest(SuggestIndexSearcher.java:58)\nat org.apache.lucene.search.suggest.document.TestContextQuery.testDotRegexQuery(TestContextQuery.java:188)\n\n\n\nNote that this is a related, but distinct issue from https://issues.apache.org/jira/browse/LUCENE-8287,\u00a0where the RegexCompletionQuery is empty.\n\nThe attached patch provides a reproduction of the issue, as the test case TestContextQuery#testRegexDotQuery.\u00a0To reproduce, Java assertions must be enabled (as in the default configuration for tests).\n\nThe patch also provides\u00a0a test case for the normal behavior of an empty RegexCompletionQuery, when it is not wrapped in ContextQuery (TestRegexCompletionQuery#testRegexDotQuery). In this case, there is no error, and all suggestions are returned.\n\nFrom a quick look, it seems as though \".\" doesn't capture any characters past\u00a0 CompletionAnalyzer.SEP_LABEL, so the matching prefix in\u00a0ContextCompletionWeight#setInnerWeight is unexpectedly empty.",
    "attachments": {
        "LUCENE-8288-repro.patch": "https://issues.apache.org/jira/secure/attachment/12921469/LUCENE-8288-repro.patch",
        "LUCENE-8288.patch": "https://issues.apache.org/jira/secure/attachment/12921581/LUCENE-8288.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16461058",
            "author": "Jim Ferenczi",
            "content": "Since it is possible to index suggestions with or without separators (preservePositionIncrements) the context query adds an optional separator after the context automaton. This character is optional so the regex \".\" can match the context plus the separator label but nothing from the real suggestions. Completion queries should always match a prefix from the suggestions (hence the assertion) but it doesn't handle regex that starts with \".\". I've attached a patch to fix the issue that adds a parameter in the ContextQuery constructor to indicate if suggestions are indexed with position increments or not.This is a breaking change since it requires to match the value used for indexing but I don't see how to do it differently if we want to match regex that starts with any character accurately (e.g.: \".[s|t]\"). ",
            "date": "2018-05-02T13:46:40+0000"
        },
        {
            "id": "comment-16466115",
            "author": "Julie Tibshirani",
            "content": "Thank you Jim Ferenczi!\u00a0I'm looking forward to this fix going in, as we're\u00a0hoping to use a \".\" regex completion query as part of an elasticsearch\u00a0enhancement (https://github.com/elastic/elasticsearch/issues/19147). ",
            "date": "2018-05-07T16:37:15+0000"
        },
        {
            "id": "comment-16466340",
            "author": "Jim Ferenczi",
            "content": "I attached a new patch that fixes the name of the option (preserveSep is the correct option,\u00a0preservePositionIncrements is for keeping holes when tokens are removed by a filter). I'll commit next week if there is no objection. ",
            "date": "2018-05-07T19:13:34+0000"
        }
    ]
}