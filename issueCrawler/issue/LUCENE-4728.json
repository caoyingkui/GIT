{
    "id": "LUCENE-4728",
    "title": "Allow CommonTermsQuery to be highlighted",
    "details": {
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "affect_versions": "4.1",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Add support for CommonTermsQuery to all highlighter impls. \nThis might add a dependency (query-jar) to the highlighter so we might think about adding it to core?",
    "attachments": {
        "LUCENE-4728.patch": "https://issues.apache.org/jira/secure/attachment/12566829/LUCENE-4728.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-01-28T21:43:21+0000",
            "content": "patch adding support and tests ",
            "author": "Simon Willnauer",
            "id": "comment-13564712"
        },
        {
            "date": "2013-01-28T22:11:34+0000",
            "content": "In the case of these highlighters with huge instanceof's across all queries, instead of doing things like:\n\n\n+    } else if (sourceQuery instanceof CommonTermsQuery) {\n+      flatten(sourceQuery.rewrite(reader), reader, flatQueries);\n     }\n\n\n\ncan't it just be something like:\n\n+    } else if (!sourceQuery instanceof MultiTermQuery) {\n+      // an unknown query type, see if it rewrites into something we know.\n+      flatten(sourceQuery.rewrite(reader), reader, flatQueries);\n     }\n\n\n\nthen we wouldn't need explicit dependencies in these highlighters on every single query ",
            "author": "Robert Muir",
            "id": "comment-13564743"
        },
        {
            "date": "2013-01-29T16:06:23+0000",
            "content": "the reason why I didn't do that is that this query simply stops flattening if it doesn't know the query so if we turn this around we need to make sure that we don't end up in an endless loop rewriting all the time. I mean we can do this and add another check but I would feel safer to have these explicit checks to be honest. I don't think this is a bottle neck of any sort so while I don't really like it I think its ok though.  ",
            "author": "Simon Willnauer",
            "id": "comment-13565478"
        },
        {
            "date": "2013-01-29T16:24:37+0000",
            "content": "\nthe reason why I didn't do that is that this query simply stops flattening if it doesn't know the query so if we turn this around we need to make sure that we don't end up in an endless loop rewriting all the time.\n\nI don't see the problem, we only need to rewrite it until it 'stops', just like indexsearcher does:\n\n    Query query = original;\n    for (Query rewrittenQuery = query.rewrite(reader); rewrittenQuery != query;\n         rewrittenQuery = query.rewrite(reader)) {\n      query = rewrittenQuery;\n    }\n\n\n\n\nI don't think this is a bottle neck of any sort \n\nI do think its a bottleneck, in that if we only did this simple thing, then highlighters wouldnt have to have hard dependencies on every concrete query we add. They would also work with custom queries that users make that rewrite to graphs of core queries (this one is a perfect example!)\n\nThere isn't a need for the highlighting module to depend on the queries module when it can do this with the abstract API already in core. ",
            "author": "Robert Muir",
            "id": "comment-13565494"
        },
        {
            "date": "2013-02-01T10:49:37+0000",
            "content": "new patch - I added a comment there to make sure we don't run into stack overflow exceptions as well as a test for that! ",
            "author": "Simon Willnauer",
            "id": "comment-13568653"
        },
        {
            "date": "2013-02-01T10:58:53+0000",
            "content": "nice: I like it! Is it possible to fix WeightedSpanTermExtractor the same way for the other highlighter?\n\nit seems like the default if it doesnt know the query is... to do nothing? ",
            "author": "Robert Muir",
            "id": "comment-13568662"
        },
        {
            "date": "2013-02-01T12:25:44+0000",
            "content": "nice: I like it! Is it possible to fix WeightedSpanTermExtractor the same way for the other highlighter?\nthis one is tricky since it involves getting the field from the query in order to fetch a reader. This involves instanceof checks again which doesn't buy use much. Fix positions on Query / Scorer would help you know  I think this is ready, I will commit that soon. ",
            "author": "Simon Willnauer",
            "id": "comment-13568691"
        },
        {
            "date": "2013-02-01T12:29:24+0000",
            "content": "wait i dont get it... its another instanceof block.\n\nI think we would just do the same trick in WeightedSpanTermExtractor, and then in the test have a mock query that rewrites to primitives (e.g. boolean query) and not have highlighter depend on the queries module?\n\nI dont think highlighters should depend on the concrete queries, only the abstract apis (just like i think modules shouldnt depend on analyzers modules)... otherwise its a sign something is wrong. ",
            "author": "Robert Muir",
            "id": "comment-13568696"
        },
        {
            "date": "2013-02-01T12:39:01+0000",
            "content": "wait i dont get it... its another instanceof block.\nno not necessarily. Since for rewrite I need to get the field of the query otherwise I can't get a IndexReader in WeightedSpanTermExtractor. The other problem here is that WeightedSpanTermExtractor doesn't rewrite against a global reader but rather against a \"reanalyzed\" reader which might bring up problems in the case of CommonTermsQuery which will in-turn create a different BooleanQuery. \n\nI dont think highlighters should depend on the concrete queries, only the abstract apis (just like i think modules shouldnt depend on analyzers modules)... otherwise its a sign something is wrong.\n\ndude this is wishful thinking unless we fix our API to allow to do positional queries. Really we already rely on it with ConstantScore / FilteredQuery calling getQuery() we also rely on BQ etc. and TermQuery which is not abstract api. ",
            "author": "Simon Willnauer",
            "id": "comment-13568702"
        },
        {
            "date": "2013-02-01T12:48:04+0000",
            "content": "Hi,\nI had the same problem while implementing a custom query for a customer. The query was very easy, it just rewrote after expanding terms to MultiPhraseQuery - you would expect that this works with highlighter! - But it doen't. The problem is that highligther does not even try to rewrite the query, it only checks via instanceof checks the original query type, failing to highlight my simple query without custom weights and scorers, just a very simple rewrite method. That is not a good design! If the highlighter would rewrite the query as a last chance this problem would have been solved. The problem with that is a second one in the crazy Lucene Highlighter: You need the field name for highlighter to work \n\nFor this customer my only chance was to use Javassist to hot-patch the WeightedSpanTermExtractor and add another instanceof check. Overriding the fallback to handle other queries was impossible because the customer's framework was ElasticSearch which has a highly private, unextendable WeightedSpanTermExtractor with no possibility to override the Lucene default  [same applies for Solr]\n\nThis brings us back to a very old issue: We should extend the Query class by a simple additional API, so it can provide all metadata needed to do highlighting without crazy instaceof chains. ",
            "author": "Uwe Schindler",
            "id": "comment-13568715"
        },
        {
            "date": "2013-02-01T12:51:22+0000",
            "content": "\n  private Map<String,AtomicReaderContext> readers = new HashMap<String,AtomicReaderContext>(10); \n\nWell this is the core problem: per-field readers. Currently the only reasons multitermqueries rewrite is because \nthey know the field.\n\nBut isnt this easily solvable? we just wrap a ParallelReader around that. ",
            "author": "Robert Muir",
            "id": "comment-13568717"
        },
        {
            "date": "2013-02-01T12:59:31+0000",
            "content": "But isnt this easily solvable? we just wrap a ParallelReader around that.\n\n+1 thats the solution! ",
            "author": "Uwe Schindler",
            "id": "comment-13568722"
        },
        {
            "date": "2013-02-01T13:58:33+0000",
            "content": "here is the - solves everybodies problem - patch. I added the rewrite trick to both highlighters, remove the field requirement in the WeightedSpanTermExtractor and hacked a reusing AtomicReader that simply delegates to the MemoryIndex AtomicReader shadowing the field. kind of hacky but that entire thing is hacky ey? Nice thing is that we don't need to index the tokenstream twice if we need two different fields. ",
            "author": "Simon Willnauer",
            "id": "comment-13568744"
        },
        {
            "date": "2013-02-04T15:40:58+0000",
            "content": "any comments on this? ",
            "author": "Simon Willnauer",
            "id": "comment-13570339"
        },
        {
            "date": "2013-02-05T13:46:01+0000",
            "content": "next iter, updated changes entry and cleaned up WeigthedSpanTermExtractor a bit. I will commit this in a bit. ",
            "author": "Simon Willnauer",
            "id": "comment-13571300"
        },
        {
            "date": "2013-02-05T14:02:24+0000",
            "content": "[trunk commit] Simon Willnauer\nhttp://svn.apache.org/viewvc?view=revision&revision=1442590\n\nLUCENE-4728: Unknown and not explicitly mapped queries are now rewritten against the highlighting IndexReader to obtain primitive queries before discarding the query entirely.\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13571310"
        },
        {
            "date": "2013-02-05T14:26:10+0000",
            "content": "[branch_4x commit] Simon Willnauer\nhttp://svn.apache.org/viewvc?view=revision&revision=1442599\n\nLUCENE-4728: Unknown and not explicitly mapped queries are now rewritten against the highlighting IndexReader to obtain primitive queries before discarding the query entirely. ",
            "author": "Commit Tag Bot",
            "id": "comment-13571334"
        },
        {
            "date": "2013-02-05T15:18:27+0000",
            "content": "[branch_4x commit] Simon Willnauer\nhttp://svn.apache.org/viewvc?view=revision&revision=1442606\n\nLUCENE-4728: add queries to the classpath since highlighter specializes a query now ",
            "author": "Commit Tag Bot",
            "id": "comment-13571376"
        },
        {
            "date": "2013-02-05T15:18:29+0000",
            "content": "[trunk commit] Simon Willnauer\nhttp://svn.apache.org/viewvc?view=revision&revision=1442605\n\nLUCENE-4728: add queries to the classpath since highlighter specializes a query now ",
            "author": "Commit Tag Bot",
            "id": "comment-13571377"
        },
        {
            "date": "2013-02-21T02:42:39+0000",
            "content": "[branch_4x commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1447142\n\nLUCENE-4728: IntelliJ configuration: add queries module dependency to highlighter module (merged trunk r1447141) ",
            "author": "Commit Tag Bot",
            "id": "comment-13582833"
        },
        {
            "date": "2013-02-21T02:42:53+0000",
            "content": "[trunk commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1447141\n\nLUCENE-4728: IntelliJ configuration: add queries module dependency to highlighter module ",
            "author": "Commit Tag Bot",
            "id": "comment-13582849"
        },
        {
            "date": "2013-05-10T10:33:09+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653843"
        }
    ]
}