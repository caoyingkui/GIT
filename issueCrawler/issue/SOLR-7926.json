{
    "id": "SOLR-7926",
    "title": "Hit highlighting with EdgeNGramFilterFactory",
    "details": {
        "components": [
            "highlighter"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.1,                                            5.2.1",
        "status": "Reopened",
        "resolution": "Unresolved",
        "priority": "Critical"
    },
    "description": "Hit highlight highlights the whole word, not just the part that matches the search term when using EdgeNGramFilterFactory in the field type.\n\nIn schema.xml I have field type text_ngram:\n\n                <fieldType name=\"text_ngram\" class=\"solr.TextField\">\n                        <analyzer type=\"index\">\n                                <charFilter class=\"solr.MappingCharFilterFactory\" mapping=\"mapping-ISOLatin1Accent.txt\"/>\n                                <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n                           <!-tokenizer class=\"solr.StandardTokenizerFactory\"/->\n                                <filter class=\"solr.WordDelimiterFilterFactory\" generateWordParts=\"1\" generateNumberParts=\"1\" catenateWords=\"0\" catenateNumbers=\"0\" catenateAll=\"0\" splitOnCaseChange=\"1\"/>\n                                <filter class=\"solr.LowerCaseFilterFactory\"/>\n                                <filter class=\"solr.EdgeNGramFilterFactory\" maxGramSize=\"20\" minGramSize=\"3\" luceneMatchVersion=\"4.3\"/>\n                                <filter class=\"solr.PatternReplaceFilterFactory\" pattern=\"([^\\w\\d\\*\u00e6?~F?~E])\" replacement=\"\" replace=\"all\"/>\n                        </analyzer>\n                        <analyzer type=\"query\">\n                                <charFilter class=\"solr.MappingCharFilterFactory\" mapping=\"mapping-ISOLatin1Accent.txt\"/>\n                                <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n                                <filter class=\"solr.WordDelimiterFilterFactory\" generateWordParts=\"0\" generateNumberParts=\"0\" catenateWords=\"0\" catenateNumbers=\"0\" catenateAll=\"0\" splitOnCaseChange=\"0\"/>\n                                <filter class=\"solr.LowerCaseFilterFactory\"/>\n                                <filter class=\"solr.PatternReplaceFilterFactory\" pattern=\"([^\\w\\d\\*\u00e6?~F?~E])\" replacement=\"\" replace=\"all\"/>\n                                <filter class=\"solr.PatternReplaceFilterFactory\" pattern=\"^(.\n{20}\n)(.*)?\" replacement=\"$1\" replace=\"all\"/>\n                        </analyzer>\n                </fieldType>\n\nIn Solr Admin analyse, with index value \"lucene\" and query value \"luc\" it shows this: \n\nLENGTF text             luc         luce            lucen               lucene\n       raw_bytes        [6c 75 63]  [6c 75 63 65]   [6c 75 63 65 6e]    [6c 75 63 65 6e 65]\n       start            0           0               0                   0\n       end              6           6               6                   6   \n       positionLength   1           1               1                   1    \n       type             word        word            word                word\n       position         1           1               1                   1    \n\nSince the end position is 6 in this case the whole word (\"lucene\" is highlighted). \n\nIf I change to use NGramFilterFactory it shows me this (for the first three items):\n\nLENGTF text             luc         uce             cen               \n       raw_bytes        [6c 75 63]  [6c 75 63 65]   [6c 75 63 65 6e]    \n       start            0           1               2                 \n       end              3           4               5                   \n       positionLength   1           1               1                    \n       type             word        word            word            \n       position         1           1               1               \n\nThe end position is correct then and the highlighter highlights only the search term. Note that I have specified luceneMatchVersion=\"4.3\". Without this, the end positions goes back to 6 also for the NGramFilterFactory.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-14T14:04:07+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Hi. \n\nThis kind of questions is more suited for the solr-user mailing list. Most likely this is not a bug. Please ask the question on the list, and also tell which highlighter implementation you use, with what configuration, and why you expect it to do what you want (refer to documentation)? I'll close this jira as \"Invalid\".\n\nIf it ends up being a suspected bug or you find out your wanted result is not easily configurable with any of the existing highlighter implementations, then please re-open. ",
            "id": "comment-14697053"
        },
        {
            "date": "2015-08-14T14:14:01+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Reopening for now as I just saw that the topic was indeed discussed on the users list in 2014: http://search-lucene.com/m/eHNlhqgvy1kWzc82 ",
            "id": "comment-14697077"
        },
        {
            "date": "2015-08-14T14:23:58+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "However, in LUCENE-3907 it was agreed that it was a good change to stack all edge-ngram tokens on the same position. In your example with NGramFilterFactory, it emits the grams on separate positions, no stacking, and that is way you see that behavior. \nI dont know if we want to announce this as a \"feature\" of highlighting, but a possibility would of course be a new token filter config attribute? But I'll let Michael McCandless or others who are have opinions on the correctness of the \"token graph\" in analysis speak for such a change. ",
            "id": "comment-14697095"
        },
        {
            "date": "2015-08-14T18:05:58+0000",
            "author": "Michael McCandless",
            "content": "I agree this (highlighting of hits from tokens produced by\nEdgeNGramFilter) got worse with LUCENE-3907, but it's not clear how to\nfix it.\n\nThe stacking seems more correct: all these grams are logically\ninterchangeable with the original token, and were derived from it, so\ne.g. a phrase query involving them with adjacent tokens would work\ncorrectly.\n\nWe could perhaps remove the token graph requirement that tokens\nleaving from the same node have the same startOffset, and arriving to\nthe same node have the same endOffset.  Lucene would still be able to\nindex such a graph, as long as all tokens leaving a given node are\nsorted according to their startOffset.  But I'm not sure if there\nwould be other problems...\n\nOr we could maybe improve the token graph, at least for the non-edge\nNGramTokenFilter, so that the grams are linked up correctly, so that any\npath through the graph reconstructs the original characters.\n\nBut realistically it's not possible to innovate much with token graphs\nin Lucene today because of apparently severe back compat requirements:\ne.g. LUCENE-6664, which fixes the token graph bugs in the existing\nSynonymFilter so that proximity queries work correctly when using\nsearch-time synonyums, is blocked because of the back compat concerns\nfrom LUCENE-6721.\n\nI'm not sure what the path forward is... ",
            "id": "comment-14697473"
        },
        {
            "date": "2015-08-14T21:30:11+0000",
            "author": "David Smiley",
            "content": "We could perhaps remove the token graph requirement that tokens leaving from the same node have the same startOffset, and arriving to the same node have the same endOffset. Lucene would still be able to index such a graph, as long as all tokens leaving a given node are sorted according to their startOffset. But I'm not sure if there would be other problems...\n\nI think that direction seems best to me.  But yes there may be problems we don't see yet that may show up once we try.  Not a blocker; just some unknown unknowns that will become known  ",
            "id": "comment-14697791"
        },
        {
            "date": "2016-02-04T15:27:31+0000",
            "author": "Bj\u00f8rn Hjelle",
            "content": "As a workaround for this I now try to use the NGramFilterFactory with luceneMatchVersion=\"4.3\" and the FastVectorHighlighter for highlighting.\nIt works most of the time but quite often I hit SOLR-4137: \n\n8102 ERROR (qtp434176574-15) [   x:test] o.a.s.s.HttpSolrCall null:java.lang.StringIndexOutOfBoundsException: String index out of range: -6\n\tat java.lang.String.substring(String.java:1954)\n\tat org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.makeFragment(BaseFragmentsBuilder.java:180)\n\tat org.apache.lucene.search.vectorhighlight.BaseFragmentsBuilder.createFragments(BaseFragmentsBuilder.java:145)\n\tat org.apache.lucene.search.vectorhighlight.FastVectorHighlighter.getBestFragments(FastVectorHighlighter.java:187)\n\nI use the latest Solr release (5.4.1) and this situation can easily be reproduced. \nShould I create a separate issue for this?\n\nThanks, \nBj\u00f8rn ",
            "id": "comment-15132440"
        },
        {
            "date": "2016-02-04T19:41:22+0000",
            "author": "David Smiley",
            "content": "I suggest filing a Lucene issue against the FastVectorHighlighter that it can throw this exception given the configuration you specify. ",
            "id": "comment-15132864"
        },
        {
            "date": "2016-02-05T10:15:04+0000",
            "author": "Bj\u00f8rn Hjelle",
            "content": "Ok, opened as a Lucene issue as LUCENE-7016. \nThanks! ",
            "id": "comment-15133945"
        }
    ]
}