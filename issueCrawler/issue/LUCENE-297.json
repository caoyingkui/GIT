{
    "id": "LUCENE-297",
    "title": "Exception getting terms from IndexReader",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Incomplete",
        "status": "Closed"
    },
    "description": "I'm evaluating Lucene with simple applications that use files.\nI'm trying the different classes to discover all Lucene can do for me...\nIn the class IndexReader, the method 'terms()' lists all the terms present in \nthe index. In my first tests, using index with few files (~500), all work fine. \nBut latter, using a bigger index (~20000 files), the TermEnum throws an \nexception after 106 terms have been returned. Here's the stack trace :\n\njava.io.IOException: Le fichier sp\u00c3\u00a9cifi\u00c3\u00a9 est introuvable\n        at java.io.RandomAccessFile.seek(Native Method)\n        at org.apache.lucene.store.FSInputStream.readInternal\n(FSDirectory.java:415)\n        at org.apache.lucene.store.InputStream.readBytes(InputStream.java:61)\n        at org.apache.lucene.index.CompoundFileReader$CSInputStream.readInternal\n(CompoundFileReader.java:222)\n        at org.apache.lucene.store.InputStream.refill(InputStream.java:158)\n        at org.apache.lucene.store.InputStream.readByte(InputStream.java:43)\n        at org.apache.lucene.store.InputStream.readVInt(InputStream.java:83)\n        at org.apache.lucene.index.SegmentTermEnum.readTerm\n(SegmentTermEnum.java:149)\n        at org.apache.lucene.index.SegmentTermEnum.next\n(SegmentTermEnum.java:115)\n        at my.lucene.cli.TermsCommand.execute(TermsCommand.java:36)\n        at net.moon.cli.command.internal.DefaultRuntimeContext.executeCommand\n(DefaultRuntimeContext.java:171)\n        at net.moon.cli.command.standard.ShellCommand.processLine\n(ShellCommand.java:38)\n        at net.moon.cli.command.standard.AbstractStreamingCommand.execute\n(AbstractStreamingCommand.java:34)\n        at net.moon.cli.command.internal.DefaultRuntimeContext.executeCommand\n(DefaultRuntimeContext.java:171)\n        at net.moon.cli.Shell.start(Shell.java:27)\n        at my.lucene.Main.main(Main.java:13)\n\nFor those that don't understand french, the IO exception states a file is not \nfound...\nI've tried rebuilding the index, and then optimizing it to make it use a single \nfile, but the same error occurs...\nThanks for ideas... or a patch if needed !",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2004-10-28T03:34:09+0000",
            "content": "Can you show us some sample code so that we can reproduce your problem ? I am\nusing Lucene the same way and it works fine for me. What version of Lucene are\nyou using?\n\nregards\nBernhard ",
            "author": "Bernhard Messer",
            "id": "comment-12322005"
        },
        {
            "date": "2004-10-28T12:10:58+0000",
            "content": "I've been inspecting my code more closely, and i finally discovered a mistake : \nit closed the reader before the end of the enumeration. I suppose that in case \nof few occurences, all the terms can be loaded in a single read, but when the \nindex contains more terms, the enumerator probably comes back to the reader to \nget data progressively. Logical... and fine !!!\nSo... no bug !\nSorry for troubles... and thanks anyway. ",
            "author": "Ephemeris Lappis",
            "id": "comment-12322006"
        }
    ]
}