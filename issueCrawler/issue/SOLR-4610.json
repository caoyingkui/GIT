{
    "id": "SOLR-4610",
    "title": "Calling query.toString will print binary values for encoded integer values in terms.",
    "details": {
        "affect_versions": "3.4,                                            3.6.2,                                            4.1,                                            4.2",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "When calling toSting on a query that contains terms with encoded integers, the encoded integers are not decoded using the encodedToReadable() call.  \n\nThe result is that the integers are printed out as their encoded binary form rather than a readable form.\n\nInvestigating the Term.java showed that the toString method just converts the utf8bytes to a string.  There isn't any indication of the data type stored in the bytes at this level.  Without the data type, it does not appear that the term can be correctly printed without access to the schema (not a good thing).  \n\nI think to fix this, it might require adding the type into the term and all of the plumbing to get the type passed down to this low level.  \n\nThis could be done with setters that accept specific types and handle the encoding themselves.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Andrew Lundgren",
            "id": "comment-13608117",
            "date": "2013-03-20T20:10:38+0000",
            "content": "It has been pointed out to me that QueryParsing.toString(...) will allow you to print a query, assuming you have  given the schema.\n\nFrom the doc:\n\"The benefit of using this method instead of calling Query.toString directly is that it knows about the data types of each field, so any field which is encoded in a particularly complex way is still readable. The downside is that it only knows about built in Query types, and will not be able to format custom Query classes.\"\n\nThis solves the issue for stock query types.  Having the type embedded along with the term would allow you to use toString on the query in a more natural way, and allow custom queries to print properly. "
        }
    ]
}