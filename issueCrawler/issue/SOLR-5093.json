{
    "id": "SOLR-5093",
    "title": "Rewrite field:* to use the filter cache",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Sometimes people writes a query including something like field:* which matches all documents that have an indexed value in that field.  That can be particularly expensive for tokenized text, numeric, and spatial fields.  The expert advise is to index a separate boolean field that is used in place of these query clauses, but that's annoying to do and it can take users a while to realize that's what they need to do.\n\nI propose that Solr's query parser rewrite such queries to return a query backed by Solr's filter cache.  The underlying query happens once (and it's slow this time) and then it's cached after which it's super-fast to reuse.  Unfortunately Solr's filter cache is currently index global, not per-segment; that's being handled in a separate issue.  \n\nRelated to this, it may be worth considering if Solr should behind the scenes index a field that records which fields have indexed values, and then it could use this indexed data to power these queries so they are always fast to execute.  Likewise, [* TO *] open-ended range queries could similarly use this.\n\nFor an example of how a user bumped into this, see:\nhttp://lucene.472066.n3.nabble.com/Performance-question-on-Spatial-Search-tt4081150.html",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13724393",
            "date": "2013-07-30T20:45:22+0000",
            "content": "Err, this user already had this in their FQ. So if they had a filtercache, he'd be using it.\n\nhe should pull that slow piece to a separate FQ so its cached by itself. I don't understand why the queryparser needs to do anything else here (especially any trappy auto-caching) "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13724405",
            "date": "2013-07-30T20:53:17+0000",
            "content": "Some time ago I had suggested a related approach: LUCENE-4386 - \"Query parser should generate FieldValueFilter for pure wildcard terms to boost query performance\".\n\nThere were objections from the Lucene guys, but now that the Solr query parser is \"divorced\" from Lucene, maybe it could be reconsidered.\n\nI couldn't testify as to the relative merits of using the filter cache vs. the FieldValueFilter. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13724422",
            "date": "2013-07-30T21:00:27+0000",
            "content": "Those same lucene guys are not afraid to object here either.\n\nThis user just has to pull out AND pp:* into another fq of pp:*\n\n\n(Each filter is executed and cached separately. When it's time to use them to limit the number of results returned by a query, this is done using set intersections.) \nhttp://wiki.apache.org/solr/SolrCaching#filterCache "
        },
        {
            "author": "David Smiley",
            "id": "comment-13724428",
            "date": "2013-07-30T21:06:18+0000",
            "content": "Rob,\nYou're right for this particular user's use-case that I mentioned.  I overlooked that aspect of his query.  Nonetheless, I don't think that negates the usefulness of what I propose in this issue though.\n\nIf you consider auto-caching \"trappy\" then you probably don't like Solr very much at all then. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13724430",
            "date": "2013-07-30T21:07:44+0000",
            "content": "This user just has to pull out AND pp:* into another fq of pp:*\n\nExactly! That's what we (non-Lucene guys) are trying to do - eliminate the need for users to have to do that kind of manual optimization.\n\nWe want Solr to behave as optimally as possibly OOTB. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13724443",
            "date": "2013-07-30T21:14:11+0000",
            "content": "Solr today doesn't auto-cache. You can specify that you intend for a query to act only as a filter with fqs, control the caching behavior of these fqs, and so on.\n\nSo there is no need to add any additional auto-caching in the queryparser. Things like LUCENE-4386 would just cause \"filter cache insanity\" where its cached in duplicate places (on FieldCache.docsWithField as well as in fq bitsets).\n\nAuto-caching things in the query can easily pollute the cache with stuff thats not actually intended to be reused: then it doesn't really work at all. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13724446",
            "date": "2013-07-30T21:23:27+0000",
            "content": "I can see the argument for making \"field:*\" parse as equivalent to \"field:[* TO *]\" if the later is in fact more efficient, but i agree with rob that we shouldn't try make the parser pull out individual clauses and construct special query objects that are baked by the filterCache.  If i have an fq in my solrconfig that looks like this...\n\n\n<str name=\"fq\">X AND Y AND Z</str>\n\n\n\n...that entire BooleanQuery should be cached as a single entity in the filterCache regardless of what X, Y, and Z really are \u2013 because that's what i asked for: a single filter query.\n\nit would suck if the Query Parser looked at the specifics of what each of those clauses are and said \"I'm going to try and be smart and make each of these clauses be special query backed by the filterCache\" because now i have 4 queries in my filterCache instead of just 1, and 3 of them will never be used.\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13725094",
            "date": "2013-07-31T10:49:45+0000",
            "content": "I agree with vetoes. \nbut in a rare cases users need \n\nq=bee:blah OR pp:*\n\n  there is also a jira to handle fq disjunction like \n\nfq=foo:bar OR foo:baz\n\n. We can deliver simple qparser and use it like\n\nq=bee:blah OR _query_:\"{!fq}foo:bar\" OR _query_:\"{!fq}foo:bar\"\n \nit keeps syntax crazy enough. that's great. \nWill you accept it ?\n\nAfterwards, we can allow BS in Solr to handle filters disjunction efficiently. \n\nI just remember. Solr' ExtendedQuery supports cacheSep local param, but it seems not implemented.  "
        },
        {
            "author": "David Smiley",
            "id": "comment-13729536",
            "date": "2013-08-05T14:23:59+0000",
            "content": "I guess I change my mind; the veto arguments are good.\n\nMikhail, I like your idea on making a sub-clause be filter-cache'able.  But I don't think it should be a separate query parser because it's an orthogonal issue to how the query is parsed.  Perhaps a special local-param filterCache=true.  Your example would become:\n\n\n  q=bee:blah OR {! filterCache=true}foo:bar OR {! filterCache=true}foo:bar\n\n\n\nA key thing to document would not only be that this clause would be cached in the filter-cache, but also that it would constant-score. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13729793",
            "date": "2013-08-05T18:46:48+0000",
            "content": "I dont think that would work:\n\n\nThere may only be one LocalParams prefix per argument, preventing the need for any escaping of the original argument.\n\nhttp://wiki.apache.org/solr/LocalParams\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13729873",
            "date": "2013-08-05T19:51:57+0000",
            "content": "Robert Muir I think that would SOLR-4093\n\nCan anyone confess to \n{! sep=true}\n which is backed by ExtendedQuery.getCacheSep()? Isn't it somehow related to the discussed challenge?  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13729879",
            "date": "2013-08-05T20:01:13+0000",
            "content": "Can anyone confess to {! sep=true}\n\nIt's a placeholder that currently does nothing (and is undocumented)... ignore it, or remove it if it bothers people  "
        }
    ]
}