{
    "id": "SOLR-6807",
    "title": "Make handleSelect=false by default and deprecate StandardRequestHandler",
    "details": {
        "components": [],
        "type": "Task",
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "4.10.2",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "In the solrconfig.xml, we have a long explanation on the legacy <requestDispatcher handleSelect=\"false\" > section. Since we are cleaning up legacy stuff for version 5, is it safe now to flip handleSelect's default to be false and therefore remove both the attribute and the whole section explaining it?\n\nThen, a section in Reference Guide or even a blog post can explain what to do for the old clients that still need it. But it does not seem to be needed anymore for the new users. And possibly cause confusing now that we have implicit, explicit and overlay handlers.",
    "attachments": {
        "SOLR_6807__fix__stateVer__check_to_not_depend_on_handleSelect_setting.patch": "https://issues.apache.org/jira/secure/attachment/12875005/SOLR_6807__fix__stateVer__check_to_not_depend_on_handleSelect_setting.patch",
        "SOLR_6807_handleSelect_false.patch": "https://issues.apache.org/jira/secure/attachment/12874564/SOLR_6807_handleSelect_false.patch",
        "SOLR_6807_test_files.patch": "https://issues.apache.org/jira/secure/attachment/12874753/SOLR_6807_test_files.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-11-30T03:52:53+0000",
            "author": "Shawn Heisey",
            "content": "It was my understanding that the reason we went with false by default was to close a security hole.  To be specific, if handleSelect is true, then you can send a request to the /select handler, include qt=/update as a parameter, and change the index.\n\nI don't mind having handleSelect as an option, but I think we should keep it false by default.  I won't vote it down if there's consensus to go that way, though. ",
            "id": "comment-14229004"
        },
        {
            "date": "2014-11-30T03:55:43+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Oops, embarrassing. \n\nOf course I meant to make it false by default. So, we keep the behavior we have in all the new schemas, but don't need to have it written down and explained every time.  ",
            "id": "comment-14229006"
        },
        {
            "date": "2014-11-30T05:00:26+0000",
            "author": "David Smiley",
            "content": "+1 to false by default! ",
            "id": "comment-14229018"
        },
        {
            "date": "2016-10-02T20:48:57+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "You could also choose default value depending on luceneMatchVersion. ",
            "id": "comment-15540964"
        },
        {
            "date": "2016-10-03T00:58:14+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Yes, version-switch is probably the safest way forward. ",
            "id": "comment-15541251"
        },
        {
            "date": "2017-06-26T21:36:52+0000",
            "author": "David Smiley",
            "content": "Attached is my work in progress.  SolrJ & Contrib tests pass (which took a bit of work).  I'm working through -core now.\n\n\n\tchange SolrConfig handleSelect read default now based on luceneMatchVersion\n\tchanged all solrconfigs to remove all reference to handleSelect & qt\n\tchanged all solrconfigs such that <requestHandler /select class=\"SearchHandler\"/> is registered. I found many old test configs referencing name=\"standard\" and class StandardRequestHandler and sometimes with a superfluous default=\"true\".\n\tSolrTestCaseJ4 had some utility methods referencing the \"standard\" request handler that I replaced with \"\".. The empty string is a special value which results in choosing the default one which will be either /select or standard depending on which is registered.\n\n\n\nSince this isn't a \"feature\" or strictly an \"improvement\" but just a change of defaults / housekeeping, I think this can go to 7.0? ",
            "id": "comment-16063837"
        },
        {
            "date": "2017-06-27T14:59:45+0000",
            "author": "Shawn Heisey",
            "content": "+1 to changing the default in 7.0.\n\nLooked at the patch ... the only java changes it seems to have are in tests.  Was the default already false in code? ",
            "id": "comment-16064963"
        },
        {
            "date": "2017-06-27T21:21:28+0000",
            "author": "David Smiley",
            "content": "I've divided this into two patches to make this easier to review.  The test_files patch only has changes to files underneath any test-files dir (104 files), and these are universally solrconfig files.  The other handleSelect_false patch is everything else (47 files).  The core change is to SolrConfig.java which chooses the default value for handleSelect based on the luceneMatchVersion.\n\nThis took a long time because there were so many old tests (and some newer) that referred to request handlers using obsolete mechanisms.  I finally got through all the tests though.  org.apache.solr.client.solrj.impl.CloudSolrClientTest#stateVersionParamTest fails sometimes for me but this appears to be an ongoing issue and not related to this change.\n\nAnt precommit is nearly finished without issue..\n\nPing Anshum Gupta as you're the RM. ",
            "id": "comment-16065491"
        },
        {
            "date": "2017-06-27T22:32:33+0000",
            "author": "David Smiley",
            "content": "When I commit this, my tentative CHANGES.txt mods are:\n\nUpgrading ...\n*  <requestDispatcher handleSelect=\"...\"> now defaults to false when\n   luceneMatchVersion >= 7.0, thus ignoring \"qt\". Regardless, \"qt\" is still used as a SolrJ special\n  parameter that specifies the request handler (tail URL path) to use. If \n  you have request handlers without a leading '/', you can set handleSelect=\"true\"\n  or better yet consider migrating.\n\nOther changes ...\n* Changed <requestDispatcher handleSelect=\"...\"> to default to false, \n  thus ignoring \"qt\". Simplified configs to not refer to handleSelect or \"qt\". \n  Updated all configs and tests to assume this setting. Updated all configs \n  and tests to use SearchHandler instead of the old StandardRequestHandler.\n\n\n\nI could very easily simply remove StandardRequestHandler in 7.0 since I've already done the work of migrating almost all configs away from it in this issue.  It wasn't strictly required but I did since I was already updating configs to use /select which is the same config line.   I could reference this separately in \"Upgrading from ...\".  The last actual code reference I see is in SolrInfoBeanTest.  Opinions? ",
            "id": "comment-16065592"
        },
        {
            "date": "2017-06-28T13:09:22+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Great work David.\nPerhaps deprecate StandardRequestHandler now and remove in 8.0?\n\nI can only find one RefGuide mention of StandardRequestHandler, and that is in http://lucene.apache.org/solr/guide/6_6/the-dismax-query-parser.html ",
            "id": "comment-16066464"
        },
        {
            "date": "2017-06-28T15:04:51+0000",
            "author": "David Smiley",
            "content": "Thanks Jan.\n\nI updated the main patch to mark StandardRequestHandler deprecated.  I updated every reference to it everywhere except CHANGES.txt of course, including some adoc pages like the one you mentioned.  I also fixed some test references to \"standard\" that was not actually being used.\n\nI think it's ready. ",
            "id": "comment-16066640"
        },
        {
            "date": "2017-06-28T21:22:57+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 82a44beb3cbb685e4d30d55d06eb78f012afb93c in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=82a44be ]\n\nSOLR-6807: requestDispatcher/@handleSelect now defaults to false; stop using it.\nDeprecated StandardRequestHandler; stop using it. ",
            "id": "comment-16067249"
        },
        {
            "date": "2017-06-28T21:35:43+0000",
            "author": "David Smiley",
            "content": "Thanks for the input everyone!  It's good to get this one to bed finally.  Long overdue. ",
            "id": "comment-16067275"
        },
        {
            "date": "2017-06-29T00:42:20+0000",
            "author": "Steve Rowe",
            "content": "CloudSolrClientTest.stateVersionParamTest() is now failing 100% of the time for me for any seed starting with commit 82a44beb on this issue (according to git bisect).\n\nFor example, from Policeman Jenkins https://jenkins.thetaphi.de/job/Lucene-Solr-master-Windows/6687/:\n\n\nChecking out Revision c98e2a528f13a3a05f9d4899bff54c2f519e5fb5 (refs/remotes/origin/master)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=CloudSolrClientTest -Dtests.method=stateVersionParamTest -Dtests.seed=CCC1381BB50AABC0 -Dtests.slow=true -Dtests.locale=ff-CM -Dtests.timezone=Europe/Lisbon -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 0.06s J0 | CloudSolrClientTest.stateVersionParamTest <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: Expected an extra information from server with the list of invalid collection states\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([CCC1381BB50AABC0:69F835631E100149]:0)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.CloudSolrClientTest.stateVersionParamTest(CloudSolrClientTest.java:610)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [junit4]    > \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]    > \tat java.base/java.lang.reflect.Method.invoke(Method.java:564)\n\n ",
            "id": "comment-16067522"
        },
        {
            "date": "2017-06-29T03:01:56+0000",
            "author": "David Smiley",
            "content": "Ugh; thanks for checking Steve Rowe!  I guess I overlooked this failure; thinking it had gone away but I was wrong.\n\nThis appears to be a real bug.  Apparently the stateVer param checking was occurring in the block of code that processes handleSelect dispatch (/select?qt=...) which seems quite wrong to me.  In the attached patch I moved it out to the caller (and clarified the method name / docs internally) and am running all tests now.  Noble Paul I suspect you added this checking in (SOLR-7130?); could you take a look at this patch?  As I get a full test run I'll commit it to at least fix the build. ",
            "id": "comment-16067631"
        },
        {
            "date": "2017-06-29T03:44:12+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 811621c6ea63318fb593a08970e8652b2501af25 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=811621c ]\n\nSOLR-6807: fix stateVer param check to not depend on handleSelect setting ",
            "id": "comment-16067676"
        },
        {
            "date": "2017-06-29T15:01:38+0000",
            "author": "Noble Paul",
            "content": "I shall review this tomorrow ",
            "id": "comment-16068443"
        },
        {
            "date": "2017-06-30T04:50:15+0000",
            "author": "Noble Paul",
            "content": "David Smiley so, you moved the steversion check up? That change looks fine ",
            "id": "comment-16069475"
        },
        {
            "date": "2017-06-30T12:22:30+0000",
            "author": "David Smiley",
            "content": "Yes, pretty much.  I added this particular fix as a bug in CHANGES.txt.  It seems like a fairly minor bug (i.e. it's not essential if this checking even happens) but I don't know enough about this aspect of Solr to be sure. ",
            "id": "comment-16070006"
        }
    ]
}