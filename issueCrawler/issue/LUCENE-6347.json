{
    "id": "LUCENE-6347",
    "title": "MultiFieldQueryParser doesnt catch invalid syntax properly (due to user using regexpression syntax unwittingly)",
    "details": {
        "resolution": "Duplicate",
        "affect_versions": "4.1",
        "components": [
            "core/queryparser"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "MultiFieldQueryParser doesnt catch invalid syntax properly (due to user using regexpression syntax unwittingly)\n\n\n \nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.queryparser.classic.MultiFieldQueryParser;\nimport org.apache.lucene.queryparser.classic.ParseException;\nimport org.apache.lucene.queryparser.classic.QueryParser;\nimport org.apache.lucene.util.Version;\nimport org.junit.Test;\n\nimport static org.junit.Assert.assertNotNull;\nimport static org.junit.Assert.assertTrue;\n\n/**\n * Lucene tests\n */\npublic class LuceneRegExParseTest\n{\n\n    @Test\n    public void testSearch411LuceneBugReport() throws Exception\n    {\n        Exception e = null;\n        try\n        {\n            String[] fields = new String[2];\n            fields[0] = \"artist\";\n            fields[1] = \"recording\";\n\n            QueryParser qp = new MultiFieldQueryParser(Version.LUCENE_41, fields, new StandardAnalyzer(Version.LUCENE_41));\n            qp.parse(\"artist:pandora /reyli  recording:yo/Alguien\");\n        }\n        catch(Exception ex)\n        {\n            e=ex;\n        }\n        assertNotNull(e);\n        assertTrue(e instanceof ParseException );\n    }\n}\n\n\nWith assertions disabled this test fails as no exception is thrown.\nWith assertions enabled we get\n\n\njava.lang.AssertionError\n\tat org.apache.lucene.search.MultiTermQuery.<init>(MultiTermQuery.java:252)\n\tat org.apache.lucene.search.AutomatonQuery.<init>(AutomatonQuery.java:65)\n\tat org.apache.lucene.search.RegexpQuery.<init>(RegexpQuery.java:90)\n\tat org.apache.lucene.search.RegexpQuery.<init>(RegexpQuery.java:79)\n\tat org.apache.lucene.search.RegexpQuery.<init>(RegexpQuery.java:69)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.newRegexpQuery(QueryParserBase.java:790)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.getRegexpQuery(QueryParserBase.java:1005)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.handleBareTokenQuery(QueryParserBase.java:1075)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Term(QueryParser.java:359)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Clause(QueryParser.java:258)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Query(QueryParser.java:213)\n\tat org.apache.lucene.queryparser.classic.QueryParser.TopLevelQuery(QueryParser.java:171)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.parse(QueryParserBase.java:120)\n\tat org.musicbrainz.search.servlet.LuceneRegExParseTest.testSearch411LuceneBugReport(LuceneRegExParseTest.java:30)\n\nbut this should throw an exception without assertions enabled. Because no exception is thrown a search then faikls with the following stack trace\n\njava.lang.NullPointerException\nat java.util.TreeMap.getEntry(TreeMap.java:342)\nat java.util.TreeMap.get(TreeMap.java:273)\nat org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.terms(PerFieldPostingsFormat.java:215)\nat org.apache.lucene.search.TermCollectingRewrite.collectTerms(TermCollectingRewrite.java:58)\nat org.apache.lucene.search.ConstantScoreAutoRewrite.rewrite(ConstantScoreAutoRewrite.java:95)\nat org.apache.lucene.search.MultiTermQuery$ConstantScoreAutoRewrite.rewrite(MultiTermQuery.java:220)\nat org.apache.lucene.search.MultiTermQuery.rewrite(MultiTermQuery.java:286)\nat org.apache.lucene.search.BooleanQuery.rewrite(BooleanQuery.java:429)\nat org.apache.lucene.search.IndexSearcher.rewrite(IndexSearcher.java:616)\nat org.apache.lucene.search.IndexSearcher.createNormalizedWeight(IndexSearcher.java:663)\nat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:281)\nat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:269)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14352322",
            "author": "Michael McCandless",
            "date": "2015-03-08T22:47:39+0000",
            "content": "Hmm I tried to reproduce this on 4.10.x, and it would not repro.  So I tried on 4.1.0 and it still won't repro.  I just ran this javac and java command from lucene subdir of a 4.1.0 checkout:\n\n\nmike@haswell:/l/410/lucene$ javac -cp build/core/lucene-core-4.1-SNAPSHOT.jar:build/queryparser/lucene-queryparser-4.1-SNAPSHOT.jar:test-framework/lib/junit-4.10.jar:build/analysis/common/lucene-analyzers-common-4.1-SNAPSHOT.jar LuceneRegExParseTest.java ; java -cp .:build/core/lucene-core-4.1-SNAPSHOT.jar:build/queryparser/lucene-queryparser-4.1-SNAPSHOT.jar:test-framework/lib/junit-4.10.jar:build/analysis/common/lucene-analyzers-common-4.1-SNAPSHOT.jar org.junit.runner.JUnitCore LuceneRegExParseTest\n\n\n\nand I get this output:\n\n\nJUnit version 4.10\n.E\nTime: 0.039\nThere was 1 failure:\n1) testSearch411LuceneBugReport(LuceneRegExParseTest)\njava.lang.AssertionError\n\tat org.junit.Assert.fail(Assert.java:92)\n\tat org.junit.Assert.assertTrue(Assert.java:43)\n\tat org.junit.Assert.assertNotNull(Assert.java:526)\n\tat org.junit.Assert.assertNotNull(Assert.java:537)\n\tat LuceneRegExParseTest.testSearch411LuceneBugReport(LuceneRegExParseTest.java:34)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\n\n\nMeaning no exception was hit... "
        },
        {
            "id": "comment-14352707",
            "author": "Paul taylor",
            "date": "2015-03-09T09:14:18+0000",
            "content": "Yes, that is the problem, the QueryParser is not throwing an exception therefore an invalid Query object is returned and if passed to an actual search gives the TreeMap exception.\n\nQueryParser should be throwing ParseException "
        },
        {
            "id": "comment-14356912",
            "author": "Michael McCandless",
            "date": "2015-03-11T14:15:14+0000",
            "content": "Yes, that is the problem, the QueryParser is not throwing an exception therefore an invalid Query object is returned and if passed to an actual search gives the TreeMap exception.\n\nI'm confused: shouldn't the test have hit NullPointerException from MultiTermQuery ctor when the null field was passed?  (or the assert trip, in 4.1.0)\n\nOr does the NPE/assert only happen when you run the query?  If so, maybe fixup the test so it shows the NPE? "
        },
        {
            "id": "comment-14356998",
            "author": "Paul taylor",
            "date": "2015-03-11T15:13:51+0000",
            "content": "It only shows the NPE when you run the query, that was the initial problem (and I think covered by https://issues.apache.org/jira/browse/LUCENE-6345 ) . But the issue raised here shows that it is failing to throw a ParseException for an invalid query in the first place when it should, and that is what this issue is about. To me they are two different (albeit connected issues) that can be fixed independently. "
        },
        {
            "id": "comment-14357021",
            "author": "Michael McCandless",
            "date": "2015-03-11T15:24:00+0000",
            "content": "I'm confused: on the java-user thread, when you enabled assertions, you saw this:\n\n\njava.lang.AssertionError\n    at org.apache.lucene.search.MultiTermQuery.<init>(MultiTermQuery.java:252)\n    at org.apache.lucene.search.AutomatonQuery.<init>(AutomatonQuery.java:65)\n    at org.apache.lucene.search.RegexpQuery.<init>(RegexpQuery.java:90)\n    at org.apache.lucene.search.RegexpQuery.<init>(RegexpQuery.java:79)\n    at org.apache.lucene.search.RegexpQuery.<init>(RegexpQuery.java:69)\n    at org.apache.lucene.queryparser.classic.QueryParserBase.newRegexpQuery(QueryParserBase.java:790)\n    at org.apache.lucene.queryparser.classic.QueryParserBase.getRegexpQuery(QueryParserBase.java:1005)\n    at org.apache.lucene.queryparser.classic.QueryParserBase.handleBareTokenQuery(QueryParserBase.java:1075)\n    at org.apache.lucene.queryparser.classic.QueryParser.Term(QueryParser.java:359)\n    at org.apache.lucene.queryparser.classic.QueryParser.Clause(QueryParser.java:258)\n    at org.apache.lucene.queryparser.classic.QueryParser.Query(QueryParser.java:213)\n    at org.apache.lucene.queryparser.classic.QueryParser.TopLevelQuery(QueryParser.java:171)\n    at org.apache.lucene.queryparser.classic.QueryParserBase.parse(QueryParserBase.java:120)\n    at org.musicbrainz.search.servlet.AbstractSearchServer.parseQuery(AbstractSearchServer.java:208)\n\n\n\nI.e. the NPE/assert trip should have happened during parse, not when the query is executed?\n\nI do agree there are two separate issues here, but I don't understand why on 4.1.0 I cannot reproduce either with this test case. "
        },
        {
            "id": "comment-14357024",
            "author": "Michael McCandless",
            "date": "2015-03-11T15:25:28+0000",
            "content": "Also, what is wrong with the specified query?  Yes it's an accidental use of regexp query syntax, but shouldn't it just create a (strange) regexp query? "
        },
        {
            "id": "comment-14357032",
            "author": "Paul taylor",
            "date": "2015-03-11T15:32:56+0000",
            "content": "My understanding was that it is an invalid query, if it is not an invalid query why is there an assertion error when you enable assertions. That is the whole crux of this issue that a ParseException should be thrown and if it was that would prevent code trying to run search in the first place hence avoiding the NPE "
        },
        {
            "id": "comment-14357261",
            "author": "Michael McCandless",
            "date": "2015-03-11T17:39:45+0000",
            "content": "My understanding was that it is an invalid query, if it is not an invalid query why is there an assertion error when you enable assertions\n\nBut this query (test case) does not in fact trip an assert that you saw / posted on the user's list, at least as far as I could tell when I tried to repro. "
        },
        {
            "id": "comment-14358440",
            "author": "Paul taylor",
            "date": "2015-03-12T10:17:54+0000",
            "content": "Hm, Ive just retested it and with assertions enabled for me it does give the following assertion stack trace:\n\njava.lang.AssertionError\n\tat org.apache.lucene.search.MultiTermQuery.<init>(MultiTermQuery.java:252)\n\tat org.apache.lucene.search.AutomatonQuery.<init>(AutomatonQuery.java:65)\n\tat org.apache.lucene.search.RegexpQuery.<init>(RegexpQuery.java:90)\n\tat org.apache.lucene.search.RegexpQuery.<init>(RegexpQuery.java:79)\n\tat org.apache.lucene.search.RegexpQuery.<init>(RegexpQuery.java:69)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.newRegexpQuery(QueryParserBase.java:790)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.getRegexpQuery(QueryParserBase.java:1005)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.handleBareTokenQuery(QueryParserBase.java:1075)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Term(QueryParser.java:359)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Clause(QueryParser.java:258)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Query(QueryParser.java:213)\n\tat org.apache.lucene.queryparser.classic.QueryParser.TopLevelQuery(QueryParser.java:171)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.parse(QueryParserBase.java:120)\n\tat org.musicbrainz.search.servlet.LuceneRegExParseTest.testSearch411LuceneBugReport(LuceneRegExParseTest.java:31)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:157)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:134) "
        },
        {
            "id": "comment-14358669",
            "author": "Michael McCandless",
            "date": "2015-03-12T13:38:56+0000",
            "content": "Thanks Paul, indeed, now I can see the assert trip too!  Phew.  Sorry for the confusion... I'll dig. "
        },
        {
            "id": "comment-14358691",
            "author": "Michael McCandless",
            "date": "2015-03-12T13:54:40+0000",
            "content": "I dug into this, saw it wouldn't repro on 4.10.x but would on 4.1.x, and then hit http://jirasearch.mikemccandless.com and found the duplicate issue LUCENE-4878.  Thanks Paul! "
        }
    ]
}