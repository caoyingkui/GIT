{
    "id": "LUCENE-6695",
    "title": "BlendedTermQuery",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "New Feature"
    },
    "description": "It is sometimes desirable to ignore differences between index statistics of several terms so that they produce the same scores, for instance if you resolve synonyms at search time or if you want to search across several fields. Elasticsearch has been using this approach for its multi_match query for some time now.\n\nWe already blend statistics in TopTermsBlendedFreqScoringRewrite (used by FuzzyQuery) but it could be helpful to have a dedicated query to choose manually which terms to blend stats from.",
    "attachments": {
        "LUCENE-6695.patch": "https://issues.apache.org/jira/secure/attachment/12747005/LUCENE-6695.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14640302",
            "author": "Adrien Grand",
            "date": "2015-07-24T10:52:50+0000",
            "content": "Here is a patch: it computes the aggregated doc freq from several terms as the maximum doc freq, and the total term freq as the sum of the total term freqs of individual terms.\n\nI put the query in lucene/core so that TopTermsBlendedFreqScoringRewrite could reuse it and marked it as experimental, but if someone is not comfortable with it I can revert the changes to TopTermsBlendedFreqScoringRewrite and move this query to the sandbox. "
        },
        {
            "id": "comment-14640326",
            "author": "Uwe Schindler",
            "date": "2015-07-24T11:20:58+0000",
            "content": "Would it be not better to use IndexSearcher.rewrite() inside ComplexPhraseQueryParser? This one does the rewrite loop correctly, so we don't duplicate code: Query rewritten= new IndexSearcher(reader).rewrite(query);\n\nBut I like your funny for-loop \n\nOtherwise I am fine to have it in core (we have the logic already there, so your proposal to replace the fuzzy rewrite is fine). "
        },
        {
            "id": "comment-14640330",
            "author": "Adrien Grand",
            "date": "2015-07-24T11:23:55+0000",
            "content": "Thanks Uwe, I'll do that. Eventually I would like to remove this rewrite() method from the public API of Query, it should really be an implementation detail of createWeight! "
        },
        {
            "id": "comment-14640331",
            "author": "Adrien Grand",
            "date": "2015-07-24T11:27:17+0000",
            "content": "Updated patch to apply Uwe's suggestion.\n\nBy the way, the funny loop is the same in IndexSearcher.rewrite.  "
        },
        {
            "id": "comment-14640343",
            "author": "Uwe Schindler",
            "date": "2015-07-24T11:44:04+0000",
            "content": "Eventually I would like to remove this rewrite() method from the public API of Query, it should really be an implementation detail of createWeight!\n\nI would make rewrite() a protected method in Query and let the default impl of createWeight() call it. If a query does not implement createWeight (therefore, default impl is used), that one does the rewrite loop and calls createWeight on the final one. Currently createWeight throws UOE, this would also repair that. Of course default rewrite impl would need to be fixed (and rewrite should throw UOE by default). A query that implement createWeight, would not call rewrite.\n\nAlternatively add a \"RewriteableQuery\" with a final createWeight doing the loop) that has an abstract rewrite() method...\n\nBy that no \"consumer\" of the query would ever call rewrite, they just call createWeight() before execution.\n\n(this are just ideas, maybe let's create separate issue) "
        },
        {
            "id": "comment-14640353",
            "author": "Adrien Grand",
            "date": "2015-07-24T11:57:54+0000",
            "content": "I would make rewrite() a protected method\n\nI think we should do that. The only purpose of rewriting a query is to create a Weight, so we need to reduce the visibility of this method or remove it (trickier). Also I think it's very trappy today that createWeight is not functional unless you have a rewritten query.\n\nI think there are several issues with RewriteableQuery, for instance compound queries would not be able anymore to rewrite their inner queries, and also we have several queries that implement both rewrite() and createWeight(). "
        },
        {
            "id": "comment-14640364",
            "author": "Adrien Grand",
            "date": "2015-07-24T12:09:48+0000",
            "content": "Oops my bad, I thought we could still rewrite sub queries if the method was protected, but it would only work for queries defined in the oal.search package. "
        },
        {
            "id": "comment-14642497",
            "author": "ASF subversion and git services",
            "date": "2015-07-27T09:36:33+0000",
            "content": "Commit 1692848 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1692848 ]\n\nLUCENE-6695: Added BlendedTermQuery. "
        },
        {
            "id": "comment-14642555",
            "author": "ASF subversion and git services",
            "date": "2015-07-27T10:34:43+0000",
            "content": "Commit 1692864 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1692864 ]\n\nLUCENE-6695: Added BlendedTermQuery. "
        },
        {
            "id": "comment-14713316",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:24+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}