{
    "id": "SOLR-3015",
    "title": "QParserPlugins can not be SolrCoreAware",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "QParserPlugin cannot be made SolrCoreAware:\n\n\n    [junit] org.apache.solr.common.SolrException: Invalid 'Aware' object: org.apache.solr.mcf.ManifoldCFQParserPlugin@18941f7 -- org.apache.solr.util.plugin.SolrCoreAware must be an instance of: [org.apache.solr.request.SolrRequestHandler]\n[org.apache.solr.response.QueryResponseWriter] [org.apache.solr.handler.component.SearchComponent] [org.apache.solr.update.processor.UpdateRequestProcessorFactory] [org.apache.solr.handler.component.ShardHandlerFactory]",
    "attachments": {
        "SOLR-3015.patch": "https://issues.apache.org/jira/secure/attachment/12510130/SOLR-3015.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Karl Wright",
            "id": "comment-13183727",
            "date": "2012-01-11T00:07:34+0000",
            "content": "Finally had a moment to look at this.  The code (in org.apache.solr.core.SolrResourceLoader) explicitly excludes QParserPlugin-derived classes from being SolrCoreAware:\n\n\n  /**\n   * Keep a list of classes that are allowed to implement each 'Aware' interface\n   */\n  private static final Map<Class, Class[]> awareCompatibility;\n  static {\n    awareCompatibility = new HashMap<Class, Class[]>();\n    awareCompatibility.put( \n      SolrCoreAware.class, new Class[] {\n        SolrRequestHandler.class,\n        QueryResponseWriter.class,\n        SearchComponent.class,\n        UpdateRequestProcessorFactory.class\n      }\n    );\n\n    awareCompatibility.put(\n      ResourceLoaderAware.class, new Class[] {\n        CharFilterFactory.class,\n        TokenFilterFactory.class,\n        TokenizerFactory.class,\n        QParserPlugin.class,\n        FieldType.class\n      }\n    );\n  }\n\n  /**\n   * Utility function to throw an exception if the class is invalid\n   */\n  void assertAwareCompatibility( Class aware, Object obj )\n  {\n    Class[] valid = awareCompatibility.get( aware );\n    if( valid == null ) {\n      throw new SolrException( SolrException.ErrorCode.SERVER_ERROR,\n          \"Unknown Aware interface: \"+aware );\n    }\n    for( Class v : valid ) {\n      if( v.isInstance( obj ) ) {\n        return;\n      }\n    }\n    StringBuilder builder = new StringBuilder();\n    builder.append( \"Invalid 'Aware' object: \" ).append( obj );\n    builder.append( \" -- \").append( aware.getName() );\n    builder.append(  \" must be an instance of: \" );\n    for( Class v : valid ) {\n      builder.append( \"[\" ).append( v.getName() ).append( \"] \") ;\n    }\n    throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, builder.toString() );\n  }\n\n\n\nThere's no indication of why this should be.  I'm therefore going to experiment and see if the simple patch of including QParserPlugins in the SolrCoreAware list seems to work, and if so include a patch. "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13183742",
            "date": "2012-01-11T00:35:24+0000",
            "content": "Making it possible for a QParserPlugin to be SolrCoreAware seems to work fine.  But one other thing that happens that is a bit of a surprise is that TWO copies of the QParserPlugin class are created.  So I get two sets of resources allocated, and two freed.  This is for lucene/solr trunk; haven't tried this diagnostic for 3.x yet.  I was able to verify that SearchComponents behave in exactly the same way, though, so this is not related to QParserPlugins per se. "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13183745",
            "date": "2012-01-11T00:37:14+0000",
            "content": "Patch which allows QParserPlugins to be SolrCoreAware. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13183751",
            "date": "2012-01-11T00:47:36+0000",
            "content": "Karl: as i noted in the initial mailing list thread prior to this issue (which you did not seem to reply to) the concepts of \"CloseHook\" and \"SolrCoreAware\" are completely orthogonal \u2013 they have nothing to do with one another, and the fact that QParserPlugins can not currently be made SolrCoreAware does not mean that they can not use CloseHook...\n\nhttps://mail-archives.apache.org/mod_mbox/lucene-dev/201201.mbox/%3Calpine.DEB.2.00.1201030949590.10095@bester%3E\n\nI've updated issue summary & description to remove the refs to CloseHook, since the crux of the issue (based on your patch and stack trace) seems to be entirely about whether QParserPlugins should be allowed to be SolrCoreAware. "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13183752",
            "date": "2012-01-11T00:48:56+0000",
            "content": "Hmm, the following reference sort of indicates that the plugin class should only be instantiated once:\n\nhttp://wiki.apache.org/solr/SolrPlugins#Lifecycle\n\nI wonder if this is a bug? "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13183757",
            "date": "2012-01-11T00:55:11+0000",
            "content": "Hoss: Missed your reply earlier; the amount of stuff related to Solr is often too great to reasonably digest, and I think that my company's mail server also bounces stuff once in a while without letting me know.  But as far as this is concerned:\n\nthe concepts of \"CloseHook\" and \"SolrCoreAware\" are completely orthogonal \n\n... the best-practices document I found describes that as the preferred way to add a close hook, e.g.:\n\n\n  public void inform(SolrCore core)\n  {\n    core.addCloseHook(new CloseHandler());\n  }\n\n\n\nOtherwise how are you supposed to call addCloseHook()? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13183759",
            "date": "2012-01-11T00:57:37+0000",
            "content": "I wonder if this is a bug?\n\nit sounds distinct from this issue, so yes please file a bug.\n\nBTW: the backstory on why there are limitations on what can implement SolrCoreAware can all be found in SOLR-414 ... the crux of hte issue is that back when there was a SolrCore singleton, it was very easy to get into circular init refrence hell of plugins trying to do things with the SolrCore before it was fully initialized.  even now with the SolrCoreAware interface being called after all the plugins have been inited, we still have to watch out for the possibility that one type of plugin (like a RequestHandler) might attempt to use access another type of plugin (like a QParserPlugin) in it's own MyRequestHandler.inform(SolrCore) before the QParserPlugin.inform(SolrCore) method has been called.\n\nThere needs to be a really strong reason to add things to the SolrCoreAware list, because every interface we add is another dimensional increase in the risk of problems people might run into.\n "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13183770",
            "date": "2012-01-11T01:09:10+0000",
            "content": "Filed ticket SOLR-3027 for the plugin class duplication. "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13185458",
            "date": "2012-01-13T06:45:37+0000",
            "content": "The workaround, which Erik Hatcher gave me, uses the SolrCore object from the request object to set up the close hook.  Appropriate synchronizers required, of course.  While it's a shame that the SolrCoreAware interface is not workable as originally designed, the workaround is fine for my purposes.  So I'm going to close the ticket since clearly the committers believe the system is functioning as designed. "
        },
        {
            "author": "Ryan Josal",
            "id": "comment-14146798",
            "date": "2014-09-24T19:53:53+0000",
            "content": "I ran into a problem with this today.  I have a QParserPlugin that would like to get some info from the index at startup, but without having it SolrCoreAware, I can't getSolrConfig().getDataDir().  Having run into the circular init problem before in the past, I understand the motive to reduce risk of problems.  On a related note, I have a SearchComponent that wants to (but isn't allow to) be ResourceLoaderAware so it can load some data file from the config dir.  Interestingly, QParserPlugin CAN be ResourceLoaderAware.  At least with that one I can put the instanceDir in my config because that property is automatically populated, but I can't work around the data.dir problem that way because it is left blank.  My personal feeling is that it would be great if these artificial limitations could be safely lifted somehow. "
        }
    ]
}