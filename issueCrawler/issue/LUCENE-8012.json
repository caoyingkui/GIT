{
    "id": "LUCENE-8012",
    "title": "Improve Explanation class",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "master (8.0)"
        ]
    },
    "description": "Explanation class is currently nice and simple, and float matches the scoring api, but this does not work well for debugging numerical errors of internal calculations (it usually makes practical sense to use 64-bit double to avoid issues).\n\nAlso it makes for nasty formatting of integral values such as number of tokens in the collection or even document's length, its just noise to see 10.0 there instead of 10, and scientific notation for e.g. number of documents is just annoying. \n\nOne idea is to take Number instead of float? Then you could pass in the correct numeric type (int,long,double,float) for internal calculations, parameters, statistics, etc, and output would look nice.",
    "attachments": {
        "LUCENE-8012.patch": "https://issues.apache.org/jira/secure/attachment/12901909/LUCENE-8012.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16218331",
            "date": "2017-10-25T10:03:18+0000",
            "content": "+1 to take Number.  I tried converting things to use doubles as a followup to LUCENE-7741, but this then complicated things in the various Similarity implementations that use Explanation as a way of passing internal values around.  Using Number should tidy that up nicely. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16288985",
            "date": "2017-12-13T09:43:05+0000",
            "content": "There are a couple of options here.  Just changing Explanation to internally hold a Number, but keeping .getValue() signed as a float improves the String representation but doesn't really help with precision loss in internal calculations.  Changing .getValue() to return a Number is a pretty invasive change though.  Another option would be to add an addition .getNumberValue() method, which would allow Sims, etc, to ask for their required precision. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16289225",
            "date": "2017-12-13T13:04:22+0000",
            "content": " \nChanging .getValue() to return a Number is a pretty invasive change though. \n\nI don't think it is. I tried it out and it seems fine. Its what we need to do. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16289416",
            "date": "2017-12-13T15:47:08+0000",
            "content": "Here's a patch cutting everything over from float to Number, including .getValue() ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16289510",
            "date": "2017-12-13T16:45:34+0000",
            "content": "I like the change! Some suggestions:\n\n\tMaybe require that the value is non null in Explanation.match?\n\tIn tests, we should probably either use the Number directly for the comparision whenever possible, or when it is not convenient at least use the doubleValue() in order to make sure that the explanation returned exactly the same score and not a double that rounds to the same float as the score?\n\tWe should review all implementations of DoubleValuesSource.explain to make sure they return a Double and not a Float. For instance ConstantValuesSource still casts its value to a float.\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16289819",
            "date": "2017-12-13T20:22:11+0000",
            "content": "Updated patch:\n\n\tadded a null check to the Explanation constructor\n\tall DoubleValuesSource.explain() implementations now use doubles\n\ttests now use Number comparisons or .doubleValue() where possible\n\n\n\nThere are still quite a few places in tests that explicitly ask for floats, most of which are to do with checking scores, so I think it's OK to check against floatValue() there?  One place I haven't touched is CheckHits.verifyExplanation() - I ran into problems trying to convert this to check Number rather than float, due to things like DOUBLE(0) and FLOAT(0) comparing as different.\n\nWe should open a separate issue to add explain() to LongValuesSource and enforce .longValue() to be used there ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16307831",
            "date": "2018-01-02T10:19:00+0000",
            "content": "I'm +1 on merging, this is good progress already. We can deal with making CheckHits/CheckExplanations more picky in follow-up issues. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16307887",
            "date": "2018-01-02T11:07:11+0000",
            "content": "Commit c1030eeb74e7d5ef6dc36173add6e9da5da645fe in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c1030ee ]\n\nLUCENE-8012: Explanation takes Number rather than float ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16307889",
            "date": "2018-01-02T11:07:39+0000",
            "content": "Thanks for the review Adrien Grand ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16308084",
            "date": "2018-01-02T13:57:05+0000",
            "content": "Commit a56cb42fde41422c99108ff2749c29080bb94e36 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a56cb42 ]\n\nLUCENE-8012: LTR contrib needs to use float values in explanations ",
            "author": "ASF subversion and git services"
        }
    ]
}