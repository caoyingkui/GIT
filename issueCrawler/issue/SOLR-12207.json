{
    "id": "SOLR-12207",
    "title": "WildcardTypeImpl.getUpperBoundASTs AssertionError from SolrPluginUtils.invokeSetters",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "metrics"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.4",
            "master (8.0)"
        ],
        "affect_versions": "7.3",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "java.lang.AssertionError from SolrMetricManager.loadReporters, SolrPluginUtils.invokeSetters, sun.reflect.generics.reflectiveObjects.WildcardTypeImpl is encountered during local besting.  See stacktrace in comment.",
    "attachments": {
        "SOLR-12207.patch": "https://issues.apache.org/jira/secure/attachment/12918335/SOLR-12207.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-04-10T08:34:13+0000",
            "content": "\n[beaster]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSubQueryTransformerDistrib -Dtests.seed=A82E8066BDA80D45 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=sr-Latn-ME -Dtests.timezone=America/Edmonton -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n  [beaster] [10:29:58.739] ERROR   0.00s | TestSubQueryTransformerDistrib (suite) <<<\n  [beaster]    > Throwable #1: java.lang.Exception: Error starting up MiniSolrCloudCluster\n  [beaster]    > \tat __randomizedtesting.SeedInfo.seed([A82E8066BDA80D45]:0)\n  [beaster]    > \tat org.apache.solr.cloud.MiniSolrCloudCluster.checkForExceptions(MiniSolrCloudCluster.java:513)\n  [beaster]    > \tat org.apache.solr.cloud.MiniSolrCloudCluster.<init>(MiniSolrCloudCluster.java:251)\n  [beaster]    > \tat org.apache.solr.cloud.SolrCloudTestCase$Builder.configure(SolrCloudTestCase.java:190)\n  [beaster]    > \tat org.apache.solr.response.transform.TestSubQueryTransformerDistrib.setupCluster(TestSubQueryTransformerDistrib.java:71)\n....\n  [beaster]    > \tSuppressed: java.lang.AssertionError\n  [beaster]    > \t\tat sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.getUpperBoundASTs(WildcardTypeImpl.java:86)\n  [beaster]    > \t\tat sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.getUpperBounds(WildcardTypeImpl.java:122)\n  [beaster]    > \t\tat sun.reflect.generics.reflectiveObjects.WildcardTypeImpl.toString(WildcardTypeImpl.java:190)\n  [beaster]    > \t\tat java.lang.reflect.Type.getTypeName(Type.java:46)\n  [beaster]    > \t\tat sun.reflect.generics.reflectiveObjects.ParameterizedTypeImpl.toString(ParameterizedTypeImpl.java:234)\n  [beaster]    > \t\tat java.lang.reflect.Type.getTypeName(Type.java:46)\n  [beaster]    > \t\tat java.lang.reflect.Method.specificToGenericStringHeader(Method.java:421)\n  [beaster]    > \t\tat java.lang.reflect.Executable.sharedToGenericString(Executable.java:163)\n  [beaster]    > \t\tat java.lang.reflect.Method.toGenericString(Method.java:415)\n  [beaster]    > \t\tat java.beans.MethodRef.set(MethodRef.java:46)\n  [beaster]    > \t\tat java.beans.MethodDescriptor.setMethod(MethodDescriptor.java:117)\n  [beaster]    > \t\tat java.beans.MethodDescriptor.<init>(MethodDescriptor.java:72)\n  [beaster]    > \t\tat java.beans.MethodDescriptor.<init>(MethodDescriptor.java:56)\n  [beaster]    > \t\tat java.beans.Introspector.getTargetMethodInfo(Introspector.java:1205)\n  [beaster]    > \t\tat java.beans.Introspector.getBeanInfo(Introspector.java:426)\n  [beaster]    > \t\tat java.beans.Introspector.getBeanInfo(Introspector.java:173)\n  [beaster]    > \t\tat java.beans.Introspector.getBeanInfo(Introspector.java:260)\n  [beaster]    > \t\tat java.beans.Introspector.<init>(Introspector.java:407)\n  [beaster]    > \t\tat java.beans.Introspector.getBeanInfo(Introspector.java:173)\n  [beaster]    > \t\tat java.beans.Introspector.getBeanInfo(Introspector.java:260)\n  [beaster]    > \t\tat java.beans.Introspector.<init>(Introspector.java:407)\n  [beaster]    > \t\tat java.beans.Introspector.getBeanInfo(Introspector.java:173)\n  [beaster]    > \t\tat java.beans.Introspector.getBeanInfo(Introspector.java:260)\n  [beaster]    > \t\tat java.beans.Introspector.<init>(Introspector.java:407)\n  [beaster]    > \t\tat java.beans.Introspector.getBeanInfo(Introspector.java:173)\n  [beaster]    > \t\tat org.apache.solr.util.SolrPluginUtils.findSetter(SolrPluginUtils.java:1027)\n  [beaster]    > \t\tat org.apache.solr.util.SolrPluginUtils.invokeSetters(SolrPluginUtils.java:1011)\n  [beaster]    > \t\tat org.apache.solr.util.SolrPluginUtils.invokeSetters(SolrPluginUtils.java:1000)\n  [beaster]    > \t\tat org.apache.solr.metrics.SolrMetricReporter.init(SolrMetricReporter.java:61)\n  [beaster]    > \t\tat org.apache.solr.metrics.SolrMetricManager.loadReporter(SolrMetricManager.java:930)\n  [beaster]    > \t\tat org.apache.solr.metrics.SolrMetricManager.loadReporters(SolrMetricManager.java:866)\n  [beaster]    > \t\tat org.apache.solr.core.CoreContainer.load(CoreContainer.java:552)\n  [beaster]    > \t\tat org.apache.solr.servlet.SolrDispatchFilter.createCoreContainer(SolrDispatchFilter.java:268)\n  [beaster]    > \t\tat org.apache.solr.servlet.SolrDispatchFilter.init(SolrDispatchFilter.java:188)\n  [beaster]    > \t\tat org.eclipse.jetty.servlet.FilterHolder.initialize(FilterHolder.java:139)\n  [beaster]    > \t\tat org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:741)\n  [beaster]    > \t\tat org.eclipse.jetty.servlet.ServletHandler.updateMappings(ServletHandler.java:1474)\n  [beaster]    > \t\tat org.eclipse.jetty.servlet.ServletHandler.setFilterMappings(ServletHandler.java:1537)\n  [beaster]    > \t\tat org.eclipse.jetty.servlet.ServletHandler.addFilterMapping(ServletHandler.java:1183)\n  [beaster]    > \t\tat org.eclipse.jetty.servlet.ServletHandler.addFilterWithMapping(ServletHandler.java:1020)\n  [beaster]    > \t\tat org.eclipse.jetty.servlet.ServletContextHandler.addFilter(ServletContextHandler.java:447)\n  [beaster]    > \t\tat org.apache.solr.client.solrj.embedded.JettySolrRunner$1.lifeCycleStarted(JettySolrRunner.java:308)\n  [beaster]    > \t\tat org.eclipse.jetty.util.component.AbstractLifeCycle.setStarted(AbstractLifeCycle.java:179)\n  [beaster]    > \t\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:69)\n  [beaster]    > \t\tat org.apache.solr.client.solrj.embedded.JettySolrRunner.start(JettySolrRunner.java:396)\n  [beaster]    > \t\tat org.apache.solr.client.solrj.embedded.JettySolrRunner.start(JettySolrRunner.java:369)\n  [beaster]    > \t\tat org.apache.solr.cloud.MiniSolrCloudCluster.startJettySolrRunner(MiniSolrCloudCluster.java:391)\n  [beaster]    > \t\tat org.apache.solr.cloud.MiniSolrCloudCluster.lambda$new$0(MiniSolrCloudCluster.java:247)\n  [beaster]    > \t\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n  [beaster]    > \t\tat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$execute$0(ExecutorUtil.java:192)\n  [beaster]    > \t\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n  [beaster]    > \t\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n  [beaster]    > \t\t... 1 more\n\n ",
            "author": "Mikhail Khludnev",
            "id": "comment-16431927"
        },
        {
            "date": "2018-04-10T08:41:15+0000",
            "content": "MacOS\n$ java -version\njava version \"1.8.0_111\"\nJava(TM) SE Runtime Environment (build 1.8.0_111-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.111-b14, mixed mode ",
            "author": "Mikhail Khludnev",
            "id": "comment-16431933"
        },
        {
            "date": "2018-04-10T09:19:23+0000",
            "content": "Turns out it brings a lot of noise on CI. SOLR-12207.patch won't fix the issue, since SolrPluginUtils.invokeSetters() goes with lenient=false. Dawid Weiss, what about completely ignoring AssertionError at ivokeSetters() since it's a jdk bug?  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16431977"
        },
        {
            "date": "2018-04-10T10:18:40+0000",
            "content": "I'm not sure about ignoring AssertionError because, well, something went very wrong \u2013 don't know if the application can recover to a reasonable state. Andrzej Andrzej Bialecki  would be probably a more authoritative person to tell.  ",
            "author": "Dawid Weiss",
            "id": "comment-16432023"
        },
        {
            "date": "2018-04-10T10:39:03+0000",
            "content": "Catching this error just hides the bug and leaves the component possibly in a half-inited state. I think we should start by adding more info to the error message so that we at least learn what class / setter / args cause this error, which may help us to come up with a workaround.\n\n(Edit) To clarify, I think this type of error should be fatal and the core should fail to load because we can't guarantee the proper initialization of components. ",
            "author": "Andrzej Bialecki",
            "id": "comment-16432043"
        },
        {
            "date": "2018-04-10T10:51:47+0000",
            "content": "We (in our code) had it appear randomly out of the blue, unfortunately. It wasn't reproducible (looked like a race condition). ",
            "author": "Dawid Weiss",
            "id": "comment-16432053"
        },
        {
            "date": "2018-04-10T11:14:09+0000",
            "content": "I think we should start by adding more info to the error message so that we at least learn what class / setter / args cause this error, which may help us to come up with a workaround.\nOk. This is the only what SOLR-12207.patch does. Going forward with it?  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16432082"
        },
        {
            "date": "2018-04-10T11:22:19+0000",
            "content": "This is the only what SOLR-12207.patch does\nWell, it also ignores the assertion error when lenient == true, but the (undocumented  ) purpose of \"lenient\" was to only ignore non-fatal errors due to eg. missing or spurious config properties. However, this assertion error should be fatal because we can expect it leaves the component in half-baked state. ",
            "author": "Andrzej Bialecki",
            "id": "comment-16432090"
        },
        {
            "date": "2018-04-10T11:33:49+0000",
            "content": "Andrzej Bialecki , all right. Agree. Here we go SOLR-12207.patch. ",
            "author": "Mikhail Khludnev",
            "id": "comment-16432101"
        },
        {
            "date": "2018-04-10T11:35:31+0000",
            "content": "+1. ",
            "author": "Andrzej Bialecki",
            "id": "comment-16432104"
        },
        {
            "date": "2018-04-10T11:46:32+0000",
            "content": "Thanks, Andrzej Bialecki . But now I'm challenged with the question which section it should go in. Is it a Bug Fix or oh,no Other?  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16432120"
        },
        {
            "date": "2018-04-10T12:22:06+0000",
            "content": "SOLR-12207.patch is going to be a bug fix. Committing today.   ",
            "author": "Mikhail Khludnev",
            "id": "comment-16432178"
        },
        {
            "date": "2018-04-10T13:28:45+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n -1 \n  test4tests  \n   0m  0s \n  The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 58s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 53s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 53s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 53s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 53s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 53s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  42m 29s \n  core in the patch passed.  \n\n\n  \n   \n  46m  8s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12207 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12918375/SOLR-12207.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 3.13.0-88-generic #135-Ubuntu SMP Wed Jun 8 21:10:42 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / b65229c \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on April 8 2014 \n\n\n Default Java \n 1.8.0_152 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/48/testReport/ \n\n\n modules \n C: solr solr/core U: solr \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/48/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16432253"
        },
        {
            "date": "2018-04-10T18:06:38+0000",
            "content": "Commit 764dcc336b148700dbbb77d43183ef5ac889e320 in lucene-solr's branch refs/heads/master from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=764dcc3 ]\n\nSOLR-12207: rethowing AssertionError from jdk reflection bug ",
            "author": "ASF subversion and git services",
            "id": "comment-16432699"
        },
        {
            "date": "2018-04-10T18:08:29+0000",
            "content": "Commit f8f1e23b8fe6c105a7c7f1c1e76a49af382a0dd4 in lucene-solr's branch refs/heads/branch_7x from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f8f1e23 ]\n\nSOLR-12207: rethowing AssertionError from jdk reflection bug ",
            "author": "ASF subversion and git services",
            "id": "comment-16432703"
        }
    ]
}