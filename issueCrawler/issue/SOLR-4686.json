{
    "id": "SOLR-4686",
    "title": "HTMLStripCharFilter and Highlighter generates invalid HTML",
    "details": {
        "affect_versions": "4.1",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "highlighter"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Using the HTMLStripCharFilter may yield to an invalid HTML highlight.\n\nThe HTMLStripCharFilter has a special treatment of inline-elements (eg. \"a\", \"b\", ...). For theese elements the CharFilter ignores the tag and does not insert any split-character.\n\nIf you index\n\"\"\"\n<a>xxx</a>\n\"\"\"\nyou get the word \"xxx\" starting at position 3 ending on position 10 \n\nIf you highlight a search on \"xxx\", you will get\n\"\"\"\n<a><em>xxx</a></em>\n\"\"\"\nwhich is invalid HTML.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-13627153",
            "date": "2013-04-09T21:45:10+0000",
            "content": "Hi Holger,\n\nI wrote the latest version of HTMLStripCharFilter, and the behavior you describe is expected, though obviously not good.\n\nThe problem is that when a CharFilter replaces an input sequence with a differently-sized output sequence, it has to decide how to map the offsets back.  All of the CharFilter's I've looked at map the end offsets for smaller output sequences to the end offset of the larger input sequence.  I suppose a CharFilter could make different choices, though, as long as it did so consistently.\n\nHTMLStripCharFilter could change offset mappings for end tags to point at the offset of the beginning of the input sequence, while keeping offset mappings for start tags the same as they are now for all tags: at the offset of the end of the input sequence.  <a>xxx</a> would then be highlit as <a><em>xxx</em></a>.\n\nBut \"fixing\" this one issue won't solve the general problem.  An example: if HTMLStripCharFilter were to change offset mappings for end tags as described above, <b>x</b><i>xx</i> would still result in <b><em>x</b><i>xx</em></i>, which is problematic in a way that modifications to HTMLStripCharFilter can't fix.\n\nIt's worth noting that HTMLTidy can fix up your example, but doesn't properly handle my example - I tested with the cmdline version on OS X.\n\nMy surface reading of Highlighter and Formatter classes makes me think that there is no natural plugin point right now for an HTML-aware boundary insertion mechanism.  \n\nI suspect that the low complaint volume to date is as a result of the lenient HTML parsing browsers do; even though the output HTML is invalid, it (usually?) looks okay anyway. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13627191",
            "date": "2013-04-09T22:16:52+0000",
            "content": "I've read that the Jericho HTML parser, implemented in Java, reports tag offsets, unlike many other HTML parsers, and that could be useful in implementing the HTML-aware boundary insertion mechanism I mentioned earlier.   "
        },
        {
            "author": "Holger Floerke",
            "id": "comment-13627548",
            "date": "2013-04-10T06:56:19+0000",
            "content": "Hi Steve,\n\nthanks for your quick comments. \n\n\"\"\"\nMy surface reading of Highlighter and Formatter classes makes me think that there is no natural plugin point right now for an HTML-aware boundary insertion mechanism. \n\"\"\"\nAre you think, the highlighter/formatter has a problem, or the offsets of the HTMLStripCharFilter are the problem? This question may be philosophical, but in my opition the HTMLStripCharFilter is resposible to write the correct offsets. This isn't easy, because the filter has to \"understand\" the structure, modifying start-positions and end-positions in certain cases and so on, but I see problems are growing when more people are doing XHTML output with highlighter.\n\nIn my case, I use HTMLStripCharFilter to normalize XML-Input, therefor I would be happy about a switch \"do not treat inline elements\".  "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13628645",
            "date": "2013-04-11T03:54:00+0000",
            "content": "Are you think, the highlighter/formatter has a problem, or the offsets of the HTMLStripCharFilter are the problem? \n\nThe existing HTML formatters try to insert start and end tags without being aware of the structure into which they're inserting, and this is a problem when the existing intervening markup is not balanced.\n\nAs I mentioned in my previous comment, I think HTMLStripCharFilter could behave differently with end tags and improve output for your example, but I can think of examples where the current behavior works and changing it would make it worse, e.g. highlighting the phrase \"xxx yyy\", where the original markup is 'xxx <b>yyy</b>', which currently works well: '<em>xxx <b>yyy</b></em>', but would be imbalanced if end tag offsets were changed in the way I suggested: '<em>xxx <b>yyy</em></b>'.  So on balance, I'm disinclined to make any changes.\n\nIn my case, I use HTMLStripCharFilter to normalize XML-Input, therefor I would be happy about a switch \"do not treat inline elements\".\n\nHave you seen the XmlCharFilter on SOLR-2597 ? "
        },
        {
            "author": "Holger Floerke",
            "id": "comment-13628775",
            "date": "2013-04-11T08:52:39+0000",
            "content": "\"\"\"\nHave you seen the XmlCharFilter on SOLR-2597 ?\n\"\"\"\nNo, but this is a two year old bug report never reached a release...\n\nYou are right for phrase highlighting. I didn't think about that, this is a point where HTMLStripCharFilter (or XMLCharFilter) does not have any chance.\n\nRegarding to the high volume of unresolved bugs for solr, I would suggest to close this bug as \"won't change\". I will reopen it, if I have a good idea on this issue. "
        }
    ]
}