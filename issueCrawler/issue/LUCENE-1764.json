{
    "id": "LUCENE-1764",
    "title": "SampleComparable doesn't work well in contrib/remote tests",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "As discovered in LUCENE-1749, when using identical instances of a SortComparator you get multiple entries in the FieldCache.\n\ndemonstrating this bug currently requires the patches in LUCENE-1749.\n\nSee markmiller's comment here...\nhttps://issues.apache.org/jira/browse/LUCENE-1749?focusedCommentId=12735190#action_12735190",
    "attachments": {
        "LUCENE-1764.patch": "https://issues.apache.org/jira/secure/attachment/12415253/LUCENE-1764.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-07-28T21:16:31+0000",
            "content": "Note: i set this as \"fix in 2.9\" because it's not clear if this is a bug thta was newly introduced because of all the sorting changes in 2.9 (in which case we should fix it before release), or if it's always had this problem (in which case we can punt on it if no one has a fix) ",
            "author": "Hoss Man",
            "id": "comment-12736299"
        },
        {
            "date": "2009-07-28T21:24:53+0000",
            "content": "Bug was a bit strong I guess - resource hog trap? - you can sidestep this if you implement hashcode/equals on your SortComparator. We need a warning to do that I think.\n\nFor the unit test that fails, I've changed the equals/hashcode for the SortComparator to use:\n\n      //@Override\n      public int hashCode() \n{\n        return getClass().getName().hashCode();\n      }\n\n      //@Override\n      public boolean equals(Object other) \n{\n        return this.hashCode() == other.hashCode();\n      }\n\nWe have always had the issue, because the comparator has been part of the key, and when you pass a SortField over the wire, you get a new impl of the comparator factory field thats in it. ",
            "author": "Mark Miller",
            "id": "comment-12736307"
        },
        {
            "date": "2009-07-28T21:27:25+0000",
            "content": "I think this bug was there before. SortField has the problem that not only SortComparator, also custom parsers that are not singletons (serializable singletons using readResolve()!!!) or do not have equals/hashcode will create new cache entries each time, e.g. this one:\n\"new SortField(\"field\", new FieldCache.LongParser() \n{ ... }\n);\" creates a different parser instance each time and so a new cache entry is created (even in non-remote usage). This is noted in the docs. ",
            "author": "Uwe Schindler",
            "id": "comment-12736310"
        },
        {
            "date": "2009-07-28T23:16:08+0000",
            "content": "updated title/severity since there is no generic problem with SortComparators ... the issue is specifically with SampleCamparable. ",
            "author": "Hoss Man",
            "id": "comment-12736361"
        },
        {
            "date": "2009-07-28T23:17:19+0000",
            "content": "Committed revision 798726.\n\nhashcode/equals changes along what miller described. ",
            "author": "Hoss Man",
            "id": "comment-12736362"
        },
        {
            "date": "2009-07-28T23:19:47+0000",
            "content": "We prob want a javadoc warning of some kind too though right? Its not immediately obvious that when you switch to using remote, you better have implemented some form of equals/hashcode or you will have a memory leak.  ",
            "author": "Mark Miller",
            "id": "comment-12736363"
        },
        {
            "date": "2009-07-31T14:09:34+0000",
            "content": "I think we need to add warnings - so reopening ",
            "author": "Mark Miller",
            "id": "comment-12737531"
        },
        {
            "date": "2009-08-01T22:50:16+0000",
            "content": "Not very happy with it, but here is sort of a stub for the type of doc we need. ",
            "author": "Mark Miller",
            "id": "comment-12737963"
        }
    ]
}