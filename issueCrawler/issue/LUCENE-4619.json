{
    "id": "LUCENE-4619",
    "title": "Create a specialized path for facets counting",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "Mike and I have been discussing that on several issues (LUCENE-4600, LUCENE-4602) and on GTalk ... it looks like the current API abstractions may be responsible for some of the performance loss that we see, compared to specialized code.\n\nDuring our discussion, we've decided to target a specific use case - facets counting and work on it, top-to-bottom by reusing as much code as possible. Specifically, we'd like to implement a FacetsCollector/Accumulator which can do only counting (i.e. respects only CountFacetRequest), no sampling, partitions and complements. The API allows us to do so very cleanly, and in the context of that issue, we'd like to do the following:\n\n\n\tImplement a FacetsField which takes a TaxonomyWriter, FacetIndexingParams and CategoryPath (List, Iterable, whatever) and adds the needed information to both the taxonomy index as well as the search index.\n\t\n\t\tThat API is similar in nature to CategoryDocumentBuilder, only easier to consume \u2013 it's just another field that you add to the Document.\n\t\tWe'll have two extensions for it: PayloadFacetsField and DocValuesFacetsField, so that we can benchmark the two approaches. Eventually, one of them we believe, will be eliminated, and we'll remain w/ just one (hopefully the DV one).\n\t\n\t\n\n\n\n\n\tImplement either a FacetsAccumulator/Collector which takes a bunch of CountFacetRequests and returns the top-counts.\n\t\n\t\tAggregations are done in-collection, rather than post. Note that we have LUCENE-4600 open for exploring that. Either we finish this exploration here, or do it there. Just FYI that the issue exists.\n\t\tReuses the CategoryListIterator, IntDecoder and Aggregator code. I'll open a separate issue to explore improving that API to be bulk, and then we can decide if this specialized Collector should use those abstractions, or be really optimized for the facet counting case.\n\t\n\t\n\n\n\n\n\tAt the moment, this path will assume that a document holds multiple dimensions, but only one value from each (i.e. no Author/Shai, Author/Mike for a document), and therefore use OrdPolicy.NO_PARENTS.\n\t\n\t\tLater, we'd like to explore how to have this specialized path handle the ALL_PARENTS case too, as it shouldn't be so hard to do.",
    "attachments": {
        "LUCENE-4619.patch": "https://issues.apache.org/jira/secure/attachment/12560566/LUCENE-4619.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-12T13:54:04+0000",
            "content": "Attached starting patch with a PayloadFacetField, and a new\nTestDemoFacets using it.\n\nI think a simple-to-use field is easier for basic usage.  Ie user just\ndoes this:\n\n  doc.add(new PayloadFacetField(...));\n\n\ninstead of what must be done today:\n\n  CategoryDocumentBuilder docBuilder = new CategoryDocumentBuilder(...);\n  docBuilder.setCategoryPaths(...);\n  docBuilder.build(doc);\n\n  ",
            "author": "Michael McCandless",
            "id": "comment-13529955"
        },
        {
            "date": "2012-12-12T15:48:40+0000",
            "content": "Few comments:\n\n\n\tYou can remove TestDemoFacets from the patch? (since you committed it)\n\n\n\n\n\tDEFAULT_INDEXING_PARAMS is a good idea, but it can change (it's mutable). However, I plan to add freeze() to it in LUCENE-4621, so maybe update the nocommit to call freeze() on it?\n\n\n\n\n\tAdding the field more than once ... that's tricky. It will of course create multiple positions, but the entire code now assumes a single position for facets. Is there any way we can prevent it? I guess not. Maybe put a WARNING for now?\n\t\n\t\tIt should be ok to add it more than once, with different FIParams, e.g. different CLPs.\n\t\tI guess that's where CDB simplifies things?\n\t\n\t\n\n\n\n\n\tThe check that you do in the ctor:\n\t\n\t\tI think it can be simplified to just check FIP.getAllCLPs().size() != 1? If so, throw the exception\n\t\tAlso note that you have a typo in the exception msg\n\t\n\t\n\n\n\n\n\tThe rest of the code just freaks the hell out of me! \n\t\n\t\tI think that you need the stream because that's the only way to add the field with the drill-down term and fulltree posting.\n\t\tWould rather if that was simplified ... but I don't want to implement a different TokenStream, not sure there's much value in it.\n\t\tStill, maybe put a TODO (not nocommit) to check if it can be simplified?\n\t\n\t\n\n\n\n\n\tBTW, when I look at the test, adding the PayloadFacetField is super neat. I wonder if we simplified CDB to have less API, then all this would still be required. E.g.:\n\n\n\n\nList<CPath> categories; // you need to prepare that w/ PayloadFacetField too!\nDocument doc = new Document();\ncdb.addFields(doc, categories);\n\n\n\nIt's not a Field, but it works w/ multiple CLPs and all (basically the code today). Only you don't need to set the categories. It can also mask in the future the case where we put the fulltree under one field and the terms under another, or everything as a DV ... What do you think?\n\nSorry that I don't fix the patch myself, but I'm rather short on time now. I can do it later. I'm also going to tackle LUCENE-4621 now. ",
            "author": "Shai Erera",
            "id": "comment-13530049"
        },
        {
            "date": "2012-12-12T18:16:19+0000",
            "content": "You can remove TestDemoFacets from the patch? (since you committed it)\n\nWill do.\n\nDEFAULT_INDEXING_PARAMS is a good idea, but it can change (it's mutable). However, I plan to add freeze() to it in LUCENE-4621, so maybe update the nocommit to call freeze() on it?\n\nOK.\n\nAdding the field more than once ... that's tricky. It will of course create multiple positions, but the entire code now assumes a single position for facets. Is there any way we can prevent it? I guess not. Maybe put a WARNING for now?\n\nYeah I think a big warning in the javadocs is all we can do for now ... would be nice to somehow catch it but I can't think of a way now.\n\nSeparately this duality of dimension/field is sort of confusing.  Shouldn't I be adding FacetField(\"Author\") and FacetField(\"Publish Date\") to my Document?  Instead of a single FacetField taking these two \"dimensions\" as CategoryPaths... I know that's a major change but it's still confusing to my [somewhat] new eyes ...\n\n\nIt should be ok to add it more than once, with different FIParams, e.g. different CLPs.\nI guess that's where CDB simplifies things?\n\nRight ... I wouldn't say CDB simplifies things (for the \"basic\" usage).\n\n\nThe check that you do in the ctor:\nI think it can be simplified to just check FIP.getAllCLPs().size() != 1? If so, throw the exception\nAlso note that you have a typo in the exception msg\n\nOK good!  Hmm that's an Iterable ... and ... I don't really want to iterate over it if I'm iterating over the CPs anyway ... I think?  Or maybe we have it return a List instead?  Hmm but this call (in DefaultFIP) makes a new ArrayList every time ... we should just use Collections.singletonList here ... I'll fix that.  So what to do?\n\nThe rest of the code just freaks the hell out of me! \n\nLOL!!  Me too   Trying to figure out how to just get a byte[] out (so I can do the DocValuesFacetField) is not easy ...\n\nI think that you need the stream because that's the only way to add the field with the drill-down term and fulltree posting.\n\nOK.\n\nWould rather if that was simplified ... but I don't want to implement a different TokenStream, not sure there's much value in it.\n\nThis TokenStream somehow adds one position w/ the payload (with token \"fulltree\", if no partitioning I think?), and then provides more tokens so they are indexed for drilldown?\n\nStill, maybe put a TODO (not nocommit) to check if it can be simplified?\n\nOK will do.\n\n\nBTW, when I look at the test, adding the PayloadFacetField is super neat. I wonder if we simplified CDB to have less API, then all this would still be required. E.g.:\n\nList<CPath> categories; // you need to prepare that w/ PayloadFacetField too!\nDocument doc = new Document();\ncdb.addFields(doc, categories);\n\n\nIt's not a Field, but it works w/ multiple CLPs and all (basically the code today). Only you don't need to set the categories. It can also mask in the future the case where we put the fulltree under one field and the terms under another, or everything as a DV ... What do you think?\nI think that's a step in the right direction ... but I think a FacetField is even easier to consume?\n\nSorry that I don't fix the patch myself, but I'm rather short on time now. I can do it later. I'm also going to tackle LUCENE-4621 now.\n\nNo prob, I'll fix.\n\nI'm also working on hacked up DocValuesFacetField.  Wait til you see how I get the byte[] to feed to DV  ",
            "author": "Michael McCandless",
            "id": "comment-13530175"
        },
        {
            "date": "2012-12-12T18:25:53+0000",
            "content": "Let's leave the ctor for now, I'll make sure that FIP returns the right API in LUCENE-4621. Iterable is great, but I think that we can risk a List? .\n\nI thought about the FacetsField more. FacetsField is not really a field, right? You cannot set its FieldType (not critical) and any of Field's set()/get() methods are just in the way when you look at it. Also, it cannot actually create two fields (won't be needed hopefully w/ DV), and adding the same FacetsField twice w/ different categories will create multiple positions, which is something that I'm not sure we should introduce.\n\nSo maybe we improve CDB's API to make it more approachable? I.e., for reusing FacetsField you'd have to add setCPs to it? That's really like CDB. The only different that remains then is the ability to Document.add(new FacetsField) vs. CDB.addFields(Document).\n\nYou could do new FacetsField(\"Author\"), but that doesn't simplify a lot I think? I.e. you could still add the same field twice. And thinking about the faceted search apps that I wrote, I don't always know which facets I'm going to add. Sometimes I just get a list of CPs (read them from JSON, XML, programmatic API) and I add them all in one shot. Starting to break that into fields will be a mess.\n\nWhile we could always say \"let's add FacetsField for the common people and keep CDB for the crazy ones\", I prefer if there was one entry point. It's also easier down the line to make changes / fix bugs?\n\nAnd that that CDB is a Builder, lets you do iw.addDocument(cdb.addFields(new Document())), ain't that awesome !? \n\nI mean in the end of the day, CDB is not of type Field. But though FacetsField is, it's very limited and app has to excess more logic when dealing with it. Vs. CDB where you just call addFields(CPs, doc)? ",
            "author": "Shai Erera",
            "id": "comment-13530182"
        },
        {
            "date": "2012-12-12T18:52:47+0000",
            "content": "Maybe if we rename CDB to FacetsDocumentBuilder, move it to oal.document, make it a single method call for the user (FDB.addFields), that's good enough progress for the common case for now?\n\nI still don't like this field/dimension duality: it feels like the facet module is \"hiding\" what should be separate fields, within a single Lucene field.  If I need to store these fields (because I want to present them in the the UI), I'm already adding them as separate fields.\n\nI think doc.add(new FacetField(...)) is more intuitive than fdb.addFields(doc, ....) for a the common/basic use case... but at least improving CDB here would be progress.\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13530205"
        },
        {
            "date": "2012-12-12T20:44:39+0000",
            "content": "Throwing in a crazy idea.. can the facedIndexingParams be part of IndexWriterConfig? ",
            "author": "Gilad Barkai",
            "id": "comment-13530307"
        },
        {
            "date": "2012-12-12T21:28:53+0000",
            "content": "can the facedIndexingParams be part of IndexWriterConfig?\n\nI don't think so, b/c then core would depend on Facets? Also, IWC is for IW, and IW cannot handle facets itself. I.e., you need a TaxonomyWriter, CDB and friends to actually be able to use FIParams. ",
            "author": "Shai Erera",
            "id": "comment-13530351"
        },
        {
            "date": "2013-01-21T07:01:10+0000",
            "content": "Handled by LUCENE-4600. ",
            "author": "Shai Erera",
            "id": "comment-13558575"
        }
    ]
}