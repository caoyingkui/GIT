{
    "id": "SOLR-73",
    "title": "schema.xml and solrconfig.xml use CNET-internal class names",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "The configuration files in the example directory still use the old CNET-internal class names, like solr.LRUCache instead of org.apache.solr.search.LRUCache.  This is confusing to new users and should be fixed before the first release.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12454058",
            "date": "2006-11-28T18:18:27+0000",
            "content": "Those aren't CNET internal names ... the CNET internal packages were acctually things like \"solar.csearch.LRUCache\" ... Solr specificly provides support for the short alias \"solr.*\" when referencing out of the box classes ... this is mentioned in the wiki for SchemaXml (search for \"alias\") ... but we could probably add some boilerplate about it to the example docs as well.\n\nThe SolrConfigXml still refers to the old packagenames, and doesn't mention aliasing ... but that's listed as a big TODO right at the top of the page. "
        },
        {
            "author": "Walter Underwood",
            "id": "comment-12454066",
            "date": "2006-11-28T18:34:58+0000",
            "content": "The aliasing requires documentation and using the full class names doesn't. It seems much simpler to me to use the real class names. Less to maintain, less to test, less to explain.  "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12454103",
            "date": "2006-11-28T20:29:39+0000",
            "content": "What Walter said.  +1. "
        },
        {
            "author": "Bertrand Delacretaz",
            "id": "comment-12454108",
            "date": "2006-11-28T20:35:51+0000",
            "content": "I'm also for using real class names, aliases seem like too much magic to me. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12454132",
            "date": "2006-11-28T21:46:48+0000",
            "content": "Related topic: \nhttp://www.nabble.com/making-schema.xml-nicer-to-read-use-tf2148401.html#a5932524\n\nI'll buy long-names for implementations of things specified in solrconfig.xml\nAverage users aren't going to be switching classes in solrconfig.xml anyway.\n\nFor tokenizer/filter specifications in the schema, however, long class names for standard filters just makes it harder to read and forces more lines to wrap around while viewing.  Readability here is key, since people will be switching around and customizing the arguments to filters.\n\nWould it be better if we just left off the \"solr\" alias, so one could specify \"LowercaseFilter\" and get a LowercaseFilter? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12454142",
            "date": "2006-11-28T22:11:10+0000",
            "content": "The problem with eliminating the alias completley is that it could lead to confusion when people go to impliment their own classes and run into problems ... people are more likely to impliment their own Filters as packageless classes then they are to put them in a \"solr.*\" package ... so if someone says 'class=\"SynonymFilterFactory\"' expecting to use their own custom class that deals with Synonyms some special way, but they don't put their code into the classpath properly then they'd wind up getting the o.a.s.a.SynonymFilterFactory instead and not understand why it works, but doesn't work as they expect.\n\nI was a little weirded out by the aliasing when Yonik first pointed it out...\nhttp://www.nabble.com/Re%3A--Solr-Wiki--Update-of-%22AnalyzersTokenizersTokenFilters%22-by-YonikSeeley-tf1111051.html#a2909046\n\n...but he's right, it makes the configs a lot easier to read and deal with.\n\nWould people feel better if we had some sort of '<packageAlias alias=\"solr\">org.apache.solr.analysis</packageAlias>' type directives in both files so that it was less magic and more explicit? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12454153",
            "date": "2006-11-28T23:01:04+0000",
            "content": "Many solr users don't know Java, or have had very limited exposure to it.  Of those that do, the vast majority will chose to use Solr with no Java customizations.  The analyzer and field definitions in the schema is something everyone needs to edit, and hence my focus on readability (w/o too much lucene & java knowledge). "
        },
        {
            "author": "Walter Underwood",
            "id": "comment-12454159",
            "date": "2006-11-28T23:09:33+0000",
            "content": "I think the aliases are harder to read. You need to go elsewhere to figure them out. I read documentation, but I didn't find the part of the wiki that explained them and I had to ask the mailing list.\n\nThe javadoc uses the full class name. Google and Yahoo searches should work better with the full class name (Yahoo is working much better than Google for that right now).\n\nThe aliases save typing, but I don't think they improve usability. Full class names are simple and unambiguous.\n\nIf we want usability for non-programmers, we can't have them editing an XML file.  "
        },
        {
            "author": "Philip Jacob",
            "id": "comment-12454164",
            "date": "2006-11-28T23:17:06+0000",
            "content": "Fwiw, I agree with Walt and Bertrand here.  Full class names are less ambiguous.   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12454182",
            "date": "2006-11-28T23:39:32+0000",
            "content": "> Full class names are less ambiguous.\n\nBut what's the context that one needs to resolve the ambiguity?\nI'm not looking at the schema as a wire-up-the-java-classes type of IOC thing, but more like the configuration file for a user that needs to specify how they want things indexed.\n\n> If we want usability for non-programmers, we can't have them editing an XML file.\n\nWell designed XML can be editable by hand IMO.\nThat's all that we have until someone comes up with a schema-creation GUI.  Given the bugs and round-trip problems that XML creating GUIs always seem to have, I still prefer to go straight to the source. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12454189",
            "date": "2006-11-28T23:59:21+0000",
            "content": "I imagine  most users aren't putting together filters by looking up\njava class names, right?   They are looking at the existing filters in schema.xml and re-arranging them, or looking in the Wiki for the correct line to cut-n-paste to get it to do what they want.\n\nTo most users, it's just configuration, not class names. \nIt seems like there should be some easy way of saying \"lowercase these tokens\" other than giving the full name of the factory to create a tokenizer.  Why one needs to specify a Factory (like we need to now) seems harder to explain to someone else. "
        },
        {
            "author": "Walter Underwood",
            "id": "comment-12454190",
            "date": "2006-11-29T00:04:36+0000",
            "content": "The context required to resolve the ambiguity is a wiki page that I didn't know existed. Since I didn't know about it, I tried to figure it out by reading the code, and then by sending e-mail to the list. In my case, I was writing two tiny classes, but the issue would be the same if I was a non-programmer adding some simple plug-ins.\n\nWith a full class name, there is no ambiguity. Again, this saves typing at the cost of requiring an indirection through some unspecified documentation.\n\nI saw every customer support e-mail for eight years with Ultraseek, so I'm pretty familiar with the problems that search engine admins run into. \nOne of the things we learned was that documentation doesn't fix an unclear product. You fix the product instead of documenting how to understand it.\n\nRequiring users to edit an XML file is a separate issue, but I think it is a serious problem, especially because any error messages show up in the server logs.  "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12454196",
            "date": "2006-11-29T00:24:53+0000",
            "content": "Walter wrote:\n\n> The context required to resolve the ambiguity is a wiki page that I didn't know existed. Since I didn't know > about it, I tried to figure it out by reading the code, and then by sending e-mail to the list. In my case, I was > writing two tiny classes, but the issue would be the same if I was a non-programmer adding some simple > plug-ins. \n\nThe context could be changed to be a commented line in the file itself.  The more documentation we can put in-file, the easier these files will be to edit.  This is irrespective of the issue of full/abbreviated class names\n\n> With a full class name, there is no ambiguity. Again, this saves typing at the cost of requiring an indirection > through some unspecified documentation. \n\nIt is not ambiguous, it is just unfamiliar to people not conversant with solr.  Similarly, full class names would be unfamiliar to people unconversant with java.  The intricacies of schema.xml will be unfamiliar to people unconversant with lucene.  These are all different levels of knowledge, and it feels like this is being approached from a \"java developer\" perspective rather than a \"solr user\" perspective.\n\nThat said, it would be easy to include an example of both in the example solrconfig.xml\n\n> I saw every customer support e-mail for eight years with Ultraseek, so I'm pretty familiar with the problems > that search engine admins run into. \n> One of the things we learned was that documentation doesn't fix an unclear product. You fix the product > > instead of documenting how to understand it. \n\nThat seems like an over-simplified view of the situation.  Surely that is impractical most of the time.\n\n> Requiring users to edit an XML file is a separate issue, but I think it is a serious problem, especially > > > > because any error messages show up in the server logs. \n\nEditing xml files is an absolute requirement for using Solr today, and I'm not uncomfortable with that.  I think that making Solr completely usable for non-techies is a goal perhaps more suited to a utility or tool built on top of Solr.  That said, we shouldn't make life difficult for such users if we can help it "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12454198",
            "date": "2006-11-29T00:29:21+0000",
            "content": "\n> but the issue would be the same if I was a non-programmer adding some simple plug-ins. \n\nIf you were a non-programmer why would you care about the package name? ... it would just be a string, and the place you found out about the plugin (be it a sample config, or a wiki, or some third party sourceforge project cranking out Solr Filters) would have give you the schema.xml snippet you would need to use that plugin ... you wouldn't care if it was net.sourceforge.solrextras.CoolExtraFilterFactory or solr.CoolBuiltInFactory ... you only felt like there was ambiguity because as a Java programmer you recognized a Java classname but you didn't recognize what you expected to be the java package name...  right?\n\nI agree with the sentiment that having good documentation for a crappy product doesn't make the product better \u2013 but I don't exactly think that's the situation we are in ... we're talking about a good product (in my opinion) with a lot of usefull little features that make it easier to use (like this package aliasing) that aren't documented well \u2013 we shouldn't yank a feature just because it would make the product easier to understand if it would also make the product harder to use.\n\nIf eliminating the ambiguity is the primary concern, we could do that by saying that all \"class\" refrences in the configs map to a single package name, so <filterCache class=\"XXX\"> unambiguiously refers to org.apache.solr.plugin.XXX and <filter class=\"YYY\"> unambiguisly refers to org.apache.solr.plugin.YYY ... which would eliminate the ambiguity, and make the configs very easy to read for non programmers, at the expense of constraining plugin developers \u2013 but i don't think many people would argue that it would make Solr \"better\"\n\n\nI still view this as an issue of documentation \u2013 we really have no \"official\" documentation on configuring Solr, all we have is some examples and some wiki pages \u2013 our only official documentation is the tutorial.  But if people really don't believe that this is a usefull feature that just happens to be lacking documentation, my next choice would be to change the feature to make it more explicitly controlled \u2013 not remove it completely.\n "
        },
        {
            "author": "J.J. Larrea",
            "id": "comment-12455539",
            "date": "2006-12-05T08:08:20+0000",
            "content": "As a user who is both modifying schema.xml and adding custom classes, I'm with Yonik and Hoss on this one \u2013 the class path aliases make life simpler rather than more difficult.  However i also think they can be improved.\n\nI strongly support Hoss' suggestion to make the mappings explicit rather than implicit:\n\n> Would people feel better if we had some sort of '<packageAlias alias=\"solr\">org.apache.solr.analysis</packageAlias>' \n> type directives in both files so that it was less magic and more explicit?\n\nExplicit directives make the xml config files internally self-documenting, and allow for class repositories other than org.apache.solr.analysis;  I'd suggest the element name be 'package' rather than 'packageAlias' so that other attributes could be applied to the package, e.g. custom classloader, base URL for remote loading, etc.\n\nAnother change that might be considered would be replacing the dot notation for aliases with a namespace-like notation in order to remove any ambiguity over which class is actually being loaded, especially when there is a multi-level path from the aliased root. Thus:\n\n<package alias=\"solr\">org.apache.solr</package>\n<package alias=\"analyzers\">org.apache.solr.analysis</package>\n\nwould resolve either \"solr:analysis.SynonymFilter\" or \"analyzers:SynonymFilter\" to  org.apache.solr.analysis.SynonymFilter, and of course  \"solr:search.LRUCache\" to org.apache.solr.search.LRUCache\n\nDo the objectors to solr.* aliases think that would resolve the problematic aspects of aliasing, while still benefitting users by simplifying config files? "
        },
        {
            "author": "Walter Underwood",
            "id": "comment-12455684",
            "date": "2006-12-05T16:21:31+0000",
            "content": "Remember, this bug is only about removing aliased names from the sample files.\n\nNote that the users in favor of having a alias-free sample files are all new to Solr. The people in favor of keeping them are generally long-time Solr users or developers. From a new user point of view, they are confusing.\n\nAdding explicit alias definitions is a separate issue.\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12456169",
            "date": "2006-12-06T19:17:01+0000",
            "content": "\nAs you said Walter: documentation doesn't fix an unclear product ... if Solr supports using package aliasing in it's configs, but we don't use package aliasing in the sample configs that people will copy to make their own configs, people may never realize it's an option, and be very confused when discussions on the mailing list (or in wiki documentation) use the aliases \u2013 the sample configuration files should demonstrate every possible directive that can appear in those files, unless there is some directive that is directly contradictory to a more usefull directive allready there \u2013 in which case it should still be there but should be commented out.\n\nThe sample configs are the one thing we can be certain people will have to look at when using Solr for the first time, so it's our best opportunity to document what is possible.\n\nWe shouldn't remove the aliases from the sample files unless we remove aliasing from Solr alltogether "
        },
        {
            "author": "Andy Blower",
            "id": "comment-12564030",
            "date": "2008-01-30T14:23:43+0000",
            "content": "I'd just like to comment in reply to Walter. I'm a new SOLR user of three weeks, although I'm an experienced java developer, and I really like the shorthand aliases. I found it pretty clear that they were simply shorthand for the common packages and that full package names would be required for other non-core packages.\n\nAlso, should this issue be closed after such a long time? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12621021",
            "date": "2008-08-08T19:28:38+0000",
            "content": "I don't recall seeing any confusion about this on Solr's mailing lists over the years.  I'll close this shortly. "
        }
    ]
}