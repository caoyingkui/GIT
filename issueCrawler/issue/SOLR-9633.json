{
    "id": "SOLR-9633",
    "title": "Limit FastLRUCache by RAM Usage",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "SOLR-7372 added a maxRamMB parameter to LRUCache to evict items based on memory usage. That helps with the query result cache but not with the filter cache which defaults to FastLRUCache. This issue intends to add the same feature to FastLRUCache.",
    "attachments": {
        "SOLR-9633.patch": "https://issues.apache.org/jira/secure/attachment/12832896/SOLR-9633.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-12T14:23:09+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "First cut. This is slightly different than the impl for LRUCache because it completely ignores sizes when maxRamMB is specified. (We should probably throw an exception in that case than ignoring). Also the eviction logic is not as optimized as the one for the size based policy. ",
            "id": "comment-15568861"
        },
        {
            "date": "2016-10-14T18:24:55+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "FYI Yonik Seeley ",
            "id": "comment-15576099"
        },
        {
            "date": "2016-11-04T16:31:03+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Yonik Seeley - do you mind taking a look at this? Is the simple ram size based eviction logic fine or do we need to implement something fancier as we have for size based eviction? ",
            "id": "comment-15636910"
        },
        {
            "date": "2016-11-06T21:00:13+0000",
            "author": "Yonik Seeley",
            "content": "Taking a look... ",
            "id": "comment-15642398"
        },
        {
            "date": "2016-11-06T21:10:30+0000",
            "author": "Yonik Seeley",
            "content": "Can you explain what logic changes are in markAndSweepByCacheSize()?  It's hard to tell looking at the diff (lots of indent changes... not sure about other changes). ",
            "id": "comment-15642418"
        },
        {
            "date": "2016-11-07T04:42:53+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "The size based eviction logic in markAndSweep method is moved to markAndSweepByCacheSize \u2013 there are no logic changes when only item size is used for eviction. But if maxRamMB is configured then we use the markAndSweepByRamSize method which evicts by making two passes over the cache and a sort. After these changes, the FastLRUCache behaves differently than LRUCache. Instead of supporting both size and maxRamMB and evicting based on both limits, the FastLRUCache supports either size or maxRamMB but not both. This is also because I couldn't figure out a way to evict by ram as efficiently as we do today by size.\n\nWe could support both size and ram together by evicting by size first and then fall back to the expensive two pass eviction based on ram.  ",
            "id": "comment-15643091"
        },
        {
            "date": "2016-11-07T19:30:17+0000",
            "author": "Yonik Seeley",
            "content": "OK, thanks for the explanation.  That's clearer after I apply the patch too.\nThings look good... I think the only minor change I'd make is to wrap the other update to ramBytes in the put() method with the \"ramUpperWatermark != Long.MAX_VALUE\" check as you did in other places. ",
            "id": "comment-15645182"
        },
        {
            "date": "2016-11-10T18:13:57+0000",
            "author": "Michael Sun",
            "content": "The patch looks good to me. One suggestion is to add comments that RAM limit feature only works well when the value in cache is an Accountable, such as filter cache whose value is a DocSet, which is an Accountable. In case user want to use FastLRUCache for other cache, user need to make sure the type of value is Accountable.\n\nAnother minor general suggestion is to use PriorityQueue in markAndSweepByRamSize(), instead of Collection.sort(). It probably doesn't make big difference since most cache size is less than 1000 though. ",
            "id": "comment-15654731"
        },
        {
            "date": "2016-11-14T17:12:53+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Yonik and Michael for the reviews. This patch wrap all updates to ramBytes in the put() method with the check as requested. I'll commit shortly.\n\nMichael, to your comment on this working only with Accountable, the example configurations specify this parameter only for filterCache so I feel it is unlikely that users will try to use FastLRUCache with maxRamMB for something else. But I'll make sure to include this point in the reference guide when documenting this feature. ",
            "id": "comment-15664435"
        },
        {
            "date": "2016-11-15T05:36:10+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I put SOLR-9366 instead of SOLR-9633 in the commit message by mistake. The commit messages are:\n\nCommit 487b0976eb3e98b78ab492f4969a2aa0373b626f in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=487b097 ]\n\nSOLR-9366: Limit memory consumed by FastLRUCache with a new 'maxRamMB' config parameter\n\n\n\n\nCommit 53dad4f0d1c8f563810626ef9ab470fb3e5d1da9 in lucene-solr's branch refs/heads/branch_6x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=53dad4f ]\n\nSOLR-9366: Limit memory consumed by FastLRUCache with a new 'maxRamMB' config parameter\n(cherry picked from commit 487b097)\n\n ",
            "id": "comment-15666161"
        },
        {
            "date": "2016-11-15T05:37:29+0000",
            "author": "ASF subversion and git services",
            "content": "Commit b57a5e41f82418621d8ac7e42edf0cd08dcee6be in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b57a5e4 ]\n\nSOLR-9633: Fix issue number in CHANGES.txt ",
            "id": "comment-15666163"
        },
        {
            "date": "2016-11-15T05:37:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d3420c31a92180653b767850e82f55ec3d20fda2 in lucene-solr's branch refs/heads/branch_6x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d3420c3 ]\n\nSOLR-9633: Fix issue number in CHANGES.txt\n\n(cherry picked from commit b57a5e4) ",
            "id": "comment-15666166"
        },
        {
            "date": "2016-11-15T05:38:40+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Yonik and Michael! ",
            "id": "comment-15666168"
        }
    ]
}