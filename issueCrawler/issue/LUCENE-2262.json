{
    "id": "LUCENE-2262",
    "title": "QueryParser should now allow leading '?' wildcards",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "QueryParser currently throws an exception if a wildcard term begins with the '?' operator.\n\nThe current documentation describes why this is:\n\nWhen set, * or ? are allowed as the first character of a PrefixQuery and WildcardQuery.\nNote that this can produce very slow queries on big indexes. \n\n\n\nIn the flexible indexing branch, wildcard queries with leading '?' operator are no longer slow on big indexes (they do not enumerate terms in linear fashion).\nThus, it no longer makes sense to throw a ParseException for a leading '?'\n\nSo, users should be able to perform a query of \"?foo\" and no longer get a ParseException from the QueryParser.\n\nFor the flexible indexing branch, wildcard queries of  'foo?', '?foo', 'f?oo', etc are all the same from a performance perspective.",
    "attachments": {
        "LUCENE-2262_backwards.patch": "https://issues.apache.org/jira/secure/attachment/12435781/LUCENE-2262_backwards.patch",
        "LUCENE-2262.patch": "https://issues.apache.org/jira/secure/attachment/12435780/LUCENE-2262.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-02-13T19:33:30+0000",
            "content": "initial patch:\n\n\tdoesnt throw the exception for leading ? when matchVersion >= 3.1\n\tcontrib's queryparser doesnt use Version, so i simply change AllowLeadingWildcardProcessor\n\tthe backwards tests will fail because LUCENE-2248: TestQueryParser uses LUCENE_CURRENT when it should really be using some constant that resolves to LUCENE_30: we can fix the test to use LUCENE_30 instead of LUCENE_CURRENT\n\n ",
            "author": "Robert Muir",
            "id": "comment-12833442"
        },
        {
            "date": "2010-02-13T19:34:31+0000",
            "content": "patch for the backwards tests (not the best I admit, but uwe has fixed this in general for the future) ",
            "author": "Robert Muir",
            "id": "comment-12833443"
        },
        {
            "date": "2010-02-14T00:31:27+0000",
            "content": "It doesn't seem like this type of bug is not one that people would rely on (throwing an exception for ? but not for *), hence we should just fix and not make it conditional on matchVersion? ",
            "author": "Yonik Seeley",
            "id": "comment-12833481"
        },
        {
            "date": "2010-02-14T01:16:56+0000",
            "content": "It doesn't seem like this type of bug is not one that people would rely on (throwing an exception for ? but not for *\n\nyonik, that's not what this issue is about. have you looked at the patch? ",
            "author": "Robert Muir",
            "id": "comment-12833485"
        },
        {
            "date": "2010-02-14T01:52:49+0000",
            "content": "btw Yonik, in my opinion disallowing these queries with leading wildcards, be it * or ? or whatever, is rather silly, since we allow even slower fuzzyqueries by default.\nso another option would be to do away with this 'setAllowLeadingWildcard' stuff alltogether, and if you want to disallow something, extend QueryParser yourself and throw ParseException yourself. I would actually prefer this.\n\ni do think we should provide back compat to duplicate the previous behavior, its perfectly reasonable that someone would have special handling for these leading wildcards (e.g. Solr does).\n\nbut this issue is simply about the fact that in flex branch, leading ? is now fast, so there is no excuse to disallow it anymore, hence we should relax the queryparser to only throw a fit on leading * ",
            "author": "Robert Muir",
            "id": "comment-12833488"
        },
        {
            "date": "2010-02-14T03:01:06+0000",
            "content": "yonik, that's not what this issue is about. have you looked at the patch?\n\nNope, I was going by the comments. Looks like I misinterpreted them.  Sorry.\n\nAs an aside: In solr-land I encourage adding API examples, etc, to lower the bar for giving feedback (i.e. they don't have to read the patch to give an opinion on what the syntax of a new request should look like).  That's not a criticism of your description (which was fine) but rather the implication that I should have read the patch (and I may have misread that too).\n\nin my opinion disallowing these queries with leading wildcards, be it * or ? or whatever, is rather silly, since we allow even slower fuzzyqueries by default.\n\nAgree. ",
            "author": "Yonik Seeley",
            "id": "comment-12833493"
        },
        {
            "date": "2010-02-14T03:16:58+0000",
            "content": "update description to be less terse ",
            "author": "Robert Muir",
            "id": "comment-12833494"
        },
        {
            "date": "2010-02-14T03:22:20+0000",
            "content": "in my opinion disallowing these queries with leading wildcards, be it * or ? or whatever, is rather silly, since we allow even slower fuzzyqueries by default.\n\nAgree.\n\nWhat do you think, should we skip this step then and simply deprecate the entire setAllowLeadingWildcard concept all together, setting it to true for Version >= 3.1?\n\nThe only concern I have is that doing this might mislead someone into thinking leading * is no longer slow, which it still is (its faster than 3.0 but the computational complexity is still the same, unlike ?). Here is a comparison of 3.0 and trunk, on 10M terms, from the LUCENE-1606 benchmark:\n\n\n\n\nPattern\nAvg query time (ms) Lucene 3.0\nAvg query time (ms) Flex\n\n\n?NNNNNN\n2408.5\n28.8\n\n\n*NNNNNN\n3258.3\n1048.0\n\n\n\n ",
            "author": "Robert Muir",
            "id": "comment-12833496"
        },
        {
            "date": "2013-07-23T18:44:27+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716953"
        },
        {
            "date": "2014-04-16T12:54:51+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970906"
        }
    ]
}