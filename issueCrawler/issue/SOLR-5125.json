{
    "id": "SOLR-5125",
    "title": "Distributed MoreLikeThis fails with NullPointerException, shard query gives EarlyTerminatingCollectorException",
    "details": {
        "affect_versions": "4.4",
        "status": "Closed",
        "fix_versions": [
            "4.6"
        ],
        "components": [
            "MoreLikeThis"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "A distributed MoreLikeThis query that works perfectly on 4.2.1 is failing on 4.4.0.  The original query returns a NullPointerException.  The Solr log shows that the shard queries are throwing EarlyTerminatingCollectorException.  Full details to follow in the comments.",
    "attachments": {
        "SOLR-5125.patch": "https://issues.apache.org/jira/secure/attachment/12598559/SOLR-5125.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13733816",
            "date": "2013-08-08T18:35:31+0000",
            "content": "The query that works fine in 4.2.1 has the following URL:\n\n/solr/ncmain/ncdismax?q=tag_id:ugphotos000996&mlt=true&mlt.fl=catchall&mlt.count=100\n\nThe ncmain handler has the shards parameter in solrconfig.xml and is set up for edismax. The shards.qt parameter is /search, a handler using the default query parser.  On 4.2.1, it had a QTime of 49641, a performance issue that I mentioned on the mailing list and will be pursuing there.  Here's a server log excerpt, showing a shard request, the shard exception, the original query, and the final exception.\n\n\nINFO  - 2013-08-08 12:18:20.030; org.apache.solr.core.SolrCore; [s3live] webapp=/solr path=/search params={mlt.fl=catchall&sort=score+desc&tie=0.1&shards.qt=/search&mlt.dist.id=ugphotos000996&mlt=true&q.alt=*:*&distrib=false&shards.tolerant=true&version=2&NOW=1375985885078&shard.url=bigindy5.REDACTED.com:8982/solr/s3live&df=catchall&fl=score,tag_id&qs=3&qt=/search&lowercaseOperators=false&mm=100%25&qf=catchall&wt=javabin&rows=100&defType=edismax&pf=catchall^2&mlt.count=100&start=0&q=%2B(catchall:arabian+catchall:close-up+catchall:horse+catchall:closeup+catchall:close+catchall:white+catchall:up+catchall:sassy+catchall:154+catchall:equestrian+catchall:domestic+catchall:animals+catchall:of)+-tag_id:ugphotos000996&shards.info=true&boost=min(recip(abs(ms(NOW/HOUR,pd)),1.92901e-10,1.5,1.5),0.85)&isShard=true&ps=3} 6815483 status=500 QTime=14639\nERROR - 2013-08-08 12:18:20.030; org.apache.solr.common.SolrException; null:org.apache.solr.search.EarlyTerminatingCollectorException\n        at org.apache.solr.search.EarlyTerminatingCollector.collect(EarlyTerminatingCollector.java:62)\n        at org.apache.lucene.search.BooleanScorer2.score(BooleanScorer2.java:289)\n        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:624)\n        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:297)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1494)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1363)\n        at org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:474)\n        at org.apache.solr.search.SolrIndexSearcher.getDocList(SolrIndexSearcher.java:1226)\n        at org.apache.solr.handler.MoreLikeThisHandler$MoreLikeThisHelper.getMoreLikeThis(MoreLikeThisHandler.java:365)\n        at org.apache.solr.handler.component.MoreLikeThisComponent.getMoreLikeThese(MoreLikeThisComponent.java:356)\n        at org.apache.solr.handler.component.MoreLikeThisComponent.process(MoreLikeThisComponent.java:107)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:208)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1904)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:659)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:362)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:158)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1307)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:453)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:560)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1072)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:382)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1006)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n        at org.eclipse.jetty.server.Server.handle(Server.java:365)\n        at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:485)\n        at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:937)\n        at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:998)\n        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:856)\n        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)\n        at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)\n        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)\n        at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n        at java.lang.Thread.run(Thread.java:722)\n\nINFO  - 2013-08-08 12:18:20.225; org.apache.solr.core.SolrCore; [ncmain] webapp=/solr path=/ncdismax params={mlt.count=100&mlt.fl=catchall&q=tag_id:ugphotos000996&mlt=true} hits=1 status=500 QTime=15147\nERROR - 2013-08-08 12:18:20.226; org.apache.solr.common.SolrException; null:java.lang.NullPointerException\n        at org.apache.solr.handler.component.MoreLikeThisComponent.handleResponses(MoreLikeThisComponent.java:143)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:311)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1904)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:659)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:362)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:158)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1307)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:453)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:560)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1072)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:382)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1006)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n        at org.eclipse.jetty.server.Server.handle(Server.java:365)\n        at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:485)\n        at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:926)\n        at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:988)\n        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:635)\n        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)\n        at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)\n        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)\n        at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n        at java.lang.Thread.run(Thread.java:722)\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13733833",
            "date": "2013-08-08T18:51:29+0000",
            "content": "Here's someone else having the same problem.  They don't say whether it's a single index or distributed, though.\n\nhttp://stackoverflow.com/questions/17866313/earlyterminatingcollectorexception-in-mlt-component-of-solr-4-4  "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13742600",
            "date": "2013-08-16T21:01:41+0000",
            "content": "Does anyone have any ideas here? The same thing happens with a 4x snapshot:\n\n4.5-SNAPSHOT 1514424 - ncindex - 2013-08-15 12:56:50 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13742721",
            "date": "2013-08-16T23:38:58+0000",
            "content": "EarlyTerminatingCollector, and EarlyTerminationCollectorException are new in 4.4 \u2013 they are triggered if the flags passed to getDocListNC match the mask specified by the constant TERMINATE_EARLY (0x04).  The only code using that flag is in he SpellChecker.\n\nDigging through the stack trace Shawn Heisey posted however, shows that the MLTComponent is passing the value of the \"mlt.count\" param as if it were a flags bitset...\n\n\n// MoreLikeThisComponent.process(MoreLikeThisComponent.java:78)\nint mltcount = params.getInt(MoreLikeThisParams.DOC_COUNT, 5);\n\n// MoreLikeThisComponent.process(MoreLikeThisComponent.java:107)\nNamedList<DocList> sim = getMoreLikeThese(rb, rb.req.getSearcher(),\n  rb.getResults().docList, mltcount);\n\n// MoreLikeThisComponent.getMoreLikeThese(MoreLikeThisComponent.java:339)\nNamedList<DocList> getMoreLikeThese(ResponseBuilder rb,\n    SolrIndexSearcher searcher, DocList docs, int flags) throws IOException {\n\n// MoreLikeThisComponent.getMoreLikeThese(MoreLikeThisComponent.java:356)\nDocListAndSet sim = mltHelper.getMoreLikeThis(id, 0, rows, null, null, flags);\n\n// MoreLikeThisHelper.getMoreLikeThis(MoreLikeThisHandler.java:345)\npublic DocListAndSet getMoreLikeThis( int id, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n\n// MoreLikeThisHelper.getMoreLikeThis(MoreLikeThisHandler.java:365)\nresults.docList = searcher.getDocList(realMLTQuery, filters, null, start, rows, flags);\n\n\n\n...so a value like 100 matches the mask, but a value like 99 won't.\n\nThe question is: what flags should be getting passed into these methods, and is mltCount getting used correctly wherever it should be getting used in addition to this totally bogus \"flags\" usage? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13742747",
            "date": "2013-08-17T00:15:38+0000",
            "content": "ok, so MoreLikeThisComponent.getMoreLikeThese was already pulling out MoreLikeThisParams.DOC_COUNT to use as rows, and already has the ResponeBuilder \u2013 so in this page I just eliminated the \"flags\" argument from it's signature and pulled it from rb.getFieldFlags() instead.\n\nSo i think this should work \u2013 but my quick attempts at verifying it with a test didn't work out...\n\n\n\tthe only MLT Component test i can find is DistributedMLTComponentTest\n\tDistributedMLTComponentTest is currently @Ignored\n\twhen i un-ignored DistributedMLTComponentTest it passed for me with and w/o the patch\n\twhen i tried to change the test to use \"mlt.count=100\" everywhere, the test also passed both with and w/o the patch\n\n\n\n...so either there is some other variable at play here that i'm missing, or this tests is useless \u2013 i suspect maybe the later, it's not 100% clear to me what the test is doing, but it seems to only be verifying that the control client matches the distrib client \u2013 but never verifies that anything useful is returned from either. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13742845",
            "date": "2013-08-17T05:06:23+0000",
            "content": "Hoss Man theorized that even a non-distributed MLT request with mlt.count=100 would fail in the same way.  He was right.  A value of 99 works in either case.\n\nI have a full index rebuild underway that won't be finished for a few more hours.  It's bedtime, so I will try the patch out tomorrow. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13743097",
            "date": "2013-08-18T01:23:35+0000",
            "content": "The patch seems to work.  A query with mlt.count=100 returned results.  All Solr tests passed with the patch applied. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13743327",
            "date": "2013-08-18T18:37:15+0000",
            "content": "DistributedMLTComponentTest is currently @Ignored\n\nYeah - for some reason it was failing constantly on freebsd, but passing on other OS's - I've never gotten back to it..\n\nit seems to only be verifying that the control client matches the distrib client \n\nYup - it's about as basic a test as you can get. I'm not sure that it's useless though - there should be tests for non distributed mlt - so if distrib mlt matches it, that seems like it's doing something useful.\n\nBasically, I tried to bang out the simplest thing I could that seemed to make distributed mlt possible - I had absolutely no need for it, but its a common user request. I tried to get someone that did have an interest in it to test it out at the time, but since no one responded, I figured it was an improvement over no support at all - if it didn't work in all cases, JIRA's would be filed, things would move forward, blah blah "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13743389",
            "date": "2013-08-18T21:36:50+0000",
            "content": "Mark Miller Thank you for getting it in.  At the time I couldn't make it work at all, so I shelved it.  The powers that be are interested in it again, so I dusted it off and gave it another try.\n\nI now have things working, after discovering SOLR-5161 ... but there are some severe performance issues.  I thought it would be a good idea to explore those deeper before filing a new issue, see if I'm doing something wrong.  I'm on IRC most days and have a dev server with all my data if anyone is interested in some interactive digging. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13785906",
            "date": "2013-10-04T05:17:38+0000",
            "content": "I've just put up a patch for SOLR-5042 that should fix this issue.\n\nmlt.count was basically being used up as the flag value and SolrIndexSearcher.TERMINATE_EARLY = 0x04 perhaps explains why a value of 10 screwed up score, 100 screwed up with EarlyTerminatingCollectorException. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13800250",
            "date": "2013-10-20T21:40:57+0000",
            "content": "Commit 1533995 from Shawn Heisey in branch 'dev/trunk'\n[ https://svn.apache.org/r1533995 ]\n\nSOLR-5042 SOLR-5125 SOLR-5368: mlt.count used incorrectly in MoreLikeThisComponent. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13800275",
            "date": "2013-10-20T23:02:43+0000",
            "content": "Commit 1534005 from Shawn Heisey in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1534005 ]\n\nSOLR-5042 SOLR-5125 SOLR-5368: mlt.count used incorrectly in MoreLikeThisComponent. (merge trunk r1533995) "
        }
    ]
}