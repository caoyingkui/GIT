{
    "id": "LUCENE-6073",
    "title": "Fix directory deletion in ExtractReuters, recover from errors",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [
            "modules/benchmark"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Bug"
    },
    "description": "ExtractReuters in the benchmark module currently fails because it currently creates the output directory, and then calls IOUtils.rm on it (which will remove all files in it as well as removes the output directory itself). This is to fix this behaviour.\n\nWhile I was at it, I also added a bit more logging in case of file errors (the download I had some bad data) and made the task recover in case of issues with one file.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14222362",
            "author": "ASF GitHub Bot",
            "date": "2014-11-23T13:24:31+0000",
            "content": "GitHub user andyetitmoves opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/106\n\n    Fix directory deletion in ExtractReuters, recover from errors\n\n    Patch for LUCENE-6073.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/bloomberg/lucene-solr trunk-fix-extract-reuters\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/106.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #106\n\n\ncommit 8302ffe0004011b0130a714b2777eb3343a0f244\nAuthor: Ramkumar Aiyengar <andyetitmoves@gmail.com>\nDate:   2014-11-12T16:31:15Z\n\n    Fix directory deletion in ExtractReuters, recover from errors\n\n "
        },
        {
            "id": "comment-14229181",
            "author": "Robert Muir",
            "date": "2014-11-30T18:02:42+0000",
            "content": "Hi, thanks for cleanup here!\n\nJust a few questions:\n\n\tI'm confused about what looks like leniency in extract(). Does ExtractWikipedia do this too? Is there a good reason to ignore exceptions?\n\textractFile should just use java.io.LineNumberReader\n\tis there any way to test this thing? there is a 20-line testfile in o.a.l.benchmark.byTask\n\n "
        },
        {
            "id": "comment-14229275",
            "author": "Ramkumar Aiyengar",
            "date": "2014-11-30T23:35:58+0000",
            "content": "I'm confused about what looks like leniency in extract(). Does ExtractWikipedia do this too? Is there a good reason to ignore exceptions?\n\nI didn't take a look at ExtractWikipedia, actually it might be affected by the same issue actually (of directory deletion) \u2013 I will check. The only \"good reason\" was because the particular download I had happened to have bad data on one line, and it seemed reasonable to continue with other files in such a case as this was only benchmark data, at worst we would have had a few less docs..\n\nextractFile should just use java.io.LineNumberReader\n\nWill check..\n\nis there any way to test this thing? there is a 20-line testfile in o.a.l.benchmark.byTask\n\nI just checked this by ant get-files in the benchmark module (called by ant run-task eventually), this was failed before in trying to extract files on a clean checkout, with this change it no longer does. But did you mean through Jenkins as a proper test suite? Probably it could use one.. "
        },
        {
            "id": "comment-14229280",
            "author": "Robert Muir",
            "date": "2014-11-30T23:40:48+0000",
            "content": "Yeah for the testing side, if there is a simple way to do it in junit, it would be good. This bug may have been introduced with routine maintenance/ refactoring "
        }
    ]
}