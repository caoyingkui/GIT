{
    "id": "LUCENE-1149",
    "title": "add XA transaction support",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Reopened"
    },
    "description": "Need to add XA transaction support to Lucene.\n\nWithout XA support, it is difficult to keep disparate resources (e.g. database) in sync with the Lucene index.\n\nA review of the XA support added to Hibernate might be a good start (although Hibernate almost always uses a XA capable backing store database).\n\nIt would be ideal to have a combined IndexReaderWriter instance, then create a XAIndexReaderWriter which wraps it.\n\nThe implementation might be as simple as a XA log file which lists the XA transaction id, and the segments XXX number(s), since Lucene already allows you to rollback to a previous version (??? for sure, or does it only allow you to abort the current commit).\n\nIf operating under a XA transaction, the no explicit commits or rollbacks should be allowed on the instance.\n\nThe index would be committed during XA prepare(), and then if needed rolledback when requested. The XA commit() would be a no-op.\n\nThere is a lot more to this but this should get the ball rolling.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2008-06-17T20:08:44+0000",
            "content": "I had the same problem, so one year ago I implemented transactions on top of Lucene(I had an idea how to do it, but I also peeked a little bit in Compass sources). Basically I create a new index every time when a new transaction is started and this new index is made visible if commit is successful. Of course, you will still need to refresh your IndexReader(s). I planned also for a form of two-phase commit but right now it works pretty well doing everything manually - controlling when to commit/rollback/restore.\n\nHow it works :\n\n1. start 2 transactions, one with MySQL one with Lucene(I have an abstract layer on top of both engines so the API calls are the same), commit first Lucene.\n2. if Lucene fails, rollback MySQL.\n3. if Lucene commit(precommit actually - everything is stored, I have a new optimized index, ready to be used) is successful, commit MySQL.\n4. if MySQL fails, \"cancel\" Lucene transaction(remove index). There is a slightly chance to not being able to cancel the Lucene transaction(which is a new index). This index will hang there on disk/memory until the session is closed or the application is restarted.\n5. if MySQL commit is successful, the newly created Lucene index is \"activated\". There is a slightly chance to not being able to \"activate\" Lucene transaction(application crashes, disk full so cannot write state on disk) - so in this case the global transaction is \"in-doubt\". In this case a system administrator must act and activate the index(the index is fine, but not active) - after he fixes any existing problems - or decided to clear the database(you need eventually a unique global transaction id stored in the database too, as an additional column). Your data is in the database, the application works fine but some entries are \"invisible\" when searching.\n\nSo is kind of a two-phase commit.  ",
            "author": "Adrian Tarau",
            "id": "comment-12605705"
        },
        {
            "date": "2008-09-22T18:56:50+0000",
            "content": "I believe LUCENE-1274 (separation of prepareCommit & commit) already provides the low level support for building XA transactions on top of Lucene? ",
            "author": "Michael McCandless",
            "id": "comment-12633435"
        },
        {
            "date": "2011-05-16T02:33:51+0000",
            "content": "Is there an issue which this one is a true \"duplicate\" of?  I looked at LUCENE-1274, but it doesn't address actually adding XA transaction support itself.  I wanted to add myself to the watch list for such a ticket, but only found this one, which is marked as a duplicate. ",
            "author": "Trejkaz",
            "id": "comment-13033860"
        },
        {
            "date": "2011-05-16T12:39:23+0000",
            "content": "\nSorry, you're right this issue isn't really a dup (I've reopened it).\n\nI was just saying that Lucene's IW APIs are already transactional so\none should be able to build a transactions layer on top.  Ie, you\nshould not have to make a new index for each transaction.\n\nWe would still need a layer that mates this up to the XA transactions\nAPI (I think?).  Does anyone have a patch for this? ",
            "author": "Michael McCandless",
            "id": "comment-13033997"
        }
    ]
}