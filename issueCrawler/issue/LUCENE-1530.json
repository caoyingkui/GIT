{
    "id": "LUCENE-1530",
    "title": "Support inclusive/exclusive for TrieRangeQuery/-Filter, remove default trie variant setters/getters",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/other"
        ],
        "type": "New Feature",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.9",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "TrieRangeQuery/Filter is missing one thing: Ranges that have exclusive bounds. For TrieRangeQuery this may not be important for ranges on long or Date (==long) values (because [1..5] is the same like ]0..6[ or ]0..5]). This is not so simple for doubles because you must add/substract 1 from the trie encoded unsigned long.\n\nTo be conform with the other range queries, I will submit a patch that has two additional boolean parameters in the ctors to support inclusive/exclusive ranges for both ends. Internally it will be implemented using TrieUtils.incrementTrieCoded/decrementTrieCoded() but makes life simplier for double ranges (a simple exclusive replacement for the floating point range [0.0..1.0] is not possible without having the underlying unsigned long).\n\nIn December, when trie contrib was included (LUCENE-1470), 3 trie variants were supplied by TrieUtils. For new APIs a statically configureable default Trie variant does not conform to an API we want in Lucene (currently we want to deprecate all these static setters/getters). The important thing: It does not make code shorter or easier to understand, its more error prone. Before release of 2.9 it is a good time to remove the default trie variant and always force the parameter in TrieRangeQuery/Filter. It is better to choose the variant in the application and do not automatically manage it.\n\nAs Lucene 2.9 was not yet released, I will change the ctors and not preserve the old ones.",
    "attachments": {
        "LUCENE-1530.patch": "https://issues.apache.org/jira/secure/attachment/12398781/LUCENE-1530.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-01-26T23:54:06+0000",
            "content": "The patch. If nobody complains and the removal of not yet released constructors without the boolean parameters is ok, I commit. ",
            "author": "Uwe Schindler",
            "id": "comment-12667503"
        },
        {
            "date": "2009-01-27T00:48:50+0000",
            "content": "Another patch. This maybe a new issue, but it is simplier to do it with the current patch:\n\nIn December, when trie contrib was included (LUCENE-1470), 3 trie variants were supplied by TrieUtils. For new APIs a statically configureable default Trie variant does not conform to an API we want in Lucene (currently we want to deprecate all these static setters/getters). The important thing: It does not make code shorter or easier to understand, its more error prone.\n\nBefore release of 2.9 it is a good time to remove the default trie variant and always force the parameter in TrieRangeQuery/Filter. It is better to handle the variant to choose in the application. ",
            "author": "Uwe Schindler",
            "id": "comment-12667522"
        },
        {
            "date": "2009-01-27T10:43:57+0000",
            "content": "Update issue description to include both changes. ",
            "author": "Uwe Schindler",
            "id": "comment-12667641"
        },
        {
            "date": "2009-01-27T11:07:39+0000",
            "content": "If nobody complains and the removal of not yet released constructors without the boolean parameters is ok,\n\nThis is perfectly fine.  Not yet released APIs are free to change. ",
            "author": "Michael McCandless",
            "id": "comment-12667644"
        },
        {
            "date": "2009-01-27T15:16:48+0000",
            "content": "Comitted revision 738109 ",
            "author": "Uwe Schindler",
            "id": "comment-12667695"
        }
    ]
}