{
    "id": "SOLR-10365",
    "title": "Collection re-creation fails if previous collection creation had failed",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "6.5",
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Steps to reproduce:\n\n\tCreate collection using a bad configset that has some errors, due to which collection creation fails.\n\tNow, create a collection using the same name, but a good configset. This fails sometimes (about 25-30% of the times, according to my rough estimate).\n\n\n\nHere's what happens during the second step (can be seen from stacktrace below):\n\n\tIn CoreContainer's create(CoreDescriptor, boolean, boolean), there's a line {{        zkSys.getZkController().preRegister(dcore);}}.\n\tThis calls ZkController's publish(), which in turn calls CoreContainer's getCore() method. This call should return null (since previous attempt of core creation didn't succeed). But, it throws the exception associated with the previous failure.\n\n\n\nHere's the stack trace for the same.\n\nCaused by: org.apache.solr.common.SolrException: SolrCore 'newcollection2_shard1_replica1' is not available due to init failure: blahblah\n\tat org.apache.solr.core.CoreContainer.getCore(CoreContainer.java:1312)\n\tat org.apache.solr.cloud.ZkController.publish(ZkController.java:1225)\n\tat org.apache.solr.cloud.ZkController.preRegister(ZkController.java:1399)\n\tat org.apache.solr.core.CoreContainer.create(CoreContainer.java:945)\n\n\n\nWhile working on SOLR-6736, I ran into this (nasty?) issue. I'll try to isolate this into a standalone test that demonstrates this issue. Otherwise, as of now, this can be seen in the SOLR-6736's testUploadWithScriptUpdateProcessor() test (which tries to re-create the collection, but sometimes fails).",
    "attachments": {
        "SOLR-10365.patch": "https://issues.apache.org/jira/secure/attachment/12860571/SOLR-10365.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-26T17:59:54+0000",
            "content": "Here's a patch that fixes this situation. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15942373"
        },
        {
            "date": "2017-03-27T08:24:36+0000",
            "content": "LGTM\n\nBUt how can we test this? ",
            "author": "Noble Paul",
            "id": "comment-15942825"
        },
        {
            "date": "2017-03-28T16:01:10+0000",
            "content": "Thanks for your review, Noble.\n\nI think what is happening is the following:\n\nHow does a failed collection get cleaned up?\n\n\tAt CoreContainer's create(CoreDescriptor,boolean,boolean) method, there's a preRegister step. This publishes the core as DOWN before even attempting to initialize the core.\n\tWhen there's a failure to initialize the core, the CoreContainer's coreInitFailures map gets populated with the exception.\n\tAt OCMH, when there's a failure with the CreateCollection command, an attempt to clean up is performed. This actually calls DELETE, which in turn calls UNLOAD core admin command from DeleteCollectionCmd.java.\n\tThis UNLOAD command is invoked from OCMH's collectionCmd() method, which calls UNLOAD core on every replica registered in step 1.\n\tAt CoreContainer of the replica, when unload() method is invoked, the coreInitFailures map gets cleared.\n\n\n\nThis is all fine, when it works. However, the publish step in preRegister seems intermittent. Sometimes, the publish doesn't work. I can see that the state opertion is offered to the distributed queue properly, but that message actually doesn't seem to get processed. Hence, at step 4, no UNLOAD command is sent to the replica. The latest SOLR-6736 patch's TestConfigSetsAPI#testUploadWithScriptUpdateProcessor() demonstrates this.\n\nWhile this maybe a larger issue with the way OCMH works, I can see that the patch I added here does the job in those circumstances, and the code path followed after the core is registered successfully properly removes the previous exception from the coreInitFailures map. Unless someone has any objections, I am inclined to commit this patch, and hence commit SOLR-6736 and then continue investigating the above scenario. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15945444"
        },
        {
            "date": "2017-03-28T19:03:12+0000",
            "content": "Commit 0322068ea4648c93405da5b60fcbcc3467f5b009 in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0322068 ]\n\nSOLR-10365: Handle a SolrCoreInitializationException while publishing core state during SolrCore creation ",
            "author": "ASF subversion and git services",
            "id": "comment-15945741"
        },
        {
            "date": "2017-03-28T19:04:23+0000",
            "content": "Commit c37cb7e94e312fbfe650cb4cc4e812dbc2034478 in lucene-solr's branch refs/heads/branch_6x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c37cb7e ]\n\nSOLR-10365: Handle a SolrCoreInitializationException while publishing core state during SolrCore creation ",
            "author": "ASF subversion and git services",
            "id": "comment-15945746"
        }
    ]
}