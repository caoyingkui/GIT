{
    "id": "SOLR-3595",
    "title": "Currency types do not support range queries when multiValued",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "You can define the currency type as multiValued. However, if you do (and have more than one value), range queries, at least, do not work. See the thread titled \"Filtering a query by range returning unexpected results\".\n\nI'm not at all sure that currency type should support multivalued. For instance, how would one handle storing multiple values for a currency type in different currencies (e.g. USD and EUR)? I don't know enough about the internals to understand if it's possible, this JIRA is the result of a question on the users list.\n\nIf we decide that currency should not support multiValued, it seems a check at startup is in order on the \"fail early, fail loudly\" principle.",
    "attachments": {
        "SOLR-3595.patch": "https://issues.apache.org/jira/secure/attachment/12544727/SOLR-3595.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13407547",
            "date": "2012-07-05T22:17:22+0000",
            "content": "Multivalued does not work with fields that consist of more than one Lucene field behind, because the field vales cannot be corelated. We should disallow multi value and throw exception. This is similar to LatLong fields I think. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13410900",
            "date": "2012-07-10T21:05:02+0000",
            "content": "+1\nDisallowing multivalue sounds like the right approach, then if anyone figures out how to support it in the future it can be done then, not now. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412106",
            "date": "2012-07-11T22:26:02+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13414815",
            "date": "2012-07-16T00:33:58+0000",
            "content": "This can be done pretty easily by overriding isMultiValued in CurrencyField and hard-coding returning false. Seems a little harsh and is confusing. I can define a field with multiValued=\"true\" and then get an error saying \"multiple values encountered for non multiValued field.....\" Huh?.\n\nOne way to handle this would be to also provide a default method in FieldType, something about \"getNonMultivaluedMsg()\" (what a bad name!) and overriding that too. Kludgy but minimal code.\n\nWe can also just change the test around line 241 in DocumentBuilder to check for isPolyField, but I'd have to wash my hands afterward...\nreplace\nif( sfield!=null && !sfield.multiValued() && field.getValueCount() > 1 ) {\nwith\nif( sfield!=null && (!sfield.multiValued() || sfield.isPolyField()) && field.getValueCount() > 1 ) {\nThis kind of awful hack would probably be really bad for polygons in spatial, but I haven't looked.\n\nI'd prefer to \"fail early, fail often\" and catch this when the schema file was being parsed, but I don't see a convenient place to do that. Am I overlooking the obvious again?\n\nOr is there another way to approach this altogether? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13424237",
            "date": "2012-07-28T00:39:36+0000",
            "content": "I'd prefer to \"fail early, fail often\" and catch this when the schema file was being parsed, but I don't see a convenient place to do that. Am I overlooking the obvious again?\n\ncan't we just put hte logic in CurrencyField.init(), after the call to super.init() ... \n\n\nif (this.isMultiValued()) { \n throw new SolrException(\"CurrencyField's can not be multivalued: \" + this.typeName) \n} \n\n\n\n?\n\n(see BadIndexSchemaTest for an example of how to test that it fails properly) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429774",
            "date": "2012-08-07T03:42:54+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13451147",
            "date": "2012-09-07T23:51:53+0000",
            "content": "assigning to myself to try my suggestion when i have some more time, anyone with an itch to deal with this should not hesitate to take it from me "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13453509",
            "date": "2012-09-11T22:44:57+0000",
            "content": "My suggestion addressed the situation of trying to decalre the fieldType as multiValued, but did nothing to address fields & dynamic fields that were explicitly declared multiValued.\n\nSo in the attached patch i introduce a new method into the FieldType api called \"checkSchemaField\" which the SchemaField constructor uses to let the FieldType check the instance for errors that violate any invariants about hte field type.  the default impl is a NOOP and CurrencyField overrides this.\n\nWould like someone to sanity check that this approach is a good idea (seems like it would definitely have other uses moving forward) otherwise i think it's feasible solution to the currency multivalued problem and we should get it in for 4.0 "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13453519",
            "date": "2012-09-11T22:56:33+0000",
            "content": "Relatively unobtrusive... seems fine to me. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13453542",
            "date": "2012-09-11T23:21:20+0000",
            "content": "r1383648 - 4x\nr1383653 - trunk "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13453546",
            "date": "2012-09-11T23:24:42+0000",
            "content": "Annnnnnnnd i had the wrong issue# in changes, now fixed...\n\nCommitted revision 1383654.\nCommitted revision 1383655. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13610877",
            "date": "2013-03-22T16:41:49+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1383655\n\nSOLR-3595: fix incorrect issue number in CHANGES.txt (merge r1383654) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654225",
            "date": "2013-05-10T10:34:27+0000",
            "content": "Closed after release. "
        }
    ]
}