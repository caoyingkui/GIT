{
    "id": "LUCENE-6513",
    "title": "Allow limits on SpanMultiTermQueryWrapper expansion",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "SpanMultiTermQueryWrapper currently rewrites to a SpanOrQuery with as many clauses as there are matching terms.  It would be nice to be able to limit this in a slightly nicer way than using TopTerms, which for most queries just translates to a lexicographical ordering.",
    "attachments": {
        "LUCENE-6513.patch": "https://issues.apache.org/jira/secure/attachment/12736540/LUCENE-6513.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14567163",
            "author": "Alan Woodward",
            "date": "2015-06-01T10:50:36+0000",
            "content": "Patch.  This adds a FrequentTerms rewrite to SpanMTQWrapper, which will rewrite the query using the terms with highest term frequencies. "
        },
        {
            "id": "comment-14567192",
            "author": "Robert Muir",
            "date": "2015-06-01T11:44:45+0000",
            "content": "Hmm, ideally we don't need to implement this as SpanOrQuery? \n\nIn other words, I think the rewrite method should be TopTerms with a different comparison function... "
        },
        {
            "id": "comment-14567242",
            "author": "Alan Woodward",
            "date": "2015-06-01T12:27:06+0000",
            "content": "The problem with using TopTerms is that it requires that terms have the same comparison value across segments (which makes it more efficient, because it can only build TermContexts for candidate terms), but that doesn't hold for termFreq. "
        },
        {
            "id": "comment-14567261",
            "author": "Robert Muir",
            "date": "2015-06-01T12:44:52+0000",
            "content": "Can we solve this somehow in a better way? Uwe Schindler any ideas?\n "
        },
        {
            "id": "comment-14567439",
            "author": "Uwe Schindler",
            "date": "2015-06-01T15:33:06+0000",
            "content": "Not yet, I have to discuss with Alan in person. I don't yet undertand the problem of using another rewrite. It is better what we currently have in any case - if you are happy with the fact that not all terms are used in the query.  "
        },
        {
            "id": "comment-14644504",
            "author": "Alan Woodward",
            "date": "2015-07-28T15:12:45+0000",
            "content": "Updated to trunk.  I don't think there's any easier way to solve this (the other SpanRewriteMethods end up building SpanOrQueries as well) "
        },
        {
            "id": "comment-16074901",
            "author": "Alan Woodward",
            "date": "2017-07-05T15:04:01+0000",
            "content": "Waking this one up again, here's a different attempt at limiting MTQ expansion for span queries.  We can't easily use TopTermsRewrite to select the most-frequent terms, because term frequency is an index-wide stat, and TopTerms only sees info from a single segment at a time.  Instead, I'm using MultiTermsEnum to iterate through the matching terms, and recording the most frequent in a priority queue.\n\nThe default is for SpanMTQWrapper to have no limits, but maybe we should change this to use the max boolean clause limit? "
        },
        {
            "id": "comment-16075601",
            "author": "Timothy M. Rodriguez",
            "date": "2017-07-05T23:16:15+0000",
            "content": "Alan Woodward we've written a patch to solve this problem as well we've been meaning to share with the community.  It goes about the solution in a bit of a different way.  We'll try to get it up here in a day or two, though I'm not sure which approach will be preferable. "
        },
        {
            "id": "comment-16077300",
            "author": "Nishant Mehta",
            "date": "2017-07-06T22:46:21+0000",
            "content": "Here's another approach we tried for limiting the MTQ expansion of span queries.\u00a0FrequentTermsScoringRewrite collects terms using the\u00a0ParallelArraysTermCollector in\u00a0ScoringRewrite which is then added to the PriorityQueue in FrequentTermsScoringRewrite, overflows in the PriorityQueue are handled using the predicate supplied to\u00a0FrequentTermsScoringRewrite. The default is DF_ORDER, but there's also a DF_THEN_TTF_ORDER provided for ties, and others could be added if needed.\u00a0Then SpanQueryFrequentTermsScoringRewrite simply builds a SpanOrQuery out of the collected terms. Alan Woodward the test is inspired from your earlier patch. Thanks David Smiley for your prior feedback on this. "
        },
        {
            "id": "comment-16188913",
            "author": "Timothy M. Rodriguez",
            "date": "2017-10-02T21:52:16+0000",
            "content": "Apologies for the late alternative implementation.  For what it's worth, we've been utilizing this patch for about a year and it's helped improve responsiveness to queries while limiting the expansions. "
        },
        {
            "id": "comment-16534238",
            "author": "David Smiley",
            "date": "2018-07-05T22:30:29+0000",
            "content": "Here's an updated patch from the most recent one.  I made small modifications to bring it up to date with master, and I added a bunch of nocommits at spots as reminders to ask questions here in JIRA, but most aren't so much true nocommits (most are not a blocker to me).\n\nComments about existing stuff:\n\n\tTopTermsRewrite: Why does this sort the terms before looping and calling addClause?  https://github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/search/TopTermsRewrite.java#L159  It's not a big deal but it's not clear what's the point.  It appears that addClause, currently having no javadocs, ought to state that it is called in term order if it does matter.  Uwe Schindler thought you might know as you added this code.  The test org.apache.lucene.search.TestMultiTermQueryRewrites#testRewritesWithDuplicateTerms expressly tests that the terms are in order.\n\tSpanMultiTermQueryWrapper: shouldn't equals() consider the rewrite method?\n\tSpanMultiTermQueryWrapper: suggest deprecate/removing setRewriteMethod(SpanRewriteMethod) and doing the same to the referenced inner class SpanRewriteMethod.  getRewriteMethod can return MultiTermQuery.RewriteMethod.  In short, we don't need a typed SpanQuery derivative of RewriteMethod.  It's a bit limiting; it means we can't have an impl that subclasses another RewriteMethod like ScoringRewrite.  Also the setter makes it mutable but I don't think we want mutable Query subclasses anymore.\n\n\n\nNew stuff:\n\n\tSpanQueryFrequentTermsScoringRewrite: should perhaps be an inner class of SpanMultiTermQueryWrapper like some of the existing ones?\n\tSpanQueryFrequentTermsScoringRewrite: does it matter if the SpanOrQuery we build has it's SpanTermQuery clauses in lexicographic order or not?  This kinda gets at my Q earlier about TopTermsRewrite sorting.\n\tFrequentTermsScoringRewrite: probably needs equals & hashcode?  Reference equality will have to do for the pluggable BiPredicate.\n\tFrequentTermsScoringRewrite.ScoreTerm we could remove this if SpanTermQuery had getTermStates() like how TermQuery now has this method \u2013 LUCENE-8379.\n\n "
        },
        {
            "id": "comment-16535908",
            "author": "Uwe Schindler",
            "date": "2018-07-07T21:25:16+0000",
            "content": "Hi David,\n\nI have to dig into the code to understand why it actually sorts. It might be a relic from earlier times, but there was for sure some reason about it. To figure that out, I will go through the history of this files. If sorting is not needed, we can remove the test, too.\n\nUwe "
        }
    ]
}