{
    "id": "LUCENE-4061",
    "title": "Improvements to DirectoryTaxonomyWriter (synchronization and others)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/facet"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "DirTaxoWriter synchronizes in too many places. For instance addCategory() is fully synchronized, while only a small part of it needs to be.\n\nAdditionally, getCacheMemoryUsage looks bogus - it depends on the type of the TaxoWriterCache. No code uses it, so I'd like to remove it \u2013 whoever is interested can query the specific cache impl it has. Currently, only Cl2oTaxoWriterCache supports it.\n\nIf the changes will be simple, I'll port them to 3.6.1 as well.",
    "attachments": {
        "LUCENE-4061.patch": "https://issues.apache.org/jira/secure/attachment/12527621/LUCENE-4061.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-16T13:06:36+0000",
            "content": "Patch does the following:\n\n\n\tRemoves getCacheMemoryUsage()\n\tHandles few TODOs (e.g. don't use MultiFields)\n\tImproves synchronization of addCategory \u2013 only if the category is not found, then it synchronizes and proceeds with the original logic.\n\tMade addCategoryDocument private \u2013 this is a very dangerous method to call by extending classes.\n\tMade the TaxoWriterCache impls thread-safe.\n\tAdded a concurrency test to validate synchronization works\n\tModified TestAddTaxonomy to run much faster by building the taxonomy in parallel.\n\n\n\nAll tests pass, and run even faster now. I plan to commit this soon. ",
            "author": "Shai Erera",
            "id": "comment-13276716"
        },
        {
            "date": "2012-05-16T13:11:41+0000",
            "content": "Committed rev 1339150 ",
            "author": "Shai Erera",
            "id": "comment-13276728"
        },
        {
            "date": "2012-06-10T11:42:53+0000",
            "content": "TestDirectoryTaxonomyWriter.testConcurrency sometimes fails on mismatch number of categories.\n\nThis is not repeated easily, but if run with -Dtests.iters, it is. ",
            "author": "Shai Erera",
            "id": "comment-13292505"
        },
        {
            "date": "2012-06-11T12:09:38+0000",
            "content": "Fixing the concurrency issue was hairy, and required lots of changes to DirTaxoWriter:\n\n\n\tNeeded a ReaderManager, so added such in core under o.a.l.index. Separately, I think that we should move RefManager to o.a.l.util instead of o.a.l.search.\n\n\n\n\n\tDirTaxoWriter was not very well built for concurrency , so many changes had to be done to it.\n\n\n\n\n\tTaxoWriterCache.hasRoom(int) has been replaced by isFull().\n\n\n\n\n\tTestDirTaxoWriter has been enhanced to sometimes, during nightly builds, use a NoOpCache, as it uncovered some bugs too ! (yet it makes the test horribly slow, hence why the nightly criteria, and very low chances still).\n\n\n\nI ran DirTaxoWriter.testConcurrency over 1000 times and no failures, so I'm inclined to believe the concurrency issues are now resolved. Still, a second (and third and even a forth) look by someone else would be appreciated.\n\nI'll commit it tomorrow if no one will object, and port to 4x. ",
            "author": "Shai Erera",
            "id": "comment-13292767"
        },
        {
            "date": "2012-06-11T18:51:14+0000",
            "content": "patch looks good. I wonder if you can't create the ReaderManager in advance and make it final. I mean if you do add categories which seems to be the purpose of that writer you need it anyway and the costs should be considerably low. That would remove the need for locking on it entirely.  ",
            "author": "Simon Willnauer",
            "id": "comment-13292977"
        },
        {
            "date": "2012-06-11T20:46:24+0000",
            "content": "Believe me, I wanted to avoid it too, but ReaderManager is allocated like that for few reasons:\n\n\n\tIt's lazy, as the comment in the code says \u2013 it's a waste to open an IR if your DirTaxoWriter session is going to be short living.\n\t\n\t\tPersonally, I think this is a minor issue, and if it were only that, I'd make it final.\n\t\n\t\n\n\n\n\n\tThe TaxoWriterCache can be 'complete' which means all the categories currently known to DirTW are cached. In that case, it is a waste to keep the reader open and we close it.\n\t\n\t\tThis is true for Cl2oCache, since it keeps all categories in memory.\n\t\tBut LruCache is not like that, since it potentially evicts entries from the cache. So it can be 'complete' until it evicts the first entry, in which case it will never be complete, and we'll need to keep the reader open.\n\t\n\t\n\n\n\nCurrently, when we don't need ReaderManager, we close it. We also don't open it until few cache misses occur. To change it would mean to sacrifice efficiency by always keeping a Reader open, even if it's not needed. It wastes RAM, file handles and what not.\n\nNot sure it's worth it. What do you think? ",
            "author": "Shai Erera",
            "id": "comment-13293063"
        },
        {
            "date": "2012-06-12T08:04:28+0000",
            "content": "Not sure it's worth it. What do you think?\ngiven that I think its ok to have the locking and init it lazy. +1 for the patch. go for it! ",
            "author": "Simon Willnauer",
            "id": "comment-13293427"
        },
        {
            "date": "2012-06-12T09:13:28+0000",
            "content": "Thanks Simon for reviewing the patch. I'll commit this then and port to 4x. ",
            "author": "Shai Erera",
            "id": "comment-13293463"
        },
        {
            "date": "2012-06-12T09:59:08+0000",
            "content": "Committed rev 1349214 (trunk) and 1349223 (4x). ",
            "author": "Shai Erera",
            "id": "comment-13293484"
        },
        {
            "date": "2012-06-19T06:32:54+0000",
            "content": "Jenkins failed with this stack trace:\n\nStack Trace:\njava.lang.AssertionError: mismatch number of categories\nexpected:<21684> but was:<22301>\n       at __randomizedtesting.SeedInfo.seed([FA7ED469F531418D:5C8E16F49462A144]:0)\n       at org.junit.Assert.fail(Assert.java:93)\n       at org.junit.Assert.failNotEquals(Assert.java:647)\n       at org.junit.Assert.assertEquals(Assert.java:128)\n       at org.junit.Assert.assertEquals(Assert.java:472)\n       at org.apache.lucene.facet.taxonomy.directory.TestDirectoryTaxonomyWriter.testConcurrency(TestDirectoryTaxonomyWriter.java:263)\n\nreproduce with: ant test -Dtestcase=TestDirectoryTaxonomyWriter -Dtests.method=testConcurrency -Dtests.seed=FA7ED469F531418D -Dtests.multiplier=3\n-Dtests.nightly=true -Dtests.linedocsfile=/home/hudson/lucene-data/enwiki.random.lines.txt -Dtests.locale=sk_SK -Dtests.timezone=Africa/Nairobi\n-Dargs=\"-Dfile.encoding=ISO8859-1\"\n\nI still wasn't able to reproduce it on my machine. Digging into this. ",
            "author": "Shai Erera",
            "id": "comment-13396546"
        },
        {
            "date": "2012-06-19T11:57:09+0000",
            "content": "Some progress ... still wasn't able to reproduce locally, but I did realize that the test was run with -Dtests.nightly, and with the seed it uses NoOpCache (which never caches anything). Progress is that I thought it's related to LruTaxoWriterCache all along ! .\n\nStill digging. ",
            "author": "Shai Erera",
            "id": "comment-13396706"
        },
        {
            "date": "2012-06-19T12:29:32+0000",
            "content": "Found it. There was a problem with instructions order \u2013 upon adding a new category, we mark that the reader should be refreshed after we add the category to the cache. When NoOpCache is used, adding to the cache fails, and we fail to refresh the reader because the flag is set to true only afterwards. I added a simple deterministic test that verifies it. Will commit the fix shortly.\n\nBTW, NoOpCache in this case simulates the case where e.g. LruTaxoWriterCache just evicts entries from it and we fail to refresh the reader, so this is a true bug and not related to the use of NoOpCache.\n\nHopefully this will be the end of it . ",
            "author": "Shai Erera",
            "id": "comment-13396721"
        },
        {
            "date": "2012-06-19T12:35:56+0000",
            "content": "Committed revisions 1351672 and 1351675. ",
            "author": "Shai Erera",
            "id": "comment-13396725"
        }
    ]
}