{
    "id": "SOLR-2563",
    "title": "Allow generic pluggable file system implementations",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "For things like configuration files, they can be loaded from places other than the local filesystem, such as Zookeeper or HDFS.  In this issue I will abstract that functionality out.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13041699",
            "date": "2011-05-31T17:38:09+0000",
            "content": "For configuration files (works even with XIncludes) there is already ResourceLoader, which does exactly what you want. To support Zookeeper or HDFS just write a ClassLoader that loads from there.\n\nSince I fixed the XInclude stuff (to use solrres://-URIs, see SOLR-1656), even that works phantastic. Abstraction is ResourceLoader, what is your new idea? "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041713",
            "date": "2011-05-31T18:00:08+0000",
            "content": "Uwe, thanks, I think though there was an issue even trying to use that.  I'll take a look and report back! "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041924",
            "date": "2011-06-01T01:20:15+0000",
            "content": "I don't think CoreContainer is completely removed from the local file system.  Checkout persist, persistFile, etc.  Those should either be turned off, or should write to the underlying generic file system.\n\nIt looks like libs are hard coded in CoreContainer?\n\n\nif (libDir != null) {\n  File f = FileUtils.resolvePath(new File(dir), libDir);\n  log.info( \"loading shared library: \"+f.getAbsolutePath() );\n  libLoader = SolrResourceLoader.createClassLoader(f, null);\n}\n\n\n\nCoreDescriptor.getDataDir() is ambiguous.\n\nQueryElevationComponent is hardcoded:\n\n\n// check if using ZooKeeper\nZkController zkController = core.getCoreDescriptor().getCoreContainer().getZkController();\nif(zkController != null) {\n\n\n\nIndexBasedSpellChecker.initSourceReader()\n\nSolrIndexWriter hardcodes writing the infoStream to the local file system.\n\nThe benchmark code is as well however that's somewhat less of a priority. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13042870",
            "date": "2011-06-02T16:48:37+0000",
            "content": "One way to test this out would be to create a Solr unit test that tries to create a Solr instance on top of HDFS using an HDFSSolrResourceLoader.  Then I think the problem areas would reveal themselves.  It would be nice to run all of the Solr unit tests this way, however that seems much more complex. "
        }
    ]
}