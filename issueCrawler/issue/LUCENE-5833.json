{
    "id": "LUCENE-5833",
    "title": "Suggestor Version 2 doesn't support multiValued fields",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "modules/other"
        ],
        "affect_versions": "4.8.1",
        "status": "Resolved",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "So if you use a multiValued field in the new suggestor it will not pick up terms for any term after the first one. So it treats the first term as the only term it will make it's dictionary from. \n\nThis is the suggestor I'm talking about:\nhttps://issues.apache.org/jira/browse/SOLR-5378",
    "attachments": {
        "LUCENE-5833.patch": "https://issues.apache.org/jira/secure/attachment/12661475/LUCENE-5833.patch",
        "SOLR-6210.patch": "https://issues.apache.org/jira/secure/attachment/12656438/SOLR-6210.patch",
        "LUCENE-5833_branch4_10.patch": "https://issues.apache.org/jira/secure/attachment/12701504/LUCENE-5833_branch4_10.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14065979",
            "author": "Varun Thacker",
            "content": "This should be a lucene issue. \n\nI have added support to DocumentDictionary to support multiValued fields. It's a hack I guess but I could not think of a better approach. Opinions?\n\nAlso DocumentDictionaryTest passes and I added a very basic test for multi valued field docs. I will improve it in the next iteration just wanted to get a quick patch out. ",
            "date": "2014-07-18T03:44:18+0000"
        },
        {
            "id": "comment-14095607",
            "author": "Varun Thacker",
            "content": "\n\tUpdated it with trunk\n\tAdded a better test for multiValued fields.\n\n\n\nDoes anyone have a better suggestion on how to add multi valued field than the logic the patch uses? ",
            "date": "2014-08-13T15:39:26+0000"
        },
        {
            "id": "comment-14142411",
            "author": "Varun Thacker",
            "content": "Hi Michael McCandless , \n\nCan you also have a look at this patch please and let me know if this is the correct approach or do you have a better way to tackle the problem. ",
            "date": "2014-09-21T10:19:13+0000"
        },
        {
            "id": "comment-14142423",
            "author": "Michael McCandless",
            "content": "Net/net I agree it makes sense for DocumentDictionary to be able to handle multi-valued fields.\n\nIsn't that first if (term.size() == 0) always be true?  If terms is non-empty we return the first one at the start of the loop?\n\nAlso it seems like you can remove the if in the end?  The loop will just cycle around and return the first term if there is one?  Maybe we can somehow simplify this \"loop within a loop\"...\n\nI don't like that there's O(N^2) here (terms.remove(0) from an ArrayList) ... can we fix that?  Yeah, N should be small in general, but you never know ... I don't like having secret adversaries to our code ... maybe you can just hang onto the StorableField[] from the current doc and step through it; then you don't need to alloc this separate ArrayList...\n\nCan you rename terms to something like currentDocTerms?  (Separately it's strange we call these \"terms\"; they are really intended to be \"suggestions\" right?).\n\nStyling: there should be a space after \"if\" and before ( in \"if(...)\" ",
            "date": "2014-09-21T11:07:40+0000"
        },
        {
            "id": "comment-14143493",
            "author": "Varun Thacker",
            "content": "HI Michael McCandless, \n\nThanks for reviewing. Here is a new patch which hangs on to the StorableField  . This patch also folds in your other suggestions. ",
            "date": "2014-09-22T17:38:09+0000"
        },
        {
            "id": "comment-14149004",
            "author": "Varun Thacker",
            "content": "Hi Michael McCandless,\n\nHave you had a chance to review the latest patch? Let me know if there are any other changes that you recommend. ",
            "date": "2014-09-26T10:16:57+0000"
        },
        {
            "id": "comment-14149314",
            "author": "Michael McCandless",
            "content": "Thanks Varun.\n\nMaybe instead of currentFieldsPosition name it nextFieldsPosition?\nI.e, it's the index for the next value the iterator should return?\n\nMaybe simplify this:\n\n  if (fieldVal.binaryValue() == null && fieldVal.stringValue() == null) {\n    continue;\n  }\n  return (fieldVal.stringValue() != null) ? new BytesRef(fieldVal.stringValue()) : fieldVal.binaryValue();\n\n\n\nto something like this:\n\n  if (fieldVal.binaryValue() != null) {\n    return fieldVal.binaryValue();\n  } else if (fieldValue.stringValue() != null) {\n    return new BytesRef(fieldValue.stringValue());\n  } else {\n    continue;\n  }\n\n\n\n(And also where this pattern is used again towards the end of the\nwhile loop).  And I think also fix the similarly confusing\npre-existing payload null checking?\n\nCan we move the BytesRef tempTerm type declaration down to where\nwe actually assign it?\n\nCan you pull out the atLeast(N) from the for loops,\ne.g. for(int j=0; j<atLeast(2); j++)?  That is eval'd on each loop\niteration, so it's ... strange to call it over and over. ",
            "date": "2014-09-26T15:41:01+0000"
        },
        {
            "id": "comment-14149641",
            "author": "Varun Thacker",
            "content": "New patch with the changes that you recommended - \n\n1. Renamed currentFieldsPosition name it nextFieldsPosition\n2. Moved to the following syntax - \n\n if (fieldVal.binaryValue() != null) {\n    return fieldVal.binaryValue();\n  } else if (fieldValue.stringValue() != null) {\n    return new BytesRef(fieldValue.stringValue());\n  } else {\n    continue;\n  }\n\nAlthough I like the payload condition check the way it is currently because of the added null check.\n\nCan you pull out the atLeast(N) from the for loops,\n\nAbsolutely. I don't know how I overlooked that  ",
            "date": "2014-09-26T17:06:03+0000"
        },
        {
            "id": "comment-14219886",
            "author": "Varun Thacker",
            "content": "Hi Michael McCandless ,\n\nCan you please review the patch and let me know if anything else needs to be done ",
            "date": "2014-11-20T19:58:14+0000"
        },
        {
            "id": "comment-14219954",
            "author": "Michael McCandless",
            "content": "Oh thanks for the reminder Varun Thacker, I'll have a look. ",
            "date": "2014-11-20T20:39:09+0000"
        },
        {
            "id": "comment-14220747",
            "author": "ASF subversion and git services",
            "content": "Commit 1640886 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1640886 ]\n\nLUCENE-5833: allow suggesters to build off of each value from multi-valued fields ",
            "date": "2014-11-21T10:10:42+0000"
        },
        {
            "id": "comment-14220749",
            "author": "ASF subversion and git services",
            "content": "Commit 1640887 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1640887 ]\n\nLUCENE-5833: allow suggesters to build off of each value from multi-valued fields ",
            "date": "2014-11-21T10:13:43+0000"
        },
        {
            "id": "comment-14220750",
            "author": "Michael McCandless",
            "content": "Thanks Varun! ",
            "date": "2014-11-21T10:14:11+0000"
        },
        {
            "id": "comment-14332950",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:02:46+0000"
        },
        {
            "id": "comment-14341103",
            "author": "Jan H\u00f8ydahl",
            "content": "Reopening to add patch for 4_10 branch.\nIt was a simple merge from 5.x and adding VERSION param to one of the test methods. Tests and precommit succeeds, hope to include in 4.10.5 or 4.10.4 RCx. ",
            "date": "2015-02-28T00:36:41+0000"
        },
        {
            "id": "comment-14341240",
            "author": "Erick Erickson",
            "content": "Jan:\n\nAs it happens, I'm doing some other suggester stuff for 4.10.5 (didn't want to try to shoe-horn it in to 4.10.4 at the last second).\n\nI'll make it happen. ",
            "date": "2015-02-28T02:34:27+0000"
        },
        {
            "id": "comment-14341443",
            "author": "Michael McCandless",
            "content": "I'm not sure this should go back to 4.10.x?  It's more like a feature (adding multi-valued support to DocumentDictionary) than a bug?  And I think there is some risk here ... it's a non-trivial change. ",
            "date": "2015-02-28T09:39:19+0000"
        },
        {
            "id": "comment-14341618",
            "author": "Erick Erickson",
            "content": "Michael McCandless Truth be told I haven't looked at it yet. Kind of waiting for the 4.10.4 tag to be set before getting too far into this.\n\nOf the 4 suggester-related things I marked for putting in 4.10.5, this is the one I could be most easily convinced to leave out. I'll look a bit more deeply, but I'll almost certainly defer to your expertise here.\n\nThe other three JIRAs are either very low-risk (the bit about requiring weightField in solrconfig.xml configuration) or make using the Suggester stuff from Solr unworkable for a large corpus, so I'm willing to argue about those. This one kind of snuck in there by chance though.\n\nAt least with Jan's work, we have a viable alternative for people on 4.x that MUST have this functionality, \"apply the patch and go\". And if that isn't possible, construct the field up-front so it's not multiValued.\n\nHmmm, I'm pretty much convincing myself to not put this in 4.10.5. Although I'll go for trunk and 5x.\n\nThanks! It's always great to have an informed viewpoint! ",
            "date": "2015-02-28T16:19:55+0000"
        },
        {
            "id": "comment-14341745",
            "author": "Jan H\u00f8ydahl",
            "content": "As a Lucene issue, this is probably not a bug. However it started as a SOLR issue, where it appears more like a bug:\n\nThe Solr ref guide does not document the single-value only constraint; in fact it encourages using copyField to populate the \"field\" to use for suggestions, which in fact requires multiValued=true. So we can either treat it as a (Solr) bug and backport this issue, or add a (Solr) patch which adds a warning or exception when attempting to use multiVal; or treat it as a (Solr) documentation bug and add a note in refguide Errata page for 4.10.x. I'm happy with any of these, my customer who got bit by this can run a patched version if need be.\n\nPerhaps there should have been a separate SOLR issue for this? ",
            "date": "2015-02-28T19:32:21+0000"
        },
        {
            "id": "comment-14341886",
            "author": "Steve Rowe",
            "content": "I'm not sure this should go back to 4.10.x? It's more like a feature (adding multi-valued support to DocumentDictionary) than a bug? And I think there is some risk here ... it's a non-trivial change.\n\nSounds to me like a 4.11 release is in our future. ",
            "date": "2015-03-01T01:51:29+0000"
        },
        {
            "id": "comment-14343161",
            "author": "Jan H\u00f8ydahl",
            "content": "I did some testing with multi valued field input, and random weight input between 0-100 for the docs in the index. What seems to happen then is that the suggester outputs one suggestion per unique weight:\n\n\n{\n  \"suggest\":{\"languages\":{\n      \"engl\":{\n        \"numFound\":101,\n        \"suggestions\":[{\n            \"term\":\"<b>Engl</b>ish\",\n            \"weight\":100,\n            \"payload\":\"0\"},\n          {\n            \"term\":\"<b>Engl</b>ish\",\n            \"weight\":99,\n            \"payload\":\"0\"},\n          {\n            \"term\":\"<b>Engl</b>ish\",\n            \"weight\":98,\n            \"payload\":\"0\"},\n---etc all the way down to 0---\n\n\n\nUsing Solr with BlendedInfixLookupFactory. Can anyone explain this behavior? I tested on solr5.0.0 ",
            "date": "2015-03-02T13:44:05+0000"
        },
        {
            "id": "comment-14343173",
            "author": "Jan H\u00f8ydahl",
            "content": "Closing this again. Let's open a new issue for the duplication issue, if I have not completely misunderstood how this is supposed to work.. ",
            "date": "2015-03-02T14:09:18+0000"
        }
    ]
}