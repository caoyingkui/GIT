{
    "id": "SOLR-12203",
    "title": "Error in response for field containing date. Unexpected state.",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.2.1,                                            7.3",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I get the following error:\n\njava.lang.AssertionError: Unexpected state. Field: &apos;stored,indexed,tokenized,omitNorms,indexOptions=DOCS&lt;ds_lastModified:2013-10-04T22:25:11Z&gt;&apos;\nat org.apache.solr.schema.DatePointField.toObject(DatePointField.java:154)\nat org.apache.solr.schema.PointField.write(PointField.java:198)\nat org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:141)\nat org.apache.solr.response.JSONWriter.writeSolrDocument(JSONResponseWriter.java:374)\nat org.apache.solr.response.TextResponseWriter.writeDocuments(TextResponseWriter.java:275)\nat org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:161)\nat org.apache.solr.response.JSONWriter.writeNamedListAsMapWithDups(JSONResponseWriter.java:209)\nat org.apache.solr.response.JSONWriter.writeNamedList(JSONResponseWriter.java:325)\nat org.apache.solr.response.JSONWriter.writeResponse(JSONResponseWriter.java:120)\nat org.apache.solr.response.JSONResponseWriter.write(JSONResponseWriter.java:71)\nat org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:65)\nat org.apache.solr.servlet.HttpSolrCall.writeResponse(HttpSolrCall.java:788)\nat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:525)\nat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:382)\nat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:326)\nat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1751)\nat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:582)\nat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\nat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\nat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\nat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180)\nat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512)\nat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\nat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)\nat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\nat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\nat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\nat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\nat org.eclipse.jetty.rewrite.handler.RewriteHandler.handle(RewriteHandler.java:335)\nat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\nat org.eclipse.jetty.server.Server.handle(Server.java:534)\nat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320)\nat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)\nat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:283)\nat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:108)\nat org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\nat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)\nat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)\nat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)\nat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)\nat org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)\nat java.lang.Thread.run(Thread.java:748)\n\nI can't find out why this occurs. The weird thing is, I can't seem to find this field (ds_lastModified) in the schema. I tried looking it up using Luke, but also no result (/solr/some-core/admin/luke?fl=ds_lastModified). I do know that at some point there were documents with this field. Seems like a bug. Any idea?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-04-10T15:36:27+0000",
            "content": "Please raise issues like this on the user's list first, when we determine that it's a code issue, then we usually raise a JIRA.\n\nDid you change your schema at any point and not rebuild your collection from scratch? Or if you upgraded did you use your old schema types or just use a 7x one? Because this kind of looks like you have some segments with one definition for a field and other segments with a different definition.\n ",
            "author": "Erick Erickson",
            "id": "comment-16432478"
        },
        {
            "date": "2018-04-17T14:23:49+0000",
            "content": "Erick, I apologize for not raising this on the user's list first.\n\nI indeed changed the schema, but only the luceneMatchVersion. It was still on version 6.5.1 and I changed it to 7.1.0 I didn't change this fieldtype. ",
            "author": "Jeroen Steggink",
            "id": "comment-16440912"
        },
        {
            "date": "2018-04-18T02:17:02+0000",
            "content": "Jeroen: No problem, we all learn about the JIRA list sometime.\n\nI'll make a stab at another place to look, but then let's move the rest of the conversation to the user's list (haven't checked it yet today).\n\nNative numeric types changed to use point-derived types between 6 and 7. My guess is that you have some dynamicField definition like ds_* or *_lastModified and \"somehow\" your indexing process is throwing documents with fields like that at Solr.\n\nThis is kind of hand-waving, I don't really know the exact mechanism that would drive that, but it seems in the right general area.\n\nLuke won't show you fields in your index that aren't realized, so if all docs are failing that have this field and it's a dynamic field it won't show up 'cause it's not there.\n\nIf you're using \"schemaless\", that introduces yet another issue. I strongly advise if you can at all use explicit schema definitions to do so unless you can totally and absolutely guarantee that the first doc encountered has exactly the same representation. Even something as trivial as the first doc having a field with a value of \"1\" and the next doc \"1.0\" can do Bad Things.\n\nAnd if you find an answer and don't think it's really a bug (or suggestion for improvement) please close this JIRA. ",
            "author": "Erick Erickson",
            "id": "comment-16441775"
        },
        {
            "date": "2018-04-19T18:01:11+0000",
            "content": "I could be wrong but I bet the bug is something related to somewhere a default object.toString() getting called. \u00a0That's theory is not necessarily helpful in finding it as such a call\u00a0happens in a lot of places but in particular I've seen it in serialization to/from the client e.g. JavaBin. ",
            "author": "David Smiley",
            "id": "comment-16444488"
        }
    ]
}