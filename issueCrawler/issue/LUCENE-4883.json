{
    "id": "LUCENE-4883",
    "title": "Hide FieldCache behind an UninvertingFilterReader",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "From a discussion on the mailing list:\n{{\nrmuir:\nI think instead FieldCache should actually be completely package\nprivate and hidden behind a UninvertingFilterReader and accessible via\nthe existing AtomicReader docValues methods.\n}}",
    "attachments": {
        "LUCENE-4883.patch": "https://issues.apache.org/jira/secure/attachment/12575496/LUCENE-4883.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-26T09:59:28+0000",
            "content": "Here's a preliminary patch, implementing UninvertedFilterReader and cutting over DocTermOrdsRangeFilter to use it.\n\nSome questions:\n\n\twhich package should this stuff be in?  FieldCache is in o.a.l.search, and the reader is in o.a.l.index.\n\tthere are a bunch of FieldCache-specific queries and filters.  Can these just be reworked to be DV-specific instead?\n\tcan we consolidate the various Ints, Floats, Shorts etc FieldCache interfaces into NumericDocValues?\n\tthis still uses the global FieldCache.  Should the caches be moved to the readers instead?\n\n ",
            "author": "Alan Woodward",
            "id": "comment-13613652"
        },
        {
            "date": "2013-03-26T11:38:42+0000",
            "content": "+1, I think this (moving FieldCache under UnInvertingFilterReader) is a great idea, and the patch looks like a great start!  But I assume the plan is to remove oal.search.FieldCache entirely right (after everything is cutover)?\n\nwhich package should this stuff be in? FieldCache is in o.a.l.search, and the reader is in o.a.l.index.\n\nI think aol.index is the right place.\n\nthere are a bunch of FieldCache-specific queries and filters. Can these just be reworked to be DV-specific instead?\n\nI think they should all cutover to DV?  Maybe we should make a branch for this ... seems biggish \n\ncan we consolidate the various Ints, Floats, Shorts etc FieldCache interfaces into NumericDocValues?\n\nI think so ... this would happen \"for free\" once we cutover direct FieldCache consumers to DocValues.\n\nthis still uses the global FieldCache. Should the caches be moved to the readers instead?\n\nI think so. ",
            "author": "Michael McCandless",
            "id": "comment-13613707"
        },
        {
            "date": "2013-03-26T12:25:55+0000",
            "content": "But I assume the plan is to remove aol.search.FieldCache entirely\n\nI wasn't going to initially - just make it package private.  But thinking about it, can we just put a map of fieldnames->XXXDocValues in a threadlocal on UninvertingFilterReader (like on SegmentCoreReaders)?  That makes things a lot cleaner.  We'd need a way to purge the map, though.\n\nMaybe we should make a branch for this\n\nHaving just spent an hour or so trying to cut things over, yes, that's probably a good idea   It touches a lot of the codebase.  Should simplify things like SortField a lot though. ",
            "author": "Alan Woodward",
            "id": "comment-13613729"
        },
        {
            "date": "2013-03-26T12:31:33+0000",
            "content": "I've been thinking about this in a lot of detail over the last few months, so I have a few more ideas (i'm not sure if this is all really the best/easiest path):\n\nCurrently FC \"uses\" the docvalues apis, but violates them in a couple of ways. I was trying to think of ways we could do this long term that would give us a filterreader that would also pass checkindex. If we can do this, its nice as someone could call IndexWriter.addIndexes(ir) and \"upgrade\" from fieldcache to docvalues. But unfortunately I think its a good deal of work and not easy to do immediately.\n\nAnyway I think these are the three trickiest parts:\n\n\n\tHow can we make the FilterReader's fieldinfos consistent with the docvalues types? I think it needs to take this information up-front: a mapping of field names from the underlying fieldinfos to docvalues types. Note that this would also make fieldcache \"type insanity\" impossible. It also allows a possibility for someone to easily control which fields are allowed to have fieldcaches built for them.\n\tHow can we prevent non-dense ordinals (e.g. the case where someone \"sorts on a multivalued field\"). In this case today lucene happily allows it, but with a typed-no-insanity-filterreader i think we should throw an exception in this case instead. It means someone specified the incorrect docvalues type for the field (should have been SORTED_SET). Also in the filterreader's ctor, we can try to use underlying statistics on the field to detect if any fields are actually multivalued up front and throw exception early.\n\tHow can we expose \"missing\" for NumericDocValues. One idea is just to see this \"bitset\" as another NumericDocValues field (that only has values of 0 or 1) and provide sugar in the API that makes this happen automatically. I think actually for SortedDocValues we should try to move things to the same thing long-term (instead of returning -1).\n\n ",
            "author": "Robert Muir",
            "id": "comment-13613730"
        },
        {
            "date": "2013-03-26T17:13:05+0000",
            "content": "I think it needs to take this information up-front: a mapping of field names from the underlying fieldinfos to docvalues types\n\nI was wondering about how to do this.  We could add an optional Map<String, DocValuesType> parameter to the UFR constructor - if it's absent, then you can uninvert any field you like, at the risk of fieldcache-insanity.  Otherwise you're restricted to just the fields in the map, but you know you're not going to uninvert the wrong type.  Applications like Solr or ES can manage the types outside of UFR using their own field type information.\n\nHow can we expose \"missing\" for NumericDocValues\n\nI was going to move the FieldCache#getDocsWithField() method to AtomicReader, but I see that this doesn't actually work in the same way with DocValues at the moment.\n\nMaybe for the moment we should just get FieldCache moved into UFR and worry about passing CheckIndex in another issue?  Unless you think that we'll end up having to make major changes if we don't build this in from the beginning.  I'm new to a lot of this part of the codebase, so all advice is very welcome here  ",
            "author": "Alan Woodward",
            "id": "comment-13614316"
        },
        {
            "date": "2013-03-27T10:39:59+0000",
            "content": "\nI was wondering about how to do this. We could add an optional Map<String, DocValuesType> parameter to the UFR constructor - if it's absent, then you can uninvert any field you like, at the risk of fieldcache-insanity. \n\nWhy allow this? I don't think we should do this. it also prevents it from working with anything that checks fieldinfos.\n\n\nMaybe for the moment we should just get FieldCache moved into UFR and worry about passing CheckIndex in another issue? Unless you think that we'll end up having to make major changes if we don't build this in from the beginning. I'm new to a lot of this part of the codebase, so all advice is very welcome here\n\nI think its a pretty big deal that a filterreader pass checkindex, otherwise its corrupt, and will behave in a corrupt way. there is also nothing to prevent someone from calling IW.addIndexes(IR) with it and making a truly corrupt index.\n\nI'm willing to budge on this though, if we want to add this filterreader that doesnt pass checkindex, its ok to me as long as IndexWriter.addIndexes itself internally calls checkIndex on the incoming filterreader to prevent corruption. ",
            "author": "Robert Muir",
            "id": "comment-13615097"
        },
        {
            "date": "2013-03-27T22:23:59+0000",
            "content": "New patch, copying the uninvert logic from FieldCacheImpl into a new Uninverter class (I haven't worked out how to implement the NumericDocValues uninverter yet - pointers welcome), adding a cache to the UninvertingFilterReader itself and checking uninversions against a map of fieldnames to DocValuesTypes passed in as a constructor argument. ",
            "author": "Alan Woodward",
            "id": "comment-13615841"
        },
        {
            "date": "2013-04-02T15:50:38+0000",
            "content": "New patch, with a NumericDocValues uninverter.  Also a basic test.\n\nNumericDocValues doesn't work with 32-bit values yet (the test for IntField fails); I need to somehow detect at uninversion-time how wide the indexed values are. ",
            "author": "Alan Woodward",
            "id": "comment-13619939"
        },
        {
            "date": "2013-04-02T15:56:58+0000",
            "content": "What does \"NumericDocValues uninverter\" mean?  DocValues are inherently un-inverted. ",
            "author": "David Smiley",
            "id": "comment-13619944"
        },
        {
            "date": "2013-04-02T15:59:07+0000",
            "content": "Something that will uninvert a LongField or DoubleField into a NumericDocValues representation. ",
            "author": "Alan Woodward",
            "id": "comment-13619945"
        },
        {
            "date": "2013-04-12T16:11:46+0000",
            "content": "OK, here's a patch that attempts to solve the problem of 32-bit vs 64-bit numeric values.  I don't really like it, but it seems to work, so it's a start.  Users of UninvertedFilterReader have to specify up-front the width of numeric fields they wish to uninvert.\n\nThis is hacky for any number of reasons, not the least of which is I have to define a whole new set of DocValuesTypes on Uninverter, which is a lot less elegant than just using the existing FieldInfo ones.  There doesn't seem to be a good way of detecting this at uninvert-time from the FieldInfo data, though.  We could assume 64-bit values and fall back to 32-bit if we encounter an exception, but I worry that we're getting a performance hit here for every 32-bit field. ",
            "author": "Alan Woodward",
            "id": "comment-13630241"
        },
        {
            "date": "2013-04-12T16:16:29+0000",
            "content": "Alan i didnt look closely, but could GrowableWriter be used to avoid the hack? that way you only take up space relevant to the bits you are actually using... ",
            "author": "Robert Muir",
            "id": "comment-13630248"
        },
        {
            "date": "2013-04-12T16:21:28+0000",
            "content": "Actually I've convinced myself that checking for a NumberFormatException is a better way of doing this... ",
            "author": "Alan Woodward",
            "id": "comment-13630255"
        },
        {
            "date": "2013-04-12T16:25:23+0000",
            "content": "could GrowableWriter be used to avoid the hack?\n\nI don't think so, because this is to do with reading the already-indexed bytes and converting them back to longs or ints.  Unless I've got the wrong end of the stick here. ",
            "author": "Alan Woodward",
            "id": "comment-13630263"
        },
        {
            "date": "2018-07-02T14:45:23+0000",
            "content": "This was done in LUCENE-5666 ",
            "author": "Alan Woodward",
            "id": "comment-16530024"
        }
    ]
}