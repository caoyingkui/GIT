{
    "id": "LUCENE-4981",
    "title": "Deprecate PositionFilter",
    "details": {
        "components": [],
        "fix_versions": [
            "4.4"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "According to the documentation (http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters#solr.PositionFilterFactory), PositionFilter is mainly useful to make query parsers generate boolean queries instead of phrase queries although this problem can be solved at query parsing level instead of analysis level (eg. using QueryParser.setAutoGeneratePhraseQueries).\n\nSo given that PositionFilter corrupts token graphs (see TestRandomChains), I propose to deprecate it.",
    "attachments": {
        "LUCENE-4981.patch": "https://issues.apache.org/jira/secure/attachment/12581902/LUCENE-4981.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-05-06T16:06:46+0000",
            "content": "Here is the patch for 4.x. The patch for trunk is simpler as PositionFilter and PositionFilterFactory would simply be removed. ",
            "author": "Adrien Grand",
            "id": "comment-13649820"
        },
        {
            "date": "2013-05-06T21:49:56+0000",
            "content": "Adrien, can you hold off committing for a little bit?  I'm not sure if QueryParser.setAutoGeneratePhraseQueries is sufficient for all cases that the PositionFilter hack addresses - I want to do some investigation.  ",
            "author": "Steve Rowe",
            "id": "comment-13650137"
        },
        {
            "date": "2013-05-06T22:04:54+0000",
            "content": "Sure I can wait. (Even when committed, the old behavior will still be available by using luceneMatchVersion=4.3).\n\nI would like to start marking all our broken components (the offenders in TestRandomChains) as deprecated so that people start thinking about ways to solve their problems without them, stop getting highlighting bugs and can eventually smoothly upgrade to 5.0 when we release it. I already started deprecating/fixing some tokenizers / token filters for 4.4 (LUCENE-4955 and LUCENE-4963) and would like to get as many of them fixed as possible for the next release. ",
            "author": "Adrien Grand",
            "id": "comment-13650160"
        },
        {
            "date": "2013-05-06T22:15:45+0000",
            "content": "Thanks for working on fixing the broken stuff.\n\nIn addition to use cases, I want to investigate the exact nature of the brokenness PositionFilter introduces - maybe it's fixable?  I'll re-enable it in TestRandomChains and iterate until it breaks. ",
            "author": "Steve Rowe",
            "id": "comment-13650164"
        },
        {
            "date": "2013-05-06T22:19:17+0000",
            "content": "I'm not sure its fixable: by definition it corrupts the structure because you lose all posincs. so synonyms no longer become synonyms, holes disappear, or whatever. and this doesnt even factor in posLength... ",
            "author": "Robert Muir",
            "id": "comment-13650166"
        },
        {
            "date": "2013-05-06T22:25:19+0000",
            "content": "The comment in TestRandomChains says:\n\n\n// TODO: corrumpts graphs (offset consistency check):\nPositionFilter.class,\n\n\n\nwhich is what made me wonder what about the nature of brokenness: why are offsets a problem?\n\nI agree, Robert, PositionFilter corrupts by design.  And if we do end up keeping it, position length should be addressed (it's not now), maybe by always setting it to 1. ",
            "author": "Steve Rowe",
            "id": "comment-13650176"
        },
        {
            "date": "2013-05-06T22:28:17+0000",
            "content": "why are offsets a problem?\n\nThere are invariants that need to be maintained by token filters: all tokens that start at the same position must have the same start offset and all tokens that end at the same position (start position + position length) must have the same end offset (see ValidatingFilter). By arbitrarily changing position increments, PositionFilter breaks these invariants. ",
            "author": "Adrien Grand",
            "id": "comment-13650177"
        },
        {
            "date": "2013-05-06T22:41:21+0000",
            "content": "\nwhich is what made me wonder what about the nature of brokenness: why are offsets a problem?\n\nI think Adrien describes it correctly: afaik it doesn't do anything super-evil like make start offsets go backwards or anything, but it breaks those invariants Adrien describes which can cause a follow-on-filter (e.g. shingle) to cause further craziness, e.g. things going backwards or endOffset < startOffset or other problems. ",
            "author": "Robert Muir",
            "id": "comment-13650191"
        },
        {
            "date": "2013-05-06T22:43:19+0000",
            "content": "Thanks for the pointer Adrien, I'll take a look at ValidatingFilter.\n\nIt might be possible, by creating new positions, to enable offset consistency in PositionFilter.  Not sure it's worth the effort though. ",
            "author": "Steve Rowe",
            "id": "comment-13650193"
        },
        {
            "date": "2013-05-06T22:47:51+0000",
            "content": "The Validatingfilter should be the same logic in BaseTokenStreamTestCase:196\n\nI think its in a separate filter because then its applied at each \"stage\" of the analysis in TestRandomChains so if there is a bug in a complex analysis chain we know the culprit. ",
            "author": "Robert Muir",
            "id": "comment-13650195"
        },
        {
            "date": "2013-05-13T17:53:05+0000",
            "content": "Steve, may I commit this patch? ",
            "author": "Adrien Grand",
            "id": "comment-13656171"
        },
        {
            "date": "2013-05-14T12:18:14+0000",
            "content": "Adrien, 24 more hours, please? ",
            "author": "Steve Rowe",
            "id": "comment-13657002"
        },
        {
            "date": "2013-05-14T12:21:28+0000",
            "content": "Oh sure, I didn't want to rush you. Take the time you need. ",
            "author": "Adrien Grand",
            "id": "comment-13657005"
        },
        {
            "date": "2013-05-15T16:32:39+0000",
            "content": "Adrien,\n\nI looked http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters#solr.PositionFilterFactory, and where it originally came from (http://markmail.org/message/g4habmbyeuckmix6 and LUCENE-1380), and I don't think existing query parser functionality, including QueryParser.setAutoGeneratePhraseQueries, will cover the use case it was created to handle.\n\nThat use case is roughly: given an indexed non-tokenized string field (e.g. \"a b\"), and a multi-word query against that field, create disjunction query of all possible word n-grams, where 0<n<N and N is as large as the expected longest query.  E.g. a query \"a b c\" would result in \"'a' OR 'a b' OR 'a b c' OR 'b' OR 'b c' OR 'c'\", and would match a doc with field value \"a b\".\n\nmck, the guy who started the thread and created the issue, was able to handle this use case by stringing together:\n\n\n\tQuoting the query, to allow the configured analyzer to see all of the terms instead of one-at-a-time\n\tShingleFilter, to create the n-grams\n\tThe new PositionFilter, to place all terms at the same position\n\tQueryParser's synonym handling functionality, which produces a MultiPhraseQuery, which when given multiple terms at the same single position, creates a BooleanQuery with one SHOULD TermQuery for each term.\n\n\n\nWithout PositionFilter, is there some way to achieve the same goal?\n\nI don't think we should get rid of PositionFilter unless we have an alternate way to handle the (IMHO legitimate) use case it was originally designed to cover. ",
            "author": "Steve Rowe",
            "id": "comment-13658517"
        },
        {
            "date": "2013-05-15T17:08:23+0000",
            "content": "Without PositionFilter, is there some way to achieve the same goal?\n\nMy understanding is that this use-case would like the query parser to interpret phrase queries as sub-phrase queries. But instead of creating a specific query parser in order to process phrase queries differently (by overriding newFieldQuery for example), it tries to hack the token stream so that the default query parser generates the expected query. So I don't really think this is a use-case for PositionFilter? ",
            "author": "Adrien Grand",
            "id": "comment-13658546"
        },
        {
            "date": "2013-05-15T17:47:48+0000",
            "content": "So I don't really think this is a use-case for PositionFilter?\n\nI agree, subclassing the QP and overriding newFieldQuery and getFieldQuery should be sufficient to handle this use case.  Current PositionFilter users will have to maintain their own code outside of Lucene and Solr's codebase, rather than having a configuration-only solution.\n\nI think the @deprecated annotation on PositionFilter in branch_4x should be augmented to help people find this alternative.  Similarly, in the backcompat section of trunk CHANGES.txt, and/or MIGRATE.txt, this issue should be mentioned. ",
            "author": "Steve Rowe",
            "id": "comment-13658577"
        },
        {
            "date": "2013-05-16T11:00:56+0000",
            "content": "Thanks for your feedback Steve. I updated the patch to say that the problems that were solved by PositionFilter should be solved at query parsing level, does it look better? ",
            "author": "Adrien Grand",
            "id": "comment-13659434"
        },
        {
            "date": "2013-05-16T15:00:10+0000",
            "content": "+1, thanks Adrien! ",
            "author": "Steve Rowe",
            "id": "comment-13659608"
        }
    ]
}