{
    "id": "LUCENE-4418",
    "title": "Improve RecursivePrefixTreeFilter's performance heuristic tunables",
    "details": {
        "components": [
            "modules/spatial"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "RecursivePrefixTreeFilter recursively decomposes grid cells until it gets to a threshold grid level (e.g. 4 away from max levels), at which point it does a brute force scan because it's faster once the number of terms is smaller.  So if max levels is 10, then if the threshold is 4 then it will switch to scanning at 6.  Ideally, the filter would know exactly how many terms there are in that grid \u2013 i.e. given a hi & lo term, determine how many indexed terms are in-between without actually iterating to find out.  \n\nInstead, it could use the # docs that a grid cell has as a heuristic.  It's not perfect but I think its much better because it's dynamic based on density of actual indexed data.  It's not perfect because many documents could refer to the same indexed point, or few documents with multi-valued data could refer to many indexed points.\n\nBefore I do this, I need to re-invigorate my testing efforts so I can come up with a default threshold.  And it's also dependent on things like query shape complexity.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}