{
    "id": "LUCENE-5326",
    "title": "Add enum facet method to Lucene facet module",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I've been testing Solr facet performance, and the enum method works\nvery well for low cardinality (not many unique values) fields.  So I\nthink we should fold a similar option into Lucene's facet module.",
    "attachments": {
        "LUCENE-5326.patch": "https://issues.apache.org/jira/secure/attachment/12611842/LUCENE-5326.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-11-03T23:54:03+0000",
            "content": "Initial rough patch, tons of nocommits, but testBasic and testRandom\nseem to pass.  This differs somewhat from Solr's approach:\n\n\n\tIt's NRT-friendly (bitsets are recorded per segment, not per top-level reader).\n\n\n\n\n\tIt handles hierarchical facets as long as they are single-valued\n    (it acts like the NO_PARENTS ord policy).\n\n\n\n\n\tCutover to the facet module APIs: you use FacetFields to index,\n    pass List<FacetRequest>, get back List<FacetResult>, etc.\n\n\n\n\n\tAll dims are indexed as a single field ($enumfacets currently), so\n    it's fine to have many, many dims.\n\n\n\n\n\tIt's not a cache: instead, it loads bitsets for all dims in the\n    segment the first time it sees that segment.\n\n\n\nAlso, I modified RamUsageEstimator so you can optionally pass an\nObjectFilter to limit what sizeOf visits. ",
            "author": "Michael McCandless",
            "id": "comment-13812524"
        },
        {
            "date": "2013-11-04T09:57:52+0000",
            "content": "Why does the app need to explicitly add the facets as \"enum\"? I mean, if you use FacetFields, it already adds the drilldown terms (effectively as StringField), and I thought the 'enum' method (like EnumFacetsAccumulator) will use the drilldown terms instead of the category list? At least, I don't see FF.addEnumFields doing something special when it adds the fields...\n\nI also think that it's wrong that the facets aren't added to the taxonomy. E.g. if you start w/ a dimension that's small and you choose to optimize faceted search with 'enum', but then the dimension grows, so much that enum stops performing or costs too much RAM, what will you do - reindex the content?\n\nIf it's possible to index facets as usual, only optimize their accumulation, I think that's best. It will be like aggregating from Lucene45DVF, DirectDVF or CachedOrds (RAM grows with each, but performance improves) - it's a search-time decision, not indexing.\n\nI haven't done a deep review of the patch yet, but in EnumFacetsAccumulator's jdocs you write \"you should index normally e.g. StringField...\" \u2013 that's wrong? Currently you have to index using FF.addEnumFields? ",
            "author": "Shai Erera",
            "id": "comment-13812721"
        },
        {
            "date": "2013-11-04T10:56:47+0000",
            "content": "Why does the app need to explicitly add the facets as \"enum\"? I mean, if you use FacetFields, it already adds the drilldown terms (effectively as StringField), and I thought the 'enum' method (like EnumFacetsAccumulator) will use the drilldown terms instead of the category list?\n\nBut why index into the CLI if you know you want to use the enum method?\n\nI also think that it's wrong that the facets aren't added to the taxonomy. E.g. if you start w/ a dimension that's small and you choose to optimize faceted search with 'enum', but then the dimension grows, so much that enum stops performing or costs too much RAM, what will you do - reindex the content?\n\nHmm, it seems strange to pollute the taxo index w/ labels you won't use.  I agree it would be nice to have the flexibility to switch to the \"normal\" facet method at search time, but the app can also re-index for that?  It seems strange to carry so much \"dead weight\" just for that freedom?\n\nI haven't done a deep review of the patch yet, but in EnumFacetsAccumulator's jdocs you write \"you should index normally e.g. StringField...\" \u2013 that's wrong? \n\nSorry, that's a relic; I'll remove it. ",
            "author": "Michael McCandless",
            "id": "comment-13812746"
        },
        {
            "date": "2014-04-16T12:54:28+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970763"
        }
    ]
}