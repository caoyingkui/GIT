{
    "id": "SOLR-3765",
    "title": "Wrong handling of documents with same id in cross collection searches",
    "details": {
        "affect_versions": "4.0",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "search",
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Dialog with myself from solr-users mailing list:\n\nPer Steffensen skrev:\n\nHi\n\nDue to what we have seen in recent tests I got in doubt how Solr search is actually supposed to behave\n\n\tSearching with \"distrib=true&q=:&rows=10&collection=x,y,z&sort=timestamp asc\"\n\t\n\t\tIs Solr supposed to return the 10 documents with the lowest timestamp across all documents in all slices of collection x, y and z, or is it supposed to just pick 10 random documents from those slices and just sort those 10 randomly selected documents?\n\t\tPut in another way - is this search supposed to be consistent, returning exactly the same set of documents when performed several times (no documents are updated between consecutive searches)?\n\t\n\t\n\n\n\nFortunately I believe the answer is, that it ought to \"return the 10 documents with the lowest timestamp across all documents in all slices of collection x, y and Z\". The reason I asked was because I got different responses for consecutive simular requests. Now I believe it can be explained by the bug described below. I guess they you do cross-collection/shard searches, the \"request-handling\" Solr forwards the query to all involved shards simultanious and merges sub-results into the final result as they are returned from the shards. Because of the \"consider documents with same id as the same document even though the come from different collections\"-bug it is kinda random (depending on which shards responds first/last), for a given id, what collection the document with that specific id is taken from. And if documents with the same id from different collections has different timestamp it is random where that document ends up in the final sorted result.\n\nSo i believe this inconsistency can be explained by the bug described below.\n\n\n\n\tA search returns a \"numFound\"-field telling how many documents all in all matches the search-criteria, even though not all those documents are returned by the search. It is a crazy question to ask, but I will do it anyway because we actually see a problem with this. Isnt it correct that two searches which only differs on the \"rows\"-number (documents to be returned) should always return the same value for \"numFound\"?\n\n\n\nWell I found out myself what the problem is (or seems to be) - see:\nhttp://lucene.472066.n3.nabble.com/Changing-value-of-start-parameter-affects-numFound-td2460645.html\nhttp://lucene.472066.n3.nabble.com/numFound-inconsistent-for-different-rows-param-td3997269.html\nhttp://lucene.472066.n3.nabble.com/Solr-v3-5-0-numFound-changes-when-paging-through-results-on-8-shard-cluster-td3990400.html\n\nUntil 4.0 this \"bug\" could be \"ignored\" because it was ok for a cross-shards search to consider documents with identical id's as dublets and therefore only returning/counting one of them. It is still, in 4.0, ok within the same collection, but across collections identical id's should not be considered dublicates and should not reduce documents returned/counted. So i believe this \"feature\" has now become a bug in 4.0 when it comes to cross-collections searches.\n\n\nThanks!\n\nRegards, Steff",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13444061",
            "date": "2012-08-29T13:46:12+0000",
            "content": "Thanks for tracking this down Per, I agree this is a bug for multi-collection searches. "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13445210",
            "date": "2012-08-30T19:17:22+0000",
            "content": "No problem. Glad to help. \n\nWe will not be working on a fix. We will do a workaround in our own application, so that we will not have id-clash across collections. We need to control ids very strictly in order for our fail-on-unique-key-constraint-violaton to serve its purpose correctly. Basically we just prefix our ids with the name of the collection - will still provide unique-key-clash within the collection but will not prevent documents with same id (except for the collection-name-part) from being returned/counted. "
        },
        {
            "author": "Furkan KAMACI",
            "id": "comment-13760023",
            "date": "2013-09-06T07:43:47+0000",
            "content": "Did anything have done for this issue? "
        }
    ]
}