{
    "id": "SOLR-1982",
    "title": "Leading wildcard queries work for \"all\" fields if ReversedWildcardFilterFactory is used for \"any\" field",
    "details": {
        "affect_versions": "1.4,                                            1.4.1",
        "status": "Closed",
        "fix_versions": [
            "4.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "As noted on the mailing list...\n\nhttp://search.lucidimagination.com/search/document/8064e6877f49e4c4/leading_wildcard_query_strangeness\n\n...SolrQueryParse supports leading wild card queries for any field as long as at least one field type exists in the schema.xml which uses ReversedWildcardFilterFactory \u2013 even if that field type is never used.\n\nThis is extremely confusing, and ost likely indicates a bug in how SolrQueryParser deals with ReversedWildcardFilterFactory",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12884847",
            "date": "2010-07-02T22:58:30+0000",
            "content": "The behavior comes from the fact that during initialization, SolrQueryParser.checkAllowLeadingWildcards calls setAllowLeadingWildcard(true); if any field type uses ReversedWildcardFilterFactory.\n\nThen in getWildcardQuery, it the specific field type before calling ReverseStringFilter.reverse, but then, regardless of field type, delegates to super.getWildcardQuery which will allow the leading wildcard for all fields based on the previous call to setAllowLeadingWildcard(true).\n\nI'm not really sure what the intention was for fields that don't use ReversedWildcardFilterFactory, but the current behavior makes no sense at all.  Either leading wildcards should only be allowed for fieldtypes that use ReversedWildcardFilterFactory, or the QParser should have a config option to control it for other fields \u2013 but as it stands it makes no sense what so ever. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13003011",
            "date": "2011-03-05T17:56:49+0000",
            "content": "A perhaps unexpected side-effect of this bug is that people tell me  fieldname:* works as expected for them (without knowing what ReversedWildcardFilterFactory is, it just happens to be defined in the schema somewhere).  They didn't know it's actually not supposed to work, they they should have done fieldname:[* TO *].  I can't blame them from thinking what they did should work; I agree with them.  But it works for the wrong reasons, as explained in this bug report.  I deal a lot with wildcards so I'm intimately familiar with the issues involved.\n\nI think Hoss is on to the right solution.  Always enable leading wildcards for Lucene's query parser, and then (here's my suggestion) getWildCardQuery() can let a simple '' through as equivalent to a [* TO *] range query. If it's not a simple '' the existing logic is mostly fine, though it should throw an error to prevent a leading wildcard when ReversedWildcardFilterFactory isn't used. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13003012",
            "date": "2011-03-05T18:09:40+0000",
            "content": "\nand then (here's my suggestion) getWildCardQuery() can let a simple '*' through as equivalent to a [* TO *] range query.\n\nCurious, what is the reasoning here. In trunk wildcard query already \"rewrites\" to just passing thru the underlying TermsEnum in this case (as the DFA is Total). So solr doesn't need to do anything here. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13003073",
            "date": "2011-03-06T00:11:51+0000",
            "content": "It's true that the existing code path already supports a plain '*'. What I meant to say was that in adding the code to throw an error when ReverseWildcardFilterFactory is not in the field and there is a leading wildcard, do still support a plain '*' anyway. Sorry for any confusion. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13157350",
            "date": "2011-11-26T00:32:19+0000",
            "content": "I ran onto this myself while looking at the query parser code again.  We introspect all of the schema field types every time a query parser is created - really not ideal for performance.  Perhaps this should be cached in the schema, or at \n\nZero length prefix queries have pretty much always been allowed in solr, and leading wildcard queries have been effectively allowed with the default example schema since '09.  Seems like when we get around to fixing this stuff, permissive should be the default, but should somehow be overridable (or maybe we can punt to a higher level parser like edismax to handle per-field overrides).\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13575102",
            "date": "2013-02-09T07:06:20+0000",
            "content": "It appears that this issue has been addressed, probably by inadvertent side-effect of something else.  It doesn't matter any more if ReversedWildcardFilterFactory is in the schema for any field or not; field:* now works.  I tried this on 4.1 just now.  I know this used to be a problem back in Solr 3 when I wrote about it in my book. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13575112",
            "date": "2013-02-09T08:16:34+0000",
            "content": "I should note that this syntax may seem more intuitive, but it is a different code-path that sidesteps the smarts that a field type might have.  For example timestamp:* is much slower than timestamp:[* TO *] assuming a precision step was used.  Arguably this is a bug from a user perspective, who doesn't know/care about an implementation detail like that. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16067354",
            "date": "2017-06-28T22:20:51+0000",
            "content": "David Smiley do you think that this could be closed now? I'm doing some JIRA cleanup... "
        },
        {
            "author": "David Smiley",
            "id": "comment-16067652",
            "date": "2017-06-29T03:19:03+0000",
            "content": "Closing as fixed in 4.0 although it might have been fixed in a later 4.x release.  I just verified it's fixed in 4.10.4 with a trivial test in a project of mine. "
        }
    ]
}