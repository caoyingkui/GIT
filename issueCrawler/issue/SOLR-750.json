{
    "id": "SOLR-750",
    "title": "DateField.parseMath doesn't handle non-existent Z",
    "details": {
        "affect_versions": "1.3",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "I've run into situations when trying to use SOLR-540 (wildcard highlight spec) such that if attempts to highlight a date field, I get a stack trace from DateField.parseMath puking because there isn't a \"Z\" at the end of an otherwise good date-time string.  It was very easy to fix the code to make it react gracefully to no Z.  Attached is the patch.  This bug isn't really related to SOLR-540 so please apply it without waiting for 540.",
    "attachments": {
        "SOLR-750_DateField_no_Z.patch": "https://issues.apache.org/jira/secure/attachment/12389402/SOLR-750_DateField_no_Z.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12627877",
            "date": "2008-09-03T01:02:00+0000",
            "content": "I'm not really sure why the code would try to highlight a date field (sounds like a bug in the SOLR-540 patch, and yet another great example of why i'm opposed to things like SOLR-540) but this patch doesn't really make sense to me either ... the \"Z\" is not optional.  it is a mandatory part of the input format.\n\nWhen dates are indexed the internal representation doesn't include the 'Z' but the internal representation is not valid input for the parseMath method.\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-12627890",
            "date": "2008-09-03T02:28:52+0000",
            "content": "Here's the relevant snippet of the stack trace that occurs.\n\n20:27:30,169 ERROR [SolrCore] org.apache.solr.common.SolrException: Invalid Date String:'2008-08-27T06:44:13.000'\n\tat org.apache.solr.schema.DateField.parseMath(DateField.java:167)\n\tat org.apache.solr.schema.DateField.toInternal(DateField.java:138)\n\tat org.apache.solr.schema.FieldType$DefaultAnalyzer$1.next(FieldType.java:315)\n\tat org.apache.solr.highlight.TokenOrderingFilter.next(DefaultSolrHighlighter.java:389)\n\tat org.apache.lucene.analysis.TokenStream.next(TokenStream.java:91)\n\tat org.apache.lucene.search.highlight.Highlighter.getBestTextFragments(Highlighter.java:230)\n\tat org.apache.solr.highlight.DefaultSolrHighlighter.doHighlighting(DefaultSolrHighlighter.java:310)\n\tat org.apache.solr.handler.component.HighlightComponent.process(HighlightComponent.java:83)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:169)\n\n\n\n(I'm a fan of SOLR-540 because I've got LOTS of fields and don't want to enumerate each of them.) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12627919",
            "date": "2008-09-03T06:34:28+0000",
            "content": "The exception is correct \u2013 that is an invalid date string (as far as being input to parseMath, toInternal, or DateField.getAnalyzer().tokenStream is concerned)\n\nThe SOLR-540 patch is doing something it shouldn't be (which seems likely since it makes absolutely no sense to try and highlight a DateField) and/or the Highlighter has a bug (why is getBestTextFragments passing an indexed token to an Analzyer?)\n\nEither way: parseMath is doing the right thing. "
        },
        {
            "author": "David Smiley",
            "id": "comment-12731957",
            "date": "2009-07-16T14:23:25+0000",
            "content": "Ignoring the long-gone circumstances in which I encountered and reported this issue originally...\n I do feel strongly that Solr shouldn't force me to specify a Z when Solr doesn't really have any time zone support.  And as such it shouldn't emit the \"Z\" in date output either.  If I'm using Solr and want to feed it dates in a particular time zone, or perhaps a local-time of day, and clients expect this, then why should Solr force me to specify a timezone?  I find it irritating. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12732246",
            "date": "2009-07-16T23:22:41+0000",
            "content": "Solr does have timezone support: it supports UTC ... that may sound like a cop-out answer, but it's true.  DateField specifies that it only accepts UTC formated dates, and stores the UTC date in the index, it knows that a date it receives as input is UTC because it ends in \"Z\"\n\nIn the future, DateField might start allowing documents to be indexed with alternate timezone specifiers, and convert to UTC internally before writing to the index; or new options might get added at some point to allow query clients to specify what timezone they are in, and solr could convert all the internal dates to that timezone for them, etc... \n\n...if/when features like those get implemented, they can only work if there is a standardized internal format, and at hte moment the only way DateField can ensure that there is a standardized internal format is if it forces the clients updating the index to only send UTC dates.\n\nIf I'm using Solr and want to feed it dates in a particular time zone, or perhaps a local-time of day, and clients expect this, then why should Solr force me to specify a timezone? I find it irritating.\n\nthere's nothing to stop you from lying to solr about the timezone.  If all of the update/search clinets for your instance are in on the secret that the times are really GMT-0730 even though solr thinks they are UTC, then no one gets hurt.\n\nBut if we droped the requirement that date inputs have the \"Z\" suffix, people would assume they can index stuff like  1995-12-31T23:59:59-07:30 and then be confused when it doesn't work. "
        }
    ]
}