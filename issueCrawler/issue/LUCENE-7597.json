{
    "id": "LUCENE-7597",
    "title": "MultiFieldQueryParser does not honor default operator when there is a special character",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "6.3",
        "status": "Open",
        "type": "Bug",
        "components": [
            "core/queryparser"
        ],
        "fix_versions": []
    },
    "description": "simple code snippet\n\nMultiFieldQueryParser mp = new MultiFieldQueryParser(new String[]\n{\"test\"}\n, new StandardAnalyzer());\n    mp.setDefaultOperator(Operator.AND);\n    System.out.println(mp.parse(qstring));\n\nif qstring is just 2 tokens, e.g: \"you me\", behavior is correct:\n\n+(test:you) +(test:me)\n\nnow if qstring contains 2 tokens connected by a special char, e.g.: \"you&me\", behavior is always OR, e.g.\n\n(test:you) (test:me)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15757257",
            "date": "2016-12-17T16:11:26+0000",
            "content": "Made the following change to getMultiFieldQuery() method and seems to work as expected.\n\n@Override\n  protected Query getMultiFieldQuery(List<Query> queries) throws ParseException {\n    if (queries.isEmpty()) \n{\n      return null; // all clause words were filtered away by the analyzer.\n    }\n    BooleanQuery.Builder query = newBooleanQuery();\n    query.setDisableCoord(true);\n    BooleanClause.Occur occur = getDefaultOperator() == OR_OPERATOR ? BooleanClause.Occur.SHOULD : BooleanClause.Occur.MUST;    \n    for (Query sub : queries) \n{\n      query.add(sub, occur);\n    }\n    return query.build();\n  } ",
            "author": "John Wang"
        }
    ]
}