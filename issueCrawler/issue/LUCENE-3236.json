{
    "id": "LUCENE-3236",
    "title": "Make LowerCaseFilter and StopFilter keyword aware, similar to PorterStemFilter",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "PorterStemFilter has functionality to detect if a term has been marked as a \"keyword\" by the KeywordMarkerFilter (KeywordAttribute.isKeyword() == true), and if so, skip stemming.\n\nThe suggestion is to have the same functionality in other filters where it is applicable. I think it may be particularly applicable to the LowerCaseFilter (ie if it is a keyword, don't mess with the case), and StopFilter (if it is a keyword, then don't filter it out even if it looks like a stop word).\n\nBackward compatibility is maintained (in both cases) by adding a new constructor which takes an additional boolean parameter ignoreKeyword. The current constructor will call this new constructor with ignoreKeyword = false.\n\nPatches are attached (for LowerCaseFilter and StopFilter).\n\nI have verified that the analysis JUnit tests run against the updated code, ie, backward compatibility is maintained.",
    "attachments": {
        "lucene-3236-patch.diff": "https://issues.apache.org/jira/secure/attachment/12483639/lucene-3236-patch.diff",
        "scan.pdf": "https://issues.apache.org/jira/secure/attachment/12622978/scan.pdf"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-23T21:09:29+0000",
            "content": "Patch generated with svn diff from the top level Lucene/Solr trunk. Contains updates to LowerCaseFilter and StopFilter to recognize and NOT operate on terms marked with KeywordAttribute.isKeyword.\n(NOTE: also contains changes to changes2html.pl which seem to have been generated automatically). ",
            "author": "Sujit Pal",
            "id": "comment-13054098"
        },
        {
            "date": "2013-07-23T18:44:38+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717010"
        },
        {
            "date": "2014-01-14T15:59:13+0000",
            "content": "Maybe this should get handled directly in class \"TokenFilter\". If I understood the concept of \"Keywords\" correctly they shouldn't get modified by any token filter except if it explicitly wants to operate even on tokens marked as keyword.\n\nInstead of patching every exiting token filter and expecting a token filter developer to know about \"KeywordAttribute\" I suggest to modify the \"TokenFilter\" class to handle tokens wiht \"KeywordAttribute\" internally.\n\nAs far as I understood the concept of token filters the pattern \"Chain of responsibility\" is used here. Currently it is only the \"keywordAttribute\" which changes the \"flow\" of a token but eventually those kind of tokens will increase.\n\nMy suggestion is shown in the attached diagram. Instead of letting a token filter directly call the \"incrementToken\" method of its previous filter I suggest to encapsulate each \"real\" token filter into a wrapper class which delegates calls to defined methods (incrementToken, reset, etc.) if appropriate. So it would be possible to create an \"keywordAwareTokenFilter\" interface. If some token filter implements this interface the encapsulating class (for example named TokenFilterChainElement, or TokenFilterContainer, ...) also calls \"incrementToken\" when a token with the keyword attribute is encountered. ",
            "author": "Bernhard Kraft",
            "id": "comment-13870839"
        },
        {
            "date": "2014-01-14T21:04:41+0000",
            "content": "A proposed solution for adding keyword awareness to EVERY applicable class. Either only classes which really want to operate on keywords would have to get changed or optionally only classes should get wrapped which should NOT operate on keywords.\n\nThe mechanism of bypassing keywords around the realTokenStream (by using a token buffer) still has to get detailed. ",
            "author": "Bernhard Kraft",
            "id": "comment-13871176"
        },
        {
            "date": "2014-04-16T12:54:31+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970786"
        }
    ]
}