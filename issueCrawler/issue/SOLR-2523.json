{
    "id": "SOLR-2523",
    "title": "SolrJ QueryResponse doesn't support range facets",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.4",
            "4.0-ALPHA"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It is possible to get date facets and pivot facets in SolrJ.\n\nqueryResponse.getFacetDate();\nqueryResponse.getFacetPivot();\n\n\nHaving this also for range fields would be nice. Adding this is trivial. Maybe we should deprecate date facet methods in QueryResponse class? Since it is superseded by range facets. Also some set / add / remove methods for setting facet range parameters on the SolrQuery class would be nice.",
    "attachments": {
        "SOLR-2523.patch": "https://issues.apache.org/jira/secure/attachment/12480059/SOLR-2523.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Martijn van Groningen",
            "id": "comment-13037666",
            "date": "2011-05-22T21:10:10+0000",
            "content": "Attached patch that adds response parsing for range facets and two methods for adding range facets on SolrQuery.\n\nOn the QueryResponse class:\n\nList<RangeFacet> facets queryResponse.getFacetRanges()\n\n\n\nOn the SolrQuery class:\n\nsolrQuery.addNumericRangeFacet(\"field\", 1, 10, 1);\nsolrQuery.addDateRangeFacet(\"field\", start, end, \"+1MONTH\");\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13040439",
            "date": "2011-05-27T20:57:28+0000",
            "content": "Hi Martijn, there are some fun things if you run some of the new tests under a thai locale (our tests randomize across all locales so eventually it will hit this one)\n\n\nant test-core -Dtestcase=SolrQueryTest -Dtests.locale=th_TH_TH\n\n\n\nI was trying to ensure the test was correct if the default calendar is not gregorian, but it seems to fail already based on number format...  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13040440",
            "date": "2011-05-27T20:57:35+0000",
            "content": "Hi Martijn, there are some fun things if you run some of the new tests under a thai locale (our tests randomize across all locales so eventually it will hit this one)\n\n\nant test-core -Dtestcase=SolrQueryTest -Dtests.locale=th_TH_TH\n\n\n\nI was trying to ensure the test was correct if the default calendar is not gregorian, but it seems to fail already based on number format... "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13040473",
            "date": "2011-05-27T22:14:16+0000",
            "content": "Nice catch! I've updated the patch, so for the Thai locale all tests in the patch pass.\n\nThe date formatting worked without changing the code. I'm using Solrj's DateUtil for that. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13048310",
            "date": "2011-06-12T13:06:26+0000",
            "content": "I'm currently adding getAsFilterQuery() method for range facets as described here:\nhttp://www.mail-archive.com/solr-user@lucene.apache.org/msg51871.html\n\nI'm currently having a problem with parsing date gaps. DateMathParser is part of Solr core, so I can't use it in SolrJ. I moved it to solr commons, which let me to another issue. The DateMathParser#getNow() method uses SolrRequestInfo which uses a lot of Solr core classes. So I thought I should introduce a CurrentDataSource callback, which decouples the DateMatchParser completely from core. Any thoughts about this approach?\n\nMaybe we should commit the current patch as it is now and open a new issue for adding getAsFilterQuery() method. We can then open another issue for moving the DateMathParser to commons, which I think is a good idea any way. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13048311",
            "date": "2011-06-12T13:22:16+0000",
            "content": "I'm currently having a problem with parsing date gaps.\n\nHmmm, why do you need to parse the gap?  The results returned include absolute times.  For consistency, perhaps a filter query should also use those absolute times returned in the response to construct the filter rather than trying to use date math? "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13048316",
            "date": "2011-06-12T13:47:55+0000",
            "content": "Maybe I don't get something then. Let's take a look at the following example.\n\n     <lst name=\"facet_ranges\">\n      <lst name=\"manufacturedate_dt\">\n        <lst name=\"counts\">\n          <int name=\"2005-02-13T15:26:37Z\">4</int>\n          <int name=\"2006-02-13T15:26:37Z\">7</int>\n          <int name=\"2007-02-13T15:26:37Z\">1</int>\n        </lst>\n        <str name=\"gap\">+1YEAR</str>\n        <date name=\"start\">2005-02-13T15:26:37Z</date>\n        <date name=\"end\">2009-02-13T15:26:37Z</date>\n      </lst>\n    </lst>\n\n\nFor the first facet I need the following fq:\nmanufacturedate_dt:[2005-02-13T15:26:37Z TO 2006-02-13T15:26:37Z}\nI can get this from parsing the date of the first facet and then the second one. This works fine for this example. However this wouldn't work in all cases. For example when dealing with last facet count or when not all facets are returned and the next facet is a few gaps ahead (for example when facet.mincount=1). I think I do need to use the gap then, right? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13048328",
            "date": "2011-06-12T14:03:18+0000",
            "content": "For example when dealing with last facet count \n\nI had thought that \"end\" would deal with this... but it's actually the start of the last range.\n\nor when not all facets are returned and the next facet is a few gaps ahead\n\nAh, right - I hadn't considered mincount>0\n\nI'm not a date-math expert, but is there a problem with using the gap w/o having to parse it (i.e. can we always append it?)\n\nmanufacturedate_dt:[2007-02-13T15:26:37Z TO 2007-02-13T15:26:37Z+1YEAR]\n\n\n\nIf the date stuff is too hard to use, we should consider making the interface easier for all clients instead of just trying to deal with the consequences only in SolrJ.  "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13048338",
            "date": "2011-06-12T14:45:15+0000",
            "content": "I'm not a date-math expert, but is there a problem with using the gap w/o having to parse it (i.e. can we always append it?)\nGood idea! This would be really useful for any client. I think we can change this in SolrQueryParser#getRangeQuery(....) method or in DateField#parseMath(...).\n\nBTW do you think it is a good idea to commit what we have now here? We can then address appending the gap to a date for range queries and the RangeFacet#getAsFilterQuery() method in other issues.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13048421",
            "date": "2011-06-12T19:28:12+0000",
            "content": "BTW do you think it is a good idea to commit what we have now here? We can then address appending the gap to a date for range queries and the RangeFacet#getAsFilterQuery() method in other issues.\n\nSounds fine in general,  but if you're looking for a review of the API here, I've never done much with the higher-level (type safe) SolrJ stuff myself. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13048820",
            "date": "2011-06-13T22:06:42+0000",
            "content": "I'm not a date-math expert, but is there a problem with using the gap w/o having to parse it (i.e. can we always append it?)\n\nthat is exactly how it was designed to be used.  But ultimately i really want to implement SOLR-1896 so no client (in any language) ever has to think about any of this.\n\nGood idea! This would be really useful for any client. I think we can change this in SolrQueryParser#getRangeQuery(....) method or in DateField#parseMath(...).\n\ni'm a little lost ... I don't understand what \"change\" is being suggested in this sentence ... can't the client already access both the values and the gap and concat them?\n\n "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13049012",
            "date": "2011-06-14T06:50:07+0000",
            "content": "Solr-1896 looks like what this issue needs. The change that I suggested involves having the datemath syntax in regular Solr query parser. But I think solr-1896 is just fine for this issue. Maybe changing the regular query parser is a bit too much.... "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13067201",
            "date": "2011-07-18T18:32:33+0000",
            "content": "I'll commit this patch in the coming day or so. So this is without the getAsFilterQuery() method, since this is best fix in SOLR-1896 for all clients. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13070184",
            "date": "2011-07-24T13:48:32+0000",
            "content": "Committed.\n3x branch in revision 1150364\ntrunk in revision 1150365 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106225",
            "date": "2011-09-16T14:48:54+0000",
            "content": "bulk close for 3.4 "
        },
        {
            "author": "Charles Reitzel",
            "id": "comment-14275895",
            "date": "2015-01-13T20:39:04+0000",
            "content": "For generating queries based on range facet results, yes, Solr-1896 will do the right thing.\n\nFor generating labels for the UI, we still need access to DateMathParser on the client side.  Shouldn't be too tricky to de-couple from SolrRequestInfo ... (he says hopefully).\n\nDo you see what I mean? "
        }
    ]
}