{
    "id": "SOLR-6678",
    "title": "Collection/core reload is causing a memory leak",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.10",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "I have a use case where I need to periodically reload a SolrCloud collection. Recently I did ~1k reload operations and noticed that the cluster was running slower and slower, so I connected to it with jconsole and noticed that heap was growing with every reload operation, forcing GC wasn't helping.\n\nSo I took a heap dump and noticed that I have too many SolrCore-s hanging around. \n\nIt's hard for me to grok the root cause of this, but maybe someone more knowledgable in Solr internals can figure it out by looking into this GC root path (see attached image)? If I interpret this correctly, it looks like one SolrCore is referencing another SolrCore through SolrSuggester. Maybe close hook for SolrSuggester component doesn't release everything that it should be releasing (like SolrSuggester.dictionary)?",
    "attachments": {
        "ReloadMemoryLeak.png": "https://issues.apache.org/jira/secure/attachment/12678186/ReloadMemoryLeak.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-10-30T18:06:57+0000",
            "author": "Hoss Man",
            "content": "A quick skimming the code, and i think the problem here is the CloseHook in SolrSuggester is an anonymous object - so it's keeping a ref to the SolrSuggester (and everything it keeps a ref too)...\n\n\n    core.addCloseHook(new CloseHook() {\n      @Override\n      public void preClose(SolrCore core) {\n        if (lookup != null && lookup instanceof Closeable) {\n          try {\n            ((Closeable) lookup).close();\n          } catch (IOException e) {\n            LOG.warn(\"Could not close the suggester lookup.\", e);\n          }\n        }\n      }\n      \n      @Override\n      public void postClose(SolrCore core) {}\n    });\n\n\n\nif we make that it's own private static inner (named) class, it won't keep a refrence to the SolrSuggester \u2013 it just needs a constructor that takes in the Lookup object.\n\ni think that would solve the problem\n\n\n\nactually \u2013 i should probably just be replaced by a top level public \"PreCloseClosableHook\" class that can likeley be reused in other places in the code base...\n\n\npublic class PreCloseClosableHook implements CloseHook {\n  final Closable toClose;\n  final String label;\n  public PreCloseClosableHook(String label, Closable toClose) {\n    this.toClose = toClose;\n    this.label = label;\n  }\n  @Override\n  public void preClose(SolrCore core) {\n    try {\n      toClose.close();\n    } catch (Exception e) {\n      LOG.error(\"Could not close \" + label, e);\n    }\n  }\n}\n\n ",
            "id": "comment-14190512"
        },
        {
            "date": "2014-10-31T08:35:13+0000",
            "author": "Ramkumar Aiyengar",
            "content": "But if this indeed is the problem, then that just exposes the issue that these hooks are not being GC'd? Either the unloaded core is hanging around or the hooks are being accumulated by the reloaded core? ",
            "id": "comment-14191590"
        },
        {
            "date": "2015-02-25T19:54:49+0000",
            "author": "Vitaliy Zhovtyuk",
            "content": "i did 100K reload on techproducts and other cores and i cannot reproduce issue in heap dump. Heap goes down after force GC.\nCan you pls provide exact JRE version, options and solr config? ",
            "id": "comment-14337069"
        },
        {
            "date": "2017-05-05T17:51:32+0000",
            "author": "Erick Erickson",
            "content": "Possibly related? ",
            "id": "comment-15998664"
        }
    ]
}