{
    "id": "LUCENE-30",
    "title": "Field.isIndexed() returns false for UnStored fields",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I run a loop on documents to discover what fields are searchable.  \nUnStored fields return false when I call isIndexed().  Converting these \nfields to Text fields in the indexer corrects the problems.\n\nObviously, using Text fields is a workaround, but I think the behaviour is \nincorrect.\n\nI've reproduced the issue on MacOS X and Linux.  I'm using rc4.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--getIndexedFields.patch": "https://issues.apache.org/jira/secure/attachment/12312191/ASF.LICENSE.NOT.GRANTED--getIndexedFields.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2002-04-10T21:54:11+0000",
            "content": "Could you plese provide a simple, standalone class that demonstrates this bug?\nThanks. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321044"
        },
        {
            "date": "2002-04-27T01:27:07+0000",
            "content": "Hi.  I wrote a class that'll check a lucene index and tell you all the\nsearchable fields in it.  The code is pasted below.  Save it as\n'CheckIsIndexed.java'\n\nRun the class using java from the command line and pass it one argument, the\nname of an index to check.  If you the index does not exist, a one-document\nindex will\nbe created in the current directory with 4 fields, and the analysis will be\nbased on that.\n\nIn my experience, UnStored fields are not returned.  It may be that I'm doing\nsomething wrong, in which case I hope to learn something.\n\nThe getSearchableFields(Directory directory) method may also be of interest to\nother lucene users.\n\nbest, eric\n\n-------------------- CODE BEGINS AFTER THIS LINE ----------------\n/** CheckIsIndexed.java\n\tTest to see if isIndexed() works\n\tApril 2002\n\tEric Fixler <fix@idiom.com>\n\n*/\n\nimport java.util.*;\nimport java.io.*;\n\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.index.*;\nimport org.apache.lucene.document.*;\nimport org.apache.lucene.store.*;\n\npublic class CheckIsIndexed {\n\tprivate Directory directory = null;\n\tprivate int documentCount = 0;\n\tpublic static final boolean DEBUG = true;\n\n\tpublic boolean printAllDocuments = false;\n\n\n\tpublic CheckIsIndexed (String indexName) throws IOException \n{\n\t\tboolean makeIt = this.initializeIndex(indexName);\n\t\tif (makeIt) this.makeIndex();\n\t}\n\n\tprivate boolean initializeIndex(String indexName) throws IOException \n{\n\t\tFile idir = new File(indexName);\n\t\tboolean isNew = ! idir.exists();\n\t\tif (isNew) idir.mkdirs();\n\t\tif (! idir.isDirectory()) throw new IOException(\"Directory \" + indexName + \" does\nnot exist (may be a file?)\");\n\t\tSystem.out.println(\"Getting an index at \"  + idir.getAbsolutePath());\n\t\tif (isNew) System.out.println(\"(created it)\");\n\t\tthis.directory = FSDirectory.getDirectory(idir, false);\n\t\treturn isNew;\n\t}\n\n\tpublic void makeIndex() throws IOException \n{\n\t\tSystem.out.println(\"Opening index...\");\n\t\tIndexWriter writer = new IndexWriter(directory,new StandardAnalyzer(), true);\n\t\tthis.addDocument(writer);\n\t\twriter.optimize();\n\t\twriter.close();\n\t\tdirectory.close();\n\t\tSystem.out.println(\"Done, index closed.\\n\");\n\t}\n\n\tprivate void addDocument(IndexWriter writer) throws IOException \n{\n\t\tSystem.out.println(\"Adding document \" + this.documentCount + \"...\");\n\t\tDocument doc = new Document();\n\t\tdoc.add(Field.UnIndexed(\"unindexed\", \"UnIndexed Field\"));\n\t\tdoc.add(Field.UnStored(\"unstored\", \"Unstored Field: should, however, be indexed,\nno?\"));\n\t\tdoc.add(Field.Text(\"text\", \"Text field: should return true for isIndexed()\"));\n\t\tdoc.add(Field.Text(\"keyword\", \"Keyword field: should return true for isIndexed()\"));\n\t\twriter.addDocument(doc);\n\t\tthis.documentCount++;\n\t}\n\n\tpublic void checkIndex() throws IOException \n{\n\t\tString[] fields = this.getSearchableFields(this.directory);\n\t\tSystem.out.println(\"Searchable field names in directory: \");\n\t\tfor (int i = 0; i < fields.length; i++) System.out.println(\"\\t\" + fields[i]);\n\t\tSystem.out.print(\"\\n\");\n\t}\n\n\t//I suspect there's probably a better way to iterate over the index, but I'm not\nsure how...\n\t/** This method looks at every document in the index and compiles all the searchable\n\t\tfields it finds. */\n\tpublic String[] getSearchableFields(Directory dir) throws IOException {\n\t\tIndexReader reader = IndexReader.open(dir);\n\t\tint count = 0;\n\t\tSet fieldNames = new HashSet();\n\t\tfor (int i = 0; i < reader.maxDoc(); i++) {\n\t\t\ttry { \n\t\t\t\tif (DEBUG && (reader.isDeleted)) \n{ System.out.println(\"deleted doc \" + i); \ncontinue; }\n\t\t\t\tDocument doc = reader.document;\n\t\t\t\tif (DEBUG && (doc == null)) \n{ System.out.println(\"null doc \" + i);  continue; }\n\t\t\t\tif (this.printAllDocuments) System.out.println(\"Analyzing document \" + i + \"...\");\n\t\t\t\tEnumeration en = doc.fields();\n\t\t\t\twhile (en.hasMoreElements()) \n{\n\t\t\t\t\tField field = (Field) en.nextElement();\n\t\t\t\t\tboolean indexed = field.isIndexed();\n\t\t\t\t\tif (this.printAllDocuments)  System.out.println(\"\\t\" + field.name() + \", isIndexed? :\n\" + indexed);\n\t\t\t\t\tif (indexed) fieldNames.add(field.name());\t\n\t\t\t\t}\n\t\t\t\tif (this.printAllDocuments)  System.out.println(\"----------------------------------------\");\t\t\n\t\t\t} catch (Exception e) \n{\n\t\t\t\tSystem.err.println(\"Error reading documents for field info: \" + e + \"\\n\\t\" +\ne.getMessage());\n\t\t\t\te.printStackTrace(System.err);\n\t\t\t\treader.close();\n\t\t\t\tif (e instanceof IOException) \t\tthrow (IOException) \t\te;\n\t\t\t\tif (e instanceof RuntimeException)\tthrow (RuntimeException)\te;\n\t\t\t\treturn new String[0];\n\t\t\t}\n\n\t\t}\n\t\treader.close();\n\t\tif (DEBUG) System.out.println(\"Done checking index\");\n\t\tString[] rval = (String[]) fieldNames.toArray(new String[fieldNames.size()]);\n\t\tArrays.sort(rval);\n\t\treturn rval;\n\t}\n\n\tpublic static void main (String[] args) throws Exception \n{\n\t\tCheckIsIndexed ces = new CheckIsIndexed(args[0]);\n\t\tces.checkIndex();\n\t\t\n\t}\n\t\n\n}\n\n// END ",
            "author": "Eric Fixler",
            "id": "comment-12321045"
        },
        {
            "date": "2002-05-07T09:46:15+0000",
            "content": "I think you are right, this is a bug.\nIf a field is unstored and not indexed what is it?\nIt should be either stored, or indexed, or both.\n\nHowever, I just tried tracking the code from Field -> Document -> IndexWriter ->\nDocumentWriter -> FieldInfos and I couldn't see a bug there.\n\nIn your code (by the way, it's a little better to create an attachment than to\npaste the code inline), check this part:\n\n\t\tEnumeration en = doc.fields();\n\t\twhile (en.hasMoreElements())\n\t\t{\n\t\t    Field field = (Field) en.nextElement();\n\t\t    boolean indexed = field.isIndexed();\n\t\t    if (this.printAllDocuments)\n\t\t\tSystem.out.println(\"\\t\" + field.name() + \", isIndexed? :\" + indexed);\n\nThe UnStored field is never retrieved by doc.fields().\nHowever, if you copy that same snippet of code in the code right before\nwriter.addDocument(doc) is called you will see that different stuff is printed.\n\nSo this just confirms that there is something fishy there, but I can't find the\nsource of the bug right now.\nIf you find it, please send a context diff. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321046"
        },
        {
            "date": "2002-05-07T12:00:47+0000",
            "content": "Thanks for looking at it.  Next time I'll attach code (sorry, I didn't even\nrealize you could do that with bugzilla).\n\nIMO, an UnStored Field should return a Field with an indexed value of true,\nalthough one would expect the content to be null.  Either way, I'd like to find\na way to get a list of all the searchable fields at run time, so that a servlet\ncan auto-configure itself at startup based on the index it's pointing to.\n\nI'll try to look at the lucene code in the next week or so. ",
            "author": "Eric Fixler",
            "id": "comment-12321047"
        },
        {
            "date": "2002-05-08T03:50:20+0000",
            "content": "An un-stored field does not exist in the Document object returned by a search.  \nI don't agree that it should.\n\nWhat would be nice is to be able to enumerate all of the fields indexed.  \nPerhaps the following methods should be added to IndexReader to support this:\n  String[] getFieldNames();\n  String[] getIndexedFieldNames();\n\nWould that meet your needs?\n\nIf so, it would be fairly simple to implement.  Abstract methods would be added \nto IndexReader, with implementations in SegmentReader and SegmentsReader.\n\nThe SegmentReader implementation could just do something like:\n    for (int i = 0; i < fieldInfos.size(); i++) \n{\n      FieldInfo fi = fieldInfos.fieldInfo(i);\n      ...\n    }\n\nThe SegmentsReader implementation would need to add a FieldInfos field, \nconstruct it by using FieldInfos.add(FieldInfos), then use an implementation \nlike SegmentReader.\n\nDoug ",
            "author": "cutting@apache.org",
            "id": "comment-12321048"
        },
        {
            "date": "2002-05-08T05:27:01+0000",
            "content": "Thanks.\n\nString[] getIndexedFieldNames() would work perfectly for what I'm trying to do.\n\nI'll look at the Lucene classes and try to implement it. ",
            "author": "Eric Fixler",
            "id": "comment-12321049"
        },
        {
            "date": "2002-05-13T10:39:41+0000",
            "content": "Created an attachment (id=1843)\nJDK 1.1 compliant (I think) patch adding getIndexedFields() methods to IndexReaders ",
            "author": "Eric Fixler",
            "id": "comment-12321050"
        },
        {
            "date": "2002-05-13T10:43:58+0000",
            "content": "I'm submitting a patch to add the getIndexedFields() method as DC suggested.\n\nI tried to this in JDK 1.1 fashion because I think lucene tries to be jdk 1.1\ncompliant.  I also decided to stary by not adding any fields to any classes \n.It's a bit clumsy \u2013 let me know if that's not a requirement, and I can\nstreamline it.\n\nAnyway, it seems to work for me \u2013 look at it and let me know what you think,\nand I'll do another rev with documentation.\n\nThe changed files are IndexReader.java SegmentReader.java and SegmentsReader.java\n ",
            "author": "Eric Fixler",
            "id": "comment-12321051"
        },
        {
            "date": "2002-05-21T00:28:14+0000",
            "content": "Looks good to me.\n\nA couple of minor improvements:\n\nThe line:\n    return (String[]) v.toArray(new String[v.size()]);\n\nWould be more efficient if you use a static for the prototype, e.g.:\n  private static final STRING_ARRAY_PROTO = new String[0];\n  ...\n    return (String[]) v.toArray(STRING_ARRAY_PROTO);\nThis saves the allocation of an extra array.\n\nNote: toArray is not in Java 1.1, so if we decide to keep Lucene 1.1 \ncompatible, then this will have to be re-written as a 'for' loop anyway...\n\nAnd in SegmentsReader.getIndexedFieldNames, you don't need the intermediate \nVector: you can create the array and fill it directly from the Hashtable:\n\n     Enumeration it = h.keys();\n     String[] result = new String[h.size()];\n     for (int i = 0; i < h.size(); i++) \n{ \n       result[i] = it.nextElement();\n     }\n     return result;\n\nThis saves the allocation of the Vector, and is less code too. ",
            "author": "cutting@apache.org",
            "id": "comment-12321052"
        },
        {
            "date": "2003-04-11T09:50:37+0000",
            "content": "From todo.xml Add some requested methods: IndexReader.getIndexedFields\n\nThis bug was fixed with the addition of IndexReader.getFieldNames() but never \nmarked fixed.\n\nMarking fixed and dropping from the todo list. ",
            "author": "Eric Isakson",
            "id": "comment-12321053"
        }
    ]
}