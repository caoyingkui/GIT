{
    "id": "LUCENE-8477",
    "title": "Improve handling of inner disjunctions in intervals",
    "details": {
        "components": [],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "The current implementation of the disjunction interval produced by Intervals.or is a direct implementation of the OR operator from the Vigna paper.\u00a0 This produces minimal intervals, meaning that (a) is preferred over (a b), and (b) also over (a b).\u00a0 This has advantages when it comes to counting intervals for scoring, but also has drawbacks when it comes to matching.\u00a0 For example, a phrase query for ((a OR (a b))\u00a0BLOCK (c)) will not match the document (a b c), because (a) will be preferred over (a b), and (a c) does not match.\n\nThis ticket is to discuss the best way of dealing with disjunctions.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16602124",
            "author": "Alan Woodward",
            "content": "I can see a couple of options here:\n\n1) Add a new operator, OR_MAX, which doesn't try to minimize its internals, and sorts prefixes last.\u00a0 This deals with ((a OR (a b))\u00a0BLOCK c) mentioned in the description, but it still fails to match in other situations, such as (b OR (b c)) BLOCK c - in this case because (b c) will sort before (b), so the interval will try to match (b c c).\u00a0 It also makes it less easy to use, as consumers now need to understand the semantics of two separate OR operators\n\n2) Allow IntervalsSource to rewrite itself, so that ((a OR (a b)) BLOCK c) becomes (a BLOCK c) OR ((a b) BLOCK c).\u00a0 This would be a lot easier on the user, but I'm not sure how easy it would be from an implementation point of view - it may end up adding lots of extra methods to IntervalsSource. ",
            "date": "2018-09-03T12:53:19+0000"
        },
        {
            "id": "comment-16602195",
            "author": "Adrien Grand",
            "content": "I'd be tempted to just document this behavior for now. I'm afraid that introducing non-minimized intervals will introduce similar corner-cases to what we have with spans and sloppy phrase queries?\n\nRewriting automatically feels a bit wrong given that we would be replacing an IntervalsSource with another IntervalsSource that has different matches. However this is something that could be implemented on top of intervals in query parsers by having an intermediate representation of IntervalsSources and push disjunctions to the top? ",
            "date": "2018-09-03T13:53:37+0000"
        },
        {
            "id": "comment-16604372",
            "author": "Alan Woodward",
            "content": "I like Adrien Grand's suggestion just to document this.\u00a0 Parser implementers can check for disjunctions with variable lengths and push those up the tree.\n\nMartin Hermann or Christoph Goller would this work for you? ",
            "date": "2018-09-05T13:01:38+0000"
        }
    ]
}