{
    "id": "LUCENE-5836",
    "title": "BytesRef.copyBytes and copyChars don't oversize",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": []
    },
    "description": "When copying data from another BytesRef/CharSequence, these methods don't oversize. This is not an issue if this method is used only once per BytesRef instance but I just reviewed the usage of these methods and they are very frequently used in loops to do things like:\n\n\tkeep track of the top values in comparators\n\tkeep track of the previous terms in various loops over a terms enum (lucene49 DV consumer, BlockTreeTermsWriter)\n\tetc.\n\n\n\nAlthough unlikely, it might be possible to hit a worst-case and to resize the underlying byte[] on every call to copyBytes? Should we oversize the underlying array in these methods?",
    "attachments": {
        "LUCENE-5836.patch": "https://issues.apache.org/jira/secure/attachment/12656868/LUCENE-5836.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14067509",
            "author": "Robert Muir",
            "content": "I'm not sure we should encourage the stringbuffer usage of these things. Maybe copyBytes should just be a front-end for system.arraycopy and the user has to ensure allocation themself. ",
            "date": "2014-07-19T12:52:35+0000"
        },
        {
            "id": "comment-14067516",
            "author": "Adrien Grand",
            "content": "So the idea would be to change copyBytes to just copy bytes and fix call sites to call BytesRef.grow before copyBytes if necessary? ",
            "date": "2014-07-19T13:11:54+0000"
        },
        {
            "id": "comment-14067517",
            "author": "Robert Muir",
            "content": "The problem is not unique to copyBytes.\n\ncopyBytes/append/grow/copyChars are all stringbuffer-type methods. \n\nI really think we should remove/discourage these: because bytesref is really crap for a stringbuffer type object since it has no safety. You cant be a \"reference to array with offset\" and also be this: its just horrible software design!!!! ",
            "date": "2014-07-19T13:17:06+0000"
        },
        {
            "id": "comment-14067671",
            "author": "Adrien Grand",
            "content": "I'd like to fix it as well but this would be a very big change.  In the mean time would you agree to fix copyBytes to oversize the destination array to make sure that we don't hit the worst-case? ",
            "date": "2014-07-19T20:35:43+0000"
        },
        {
            "id": "comment-14067693",
            "author": "Robert Muir",
            "content": "No, because there is no indication it would ever be reused: it could just be creating waste. ",
            "date": "2014-07-19T21:19:33+0000"
        },
        {
            "id": "comment-14067697",
            "author": "ASF subversion and git services",
            "content": "Commit 1611970 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1611970 ]\n\nLUCENE-5836: when prefix-coding variable length terms, preallocate lastTerm to the correct size ",
            "date": "2014-07-19T21:32:37+0000"
        },
        {
            "id": "comment-14067700",
            "author": "ASF subversion and git services",
            "content": "Commit 1611971 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1611971 ]\n\nLUCENE-5836: when prefix-coding variable length terms, preallocate lastTerm to the correct size ",
            "date": "2014-07-19T21:42:18+0000"
        },
        {
            "id": "comment-14067701",
            "author": "Robert Muir",
            "content": "\nkeep track of the previous terms in various loops over a terms enum (lucene49 DV consumer, \n\nThanks for pointing this out, i fixed this one (it knows the maximum size before the loop) ",
            "date": "2014-07-19T21:42:21+0000"
        },
        {
            "id": "comment-14068535",
            "author": "Adrien Grand",
            "content": "And what if we move the StringBuilder-like methods to a different class? (see eg. attached patch which doesn't compile but should give an idea of the change) Would that work for you? ",
            "date": "2014-07-21T13:52:14+0000"
        },
        {
            "id": "comment-14068538",
            "author": "Robert Muir",
            "content": "that would be a fantastic improvement IMO. ",
            "date": "2014-07-21T13:54:36+0000"
        },
        {
            "id": "comment-14068539",
            "author": "Adrien Grand",
            "content": "OK, I'll give it a try. ",
            "date": "2014-07-21T13:55:27+0000"
        },
        {
            "id": "comment-14068664",
            "author": "Michael McCandless",
            "content": "+1 for BytesRefBuilder! ",
            "date": "2014-07-21T15:48:40+0000"
        },
        {
            "id": "comment-14080644",
            "author": "Adrien Grand",
            "content": "BytesRef is not a buffer. ",
            "date": "2014-07-31T08:26:33+0000"
        }
    ]
}