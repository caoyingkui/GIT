{
    "id": "LUCENE-7582",
    "title": "\"Cannot commit index writer\" in some cases on windows",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "5.3.1",
        "status": "Open",
        "type": "Bug",
        "components": [
            "core/store"
        ],
        "fix_versions": []
    },
    "description": "Hi!\n\nI've an error using lucene on windows. I already post a question on modeshape forum (https://developer.jboss.org/thread/273070) and it looks that NIOFSDirectory is not working well on windows as described in the java documentation of this class.\n\nNOTE: NIOFSDirectory is not recommended on Windows because of a bug in how FileChannel.read is implemented in Sun's JRE. Inside of the implementation the position is apparently synchronized. See here for details.\n\nAfter reading the linked java issue (http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6265734), it seems that there is a workaround to solve it, use an AsynchronousFileChannel.\n\nIs it a choice that has been made to not use AsynchronousFileChannel or will it be a good fix?\n\nYou'll find the complete stacktrace below:\n\nCaused by: org.modeshape.jcr.index.lucene.LuceneIndexException: Cannot commit index writer  \n  at org.modeshape.jcr.index.lucene.LuceneIndex.commit(LuceneIndex.java:155) ~[dsdk-launcher.jar:na]  \n  at org.modeshape.jcr.spi.index.provider.IndexChangeAdapter.completeWorkspaceChanges(IndexChangeAdapter.java:104) ~[dsdk-launcher.jar:na]  \n  at org.modeshape.jcr.cache.change.ChangeSetAdapter.notify(ChangeSetAdapter.java:157) ~[dsdk-launcher.jar:na]  \n  at org.modeshape.jcr.spi.index.provider.IndexProvider$AtomicIndex.notify(IndexProvider.java:1493) ~[dsdk-launcher.jar:na]  \n  at org.modeshape.jcr.bus.RepositoryChangeBus.notify(RepositoryChangeBus.java:190) ~[dsdk-launcher.jar:na]  \n  at org.modeshape.jcr.cache.document.WorkspaceCache.changed(WorkspaceCache.java:333) ~[dsdk-launcher.jar:na]  \n  at org.modeshape.jcr.txn.SynchronizedTransactions.updateCache(SynchronizedTransactions.java:223) ~[dsdk-launcher.jar:na]  \n  at org.modeshape.jcr.cache.document.WritableSessionCache.save(WritableSessionCache.java:751) ~[dsdk-launcher.jar:na]  \n  at org.modeshape.jcr.JcrSession.save(JcrSession.java:1171) ~[dsdk-launcher.jar:na]  \n  ... 19 common frames omitted  \nCaused by: java.nio.file.FileSystemException: C:\\Users\\Christopher\\Infiltrea3CLOUDTEST8\\christopher@dooapp.com\\indexes\\default\\nodesByPath\\_dc_Lucene50_0.doc: The process cannot access the file because it is being used by another process.  \n  at sun.nio.fs.WindowsException.translateToIOException(WindowsException.java:86) ~[na:1.8.0_92]  \n  at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:97) ~[na:1.8.0_92]  \n  at sun.nio.fs.WindowsException.rethrowAsIOException(WindowsException.java:102) ~[na:1.8.0_92]  \n  at sun.nio.fs.WindowsFileSystemProvider.newFileChannel(WindowsFileSystemProvider.java:115) ~[na:1.8.0_92]  \n  at java.nio.channels.FileChannel.open(FileChannel.java:287) ~[na:1.8.0_92]  \n  at java.nio.channels.FileChannel.open(FileChannel.java:335) ~[na:1.8.0_92]  \n  at org.apache.lucene.util.IOUtils.fsync(IOUtils.java:393) ~[dsdk-launcher.jar:na]  \n  at org.apache.lucene.store.FSDirectory.fsync(FSDirectory.java:281) ~[dsdk-launcher.jar:na]  \n  at org.apache.lucene.store.FSDirectory.sync(FSDirectory.java:226) ~[dsdk-launcher.jar:na]  \n  at org.apache.lucene.store.LockValidatingDirectoryWrapper.sync(LockValidatingDirectoryWrapper.java:62) ~[dsdk-launcher.jar:na]  \n  at org.apache.lucene.index.IndexWriter.startCommit(IndexWriter.java:4456) ~[dsdk-launcher.jar:na]  \n  at org.apache.lucene.index.IndexWriter.prepareCommitInternal(IndexWriter.java:2874) ~[dsdk-launcher.jar:na]  \n  at org.apache.lucene.index.IndexWriter.commitInternal(IndexWriter.java:2977) ~[dsdk-launcher.jar:na]  \n  at org.apache.lucene.index.IndexWriter.commit(IndexWriter.java:2944) ~[dsdk-launcher.jar:na]  \n  at org.modeshape.jcr.index.lucene.LuceneIndex.commit(LuceneIndex.java:152) ~[dsdk-launcher.jar:na] \n\n\n\nThank you in advance for your help",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15723346",
            "date": "2016-12-05T20:52:06+0000",
            "content": "Are you the one who mentioned pretty much this exact issue on the #lucene IRC channel several hours ago?\n\nAs I said on IRC, I think the correct solution is to use an MMap-based directory implementation and require that the users of your software install it with 64-bit hardware, OS, and Java.  With hardware and software that are common today, a 64-bit requirement is not difficult to satisfy, even with Windows.  MMapDirectory typically has better performance than the other file-based directory implementations, which is why it's default on 64-bit Java.\n\nThis javadoc talks about the differences between the filesystem-based Directory implementations:\n\nhttp://lucene.apache.org/core/6_3_0/core/org/apache/lucene/store/FSDirectory.html ",
            "author": "Shawn Heisey"
        },
        {
            "id": "comment-15724836",
            "date": "2016-12-06T08:48:55+0000",
            "content": "Yes I'm but as I said previously on the #lucene IRC channel, I really cannot ask to world wide customers (that aren't computer friendly) to update their OS from 32-bit to 64-bit.\n\nMy goal is to find the best way to make lucene work well on both windows 32-bit and 64-bit. Given this requirement, will the usage of AsynchronousFileChannel in NIOFSDirectory fix the problem as written in the jvm bug, workaround section? ",
            "author": "Kevin Senechal"
        },
        {
            "id": "comment-15724990",
            "date": "2016-12-06T09:59:29+0000",
            "content": "Hi,\nuse FSDirectory.open static factory. It will choose the best implementation automatically depending on Operating System. On Windows this will choose MMapDircetory for 64 bit platforms and SimpleFSDirectory on 32 bit platforms. This is perfectly fine. Keep in min that SImpleFSDirectory is not \"slow\" , it just does not perform well in multithreaded environments (many parallel searches). But on 32 bit platforms it is unlikely that you have many parallel searches! 32 bit VMs are mostly used for stuff like local mail search engines or other pure client/GUI apps.\n\nAsync FileChannel does not work and slows down immense for synchronous IO like Lucene does, because you need additional client code synchronization. It gets like 2 times slower than SimpleFSDirectory. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15725280",
            "date": "2016-12-06T11:58:43+0000",
            "content": "Note that the exception you are hitting is a different issue than the JDK bug.  The JDK bug is about poor performance, whereas your exception prevent IndexWriter.commit from working correctly.\n\nI suspect your exception is because of how Lucene re-opens a file (for write) when it needs to commit it.  Are you using near-real-time readers?  One possible workaround might be to not use near-real-time readers, i.e. open your reader from the Directory, and then refresh it after committing from IndexWriter.\n\nDo you have any external processes that open Lucene's index files, e.g. virus checkers?\n\nWe have investiaged AsynchronousFileChannel in the past, see e.g. http://jirasearch.mikemccandless.com/search.py?text=%22AsynchronousFileChannel%22 but it did not pan out.\n\nIf your indices are smallish you might get away with using MMapDirectory even on 32 bit windows. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15725549",
            "date": "2016-12-06T13:55:57+0000",
            "content": "Thank you for your answers.\n\nConsidering Michael McCandless answer, I'll rename this issue to point to the right problem. I'll also share the link of this issue to the modeshape team, which has implemented the lucene-modeshape connector and keep you in touch.\n\nThank you ",
            "author": "Kevin Senechal"
        },
        {
            "id": "comment-15725636",
            "date": "2016-12-06T14:27:32+0000",
            "content": "I checked the above stack trace and agree with Mike. The issue you see is completely unrelated to NIOFSDir. It may also happen with other directory implementations. It looks more to be \"the\" general windows issue with open files. Virus checkers is my first guess. Lucene needs full control on the file it opened for full commit safety. Any other process (like virus scanners) that prevents files from being deleted/opened may cause this. The problem is that lucene creates and deletes in short times so it is very likely that lucene creates a file, the virus checker is scanning it, but at same time lucene deletes it or renames it for committing.\n\nIn general on server side installations, the recommendation to users is to exclude all directories where Lucene writes its indexes (e.g. Solr installation dir) from virus checking. Of course this is an issue for desktop applications, but thats's not a common Lucene use case. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15725683",
            "date": "2016-12-06T14:39:44+0000",
            "content": "In addition code that writes and commits indexes is the same for all 3 directory types (mmap, nio and simple). ",
            "author": "Uwe Schindler"
        }
    ]
}