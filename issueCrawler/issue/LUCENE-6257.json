{
    "id": "LUCENE-6257",
    "title": "Remove javadocs from releases (except for publishing)",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "In LUCENE-6247, one idea discussed to decrease the size of release artifacts was to remove javadocs from the binary release.  Anyone needing javadocs offline can download the source distribution and generate the javadocs.\n\nI also think we should investigate removing javadocs jars from maven.  I did a quick test, and getting the source in intellij seemed sufficient to show javadocs.   However, this test was far from scientific, so if someone knows for sure whether a separate javadocs jar is truly necessary, please say so.\n\nRegardless of the outcome of the two ideas above, we would continue building, validating and making the javadocs available online.",
    "attachments": {
        "screenshot-1.png": "https://issues.apache.org/jira/secure/attachment/12699773/screenshot-1.png",
        "screenshot-2.png": "https://issues.apache.org/jira/secure/attachment/12699775/screenshot-2.png"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14327401",
            "author": "Mark Miller",
            "date": "2015-02-19T13:33:35+0000",
            "content": "Pretty sure most IDE's are happy to pull it from source. I've seen the same thing from Eclipse. "
        },
        {
            "id": "comment-14327634",
            "author": "Steve Rowe",
            "date": "2015-02-19T15:30:27+0000",
            "content": "Sonatype (the company that manages the Maven central repository) says that javadocs and sources jars are required: http://central.sonatype.org/pages/requirements.html.  That page says that for projects where javadocs or sources aren't available, empty javadocs jars may be provided to meet the requirement.  \n\nWe don't directly post maven artifacts to central, though: we go through the ASF Nexus repository manager at repository.apache.org (see http://wiki.apache.org/lucene-java/PublishMavenArtifacts for details).  Prior to acceptance of a candidate release, the ASF repo mgr does a \"quality check\", making sure metadata is present and consistent, required files are present, etc.  I suspect it will auto-reject a release without javadocs jars.  I'll test by posting a fake artifact bundle without a javadoc jar and see if it passes the quality check. "
        },
        {
            "id": "comment-14327836",
            "author": "Steve Rowe",
            "date": "2015-02-19T18:18:02+0000",
            "content": "Prior to acceptance of a candidate release, the ASF repo mgr does a \"quality check\", making sure metadata is present and consistent, required files are present, etc. I suspect it will auto-reject a release without javadocs jars. I'll test by posting a fake artifact bundle without a javadoc jar and see if it passes the quality check.\n\nI tested (via ant stage-maven-artifacts, after removing javadoc artifact staging from write.stage.maven.build.xml.pl) using a fake \"5.0.1-test\" release including only analyzers-common, lucene-parent and lucene-solr-grandparent (last two required for POM resolution), with the javadoc jar and its GPG signature removed, and I successfully \"closed\" the repository on ASF Nexus - that's the process where the quality checks are run.  So at a minimum, we can get past the ASF quality checks without including javadoc jars.\n\nI'll survey recent releases for other Apache projects to see whether any of them have gotten away with excluding javadoc jars. "
        },
        {
            "id": "comment-14328106",
            "author": "Steve Rowe",
            "date": "2015-02-19T20:52:57+0000",
            "content": "I'll survey recent releases for other Apache projects to see whether any of them have gotten away with excluding javadoc jars.\n\nI looked for artifacts on Maven Central from the projects with release announcements on announce@apache.org during 2015, and I found 5 projects that distribute at least some of their artifacts without javadoc jars: Streams, MyFaces, Curator, Tomcat, and Directory LDAP API.  Most of these do have javadoc jars for some of their artifacts, but not all; I couldn't find any javadoc jars for Streams and Tomcat.\n\nThe other projects I looked at: Httpcomponents, Jackrabbit Oak, Jackrabbit, Kafka, Flink, Olingo, Flex, Tika. "
        },
        {
            "id": "comment-14328113",
            "author": "Ryan Ernst",
            "date": "2015-02-19T20:57:11+0000",
            "content": "Thanks for the investigation Steve! My main question is, what does the javadoc jar buy users? In what case would they need the javadoc jar and not the sources jar? My understanding the main reason for these jars is e.g. IDE integration for tooltips, etc, and like I noted before, it seemed to me only the source jar was necessary for both showing code as well as the javadocs. "
        },
        {
            "id": "comment-14328174",
            "author": "Steve Rowe",
            "date": "2015-02-19T21:58:27+0000",
            "content": "My understanding the main reason for these jars is e.g. IDE integration for tooltips, etc, and like I noted before, it seemed to me only the source jar was necessary for both showing code as well as the javadocs.\n\nSome support for the idea that the javadoc jar is unnecessary for IDEs:\n\nhttps://code.google.com/p/google-web-toolkit/issues/detail?id=5429#c12\n\nhttps://www.mail-archive.com/osgi-dev@mail.osgi.org/msg02391.html\n\nI don't know of any other uses for the javadoc jar than in IDEs.  I tried to google mention of any other uses, but I couldn't find any. "
        },
        {
            "id": "comment-14328187",
            "author": "Hoss Man",
            "date": "2015-02-19T22:08:27+0000",
            "content": "I don't know of any other uses for the javadoc jar than in IDEs. \n\nthe primary usage of javadoc jars pre-dates IDEs.  it's so people can download just the binary libraries & javadocs and write their own code against the library w/o needing to read the source (or build the javadocs from source) \u2013 having a javadoc.jar with java is like getting the *.h files along with a *.so ... you need that to know what methods you're allowed to call.\n\n(sure, we have the javadocs online \u2013 but for the same reason not all applications are applets, it's reasonable to want to download it and read offline)\n\n\n\tthe primary argument i've seen in favor of providing javadoc jars come from commercial software (ie: we sell you a license to use this library in your application, but we won't give you the original source).\n\tthe primary arguments i've seen in favor of consuming javadoc jars come from people who want to be able to use a library \"clean room\" w/o any risk that anyone will say they ever saw the original source code.\n\n\n\nthe former doesn't apply to us, i would normally think there's no reason the later should apply to us (Virally licensed projects maybe, but not ASL) except that i have still seen/meet people at big companies where they are not allowed to download or look at the source code for open source projects because of the paranoia of their employeer in claiming ownership of code their employees cut/pasted \u2013 they can however freely download & use libraries based on the license ... but in order to use those libraries, they need to be able to read the javadocs and know what methods to call. "
        },
        {
            "id": "comment-14328199",
            "author": "Alexandre Rafalovitch",
            "date": "2015-02-19T22:19:36+0000",
            "content": "Javadocs are useful for navigating the classes and documentation around and for being discoverable on the web. For example, I used Javadocs to see what UpdateRequestProcessors were available before I built my own resource (which leverages Javadoc information). The source code has a bit too much information to be able to navigate it easily.\n\nSimilarly, when people search for a particular component on the web, Javadoc is often what they get for the more obscure ones. Often, a very old Javadoc due to the frame-based HTML (another project I attacked), but it is still better than nothing. And the source code is not exposed quite the same way, as the versioning in a repository is more continuous and it is much harder to compare what's in 4.7 with what's in 4.9 as an example.\n\nMany of Solr users are not Java developers and Javadoc is a half-way point they can dip their toes in to learn things.\n\nThis obviously refers only to the components that users may use by name in the various configuration locations. The use case for Javadoc of the inner/deep implementation classes is a lot less clear to me. "
        },
        {
            "id": "comment-14328216",
            "author": "Steve Rowe",
            "date": "2015-02-19T22:26:56+0000",
            "content": "in order to use those libraries, they need to be able to read the javadocs and know what methods to call.\n\nSeems to me like the offline-reading-no-source-allowed argument (essentially about convenience) would apply to the binary release inclusion of javadocs, not to the per-module javadoc jars hosted on Maven Central: why force people to download these individual javadoc jars for that purpose?:  \"Not convenient.  Won't do it.\" (see Dana Carvey's elder Bush impressions.) "
        },
        {
            "id": "comment-14328217",
            "author": "Ryan Ernst",
            "date": "2015-02-19T22:27:01+0000",
            "content": "Alexandre Rafalovitch Please reread the issue description.  This issue is about removing javadocs from the binary release.  They would still be available online, and can still be generated for offline uses using the source download. "
        },
        {
            "id": "comment-14328227",
            "author": "Ryan Ernst",
            "date": "2015-02-19T22:32:15+0000",
            "content": "\nSeems to me like the offline-reading-no-source-allowed argument (essentially about convenience) would apply to the binary release inclusion of javadocs, not to the per-module javadoc jars hosted on Maven Central: why force people to download these individual javadoc jars for that purpose?\n\nThis seems like a really esoteric use case.  Who are these mystical users that have this need?  Who is reimplementing lucene or solr apis in a clean room!? We can't cater to every single oddball use case out there. "
        },
        {
            "id": "comment-14328233",
            "author": "Hoss Man",
            "date": "2015-02-19T22:36:18+0000",
            "content": "Who is reimplementing lucene or solr apis in a clean room!?\n\nwho said anything about re-implimenting?\n\nI'm talking about people who want to use the APIs (ie: instaniate IndexWriter, call methods on it, etc...) but are not permisted by their legal department to download source code for open source librariries.\n\nWho are these mystical users that have this need? \n\nSome IBM employees i talked to a few years ago, and some Amazon employees i talk to a few months ago. "
        },
        {
            "id": "comment-14328239",
            "author": "Uwe Schindler",
            "date": "2015-02-19T22:40:47+0000",
            "content": "Maven Central may require, but Sonatype requires a Javadocs JAR if zhe Pom refers to standard Java Projects. Excluded are only artifacts like Maven Modules or WAR files.\n\nthe repository generally refuses to publish artifacts if stuff is missing, like signatures.\n\ni agree with removing javadocs and the javadocs jars from binary release. "
        },
        {
            "id": "comment-14328249",
            "author": "Steve Rowe",
            "date": "2015-02-19T22:48:03+0000",
            "content": "Uwe, scroll up to see my debunking of the Sonatype javadoc jar requirement. "
        },
        {
            "id": "comment-14328261",
            "author": "Uwe Schindler",
            "date": "2015-02-19T22:54:42+0000",
            "content": "I tried it out: Eclipse does not show javadocs if I block internet so it cannot get javadoc jars by m2e.\n\nso i would like to keep them on maven central. "
        },
        {
            "id": "comment-14328265",
            "author": "Steve Rowe",
            "date": "2015-02-19T22:58:27+0000",
            "content": "Uwe, scroll up to see where Ryan said he tried using just the source jar, and my links to assertions that IDEs do just fine with the source jar.\n\nYour test does not change this, since you also blocked access to the source jar. "
        },
        {
            "id": "comment-14328273",
            "author": "Uwe Schindler",
            "date": "2015-02-19T23:02:30+0000",
            "content": "It shows the shortcut hovers. But the button to show the html in eclipses internal browser does not work. The quickinfos are to hard to read. Sorry: -1 to remove from Maven Central.  I use that every day. "
        },
        {
            "id": "comment-14328276",
            "author": "Uwe Schindler",
            "date": "2015-02-19T23:04:58+0000",
            "content": "The Javadocs html shown inside Eclipse is definitely coming from the jar. You see this if you check the url of the internal browser.\n\nthe quickinfos when you hover on a method come from source, thats right!  "
        },
        {
            "id": "comment-14328297",
            "author": "Ryan Ernst",
            "date": "2015-02-19T23:20:08+0000",
            "content": "Thanks Uwe, I just looked at the quick infos (I don't even know how to look at the html from within intellij lol). I'll concede that as clearly my quick test was insufficient. "
        },
        {
            "id": "comment-14328299",
            "author": "Uwe Schindler",
            "date": "2015-02-19T23:20:59+0000",
            "content": "This is the URL of the Javadocs of Query class in an Elasticsearch plugin using 4.10.3: http://127.0.0.1:59157/help/nftopic/jar:file:/C:/Users/Uwe%20Schindler/.m2/repository/org/apache/lucene/lucene-core/4.10.3/lucene-core-4.10.3-javadoc.jar!/org/apache/lucene/search/Query.html "
        },
        {
            "id": "comment-14328301",
            "author": "Uwe Schindler",
            "date": "2015-02-19T23:23:04+0000",
            "content": "I attached a screenshot of Eclipse, please also note the URL as displayed in the Window Title. "
        },
        {
            "id": "comment-14328315",
            "author": "Uwe Schindler",
            "date": "2015-02-19T23:29:55+0000",
            "content": "screenshot-2.png is a \"quick info\" (as described by you for intellij/idea/...), which is indeed generated from the -source.jar, but its not always helpful, especially if you want to see more detailed description. It is also horrible to use, if you need to scroll (suddenly disappears,...). If you click on the marked button, it will trigger a download, which you see in the status line. "
        },
        {
            "id": "comment-16602997",
            "author": "David Smiley",
            "date": "2018-09-04T12:38:03+0000",
            "content": "I read these comments and I'm a little lost as to where the conversation went.  The very first part of the description:\nIn LUCENE-6247, one idea discussed to decrease the size of release artifacts was to remove javadocs from the binary release. Anyone needing javadocs offline can download the source distribution and generate the javadocs.\nIf we keep this issue isolated to that, perhaps we can reach consensus?  To be more clear, I believe this is only about removing the \"docs\" folder from the tgz and zip.  The follow-on paragraph was about not posting javadoc jars to Maven central.  Lets table that; I think that's where we broke down here.  The binary distribution's README.txt could very well include a link to obtain the javadoc jars online (e.g. from Maven central). "
        }
    ]
}