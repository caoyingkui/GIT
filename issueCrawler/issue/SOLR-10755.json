{
    "id": "SOLR-10755",
    "title": "delete/refactor (most) solrj deprecations on master",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "using this issue to track some work i've done to cleanup deprecations in solrj for master (7.0)",
    "attachments": {
        "SOLR-10755.patch": "https://issues.apache.org/jira/secure/attachment/12870096/SOLR-10755.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-26T16:51:24+0000",
            "content": "\nMost of the classes in solrj that involve deprecations are fairly straight forward to delete/refactor the affected code, with occasional tweaking of tests that were still using these methods \u2013 that's what's in this patch, the low haning fruit.\n\nstill running precommig & want to do a few more test runs to sanity check\n\n\n\nThings not included in this patch that should be tracked in their own jiras (i'll spin off where needed)...\n\n\n\tCollectionAdminRequest\n\t\n\t\thas roughly double the number of deprecations of all other solrj classes combined\n\t\tmany of the deprecated methods/constructors are still used in a lot of places in tests\n\t\tin many cases the non-deprecated \"constructor\" versions aren't validating the same way the deprecated setters do\n\t\tin at least one case i see obvious bugs in the non-deprecated methods (see ForceLeader constructors)\n\t\tonce many of these deprecated setters are removed, a lot of member variables should become final\n\t\n\t\n\tClusterState\n\t\n\t\tpunted on that since we also have SOLR-9321\n\t\n\t\n\tZkStateReader\n\t\n\t\tdeprecated updateClusterState() is Still used by Overseer\n\t\t\n\t\t\tis the Overseer usage a mistake? should Overseer be doing something else?\n\t\t\n\t\t\n\t\tno obviously easy way to refactor this method it into Overseer w/o making several private ZkStateReader methods public\n\t\tif Overseer usage is \"ok\" perhaps we should just rename this method something more dangerous sounding and mark lucene.internal ?\n\t\n\t\n\n ",
            "author": "Hoss Man",
            "id": "comment-16026495"
        },
        {
            "date": "2017-05-26T17:10:26+0000",
            "content": "Linking related issues...\n\nSOLR-10756 - ZkStateReader.updateClusterState()\nSOLR-10757 - CollectionAdminRequest\nSOLR-9321 - clusterstate.getSlicesMap(), getSlices() and getActiveSlices() ",
            "author": "Hoss Man",
            "id": "comment-16026516"
        },
        {
            "date": "2017-05-26T17:36:13+0000",
            "content": "+1, especially for removing the deprecated SolrClient constructors.\n\nOne comment/suggestion/question:\n\nSolrTestCaseJ4 has a big collection of overloaded getHttpSolrClient/getLBHttpSolrClient/getCloudSolrClient methods.  These were created back when the SolrClient builders were introduced to ensure that the tests covered client construction using the builders as well as the many director-constructor-use.  With most of the SolrClient constructors going away in this patch, I'm not sure that the get*SolrClient methods serve a purpose anymore, and can be deleted. Would it make sense to clean that up as a part of this JIRA?\n\n(That'd expand the scope of this JIRA a bit, so it might also make sense to create a follow-on JIRA that can get picked up whenever.  Happy to help on a patch if we split this into a separate JIRA.) ",
            "author": "Jason Gerlowski",
            "id": "comment-16026552"
        },
        {
            "date": "2017-05-26T17:44:19+0000",
            "content": "One comment/suggestion/question:\n\ngood question/suggestion ... but...\n\n\n\tthose methods aren't marked deprecated, so we can't remove them (SolrTestCaseJ4 is not an \"internal\" class \u2013 the test-framework is intended/suggested for client app & plugin developers to use)\n\tpersonally i think these methods provide a nice syntactic sugar in tests, and give us wiggle room to add more testing of randomized client options in the future (example: enabling/disable gzip encoding or keep alive options) so i'd be -0 to marking them deprecated moving forward\n\teven if they were already marked deprecated, the number of changes involved would be huge, and i don't wnat to bog down this jira (or any other jira that's focused specifically on remove deprecations from solrj) with any more work.\n\n ",
            "author": "Hoss Man",
            "id": "comment-16026563"
        },
        {
            "date": "2017-05-26T17:45:33+0000",
            "content": "patch updated to current master & passing precommit.\n\nstill testing ",
            "author": "Hoss Man",
            "id": "comment-16026566"
        },
        {
            "date": "2017-05-26T18:00:36+0000",
            "content": "personally i think these methods provide a nice syntactic sugar in tests, and give us wiggle room to add more testing of randomized client options in the future\n\nYou're right of course, they could provide value at some point.  It's a downer that they suffer the same downside that prompted the initial SolrClient ctor change though- the number of SolrClient parameters that can be provided/omitted causes us to end up with tons of these near-duplicate methods.  But if that doesn't bother anyone, it's fine with me.  Just wanted to mention it as I created most of those methods initially and feel partially responsible for the mess I made :-p  (Relatedly, I wish I'd known about SolrTestCaseJ4 being \"external\" back then, but you learn something new every day) ",
            "author": "Jason Gerlowski",
            "id": "comment-16026599"
        },
        {
            "date": "2017-05-26T18:15:51+0000",
            "content": "It's a downer that they suffer the same downside that prompted the initial SolrClient ctor change though- the number of SolrClient parameters that can be provided/omitted causes us to end up with tons of these near-duplicate methods\n\nI don't view that as a downside ... these are convinience methods for tests that \"don't care\" about most of the particulars of their client \u2013 giving us the flexibility to randomize them.  if a test does care they can use the Builders directly (and many do) ",
            "author": "Hoss Man",
            "id": "comment-16026623"
        },
        {
            "date": "2017-05-26T19:21:12+0000",
            "content": "i've updated the SolrTestCaseJ4 javadocs to be more explicit about the possible randomization of the clients (the CloudSolrClient methods already have this possibility for where they route updates)\n\nplan on commiting to master later today unless there are objections ",
            "author": "Hoss Man",
            "id": "comment-16026717"
        },
        {
            "date": "2017-05-27T02:04:46+0000",
            "content": "Commit bc973ecdcfacf39440da06b86139c77935e1e92e in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bc973ec ]\n\nSOLR-10755: delete/refactor many solrj deprecations ",
            "author": "ASF subversion and git services",
            "id": "comment-16027128"
        }
    ]
}