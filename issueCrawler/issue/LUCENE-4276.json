{
    "id": "LUCENE-4276",
    "title": "refuse to execute on broken corrupting jvms",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "There are some jvms where we know lucene does not work at all and will just produce things like corrupt indexes.\n\nWe should detect this in a static block of Constants.java and refuse to run at all.",
    "attachments": {
        "LUCENE-4276.patch": "https://issues.apache.org/jira/secure/attachment/12538548/LUCENE-4276.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-31T11:28:58+0000",
            "content": "first on the list is java 1.7.0 b147\n\nI think this is most important, ive already seen people on the list\nmention they are using it. ",
            "author": "Robert Muir",
            "id": "comment-13425682"
        },
        {
            "date": "2012-07-31T11:50:02+0000",
            "content": "We should detect this in a static block of Constants.java and refuse to run at all.\n\nAs I said on the mailing list, leaving it at that is too extreme.\nAt a minimum, there should be an override...  -Dlucene.forceRun=true or something. ",
            "author": "Yonik Seeley",
            "id": "comment-13425685"
        },
        {
            "date": "2012-07-31T11:51:25+0000",
            "content": "what good can come from allowing someone to force lucene to run on 1.7.0?\n\nThis makes no sense to me. ",
            "author": "Robert Muir",
            "id": "comment-13425686"
        },
        {
            "date": "2012-07-31T11:58:36+0000",
            "content": "As said on the mailing list, disallowing specific JVM versions is fine, but only specific version ranges. Not open ranges, so something like disallowing JRockit completely with no version limit makes no sense.\n\nFor 1.6.x versions of Java we must also look into other options (you can get them using the HotspotBean like RamUsageEstimator does). So fail if version is 1.6.0_19 to 1.6.0_28 (I think, have to look up) with -XX:+AggressiveOpts (lots of stupid Solr and ElasticSearch users did this on their installation) or -XX+FooBarStringConcatOptimization.\n\nIf a bug is at release time not fixed in a JDK or there is a proposed fix in a hard stated future JDK version, we should set the upper limit of failing versions to the version currently on the market. So for the JRockit case, the version used here to test. ",
            "author": "Uwe Schindler",
            "id": "comment-13425689"
        },
        {
            "date": "2012-07-31T12:01:59+0000",
            "content": "One addition from mailing list:\nThe pattern list of vendors and versions should be in a resource file, not in code. So it is easy to edit on release. ",
            "author": "Uwe Schindler",
            "id": "comment-13425690"
        },
        {
            "date": "2012-07-31T12:02:26+0000",
            "content": "No it should not be Jrockit or any other JVM completely. But that exact version you tested has a problem!\n\nI just want the list of exact versions that cause corruption. We add a one-line if statement to prevent the corruption, just like we would do in any other case. ",
            "author": "Robert Muir",
            "id": "comment-13425691"
        },
        {
            "date": "2012-07-31T12:03:43+0000",
            "content": "\nbut only specific version ranges\n\nPersonally i'm not even arguing for ranges, i think thats dangerous.\nJust a set of precise versions that are known to do this. ",
            "author": "Robert Muir",
            "id": "comment-13425693"
        },
        {
            "date": "2012-07-31T12:14:43+0000",
            "content": "I didn't follow the email thread closely, but I don't want to see my JVM version on the list, if there's some use case that may lead to index corruption. What if I never step on that use case?\n\nI'm just worried that such change would mean in the future preventing to run Lucene and a JVM that e.g. fails to properly detect the Codecs to use (i.e. ServiceLoader bug in IBM J9, which was fixed recently).\n\nSo as long as this is a list of specific JVM versions, that are known to cause index corruption, and not other runtime bugs (locale issues, ServiceLoader and such), and as long as this list is controlled by a file that can be edited by the app, I'm ok.\n\nBut if we're making all this trouble (file etc.), why fail to run? we can print a message to System.err \u2013 let the app choose.\n\nPreventing Lucene from running on certain JVMs is too extreme IMO.\n\nIn general, I wish we'd be less extreme in our changes in Lucene code, but that's a matter for a separate discussion. ",
            "author": "Shai Erera",
            "id": "comment-13425698"
        },
        {
            "date": "2012-07-31T12:15:36+0000",
            "content": "what good can come from allowing someone to force lucene to run on 1.7.0? This makes no sense to me.\n\nThis is indicative of the larger problem in Lucene development recently - the tendency to prohibit something just because you can't think of the use-case off the top of your head.\n\nSo here's your use-case: one can normally get most versions of most major JVMs to correctly run applications - it's often just a matter of disabling certain optimisations for certain methods, or in extreme cases prohibiting JIT of the method altogether.\n\nHence, at a minimum, there should be a way for users to easily override this behavior w/o recompiling applications.  We should inform, not enforce.\n ",
            "author": "Yonik Seeley",
            "id": "comment-13425699"
        },
        {
            "date": "2012-07-31T12:23:27+0000",
            "content": "\nThis is indicative of the larger problem in Lucene development recently - the tendency to prohibit something just because you can't think of the use-case off the top of your head.\n\nI don't think this is the case at all. I just want to prevent the creation of corrupt indexes.\n\nCreating corrupt index is NOT A USE CASE ",
            "author": "Robert Muir",
            "id": "comment-13425700"
        },
        {
            "date": "2012-07-31T12:23:31+0000",
            "content": "We should inform, not enforce.\n\n+1 for that ! ",
            "author": "Shai Erera",
            "id": "comment-13425701"
        },
        {
            "date": "2012-07-31T12:30:57+0000",
            "content": "Creating corrupt index is NOT A USE CASE\n\nSigh.\n\n-1 \n(my formal VETO for this issue unless it contains an easy user override) ",
            "author": "Yonik Seeley",
            "id": "comment-13425704"
        },
        {
            "date": "2012-07-31T12:33:24+0000",
            "content": "Creating corrupt index is NOT A USE CASE\n\nDepends . If the corrupt index is a result of using DirectPF Codec, or using payloads etc., then it is a use case. If the corrupt index is a result of adding one field with one word, untokenized and all, then that's a more serious corruption, and how we handle/inform it should be discussed.\n\nAt any rate, I've seen apps preventing to run on old JVMs, but not future, potentially buggy, JVMs. What if we'll detect a corruption related to a certain Linux kernel version - would we prevent Lucene from running there too? ",
            "author": "Shai Erera",
            "id": "comment-13425708"
        },
        {
            "date": "2012-07-31T12:36:31+0000",
            "content": "\n-1\n(my formal VETO for this issue unless it contains an easy user override)\n\nThats ok: I will make the issue a blocker and we won't release until we resolve this.\n\nI'm tired of seeing b147 in bug reports. ",
            "author": "Robert Muir",
            "id": "comment-13425710"
        },
        {
            "date": "2012-07-31T12:39:33+0000",
            "content": "Thats ok: I will make the issue a blocker and we won't release until we resolve this.\n\nLuckily, a release can't be vetoed. ",
            "author": "Yonik Seeley",
            "id": "comment-13425713"
        },
        {
            "date": "2012-07-31T12:43:59+0000",
            "content": "Sure it cant: but if there is any VOTE without doing something here for java 1.7.0, I will vote -1 against this release and point to this issue (that we just allow index corruption to slip through when a simple check can prevent it).\n\nI think people will listen to this. ",
            "author": "Robert Muir",
            "id": "comment-13425725"
        },
        {
            "date": "2012-07-31T12:48:23+0000",
            "content": "Robert, why if someone disagrees with you, you react like that? Either VETO'ing the disagreement, or looking for a way to force your opinion, like marking this issue a Blocker?\n\nI don't think this is a blocker issue, as there's no bug in Lucene \u2013 if there is, let's fix it (and preventing to run on a JVM is not a bug !). I won't remove the blocker myself, out of respect to you (and I also don't think that's how we should handle things in the community), but I ask that you remove it.\n\nIt's a community, not always people will agree with you. I think several times before I pull out my PMC hat and VETO/force my opinion. In fact, I don't think I ever VETO'ed an issue, but recently I came very close to doing that (glad that so far I didn't need to).\n\nGetting to a consensus / majority is better IMO. Let's not make this community a \"one man show\". ",
            "author": "Shai Erera",
            "id": "comment-13425729"
        },
        {
            "date": "2012-07-31T12:51:26+0000",
            "content": "I didnt VETO anything. That was Yonik.\n\nI made the issue a blocker because I want to prevent index corruption. ",
            "author": "Robert Muir",
            "id": "comment-13425730"
        },
        {
            "date": "2012-07-31T12:55:38+0000",
            "content": "\nAt any rate, I've seen apps preventing to run on old JVMs, but not future, potentially buggy, JVMs.\n\nIf you read my comments on this issue, I already stated i want to only defend against exact, precise,\nknown buggy versions that create index corruption. No ranges, no future versions, none of that!\n\nOnly the ones we know and have tested, that create corrupt indexes. ",
            "author": "Robert Muir",
            "id": "comment-13425732"
        },
        {
            "date": "2012-07-31T12:57:19+0000",
            "content": "Thats ok: I will make the issue a blocker and we won't release until we resolve this.\n\nThat's what I'm talking about \u2013 the attitude. Yonik didn't even completely VETO the issue, if the user can override this behavior he seems to agree with your solution (and I won't object to it either), and I read on the thread that Uwe prefers that as well.\n\nYet instead of relating to Yonik's comment, you mark the issue blocker in a way to enforce your opinion.\n\nIn the past, I've compromised on solutions raised by others, even when I didn't think they're perfect. That's reality \u2013 Lucene is a tens of thousands apps project, not a one man's opinion. Sometimes, you (and I !) can't see the full breadth of use cases out there, that doesn't mean we need to discard them !\n\nAgain, please remove the blocker mark. We should discuss it, in the worse case, we should vote (notice how VOTE and VETO are so close ?) on it. We should try to aleast not enforce our opinions on other developers. ",
            "author": "Shai Erera",
            "id": "comment-13425733"
        },
        {
            "date": "2012-07-31T12:58:25+0000",
            "content": "Only the ones we know and have tested, that create corrupt indexes.\n\nThe question that I asked is \"when do those versions generate a corrupt index\" \u2013 is it always? a specific scenario? What I don't trip on that scenario? Why should I not run with that version? ",
            "author": "Shai Erera",
            "id": "comment-13425734"
        },
        {
            "date": "2012-07-31T13:01:52+0000",
            "content": "I'm not gonna remove the blocker mark: i think we should defend against index corruption, its a big deal.\n\nYou are totally welcome to ignore the fact i set this issue to blocker and VOTE +1 for all the releases you want.\n\nIf someone creates a release candidate with three +1s its released! It doesn't matter if I vote against the release or have a blocker issue open.\n\nBut in the case of such a VOTE, I will reply to the vote thread pointing to this issue, so that people are informed.\n ",
            "author": "Robert Muir",
            "id": "comment-13425737"
        },
        {
            "date": "2012-07-31T13:18:24+0000",
            "content": "Simple patch to detect the broken oracle 1.7.0 release. ",
            "author": "Robert Muir",
            "id": "comment-13425747"
        },
        {
            "date": "2012-07-31T13:26:31+0000",
            "content": "Simple patch to detect the broken oracle 1.7.0 release.\n\nIt should be *Error not RuntimeException, as this prevents class and dependent classes to load. ",
            "author": "Uwe Schindler",
            "id": "comment-13425749"
        },
        {
            "date": "2012-07-31T13:26:32+0000",
            "content": "Sigh. I was hoping to get to consensus here.\n\nAs for the patch, if that comes from a file, I'd feel better to support it.\n\nFew separate comments:\n\n\tCan we include some text in the message, describing why it's incompatible, such as a link to a JIRA issue / markmail thread?\n\tHow do you know to recommend a specific build version?\n\t\n\t\tPerhaps instead of recommending a version, we should include in the exception all the versions that are not supported? That way, we only commit to what we tested and is not supported.\n\t\tI'm worried that we'll recommend a version that will later turn out to be broken, and won't remove the 'recommendation' text.\n\t\n\t\n\n ",
            "author": "Shai Erera",
            "id": "comment-13425750"
        },
        {
            "date": "2012-07-31T13:30:08+0000",
            "content": "Yonik didn't even completely VETO the issue, if the user can override this behavior he seems to agree with your solution\n\nPrecisely.  \nDoes anyone other than Robert object to having a user override? ",
            "author": "Yonik Seeley",
            "id": "comment-13425752"
        },
        {
            "date": "2012-07-31T13:35:09+0000",
            "content": "Does anyone other than Robert object to having a user override?\n\nNot me. This file can come in the lucene.jar with the ability to either run with -Denforce.jvm.check or an override file (or the user can edit the file in the jar), I don't care. ",
            "author": "Shai Erera",
            "id": "comment-13425754"
        },
        {
            "date": "2012-07-31T13:37:05+0000",
            "content": "\nCan we include some text in the message, describing why it's incompatible, such as a link to a JIRA issue / markmail thread?\n\nWe can, ideally we would link to the original bugs, but they are now hidden from view in Oracle's issue tracker as this was related to some security vulnerabilities.\n\nWe could also link to http://vimeo.com/33817739 \n\n\nHow do you know to recommend a specific build version? \n\nBecause 1.7.0_01 was a bugfix release addressing this issue (broken loop optimizations).\n\nI don't mind listing that \"Oracle Corporation\" 1.7.0 is broken and not suggesting a version to upgrade to though, I think thats fine. ",
            "author": "Robert Muir",
            "id": "comment-13425755"
        },
        {
            "date": "2012-07-31T13:39:59+0000",
            "content": "I didnt say I objected to the override completely, I just said it makes no sense to me.\n\nFor this particular one I absolutely don't object to something like:\n\n\"If you really want to use this jvm, use -XX:-UseLoopPredicate -Drisky.override=true\"\n\n ",
            "author": "Robert Muir",
            "id": "comment-13425759"
        },
        {
            "date": "2012-07-31T13:42:21+0000",
            "content": "IMO, we must provide the ability to override. Changing the JVM is not trivial in some organizations for a variety of reasons, from \"policy\" to worry about whether version X is compatible with all the other apps (yeah, I know you can run multiple JVMs, but we're talking corporate policy here) to only using certified JVMs. Making this non-overridable would lock Solr/Lucene out of running in some organizations.\n\nThe other issue is that now a new user may not be able to even take Solr/Lucene for a test drive very easily. Imagine you're coming to Solr just to give it a spin and you can't get it to run without changing your JVM. That would be one more barrier to people using it. One of the strengths of Solr/Lucene is all the hoops you don't have to jump through to run the example code.\n\nThat said, I also agree it's just asking for trouble to run with known JVMs that can produce corrupt indexes. We should make it harder to do this naively. The current setup makes it easy to run with a JVM that can assassinate you down the road. Like after you've gone to production. And your commercial site is costing you $$$/second as long as it's down. That's, uhhhmmmm, bad.\n\nIt's also a time sink, I'd like to head using known buggy JVMs off at the pass.\n\nI also like the fact that we'd have a concise, known place to go to see all the JVMs that have known problems. It gives us a nice place to point users at when they see problems (\"Is your JVM listed in known_bad_jvms.txt?\"), assuming we keep this in an external file. Hmmm would be a nice thing to keep on the Wiki too... In big bold red letters.\n\nSo, +1 to making it harder to run with bad JVMs: If the user really wants to blow their leg off, let them run with known bad JVMs by providing a command-line override. I'll propose\n-Dit.is.stupid.to.run.with.a.known.buggy.JVM.but.we.will.do.it.anyway=true. Or perhaps\n-DI.really.hate.the.execs.so.we.will.devalue.stock.options=true.\n\nI'd really like to have a way to require the name of the person making the decision to override in all the startup scripts they'd have that implemented the override, but that's just being mean....\n\n-1 to making it impossible to run with a bad JVM\n\n+1 to being really terse with users who override things and complain anyway. ",
            "author": "Erick Erickson",
            "id": "comment-13425761"
        },
        {
            "date": "2012-07-31T13:45:17+0000",
            "content": "It would be far far better to just detect if -XX:-UseLoopPredicate or -Xint are set instead and not have a -Drisky.override.\n\nMaybe someone knows how to do this. Then the workaround message is simpler also. ",
            "author": "Robert Muir",
            "id": "comment-13425765"
        },
        {
            "date": "2012-07-31T13:51:58+0000",
            "content": "I didnt say I objected to the override completely, \n\nThe historical revisions are tiresome.  How else is one supposed to interpret this: https://issues.apache.org/jira/browse/LUCENE-4276?focusedCommentId=13425710&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13425710\n\nIt would be far far better to just detect if -XX:-UseLoopPredicate or -Xint are set instead and not have a -Drisky.override.\n\nNo, we still need an override.  We do not always know best. ",
            "author": "Yonik Seeley",
            "id": "comment-13425771"
        },
        {
            "date": "2012-07-31T13:52:01+0000",
            "content": "\nIMO, we must provide the ability to override. Changing the JVM is not trivial in some organizations for a variety of reasons,\n\nSure, I'm just saying I don't like this necessarily being some arbitrary option we introduce. This doesn't make sense to me if we can detect the actual workaround flags necessary to prevent the index corruption.\n\nFor the two recent corruption bugs these flags already exist, why not just use those if we can?\n\n\tOracle 1.7.0 b147: -XX:-UseLoopPredicate\n\tJRockit 1.6.0_33-R28.2.4-4.1.0: -XnoOpt\n\n ",
            "author": "Robert Muir",
            "id": "comment-13425772"
        },
        {
            "date": "2012-07-31T13:53:12+0000",
            "content": "+1 on user override from me as well. I agree with putting barriers in front of things we know are a problem - we should always make those barriers circumventable though. ",
            "author": "Mark Miller",
            "id": "comment-13425773"
        },
        {
            "date": "2012-07-31T13:53:22+0000",
            "content": "\nNo, we still need an override. We do not always know best.\n\nWhat does this mean? if you don't supply this option, loops are broken and it creates corrupt indexes.\n\nWhy is it so important we have our own override that allows someone to create a corrupt index?\nWhy can't the override be the workaround that also prevents corruption? ",
            "author": "Robert Muir",
            "id": "comment-13425774"
        },
        {
            "date": "2012-07-31T13:53:42+0000",
            "content": "IMO, we must provide the ability to override. Changing the JVM is not trivial in some organizations for a variety of reasons, from \"policy\" to worry about whether version X is compatible with all the other apps (yeah, I know you can run multiple JVMs, but we're talking corporate policy here) to only using certified JVMs. Making this non-overridable would lock Solr/Lucene out of running in some organizations.\n\nOn the other hand if you use this exactly JVM and startup your Solr instance it may crash when it uses PorterStemmer (OK, that's not bad at all because its another form of Robert's Runtime Exception - I just point that out: Solr in default configuration crashes after indexing the example docs, we tried that out), but if you are working around that by using not PorterStemmer, the worse thing is: After the first commit on your maybe holy index, it is correup, really. If you are in such a company, you have no chance to run Solr/Lucene - then its also fine to fail early, the override would be useless.\n\nIf you are in such a company that forces you to use JDK 1.7.0b147 (also known as 1.7.0GA), then they also won't allow you to pass -XX:-UseLoopPredicate. So at the end you cannot run Solr at all, so why not fail early instaed of late when people complain at your Consulting Company.\n\nIn general we should have a list of failing JDKs in the release notes. We started to do this in Lucene/Solr 3.5.0 where we \"oficially declared Lucene as Java 7 compatible\" with explicitely stating that \"you have to use u1 or later\". ",
            "author": "Uwe Schindler",
            "id": "comment-13425775"
        },
        {
            "date": "2012-07-31T13:53:55+0000",
            "content": "What I would prefer to have is a tool/script that I can explicitly run that will alert me to potential issues before I even run Lucene/Solr on a box. Or maybe both a command line tool and a test app that can be deployed in the desired container to report potential issues.\n\nThen, as part of the support process, the first thing we would ask people is whether they ran the \"environment check\" tool and what it said.\n\nThe JVM/compatibility check is just one example of checks that the tool could perform. ",
            "author": "Jack Krupansky",
            "id": "comment-13425776"
        },
        {
            "date": "2012-07-31T13:56:36+0000",
            "content": "\nWhat I would prefer to have is a tool/script that I can explicitly run that will alert me to potential issues before I even run Lucene/Solr on a box. Or maybe both a command line tool and a test app that can be deployed in the desired container to report potential issues.\n\nIts called 'ant test' ",
            "author": "Robert Muir",
            "id": "comment-13425777"
        },
        {
            "date": "2012-07-31T14:00:25+0000",
            "content": "\nIf you are in such a company that forces you to use JDK 1.7.0b147 (also known as 1.7.0GA), then they also won't allow you to pass -XX:-UseLoopPredicate. So at the end you cannot run Solr at all, so why not fail early instaed of late when people complain at your Consulting Company.\n\nI don't understand the situation where someone can pass -Dallow.corrupt.indexes=true but not -XX:-UseLoopPredicate\n\nAnd thats all i'm saying: there is already a flag for this bug to get past it, its -XX:-UseLoopPredicate. If you use it, you can use 1.7.0GA and it wont create a corrupt index. ",
            "author": "Robert Muir",
            "id": "comment-13425779"
        },
        {
            "date": "2012-07-31T14:09:08+0000",
            "content": "patch changing the message to suggest -XX:-UseLoopPredicate, if this is set, we don't fail.\n ",
            "author": "Robert Muir",
            "id": "comment-13425785"
        },
        {
            "date": "2012-07-31T14:12:54+0000",
            "content": "> No, we still need an override. We do not always know best.\n\nWhat does this mean? if you don't supply this option, loops are broken and it creates corrupt indexes.\n\nYou're still assuming that we know the best and only fixes for unknown and unseen applications using Lucene in different ways. We don't.\n\nFirst versions of workarounds can often be more crude (i.e. don't JIT this class or method at all) and later refinements can be more targeted and higher performing, and depending on the customer may even be in temporary binary patch form.  There are probably other cases I haven't even thought of yet - which was really the point in the first place.  An unconditional user override remains critical. ",
            "author": "Yonik Seeley",
            "id": "comment-13425787"
        },
        {
            "date": "2012-07-31T14:14:05+0000",
            "content": "-XX:-UseLoopPredicate\n\nWith this flag it won't create corrumpt indexes, but will it crash PorterStemmer? I don't remember, we should try out again.  ",
            "author": "Uwe Schindler",
            "id": "comment-13425789"
        },
        {
            "date": "2012-07-31T14:15:48+0000",
            "content": "\nFirst versions of workarounds can often be more crude (i.e. don't JIT this class or method at all) \n\nThis is not possible for this bug. If you prevent compilation of specific methods, it just miscompiles another loop.\n\nThis is the oracle-suggested workaround in the release notes of java 1.7.0GA ",
            "author": "Robert Muir",
            "id": "comment-13425791"
        },
        {
            "date": "2012-07-31T14:16:20+0000",
            "content": "\nWith this flag it won't create corrumpt indexes, but will it crash PorterStemmer? I don't remember, we should try out again.\n\nI'm only worried about corruption here. ",
            "author": "Robert Muir",
            "id": "comment-13425792"
        },
        {
            "date": "2012-07-31T14:23:03+0000",
            "content": "Can you add to the message \"This JVM is incompatible with Lucene, and may/will lead to index corruption\"? It's more informative.\n\nAnd, can you please describe here what's leading to the corruption? I.e. if I do:\n\n\tnew IndexWriter().close()\n\tnew IndexWriter().forceMerge()/maybeMerge().close()\n\tnew IndexWriter().addDocument().commit().close()\n\n\n\nWill all of these lead to corruption? Only some of them? What class causes the corruption, due to the bug? ",
            "author": "Shai Erera",
            "id": "comment-13425796"
        },
        {
            "date": "2012-07-31T14:28:52+0000",
            "content": "Its not just one class: its a general problem of loops being miscompiled. \n\nSo any merging at all is dangerous, checkindex might falsely say your existing index is corrupt (when its not), etc, etc. ",
            "author": "Robert Muir",
            "id": "comment-13425799"
        },
        {
            "date": "2012-07-31T14:29:35+0000",
            "content": "Here the release notes: http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html#knownissues ",
            "author": "Uwe Schindler",
            "id": "comment-13425801"
        },
        {
            "date": "2012-07-31T14:32:31+0000",
            "content": "Updated patch with generic user override\nlucene.checkJVMVersion ",
            "author": "Yonik Seeley",
            "id": "comment-13425804"
        },
        {
            "date": "2012-07-31T14:34:54+0000",
            "content": "Again I don't agree with the generic user override, but I'm not totally against it.\n\nHowever i don't like the name: i think it should sound significantly more dangerous.\n\n-Dlucene.allow.index.corruption seems fine to me. ",
            "author": "Robert Muir",
            "id": "comment-13425808"
        },
        {
            "date": "2012-07-31T14:36:16+0000",
            "content": "An external file allows one to add additional versions later on. E.g. we don't know today that an already released JVM doesn't cause such bugs, because we didn't test it, or it will appear later on. It's another reason to put this check in a file.\n\nThen, for people that use Lucene to create software for other people, they can add such versions to the file, instead of recompiling Lucene. ",
            "author": "Shai Erera",
            "id": "comment-13425810"
        },
        {
            "date": "2012-07-31T14:37:51+0000",
            "content": "Does it affect Lucene 3.6.1 too? 4.0-ALPHA? My guess is that \"yes\", and therefore we should issue a warning to our users. ",
            "author": "Shai Erera",
            "id": "comment-13425813"
        },
        {
            "date": "2012-07-31T14:38:19+0000",
            "content": "It affects Lucene back to version 1.0\n\nDoes it affect Lucene 3.6.1 too? 4.0-ALPHA? My guess is that \"yes\", and therefore we should issue a warning to our users.\n\nThat was done a year ago:\n\n\n\thttp://mail-archives.apache.org/mod_mbox/www-announce/201107.mbox/%3C001601cc4d6b$37618880$a6249980$@apache.org%3E\n\thttp://blog.thetaphi.de/2011/07/real-story-behind-java-7-ga-bugs.html\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13425815"
        },
        {
            "date": "2012-07-31T14:39:12+0000",
            "content": "\nAn external file allows one to add additional versions later on. E.g. we don't know today that an already released JVM doesn't cause such bugs, because we didn't test it, or it will appear later on. It's another reason to put this check in a file.\n\nThen, for people that use Lucene to create software for other people, they can add such versions to the file, instead of recompiling Lucene.\n\nThose people can implement their own checks in their own apps for whatever criteria they want: I don't think we need to build infrastructure for them to do that.\n\nI just want to have a check against the most ridiculous index corruption bugs (thats why i suggested this 1.7.0 one only here, I know there are others but in my opinion its the most dangerous and widespread). ",
            "author": "Robert Muir",
            "id": "comment-13425818"
        },
        {
            "date": "2012-07-31T17:24:58+0000",
            "content": "+1 to put a barrier up for running on JVMs that blatantly cause corruption.  This (early, hard failure) is a service to our users, else they will waste time trying to figure out what's going on.\n\n+1 to scarily-named user override.  -Dlucene.allow.index.corruption seems good.\n\nI don't think we need a separate file ... I think that's over designing it.\n\nAlso, we actually do have a wiki page detailing java bugs we've hit: http://wiki.apache.org/lucene-java/SunJavaBugs ",
            "author": "Michael McCandless",
            "id": "comment-13425935"
        },
        {
            "date": "2012-07-31T17:53:25+0000",
            "content": "As we already do the JVM option check for Java 7 (to detect is the \"fixing\" option is enabled), should we also check for corresponding Java options on 1.6.0_23 (or like that have to look up) to 1.6.0_28 (this is what I meant as \"range\") and detect if aggressive opts are enabled? We had users running on 1.6.0_26 with -XX:+AggressiveOpts and corrumpting their index (see mail from various users on Solr, Lucene and ElasticSearch). As we already do the HotspotMagangement reflection, we can also check this. The hotspot version numbers of the corresponding Java versions can be found out. Don't use Java version number like 1.6.0_26, as those are different in OpenJDK. Ubuntu ships with 1.6.0_24, but in fact the corrumption bugs are fixed (_24 in in that case has in fact nothing to do with Oracle bugfix version numbers). Ubuntu's version in 12.04LTS (called _24) is the same like _31 in Oracle numbers (too stupid, see http://blog.thetaphi.de/2011/12/jdk-7u2-released-how-about-linux-and.html). So we should only look at hotspot version numbers. The HotspotManagementBean can return that one, too. Its better than reading a sysprop... ",
            "author": "Uwe Schindler",
            "id": "comment-13425960"
        },
        {
            "date": "2012-07-31T17:59:18+0000",
            "content": "I agree with Mike M. on all three points:\n\n\n+1 to put a barrier up for running on JVMs that blatantly cause corruption. This (early, hard failure) is a service to our users, else they will waste time trying to figure out what's going on.\n\n+1 to scarily-named user override. -Dlucene.allow.index.corruption seems good.\n\nI don't think we need a separate file ... I think that's over designing it. ",
            "author": "Steve Rowe",
            "id": "comment-13425967"
        },
        {
            "date": "2012-07-31T18:07:54+0000",
            "content": "To come back to my last post:\nThe crazy thing is that OpenJDK versions shipped with Linux oerating systems often have stupid version numbers (see above). In fact the Java 7 version shipped with Ubuntu is called \"7~b147-2.0-0ubuntu0.11.10.1\", see https://launchpad.net/ubuntu/+source/openjdk-7/7~b147-2.0-0ubuntu0.11.10.1, but it is not broken. This may also be the confusion we have with some users when they report bugs (especially when they come from Linux). I am not happy about that, but this is how it is, I dont think detecting broken versions is easy and Robert's code can easily cause the problem. Vendor for OpenJDK is also \"Oracle\" (they return it for conformance with original). And the O/S verndor patches don't always raise version numbers of Hotspot.\n\nSo I think its too risky to fail hard! I think we should put it in the release notes (like any other vendor of software does). ",
            "author": "Uwe Schindler",
            "id": "comment-13425973"
        },
        {
            "date": "2012-07-31T18:27:59+0000",
            "content": "This patch doesnt look for b147, it looks at hotspot version (21.0-b17)\n\nIf Ubuntu fixed hotspot without changing even its build number, then they fucked up. Not my problem. ",
            "author": "Robert Muir",
            "id": "comment-13425994"
        },
        {
            "date": "2012-07-31T18:39:24+0000",
            "content": "So I think its too risky to fail hard! I think we should put it in the release notes (like any other vendor of software does).\n\n+1 - we should be very sure about our code before we purposely break something.  Thanks for looking deeper into it Uwe. ",
            "author": "Yonik Seeley",
            "id": "comment-13426004"
        },
        {
            "date": "2012-07-31T18:43:29+0000",
            "content": "We arent purposely breaking anything. This JVM is broken.\n\nIf some packager, somewhere, created a fixed version mislabeled the same as the broken version,\nthen thats their bug. ",
            "author": "Robert Muir",
            "id": "comment-13426011"
        },
        {
            "date": "2012-07-31T19:01:52+0000",
            "content": "...  then they fucked up. Not my problem.\n\nBut you make it the poor user's problem. What will he do - not use this JVM? Wait for the next one? When all the while that JVM is actually good. ",
            "author": "Shai Erera",
            "id": "comment-13426026"
        },
        {
            "date": "2012-07-31T19:04:41+0000",
            "content": "He can pass the flag (-XX:-UseLoopPredicate) to ensure he doesnt create a corrupt index.\n\nBecause how does this poor user actually know his jvm is not a buggy one since the version\nis the same as a buggy one? ",
            "author": "Robert Muir",
            "id": "comment-13426030"
        },
        {
            "date": "2012-07-31T19:06:08+0000",
            "content": "in fact, if you are so worried about it (I am not!), then actually look at how this \"ubuntu fixed version\" uwe is complaining about is actually implemented.\n\nChances are high they just turned off the broken optimization so its not going to be a problem since we look for UseLoopPredicate in the patch. ",
            "author": "Robert Muir",
            "id": "comment-13426032"
        },
        {
            "date": "2012-07-31T19:34:06+0000",
            "content": "Chances are high they just turned off the broken optimization so its not going to be a problem since we look for UseLoopPredicate in the patch.\n\nRead my blog post from last November (lik see above). They patched all the fixes into Oracle build 147. ",
            "author": "Uwe Schindler",
            "id": "comment-13426048"
        },
        {
            "date": "2012-08-07T03:41:22+0000",
            "content": "rmuir20120906-bulk-40-change ",
            "author": "Robert Muir",
            "id": "comment-13429698"
        },
        {
            "date": "2013-07-23T18:44:30+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716971"
        },
        {
            "date": "2014-04-16T12:54:26+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970754"
        },
        {
            "date": "2015-08-10T05:17:46+0000",
            "content": "<<Non-IBMers please ignore this message>>\n\nDont see this as a bug against IBM JDK.\n\nThanks and Regards\nBrijesh Nekkare\nIBM Java team ",
            "author": "Brijesh Nekkare",
            "id": "comment-14679580"
        }
    ]
}