{
    "id": "LUCENE-3346",
    "title": "jrebug causes checkindex fail",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "I dug into the samplingwrappertest fail: https://builds.apache.org/job/Lucene-Solr-tests-only-trunk-java7/22/\n\nI ran the test hundreds of times, and made 11 more random seeds. In every case, the $facet field had PulsingCodec (or MockRandom, which pulses things)\n\nHere's an example seed, that fails relatively quickly (4 seconds) every time:\nant test -Dtestcase=SamplingWrapperTest -Dtestmethod=testCountUsingSamping -Dtests.seed=3028256727308316121:-9062105085025921705",
    "attachments": {
        "seeds.txt": "https://issues.apache.org/jira/secure/attachment/12487951/seeds.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-07-27T09:02:02+0000",
            "content": "attached are all the seeds i found, just before i call it quits and drink my last beer.\n\nat least it doesnt affect 3.x or any release ",
            "author": "Robert Muir",
            "id": "comment-13071608"
        },
        {
            "date": "2011-07-27T15:52:09+0000",
            "content": "grr, so the problem appears to occur actually in StandardCodec, but only in the case where its wrapped by pulsing?!\n\nthe test passes if i use:\n\nant test -Dtestcase=SamplingWrapperTest -Dtestmethod=testCountUsingSamping -Dtests.seed=3028256727308316121:-9062105085025921705 \n-Dargs='-XX:CompileCommand=exclude,org/apache/lucene/index/codecs/standard/StandardPostingsReader\\$SegmentDocsAndPositionsAndPayloadsEnum,nextDoc'\n\n ",
            "author": "Robert Muir",
            "id": "comment-13071814"
        },
        {
            "date": "2011-07-27T20:28:13+0000",
            "content": "I created some workarounds for some of these seeds (heavy unrolling/manual inlining here and there), but this is really a collection of different broken loops, there are a lot of problems.\n\nSo i will leave this guy alone, hopefully nobody will ever use jdk1.7.0 with pulsing codec ",
            "author": "Robert Muir",
            "id": "comment-13071976"
        },
        {
            "date": "2011-07-27T20:34:27+0000",
            "content": "And of course never use aggressive opts in 1.6 g ",
            "author": "Uwe Schindler",
            "id": "comment-13071981"
        },
        {
            "date": "2011-07-29T02:41:16+0000",
            "content": "I can reproduce one of the bugs here now with StandardCodec, with a core test, it reads a payload wrongly.\nThis fails often with jdk1.7.0 official release, it fails if you pass it -XX:-UseLoopPredicate, it fails even if you pass it -Xint (wierd)\n\nBut it passes always with java1.7.0-uschindler on hudson, so somehow one of those patches uwe applied fixes the issue...\n\nSo with trunk, there are bugs you cannot work around with JRE options, that affect StandardCodec.\n\n\n    [junit] ------------- Standard Error -----------------\n    [junit] NOTE: reproduce with: ant test -Dtestcase=TestPayloads -Dtestmethod=testThreadSafety -Dtests.seed=-4249818591398960258:-529634722590138117 -Dtests.codec=Standard\n    [junit] NOTE: test params are: codec=Standard, locale=be, timezone=Pacific/Pitcairn\n    [junit] NOTE: all tests run in this JVM:\n    [junit] [TestPayloads]\n    [junit] NOTE: Linux 2.6.38-8-generic amd64/Oracle Corporation 1.7.0 (64-bit)/cpus=8,threads=1,free=194162192,total=252248064\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testThreadSafety(org.apache.lucene.index.TestPayloads):\tCaused an ERROR\n    [junit] expected:<\ufffd[]> but was:<\ufffd[\ufffdNs]>\n\n ",
            "author": "Robert Muir",
            "id": "comment-13072655"
        },
        {
            "date": "2011-07-29T07:49:52+0000",
            "content": "I triggered this with Standard's SegmentDocsEnum too, so you don't need payloads to hit this.\n\nI do not think a workaround is possible, I tried to add asserts in places but I think the bug somehow involves adding docid deltas in the loop... ",
            "author": "Robert Muir",
            "id": "comment-13072729"
        },
        {
            "date": "2011-12-15T14:05:13+0000",
            "content": "Seems like finally done in 7u2:\nhttp://www.oracle.com/technetwork/java/javase/2col/7u2bugfixes-1394661.html ",
            "author": "Krystian Nowak",
            "id": "comment-13170211"
        },
        {
            "date": "2011-12-15T14:20:43+0000",
            "content": "It is already solved in u1! ",
            "author": "Uwe Schindler",
            "id": "comment-13170237"
        }
    ]
}