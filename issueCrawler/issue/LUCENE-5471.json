{
    "id": "LUCENE-5471",
    "title": "Classloader issues when running Lucene under a java SecurityManager",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [],
        "affect_versions": "4.5",
        "status": "Open",
        "fix_versions": []
    },
    "description": "I see the following error when I run Lucene 4.5.0 under a java SecurityManager. I will attach a test program which shows this problem. The program works fine when a SecurityManager is not installed. But the program fails when I install a SecurityManager. Even more puzzling, the program works if I first run it without a SecurityManager, then install a SecurityManager, then re-run the program, all within the lifetime of a single JVM. I would appreciate advice about how to work around this problem:\n\nException in thread \"main\" java.lang.ExceptionInInitializerError\n\tat org.apache.lucene.index.LiveIndexWriterConfig.<init>(LiveIndexWriterConfig.java:122)\n\tat org.apache.lucene.index.IndexWriterConfig.<init>(IndexWriterConfig.java:165)\n\tat SecureLucene$1.run(SecureLucene.java:129)\n\tat SecureLucene$1.run(SecureLucene.java:122)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat SecureLucene.getIndexWriter(SecureLucene.java:120)\n\tat SecureLucene.runTest(SecureLucene.java:72)\n\tat SecureLucene.main(SecureLucene.java:52)\nCaused by: java.lang.IllegalArgumentException: A SPI class of type org.apache.lucene.codecs.Codec with name 'Lucene45' does not exist. You need to add the corresponding JAR file supporting this SPI to your classpath.The current classpath supports the following names: []\n\tat org.apache.lucene.util.NamedSPILoader.lookup(NamedSPILoader.java:109)\n\tat org.apache.lucene.codecs.Codec.forName(Codec.java:95)\n\tat org.apache.lucene.codecs.Codec.<clinit>(Codec.java:122)\n\t... 8 more",
    "attachments": {
        "SecureLucene.java": "https://issues.apache.org/jira/secure/attachment/12631030/SecureLucene.java"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13912014",
            "author": "Rick Hillegas",
            "content": "Attaching SecureLucene.java, a program which shows this problem. To run the program, I put the program and the following jar files on the classpath:\n\nlucene-analyzers-common-4.5.0.jar\nlucene-core-4.5.0.jar\nlucene-queryparser-4.5.0.jar\n\nI see these successful results...\n\n> java SecureLucene\nRunning unsecured...\n    Success!\nRunning with security manager...\n    Success!\n\n...and this unsuccessful result...\n\n> java SecureLucene true\nRunning with security manager...\nException in thread \"main\" java.lang.ExceptionInInitializerError\n\tat org.apache.lucene.index.LiveIndexWriterConfig.<init>(LiveIndexWriterConfig.java:122)\n\tat org.apache.lucene.index.IndexWriterConfig.<init>(IndexWriterConfig.java:165)\n\tat SecureLucene$1.run(SecureLucene.java:129)\n\tat SecureLucene$1.run(SecureLucene.java:122)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat SecureLucene.getIndexWriter(SecureLucene.java:120)\n\tat SecureLucene.runTest(SecureLucene.java:72)\n\tat SecureLucene.main(SecureLucene.java:52)\nCaused by: java.lang.IllegalArgumentException: A SPI class of type org.apache.lucene.codecs.Codec with name 'Lucene45' does not exist. You need to add the corresponding JAR file supporting this SPI to your classpath.The current classpath supports the following names: []\n\tat org.apache.lucene.util.NamedSPILoader.lookup(NamedSPILoader.java:109)\n\tat org.apache.lucene.codecs.Codec.forName(Codec.java:95)\n\tat org.apache.lucene.codecs.Codec.<clinit>(Codec.java:122)\n\t... 8 more ",
            "date": "2014-02-25T20:27:08+0000"
        },
        {
            "id": "comment-13912019",
            "author": "Robert Muir",
            "content": "I think its a bug in your securitymanager config (e.g. you are missing reflectpermission or something really necessary).\n\nWe use lucene in a securitymanager when running tests, see config here: http://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/tools/junit4/tests.policy ",
            "date": "2014-02-25T20:32:46+0000"
        },
        {
            "id": "comment-13912047",
            "author": "Rick Hillegas",
            "content": "Thanks, Robert.  After adding all of those permissions to my policy file, the test runs cleanly. Thanks. ",
            "date": "2014-02-25T20:54:43+0000"
        },
        {
            "id": "comment-13912054",
            "author": "Hoss Man",
            "content": "Even more puzzling, the program works if I first run it without a SecurityManager, then install a SecurityManager, then re-run the program, all within the lifetime of a single JVM. \n\nI suspect this is because of when/how SPI is used - if the codec is resolved before you load the security manager, then that info is still available in NamedSPILoader.\n\nif you did a NamedSPILoader.reload() on your classloader after activating the SecurityManager, you'd probably see the same problem no matter what.\n\nI think its a bug in your securitymanager config (e.g. you are missing reflectpermission or something really necessary).\n\nyeah ... w/o showing us what security manager you are using, it's hard to guess what the specific problem might be.\n\nthat said: it's strange that you got an IllegalArgumentException from NamedSPILoader instead of a SecurityException ... i can't think of any (legitimate) reason why that should have happened, unless we're swallowing RuntimeExceptions in the SPI Loader code? ",
            "date": "2014-02-25T21:02:51+0000"
        },
        {
            "id": "comment-13912070",
            "author": "Uwe Schindler",
            "content": "Hoss: We don't swallow the SecurityException. I think, with a SecurityManager enabled and some missing persmissions, stuff like ClassLoader#getResources() simply don't work and return an empty enumeration. So it does not find any resources from classloader, because code has no permissions to \"see\" the code.\n\nThis is defined in the spec - see http://docs.oracle.com/javase/7/docs/api/java/lang/ClassLoader.html#getResources(java.lang.String): \"An enumeration of URL objects for the resource. If no resources could be found, the enumeration will be empty. Resources that the class loader doesn't have access to will not be in the enumeration.\" This is a bit unclear, but getResource() is very good documented: \"A URL object for reading the resource, or null if the resource could not be found or the invoker doesn't have adequate privileges to get the resource.\"\n\nSo there is nothing we can do against that. ",
            "date": "2014-02-25T21:13:30+0000"
        },
        {
            "id": "comment-13912083",
            "author": "Hoss Man",
            "content": "null if the resource could not be found or the invoker doesn't have adequate privileges to get the resource.\n\nGrr... yeah, i forgot about that ... lack of permissions for accessing \"thing\" frequently looks the same as if \"thing\" doesn't exist.\n\nWe could, conceivably, ask the SecurityManager if we have the permissions we know we are going to need to do the things we want to do though, correct? and then if we get a SecurityException, wrap it in another SecurityException with details about why lucnee can't work w/o that permision?\n\n(I'm not saying i'm convinced we should \u2013 just wondering if other people think it would be helpful) ",
            "date": "2014-02-25T21:26:34+0000"
        },
        {
            "id": "comment-13912089",
            "author": "Uwe Schindler",
            "content": "I thought about that, too. Question is: What privilege is needed to do this? The problem is: depending on the ClassLoader we may see some stuff, others not. Has to do with the crazy codebase attribute in the policy file. You may only see some specific JAR files or only some java packages. So mostly impossible to get the real reason, without the code down in the ClassLoader hierarchy throwing a SecurityEx. I think we should keep it as it is. Maybe document it, that you need permissions to \"see\" the JAR files and resources in it. ",
            "date": "2014-02-25T21:32:38+0000"
        },
        {
            "id": "comment-13914731",
            "author": "Rick Hillegas",
            "content": "Thanks for the help and the discussion so far, Hoss and Uwe.\n\nAttaching a second rev of the SecureLucene test program. This version pares back the permissions in order to expose the minimal attack surface which I can configure by myself. Here are the minimal permissions which the test program grants in order to run successfully under a Java Security Manager:\n\n\n// permissions granted to Lucene\ngrant codeBase \"file:/Users/rh161140/derby/derby-590/trunk/tools/java/lucene-core-4.5.0.jar\"\n{\n  // permissions for file access, write access only to sandbox:\n  permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n  permission java.io.FilePermission \"/Users/rh161140/derby/derby-590/luceneTest\", \"read,write,delete\";\n  permission java.io.FilePermission \"/Users/rh161140/derby/derby-590/luceneTest/-\", \"read,write,delete\";\n  \n  // Basic permissions needed for Lucene to work:\n  permission java.util.PropertyPermission \"user.dir\", \"read\";\n  permission java.util.PropertyPermission \"sun.arch.data.model\", \"read\";\n  permission java.lang.reflect.ReflectPermission \"*\";\n  permission java.lang.RuntimePermission \"*\";\n};\n\n// permissions granted to the application\ngrant codeBase \"file:/Users/rh161140/src/\"\n{\n  // permissions for file access, write access only to sandbox:\n  permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n  permission java.io.FilePermission \"/Users/rh161140/derby/derby-590/luceneTest\", \"read,write\";\n  permission java.io.FilePermission \"/Users/rh161140/derby/derby-590/luceneTest/-\", \"read,write,delete\";\n  \n  // Basic permissions needed for Lucene to work:\n  permission java.util.PropertyPermission \"user.dir\", \"read\";\n  permission java.util.PropertyPermission \"sun.arch.data.model\", \"read\";\n};\n\n\n\nI have some follow on comments and questions:\n\n1) Is it really necessary to grant Lucene every RuntimePermission and the privilege to read every file in the file system? Maybe these grants can be tightened.\n\n2) I don't understand why the calling, application code needs to be granted any permissions. Maybe some more privilege blocks could be added to the Lucene code? In particular, it seems a shame that the application has to be granted the privilege to read every file in the file system.\n\n3) Most of the application permissions are self-revealing. That is, if I omit one of them, then I get an exception telling me that the permission needs to be granted. However, that is not the case for the first permission granted to the application...\n\n  permission java.io.FilePermission \"<<ALL FILES>>\", \"read\";\n\n...Without that permission, I get the original puzzling exception: \"Caused by: java.lang.IllegalArgumentException: A SPI class of type org.apache.lucene.codecs.Codec...\", which doesn't really tell me what the problem is. Maybe the wording of that exception could be improved so that the user can be told that one of its root causes is a failure to grant the application and Lucene read access to every file in the file system.\n\nThanks,\n-Rick ",
            "date": "2014-02-27T17:00:27+0000"
        },
        {
            "id": "comment-13917204",
            "author": "Rick Hillegas",
            "content": "Attaching a third version of SecureLucene.java. I have wrapped a privilege block around the application's Lucene calls and pruned some more permissions. This significantly reduces the attack surface.\n\nAt this point, I do not need to grant Lucene any runtime or reflection permissions and I do not need to grant Lucene read access to all of the files in the file system. I do not need to grant the application read access to all files in the file system, either. It turns out that Codec loading simply depends on the ability to read the Lucene core jar file.\n\nHere are the reduced permissions which I need to grant:\n\n\ngrant codeBase \"file:/Users/rh161140/derby/derby-590/trunk/tools/java/lucene-core-4.5.0.jar\"\n{\n  // permissions for file access, write access only to sandbox:\n  permission java.io.FilePermission \"/Users/rh161140/derby/derby-590/luceneTest\", \"read,write,delete\";\n  permission java.io.FilePermission \"/Users/rh161140/derby/derby-590/luceneTest/-\", \"read,write,delete\";\n  \n  // Basic permissions needed for Lucene to work:\n  permission java.util.PropertyPermission \"user.dir\", \"read\";\n  permission java.util.PropertyPermission \"sun.arch.data.model\", \"read\";\n};\n\ngrant codeBase \"file:/Users/rh161140/src/\"\n{\n  // permissions for file access, write access only to sandbox:\n  permission java.io.FilePermission \"/Users/rh161140/derby/derby-590/trunk/tools/java/lucene-core-4.5.0.jar\", \"read\";\n  permission java.io.FilePermission \"/Users/rh161140/derby/derby-590/luceneTest\", \"read,write\";\n  permission java.io.FilePermission \"/Users/rh161140/derby/derby-590/luceneTest/-\", \"read,write,delete\";\n  \n  // Basic permissions needed for Lucene to work:\n  permission java.util.PropertyPermission \"user.dir\", \"read\";\n  permission java.util.PropertyPermission \"sun.arch.data.model\", \"read\";\n};\n\n ",
            "date": "2014-03-01T21:57:08+0000"
        }
    ]
}