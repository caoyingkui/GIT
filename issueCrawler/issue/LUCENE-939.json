{
    "id": "LUCENE-939",
    "title": "Check for boundary conditions in FieldInfos",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "2.3"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In FieldInfos there are three methods in which we don't check for\nboundary conditions but catch e. g. an IndexOutOfBoundsException\nor a NPE. I think this isn't good code style and is probably not\neven faster than checking explicitly.\n\n\"Exceptions should not be used to alter the flow of a program as \npart of normal execution.\"\n\nAlso this can be irritating when you're trying to debug an \nIndexOutOfBoundsException that is thrown somewhere else in your\nprogram and you place a breakpoint on that exception.\n\nThe three methods are:\n\n  public int fieldNumber(String fieldName) {\n    try \n{\n      FieldInfo fi = fieldInfo(fieldName);\n      if (fi != null)\n        return fi.number;\n    }\n    catch (IndexOutOfBoundsException ioobe) \n{\n      return -1;\n    }\n    return -1;\n  }\n\n\n  public String fieldName(int fieldNumber) {\n    try \n{\n      return fieldInfo(fieldNumber).name;\n    }\n    catch (NullPointerException npe) \n{\n      return \"\";\n    }\n  }\n\n\n  public FieldInfo fieldInfo(int fieldNumber) {\n    try \n{\n      return (FieldInfo) byNumber.get(fieldNumber);\n    }\n    catch (IndexOutOfBoundsException ioobe) \n{\n      return null;\n    }\n  }",
    "attachments": {
        "lucene-939.patch": "https://issues.apache.org/jira/secure/attachment/12362317/lucene-939.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-07-23T03:32:33+0000",
            "content": "This patch removes the catch clauses and adds explicit checks\nfor the boundary cases. \n\nIn fieldInfo(int fieldNumber) we only have to check if \nfieldNumber>=0 because of one special case: the very first \nterm in the dictionary is always an empty term \"\":\"\". That's\nwhy -1 is stored as field number for this term in the \ndictionary. If we could avoid storing the empty term then we\ncould also get rid of these checks in FieldInfos. When I \nhave some time I'll look into that and add a separate issue.\n\nAll tests pass with this patch. ",
            "author": "Michael Busch",
            "id": "comment-12514549"
        }
    ]
}