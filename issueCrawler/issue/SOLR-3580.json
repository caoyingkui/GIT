{
    "id": "SOLR-3580",
    "title": "In ExtendedDismax, lowercase 'not' operator is not being treated as an operator when 'lowercaseOperators' is enabled",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "When lowercase operator support is enabled (for edismax), the lowercase 'not' operator is being wrongly treated as a literal term (and not as an operator).",
    "attachments": {
        "SOLR-3580-proposal.patch": "https://issues.apache.org/jira/secure/attachment/12534464/SOLR-3580-proposal.patch",
        "SOLR-3580.patch": "https://issues.apache.org/jira/secure/attachment/12533565/SOLR-3580.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Michael Dodsworth",
            "id": "comment-13401815",
            "date": "2012-06-27T00:05:49+0000",
            "content": "patch includes:\n\n\tfix to edismax\n\treplacement operator test (covers upper and lowercase 'AND', 'OR' and 'NOT' operators with 'lowercaseOperators' enabled/disabled)\n\tsmall clear-up in the test (adding @Test annotations and removing redundant 'throws IOException's)\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13402303",
            "date": "2012-06-27T15:47:25+0000",
            "content": "This is by design.  Treating \"and\" and \"or\" as operators when people may not realize they are is much less catastrophic than treating not as an operator.\n\nIf someone searches for\nto be or not to be\nexcluding all documents with \"to\" in them is very bad.\n "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13402318",
            "date": "2012-06-27T16:06:12+0000",
            "content": "surely that's a more general hazard with supporting lowercase operators. It seems strange to give 'not' special treatment. There are likely are examples where having 'and' or 'or' wrongly treated as a operator /is/ catastrophic, therefore the onus should be on the client to choose the correct 'lowercaseOperator' option for their use-case. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13402321",
            "date": "2012-06-27T16:19:08+0000",
            "content": "edismax is about heuristics and sometimes guessing user intent... if exact/strict syntax is desired, the lucene query parser is a better fit. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13402350",
            "date": "2012-06-27T16:48:21+0000",
            "content": "were we not allowing the user to explicitly specify that they want to support lowercase operators, I might agree.\n\nThat setting should (at the very least) come with a clear health warning so that more people aren't caught out by this. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13402826",
            "date": "2012-06-28T04:07:49+0000",
            "content": "My recommendation is to have an additional option, \"lowercaseNotOperator\" which defaults to \"false\". This would be the safe choice that Yonik recommends, but allow you to override that decision as you see fit for your application. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13402894",
            "date": "2012-06-28T07:11:56+0000",
            "content": "Or redo the whole thing in a more generic way:\n\nvalidOrOperators=OR,or     (default=OR)\nvalidAndOperators=AND,and  (default=AND)\nvalidNotOperators=NOT      (default=NOT)\n\n\n\nThis way people cannot only add lowercase variants if wanted, but they can also translate to their own language (Norwegian: ELLER / OG / IKKE) and take more control alltogether; The old lowercaseOperators would be deprecated and removed in next version. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13403641",
            "date": "2012-06-29T01:18:09+0000",
            "content": "one option (that sits somewhere between the 2 proposed solutions) may be to have a 'supportedLowercaseOperators' setting that takes a comma-separated list of supported operators. If no override is provided, the default behaviour would be to accept '[and,or]'.\n\n\n \n<str name=\"supportedLowercaseOperators\">and,or,not</str>\n\n\n\nLet me get a patch together so people can take a look. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13405389",
            "date": "2012-07-02T22:16:12+0000",
            "content": "adding the 'supportedLowercaseOperator' parameter I mentioned.\n\nAlso cleared up a few unused vars, assignments, etc.\n\nRequires more tests but I'm interested to hear what people think. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412083",
            "date": "2012-07-11T22:25:57+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13425847",
            "date": "2012-07-31T15:30:28+0000",
            "content": "Does this seem like a reasonable direction to everyone? "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13425853",
            "date": "2012-07-31T15:43:46+0000",
            "content": "I'm okay with the proposal for \"supportedLowercaseOperators\", but I would make two points:\n\n1. What about mixed case? Would mixed case And/Or/Not be treated as lower case? Or only strict lower case?\n2. How about a revised compromise - Keep \"lowercaseOperators=true/false\" as is for compatibility, but also support the same parameter name with the form \"lowercaseOperators=and,or,not\" to provide the desired flexibility. All the benefit of the current proposal, but without the need to switch/deprecate the old form. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13425868",
            "date": "2012-07-31T15:57:22+0000",
            "content": "If we are to do anything here, I think I like Jan's proposal best. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13425932",
            "date": "2012-07-31T17:18:04+0000",
            "content": "Thanks for the feedback, Jack/Yonik.\n\n1 - support for mixed-case operators is as before: they are interpreted as operators. Having said that, there appears to be an subtle bug with the 'mm' toggling behaviour. The operator counting (used to determine whether 'mm' needs to be disabled) only accepts strict uppercase and lowercase, whereas the query rebuild accepts mixed-case. I can also fix that up and add a test.\n\n2 - the 'supportedLowercaseOperators' parameter would be in addition to 'lowercaseOperators', rather than replacing it. If 'lowercaseOperators' is true, we look for a 'supportedLowercaseOperators' value. If no value is provided, we use the default (and, or), which means we have backwards compatibility.\n\nYonik - yeah, Jan's proposal is absolutely the most flexible. I guess my concerns were:\n\n\tthat it might snowball into wanting to have an external, stopword-esk file for per-language operator support (minor concern)\n\tthat we'd lose some backwards compatibility, as currently mixed-case operators are supported (although the default set could be expanded to accommodate this, if needed)\n\tthe interaction between the 'lowercaseOperators' parameter and 'valid*' might get a little funky. For example, if we simply ignore 'lowercaseOperators' when a 'valid*' parameter is present, there is no potential for confusion BUT toggling lowercase operator support per query then becomes a head-ache (as the upstream client needs to pass through the supported uppercase operators). If we allow interaction between 'lowercaseOperators' and 'valid*', which parameter takes priority? To allow toggling per-query, lowercaseOperators should take priority. Perhaps a good dollop of documentation would be enough here\n\n\n\nLet me extend the patch to switch-over to Jan's proposal so people can take a look.\nCheers, "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429729",
            "date": "2012-08-07T03:42:30+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13451131",
            "date": "2012-09-07T23:25:02+0000",
            "content": "removing fixVersion=4.0 since there is no evidence that anyone is currently working on this issue.  (this can certainly be revisited if volunteers step forward) "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13620889",
            "date": "2013-04-03T12:30:55+0000",
            "content": "Any progress on this?\n\nA more compact config format would be possible too:\n\nvalidOperators=or:OR,or and:AND,and not:NOT\n\n\n\nThen, if we add more operators later, such as NEAR, the same param would apply. Perhaps we also could use this to disable explicit operators alltogether by allowing an empty list validOperators=or: and: not: - for people who want to lock things down.\n\nAs for interaction with lowercaseOperators, I'm happy to let it hang around for 4.x, but throw an exception if both params are defined together. "
        },
        {
            "author": "Eric Pugh",
            "id": "comment-13753788",
            "date": "2013-08-29T16:30:37+0000",
            "content": "I was about to submit a patch for the fact that 'NOT' and 'not' don't work the same, when I stumbled across this issue.  My patch file looks rather remarkably like Michael Dodsworth first patch as well!    \n\nOne thing is that the wiki needs an update: http://wiki.apache.org/solr/ExtendedDisMax#lowercaseOperators   I can put that in, referring to the patch files as option if you need not:NOT support.\n\nI would like to see something committed, as my customer has the same need for NOT to work.   Their users are sophisticated, know the syntax etc.   Backup plan is to do something custom.\n "
        },
        {
            "author": "Pranshu Sharma",
            "id": "comment-14243370",
            "date": "2014-12-11T23:42:07+0000",
            "content": "This patch allows configurable operator representations, as suggested in discussions between Michael Dodsworth, Yonik Seeley and Jan H\u00f8ydahl.  "
        }
    ]
}