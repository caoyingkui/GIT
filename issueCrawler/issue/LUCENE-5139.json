{
    "id": "LUCENE-5139",
    "title": "ArrayIndexOutOfBoundsException in FacetsAccumulator.accumulate while indexing",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [],
        "affect_versions": "4.4",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "It is a hard to reproduce problem, but I see it from time to time. I am indexing some 100k documents and while I am doing that, I use the search and facet module. \n\nIn some cases, I get an AIOOBE on the FacetAccumulator.accumulate method. See for example this little stacktrace:\njava.lang.ArrayIndexOutOfBoundsException: 1400222\n     at org.apache.lucene.facet.search.FastCountingFacetsAggregator.aggregate(FastCountingFacetsAggregator.java:87)\n     at org.apache.lucene.facet.search.FacetsAccumulator.accumulate(FacetsAccumulator.java:167)\n     at org.apache.lucene.facet.search.FacetsCollector.getFacetResults(FacetsCollector.java:214)\n     at ...\n\nSome more detail:\n\nI have a index that is being written to by an IndexWriter. The index is searched by a SearcherManager that uses the same Directory. The searcherManager has a scheduled maybeRefresh each 1000ms. When refreshing, I also check whether the taxonomy has changed. If so, I replace it by the new one. I use this code:\n\n\nTaxonomyReader newReader = TaxonomyReader.openIfChanged( this.taxoReader );\nif ( newReader != null )\n{\n\tthis.taxoReader = newReader;\n\tLOG.info( \"Reopening taxonomyReader because it has changed!\" );\n}\n\n\n\n\nI will try to make it more reproducable; but maybe someone already has an idea on what might trigger this.",
    "attachments": {
        "testfacetindexing.zip": "https://issues.apache.org/jira/secure/attachment/12594378/testfacetindexing.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-26T11:29:00+0000",
            "content": "Rob, can you try to reproduce that while using SearcherTaxonomyManager? The problem with what you do is that IndexSearcher and TaxonomyReader are not reopened atomically. I.e. a thread could call sm.acquire() after your sm.maybeRefresh() finished, but before TaxonomyReader was reopned.\n\nAlso, I don't know if it's the full code section which updates the taxoReader instance, but if it is, note that you don't close the previous reader instance, thereby leaking references (and file handles). ",
            "author": "Shai Erera",
            "id": "comment-13720685"
        },
        {
            "date": "2013-07-26T12:22:08+0000",
            "content": "Hi Shai, I cannot directly use the SearcherTaxonomyManager, because it can only be constructed using an IndexWriter. For my use case, I have this:\n\n\tthis.searcherManager = new SearcherManager( this.indexDirectory, new SearcherFactory() );\n\n\n\nI use an indexDirectory. It would be nice if I can use this construction like this: \n\n        this.searcherTaxoManager = new SearcherTaxonomyManager( this.indexDirectory, this.taxoDirectory, new SearcherFactory() );\n\n\n\nHowever:\n\nI created some tests; using the \n{SearchedTaxonomyManager} and the Writers I don't get any errors. When not using the {SearchedTaxonomyManager}\n I sometimes get this assertion failure: \n\n  java.lang.AssertionError: ord=2 vs maxOrd=1\n\tat org.apache.lucene.facet.search.FastCountingFacetsAggregator.aggregate(FastCountingFacetsAggregator.java:86)\n\tat org.apache.lucene.facet.search.FacetsAccumulator.accumulate(FacetsAccumulator.java:167)\n\tat org.apache.lucene.facet.search.FacetsCollector.getFacetResults(FacetsCollector.java:214)\n\tat org.audenaerde.FacetSearchWhileIndexingLuceneTest$Searcher.run(FacetSearchWhileIndexingLuceneTest.java:126)\n\nI will attach the code to this issue. ",
            "author": "Rob Audenaerde",
            "id": "comment-13720729"
        },
        {
            "date": "2013-07-26T12:25:54+0000",
            "content": "Two tests. One uses NTR using the writers, the other one 'breaks' (is probably incorrect) with assertion errors ",
            "author": "Rob Audenaerde",
            "id": "comment-13720731"
        },
        {
            "date": "2013-07-26T12:30:01+0000",
            "content": "That assertion seems to be what I was talking about \u2013 an IndexSearcher sees more docs than its matching TaxonomyReader.\n\nThe reason we don't have a Directory-based SearcherTaxoManager version (yet!) is that we'd need to guarantee the two Directories (index and taxo) actually agree on their state. That is, all the categories that are indexed in the search index, also exist in the taxonomy index. Also, that all the categories that are encoded in the taxonomy index (and their ordinals) are consistent with the ones in the search index. In other words, that the ordinal=7 in both Directories denote the same category!\n\nWe could perhaps write an OptimisticSearcherTaxoManager which takes two Directories. You could also write one yourself to try it \u2013 should be very easy. You can copy most of the code from STManager (with the writers). ",
            "author": "Shai Erera",
            "id": "comment-13720735"
        },
        {
            "date": "2013-07-26T12:40:17+0000",
            "content": "Yup, the first test shows exactly the problem. Your refresh() method first calls sm.maybeRefresh() and then reopens the taxonomy. If in between a Searcher acquired an IndexSearcher (refreshed) and runs a search, it uses a newer IndexSearcher with an older TaxoReader.\n\nYou can try to reverse the order of refresh() so that taxoReader is reopened before sm.maybeRefresh(). It's usually ok if taxoReader sees more ordinals than IndexSearcher, not vice versa. I say usually, because in some cases, e.g. when you replaceTaxonomy and writer.deleteAll(), it's not the case. For that, we need a SearcherTaxoManager which can verify that the two indexes are consistent. ",
            "author": "Shai Erera",
            "id": "comment-13720745"
        },
        {
            "date": "2013-07-26T12:53:12+0000",
            "content": "If I understand correctly, the problem basically is that it is not (yet?) possible to tell if the two directories agree on their state? IF that is not possible, I will still get the assertionErrors? ",
            "author": "Rob Audenaerde",
            "id": "comment-13720755"
        },
        {
            "date": "2013-07-26T13:02:36+0000",
            "content": "Not exactly. In your app, you control the commit() to both indexes. And therefore you \"know\" that after commit the two directories agree on their state and can refresh a single SearcherTaxoManager.\n\nThis might fail though if the commit to one index succeeded, and failed to the other (e.g. the machine crashed). For that reason, we always commit taxo first, because it's ok if it contains more ordinals than are currently used by the search index.\n\nIf you're not replacing your index content (i.e. iw.deleteAll() + tw.replaceTaxo()), you can do the following (by the same object/thread):\n\n\n\tCall iw.commit()\n\tCall tw.commit()\n\tCall searcherTaxoManager.refresh()\n\n\n\nIf you call refresh() from a different thread, you're still not safe, because it might be refreshing after iw committed, but before tw. ",
            "author": "Shai Erera",
            "id": "comment-13720767"
        },
        {
            "date": "2013-12-16T09:33:20+0000",
            "content": "In the end we managed to get around this problem by implementing locking around commits (because multiples thread could call commit() on either iw or tw). ",
            "author": "Rob Audenaerde",
            "id": "comment-13848956"
        },
        {
            "date": "2013-12-16T09:39:54+0000",
            "content": "The issue cannot be fixed in Lucene, I think. So closed with 'Wont't fix' ",
            "author": "Rob Audenaerde",
            "id": "comment-13848965"
        }
    ]
}