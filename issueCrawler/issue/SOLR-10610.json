{
    "id": "SOLR-10610",
    "title": "Add CanaryComponent, a search component to analyse requests",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "This patch proposes a new component that analyses a request and reports whether it is too complex to continue processing.\nThis patch makes active use of SOLR-10880 , SOLR-10881 and SOLR-11343 .\n\nThis component is meant to help with troublesome queries, as it allows to perform a query on a subset of replicas (that could be isolated from user traffic) to verify if the query execution is safe.\nRunning this component is conditional and if enabled, will happen before other components start processing.\nThis is ensured by the fact that the whole execution of this component happens in the STAGE_PARSE_QUERY (SOLR-10609 proposes to rename this stage to a more meaningful name).\n\nCanaryComponent reports the status of the analysis as a Boolean via the CanaryComponent.CANARY_SUCCESS response parameter and through a field in ResponseBuilder.\n\nThe same return convention applies to both:\n\n\tnull/non-existing when the CanaryComponent did not execute the query\n\ttrue if the CanaryComponent processed the query and did not find any problem\n\tfalse if the query execution didn't terminate normally.\n\n\n\nThe CanaryComponent needs to be properly set-up before being used.\nSet-up:\n1) Tagging one or more replicas as \"canary\" replicas (Depends on SOLR-10880 and SOLR-10881):\n  Using replica properties, set a property (this can be independent from any other shard filtering property, but it is not compulsory for it to be such), to a value (canary type).\n  A collection can have many canaries of many types, for example:\n\n\tshard1replica3, shard2replica1 have the property canaryColour=yellow\n\tshard4replica2 has the property canaryColour=red\n  And so on.\n  There can be multiple canary replicas per shard.\n  CanaryComponentTest.java shows an example of such tagging.\n\n\n\n2) The CanaryComponent needs to be added to the /select RequestHandler (Example included in the cloud-canary test config files).\n  Optional but encouraged: set the flag canary.timeout to a sensible Long (time in milliseconds) value, this will ensure that all the requests have a timeout specified.\n  Note: the timeout can be specified on a per-request basis.\nThis concludes the initial set-up.\n\n\nUsage\nFor each request that needs to be run through the CanaryComponent the following parameters have to be added (depends on SOLR-10880):\nfilterByReplicaProp=true\nand\ncanary=CANARY_TYPE_PROPERTY:CANARY_TYPE\n\nA timeout needs to be specified, but for convenience it can be specified as mentioned in point 2.\nRunning a query on the canary without a timeout is not permitted, and an exception will be thrown.\n\nFor example: \n\nfilterByReplicaProp=true&canary=birdColour:yellow&canary.timeout=5000\n\n\nThis means that the request needs the replica filtering framework enabled (See SOLR-10880), that the canary requests will have to be routed to the replicas having the property birdColour set to yellow and that this request should timeout after 5 seconds.\n\nAn example of the requests can be seen in CanaryComponentTest.java\n\nThe request will only run on one canary replica, but if there are multiple replicas matching CANARY_TYPE_PROPERTY:CANARY_TYPE, a random one will be picked among them, should it be unreachable, another random one will be chosen, and so on.\nExample:\nGiven the following list of replicas matching CANARY_TYPE_PROPERTY:CANARY_TYPE looking like \n\n[\"\", \"shard2replica2\", \"\", \"shard4replica3|shard4replica2\"]\n\n\nThe component will rearrange them to look like this list \n\n[\"shard2replica2|shard4replica3|shard4replica2\"]\n\n\nThe request will be executed exactly how the QueryComponent would execute it (depends on SOLR-11343), this is done to ensure that the analysis is as realistic as possible, however its execution will be performed in a separate thread.\nThis is done so that eventual exceptions thrown by the query can be caught, and that its time of execution can be monitored at a finer level, the execution of the query is halted as soon as an exception is detected or if it timed out.\nCanaryComponent will clean its query results so that other components will not see partial results.\n\nUsage warnings\n\n\n\tRunning a query with the parameter canary set, but without ShardParams.FILTER_BY_REPLICA_PROPERTY will cause the CanaryComponent to throw an exception.\n\tRunning a query with the parameter canary set, but without any replica matching the property and tag specified will cause the CanaryComponent to throw an exception.\n\tRunning a query with the parameter canary set to a value not matching the format CANARY_TYPE_PROPERTY:CANARY_TYPE will cause the CanaryComponent to throw an exception.",
    "attachments": {
        "SOLR-10610.patch": "https://issues.apache.org/jira/secure/attachment/12878337/SOLR-10610.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-05T08:40:02+0000",
            "content": "Patch file ",
            "author": "Domenico Fabio Marino",
            "id": "comment-15997944"
        },
        {
            "date": "2017-05-09T10:38:47+0000",
            "content": "ticket cross-reference: in SOLR-1687 Jan H\u00f8ydahl mentioned a generic RequestSanitizerComponent he wrote. it sounds like there's some similarities between the request sanitizer and canary components. ",
            "author": "Christine Poerschke",
            "id": "comment-16002462"
        },
        {
            "date": "2017-07-21T10:46:00+0000",
            "content": "Updated patch ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16096125"
        },
        {
            "date": "2017-07-23T12:50:14+0000",
            "content": "\n+    // TODO: actually perform the query\n+    LOG.info(\"Processing {}\", rb.req);\n+    // TODO: Sample simple check that can be performed on the query\n+    if (rb.getQueryString().length() > 10) {\n+      rb.setCanaryStatus(CanaryStatus.STATUS_FAILURE);\n+    } else {\n+      rb.setCanaryStatus(CanaryStatus.STATUS_SUCCESS);\n+    }\n\n\n\nSo, to clarify the proposal, is the idea that success/failure comes from:\n\n\n\tstatic checks done on the query (length, num clauses, num fields, wildcards)?\n\tthe results of running the query on 1 or more canary replicas?\n\tor some combination of both?\n\n ",
            "author": "Jason Gerlowski",
            "id": "comment-16097621"
        },
        {
            "date": "2017-07-31T10:26:11+0000",
            "content": "The failure will come from a combination of both, with the possibility of avoiding to run the query if the static checks fail ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16107107"
        },
        {
            "date": "2017-08-25T10:53:20+0000",
            "content": "Status update:\n\nNote: this proposal depends on the patches SOLR-10990 SOLR-10880 SOLR-10881\nAn implementation is ready, but as the dependencies are not yet merged/ready, it will not be uploaded.\n\nThe canary system is based on the usage of a new component: CanaryComponent.\nCanaryComponent aims to perform the query in a safer and checked manner, and report eventual errors.\nThe CanaryComponent needs to be properly set-up before being used.\nSet-up:\n\n\tTagging one or more replicas as \"canary\" replicas (Depends on SOLR-10880 and SOLR-10881):\n  Using replica properties, set a property (this can be independent from any other shard filtering property, but it is not compulsory for it to be such), to a value (canary type).\n  A collection can have many canaries of many types, for example:\n\t\n\t\tshard1replica3, shard2replica1 have the property canaryColour=yellow\n\t\tshard4replica2 has the property canaryColour=red\n  And so on.\n  There can be multiple canary replicas per shard.\n  A test file will be provided to show an example of such tagging.\n\t\n\t\n\n\n\n\n\t2) The CanaryComponent needs to be added to the /select RequestHandler (Also included in the test files).\n  Optional but encouraged: set the flag \n\ncanary.timeout\n\n to a sensible Long (time in milliseconds) value, this will ensure that all the requests have a timeout specified.\n  Note: the timeout can be specified on a per-request basis.\nThis concludes the initial set-up.\n\n\n\nUsage\nFor each request that needs to be run through the CanaryComponent the following parameters have to be added (depends on SOLR-10880):\n\nfilterByReplicaProp=true\n\nand\n\ncanary=CANARY_TYPE_PROPERTY:CANARY_TYPE\n\n\nA timeout needs to be specified, but for convenience it can be specified as mentioned in point 2.\nRunning a query on the canary without a timeout is not permitted, and an exception will be thrown.\n\nFor example: \n\nfilterByReplicaProp=true&canary=birdColour:yellow&canary.timeout=5000\n\n\nThis means that the request needs the replica filtering framework enabled (See SOLR-10880), that the canary requests will have to be routed to the replicas having the property birdColour set to yellow and that this request should timeout after 5 seconds.\nIf no replicas match the given filter, an exception will be thrown.\n\nThe request will only run on one canary replica, but if there are multiple replicas matching CANARY_TYPE_PROPERTY:CANARY_TYPE, a random one will be picked among them, should it be unreachable, another random one will be chosen, and so on.\nThe request will be executed exactly how the QueryComponent would execute it (depends on SOLR-10990), this is done to ensure that the analysis is as realistic as possible, however its execution will be performed in a separate thread.\nThis is done so that eventual exceptions thrown by the query can be caught, and that its time of execution can be monitored at a finer level, the execution of the query is halted as soon as an exception is detected or if it timed out.\nCanaryComponent reports the status of the analysis as a Boolean via the CanaryComponent.CANARY_SUCCESS response parameter and through a field in ResponseBuilder.\n\nThe same return convention applies to both:\n\n\tnull/non-existing when the CanaryComponent did not execute the query\n\ttrue if the CanaryComponent processed the query and did not find any problem\n\tfalse if the query execution didn't terminate normally.\nCanaryComponent will clean its query results so that other components will not see partial results.\n\n ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16141476"
        },
        {
            "date": "2017-09-11T14:39:03+0000",
            "content": "Updated patch file to match latest proposal ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16161364"
        },
        {
            "date": "2017-09-21T13:10:41+0000",
            "content": "Updated patch to lessen the changes in QueryComponent.java ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16174718"
        }
    ]
}