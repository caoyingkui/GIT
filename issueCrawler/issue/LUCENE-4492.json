{
    "id": "LUCENE-4492",
    "title": "Immutable Suggester impls. should be immutable",
    "details": {
        "components": [
            "modules/other"
        ],
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "3.6.1,                                            4.0,                                            4.1",
        "priority": "Major",
        "labels": "",
        "type": "Wish",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently we have a very clumsy interface to build and load the Suggesters that are immutable. All our FST impls must be somewhat pre-build and then loaded. But currently the code doesn't declare the fst member as final and lets you change it at any time. ie you can always call load / build. This makes safe publication tricky and required custom code to make this reasonable. Ie. you have as suggester that can reload it's dict every 20 min. Now if you want to swap this in once loaded you can create a new Lookup instance and assign it to a member in your app. Yet this member needs to be volatile otherwise threads won't fetch all the memory and you can run into NPE exceptions since the fst member is not final. I'd not want to pay the price for this volatile read in a suggest env since its really read-only.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-23T18:44:33+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716982"
        },
        {
            "date": "2014-04-16T12:54:40+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970838"
        }
    ]
}