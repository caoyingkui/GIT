{
    "id": "LUCENE-4570",
    "title": "Release ForbiddenAPI checker on Google Code",
    "details": {
        "components": [
            "general/build"
        ],
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "New Feature",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently there is source code in lucene/tools/src (e.g. Forbidden APIs checker ant task).\n\nIt would be convenient if you could download this thing in your ant build from ivy (especially if maybe it included our definitions .txt files as resources).\n\nIn general checking for locale/charset violations in this way is a pretty general useful thing for a server-side app.\n\nCan we either release lucene-tools.jar as an artifact, or maybe alternatively move this somewhere else as a standalone project and suck it in ourselves?",
    "attachments": {
        "LUCENE-4570-maven-inherited.patch": "https://issues.apache.org/jira/secure/attachment/12569155/LUCENE-4570-maven-inherited.patch",
        "LUCENE-4570-maven.patch": "https://issues.apache.org/jira/secure/attachment/12568930/LUCENE-4570-maven.patch",
        "LUCENE-4570.patch": "https://issues.apache.org/jira/secure/attachment/12565473/LUCENE-4570.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-11-22T16:06:41+0000",
            "content": "I think we should release the whole stuff, including parts of my blog post (http://blog.thetaphi.de/2012/07/default-locales-default-charsets-and.html) as documentation. The question is: Are there any restrictions from the Apache side by re-releasing source code (+ the TXT files) under a different name?\n\nI will go ahead already and add a ASF license header on top of our forbiddenApis/*.txt files! ",
            "author": "Uwe Schindler",
            "id": "comment-13502837"
        },
        {
            "date": "2012-11-22T16:10:00+0000",
            "content": "+1 for the blog post as documentation. Especially the portion in red text! ",
            "author": "Robert Muir",
            "id": "comment-13502838"
        },
        {
            "date": "2012-11-22T16:22:05+0000",
            "content": "+1 for making it reusable. It should be built into javac  ",
            "author": "Dawid Weiss",
            "id": "comment-13502842"
        },
        {
            "date": "2012-11-26T21:46:32+0000",
            "content": "[branch_4x commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1412599\n\nLUCENE-4570: Add missing license headers\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13504143"
        },
        {
            "date": "2012-11-26T21:46:37+0000",
            "content": "[trunk commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1412598\n\nLUCENE-4570: Add missing license headers\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13504152"
        },
        {
            "date": "2013-01-14T13:01:59+0000",
            "content": "I started a google code project: http://code.google.com/p/forbidden-apis/\n\nThis is a fork with many new additions:\n\n\tauto-generated deprecated signature list (from rt.jar)\n\tsupport for \"bundled\" and project-maintained signature lists (like the deprecated ones for various JDK versions, the well known charset/locale/... violators)\n\tno direct ASM 4.1 dependency conflicting with other dependencies: The ASM library is jarjar'ed into the artifact\n\tnot yet: Comments for every signature thats printed in error message\n\tnot yet: M\u00e4ven support (Mojo) -> Selckin already started a fork in Github, but as the new project is almost a complete rewrite of the API (decouple ANT task from logic), I will need his help\n\tnot yet: M\u00e4ven Release, so IVY can download it\n\n\n\nOnce there is a release (hopefully soon), this can ivy:cachepath'ed and taskdef'ed into the Lucene build ",
            "author": "Uwe Schindler",
            "id": "comment-13552635"
        },
        {
            "date": "2013-01-14T13:14:03+0000",
            "content": "Nice! ",
            "author": "Dawid Weiss",
            "id": "comment-13552644"
        },
        {
            "date": "2013-01-14T23:41:20+0000",
            "content": "I already committed the comments in signatures to the googlecode repo, so the error message now contains explanation of the forbidden api (e.g. deprecated, uses default charset,...).\n\nRemaining issue is M\u00e4ven support, which is not important for Lucene. ",
            "author": "Uwe Schindler",
            "id": "comment-13553275"
        },
        {
            "date": "2013-01-18T13:13:50+0000",
            "content": "The forbidden-api checker is now available on sonatype-snapshots with the maven-coordinates:\n\ngroupId=de.thetaphi\nartifactId=forbiddenapis\nversion=1.0-SNAPSHOT\n\n\n\nAttached is a patch for Lucene trunk, removing the forbidden api checker from checkout and use the snapshot version. To enable the download of snapshots, I added for now (until it is released) the sonatype-snapshots repo to ivy-settings.xml.\n\nThere is some cleanup needed in the patch:\n\n\tIt somehow relies on tools compiled, otherwise some properties are not defined, to locate the txt files. This can be solved by placing the not-bundled lucene-specific signature files outside tools (where its no longer need to be). Just place solr ones in solr and lucene ones in lucene.\n\tI have to review the API files and also move e.g. commons-io.txt to the checker JAR file, so we have more bundled signatures and dont need to maintain them inside lucene. This of course does not apply to specific solr/lucene ones to prevent specific test patterns.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13557199"
        },
        {
            "date": "2013-01-18T13:51:52+0000",
            "content": "By the way: The new checker finds use of a deprecated API, that was missing from the hand-made jdk-deprecated.txt: File.toURL(). Its used at three places in analyzers - which is a bummer, because it will prevent using those analyzers on configs where the lucene files are in a directory with e.g. umlauts or other special symbols (see deprecated message).\n\nHere the message:\n\n-check-forbidden-jdk-apis:\n[forbidden-apis] Reading bundled API signatures: jdk-unsafe-1.6\n[forbidden-apis] Reading bundled API signatures: jdk-deprecated-1.6\n[forbidden-apis] Reading API signatures: C:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-lusolr3\\lucene\\tools\\forbiddenApis\\executors.txt\n[forbidden-apis] Loading classes to check...\n[forbidden-apis] Scanning for API signatures and dependencies...\n[forbidden-apis] Forbidden method invocation: java.io.File#toURL() [Deprecated in Java 1.6]\n[forbidden-apis]   in org.apache.lucene.analysis.compound.hyphenation.PatternParser (PatternParser.java:101)\n[forbidden-apis] Forbidden method invocation: java.io.File#toURL() [Deprecated in Java 1.6]\n[forbidden-apis]   in org.apache.lucene.analysis.compound.HyphenationCompoundWordTokenFilter (HyphenationCompoundWordTokenFilter.java:151)\n[forbidden-apis] Forbidden method invocation: java.io.File#toURL() [Deprecated in Java 1.6]\n[forbidden-apis]   in org.apache.lucene.analysis.compound.hyphenation.HyphenationTree (HyphenationTree.java:114)\n[forbidden-apis] Scanned 5468 (and 432 related) class file(s) for forbidden API invocations (in 2.29s), 3 error(s).\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13557210"
        },
        {
            "date": "2013-01-18T14:11:17+0000",
            "content": "I fixed the violations for now... ",
            "author": "Uwe Schindler",
            "id": "comment-13557227"
        },
        {
            "date": "2013-01-18T14:12:16+0000",
            "content": "[trunk commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1435146\n\nLUCENE-4570: Fix deprecated API usage (otherwise may lead to bugs if Hyphenation filters load files from directories with non-ascii path names) ",
            "author": "Commit Tag Bot",
            "id": "comment-13557232"
        },
        {
            "date": "2013-01-18T14:16:10+0000",
            "content": "[branch_4x commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1435148\n\nMerged revision(s) 1435146 from lucene/dev/trunk:\nLUCENE-4570: Fix deprecated API usage (otherwise may lead to bugs if Hyphenation filters load files from directories with non-ascii path names) ",
            "author": "Commit Tag Bot",
            "id": "comment-13557234"
        },
        {
            "date": "2013-01-27T18:53:40+0000",
            "content": "Here a new patch for Lucene+Solr, that makes use of all new features and bundled signatures shipped with the forked forbidden-api checker:\n\n\tit now forbids to call sun.* and com.sun.* APIs from rt.jar\n\tnew signatures files: jdk-system-out, commons-io-unsafe (now keyed by the version number). The commons-io version number is now in common-build.xml and used by forbidden-apis and ivy.xml (to be always consistent).\n\n\n\nI am shortly before releasing the forbidden API checker. Once this is done, Steven Rowe can hopefully help to add the plugin to the Maven build.\n\nTo test this, you have to delete de.thetaphi from your ~/ivy2/cache folder, so IVY dowinloads the new snapshot version. ",
            "author": "Uwe Schindler",
            "id": "comment-13563878"
        },
        {
            "date": "2013-01-28T10:47:08+0000",
            "content": "Updated patch: use complete classpath, so the checks are more correct (as every class used can be resolved)\n\nIn general, the classpath is very hacky. Theoretically, the forbidden api checks should be done per module and after the javac runs (with uptodate). Then every module could use the standard classpath to run the checks. The next version of forbidden apis will throw errors by default if a symbol is undefined while parsing. ",
            "author": "Uwe Schindler",
            "id": "comment-13564191"
        },
        {
            "date": "2013-01-28T13:03:43+0000",
            "content": "Fix classpath. Lucene works, Solr still has problems, the thorough checks were disabled. It is currently impossible to generate a top-level classpath that contains all classes and referenced jars.\n\nThe only fix for this is to make the forbidden-checks per module! ",
            "author": "Uwe Schindler",
            "id": "comment-13564257"
        },
        {
            "date": "2013-02-04T22:45:59+0000",
            "content": "de.thetaphi:fobiddenapis:1.0 was released to sonatype release repository.\n\nAttached is the patch to make use of this version 1.0 in Lucene. The patch still has some TODOs for a later stage, when we should really make the forbidden-checks per module. As a workaround, Solr checks are currently not so thourough, because the full classpath is not available on top-level. We can now also add the check to the Maven build.\n\nI will update the documentation on the project web page tomorrow, while waiting for the release to be pushed to maven central.\n\nThe attached patch already works, as Lucene's IVY config has Sonatype available as default repository. ",
            "author": "Uwe Schindler",
            "id": "comment-13570711"
        },
        {
            "date": "2013-02-04T22:47:07+0000",
            "content": "For those who want to try out/download: http://oss.sonatype.org/content/repositories/releases/de/thetaphi/forbiddenapis/1.0/ ",
            "author": "Uwe Schindler",
            "id": "comment-13570713"
        },
        {
            "date": "2013-02-05T07:11:31+0000",
            "content": "Seems to be released on Maven Central, too: http://repo1.maven.org/maven2/de/thetaphi/forbiddenapis/1.0/\n\nI will commit the patch later and open a new issue to make the checks per-module. ",
            "author": "Uwe Schindler",
            "id": "comment-13571102"
        },
        {
            "date": "2013-02-05T09:18:11+0000",
            "content": "[trunk commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1442508\n\nLUCENE-4570: typo ",
            "author": "Commit Tag Bot",
            "id": "comment-13571171"
        },
        {
            "date": "2013-02-05T09:18:12+0000",
            "content": "[trunk commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1442507\n\nLUCENE-4570: Use the Policeman Formbidden API checker, released separately from Lucene and downloaded via Ivy ",
            "author": "Commit Tag Bot",
            "id": "comment-13571172"
        },
        {
            "date": "2013-02-05T09:26:46+0000",
            "content": "I committed the attached patch to trunk and 4.x. I am now working on completing the documentation on the Google Code page: http://code.google.com/p/forbidden-apis/\n\nThanks to the \"default locale/charset/timezone ghostbuster\"!  ",
            "author": "Uwe Schindler",
            "id": "comment-13571180"
        },
        {
            "date": "2013-02-05T09:28:55+0000",
            "content": "[branch_4x commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1442509\n\nMerged revision(s) 1442507-1442508 from lucene/dev/trunk:\nLUCENE-4570: Use the Policeman Forbidden API checker, released separately from Lucene and downloaded via Ivy\nLUCENE-4570: typo\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13571182"
        },
        {
            "date": "2013-02-12T05:20:04+0000",
            "content": "Patch adding forbidden-api calls to the Maven build.\n\nCurrently fails when running against test classes because the MavenMojo hard-codes using the compile-scope classpath: https://code.google.com/p/forbidden-apis/source/browse/trunk/src/main/java/de/thetaphi/forbiddenapis/MavenMojo.java#139 - here's the error I get:\n\n\n[ERROR] Failed to execute goal de.thetaphi:forbiddenapis:1.1:forbiddenapis (check-forbidden-jdk-apis) on project lucene-core-tests: Check for forbidden API calls failed: java.lang.ClassNotFoundException: Loading of class org.apache.lucene.util.LuceneTestCase failed: Not found -> [Help 1]\n\n\n\nUwe, can you look into adding a way for MavenMojo to change which classpath to use?  Maybe look at the name of the phase to which an execution is bound, and if it contains the word \"test\" (e.g. \"process-test-classes\", use the test-scope classpath instead of the compile-scope classpath? ",
            "author": "Steve Rowe",
            "id": "comment-13576393"
        },
        {
            "date": "2013-02-12T07:53:35+0000",
            "content": "Hi Steve,\n\nit is a known problem that the Mojo currently cannot handle test classes (I think thats documented, unless I missed to add it!). So it is currently not supported to change the default phase. I will work on this in a later version - the way to go in this case is to have 2 separate Mojos (this is how other plugins does it) or like you mentioned, perhaps add a check on the current phase. The problem with the latter is: The mojo defines its dependency resolution mode (see annotation), and this cannot be changed at runtime.\n\nFor now, I would only check the main classes (which works without any other configuration settings) and leave the tests away. ",
            "author": "Uwe Schindler",
            "id": "comment-13576444"
        },
        {
            "date": "2013-02-12T08:25:55+0000",
            "content": "I opened: https://code.google.com/p/forbidden-apis/issues/detail?id=4 ",
            "author": "Uwe Schindler",
            "id": "comment-13576460"
        },
        {
            "date": "2013-02-13T01:11:05+0000",
            "content": "Patch that enables maven usage of forbidden-apis, against 1.2-SNAPSHOT.  Works for me.\n\nThis is not committable as-is: there is a snapshot plugin repository declaration (for oss.sonatype.org) and dependency on a -SNAPSHOT version.  ",
            "author": "Steve Rowe",
            "id": "comment-13577248"
        },
        {
            "date": "2013-02-13T01:19:39+0000",
            "content": "Thanks! Looks good, I only dont like the repeated code in every module. Maybe we can improve that later.\n\nI am working on fixing more bugs at the moment (\u00c4pple Java 6 on OSX was not detected as valid JDK because the directory layout of this JDK was not laid out according to the \"Oracle Java standard\", after fixing this I had problems with IBM J9 v7.0. Detecting booclasspath is not easy and most code available on the web is incorrect!\n\nOnce I am ready to release I will update the dependency in Lucene and you can commit that patch with the released version. ",
            "author": "Uwe Schindler",
            "id": "comment-13577252"
        },
        {
            "date": "2013-02-13T01:33:29+0000",
            "content": "Looks good, I only dont like the repeated code in every module. Maybe we can improve that later.\n\nYeah, I don't like it either, but Maven doesn't have a directly supported way to find the base directory in a multi-module build; this is required to locate the rule files.  \n\nI looked around the web for solutions today, and I found two possible alternatives to the technique I use (i.e.: have each module define its own ${top-level} property pointing to the project base directory in relative terms):\n\n\n\tpackage resources into a jar on which each sub-module depends; the plugin can then extract resources from the jar\n\tuse an embedded groovy script to set recursively find the project base directory, then set a property containing the absolutized directory.\n\n\n\nI think I've tried #2 in the past, but I'll try again. ",
            "author": "Steve Rowe",
            "id": "comment-13577261"
        },
        {
            "date": "2013-02-13T07:07:02+0000",
            "content": "Patch reducing forbiddenapi plugin configuration to a minimum.\n\nI had to leave the previous approach (hard-coded per-module relative path to project basedir) in place to specify (re)source directories, but for the rest, including locating forbiddenapi resources, I was able to write a one-line Groovy script to set a property containing the absolute project basedir.  This patch also removes redundant maven-surefire-plugin configuration in Solr.\n\nI tested on OS X with Maven 3.0.3 and 2.2.1, and on Win7+Cygwin with Maven 2.2.1.  All work. ",
            "author": "Steve Rowe",
            "id": "comment-13577381"
        },
        {
            "date": "2013-02-13T07:28:23+0000",
            "content": "Uwe \u2013 the location of standard libraries is indeed a problem under various distros. J9 in particular has things scattered all over different JAR archives. My trick of the past was to enumerate several library classes (from different packages) and locate their bytecode based on their own class loader's getResourceAsURL call pointing to those classes' bytecode. This still won't work for certain classes that are native in J9, for example.\n\nI needed it for proguard but it's essentially the same problem \u2013 where the heck the library classes are.\n\npublic class DetectRtJar {\n  public static void main(String[] args) throws Exception {\n    Set<File> jars = new TreeSet<File>();\n\n    Class<?> [] keyClasses = {\n        java.lang.annotation.Annotation.class,\n        java.lang.management.ManagementFactory.class,\n        java.util.logging.Logger.class,\n        java.awt.Component.class,\n        java.beans.BeanDescriptor.class,\n        java.io.File.class,\n        java.lang.Object.class,\n        java.math.BigDecimal.class,\n        java.net.URL.class,\n        java.nio.Buffer.class,\n        java.security.Security.class,\n        java.sql.Array.class,\n        java.text.Collator.class,\n        java.util.List.class,\n        java.util.concurrent.ConcurrentHashMap.class,\n        java.util.zip.ZipEntry.class,\n        org.w3c.dom.Document.class,\n    };\n\n    ClassLoader cl = ClassLoader.getSystemClassLoader();\n    for (Class<?> clazz : keyClasses) {\n      URL url = cl.getResource(\n          clazz.getName().replace('.', '/') + \".class\");\n      if (url.getProtocol().equals(\"jar\")) {\n        JarURLConnection juc = (JarURLConnection) url.openConnection();\n        jars.add(new File(juc.getJarFile().getName()));\n      } else {\n        // Other scheme? wtf?\n        throw new RuntimeException(\"Unknown scheme: \" + url.toString());\n      }\n    }\n\n    StringBuilder b = new StringBuilder();\n    for (File f : jars) {\n      b.append(\"-libraryjar \").append(f.getAbsolutePath());\n      b.append(\"(java/**)\");\n      b.append(\"\\n\");\n    }\n  }\n} \n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13577392"
        },
        {
            "date": "2013-02-13T08:29:30+0000",
            "content": "Thanks Dawid! I had the same problem with J9 like you explained (e.g. java.lang.Object is in some crazy extension dir). I solved the problem in the exact same way like you did (checking the URLConnection instance type and use more exotic class names). The final solution I comitted was easier: RuntimeMXBean.getBootClassPath() and is supported on all recent JDKs (although its documented that it may be unsupported, they have a boolean getter to detect this). I build a Set from the classpath components (JAR files and directories). When loading the classes later, i lookup the JarFile's of the class that was loaded by the checker to find out if it is a RuntimeClass or not: https://code.google.com/p/forbidden-apis/source/browse/trunk/src/main/java/de/thetaphi/forbiddenapis/Checker.java#88 ",
            "author": "Uwe Schindler",
            "id": "comment-13577410"
        },
        {
            "date": "2013-02-13T08:36:46+0000",
            "content": "I like the bootClassPath trick, didn't know about it. ",
            "author": "Dawid Weiss",
            "id": "comment-13577412"
        },
        {
            "date": "2013-02-16T22:35:29+0000",
            "content": "Steven: I released version 1.2 including the fix to correctly support test classes in Maven. It has also fixes the \"unsupported JDK\" issue with JDK 6 on M\u00e4cintrash.\nIt is already available on Sonatype Releases (https://oss.sonatype.org/content/repositories/releases/de/thetaphi/forbiddenapis/1.2/), on Maven Central hopefully after a few hours. The changelog is here: http://code.google.com/p/forbidden-apis/wiki/Changes ",
            "author": "Uwe Schindler",
            "id": "comment-13580063"
        },
        {
            "date": "2013-02-17T00:09:42+0000",
            "content": "1.2 is on Maven Central now: http://repo1.maven.org/maven2/de/thetaphi/forbiddenapis/1.2/\n\nI'll test running the build with my patch after I remove -SNAPSHOT from forbiddenapi version and remove the sonatype repository. ",
            "author": "Steve Rowe",
            "id": "comment-13580075"
        },
        {
            "date": "2013-02-17T01:26:57+0000",
            "content": "Patch for running ForbiddenAPI checker in the Maven build - updating to 1.2 release, and removing the Sonatype Maven repository.\n\nCommitting shortly. ",
            "author": "Steve Rowe",
            "id": "comment-13580084"
        },
        {
            "date": "2013-02-17T02:14:42+0000",
            "content": "I wondered how much time running ForbiddenAPI checker, executed multiple times in each of ~40 modules, adds to the Maven build, so I ran mvn -DskipTests install, and then mvn process-test-classes, both pre- and post-patch.  This excludes performing compilation, since I didn't mvn clean inbetween.\n\nOn my Macbook pro, with Oracle Java 1.7.0_13 and Maven 3.0.3, the best (fastest) of five runs of mvn process-test-classes for pre-patch: 20s.  Best of five for post-patch: 22s.  So it looks like this adds 2 seconds to build time, assuming a populated OS filesystem cache.\n\nIf I use sudo purge to clear the OS filesystem cache before every run, pre-patch best of five runs still took 20s, but post-patch best of five took 26s.  So with an empty OS filesystem cache, this adds 6 seconds to the build time. \n\nI think this slowdown is live-with-able.\n\nCommitting now. ",
            "author": "Steve Rowe",
            "id": "comment-13580099"
        },
        {
            "date": "2013-02-17T02:22:22+0000",
            "content": "[trunk commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1446991\n\nLUCENE-4570: Added ForbiddenAPI checks to the Maven build using the ForbiddenAPI Mojo; also removed redundant maven-surefire-plugin configurations in Solr modules' POMs after putting a shared configuration in the Solr parent POM. ",
            "author": "Commit Tag Bot",
            "id": "comment-13580102"
        },
        {
            "date": "2013-02-17T02:44:16+0000",
            "content": "[branch_4x commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1446992\n\nLUCENE-4570: Added ForbiddenAPI checks to the Maven build using the ForbiddenAPI Mojo; also removed redundant maven-surefire-plugin configurations in Solr modules' POMs after putting a shared configuration in the Solr parent POM. (merged trunk r1446991) ",
            "author": "Commit Tag Bot",
            "id": "comment-13580107"
        },
        {
            "date": "2013-02-17T10:43:11+0000",
            "content": "I think this slowdown is live-with-able.\n\n By the way, there is already an issue open to make the tests in Lucene also per-module (LUCENE-4753). The current setup is far from manageable, especially Solr's global classptah that is still broken (resulting in relaxed checks).\n\nI ran a Maven build on Jenkins and inspected the log files, looks good. One thing to mention: In the (current) Lucene build, we run the forbidden checks in a first step for core and test classes at once (because we have no clear separation on the top-level, this will change wth LUCENE-4753). After that we run some additional checks afterwards. Because of of this global-then-specific behaviour, I am not sure if all checks in Maven are identical. I think the executors.txt should be run for both maven main and test classes. Currently the executors check is only run for main classes, not tests. Ant build runs it on both. Maybe add the executors next to tests.txt, too. ",
            "author": "Uwe Schindler",
            "id": "comment-13580163"
        },
        {
            "date": "2013-02-18T05:11:26+0000",
            "content": "I think the executors.txt should be run for both maven main and test classes. Currently the executors check is only run for main classes, not tests. Ant build runs it on both. Maybe add the executors next to tests.txt, too.\n\nOk, I'll do that.  I was trying to make the Maven setup the same as the Ant setup, and missed this difference. ",
            "author": "Steve Rowe",
            "id": "comment-13580420"
        },
        {
            "date": "2013-02-21T02:42:41+0000",
            "content": "[branch_4x commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1447139\n\nLUCENE-4570: Maven ForbiddenAPIs configuration cleanups:\n\n\tClean up overly long execution IDs\n\tMake at least one text execution per module include internalRuntimeForbidden=true\n\tMake at least one text execution per module include signatureFile executors.txt\n\tInclude bundledSignature commons-io-unsafe in solr test-framework forbiddenapis check\n\tNote in the Solr shared test-check configuration to include bundledSignature commons-io-unsafe only in modules with commons-io on their classpath\n(merged trunk r1447138)\n\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13582834"
        },
        {
            "date": "2013-02-21T02:42:54+0000",
            "content": "[trunk commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1447138\n\nLUCENE-4570: Maven ForbiddenAPIs configuration cleanups:\n\n\tClean up overly long execution IDs\n\tMake at least one text execution per module include internalRuntimeForbidden=true\n\tMake at least one text execution per module include signatureFile executors.txt\n\tInclude bundledSignature commons-io-unsafe in solr test-framework forbiddenapis check\n\tNote in the Solr shared test-check configuration to include bundledSignature commons-io-unsafe only in modules with commons-io on their classpath\n\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13582850"
        },
        {
            "date": "2013-03-22T16:14:08+0000",
            "content": "[branch_4x commit] Uwe Schindler\nhttp://svn.apache.org/viewvc?view=revision&revision=1412599\n\nMerged revision(s) 1412598 from lucene/dev/trunk:\nLUCENE-4570: Add missing license headers ",
            "author": "Commit Tag Bot",
            "id": "comment-13610509"
        },
        {
            "date": "2013-05-10T10:33:04+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653815"
        }
    ]
}