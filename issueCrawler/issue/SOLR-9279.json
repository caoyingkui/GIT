{
    "id": "SOLR-9279",
    "title": "Add greater than, less than, etc in Solr function queries",
    "details": {
        "components": [
            "search"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.2"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "If you use the \"if\" function query, you'll often expect to be able to use greater than/less than functions. For example, you might want to boost books written in the past 7 years. Unfortunately, there's no \"greater than\" function query that will return non-zero when the lhs > rhs. Instead to get this, you need to create really awkward function queries like I do here (http://opensourceconnections.com/blog/2014/11/26/stepwise-date-boosting-in-solr/):\n\nif(min(0,sub(ms(mydatefield),sub(ms(NOW),315569259747))),0.8,1)\n\nThe pull request attached to this Jira adds the following function queries\n(https://github.com/apache/lucene-solr/pull/49)\n\n-gt(lhs, rhs) (returns 1 if lhs > rhs, 0 otherwise)\n-lt(lhs, rhs) (returns 1 if lhs < rhs, 0 otherwise)\n-gte\n-lte\n-eq\n\nSo instead of \n\nif(min(0,sub(ms(mydatefield),sub(ms(NOW),315569259747))),0.8,1)\n\none could now write\n\nif(lt(ms(mydatefield),315569259747,0.8,1)\n\n(if mydatefield < 315569259747 then 0.8 else 1)\n\nA bit more readable and less puzzling",
    "attachments": {
        "SOLR-9279.patch": "https://issues.apache.org/jira/secure/attachment/12820490/SOLR-9279.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-07-06T01:00:33+0000",
            "author": "Doug Turnbull",
            "content": "Associated Pull request https://github.com/apache/lucene-solr/pull/49 ",
            "id": "comment-15363563"
        },
        {
            "date": "2016-07-06T03:37:36+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69671503\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/CompareNumericFunction.java \u2014\n    @@ -0,0 +1,131 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class CompareNumericFunction extends ValueSource {\n    +\n    +  public final ValueSource lhs;\n    \u2014 End diff \u2013\n\n    eek; public? ",
            "id": "comment-15363698"
        },
        {
            "date": "2016-07-06T03:43:10+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69671763\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/CompareNumericFunction.java \u2014\n    @@ -0,0 +1,131 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class CompareNumericFunction extends ValueSource {\n    +\n    +  public final ValueSource lhs;\n    +  public final ValueSource rhs;\n    +\n    +  public CompareNumericFunction(ValueSource lhs, ValueSource rhs) \n{\n    +    this.lhs = lhs;\n    +    this.rhs = rhs;\n    +  }\n    +\n    +  // Perform the comparison, returning true or false\n    +  public abstract boolean compareNumeric(double lhs, double rhs);\n    \u2014 End diff \u2013\n\n    Instead of making this an abstract class, what do you think of making it concrete and take the label and a simple interface named something like LongBinaryPredicate  (a specialization of JDK java.util.BiPredicate), then creating some singleton instances?  I would reduce all these subclasses.  A smaller change that reduces the top-level classes you create here is to make the subclasses in fact inner classes or even anonymous inner classes to initialize some singleton instances of them.  I think I like that a little better in that there is no need to create a new interface (even if it is an inner one).  I welcome your input. ",
            "id": "comment-15363702"
        },
        {
            "date": "2016-07-06T03:43:45+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69671790\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/CompareNumericFunction.java \u2014\n    @@ -0,0 +1,131 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class CompareNumericFunction extends ValueSource {\n    \u2014 End diff \u2013\n\n    Extend Lucene \"BoolFunction\" instead? ",
            "id": "comment-15363703"
        },
        {
            "date": "2016-07-06T03:45:31+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69671875\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/CompareNumericFunction.java \u2014\n    @@ -0,0 +1,131 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class CompareNumericFunction extends ValueSource {\n    +\n    +  public final ValueSource lhs;\n    +  public final ValueSource rhs;\n    +\n    +  public CompareNumericFunction(ValueSource lhs, ValueSource rhs) \n{\n    +    this.lhs = lhs;\n    +    this.rhs = rhs;\n    +  }\n    +\n    +  // Perform the comparison, returning true or false\n    +  public abstract boolean compareNumeric(double lhs, double rhs);\n    +\n    +  // Uniquely identify the operation (ie \"gt\", \"lt\" \"gte, etc)\n    +  public abstract String getLabel();\n    +\n    +  // string comparison? Probably should be a seperate function\n    +  // public abstract boolean compareString(String lhs, String rhs);\n    +\n    +  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    +    final FunctionValues lhsVal = this.lhs.getValues(context, readerContext);\n    +    final FunctionValues rhsVal = this.rhs.getValues(context, readerContext);\n    +    final String compLabel = this.getLabel();\n    +\n    +    return new FunctionValues() {\n    \u2014 End diff \u2013\n\n    Extend Lucene BoolDocValues instead. ",
            "id": "comment-15363704"
        },
        {
            "date": "2016-07-06T03:51:01+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69672138\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/CompareNumericFunction.java \u2014\n    @@ -0,0 +1,131 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class CompareNumericFunction extends ValueSource {\n    \u2014 End diff \u2013\n\n    Maybe rename ComparisonPredicateValueSource?  Using \"predicate\" seems appropriate; Numeric seems redundant with anything ValueSource.  Not sure on Function suffix; there's sadly a mix in Lucene but I think it's better to prefer the subclass's name. ",
            "id": "comment-15363708"
        },
        {
            "date": "2016-07-06T12:48:24+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69723224\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/CompareNumericFunction.java \u2014\n    @@ -0,0 +1,131 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class CompareNumericFunction extends ValueSource {\n    +\n    +  public final ValueSource lhs;\n    \u2014 End diff \u2013\n\n    whoops, thanks ",
            "id": "comment-15364257"
        },
        {
            "date": "2016-07-06T12:57:34+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69724481\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/CompareNumericFunction.java \u2014\n    @@ -0,0 +1,131 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class CompareNumericFunction extends ValueSource {\n    \u2014 End diff \u2013\n\n    I thought about BoolFunction, but it seemed unused. I certainly could with no change, it would only have documentation value.\n\n    Would removing \"value\" imply this also works on strings? I'm not thoroughly versed here but when I was looking at IfFunction, I intentionally omitted non-numeric comparions (ie string comparisons). Hence the name.  ",
            "id": "comment-15364268"
        },
        {
            "date": "2016-07-06T12:58:03+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69724555\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/CompareNumericFunction.java \u2014\n    @@ -0,0 +1,131 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class CompareNumericFunction extends ValueSource {\n    \u2014 End diff \u2013\n\n    oh wait I'm wrong on BoolFunction, it is used. I'll at least switch to that. ",
            "id": "comment-15364269"
        },
        {
            "date": "2016-07-06T13:10:42+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69726431\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/CompareNumericFunction.java \u2014\n    @@ -0,0 +1,131 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class CompareNumericFunction extends ValueSource {\n    +\n    +  public final ValueSource lhs;\n    +  public final ValueSource rhs;\n    +\n    +  public CompareNumericFunction(ValueSource lhs, ValueSource rhs) \n{\n    +    this.lhs = lhs;\n    +    this.rhs = rhs;\n    +  }\n    +\n    +  // Perform the comparison, returning true or false\n    +  public abstract boolean compareNumeric(double lhs, double rhs);\n    \u2014 End diff \u2013\n\n    I think I like this idea in general, it would get rid of a lot of cruft. I can pass a lot in as constructor args instead of creating lots of noisy classes.\n\n    I'm not sure I want to use LongBinaryPredicate (do you mean [LongPredicate](https://docs.oracle.com/javase/8/docs/api/java/util/function/LongPredicate.html)?. Taking a glance it seems like the value in using it would be in the support for and/or/not operators in a Java-consistent way. It would be nice, though a bit out of scope for this PR, to extend this idea to the other boolean operations so that valuesource's were compatible with this API. \n\n    Let me push up a change that makes more anonymous instances and let me know what you think (I'll model in on how and, or, xor, etc are done) ",
            "id": "comment-15364281"
        },
        {
            "date": "2016-07-06T16:32:35+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69765065\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/CompareNumericFunction.java \u2014\n    @@ -0,0 +1,131 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class CompareNumericFunction extends ValueSource {\n    +\n    +  public final ValueSource lhs;\n    +  public final ValueSource rhs;\n    +\n    +  public CompareNumericFunction(ValueSource lhs, ValueSource rhs) \n{\n    +    this.lhs = lhs;\n    +    this.rhs = rhs;\n    +  }\n    +\n    +  // Perform the comparison, returning true or false\n    +  public abstract boolean compareNumeric(double lhs, double rhs);\n    \u2014 End diff \u2013\n\n    > I'm not sure I want to use LongBinaryPredicate (do you mean LongPredicate?.\n\n    I am referring to no JDK interfaces other than saying it's similar to BiPredicate, but specialized to the primitive type.  And I definitely didn't mean to suggest anything involving a refactor to Lucene's existing APIs. ",
            "id": "comment-15364570"
        },
        {
            "date": "2016-07-07T14:25:03+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    (note the last few commits based on your comments)\n\n    On unifying somewhat with MultiBoolValues, or creating a BiBoolValues, I went down that path a bit David and it seems to complicate things. A couple of notes:\n\n\n\tThe bool values functions takes as input other boolfunctions, whereas the comparison value source takes in scalar values.  You can see this in how or, and, xor work: they loop over several boolean value sources and perform and, or, xor etc. We just need to pluck out two scalar values and compare them\n\tThe name `func` seems descriptive of this general behavior, whereas `compare` is more descriptive of the operation being perfomed by the comparison value source\n\n\n\n    I think the comparison functions are more readable now as they are, but I'd be curious to get your thoughts. ",
            "id": "comment-15366187"
        },
        {
            "date": "2016-07-07T16:00:25+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69934693\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ComparisonValueSource.java \u2014\n    @@ -0,0 +1,104 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.queries.function.docvalues.BoolDocValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class ComparisonValueSource extends BoolFunction {\n    +\n    +  private final ValueSource lhs;\n    +  private final ValueSource rhs;\n    +  private final String name;\n    +\n    +  public ComparisonValueSource(ValueSource lhs, ValueSource rhs, String name) \n{\n    +    this.lhs = lhs;\n    +    this.rhs = rhs;\n    +    this.name = name;\n    +  }\n    +\n    +  // Perform the comparison, returning true or false\n    +  public abstract boolean compare(double lhs, double rhs);\n    +\n    +  // Uniquely identify the operation (ie \"gt\", \"lt\" \"gte\", etc)\n    +  public String name() \n{\n    +    return this.name;\n    +  }\n    +\n    +  // string comparison? Probably should be a seperate function\n    +  // public abstract boolean compareString(String lhs, String rhs);\n    +\n    +  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    +    final FunctionValues lhsVal = this.lhs.getValues(context, readerContext);\n    +    final FunctionValues rhsVal = this.rhs.getValues(context, readerContext);\n    +    final String compLabel = this.name();\n    +\n    +    return new BoolDocValues(this) {\n    +      @Override\n    +      public boolean boolVal(int doc) \n{\n    +        return compare(lhsVal.floatVal(doc), rhsVal.floatVal(doc));\n    +      }\n    +\n    +      @Override\n    +      public String toString(int doc) \n{\n    +        return compLabel + \"(\" + lhsVal.toString(doc) + \",\" + rhsVal.toString(doc) + \")\";\n    +      }\n    +    };\n    +  }\n    +\n    +  @Override\n    +  public boolean equals(Object o) {\n    +    if (this.getClass() != o.getClass()) return false;\n    +    if (!(o instanceof ComparisonValueSource)) return false;\n    \u2014 End diff \u2013\n\n    This line is not needed; the classes must be equal in the previous line. ",
            "id": "comment-15366314"
        },
        {
            "date": "2016-07-07T16:02:00+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69934986\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ComparisonValueSource.java \u2014\n    @@ -0,0 +1,104 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.queries.function.docvalues.BoolDocValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class ComparisonValueSource extends BoolFunction {\n    +\n    +  private final ValueSource lhs;\n    +  private final ValueSource rhs;\n    +  private final String name;\n    +\n    +  public ComparisonValueSource(ValueSource lhs, ValueSource rhs, String name) \n{\n    +    this.lhs = lhs;\n    +    this.rhs = rhs;\n    +    this.name = name;\n    +  }\n    +\n    +  // Perform the comparison, returning true or false\n    \u2014 End diff \u2013\n\n    Use javadoc method comments, not // ",
            "id": "comment-15366316"
        },
        {
            "date": "2016-07-07T16:03:32+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/49#discussion_r69935281\n\n    \u2014 Diff: lucene/queries/src/java/org/apache/lucene/queries/function/valuesource/ComparisonValueSource.java \u2014\n    @@ -0,0 +1,104 @@\n    +package org.apache.lucene.queries.function.valuesource;\n    +\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +\n    +import java.io.IOException;\n    +import java.util.Map;\n    +\n    +import org.apache.lucene.index.LeafReaderContext;\n    +import org.apache.lucene.queries.function.ValueSource;\n    +import org.apache.lucene.queries.function.FunctionValues;\n    +import org.apache.lucene.queries.function.docvalues.BoolDocValues;\n    +import org.apache.lucene.search.IndexSearcher;\n    +\n    +\n    +/**\n    + * Base class for comparison operators used within if statements\n    + * To Solr's if function query a 0 is considered \"false\", all other values are \"true\"\n    + */\n    +public abstract class ComparisonValueSource extends BoolFunction {\n    +\n    +  private final ValueSource lhs;\n    +  private final ValueSource rhs;\n    +  private final String name;\n    +\n    +  public ComparisonValueSource(ValueSource lhs, ValueSource rhs, String name) \n{\n    +    this.lhs = lhs;\n    +    this.rhs = rhs;\n    +    this.name = name;\n    +  }\n    +\n    +  // Perform the comparison, returning true or false\n    +  public abstract boolean compare(double lhs, double rhs);\n    +\n    +  // Uniquely identify the operation (ie \"gt\", \"lt\" \"gte\", etc)\n    +  public String name() \n{\n    +    return this.name;\n    +  }\n    +\n    +  // string comparison? Probably should be a seperate function\n    +  // public abstract boolean compareString(String lhs, String rhs);\n    +\n    +  public FunctionValues getValues(Map context, LeafReaderContext readerContext) throws IOException {\n    +    final FunctionValues lhsVal = this.lhs.getValues(context, readerContext);\n    +    final FunctionValues rhsVal = this.rhs.getValues(context, readerContext);\n    +    final String compLabel = this.name();\n    +\n    +    return new BoolDocValues(this) {\n    +      @Override\n    +      public boolean boolVal(int doc) {\n    +        return compare(lhsVal.floatVal(doc), rhsVal.floatVal(doc));\n    \u2014 End diff \u2013\n\n    Can you instead pass lhsVal & rhsVal to let the compare() function choose if it wants to call floatVal, doubleVal, or longVal or whatever? ",
            "id": "comment-15366318"
        },
        {
            "date": "2016-07-07T16:06:04+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    I think after addressing the comments I just added, it's probably good to go.  I still don't love the name, especially since it extends BoolFunction it ought to now end with Function. ",
            "id": "comment-15366326"
        },
        {
            "date": "2016-07-07T16:57:19+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    Renaming is a good idea. I can push that up. ComparisonFunction?\n\n    On Thu, Jul 7, 2016 at 12:13 PM David Smiley <notifications@github.com>\n    wrote:\n\n    > I think after addressing the comments I just added, it's probably good to\n    > go. I still don't love the name, especially since it extends BoolFunction\n    > it ought to now end with Function.\n    >\n    > \u2014\n    > You are receiving this because you authored the thread.\n    > Reply to this email directly, view it on GitHub\n    > <https://github.com/apache/lucene-solr/pull/49#issuecomment-231126560>,\n    > or mute the thread\n    > <https://github.com/notifications/unsubscribe/AAmZRMlf6o2flc_NCh8LYXm1Ha2_S7_Iks5qTSPtgaJpZM4JFqfq>\n    > .\n    >\n ",
            "id": "comment-15366396"
        },
        {
            "date": "2016-07-07T16:59:58+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    Renamed to ComparisonBoolFunction ",
            "id": "comment-15366400"
        },
        {
            "date": "2016-07-08T13:11:54+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    Dumb question, what's the next steps? Do I need to do anything else here or at the JIRA ticket? ",
            "id": "comment-15367649"
        },
        {
            "date": "2016-07-08T18:37:10+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    Just one thing \u2013 have compare() take the FunctionValue so that a compare impl can choose to call doubleVal vs longVal or whatever else.  And the impls you add to Solr can call doubleVal.  Someone truly might want to extend this to call something other than doubleVal; the set of values of doubleVal is disjoint from longVal.  Or maybe someone has got the data in objectVal for some reason.\n\n    After that please post a .patch file to JIRA.  https://wiki.apache.org/lucene-java/HowToContribute#Creating_a_patch   though those instructions should be modified to indicate how to generate a diff from the point the current branch diverged from master. ",
            "id": "comment-15368155"
        },
        {
            "date": "2016-07-08T23:11:24+0000",
            "author": "Hoss Man",
            "content": "I didn't look at the pull request in depth, but in general i applaud the idea and the general approach from skimming the issue description and CompareNumericFunction.java\n\n3 things that did jump out at me when skimming the patch as a whole: \n\n\ti see edits to ValueSourceParser.java but no edits to QueryEqualityTest.java ... that gives me 99% confidence that this patch breaks QueryEqualityTest\n\tI see tests of using these new functions when wrapped in if(...) but no (obvious to me) tests of these new functions being used directly for their return value \u2013 ex: fl=id,gte(price,0) \u2013 and demonstrating what the expected result should be\n\t\n\t\tin this example, i would expect the result type to be a Boolean (ie: <bool name=\"gte(price,0)\">true</bool>\n\t\tSince i don't see FunctionValues.objectVal overridden anywhere in the patch, i'm assuming this doesn't work as I expect\n\t\n\t\n\tI don't see FunctionValues.exists overridden anywhere in this patch, which IIRC means these functions are always going to \"exists=true\", which does not seem like a good hardcoded behavior for a ValueSource thta wraps other ValueSources.\n\t\n\t\tsome thought/javadocs should be given to how exactly these functions should behave if/when one or more of the ValueSources they wrap do not exist for a given document \u2013 and some tests demonstrating the expected behavior in these situations seem crucial.\n\t\tsee LUCENE-5961, and the core premise expressed in the first comment on that issue, which seems just as relevant to me for this issue.\n\t\tI would suggest implementing exists using MultiFunction.allExists(...), that way callers can decide for themselves how it should behave, by wrapping the inner ValueSources in DefFunction, and/or by wrapping their CompareNumericFunction in a DefFunction as they see fit.\n\t\n\t\n\n ",
            "id": "comment-15368659"
        },
        {
            "date": "2016-07-25T16:56:09+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    Actually yes, I would see that as a bug right now. I bet comparing two\n    longs one off would fail a > or < comparison due to loss of precision as a\n    double. I'm going to try to create a test that recreates that.\n\n    On Fri, Jul 8, 2016 at 2:37 PM David Smiley <notifications@github.com>\n    wrote:\n\n    > Just one thing \u2013 have compare() take the FunctionValue so that a compare\n    > impl can choose to call doubleVal vs longVal or whatever else. And the\n    > impls you add to Solr can call doubleVal. Someone truly might want to\n    > extend this to call something other than doubleVal; the set of values of\n    > doubleVal is disjoint from longVal. Or maybe someone has got the data in\n    > objectVal for some reason.\n    >\n    > After that please post a .patch file to JIRA.\n    > https://wiki.apache.org/lucene-java/HowToContribute#Creating_a_patch\n    > though those instructions should be modified to indicate how to generate a\n    > diff from the point the current branch diverged from master.\n    >\n    > \u2014\n    > You are receiving this because you commented.\n    >\n    >\n    > Reply to this email directly, view it on GitHub\n    > <https://github.com/apache/lucene-solr/pull/49#issuecomment-231439077>,\n    > or mute the thread\n    > <https://github.com/notifications/unsubscribe/AAmZRIJmnJcZ3hLpIOLcti_z7ZyVWCxnks5qTpjYgaJpZM4JFqfq>\n    > .\n    >\n ",
            "id": "comment-15392283"
        },
        {
            "date": "2016-07-25T19:09:18+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    Ok this needs another look at @dsmiley as I've addressed a bug where Long comparisons failed \n\n\n\tAdds test that demonstrates bug comparing Longs\n\tChanged compare to take two Comparables instead of doubles\n\tPerform an integer comparison when it appears the two input values are effectively integers\n\tOtherwise does a floating point comparison\n\n\n\n    Unfortunately, I think tihs interface can't take arbitrary value sources. I feel like I need to enforce the safest comparison (integer vs floating pt) to avoid bugs. ",
            "id": "comment-15392520"
        },
        {
            "date": "2016-07-26T14:00:19+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user tflobbe commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/53\n\n    This PR doesn't seem to be linked to any Jira. Is there one? If you include the Jira issue id in the title of the PR it will automatically show in Jira (e.g. https://issues.apache.org/jira/browse/SOLR-9279 ). You can create a new Jira issue if there isn't one for this fix ",
            "id": "comment-15393826"
        },
        {
            "date": "2016-07-26T14:00:54+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    Sorry but I think it's terrible to invoke both doubleVal & longVal potentially twice per doc on the same FunctionValues.  I think what I suggested in earlier feedback is much closer \u2013 let the subclass choose which longVal/doubleVal/whatever to call and to make whatever comparison needed.  On the Solr end... we could always work with the doubles, even though some 'long' values are out of range.  I believe some other FunctionValue impls are implemented similarly as well , despite not representing say Long.MAX_VALUE. ",
            "id": "comment-15393828"
        },
        {
            "date": "2016-07-26T14:16:23+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    I just think we have to tread carefully. Comparing two 64 bit timestamps could result in surprising bugs where an event seconds after another isn't greater than the earlier event due to a loss of precision casting to double. So I'd rather enforce the safest possible and most correct comparison and make the interface not that general.\n\n    Is your concern performance based? Can we reduce the number of times we call doubleVal/longVal. Sorry I was not aware of the performance implications.\n\n    We could also make the values themselves implement Comparable and let them be compared to other function values. But this seems complex and we'd still need to enforce the correct comparison.  ",
            "id": "comment-15393856"
        },
        {
            "date": "2016-07-26T14:29:34+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    I think at the Lucene level we should make this widely useful by simply exposing a boolean compare(FunctionValues lhs, FunctionValues rhs).  If we go the way of your latest commit, it would be less useful as some potential users would skip over it to avoid the performance overhead of calling double & longVal, or because they have more interesting requirements and want to call some other method on functionValues.  So lets not tie their hands.\n\n    Yes my concern is definitely performance based.  These things are super-sensitive to it as it operates once per matching document, which could be a ton.\n\n    What you could perhaps do at the Solr layer is check if both the lhs & rhs extend from LongDocValues and if so then use the Long version... otherwise use the Double version which I think can represent Integer completely.  But it'd be very nice not to do that double instanceof check at every comparison... so perhaps that would lead to actually implementing getValues(). ",
            "id": "comment-15393869"
        },
        {
            "date": "2016-07-26T14:53:40+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    I can do that, but in the Solr version I will end up overriding compare, then providing further abstract methods to do numerical comparisons. Otherwise I'm going to just end up with lots of boiler plate repeated in the ValueSourceParser ",
            "id": "comment-15393900"
        },
        {
            "date": "2016-07-26T16:00:29+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    I believe I've done what you requested. There's a lot of value sources that inherit directly from FunctionValues, so without cataloging which ones are best treated as longs and which are best treated as floats, its going to be impossible to always do the safest comparison. The best we can do is test for Long or Int values ",
            "id": "comment-15394002"
        },
        {
            "date": "2016-07-26T16:46:10+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    Ok; this is fine.  It could be optimized later   Did you see Hoss's comments on implementing exists() ? ",
            "id": "comment-15394066"
        },
        {
            "date": "2016-07-26T20:50:20+0000",
            "author": "Doug Turnbull",
            "content": "Hoss Man Thanks for your help! Great points. \u2013 I think I addressed your comments other than the Object value one. Is there documentation on an object value source? I'm not sure what's expected here. ",
            "id": "comment-15394521"
        },
        {
            "date": "2016-07-26T21:10:27+0000",
            "author": "Hoss Man",
            "content": "I haven't been following the updates since my last comment, but to answer your question...\n\nIs there documentation on an object value source? I'm not sure what's expected here.\n\n...well, per the javadocs it's \"Native Java Object representation of the value\" for the doc \u2013 ie: whatever type makes the most sense for the given value source (as opposed to byteVal, intVal, floatVal, etc... where the caller says what type they want)\n\nFor the DocValue based FunctionValues, it's the type of the field (IntFieldSource.getValues returns an IntDocValues which implements objectVal by delegating to intVal if exists is true, etc.\n\nFor ValueSources that \"wrap\" other value sources, things get more complicated \u2013 in the IfFunction, the FunctionValues delegates to one wrapped FunctionValues or the other, depending on the conditional.\n\npractically speaking: the main place objectValue comes into play is when end users ask for the value of a ValueSource in the fl list, ie: fl=id,value:div(popularity,price),inStock:gte(quantityonHand,1)\n\nsince these new functions represent boolean concepts (even if they are wrapping numeric inputs), i would expect them to implement objectValue the same way BoolDocValues does...\n\n  @Override\n  public Object objectVal(int doc) {\n    return exists(doc) ? boolVal(doc) : null;\n  }\n\n\n\n...ideally you'd just extend BoolDocValues since all of it's methods should also apply to your usecase. (maybe you were doing that in your previous patch and i just missed it \u2013 i dunno? ... from my comment it looks like i mainly just noticed you weren't testing for this usage to return Boolean objects)\n ",
            "id": "comment-15394545"
        },
        {
            "date": "2016-07-27T15:51:30+0000",
            "author": "David Smiley",
            "content": "Your last patch was pretty good Doug.  I spent some time last night and this morning cleaning it up a tad (fixed ant precommit issues) and then I went a bit further.  I don't really like \"SafeNumericComparisonValueSource\" in Lucene so I moved it to Solr naming it SolrComparisonValueSource.  I also changed it to not do primitive to object conversion, and in so doing changed the api a bit to make the implementations do their job via a lambda.\n\nWhat do you think? ",
            "id": "comment-15395873"
        },
        {
            "date": "2016-07-27T18:32:36+0000",
            "author": "Doug Turnbull",
            "content": "Looks great David Smiley! Definitely a big improvement. Appreciate your attention, I've learned a lot through this issue.\n\nWhat do you think about adding an objectValue override as suggested by Hoss Man?\n\n\n @Override\n  public Object objectVal(int doc) {\n    return exists(doc) ? boolVal(doc) : null;\n  }\n\n ",
            "id": "comment-15396118"
        },
        {
            "date": "2016-07-27T19:25:44+0000",
            "author": "David Smiley",
            "content": "Sure \u2013 trivial enough.  Unless there are further suggestions on this issue, I'll commit it with that change later this week.  I'll update Lucene & Solr's CHANGES.txt since both get something here. ",
            "id": "comment-15396205"
        },
        {
            "date": "2016-07-28T14:48:49+0000",
            "author": "Doug Turnbull",
            "content": "+1 ",
            "id": "comment-15397636"
        },
        {
            "date": "2016-07-29T02:46:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d12b93e2729036b0c04621114429c25739499243 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d12b93e ]\n\nSOLR-9279: new function queries: gt, gte, lt, lte, eq\nLucene Queries module: new ComparisonBoolFunction base class ",
            "id": "comment-15398624"
        },
        {
            "date": "2016-07-29T02:53:29+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c434eff828702f32251c3a225623b65ae869ea82 in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c434eff ]\n\nSOLR-9279: new function queries: gt, gte, lt, lte, eq\nLucene Queries module: new ComparisonBoolFunction base class\n(cherry picked from commit d12b93e) ",
            "id": "comment-15398628"
        },
        {
            "date": "2016-07-29T03:58:37+0000",
            "author": "David Smiley",
            "content": "BTW I didn't need to override objectVal as specified as the superclass implements it that way.\n\nThanks for the contribution Doug! ",
            "id": "comment-15398669"
        },
        {
            "date": "2016-07-29T14:06:16+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/49\n\n    I forgot to use the magic works in the commit to close this.  Please close it Doug. ",
            "id": "comment-15399377"
        },
        {
            "date": "2016-07-29T14:27:57+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user softwaredoug closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/49 ",
            "id": "comment-15399406"
        },
        {
            "date": "2016-08-02T01:07:29+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d12b93e2729036b0c04621114429c25739499243 in lucene-solr's branch refs/heads/apiv2 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d12b93e ]\n\nSOLR-9279: new function queries: gt, gte, lt, lte, eq\nLucene Queries module: new ComparisonBoolFunction base class ",
            "id": "comment-15403153"
        },
        {
            "date": "2016-08-25T13:26:55+0000",
            "author": "David Smiley",
            "content": "Documented in ref guide: https://cwiki.apache.org/confluence/display/solr/Function+Queries  (after refactoring out the boolean functions into a separate table) ",
            "id": "comment-15436849"
        },
        {
            "date": "2016-08-26T14:00:11+0000",
            "author": "Michael McCandless",
            "content": "Bulk close resolved issues after 6.2.0 release. ",
            "id": "comment-15439026"
        }
    ]
}