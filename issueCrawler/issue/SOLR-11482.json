{
    "id": "SOLR-11482",
    "title": "CVE-2017-12629: Remove RunExecutableListener from Solr",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [
            "security",
            "Server"
        ],
        "type": "Task",
        "fix_versions": [
            "5.5.5",
            "6.6.2",
            "7.1",
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This class should no longer be needed, as replication can be done through Solr Cloud or via ReplicationHandler. The current listener is a security risk, as it can be configured through the Config API. See the report:\n\nSolr \"RunExecutableListener\" class can be used to execute arbitrary commands on specific events, for example after each update query. The problem is that such listener can be enabled with any parameters just by using Config API with add-listener command.\n\n\nPOST /solr/newcollection/config HTTP/1.1\nHost: localhost:8983\nConnection: close\nContent-Type: application/json  \nContent-Length: 198\n\n{\n  \"add-listener\" : {\n    \"event\":\"postCommit\",\n    \"name\":\"newlistener\",\n    \"class\":\"solr.RunExecutableListener\",\n    \"exe\":\"ANYCOMMAND\",\n    \"dir\":\"/usr/bin/\",\n    \"args\":[\"ANYARGS\"]\n  }\n}\n\n\n\nParameters \"exe\", \"args\" and \"dir\" can be crafted throught the HTTP request during modification of the collection's config. This means that anybody who can send a HTTP request to Solr API is able to execute arbitrary shell commands when \"postCommit\" event is fired. It leads to execution of arbitrary remote code for a remote attacker.",
    "attachments": {
        "SOLR-11482-6.6.patch": "https://issues.apache.org/jira/secure/attachment/12892109/SOLR-11482-6.6.patch",
        "SOLR-11482-branch_5_5-restore-logged-warning.patch": "https://issues.apache.org/jira/secure/attachment/12892778/SOLR-11482-branch_5_5-restore-logged-warning.patch",
        "SOLR-11482.patch": "https://issues.apache.org/jira/secure/attachment/12891840/SOLR-11482.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-12T22:46:33+0000",
            "content": "This patch removes the listener and all references from config files. It also updates the ref guide.\n\nInterestingly there is not even a test for the listener!!! ",
            "author": "Uwe Schindler",
            "id": "comment-16202747"
        },
        {
            "date": "2017-10-12T22:55:25+0000",
            "content": "sorry wrong patch previously. ",
            "author": "Uwe Schindler",
            "id": "comment-16202758"
        },
        {
            "date": "2017-10-12T23:04:08+0000",
            "content": "+1. Thanks Uwe ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16202768"
        },
        {
            "date": "2017-10-12T23:07:49+0000",
            "content": "For backporting to 7.0 and 6.6.x we should maybe add a system property which is disabled by default. So you cannot use the listener in previous Solr versions unless you set a special system property on startup. What do you think? ",
            "author": "Uwe Schindler",
            "id": "comment-16202774"
        },
        {
            "date": "2017-10-12T23:40:42+0000",
            "content": "Yes, I think that's a good idea. ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16202811"
        },
        {
            "date": "2017-10-13T11:35:50+0000",
            "content": "I will commit this now (at least to master). Unfortunately I don't get the whole test suite passing, but thats the case with and without this patch. In master a lot of stuff seems to be broken in tests (see also Jenkins). ",
            "author": "Uwe Schindler",
            "id": "comment-16203413"
        },
        {
            "date": "2017-10-13T11:56:27+0000",
            "content": "OK, I committed it to master, 7.x, 7.1. The bot does not seem to be allowed to comment here. ",
            "author": "Uwe Schindler",
            "id": "comment-16203436"
        },
        {
            "date": "2017-10-13T11:58:51+0000",
            "content": "I keep this issue open to decide, how we handle previous version. I think the:\n\n\tdo not remove\n\tdisable by default\n\tonly enable on explicit sysprop request\n\n\n\nallows users to install the bugfix release and if they really need it, they can reenable the listener. Otherwise the listener just throws a SolrException when executes, so you know that its disabled and you have to remove it from your configs. Should I provide a patch against 6.x / 7.0? ",
            "author": "Uwe Schindler",
            "id": "comment-16203441"
        },
        {
            "date": "2017-10-13T12:22:30+0000",
            "content": "Uwe, can I go ahead with building another RC for 7.1? ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16203478"
        },
        {
            "date": "2017-10-13T12:24:21+0000",
            "content": "I think so. Christine also pushed.\n\nMaybe let's wait for Jenkins to finish. Because of the horrible amount of failures in master I gave up on running tests. ",
            "author": "Uwe Schindler",
            "id": "comment-16203481"
        },
        {
            "date": "2017-10-13T12:40:40+0000",
            "content": "Ah Shalin Shekhar Mangar: We should really get SOLR-10335 (which superceeded SOLR-10895) in.\n\nThat's similar to the DNSMASQ case. This one allows people by sending some MATLAB files to do horrible stuff. Similar to the issue with DOCX files 2 years ago (I took care of that). I don not want to commit. This, I am just too tired to look into it! ",
            "author": "Uwe Schindler",
            "id": "comment-16203503"
        },
        {
            "date": "2017-10-13T12:44:53+0000",
            "content": "Ok, let me take care of SOLR-10335. Looks like the PR is fully baked. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16203509"
        },
        {
            "date": "2017-10-13T13:25:40+0000",
            "content": "commit links (since the bot did not add them):\n\n\tmaster: https://git1-us-west.apache.org/repos/asf?p=lucene-solr.git;a=commit;h=7b313bb5\n\tbranch_7x: https://git1-us-west.apache.org/repos/asf?p=lucene-solr.git;a=commit;h=b98fec16\n\tbranch_7_1: https://git1-us-west.apache.org/repos/asf?p=lucene-solr.git;a=commit;h=1979b7ef\n\n ",
            "author": "Christine Poerschke",
            "id": "comment-16203562"
        },
        {
            "date": "2017-10-13T17:06:48+0000",
            "content": "Here is the proposed patch for 6.6.\n\nIt disables the listener by default. You can still have it in your config, but it will print a warning on startup. If gets executed, a SolrException is thrown. If you are really sure that you want to enable it, you have to pass -Dsolr.enableRunExecutableListener=true. ",
            "author": "Uwe Schindler",
            "id": "comment-16203863"
        },
        {
            "date": "2017-10-13T17:42:56+0000",
            "content": "I tested this:\n\nWhen starting solr by default and having a postCommit listener from (old) example config it shows:\n\n\nWARN  - 2017-10-13 17:28:50.986; [   x:techproducts] org.apache.solr.core.SolrResourceLoader; Solr loaded a deprecated plugin/analysis class [solr.RunExecutableListener]. Please consult documentation how to replace it accordingly.\n[...]\nWARN  - 2017-10-13 17:28:51.229; [   x:techproducts] org.apache.solr.core.RunExecutableListener; RunExecutableListener is deprecated and disabled by default for security reasons. Legacy applications still using it must explicitely pass '-Dsolr.enableRunExecutableListener=true' to the Solr command line. Be aware that you should really disable API-based config editing at the same time, using '-Ddisable.configEdit=true'!\n\n\n\nIf you then try to commit without passing the -Dsolr.enableRunExecutableListener=true:\n\n\nINFO  - 2017-10-13 17:30:42.494; [   x:techproducts] org.apache.solr.update.DirectUpdateHandler2; start commit{,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=false,prepareCommit=false}\nINFO  - 2017-10-13 17:30:42.495; [   x:techproducts] org.apache.solr.update.DirectUpdateHandler2; No uncommitted changes. Skipping IW.commit.\nINFO  - 2017-10-13 17:30:42.495; [   x:techproducts] org.apache.solr.update.processor.LogUpdateProcessorFactory$LogUpdateProcessor; [techproducts]  webapp=/solr path=/update params={commit=true}{} 0 10\nERROR - 2017-10-13 17:30:42.497; [   x:techproducts] org.apache.solr.common.SolrException; org.apache.solr.common.SolrException: RunExecutableListener is deprecated and disabled by default for security reasons. Legacy applications still using it must explicitely pass '-Dsolr.enableRunExecutableListener=true' to the Solr command line. Be aware that you should really disable API-based config editing at the same time, using '-Ddisable.configEdit=true'!\n\tat org.apache.solr.core.RunExecutableListener.exec(RunExecutableListener.java:105)\n\tat org.apache.solr.core.RunExecutableListener.postCommit(RunExecutableListener.java:156)\n\tat org.apache.solr.update.UpdateHandler.callPostCommitCallbacks(UpdateHandler.java:93)\n\tat org.apache.solr.update.DirectUpdateHandler2.commit(DirectUpdateHandler2.java:651)\n\tat org.apache.solr.update.processor.RunUpdateProcessor.processCommit(RunUpdateProcessorFactory.java:93)\n\tat org.apache.solr.update.processor.UpdateRequestProcessor.processCommit(UpdateRequestProcessor.java:68)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.doLocalCommit(DistributedUpdateProcessor.java:1894)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.processCommit(DistributedUpdateProcessor.java:1871)\n\tat org.apache.solr.update.processor.LogUpdateProcessorFactory$LogUpdateProcessor.processCommit(LogUpdateProcessorFactory.java:160)\n\tat org.apache.solr.handler.RequestHandlerUtils.handleCommit(RequestHandlerUtils.java:68)\n\tat org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:62)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:173)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2477)\n\tat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:723)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:529)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:361)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:305)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1691)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:582)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n\tat org.eclipse.jetty.rewrite.handler.RewriteHandler.handle(RewriteHandler.java:335)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:534)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)\n\tat org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:273)\n\tat org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:95)\n\tat org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)\n\tat org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)\n\tat java.lang.Thread.run(Thread.java:748)\n\n\n\nWhen passing the flag, it succeeds (of course the fake script was not found here, but it was at least started! ",
            "author": "Uwe Schindler",
            "id": "comment-16203915"
        },
        {
            "date": "2017-10-13T17:45:42+0000",
            "content": "The previous patch had a javadocs issue. Fixed. ",
            "author": "Uwe Schindler",
            "id": "comment-16203920"
        },
        {
            "date": "2017-10-13T17:49:04+0000",
            "content": "I'd also forward-port this to 7.0.x (if needed), please reopen in that case. ",
            "author": "Uwe Schindler",
            "id": "comment-16203926"
        },
        {
            "date": "2017-10-13T21:31:55+0000",
            "content": "Committed in branch_6_6: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/c91e7f02 ",
            "author": "Uwe Schindler",
            "id": "comment-16204223"
        },
        {
            "date": "2017-10-17T11:03:20+0000",
            "content": "Bulk close after 7.1.0 release ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16207298"
        },
        {
            "date": "2017-10-17T21:41:17+0000",
            "content": "Reopening to backport to branch_5_5. ",
            "author": "Steve Rowe",
            "id": "comment-16208454"
        },
        {
            "date": "2017-10-17T22:34:21+0000",
            "content": "branch_5_5 commit:  http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/897823ce\n\nMinor changes:\n\n\n\tI removed the new RunExecutableListener.inform() method (verifying that the configset is trusted), because the concept of trusted configsets was never introduced on branch_5_5.\n\tI removed the commented-out RunExecutableListener config chunks from solrconfig.xml files that are no longer present in newer branches.\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16208519"
        },
        {
            "date": "2017-10-18T08:08:43+0000",
            "content": "Hi Steve Rowe,\nI reopen, because you removed the inform() method completely. But the original patch added a warning message inside the inform, so the user known when booting up Solr that he is using the listener. With your current commit, the user gets only an error message, but cannot see on bootup that the listener won't work.\n\nMy patch looked like this:\n\n\n@@ -75,17 +91,22 @@ class RunExecutableListener extends AbstractSolrEventListener implements SolrCor\n           + \" and this operation is not available for collections with untrusted configsets. To have this component, re-upload the configset\"\n           + \" after enabling authentication and authorization.\");\n     }\n+    log.warn(WARNING_MESSAGE);\n   }\n \n   /**\n    * External executable listener.\n    * \n    * @param callback Unused (As of solr 1.4-dev)\n-   * @return Error code indicating if the command has executed successfully. <br />\n-   *  0 , indicates normal termination.<br />\n+   * @return Error code indicating if the command has executed successfully.<br>\n+   *  0 , indicates normal termination.<br>\n    *  non-zero , otherwise.\n    */\n   protected int exec(String callback) {\n+    if (!enabled) {\n+      throw new SolrException(ErrorCode.UNAUTHORIZED, WARNING_MESSAGE);\n+    }\n+    \n     int ret = 0;\n \n     try {\n\n\n\nSe the log.warn at the end of the inform() method. \n\nMaybe we should add the inform method back and just print the warning. Or alternatively move the warning to the constructor. ",
            "author": "Uwe Schindler",
            "id": "comment-16208954"
        },
        {
            "date": "2017-10-18T12:31:36+0000",
            "content": "I reopen, because you removed the inform() method completely. But the original patch added a warning message inside the inform, so the user known when booting up Solr that he is using the listener.\n\nThanks for the review Uwe Schindler!\n\nHere's a patch restoring the logged warning.  I'll commit once precommit passes. ",
            "author": "Steve Rowe",
            "id": "comment-16209250"
        },
        {
            "date": "2017-10-18T12:36:52+0000",
            "content": "Thanks, +1 ",
            "author": "Uwe Schindler",
            "id": "comment-16209256"
        },
        {
            "date": "2017-10-18T12:40:44+0000",
            "content": "Commit f49b67ed6d5aa8f6d9d940d1e660a956f2f1b717 in lucene-solr's branch refs/heads/branch_5_5 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f49b67e ]\n\nSOLR-11482: branch_5_5: add back the logged warning in inform() ",
            "author": "ASF subversion and git services",
            "id": "comment-16209258"
        },
        {
            "date": "2017-10-18T14:12:29+0000",
            "content": "It's interesting... I didn't expect this issue to have its own CVE.\nAlthough I agree with it's removal (it hasn't been needed since we stopped using rsync for replication long ago), RunExecutableListener isn't really an exploit - it just makes things potentially worse when other exploits allow you to somehow edit the config.\n\nFor example: A user of Solr 5.4 (before Solr's xmlparser was hooked up to Lucene's xml parser) would not vulnerable just because they lack this patch.  That's important for users to understand.\n\nEDIT: my mistake, this did not get it's own CVE, it is the same as SOLR-11477 ",
            "author": "Yonik Seeley",
            "id": "comment-16209388"
        },
        {
            "date": "2017-10-18T15:02:27+0000",
            "content": "Yonik Seeley, yes that indeed true. This issue has the same CVE, as the combination of issues makes the whole thing exploitable.\n\nThe other problem that makes this a problem is the existence of \"stream.body\" parameter, which was another brick to exploit the issue. \"stream.body\" is now also disabled in latest versions:\n\n\tuser may use XXE to trigger a GET request another endproint of the solr server. But they was also possible with other secruity issues we have seen before. So XXE was just another way to send a GET request.\n\tA GET request should not be able to do do any changes in config, unfortunately there is also \"stream.body\"! This allows to convert a GET request to something that may change config. It may also delete indexes or insert new documents!\n\tFinally the last step was the RunExecuteableListener, which allows to actually do the bad stuff (like opening a shell): It is disabled by default / deleted (7.1+) now, so any of the above (or other hacks we have seen before cannot be used to launch processes).\n\n\n\nAbout stream.body: I am not sure about 6.6 and 5.x and if we should handle that there! But as this was not explicitely mentioned as a \"bad thing\" in the security report, so it's not so urgent, but it is still one step towards an exploit: SOLR-10748 ",
            "author": "Uwe Schindler",
            "id": "comment-16209486"
        },
        {
            "date": "2017-10-24T16:54:10+0000",
            "content": "Bulk close for 5.5.5 release. ",
            "author": "Steve Rowe",
            "id": "comment-16217246"
        }
    ]
}