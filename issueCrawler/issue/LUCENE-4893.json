{
    "id": "LUCENE-4893",
    "title": "Facet counts in FacetsAccumulator.facetArrays are multiplied as many times as FacetsCollector.getFacetResults is called.",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [
            "4.3",
            "6.0"
        ],
        "affect_versions": "4.2",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In lucene 4.1, only StandardFacetsAccumulator could be instantiated.\nAnd as of lucene 4.2, it became possible to instantiate FacetsAccumulator.\n\nI invoked FacetsCollector.getFacetResults twice, and I saw doubled facet counts.\nIf I invoke it three times, I see facet counts multiplied three times.\nIt all happens in FacetsAccumulator.accumulate.\n\nStandardFacetsAccumulator doesn't have this bug since it frees facetArrays whenever StandardFacetsAccumulator.accumulate is called.\n\nIs it a feature or a bug?",
    "attachments": {
        "LUCENE-4893.patch": "https://issues.apache.org/jira/secure/attachment/12576273/LUCENE-4893.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-30T14:34:15+0000",
            "content": "I don't think it's a bug. FacetsCollector is stateless in the sense that it doesn't *remember* if it computed the results already or not. Why do you call it multiple times? Usually the usage is to compute FacetResult once, then use it wherever you need it. We could make FacetsCollector behave e.g. like TopDocsCollector, where after you call topDocs() once, it drains its PQ and the subsequent calls fail (or returns an empty TopDocs). In either case, the Collector doesn't remember the returned result. Therefore I suggest that you modify your code to call it only once. ",
            "author": "Shai Erera",
            "id": "comment-13618087"
        },
        {
            "date": "2013-03-30T14:46:13+0000",
            "content": "I think we should throw an exception if you call it again?  It's trappy that it silently returns double-counts I think. ",
            "author": "Michael McCandless",
            "id": "comment-13618088"
        },
        {
            "date": "2013-03-30T20:27:11+0000",
            "content": "I assumed FacetsCollector.getFacetResults was a simple getter method, so I didn't optimize my code to call it once.\n\nAfter discovering LUCENE-4893, I modified my code to call it once.\n\nIt may be a good idea to throw an exception or return an empty list if one calls it again.\nThere will be only so many lucene beginners with no knowledge of its side effects. ",
            "author": "crocket",
            "id": "comment-13618147"
        },
        {
            "date": "2013-03-31T04:23:40+0000",
            "content": "I didn't want to make FacetsCollector remember the FacetResult it returned, but I agree it should be consistent with other collectors. I'll check what TopDocsCollector does - exception or empty result, and fix FC accordingly. ",
            "author": "Shai Erera",
            "id": "comment-13618234"
        },
        {
            "date": "2013-03-31T06:13:20+0000",
            "content": "Patch addresses the following:\n\n\n\tFacetsCollector.getFacetResults() clears the matchingDocs list after accumulator.compute returned.\n\n\n\n\n\tFacetsAccumulator creates an empty FacetResult for each FacetRequest if matchingDocs.isEmpty(). I had to do it because FacetArrays still contained the original counts, and so calling .getFacetResults twice yielded the same results as before. But this is inconsistent with how StandardFacetsAccumulator works, so I preferre\\ed to return an empty FacetResult in both cases.\n\n\n\n\n\tAdded a test case to TestFacetsCollector.\n\n\n\nI think it's ready. ",
            "author": "Shai Erera",
            "id": "comment-13618259"
        },
        {
            "date": "2013-03-31T06:31:50+0000",
            "content": "I chose not to throw an exception because TopDocsCollector returns an empty TopDocs if called twice. Also, it's harder to distinguish a truly empty result (b/c e.g. no results were found) to being called twice. ",
            "author": "Shai Erera",
            "id": "comment-13618261"
        },
        {
            "date": "2013-03-31T11:13:27+0000",
            "content": "LUCENE-4893.patch has some typos in comments. ",
            "author": "crocket",
            "id": "comment-13618308"
        },
        {
            "date": "2013-03-31T12:27:41+0000",
            "content": "Thanks crocket. I found a typo in the test's comment, so if you meant another one, please specify which file has the typo. I also improved FacetsCollector.getFacetResults documentation. ",
            "author": "Shai Erera",
            "id": "comment-13618315"
        },
        {
            "date": "2013-03-31T12:57:15+0000",
            "content": "I chose not to throw an exception because TopDocsCollector returns an empty TopDocs if called twice.\n\nActually I think this is bad for TopDocsCollector to do: it's trappy.  I think users don't hit this because typically it's IndexSearcher.search that calls this method and returns the TopDocs.\n\nI'd rather fix both of these classes to throw an exception if you call their \"getter\" methods more than once, than silently pretending the 2nd time there were no results? ",
            "author": "Michael McCandless",
            "id": "comment-13618319"
        },
        {
            "date": "2013-03-31T13:24:42+0000",
            "content": "That would mean FacetsCollector will need to track whether getFacetResults was called or not, and distinguish that from \"no results were found\". I guess it can be done by having matchingDocs set to null by getFacetResults(), and initialized in setNextReader, so getFacetResults can check if matchingDocs is null, and throw IllegalStateException indicating no search has been performed yet (since or not the last call to getFacetResults). TopDocsCollector can be fixed like that too, but I prefer in a separate issue. ",
            "author": "Shai Erera",
            "id": "comment-13618324"
        },
        {
            "date": "2013-03-31T13:51:46+0000",
            "content": "I still didn't fix jdocs, this patch throws IllegalStateException if getFacetResults is called more than once, or no search was executed. But this gets TestDrillSideways.testBasic to fail, because DrillSideways (line 168) assumes it can call getFacetResult() even if the scorer it got was null.\n\nI wonder what's the best course of action - track in FacetsCollector only the case where getFacetResult was called more than once, or simply caching the List<FacetResult> and return it in .get() if it isn't null. An exception now seems too obtrusive to me ... ",
            "author": "Shai Erera",
            "id": "comment-13618332"
        },
        {
            "date": "2013-03-31T18:20:50+0000",
            "content": "I think caching the result (so .getXXX acts like a normal getter) is good? ",
            "author": "Michael McCandless",
            "id": "comment-13618413"
        },
        {
            "date": "2013-03-31T20:07:15+0000",
            "content": "Patch makes FacetsCollector cache the facet results, so .get is now a getter. reset() clears the cached results. Added additional test for reset(). ",
            "author": "Shai Erera",
            "id": "comment-13618458"
        },
        {
            "date": "2013-03-31T21:32:42+0000",
            "content": "+1, thanks Shai! ",
            "author": "Michael McCandless",
            "id": "comment-13618474"
        },
        {
            "date": "2013-04-01T04:57:41+0000",
            "content": "Committed to trunk and 4x. I added defensive code to prevent an app tripping itself, if it called getFacetResults before doing search, without calling reset. setNextReader now clears the cached results.\n\nThanks crocket for reporting this! ",
            "author": "Shai Erera",
            "id": "comment-13618609"
        },
        {
            "date": "2013-05-10T10:33:35+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653968"
        }
    ]
}