{
    "id": "LUCENE-686",
    "title": "Resources not always reclaimed in scorers after each search",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "Resources are not always reclaimed in scorers after each search.\n\nFor example, close() is not always called for term docs in TermScorer.\n\nA test will be attached to show when resources are not reclaimed.",
    "attachments": {
        "ScorerResourceGC.patch": "https://issues.apache.org/jira/secure/attachment/12343051/ScorerResourceGC.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-10-17T08:02:30+0000",
            "content": "A patch is attached:\n\n\tThe patch is based on the lastest version from trunk.\n\tThe patch includes a test called TestScorerResourceGJ which shows resources are not reclaimed after each search without the patch.\n\tThe patch passes TestScorerResourcesGJ.\n\tThe patch passes all the unit tests.\n\n ",
            "author": "Ning Li",
            "id": "comment-12442826"
        },
        {
            "date": "2006-10-17T15:50:31+0000",
            "content": "Three things:\n\nIs there an actual memory leak problem related to this?\n\nIn ReqExclScorer the two scorers can also be closed when they are set to null.\n\nIt's probably better to use try/finally in IndexSearcher and call close in in the finally clause,\nexceptions are occasionally used to preliminary end a search, although not in the \nlucene core afaik.\n\nRegards,\nPaul Elschot\n\n\n ",
            "author": "Paul Elschot",
            "id": "comment-12442943"
        },
        {
            "date": "2006-10-17T17:14:03+0000",
            "content": "> Is there an actual memory leak problem related to this? \n\nRight now no. For example, in FS based directories, the index inputs term docs use are clones.\nClose() of cloned index inputs does not close the file descriptor. Only the origianl one does.\n\nHowever, memory leak could happen to a new subclass of directory and index input, if cloned\ninstances require reclaiming resources. In addition, memory leak could happen to a new subclass\nof scorer, if there are resources associated with the scorer which should be reclaimed when done.\n\n> In ReqExclScorer the two scorers can also be closed when they are set to null. \n\nThanks for pointing this out. I'll double check all scorers and make sure close() are properly called.\n\n> It's probably better to use try/finally in IndexSearcher and call close in in the finally clause, \n> exceptions are occasionally used to preliminary end a search, although not in the \n> lucene core afaik. \n\nWill do. Thanks again!\n\nCheers,\nNing ",
            "author": "Ning Li",
            "id": "comment-12442987"
        },
        {
            "date": "2006-10-17T17:52:34+0000",
            "content": "In SpanTermQuery in the spans package, there is also a TermPositions that might\nneed to be closed.\nThis means that closing would have to be done via Spans in the whole spans package.\n\nBut as long as there is no real a memory leak, what is the point of\nadding this close functionality? ",
            "author": "Paul Elschot",
            "id": "comment-12443014"
        },
        {
            "date": "2006-10-24T17:59:14+0000",
            "content": "Quick summary of some discussion from the mailing list...\n\n1) i replied to paul's comments in the bug indicating that while there may not be any leaks in the core code base, these changes were needed to allow people writing custom Directories or custom Scorers to avoid memory leaks.\n2) paul suggested that people writing custom code can work arround this by subclassing/customizing the Directory, and all the Scorers, and the IndexSearcher\n3) i suggested that made the barrier for new custom code rather high, and made a poor comparison that got us on a tangent.\n4) i argued that since TermDocs had a close method, Scorers needed to call it, which ment they needed a close method which was garunteed to be called.\n5) paul argued that TermDocs.close in the core right now isn't needed, and we might be better off removing it, and requiring any more complicated custom implimentations to rely on GC to clean up any resources they have (presumably using a finalize method)\n6) steven_parkes then raised the point that the fundemental issue is design integrity ... we have to agree what the point of TermDocs.close is from an API standpoint, and that callers should not have to know what the concrete implimentation of hte callee is to know wether close needs to be called.  Better documentation on the purpose of the method can lead to better discussion about wether it can be removed, or if the current behavior is a bug that needs fixed. ",
            "author": "Hoss Man",
            "id": "comment-12444438"
        },
        {
            "date": "2006-10-25T21:53:56+0000",
            "content": "An example of how current Lucene code relies on not having to close resoures, in PhraseQuery:\n    ...\n    scorer(IndexReader reader) {\n      ...\n      for (int i = 0; i < terms.size(); i++) \n{\n        TermPositions p = reader.termPositions((Term)terms.elementAt(i));\n        if (p == null)\n          return null;  < - - - - change would be required here\n        tps[i] = p;\n      }\n\nIf close() has to be respected this code would need to change to close all TermPositions that were obtained just before the one that was not found. ",
            "author": "Doron Cohen",
            "id": "comment-12444742"
        },
        {
            "date": "2006-10-26T00:02:02+0000",
            "content": "Well, this has been a nice example to drive me into some of the internals.\n\nIt seems like close() methods are around in most cases to provide determinism in operations that have externally visible side effects, e.g., commits in IndexReader.\n\nBut it doesn't seem like TermDocs has this type of behavior or is likely to in the foreseeable future? SegmentReader always keeps open handles to the appropriate files anyway.\n\nOne can certainly posit that someday a version of something will change and TermDocs.close() will do something, but wouldn't YAGNI argue for waiting until that's really the case?\n\nI still kinda feel like this half-in/half-out (called sometimes, but not always) is kinda the worst of all worlds: it can't be relied on (not always called) and all those calls that don't do anything are (probably insignificant) wasted time. But the biggest thing is the intellectual drag, where people spend time trying to understand something that at least appears inconsistent.\n\nIf this reasoning is right, what do people think about just yanking it out? ",
            "author": "Steven Parkes",
            "id": "comment-12444758"
        },
        {
            "date": "2006-10-26T02:03:39+0000",
            "content": "\nBut removing TermDocs.close() will leave IndexInput.close() in a\nsimilar half-in/half-out situation: e.g. close() will not be called\nfor freqStream and skipStream in SegmentTermDocs. Yet\nIndexInput.close() cannot be removed (e.g. FSIndexInput). ",
            "author": "Ning Li",
            "id": "comment-12444766"
        },
        {
            "date": "2006-10-26T22:28:02+0000",
            "content": "You're right, and that's actually at the heart of the issue.\n\nSeems like part of what needs to be clarified is what clone() does on an IndexInput. It doesn't simply make another copy of the IndexInput. The result is neither independent of nor equivalent to the original. At least for FSIndexInput:\n\n\n\tnot equivalent: close on a clone is different then close on the original\n\tnot independent: close on the original impacts the behavior of existing clones\n\n\n\nI don't see that that's going to change. The semantics may be a little bit squrrely (and maybe the name clone() isn't the best, if the result isn't a true clone?), but it's obviously not causing any problems.\n\nI would think the best thing to do would be just document this existing behavior so it can be relied on: clones of IndexInputs do not need to be closed and cannot be relied upon if the clone source is closed.\n\nIf/once that's the documented behavior, it's okay to get rid of all the extra close()es. New implementations of IndexInput just need to abide by that behavior, however they choose to implement it. ",
            "author": "Steven Parkes",
            "id": "comment-12445027"
        },
        {
            "date": "2006-11-07T00:29:26+0000",
            "content": "Came across these:\n\nhttp://www.gossamer-threads.com/lists/lucene/java-dev/34085#34085\nhttp://www.gossamer-threads.com/lists/lucene/java-dev/34121#34121\n\nEven if we don't change semantics, we could get some of this into the docs.\n ",
            "author": "Steven Parkes",
            "id": "comment-12447596"
        },
        {
            "date": "2007-03-06T21:47:36+0000",
            "content": "I just committed some fixes in LUCENE-823 that could apply here.  Specifically if we decide that clones should be called, then, MockRAMDirectory is setup to track that they in fact are closed (we would have to turn it on; right now it does not track clones). ",
            "author": "Michael McCandless",
            "id": "comment-12478594"
        },
        {
            "date": "2011-01-26T04:54:52+0000",
            "content": "I don't think it's a problem anymore - today our tests verify that all open files are closed by tests, and that applies to Scorers too. Anyway, the issue is inactive since 2007, so closing. ",
            "author": "Shai Erera",
            "id": "comment-12986845"
        }
    ]
}