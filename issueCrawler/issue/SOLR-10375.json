{
    "id": "SOLR-10375",
    "title": "Stored text retrieved via StoredFieldVisitor on doc in the document cache over-estimates needed byte[]",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Using SolrIndexSearcher.doc(int n, StoredFieldVisitor visitor)   (as can happen with the UnifiedHighlighter in particular)\n\nIf the document cache has the document, will call visitFromCached, will get an out of memory error because of line 752 of SolrIndexSearcher - visitor.stringField(info, f.stringValue().getBytes(StandardCharsets.UTF_8));\n\n\n at java.lang.OutOfMemoryError.<init>()V (OutOfMemoryError.java:48)\n  at java.lang.StringCoding.encode(Ljava/nio/charset/Charset;[CII)[B (StringCoding.java:350)\n  at java.lang.String.getBytes(Ljava/nio/charset/Charset;)[B (String.java:941)\n  at org.apache.solr.search.SolrIndexSearcher.visitFromCached(Lorg/apache/lucene/document/Document;Lorg/apache/lucene/index/StoredFieldVisitor;)V (SolrIndexSearcher.java:685)\n  at org.apache.solr.search.SolrIndexSearcher.doc(ILorg/apache/lucene/index/StoredFieldVisitor;)V (SolrIndexSearcher.java:652)\n\n\n\nThis is due to the current String.getBytes(Charset) implementation, which allocates the underlying byte array as a function of charArrayLength*maxBytesPerCharacter, which for UTF-8 is 3.  3 * 716MB is over Integer.MAX, and the JVM cannot allocate over this, so an out of memory exception is thrown because the allocation of this much memory for a single array is currently impossible.\n\nThe problem is not present when the document cache is disabled.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-27T19:31:13+0000",
            "content": "Would this problem be solved with SOLR-10286 by adding large=true flag? The feature just rolled out in Solr 6.5 ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-15943909"
        },
        {
            "date": "2017-03-27T21:34:51+0000",
            "content": "large=\"true\" will fix this one for large fields.\n\nFor non-\"large\" values... Solr could be improved a bit here.  See GrowableByteArrayDataOutput.writeString. ",
            "author": "David Smiley",
            "id": "comment-15944083"
        },
        {
            "date": "2017-04-04T21:31:31+0000",
            "content": "Alexandre Rafalovitch Yes this would have been solved by using large fields. \n\nDavid Smiley My question now becomes at what size/length should Solr be expected to support for stored string values? I'd imagine making that call instead does come at some cost overall. ",
            "author": "Michael Braun",
            "id": "comment-15955878"
        },
        {
            "date": "2017-04-05T20:01:57+0000",
            "content": "at what size/length should Solr be expected to support for stored string values? I'd imagine making that call instead does come at some cost overall.\n\nSo we pick a threshold just like GrowableByteArrayDataOutput.writeString does.  Before the threshold is the simplest path, albeit one that might use larger arrays than necessary.  Over the threshold we scan the text to see how big we need to make the byte[].\n\nAnother route to take is to override org.apache.lucene.document.DocumentStoredFieldVisitor#stringField to conditionally use a Field/IndexableField subclass that holds the byte[] instead of immediately converting to a String, leaving the String conversion to occur on-demand.  The ultimate char length could be pre-computed and cached as well.  This path is more work of course. ",
            "author": "David Smiley",
            "id": "comment-15957552"
        },
        {
            "date": "2017-08-10T21:29:35+0000",
            "content": "Also happens on an insert - the size * 3 overflows to be a negative value, which will pass the MAX_UTF8_SIZE_FOR_ARRAY_GROW_STRATEGY.. :\n\n\nCaused by: java.lang.ArrayIndexOutOfBoundsException: 51\n        at org.apache.solr.common.util.ByteUtils.UTF16toUTF8(ByteUtils.java:94)\n        at org.apache.solr.common.util.JavaBinCodec.writeStr(JavaBinCodec.java:805)\n        at org.apache.solr.common.util.JavaBinCodec.writePrimitive(JavaBinCodec.java:897)\n        at org.apache.solr.common.util.JavaBinCodec.writeKnownType(JavaBinCodec.java:323)\n        at org.apache.solr.common.util.JavaBinCodec.writeVal(JavaBinCodec.java:223)\n        at org.apache.solr.common.util.JavaBinCodec.writeSolrInputDocument(JavaBinCodec.java:589)\n        at org.apache.solr.common.util.JavaBinCodec.writeKnownType(JavaBinCodec.java:350)\n        at org.apache.solr.common.util.JavaBinCodec.writeVal(JavaBinCodec.java:223)\n        at org.apache.solr.common.util.JavaBinCodec.writeMapEntry(JavaBinCodec.java:729)\n        at org.apache.solr.common.util.JavaBinCodec.writeKnownType(JavaBinCodec.java:378)\n        at org.apache.solr.common.util.JavaBinCodec.writeVal(JavaBinCodec.java:223)\n        at org.apache.solr.common.util.JavaBinCodec.writeIterator(JavaBinCodec.java:670)\n        at org.apache.solr.common.util.JavaBinCodec.writeKnownType(JavaBinCodec.java:362)\n        at org.apache.solr.common.util.JavaBinCodec.writeVal(JavaBinCodec.java:223)\n        at org.apache.solr.common.util.JavaBinCodec.writeNamedList(JavaBinCodec.java:218)\n        at org.apache.solr.common.util.JavaBinCodec.writeKnownType(JavaBinCodec.java:325)\n        at org.apache.solr.common.util.JavaBinCodec.writeVal(JavaBinCodec.java:223)\n        at org.apache.solr.common.util.JavaBinCodec.marshal(JavaBinCodec.java:146)\n        at org.apache.solr.client.solrj.request.JavaBinUpdateRequestCodec.marshal(JavaBinUpdateRequestCodec.java:83)\n        at org.apache.solr.client.solrj.impl.BinaryRequestWriter.getContentStream(BinaryRequestWriter.java:67)\n        at org.apache.solr.client.solrj.request.RequestWriter$LazyContentStream.getDelegate(RequestWriter.java:94)\n        at org.apache.solr.client.solrj.request.RequestWriter$LazyContentStream.getName(RequestWriter.java:104)\n        at org.apache.solr.client.solrj.impl.HttpSolrClient.createMethod(HttpSolrClient.java:389)\n\n ",
            "author": "Michael Braun",
            "id": "comment-16122368"
        },
        {
            "date": "2017-09-04T02:46:30+0000",
            "content": "Also happens on an insert \n\nGood catch Michael Braun; file an issue for that. ",
            "author": "David Smiley",
            "id": "comment-16152057"
        }
    ]
}