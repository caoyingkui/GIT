{
    "id": "SOLR-12890",
    "title": "Vector Search in Solr (Umbrella Issue)",
    "details": {
        "type": "New Feature",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [],
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "We have recently come across a need to index documents containing vectors using solr, and have even worked on a small POC. We used an URP to calculate the LSH(we chose to use the superbit algorithm, but the code is designed in a way the algorithm picked can be easily chagned), and stored the vector in either sparse or dense forms, in a binary field.\nPerhaps an addition of an LSH URP in conjunction with a query parser that uses the same properties to calculate LSH(or maybe ktree, or some other algorithm all together) should be considered as a Solr feature?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16658118",
            "content": "We have been experimenting with this new use case to query vectors inside Solr,\nusing this POC.\nThis has worked for us since we have an algorithm that runs outside of Solr, which generates vectors for different inputs in our data pipeline,\nand sends the enriched documents to Solr for indexing.\nThe LSH hash is then calculated in index time, and the vector data is encoded to binary format in either sparse or dense form(this is configurable).\n\nThe query parser is passed a certain vector, and the LSH hash for the provided  vector is then calculated and documents which contain a similar vector are queried. The user can then choose to run on the topNDocs a full cosine similarity(Or any other, provided we add different scorers), to get more precise scores for the results.\n\nHopefully this use case could be extended, optimized, and ultimately be included in Solr. ",
            "author": "mosh",
            "date": "2018-10-21T07:28:37+0000"
        },
        {
            "id": "comment-16658236",
            "content": "Is this different from just committed SOLR-12879? Can the work be updated to build on top of that, if something is still missing? ",
            "author": "Alexandre Rafalovitch",
            "date": "2018-10-21T14:32:40+0000"
        },
        {
            "id": "comment-16658512",
            "content": "Is this different from just committed SOLR-12879?\nThe main difference is that MinHash can only be calculated for strings, while this use case is used for other hashes.\nThis POC is for indexing vectors, while SOLR-12879 is for comparing string by analysing their vector values.\nThe URP in this POC takes a vector string(either dense or sparse) e.g. 0.11,0.22,0.5,0.72,4.66 ...\nand calculates its LSH hash at index time (using superbit for now, but this can be extended in the future).\nPerhaps the query parsers could be joined or have some kind of factory check the field type to pick the right query,\nbut I do not think the URP provided in this POC can be replaced at this time.\nThe cosine similarity algorithm which is run by the custom scorer in this POC is also unique to this approach. ",
            "author": "mosh",
            "date": "2018-10-22T03:30:44+0000"
        }
    ]
}