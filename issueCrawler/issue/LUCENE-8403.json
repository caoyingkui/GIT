{
    "id": "LUCENE-8403",
    "title": "Support 'filtered' term vectors - don't require all terms to be present",
    "details": {
        "components": [],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "Improvement"
    },
    "description": "The genesis of this was a conversation and idea from David Smiley several years ago.\n\nIn order to optimize term vector storage, we may not actually need all tokens to be present in the term vectors - and if so, ideally our codec could just opt not to store them.\n\nI attempted to fork the standard codec and override the TermVectorsFormat and TermVectorsWriter to ignore storing certain Terms within a field. This worked, however, CheckIndex checks that the terms present in the standard postings are also present in the TVs, if TVs enabled. So this then doesn't work as 'valid' according to CheckIndex.\n\nCan the TermVectorsFormat be made in such a way to support configuration of tokens that should not be stored (benefits: less storage, more optimal retrieval per doc)? Is this valuable to the wider community? Is there a way we can design this to not break CheckIndex's contract while at the same time lessening storage for unneeded tokens?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16545609",
            "author": "David Smiley",
            "content": "Ah, I remember this.  Here, the TVs are only in use for the UnifiedHighlighter for MultiTermQueries, and we had some interesting analysis in which we can know categorically that some terms will never be matched by our MTQs, and so they are dead weight.  Possible 40-50% dead weight for the app in question, if I recall.  Is it a real problem that CheckIndex complains?  I suppose that might come up in tests via the lucene-test-framework randomization that occasionally calls CheckIndex? I can't seem to find those call-sites right now though.\nCC Robert Muir ",
            "date": "2018-07-16T18:48:31+0000"
        },
        {
            "id": "comment-16545612",
            "author": "Robert Muir",
            "content": "every index created by tests gets run by checkindex. No, I don't think its ok to make checkindex wimpy, for any reason... ",
            "date": "2018-07-16T18:51:02+0000"
        },
        {
            "id": "comment-16545638",
            "author": "Michael Braun",
            "content": "Yes correct David Smiley, the CheckIndexes were hit as a result. So in practice this forked codec works for us, but testing breaks.  ",
            "date": "2018-07-16T19:17:04+0000"
        },
        {
            "id": "comment-16545795",
            "author": "Hoss Man",
            "content": "Is this valuable to the wider community? Is there a way we can design this to not break CheckIndex's contract while at the same time lessening storage for unneeded tokens?\n\nHalf assed straw man suggestion from the peanut gallery: would it make sense to enhance the TermVector codec API in some way that would allow CheckIndex to ask the codec which terms (from the posting list) to expect? ",
            "date": "2018-07-16T22:07:27+0000"
        },
        {
            "id": "comment-16547104",
            "author": "Adrien Grand",
            "content": "I can't seem to find those call-sites right now though.\n\nThis happens via MockDirectoryWrapper#close. MockDirectoryWrapper is often created via LuceneTestCase#newDirectory.\n\nDoesn't the matches API remove the need for that feature? It should allow to retrieve offsets from the inverted index directly? ",
            "date": "2018-07-17T21:03:01+0000"
        },
        {
            "id": "comment-16547298",
            "author": "David Smiley",
            "content": "Doesn't the matches API remove the need for that feature? It should allow to retrieve offsets from the inverted index directly?\nI assume you refer to org.apache.lucene.search.uhighlight.UnifiedHighlighter.OffsetSource#POSTINGS_WITH_TERM_VECTORS \u00a0 No, it's\u00a0definitely not made obsolete; I don't think the new Weight.Matches is related at all. \u00a0But good question though! \u00a0Consider the case of an index that only has offsets in postings (in the inverted index), there are no term vectors, and you're asked to highlight a MultiTermQuery. \u00a0Without the benefit of term vectors for the document you want to highlight, you'd have to set an MTQ loose on the entire index to find potentially thousands of terms (maybe only one is in this document?) which could be very high overhead. \u00a0At least the worse case would be terrible. \u00a0The UH (and PostingsHighlighter before it) sees an MTQ\u00a0and switches over to Analysis.\u00a0 Perhaps it isn't necessarily always more costly than term vectors or analysis \u2013 like if the MTQ matches a small number of terms. \u00a0I suppose a smarter highlighter could check first.\u00a0 CC Alan Woodward ",
            "date": "2018-07-18T02:17:55+0000"
        }
    ]
}