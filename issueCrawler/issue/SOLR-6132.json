{
    "id": "SOLR-6132",
    "title": "UpdateRequest contains only XML ContentStream and not JavaBin",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "clients - java",
            "update"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "When creating a UpdateRequest using the following code, I noted that even though the request params include wt=javabin, the final request is being translated to XML.\nI guess that this is because that the collection of ContentStreams that is returned by UpdateRequest.getContentStreams() method contains only XML ContentStream. \n\nShould not that UpdateRequest contain JavaBin ContentStream by default or when it gets some parameter (such wt=javabin)?  \n\nThe code:\n UpdateRequest updateRequest = new UpdateRequest();\n updateRequest.add(solrDocument);\n updateRequest.setCommitWithin(-1);\n SolrRequestParsers _parser = new SolrRequestParsers(null);\n SolrQueryRequest req;\n try {\n           req = _parser.buildRequestFrom(targetCore, params,       updateRequest.getContentStreams());\n } catch (Exception e) \n{\n      throw new SolrServerException(e);\n }",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Ahmet Arslan",
            "id": "comment-14016435",
            "date": "2014-06-03T12:15:07+0000",
            "content": "Hi Liram, did you try to set \n\n server.setRequestWriter(new BinaryRequestWriter()); \n\n ? \n\nPlease see Shawn's following responses \n\n\thttp://search-lucene.com/m/QTPar0hud2\n\thttp://search-lucene.com/m/QTPa7zg4E1\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14019408",
            "date": "2014-06-05T23:34:33+0000",
            "content": "wt=javabin is a request parameter that instructs the server that you want the \"Writer Type\" used for generating the response to be in javabin.\n\nIt has nothing to do with what format your SolrJ code uses when sending the request.  Yo uare free to send your update data in one format, and request that solr send you the response in another.\n\nAs a concrete example, imagine if you were using ContentStreamUpdateRequest to stream a bunch of raw binary files to the extracting request handler \u2013 just because you set the qt param to control whether  the result status info is returned in javabin, or xml, or json doesn't mean that SolrJ can/should muck with the data being sent to solr.\n "
        }
    ]
}