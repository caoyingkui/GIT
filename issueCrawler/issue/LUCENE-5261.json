{
    "id": "LUCENE-5261",
    "title": "add simple API to build queries from analysis chain",
    "details": {
        "components": [],
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "New Feature",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Currently this is pretty crazy stuff.\n\nAdditionally its duplicated in like 3 or 4 places in our codebase (i noticed it doing LUCENE-5259)\n\nWe can solve that duplication, and make it easy to simply create queries from an analyzer (its been asked on the user list), as well as make it easier to build new queryparsers.",
    "attachments": {
        "LUCENE-5261.patch": "https://issues.apache.org/jira/secure/attachment/12607144/LUCENE-5261.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-10-07T09:40:32+0000",
            "content": "Simple patch (most of it is removing duplicate crap).\n\nExample usage:\n\nQueryBuilder builder = new QueryBuilder(analyzer);\nQuery a = builder.createBooleanQuery(\"body\", \"just a test\");\nQuery b = builder.createPhraseQuery(\"body\", \"another test\");\n\n ",
            "author": "Robert Muir",
            "id": "comment-13788021"
        },
        {
            "date": "2013-10-07T09:48:32+0000",
            "content": "+1 This is really needed. It is very hard to create, e.g., a PhraseQuery from a simple text string. This solves the problem! ",
            "author": "Uwe Schindler",
            "id": "comment-13788024"
        },
        {
            "date": "2013-10-07T11:10:46+0000",
            "content": "Pretty cool. +1. ",
            "author": "Dawid Weiss",
            "id": "comment-13788072"
        },
        {
            "date": "2013-10-07T11:42:03+0000",
            "content": "great! +1 ",
            "author": "Tommaso Teofili",
            "id": "comment-13788088"
        },
        {
            "date": "2013-10-07T12:35:56+0000",
            "content": "Hi, I have one suggestion:\nIn ElasticSearch, but also in Solr, you have the option to have a \"percentage\" minShouldMatch. Currently the same code is duplicated, too. Of course you could do this after the build of the BooleanQuery (just set minShouldMatch depended on clauses().size()), but maybe we can automatically expand the percentage dependend on number of terms. It's just an idea, but also required quite often.\n\nOn the other hand its simple to do:\n\nfloat frac =.5f;\nBooleanQuery bq = builder.createBooleanQuery(\"body\", \"just a test\");\nbq.setMinimumNumberShouldMatch((int) (frac * bq.clauses().size()));\n\n\nMaybe its not worth to do it... ",
            "author": "Uwe Schindler",
            "id": "comment-13788106"
        },
        {
            "date": "2013-10-07T17:30:55+0000",
            "content": "I updated the patch with the minShouldMatch. ",
            "author": "Robert Muir",
            "id": "comment-13788326"
        },
        {
            "date": "2013-10-07T17:33:38+0000",
            "content": "Nice! ",
            "author": "Uwe Schindler",
            "id": "comment-13788328"
        },
        {
            "date": "2013-10-07T18:18:05+0000",
            "content": "Nice!\nCurious, why the removal of \n\npublic static enum Operator { OR, AND }\n\n ",
            "author": "David Smiley",
            "id": "comment-13788385"
        },
        {
            "date": "2013-10-07T18:22:07+0000",
            "content": "Its not removed, just moved. See the patch. ",
            "author": "Robert Muir",
            "id": "comment-13788387"
        },
        {
            "date": "2013-10-07T19:50:49+0000",
            "content": "This removes a lot of Solr code... are we absolutely sure that there are no changes of behavior lurking? ",
            "author": "Yonik Seeley",
            "id": "comment-13788506"
        },
        {
            "date": "2013-10-07T19:55:26+0000",
            "content": "Yes, its all the same because this code was copied from the lucene queryparser.\n\nAll tests pass. ",
            "author": "Robert Muir",
            "id": "comment-13788507"
        },
        {
            "date": "2013-10-07T19:56:21+0000",
            "content": "+1, patch looks great.  This will make it much easier for apps to build their own custom query parsing logic ... ",
            "author": "Michael McCandless",
            "id": "comment-13788508"
        },
        {
            "date": "2013-10-07T20:44:58+0000",
            "content": "Yonik: If you check the code, you will see that the code added to the new class is almost identical to the one removed at several places, only some cosmetic changes. This is because it was a clone already! This is just a refactoring. If the code would be different, it would have been a bug \n\nFrom my quick check, I see no differences. ",
            "author": "Uwe Schindler",
            "id": "comment-13788546"
        },
        {
            "date": "2013-10-07T21:11:53+0000",
            "content": "only some cosmetic changes. \n\nOK, thanks - it was tough for me to tell by just visual inspection. ",
            "author": "Yonik Seeley",
            "id": "comment-13788578"
        },
        {
            "date": "2013-10-09T11:06:42+0000",
            "content": "Simplified patch:\n\n\tI removed get/set defaultOperator and slop, restoring these to the QPs (so less changes there: including no api impact)\n\tI removed operator enum completely and just use Occur for that.\n\tinstead createFieldQuery just takes Occur and slop as parameters.\n\tadded javadocs\n\n\n\nFrom the \"use directly\" side I just added createBooleanQuery(String,String,Occur) and createPhraseQuery(String,String,int).\n\nI think this is much more intuitive, these parameters are really \"per-query\" anyway: they shouldnt be getters/setters on this class. (Thats just brain damage from our crazy QP).\n\nI think this is ready. ",
            "author": "Robert Muir",
            "id": "comment-13790251"
        },
        {
            "date": "2013-10-09T15:59:25+0000",
            "content": "Commit 1530693 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1530693 ]\n\nLUCENE-5261: add simple API to build queries from analysis chain ",
            "author": "ASF subversion and git services",
            "id": "comment-13790547"
        },
        {
            "date": "2013-10-09T16:26:31+0000",
            "content": "Commit 1530701 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1530701 ]\n\nLUCENE-5261: add simple API to build queries from analysis chain ",
            "author": "ASF subversion and git services",
            "id": "comment-13790580"
        }
    ]
}