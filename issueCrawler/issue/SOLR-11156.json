{
    "id": "SOLR-11156",
    "title": "Edismax query parser fails to parse q=(*:*)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "5.5.1",
        "resolution": "Cannot Reproduce",
        "status": "Resolved"
    },
    "description": "The Edismax query parser does parse the query (*:*) as a exact text match instead of a match all documents.\n\nSetting the debugQuery param to true and the query  *:*  we get this json:\n\n\"debug\": {\n   \"rawquerystring\": \"*:*\",\n   \"querystring\": \"*:*\",\n   \"parsedquery\": \"(+MatchAllDocsQuery(*:*))/no_coord\",\n   \"parsedquery_toString\": \"+*:*\",\n   ...\n}\n\n\n\nBut with the query (*:*) the Edismax query parser returns a DisjunctionMaxQuery like shown in the following json:\n\n\"debug\": {\n   \"rawquerystring\": \"(*:*)\",\n   \"querystring\": \"(*:*)\",\n   \"parsedquery\": \"(+DisjunctionMaxQuery((text:*\\\\:*)))/no_coord\",\n   \"parsedquery_toString\": \"+(text:*\\\\:*)\",\n   \"explain\": {},\n   \"QParser\": \"ExtendedDismaxQParser\",\n   ...\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-01T20:50:04+0000",
            "content": "I just tried to reproduce this with 7.2 and 6.4.2 and in both cases I see:\n\u00a0\n\n\"debug\": {\n\"rawquerystring\": \"*:*\",\n\"querystring\": \"*:*\",\n\"parsedquery\": \"(+MatchAllDocsQuery(*:*))/no_coord\",\n\"parsedquery_toString\": \"+*:*\",\n\"QParser\": \"ExtendedDismaxQParser\",\n...\n\n\n\nI think unless we get some additional information, this isn't a bug. ",
            "author": "Cassandra Targett",
            "id": "comment-16349244"
        },
        {
            "date": "2018-02-21T08:28:55+0000",
            "content": "With 7.2.1, on the default configset and querying with defType=edismax, I see similar behavior when the : query is wrapped in parentheses:\n\n\n  \"debug\":{\n    \"rawquerystring\":\"(*:*)\",\n    \"querystring\":\"(*:*)\",\n    \"parsedquery\":\"+DisjunctionMaxQuery((_text_:*\\\\:*))\",\n    \"parsedquery_toString\":\"+(_text_:*\\\\:*)\",\n    \"explain\":{},\n    \"QParser\":\"ExtendedDismaxQParser\",\n\n\n\nI'm not really sure whether this should be considered a bug or not.  The lucene parser handles it like you're expecting, and there's a strong argument that edismax should correctly handle virtually anything the lucene parser can.\n\nI'm pretty sure that the reason this fails is that the *:* query is special syntax, and it only gets correctly interpreted if the entire query clause is exactly those three characters.  By enclosing it in parentheses, the query clause does not precisely match the special syntax. ",
            "author": "Shawn Heisey",
            "id": "comment-16371085"
        },
        {
            "date": "2018-02-21T08:32:29+0000",
            "content": "This patch fixes the immediate issue, but sometimes simple and safe-looking changes in low-level code like this can have unexpected consequences.  Also, this may not actually be the best way to fix it:\n\n\ndiff --git a/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java b/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java\nindex 004d1c042a..cf0c931c91 100644\n--- a/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java\n+++ b/solr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java\n@@ -773,7 +773,7 @@ public class ExtendedDismaxQParser extends QParser {\n         if(disallowUserField) {\n           clause.raw = s.substring(start, pos);\n           // escape colons, except for \"match all\" query\n-          if(!\"*:*\".equals(clause.raw)) {\n+          if(!\"*:*\".equals(clause.raw) && !\"(*:*)\".equals(clause.raw)) {\n             clause.raw = clause.raw.replaceAll(\"([^\\\\\\\\]):\", \"$1\\\\\\\\:\");\n           }\n         } else {\n\n ",
            "author": "Shawn Heisey",
            "id": "comment-16371088"
        }
    ]
}