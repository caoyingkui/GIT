{
    "id": "SOLR-12803",
    "title": "ConcurrentUpdateSolrClient doesn't obey \"collection\" when streaming updates",
    "details": {
        "type": "Test",
        "status": "Resolved",
        "labels": "",
        "fix_versions": [
            "7.6",
            "master (8.0)"
        ],
        "components": [
            "SolrJ"
        ],
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "7.5"
    },
    "description": "ConcurrentUpdateSolrClient spins up background threads that pull documents from a queue and feed them into open HTTP connections.\u00a0 Before writing each UpdateRequest on the connection, CUSC checks that the SolrParams match the params used when originally opening the connection.\u00a0 But it doesn't check that the collection is the same.\n\nIf a user is using the same ConcurrentUpdateSolrClient to send documents to multiple collections simultaneously, each of their UpdateRequest might go to the wrong collection entirely, based on what connections are already open.\n\nThe problem can be reproduced with the snippet below.\u00a0 The correct behavior would be for 500 docs to go to each collection.\u00a0 But instead, on most runs all 1000 go to collection1.\n\n\n\n@Test\npublic void cusc_test() throws Exception {\n  try (SolrClient client = new ConcurrentUpdateSolrClient.Builder(\"http://localhost:8983/solr\").build()) {\n    for (int i = 0; i < 1000; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.setField(\"id\", \"value\" + i);\n      if (i%2 == 0) {\n        client.add(\"collection1\", doc);\n      } else {\n        client.add(\"collection2\", doc);\n      }\n    }\n\n    client.commit(\"collection1\");\n    client.commit(\"collection2\");\n  }\n}",
    "attachments": {
        "SOLR-12803.patch": "https://issues.apache.org/jira/secure/attachment/12942589/SOLR-12803.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16627449",
            "content": "I suspect that this can be fixed by adding a second clause to the if statement here, ensuring that the collection matches the originalCollection: https://github.com/apache/lucene-solr/blob/master/solr/solrj/src/java/org/apache/solr/client/solrj/impl/ConcurrentUpdateSolrClient.java#L259\n\nWill try this out shortly. ",
            "author": "Jason Gerlowski",
            "date": "2018-09-25T14:30:28+0000"
        },
        {
            "id": "comment-16627474",
            "content": "Nice find!\n\nI do question whether adding an if statement is the right thing to do here. It may fix this case, but having a method that takes a collection name then effectively ignores it seems like a broken interface to me.\n\nIs there a way to push the check down into add(doc, collection) instead so other code paths wouldn't have this problem?\n\nOr perhaps put a quick fix in here and open up a\u00a0JIRA if pushing the check down into add involves lots of surgery.\n\nMind you I haven't looked at the code so maybe this is totally off base... ",
            "author": "Erick Erickson",
            "date": "2018-09-25T15:02:33+0000"
        },
        {
            "id": "comment-16640120",
            "content": "Hey Erick, I don't think this is specifically an interface problem.  The CUSC.add methods obey their contract by storing the collection in the doc-queue when they're invoked.  It's the background thread CUSC uses to send the docs later on that ultimately ignores the collection in some cases.  All docs go through that runnable (regardless of the specific add method called), so I don't think there's any fear that this would miss other codepaths.\n\nAt least, that's my understanding.  If you see something I've missed, let me know. ",
            "author": "Jason Gerlowski",
            "date": "2018-10-05T17:35:01+0000"
        },
        {
            "id": "comment-16641877",
            "content": "Not sure where the gitbot commits are here, but I've committed fixes for this on master (367bdf7f749a4386071f4444e2d6a09591f38daf) and branch_7x (688fe19d5a76596b1d45a9644af5f7f9ba246e84).\n\nMarking this as closed. ",
            "author": "Jason Gerlowski",
            "date": "2018-10-08T14:07:21+0000"
        }
    ]
}