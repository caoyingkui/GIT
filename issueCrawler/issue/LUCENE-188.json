{
    "id": "LUCENE-188",
    "title": "When indexing large files (like the j2sdk API), get java.io.IOException: Pipe closed",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/examples"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Incomplete",
        "status": "Closed"
    },
    "description": "With lrage files, demo\\org\\apache\\lucene\\demo\\IndexFiles.java throws\n\njava.io.IOException: Pipe closed\n        at java.io.PipedInputStream.receive(Unknown Source)\n        at java.io.PipedInputStream.receive(Unknown Source)\n        at java.io.PipedOutputStream.write(Unknown Source)\n        at sun.nio.cs.StreamEncoder$CharsetSE.writeBytes(Unknown Source)\n        at sun.nio.cs.StreamEncoder$CharsetSE.implWrite(Unknown Source)\n        at sun.nio.cs.StreamEncoder.write(Unknown Source)\n        at sun.nio.cs.StreamEncoder.write(Unknown Source)\n        at java.io.OutputStreamWriter.write(Unknown Source)\n        at java.io.Writer.write(Unknown Source)\n        at org.apache.lucene.demo.html.HTMLParser.addText(HTMLParser.java:141)\n        at org.apache.lucene.demo.html.HTMLParser.HTMLDocument(HTMLParser.java:200)\n        at org.apache.lucene.demo.html.ParserThread.run(ParserThread.java:16)\n\nJdk 1.4.2, nt5 sp3. Athlon 2100, 512 MB.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2004-03-02T10:53:08+0000",
            "content": "IIIKes!!! I forgot to mention slightly important detail.. (I'm a bone head)\n\nThe exception occurs when \n\n  writer.addDocument(HTMLDocument.Document(file));\n\nis called inside of indexDocs(IndexWriter writer, File file). FileDocument was fine. ",
            "author": "Ken Johanson",
            "id": "comment-12321583"
        },
        {
            "date": "2004-03-02T20:19:38+0000",
            "content": "I don't think we can do much about this, as it's looks like it's just Java\nchoking on large files, and not something Lucene-specific.\nPlease re-open this case, if it sounds like I am missing something. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321584"
        },
        {
            "date": "2004-03-03T00:31:38+0000",
            "content": "This has to do with the interaction between HTMLParser and DocumentWriter. \nHTMLParser does:\n\n  public Reader getReader() throws IOException {\n    if (pipeIn == null) \n{\n      pipeInStream = new MyPipedInputStream();\n      pipeOutStream = new PipedOutputStream(pipeInStream);\n      pipeIn = new InputStreamReader(pipeInStream);\n      pipeOut = new OutputStreamWriter(pipeOutStream);\n\n      Thread thread = new ParserThread(this);\n      thread.start();                             // start parsing\n    }\n\n    return pipeIn;\n  }\n\n    return pipeIn;\n  }\n\nWhen you create your Document, you do something like doc.add(Field.Text\n(\"content\",parser.getReader()) to supply the reader to the document.\n\nWhen the DocumentWriter finally uses the reader in invertDocument(Document), it \ndoes:\n\n          // Tokenize field and add to postingTable\n          TokenStream stream = analyzer.tokenStream(fieldName, reader);\n          try {\n            for (Token t = stream.next(); t != null; t = stream.next()) \n{\n              position += (t.getPositionIncrement() - 1);\n              addPosition(fieldName, t.termText(), position++);\n              if (++length > maxFieldLength) break;\n            }\n          } finally \n{\n            stream.close();\n          }\n\nif DocumentWriter breaks due to the position > maxFieldLength, the reader gets \nclosed before the parser thread is done with it and the next time the parser \nthread writes to the pipe, you get the pipe closed IOException.\n\nSince DocumentWriter doesn't know it is dealing with a pipe being written to on \nsome other thread, it can't really deal with this.\n\nAt the end of org.apache.lucene.demo.html.ParserThread.run() the stack trace is \ndumped:\n\n    } catch (IOException e) \n{\n\te.printStackTrace();\n    }\n\nand since this isn't a more specific exception, just an IOException, we can't \ncatch it and silently ignore the case of the pipe being closed.\n\nThe message is a bit annoying. I suppose to \"fix\" this, you could modify \nHTMLParser.MyPipedInputStream and override the close method to do whatever is \nnecessary to gracefully shut down the parse (or you might have to extend the \nInputStreamReader and override its close, not sure). I'm not really sure what \none needs to do to gracefully shut down that parse thread. I also see this \nmessage in my logs and at present have just been ignoring it. If I get some \nfree time I'll try and look at this, OTOH, if the description helps someone \nelse see the answer to fixing this, have at it. ",
            "author": "Eric Isakson",
            "id": "comment-12321585"
        }
    ]
}