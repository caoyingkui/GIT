{
    "id": "LUCENE-4370",
    "title": "Let Collector know when all docs have been collected",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "4.0-BETA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Collectors are a good point for extension/customization of Lucene/Solr, however sometimes it's necessary to know when the last document has been collected (for example, for flushing cached data).\nIt would be nice to have a method that gets called after the last doc has been collected.",
    "attachments": {
        "LUCENE-4370.patch": "https://issues.apache.org/jira/secure/attachment/12644450/LUCENE-4370.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-10T14:22:50+0000",
            "content": "On one hand I think a Collector.finish() would be nice, but the argument could be made you could handle this yourself\n(its done with IndexSearcher.search returns).\n\nIf we do this, we would have to be careful that collectors are currently going thru the workflow properly (especially delegators): \nI actually think there are bugs today.\n\nI just looked at it out of curiousity and it doesnt look like CachingCollector is always doing the right thing wrt setNextReader/setScorer\nfor example. ",
            "author": "Robert Muir",
            "id": "comment-13452006"
        },
        {
            "date": "2012-09-10T14:26:19+0000",
            "content": "Specifically, on replay() CachingCollector does this:\n\n      for (SegStart seg : cachedSegs) {\n        other.setNextReader(seg.readerContext);\n        other.setScorer(cachedScorer);\n\n\n\nthat looks right, but it forwards setScorer() to the delegate but not setNextReader().\nso if its maxRAM is exceeded in collect(), it never calls setNextReader() before calling collect() on the delegate.\n\n\nif (curDocs == null) {\n  // Cache was too large\n  other.collect(doc);\n  return;\n}\n\n ",
            "author": "Robert Muir",
            "id": "comment-13452009"
        },
        {
            "date": "2014-04-06T12:15:35+0000",
            "content": "Proposal: LeafCollector (in trunk via LUCENE-5527) gets a method {{void done();}\n\nSemantics: It is invoked when collection with that leaf has completed. It is not invoked if collection terminates due to an exception.\n\nI know this ticket was originally about having such a method on Collector and not at the segment-level collection, however I think all use cases can be cleanly modelled in this manner.\n\nAs naming goes, I think done() or such is better than close(), which implies a try-finally'esque construct.\n\nEdit: changed my proposal from finish() to done() to avoid messing with existing uses e.g. DelegatingCollector which would currently extend SimpleCollector that implements both Collector and LeafCollector.\n\n/cc Adrien Grand Robert Muir Hoss Man ",
            "author": "Shikhar Bhushan",
            "id": "comment-13961394"
        },
        {
            "date": "2014-05-12T13:15:24+0000",
            "content": "Attaching patch.\n\nI think there is a huge potential for cleanups if this goes in, I'm happy to work on some of that. ",
            "author": "Shikhar Bhushan",
            "id": "comment-13995064"
        },
        {
            "date": "2014-05-12T13:23:35+0000",
            "content": "Umm, I totally forgot about the callers. Updated patch coming. ",
            "author": "Shikhar Bhushan",
            "id": "comment-13995070"
        },
        {
            "date": "2014-05-12T17:52:21+0000",
            "content": "Attaching patch. I updated callers based on auditing usages of Collector.getLeafCollector(..) ",
            "author": "Shikhar Bhushan",
            "id": "comment-13995324"
        },
        {
            "date": "2014-05-14T15:39:26+0000",
            "content": "attaching another version which adds a callback on both Collector void done(); as well as on LeafCollector void leafDone(); ",
            "author": "Shikhar Bhushan",
            "id": "comment-13997656"
        },
        {
            "date": "2014-05-14T15:45:48+0000",
            "content": "> On one hand I think a Collector.finish() would be nice, but the argument could be made you could handle this yourself (its done with IndexSearcher.search returns).\n\nSuch a technique does not compose easily e.g. when you want to wrap collectors in other collectors, unless you customize each and every one in the chain. ",
            "author": "Shikhar Bhushan",
            "id": "comment-13997666"
        },
        {
            "date": "2014-05-16T10:36:33+0000",
            "content": "Been thinking about the semantics of these done callbacks not being invoked in case of exceptions which was a concern raised by Adrien Grand in LUCENE-5527, this seems to be not very helpful when e.g. you have a TimeExceededException or EarlyTerminatingCollectorException thrown and you need to maybe merge in some state into the parent collector in LeafCollector.leafDone(), or perhaps finalize results in Collector.done().\n\nMaybe we need a special kind of exception, just like CollectionTerminatedException. The semantics for CollectionTerminatedException are currently that collection continues with the next leaf. So some new base-class for the \"rethrow me but invoke done callbacks\" case?\n\nIn case of any other kinds of exception like IOException, I don't think we should be invoking done() callbacks because the collector's results should not be expected to be usable. ",
            "author": "Shikhar Bhushan",
            "id": "comment-13999732"
        }
    ]
}