{
    "id": "SOLR-5823",
    "title": "Add utility function for internal code to know if it is currently the overseer",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Incomplete"
    },
    "description": "It would be useful if there was some Overseer equivalent to CloudDescriptor.isLeader() that plugins running in solr could use to know \"At this moment, am i the leader?\"",
    "attachments": {
        "SOLR-5823.patch": "https://issues.apache.org/jira/secure/attachment/12633305/SOLR-5823.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13923268",
            "date": "2014-03-06T23:49:32+0000",
            "content": "SOLR-5795 is an example of why this is useful...\n\nthere will be a recurring scheduled task on every node, but when that scheduled task fires, I want only the current overseer node to actually execute that task \u2013 because the resulting deleteByQuery will then be propogated to all the other nodes via the distributed update.  \n\nIf we just let the task run on ever node, or all the leader nodes, it will hammer the system with redundent requests.  Alternately: if we just tried to coerce thedeletes to be non distibuted, they wouldn't be consistent, and replicas could get out of sync. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13923329",
            "date": "2014-03-07T00:49:30+0000",
            "content": "Why can't it just run in the Overseer? \n\nAnyway, you can see the current Overseer by looking at its leader node in zookeeper. There is nothing currently in cluster state. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-13923506",
            "date": "2014-03-07T03:48:04+0000",
            "content": "Here's a quick patch with a happy path assert added to the ZkControllerTest.\nThis solution currently is doing some parsing of the znode data retrieved from ZK to isolate the node name. Looks like the ZooKeeper folks are planning to introduce a Path class to help with parsing in 3.5 (see: https://issues.apache.org/jira/browse/ZOOKEEPER-849) but not available yet so I'm just parsing out the node name from the znode sequence id. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13923934",
            "date": "2014-03-07T14:55:24+0000",
            "content": "Cool. Couple comments:\n\n\nLooks like the ZooKeeper folks are planning to introduce a Path class to help with parsing in 3.5 \n\nSeems we should pull it out into it's own method or utility static in the meantime?\n\nI'd also add a warning about using it to the javadoc - most of this type of info is essentially free because it's in the cluster state, but this calls ZK and we try and do that sparingly.\n\nI'm still not sure why this can't just be a thread in the Overseer class though and avoid this call altogether? That already would fail over as you need right? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13924138",
            "date": "2014-03-07T18:13:09+0000",
            "content": "miller & i talked a bit about this on IRC this morning, a few summary points...\n\n\n\tthe reasons i'm looking for a general \"am i the leader\" type method, that can be run as part of a scheduled executor \u2013 instead of adding a new processing thread to the Overseer class is two fold:\n\t\n\t\ti want the logic to be usable even if we aren't in cloud mode\n\t\ti'm trying to think about how other people who write plugins/components would be able to do the same thing w/o needing to modify the overseer.\n\t\n\t\n\n\n\n\n\tTim's patch goes the route of ensuring every node can ask \"what is the name of the overseer node\" and then implements \"am i the overseer node\" by comparing our name with the overser name\n\t\n\t\tin the case of \"who is the shard leader\" and \"am i the shard leader\" that info is cached in the cluster state info, so calling those methods doesn't hit ZK everytime\n\t\twe don't want to cache the overseer info in a similar way, because it's risky and 99% of the time, nodes don't care \"who is the overseer\"\n\t\n\t\n\n\n\nWhich brought me to the key question where miller & i realized we had gotten side tracked...\n\n\n\ti don't really care about the \"what is the name of the overseer node\" case \u2013 and most people shouldn't \u2013 i'm really just looking for the \"am i currently the overseer?\" part of the equation\n\t\n\t\tthis as a simple boolean should be a much easier question to answer efficiently, because of how the overseer election works \u2013 if a node is the overseer, it's running hte overseer processing threads\n\t\tpart of my confusion was the terminology: the idea of \"Leader\" is used a lot in the overseer code, but that's not refering to \"shard leader\" in the solr context, it's refering to the ZK jargon of \"leader election\", in many cases (in the overseer classes) it refers to \"who is the (\"zk leader\" in charge of being the) overseer\"\n\t\n\t\n\n\n\nAt this point, miller got disconnected from IRC ... but digging in a bit and thinking about what he was telling me, it seems like we should be able to add an efficient \"ZkController.isOverseer()\" method (that doesn't have to hit Zk directly), by checking if the Overseer object is active or closed \u2013 either with a new state boolean, or maybe just by checking the threads it manages for \"null\" "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13924443",
            "date": "2014-03-07T22:47:41+0000",
            "content": "Updated patch - removes the \"name\" method Tim had added, and switches the \"ZkController.isOverseer()\" method to be based on new \"isAlive()\" method i added to Overseer.java. (set to true in start(), false in close())\n\nI beefed up Tim's test changes (noticing SOLR-5832 in the process, but that doesn't seem to be related to this patch) to spin up a second node \"alt\" and verify that \"alt\" doesn't also think it's the overseer \u2013 so far so good.  However when i tried to use the \"ZkController.forceOverSeer()\" method in the test code to trigger a overseer change and verify that the booleans changed, he test fails \u2013 both nodes think they are the overseer.\n\nI'm a little out of my depth here, but from what i can tell looking at how the overseer election is setup, i think forceOverSeer() may be fundamentally broken?\n\nWould appreciate another set of eyes to help me sanity check this. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13924449",
            "date": "2014-03-07T22:51:28+0000",
            "content": "I'm a little out of my depth here, but from what i can tell looking at how the overseer election is setup, i think forceOverSeer() may be fundamentally broken?\n\nI'm not happy with the impl - its test can still fail because overseers can run at the same time. I put up a big stink about it in the issue for it. Personally, I'm not happy about how that feature was implemented. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13924501",
            "date": "2014-03-07T23:44:29+0000",
            "content": "Changed the test so it no longer uses forceOverSeer - instead if shutsdown the overseer and confirms that the other node then correctly knows it has become the overseer.\n\nI think this is ready to commit. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13924528",
            "date": "2014-03-08T00:07:11+0000",
            "content": "Looks good. I wouldn't be surprised if you have to raise that 10 second timeout - the jenkins cluster can be brutally slow \n\nWe might also want to consider setting alive to false if either Overseer thread ends. It may not be necessary - in the situations I've thought of so far, close should end up being called relatively quickly after the threads end, but I think there are some cases where they could end and close is not called until there is a reconnection to zookeeper. We don't necessarily want a plugin thinking its in a valid Overseer during that interval probably. But if say, the state update thread ends, we know right away we are not a functioning Overseer any longer. It might be safer to lock that knowledge in there.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13924645",
            "date": "2014-03-08T01:38:57+0000",
            "content": "...if say, the state update thread ends, we know right away we are not a functioning Overseer any longer. It might be safer to lock that knowledge in there.\n\nAh.... yeah, you're right.  I went the \"volatile boolean alive\" route because I figured that would be more explicit and easier to understand when looking at the start/close methods, as opposed to subtly looking at the threads \u2013 but i hadn't considered the case of the Thread's ending themselves.\n\n\u2014\n\nI've updated the patch to rip out thta boolean state variable and instead implement isAlive() based on the status of the threads.  So far so good, the test still passed.\n\nI also updated the test to interrupt one of the active OverseerThreads \u2013 this works correctly as far as the \"old\" overseer realizing it's no longer alive, but even with a really healthy delay of 30 seconds, the \"new\" overseer doesn't seem to go active.\n\nWhat am i missing? what/when/how should trigger a new leader election when one of these overseer threads ends?\n\n(FWIW: I used Thread.interrupt() in the test instead of ClosableThread.close() because as far as i could tell, nothing about how the OverseerThread class wraps/runs the ClusterStateUpdater & OverseerCollectionProcessor actually updates the \"isClosed()\" status of the Runnables if you call OverseerThread.cose() ... is that bug?)\n\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13924655",
            "date": "2014-03-08T01:58:49+0000",
            "content": "What am i missing?\n\nYou have to kill it's election node under /overseer in zk. It's an ephemeral node that will normally go away when a nodes zk connection dies. A new node being elected the leader is what starts the threads on a new node. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13924667",
            "date": "2014-03-08T02:21:51+0000",
            "content": "In other words - get the elector for the overseer and call cancel election on it. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13924674",
            "date": "2014-03-08T02:37:23+0000",
            "content": "... is that bug?\n\nIt does look jacked. Keep in mind that Overseer#close will close and interrupt though. I think we want to make the following changes though:\n\n\nIndex: solr/core/src/java/org/apache/solr/cloud/Overseer.java\n===================================================================\n--- solr/core/src/java/org/apache/solr/cloud/Overseer.java\t(revision 1575447)\n+++ solr/core/src/java/org/apache/solr/cloud/Overseer.java\t(working copy)\n@@ -81,8 +81,8 @@\n     //Internal queue where overseer stores events that have not yet been published into cloudstate\n     //If Overseer dies while extracting the main queue a new overseer will start from this queue \n     private final DistributedQueue workQueue;\n-    private volatile boolean isClosed;\n     private Map clusterProps;\n+    private boolean isClosed = false;\n \n     public ClusterStateUpdater(final ZkStateReader reader, final String myId) {\n       this.zkClient = reader.getZkClient();\n@@ -1030,20 +1030,22 @@\n \n   class OverseerThread extends Thread implements ClosableThread {\n \n-    private volatile boolean isClosed;\n+    protected volatile boolean isClosed;\n+    private ClosableThread thread;\n \n-    public OverseerThread(ThreadGroup tg,\n-        ClusterStateUpdater clusterStateUpdater) {\n-      super(tg, clusterStateUpdater);\n+    public OverseerThread(ThreadGroup tg, ClosableThread thread) {\n+      super(tg, (Runnable) thread);\n+      this.thread = thread;\n     }\n \n-    public OverseerThread(ThreadGroup ccTg,\n-        OverseerCollectionProcessor overseerCollectionProcessor, String string) {\n-      super(ccTg, overseerCollectionProcessor, string);\n+    public OverseerThread(ThreadGroup ccTg, ClosableThread thread, String name) {\n+      super(ccTg, (Runnable) thread, name);\n+      this.thread = thread;\n     }\n \n     @Override\n     public void close() {\n+      thread.close();\n       this.isClosed = true;\n     }\n \n@@ -1084,8 +1086,7 @@\n     ThreadGroup ccTg = new ThreadGroup(\"Overseer collection creation process.\");\n \n     ocp = new OverseerCollectionProcessor(reader, id, shardHandler, adminPath);\n-    ccThread = new OverseerThread(ccTg, ocp,\n-        \"Overseer-\" + id);\n+    ccThread = new OverseerThread(ccTg, ocp, \"Overseer-\" + id);\n     ccThread.setDaemon(true);\n     \n     updaterThread.start();\n\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13924888",
            "date": "2014-03-08T14:57:30+0000",
            "content": "I rolled this off into SOLR-5834: Overseer threads are only being interrupted and not closed. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13945930",
            "date": "2014-03-25T00:44:10+0000",
            "content": "In other words - get the elector for the overseer and call cancel election on it.\n\nI started down that route, and it got me past one hurdle, but then when the test tried to re-use \"zkController\" (after shutting down \"altZk\") it wouldn't ever resume being the overseer ... probably because i had completely removed it from the election?\n\nrather then trying to \"dig up\" i took a step back, and completely started from scratch with my test, focusing on the treating the ZkController as a black box w/o trying to reach inside to affect the overseer status \u2013 so in this new patch, i just spin up a random number of nodes, and then iteratively:\n\n\tconfirm only one ZKController thinks it's the overseer\n\tshutdown that ZKController\n...until there aren't any nodes left.\n\n\n\nThe only hitch is in dealing with the fact that it might take some time for the new election to happen (especially on slow jenkins machines) so i included an edge case check for 0 overseers and in that case the test sleeps a bit - with a sanity check that we don't go into an infinite loop if the overseer constantly stays at 0.\n\nMark Miller: what do you think of this patch iteration? both of the current test, and the implementation of \"isAlive()\" (you didn't comment on that after my last patch - i think this fits better with your previous feedback) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13948750",
            "date": "2014-03-27T01:53:30+0000",
            "content": "I tried testing this in conjunction with SOLR-5795 and ran into all sorts of problems, which lead me to discover SOLR-5919: when using AbstractFullDistribZkTestBase, the controlClient acts as the overseer, and none of the regular nodes in the (test) cluster do (evne though neither the control server nor the cluster nodes seem to think the control server is part of the cluster ... i don't understand it)\n\nhere's an updated patch that includes an \"IsOverseerTest\" subclassing AbstractFullDistribZkTestBase and demonstrating the problem with the test framework in SOLR-5919 ... this depends on a change to SystemInfoHandler to surface the \"isOverseer()\" info so lcinets can ask about it \u2013 something i'm not sure if we really want, but it was the only way i could figure out to write a test that demonstrated this aspect of the problem. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13949515",
            "date": "2014-03-27T16:21:16+0000",
            "content": "Over in SOLR-5919, shalin & miller reminded me why of some really silly-stupid stuff i forgot about the cluster & the overseer that makes my \"IsOverseerTest\" broken by design. namely: collections can be sharded across a cluster w/o any one replica of that collection being hosted on the node that is acting as overseer.\n\nThis means two things:\n\n1) my previous patch (prior to introducing IsOverseerTest) is still fine\n2) my main usecase for why i wanted to add this method is a flawed design, and this method won't actually help me (i don't think).\n\nSo with that in mind, i'm going to drop this issue \u2013 if other folks see any value to adding this method, we still can - otherwise i'll probably resolve as \"not a problem\" "
        }
    ]
}