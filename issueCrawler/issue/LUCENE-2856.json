{
    "id": "LUCENE-2856",
    "title": "Create IndexWriter event listener, specifically for merges",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The issue will allow users to monitor merges occurring within IndexWriter using a callback notifier event listener.  This can be used by external applications such as Solr to monitor large segment merges.",
    "attachments": {
        "LUCENE-2856.patch": "https://issues.apache.org/jira/secure/attachment/12468059/LUCENE-2856.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-01-11T21:24:44+0000",
            "content": "I added a SegmentListener class which is set on IWC.  I still need to write unit tests and add an event for aborted merges.\n\nPerhaps we want to enable a collection of segment listeners instead of only one? ",
            "author": "Jason Rutherglen",
            "id": "comment-12980335"
        },
        {
            "date": "2011-01-11T22:33:23+0000",
            "content": "A CompositeSegmentListener niftily removes the need for collection. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12980390"
        },
        {
            "date": "2011-01-11T23:38:13+0000",
            "content": "A CompositeSegmentListener niftily removes the need for collection\n\nHow would it look? ",
            "author": "Jason Rutherglen",
            "id": "comment-12980436"
        },
        {
            "date": "2011-01-11T23:54:56+0000",
            "content": "A SegmentListener that has a number of children SLs and delegates eventHappened() calls to them.  ",
            "author": "Earwin Burrfoot",
            "id": "comment-12980448"
        },
        {
            "date": "2011-01-12T04:26:07+0000",
            "content": "I think start/endTime can be long and not Long?\n\nMaybe instead of adding init/start/endTime to OneMerge, you can pass a 'time' parameter to MergeEvent. So its signature will be MergeEvent(Type type, long time, OneMerge merge). The 'time' parameter can then be interpreted according to Type.\nEven better, I think you can remove that parameter entirely, and have MergeEvent call System.currentTimeMillis() and set its internal member according to Type?\n\nAbout this:\n\npublic long getMergeSegmentSize(boolean includeDocStores) throws IOException {\n  // nocommit: cache this?\n  return mergeInfo.sizeInBytes(includeDocStores);\n}\n\n\n\nSegmentInfo caches sizeInBytes, so I think the 'nocommit' can go away.\n\nHowever, I did notice that SegmentInfo's cache is potentially buggy \u2013 it doesn't take into account 'includeDocStores'. I.e., if you call it once w/ 'false' and then with 'true' (or vice versa), you won't get the right sizeInBytes. I'll open a separate issue to fix this. ",
            "author": "Shai Erera",
            "id": "comment-12980547"
        },
        {
            "date": "2011-01-12T04:35:32+0000",
            "content": "I think start/endTime can be long and not Long?\n\nLong's used because it allows null.\n\nMaybe instead of adding init/start/endTime to OneMerge, you can pass a 'time' parameter to MergeEvent. So its signature will be MergeEvent(Type type, long time, OneMerge merge). The 'time' parameter can then be interpreted according to Type.\nEven better, I think you can remove that parameter entirely, and have MergeEvent call System.currentTimeMillis() and set its internal member according to Type?\n\nI think it's generally useful to keep track of the time(s) in the OneMerge object.  It's implemented this way so that the, likely a user interface does not need to store the various times itself.  Actually, logging applications also need to print the durations.\n\nI did notice that SegmentInfo's cache is potentially buggy - it doesn't take into account 'includeDocStores'. \n\nYes, that'd be good to fix. ",
            "author": "Jason Rutherglen",
            "id": "comment-12980553"
        },
        {
            "date": "2011-01-12T04:49:14+0000",
            "content": "Long's used because it allows null.\n\nI see. We could go with a -1 setting also - I see no reason to allocate an object, and use auto-boxing as we do that .\n\nI think it's generally useful to keep track of the time(s) in the OneMerge object.\n\nI'm not going to argue too much about that point - was just thinking that OneMerge is already filled with members and it'd be nice if we can add more to it. As for the logging scenario, I think that with the CompositeSegmentsListener an application can easily plug in its SL for logging purposes. But as I said, I don't mind about it too much.\n\nBTW, I think SegmentListener is not the proper name? I.e., it does not listen on Segments, right? Maybe a SegmentMergeListener, or simple a MergeListener? It anyway accepts only a MergeEvent .... ",
            "author": "Shai Erera",
            "id": "comment-12980558"
        },
        {
            "date": "2011-01-12T05:23:43+0000",
            "content": "We could go with a -1 setting also - I see no reason to allocate an object, and use auto-boxing as we do that\n\nThat's a style thing.  I prefer null as it's conclusive and doesn't lead to incorrect calculations, just NPEs.\n\nI think SegmentListener is not the proper name? I.e., it does not listen on Segments, right? Maybe a SegmentMergeListener, or simple a MergeListener?\n\nI had MergeListener, then changed it to be more generic.  I think we should add other segment events such as flush, open, clone, close, etc? ",
            "author": "Jason Rutherglen",
            "id": "comment-12980565"
        },
        {
            "date": "2011-01-12T08:54:12+0000",
            "content": "I see. I'm ok with both then. ",
            "author": "Shai Erera",
            "id": "comment-12980626"
        },
        {
            "date": "2011-01-12T16:53:09+0000",
            "content": "I'll added events for flush, open, clone, close and the CompositeSegmentsListener.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12980803"
        },
        {
            "date": "2011-01-12T19:16:28+0000",
            "content": "Here's a first cut including workarounds to avoid NPEs and file not found exceptions in SegmentInfo (when calling size in bytes).  There's a test case for merge init, start, and complete.  I need to add one for abort. ",
            "author": "Jason Rutherglen",
            "id": "comment-12980866"
        },
        {
            "date": "2011-01-12T20:06:49+0000",
            "content": "The aborted merge event is now generated and tested for. ",
            "author": "Jason Rutherglen",
            "id": "comment-12980893"
        },
        {
            "date": "2011-01-12T23:53:45+0000",
            "content": "I separated out a ReaderListener because it's tied to the ReaderPool which eventually will exist external to IW.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12981019"
        },
        {
            "date": "2011-01-18T11:33:37+0000",
            "content": "The ReaderEvent is never generated?  Is that still work-in-progress?\nWhen would this be invoked? Only if IW is pooling readers?  Maybe we\nshould hold off on that for a separate issue?\n\nWhy were the added checks needed in SegmentInfo?  Oh I see, it's\nbecause you compute the sizeInBytes of the merged segment before the\nmerge completes... hmm.  I think I'd prefer that this SegmentInfo not\nbe published until the Type == COMPLETE.\n\nHow come merge is not also final in MergeEvent?\n\nI agree we should change the name.  IndexEventListener?\n\nI don't think we need CompositeSegmentListener?  Why not an API to\njust add/remove listeners?  Also: are we sure this belongs in IWC?\nThis is analogous to \"infoStream\", which is on IW.  It's not a config\nparameter that affects indexing.\n\nShould we also track \"segment flushed/aborted\" events?\n\nCan you add some jdocs and mark the API as experimental? ",
            "author": "Michael McCandless",
            "id": "comment-12983155"
        },
        {
            "date": "2011-01-20T20:21:55+0000",
            "content": "Here's another iteration.  Changed the name to IndexEventListener.  Added experimental to the Javadocs, and I probably need to add more.  There are some nocommits still, eg, for the reason a flush kicked off.  Reader events should be in a different issue as reader pool is moving out of IW soon?  All tests pass.  ",
            "author": "Jason Rutherglen",
            "id": "comment-12984376"
        },
        {
            "date": "2011-01-24T20:37:03+0000",
            "content": "Here's an update, there's one nocommit as I'm not sure how we want to capture and exception and rethrow (a Throwable).  Adding the reason a flush occurred requires quite a bit of refactoring that we can probably leave for later if it's needed.  Updated to trunk, and all tests pass. ",
            "author": "Jason Rutherglen",
            "id": "comment-12985970"
        }
    ]
}