{
    "id": "SOLR-3744",
    "title": "Solr LuceneQParser only handles pure negative queries at the top-level query, but not within parenthesized sub-queries",
    "details": {
        "affect_versions": "3.6.1,                                            4.0-BETA",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The SolrQuerySyntax wiki says that pure negative queries are supported (\"Pure negative queries (all clauses prohibited) are allowed\"), which is true at the top-level query, but not for sub-queries enclosed within parentheses.\n\nSee:\nhttp://wiki.apache.org/solr/SolrQuerySyntax\n\nSome queries that will not evaluate properly:\n\ntest AND (-fox)\ntest (-fox)\ntest OR (abc OR (-fox))\ntest (-fox)\n\nSub-queries combined with the \"AND\" and \"OR\" keyword operators also fail to evaluate properly. For example,\n\ntest OR -fox\n-fox OR test\n\nNote that all of these queries are supported properly by the edismax query parser.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13451190",
            "date": "2012-09-08T00:37:51+0000",
            "content": "removing fixVersion=4.0 since there is no evidence that anyone is currently working on this issue.  (this can certainly be revisited if volunteers step forward)\n\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15176503",
            "date": "2016-03-02T21:20:35+0000",
            "content": "Have a customer who stumbled upon this recently. Anyone ever found the root cause? "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-15176525",
            "date": "2016-03-02T21:35:11+0000",
            "content": "Long ago...\n\nI'll try to remember. My vague recollection is that Solr simply fixed the top-level and inherited the nested behavior from Lucene, but now that Solr has its own copy of the basic query parser it should be fixable in the base query parser. But... I don't recall where I had tracked that down to. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-15176543",
            "date": "2016-03-02T21:47:06+0000",
            "content": "Personally, I think the proper fix is in Lucene BooleanQuery itself - if no positive clauses are present, a MatchAllDocsQuery should be added as a MUST clause.\n\nFor example, currently if you have only one clause and it is MUST_NOT, BQ explicitly rewrites to MatchNoDocsQuery.\n\nSee:\nhttps://github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java\n\nAny objection from the core Lucene committers?\n\nWhat does ES do when no positive clauses are present in a subquery? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15184685",
            "date": "2016-03-08T08:58:10+0000",
            "content": "+1\nJack Krupansky, could you perhaps create a new LUCENE issue for the BooleanQuery proposal and try whip up a patch? That will probably generate more interest from the Lucene camp and uncover any negative side effects... "
        }
    ]
}