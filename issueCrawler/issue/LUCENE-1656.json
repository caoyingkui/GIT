{
    "id": "LUCENE-1656",
    "title": "When sorting by field, IndexSearcher should not compute scores by default",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In 2.9 we've added the ability to turn off scoring (maxScore &\ntrackScores, separately) when sorting by field.\n\nI expect most apps don't use the scores when sorting by field, and\nthere's a sizable performance gain when scoring is off, so I think for\n2.9 we should not score by default, and add show in CHANGES how to\nenable scoring if you rely on it.\n\nIf there are no objections, I'll commit that change in a day or two\n(it's trivial).",
    "attachments": {
        "LUCENE-1656.patch": "https://issues.apache.org/jira/secure/attachment/12409171/LUCENE-1656.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-05-27T14:25:50+0000",
            "content": "Attached patch.  I plan to commit in a day or two. ",
            "author": "Michael McCandless",
            "id": "comment-12713584"
        },
        {
            "date": "2009-05-27T15:01:43+0000",
            "content": "Maybe state in CHANGES that IndexSearcher.setDefaultFieldSortScoring is deprecated and it is just an intermediary solution? In 3.0, the only way to achieve that will be creating TFC yourself.\n\nAlso, the tests call this method and set it to true. Since this new method is deprecated, we'll need to change those tests again in 3.0. Can they create TFC instead and call the appropriate search method? ",
            "author": "Shai Erera",
            "id": "comment-12713600"
        },
        {
            "date": "2009-05-27T15:38:31+0000",
            "content": "Maybe state in CHANGES that IndexSearcher.setDefaultFieldSortScoring is deprecated and it is just an intermediary solution?\n\nGood, I'll do that.\n\nAlso, the tests call this method and set it to true. Since this new method is deprecated, we'll need to change those tests again in 3.0. Can they create TFC instead and call the appropriate search method?\n\nUnfortunately, there were two problems with this (I had started with\nthat):\n\n\n\tYou can't pass Collector through RemoteSearchable, which some\n    tests were using.  We are planning to deprecate & remove\n    RMI/RemoteSearchable from Lucene's core in for 3.0, so we'll fix\n    such tests for 3.0.\n\n\n\n\n\tYou can't pass SortField.AUTO directly to TFDC.\n\n\n\nSo, since TFDC wasn't a direct drop-in, I decided to add the\ndeprecated method.\n\nI'm actually wondering if we should deprecate SortField.AUTO...?  It's\na little too magical, can easily guess wrong, unexpectedly binds\nSortField to a needing an IndexReader to resolve the AUTO, has caused\nus problems in the past, etc.  I prefer that the API be explicit and\nrequire you to specify what type Lucene should cast the field to. ",
            "author": "Michael McCandless",
            "id": "comment-12713606"
        },
        {
            "date": "2009-05-27T15:52:25+0000",
            "content": "I'm actually wondering if we should deprecate SortField.AUTO...?\n+1 ",
            "author": "Earwin Burrfoot",
            "id": "comment-12713613"
        },
        {
            "date": "2009-05-27T16:08:03+0000",
            "content": "+1 here as well (explicitness rules) ",
            "author": "Shai Erera",
            "id": "comment-12713624"
        }
    ]
}