{
    "id": "SOLR-196",
    "title": "A PHP response writer for Solr",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "clients - php",
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It would be useful to have a PHP response writer that returns an array to be eval-ed directly. This is especially true for PHP4.x installs, where there is no built in support for JSON.\n\nThis issue attempts to address this.",
    "attachments": {
        "SOLR-192-php-responsewriter.patch": "https://issues.apache.org/jira/secure/attachment/12354145/SOLR-192-php-responsewriter.patch",
        "SOLR-196-PHPResponseWriter.patch": "https://issues.apache.org/jira/secure/attachment/12363097/SOLR-196-PHPResponseWriter.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Paul Borgermans",
            "id": "comment-12483837",
            "date": "2007-03-24T12:05:19+0000",
            "content": "Attached first version of my patch to provide a PHP response writer (patch made against trunk rev 516287)\n\nThis relies on a correct schema.xml config file with respect to multi valued fields!! Otherwise, duplicate keys are generated. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12483849",
            "date": "2007-03-24T15:41:12+0000",
            "content": "Thanks Paul,\nPerhaps introducing some protected variables in the base class like\nARRAY_START, ARRAY_SEP, ARRAY_END, etc, would allow us to eliminate some code duplication? "
        },
        {
            "author": "Paul Borgermans",
            "id": "comment-12483891",
            "date": "2007-03-24T22:23:36+0000",
            "content": "Hi Yonik\n\nYes, I was looking in this direction as well, but I did not want to touch the Python and Ruby response writers (yet). \n\nMy next priority however is to release a set of PHP classes to interact with Solr. If these protected variables appear, the PHP response writer will be immediately adapted.\n\nRegards\nPaul\n "
        },
        {
            "author": "Tristan Vittorio",
            "id": "comment-12507078",
            "date": "2007-06-22T00:40:28+0000",
            "content": "Hi Paul,\n\nThanks for your work on the PHP response writer, I've applied your patch to the current svn trunk (revsion 549649) and manage to get it working only one minor change to PHPResponseWriter.java on line 23:\n\n\n\timport org.apache.solr.util.NamedList;\n+ import org.apache.solr.common.util.NamedList;\n\n\n\nHave you managed to get any further in developing this response writer or the Solr client classes you mention in your previous comment?  I have been looking for a response writer that created serialized php data rather than eval-able code, perhaps it would be easy to adapt the code in this patch to support this?  (I will take a look however my Java skill are not too strong yet).\n\ncheers,\nTristan "
        },
        {
            "author": "Pieter Berkel",
            "id": "comment-12517429",
            "date": "2007-08-03T04:02:10+0000",
            "content": "This patch updates the PHPResponseWriter original written by Paul Borgermans and integrates the serialized PHP response writer (renamed to PHPSerializedResponseWriter to avoid name clashes) originally authored by Nick Jenkin in SOLR-275.  See http://www.nabble.com/PHP-Response-Writer-for-Solr-tf4140580.html for some discussion on this implementation.\n\nI've made minimal code changes to JSONwriter in order to reducing the amount of code-duplication, specifically replacing all static writes of array and map structure tokens with methods:\n\n  public void writeMapOpener(int size) throws IOException, IllegalArgumentException { writer.write('\n{'); }\n  public void writeMapSeparator() throws IOException \n{ writer.write(','); }\n  public void writeMapCloser() throws IOException { writer.write('}'); }\n  \n  public void writeArrayOpener(int size) throws IOException, IllegalArgumentException { writer.write('['); }\n  public void writeArraySeparator() throws IOException { writer.write(','); }\n  public void writeArrayCloser() throws IOException \n{ writer.write(']'); }\n\nThe size parameter has been introduced specifically for PHPSerializedWriter (where the output format explicitly requires the size of the array / map to be set) and is currently ignored by all other response writers.  In cases where the size is not trivial to calculate (e.g. an Iterable object), it is set to -1.  Classes extending JSONwriter that require a valid (non-negative) size value must overload certain methods (i.e. writeArray() and writeDoc()) to calculate size correctly.  It would also be a good idea to check for invalid size values in writeMapOpener() and writeArrayOpener() and throw a IllegalArgumentException if so.\n\nSome other changes I've made to the PHPWriter code from SOLR-196:\n\n1) Removed a lot of code duplicated from JSONwriter.\n2) Updated writeStr() to use StringBuilder.\n\nSome other changes I've made to the PHPSerializedWriter code from SOLR-275:\n\n1) Removed some uneccessary duplicate code.\n2) Changed key type written by writeArray() from String to int (since they are suppose to be numeric indicies).\n3) Updated writeStr() - serialized php strings don't need to be escaped (it seems to rely only on the specified string size value) and size needs be specified in bytes not characters (some Unicode characters were causing problems when using String.length() to calculate size, can someone please sanity check this code?).\n\nI've tested both PHPWriter & PHPSerializedWriter and they both seem to output valid PHP data, it would be great if people could also test them to ensure they work in their environments.  JSONWriter also seems to be fine and although I didn't test the Python or Ruby writers, I assume they are unaffected (can anyone confirm?).  \n\nAdditionally, I've moved PythonWriter and RubyWriter from JSONResponseWriter.java to PythonResponseWriter.java and RubyResponseWriter.java respectively.\n\nI noticed that while each Writer specifies a content type value (e.g. CONTENT_TYPE_JSON_UTF8, CONTENT_TYPE_PYTHON_ASCII) the value returned by getContentType() is generally CONTENT_TYPE_TEXT_UTF8 or CONTENT_TYPE_TEXT_ASCII.  This is not a big deal and I guessed this allows the output to be easily displayed in a browser, however it would be quite useful to have the actual content type value set so that client applications can determine the response format encoding and process it accordingly without relying on access to the original \"wt\" query paramater. "
        },
        {
            "author": "Pieter Berkel",
            "id": "comment-12517432",
            "date": "2007-08-03T04:11:00+0000",
            "content": "This latest patch incorporates and deprecates code supplied in SOLR-275. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12517552",
            "date": "2007-08-03T14:43:58+0000",
            "content": "Thanks Pieter,\nRegarding the content-type, I found it more useful to be able to actually see the result in a browser.\nIs there a content-type we can use for JSON that can achieve both goals for firefox and IE at least? "
        },
        {
            "author": "Nick Jenkin",
            "id": "comment-12518054",
            "date": "2007-08-07T02:29:29+0000",
            "content": "Excellent stuff, thanks Pieter! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12519192",
            "date": "2007-08-11T03:32:11+0000",
            "content": "Thanks guys!\nI just committed this. "
        },
        {
            "author": "Pieter Berkel",
            "id": "comment-12519195",
            "date": "2007-08-11T04:25:18+0000",
            "content": "Great! I'll try to add some documentation to the wiki in the next few days.\n\n>Regarding the content-type, I found it more useful to be able to actually see the result in a browser.\n>Is there a content-type we can use for JSON that can achieve both goals for firefox and IE at least?\n\nI couldn't find any suitable mime types that would achieve this goal so it's probably better to leave the content-types unchanged for the moment. "
        },
        {
            "author": "Pieter Berkel",
            "id": "comment-12519196",
            "date": "2007-08-11T04:38:46+0000",
            "content": "Hmm, it doesn't look like the two new files from the patch were added properly during the latest commit:\n/src/java/org/apache/solr/request/PHPResponseWriter.java\n/src/java/org/apache/solr/request/PHPSerializedResponseWriter.java \nWe won't get very far without those! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12519226",
            "date": "2007-08-11T13:03:44+0000",
            "content": "Got it... thanks.\nHow I wish there were an svn patch that would add files for me \n\n-Yonik\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12579146",
            "date": "2008-03-16T03:23:52+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tMarked \"Resolved\" and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\tWas listed in the CHANGES.txt for 1.3 as of today 2008-03-15\n\n\n\nThe Fix Version for all 29 issues found was set to 1.3, email notification was suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this (hopefully) unique string: batch20070315hossman1\n "
        },
        {
            "author": "Peter Wolanin",
            "id": "comment-12680288",
            "date": "2009-03-09T21:32:42+0000",
            "content": "This PHP writer is inconsistent with the JSON if you use php 5's decode_json, maps come back as objects. "
        },
        {
            "author": "Andrew McCombe",
            "id": "comment-12708172",
            "date": "2009-05-11T19:48:46+0000",
            "content": "I'm finding occasionally that the return from the php response writer fails to unserialize in PHP5. \n\nI have a number of fields in the 'fl=' parameter of my query and it works fine until I add the field name 'recommended'.  It then fails.  If I remove all other field names and leave fl=recommended it still fails.\n\nI can see the output and it contains the results, but fails on unserializing in PHP.\n\nIs 'recommended' some sort of reserved word? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12708190",
            "date": "2009-05-11T20:16:49+0000",
            "content": "Perhaps escaping isn't correct for this particular field?\nCan you post the output from fl=recommended?\nIs it particular values of that field that cause the problem, or any document retrieved with that field?  If particular values, perhaps you could narrow it down and just post the problematic value? "
        },
        {
            "author": "Andrew McCombe",
            "id": "comment-12709798",
            "date": "2009-05-15T10:27:42+0000",
            "content": "I think the issue I have is with Solr and not the PHP output.  My 'recommended' field is an integer in the solr schema.xml but when documents are added it is converting  0 and 1 to boolean values, even though I have some values at 0,1,2, 10 and 11.\n\nHence the output is showing as:\n\n{s:2:\"id\";s:6:\"538366\";s:11:\"recommended\";i:false;}\n\nI think that PHP's unserialize function may be failing due to the wrong value for the datatype.\n\n "
        }
    ]
}