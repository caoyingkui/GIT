{
    "id": "SOLR-8904",
    "title": "Switch from SimpleDateFormat to Java 8 DateTimeFormatter.ISO_INSTANT",
    "details": {
        "components": [],
        "type": "Task",
        "labels": "",
        "fix_versions": [
            "6.0",
            "6.1",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "I'd like to move Solr away from SimpleDateFormat to Java 8's java.time.formatter.DateTimeFormatter API, particularly using simply ISO_INSTANT without any custom rules.  This especially involves our DateFormatUtil class in Solr core, but also involves DateUtil (I filed SOLR-8903 to deal with additional delete/move/deprecations for that one).\n\nIn particular, there's new Date(Instant.parse(d).toEpochMilli()) for parsing and DateTimeFormatter.ISO_INSTANT.format(d.toInstant()) for formatting.  Simple & thread-safe!\n\nI want to simply cut over completely without having special custom rules.  There are differences in how ISO_INSTANT does things:\n\n\tFormatting: Milliseconds are 0 padded to 3 digits if the milliseconds is non-zero.  Thus 30 milliseconds will have \".030\" added on.  Our current formatting code emits \".03\".\n\tDates with years after '9999' (i.e. 10000 and beyond, >= 5 digit years):  ISO_INSTANT strictly demands a leading '+' \u2013 it is formatted with a \"+\" and if such a year is parsed it must have a \"+\" or there is an exception.  SimpleDateFormatter requires the opposite \u2013 no '+' and and if you tried to give it one, it would throw an exception.\n\tCurrently we don't support negative years (resulting in invisible errors mostly!).  ISO_INSTANT supports this!\n\n\n\nIn addition, DateFormatUtil.parseDate currently allows the trailing 'Z' to be optional, but the only caller that could exploit this is the analytics module.  I'd like to remove the optional-ness of 'Z' and inline this method away to new Date(Instant.parse(d).toEpochMilli()).",
    "attachments": {
        "SOLR_8904.patch": "https://issues.apache.org/jira/secure/attachment/12795832/SOLR_8904.patch",
        "SOLR_8904_switch_from_SimpleDateFormat_to_Instant_parse_and_format.patch": "https://issues.apache.org/jira/secure/attachment/12795443/SOLR_8904_switch_from_SimpleDateFormat_to_Instant_parse_and_format.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-25T07:05:10+0000",
            "author": "David Smiley",
            "content": "Another apparent difference is that Solr currently accepts \"1976-07-21T00:07:67.890Z\"  (notice 67 seconds!) whereas ISO_INSTANT is quite strict; it does not.  I found this weird date in SimpleFacetsTest, without any comment to it's oddity.\n\nI'm working on a patch.  In this patch, I removed DateFormatUtils and moved parseMath to DateMathParser.  parseDate & formatDateExternal were one-liners of standard JDK calls so I felt no need for it.  It'll make the patch bigger to digest though. ",
            "id": "comment-15211521"
        },
        {
            "date": "2016-03-25T12:42:56+0000",
            "author": "David Smiley",
            "content": "Another apparent distance is that Solr currently accepts 2012-1-01T12:30:00Z  (notice single digit month without padding), seen from a literal string in DistributedFacetPivotLargeTest ",
            "id": "comment-15211769"
        },
        {
            "date": "2016-03-25T13:05:24+0000",
            "author": "Yonik Seeley",
            "content": "1976-07-21T00:07:67.890Z\" (notice 67 seconds!)\n\nMust have been unintended (notice that 67890 digits are all in a row... something one would type in randomly as a test number).  And it's in a facets test no less!\n\nAny idea if there are significant performance differences? ",
            "id": "comment-15211782"
        },
        {
            "date": "2016-03-25T15:20:32+0000",
            "author": "David Smiley",
            "content": "FYI Instant is the new replacement for Date in Java 8.  This patch is just about switching the parsing/formatting though; not to stop using Date.  Instant.toString() uses DateTimeFormatter.ISO_INSTANT, so you can be pretty concise when formatting if you want to.  Here's a code snippet (which I modified a test for) to build a formatted date string to send to Solr for a test specified variable number of minutes: ZonedDateTime.of(2016, 1, 1, 0, MM, 0, 0, ZoneOffset.UTC).toInstant().toString() (MM was a variable in a test method)\n\nIn case anyone reading this missed my warning of these changes to the dev list, I did so: http://mail-archives.apache.org/mod_mbox/lucene-dev/201603.mbox/%3cCABEwPvGyqu=uDq8ULVAM1t_VX2Qg3++MOsDCYb7rcY5N=XMf4A@mail.gmail.com%3e\nNo responses yet so I assume no issue with making a backwards incompatible change like this for 6.0.\n\nMy tentative CHANGES.txt entry will be, this, under \"Upgrading from Solr 5.x\":\n\n * Date-time parsing has been made more strict (based on Java 8 java.time.DateTimeFormatter.ISO_INSTANT),\nbut also now supports negative years.  AD years with >= 5 digits must have a leading '+' (formerly unsupported).\nBC years must have a '-' (formerly unsupported).  All parts of the format must be padded with zeros to the left \n(e.g. \"01\" for January, never \"1\").  All parts must be within valid maximum boundaries (e.g. 67 seconds is now\n invalid).  Formatted times from Solr now have the milliseconds 3-digit padded if non-zero.\n\n\nAnd I'll add an entry below under \"Other Changes\", more succinct.\n\nStill running tests... ",
            "id": "comment-15211932"
        },
        {
            "date": "2016-03-25T17:21:42+0000",
            "author": "Steve Rowe",
            "content": "FYI, I used the new Java8 API to do random date generation in TestUseDocValuesAsStored as part of SOLR-8838: https://github.com/apache/lucene-solr/blob/master/solr/core/src/test/org/apache/solr/schema/TestUseDocValuesAsStored.java#L217-L222 ",
            "id": "comment-15212112"
        },
        {
            "date": "2016-03-25T17:26:54+0000",
            "author": "David Smiley",
            "content": "Yup I noticed it   In my match (coming real soon now) I changed those couple lines of code to this more succinct version:\n\n          values[i] = DateTimeFormatter.ISO_INSTANT.format(Instant.ofEpochMilli(epochMillis));\n\nwhen you have the epochMillis, it's that simple.  No need to use anything more complex.  I could have even done:\n\n           values[i] = Instant.ofEpochMilli(epochMillis).toString(); \n\n ",
            "id": "comment-15212119"
        },
        {
            "date": "2016-03-25T17:32:12+0000",
            "author": "Steve Rowe",
            "content": "Don't remember the details, but I think I had to use DateTimeFormatter.ISO_LOCAL_DATE_TIME instead of ISO_INSTANT, something to do with millisecond roundtripping. ",
            "id": "comment-15212130"
        },
        {
            "date": "2016-03-25T18:22:03+0000",
            "author": "David Smiley",
            "content": "Here's the patch.  Instead of referencing DateTimeFormatter in a bunch of places, I opted for the even more concise Instant.toString().  So DTF is only used in maybe a couple places.  DateFormatUtil is gone.\n\nThis patch also weens some callers of DateUtil to Instant.toString so long as that format was what was required based on the code.  But DateUtil itself and some of its callers is being left to SOLR-8903.\n\nI'm running tests yet again.  I had also run precommit. ",
            "id": "comment-15212202"
        },
        {
            "date": "2016-03-25T18:24:16+0000",
            "author": "David Smiley",
            "content": "Hmm; ok I'll watch out for that.  As it was I had to change it since dateTime.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME) + 'Z' truncated right 0 padded milliseconds (if I recall) whereas DateTimeFormatter.ISO_INSTANT does not unless it's entirely 0. ",
            "id": "comment-15212204"
        },
        {
            "date": "2016-03-29T12:45:26+0000",
            "author": "David Smiley",
            "content": "This new patch adds parsing leniency in accordance with the Robustness Principle \u2013 \"Be conservative in what you send, be liberal in what you accept\".  In the dev list I mentioned making this leniency settable via a System property but I am not making it toggle-able here.  Perhaps it could be added later or we can let it be this way forever.\n\nPatch summary:\n\n\tDateMathParser.parseMath now parses the date literal part using a new method, parseNoMath() that uses a static instance of DTF created like this: {{new DateTimeFormatterBuilder().\n    .parseCaseInsensitive().parseLenient().appendInstant().toFormatter(Locale.ROOT)}}.  \n\t\n\t\tI have this method private because, in general, Solr should be parsing with \"date math\" from user input.  When it's from Solr (e.g. SolrJ parsing dates), it can use Integer.parse which is strict. Solr is strict about formatting output.\n\t\tparsing leniency is now explicitly tested.  A leading \"+\" is always optional no matter how many digits are in the year.  And numbers need not have leading 0 pads. However it's an error to have values out of bounds (e.g. >= 60 secs).\n\t\n\t\n\tI changed ValueSourceAugmenter to call DateMathParser.parseMath  (instead of without).\n\tI changed all 3 spots in the analytics contrib module that parse dates to parse with math (instead of without).\n\tI moved most testing in DateFieldTest into DateMathParserTest, doing a bit of consolidating/refactoring along the way.  The only test that remains is testing createField.  I made that test a bit more clear that TrieDateField parses with date math.\n\n\n\nNew suggested CHANGES.txt:\n\n * Formatted date-times from Solr have some differences.  If the year is more\nthan 4 digits, there is a leading '+'.  When there is a non-zero number of \nmilliseconds, it is padded with zeros to 3 digits.  Negative year (BC) dates are\nnow possible.  It is now an error to supply a portion of the date out \nof its, range, like 67 seconds.\n\n\n\nI think this is ready. ",
            "id": "comment-15215956"
        },
        {
            "date": "2016-03-29T12:52:03+0000",
            "author": "David Smiley",
            "content": "Sorry; this patch now has 2 changes that were in my changelist for SOLR-8903 that better belong here.  ValueSourceAugmenter [value], and ValueSourceParser ms().  That makes hits patch stand-alone. ",
            "id": "comment-15215965"
        },
        {
            "date": "2016-03-30T15:58:28+0000",
            "author": "Steve Rowe",
            "content": "+1, lots of nice simplification.  I like how in TestUseDocValuesAsStored you expanded the random date range to include negative dates and dates much farther into the future.\n\nAll Solr tests passed for me.\n\nTwo nits:\n\n\n\tIn DateMathParser.parseMath() you carried over from DateMathUtil the obsolete commented out code p.setNow(toObject(val.substring(0,zz))); - I think it should be removed.\n\tDateFieldTest has unused imports\n\n\n\nIn DateMathParser.parseNoMath() you have a TODO to make a Date-returning temporal query - here's an (untested) one (probably should not hold up this issue though):\n\n\n  /** Temporal query to convert from TemporalAccessor to Date. */\n  private static Date temporalToDate(TemporalAccessor temporal) {\n    long seconds = temporal.getLong(INSTANT_SECONDS);\n    int nanos = temporal.get(NANO_OF_SECOND);\n    if (seconds < 0 && nanos > 0) {  // from Instant.toEpochMilli()\n      long millis = Math.multiplyExact(seconds + 1, 1_000);  // millis is now <= 0\n      long adjustment = nanos / 1_000_000 - 1_000;           // adjustment is now negative\n      return new Date(Math.addExact(millis, adjustment));\n    } else {\n      long millis = Math.multiplyExact(seconds, 1_000);\n      return new Date(Math.addExact(millis, nanos / 1_000_000));\n    }\n  }\n\n ",
            "id": "comment-15218207"
        },
        {
            "date": "2016-03-30T16:08:25+0000",
            "author": "David Smiley",
            "content": "I'm glad you like the simplifications; that was definitely part of this.  The 2 nits are small enough that I'll just go commit with them done now.\n\nThanks for that code snippet.  As I was working on the code, I resisted taking this step because it would also require some tests, and could conceivably be combined in another issue with optimizations to avoid creating an instance of DateMathParser when there is no math to parse.\n\nAs an aside, I have no idea how much faster (or slower?) date formatting and parsing is.  I suspect faster given no need to worry about thread-safety. ",
            "id": "comment-15218221"
        },
        {
            "date": "2016-03-30T17:43:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 94c04237cce44cac1e40e1b8b6ee6a6addc001a5 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=94c0423 ]\n\nSOLR-8904: switch from SimpleDateFormat to Instant.parse and format.\n[value] and ms() and contrib/analytics now call DateMathParser to parse.  DateFormatUtil is now removed. ",
            "id": "comment-15218424"
        },
        {
            "date": "2016-03-30T18:43:15+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 72f5eac2c5e7fb743f166fb3c1b25e73078ebdbe in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=72f5eac ]\n\nSOLR-8904: switch from SimpleDateFormat to Instant.parse and format.\n[value] and ms() and contrib/analytics now call DateMathParser to parse.  DateFormatUtil is now removed.\n(cherry picked from commit 94c0423) (cherry picked from commit 39932f5) ",
            "id": "comment-15218565"
        },
        {
            "date": "2016-03-30T18:48:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a47a0baa829ee18b30cc391a229b96d85c865ea0 in lucene-solr's branch refs/heads/branch_6_0 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a47a0ba ]\n\nSOLR-8904: switch from SimpleDateFormat to Instant.parse and format.\n[value] and ms() and contrib/analytics now call DateMathParser to parse.  DateFormatUtil is now removed.\n(cherry picked from commit 72f5eac) ",
            "id": "comment-15218575"
        },
        {
            "date": "2016-05-11T00:06:27+0000",
            "author": "Hoss Man",
            "content": "Manually correcting fixVersion per Step #S6 of LUCENE-7271\n ",
            "id": "comment-15279275"
        }
    ]
}