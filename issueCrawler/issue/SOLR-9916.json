{
    "id": "SOLR-9916",
    "title": "Add arithmetic operations to the SelectStream",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.5"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "One of the things that will be needed as the SQL implementation matures is the ability to do arithmetic operations. For example:\n\nselect (a+b) from x;\n\nselect sum(a)+sum(b) from x;\n\nWe will need to support arithmetic operations within the Streaming API to support these types of operations.\n\nIt looks like adding arithmetic operations to the SelectStream is the best place to add this functionality.",
    "attachments": {
        "SOLR-9916.patch": "https://issues.apache.org/jira/secure/attachment/12851384/SOLR-9916.patch",
        "SOLR-9916-precommit.patch": "https://issues.apache.org/jira/secure/attachment/12852258/SOLR-9916-precommit.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-01-03T16:40:01+0000",
            "author": "Joel Bernstein",
            "content": "I think the implementation will not be difficult. The tricky part is going to be getting the syntax sorted out. I'll use the comments below to suggest some syntax options. ",
            "id": "comment-15795468"
        },
        {
            "date": "2017-01-03T16:55:18+0000",
            "author": "Joel Bernstein",
            "content": "One possible approach would look like this:\n\n\nplus(a, b, outField)\nplus(plus(a,b), c, outField)\nplus(sum(a), sum(b), outField)\n\n\n\nIn the first example two field names are used to represent operands.\n\nIn the second example the first operand is a nested arithmetic operation. \n\nIn the third example the operands are aggregate function names.\n\nThe constructors of the arithmetic operations will need to do the work to distinguish the different types of operands.\n\nAs part of a select expression it would like this:\n\nselect(expr, plus(a,b, outField), minus(sum(a), sum(b), outField))\n\n\n\n\nFor simplicity arithmetic functions can only return doubles.\n\nSuggested initial arithmetic operations:\n\nplus\nminus,\nmult,\ndiv,\nabs,\nmod\n\n\n\n\n\n\n\n\n ",
            "id": "comment-15795511"
        },
        {
            "date": "2017-01-05T16:09:22+0000",
            "author": "Joel Bernstein",
            "content": "Dennis Gove, I'm curious about your thoughts on this ticket. Do you think this is the right approach? ",
            "id": "comment-15801745"
        },
        {
            "date": "2017-01-05T23:58:56+0000",
            "author": "Dennis Gove",
            "content": "I think this is a good idea. \n\nSelect already supports an \"as\" concept, so something like would be possible already\n\nselect(plus(a,b) as outfield, <incoming stream>)\n\n ",
            "id": "comment-15802934"
        },
        {
            "date": "2017-01-05T23:59:18+0000",
            "author": "Dennis Gove",
            "content": "I'm going to start implementing these as Operations. I'll be sure to support the cases of operations within operations like\n\nplus(div(a,replace(b,null,0)),c)\n\n ",
            "id": "comment-15802935"
        },
        {
            "date": "2017-01-06T01:20:10+0000",
            "author": "Dennis Gove",
            "content": "Looking at the current state of Operations, the following class structure exists\n\n\nStreamOperation\n  ConcatOperation\n  BooleanOperation\n    AndOperation\n    LeafOperation\n      EqualsOperation\n      GreaterThanEqualToOperation\n      GreaterThanOperation\n      LessThanEqualToOperation\n      LessThanOperation\n      NotOperation\n      OrOperation\n  ReduceOperation\n    DistinctOperation\n    GroupOperation\n  ReplaceOperation (and associated hidden ReplaceWithFieldOperation, ReplaceWithValueOperation)\n\n\n\nI'd like to enhance this slightly to the following\n\n\nStreamOperation\n  BooleanOperation\n    AndOperation\n    LeafOperation\n      EqualsOperation\n      GreaterThanEqualToOperation\n      GreaterThanOperation\n      LessThanEqualToOperation\n      LessThanOperation\n      NotOperation\n      OrOperation\n  ComparisonOperation\n    IfOperation\n  ModificationOperation\n    AbsoluteValueOperation\n    AdditionOperation\n    ConcatOperation\n    DivisionOperation\n    ModuloOperation\n    MultiplicationOperation\n    ReplaceOperation (and associated hidden ReplaceWithFieldOperation, ReplaceWithValueOperation)\n    SubtractionOperation\n  ReduceOperation\n    DistinctOperation\n    GroupOperation\n\n\n\nThis will allow us to support arbitrarily complex operations in the Select stream. It accomplishes this in 3 ways.\n\nComparison Operation\n\nFirst, add an if/then/else concept with the ComparisonOperation. Embedded operations will be supported, either Modification or Comparison.\nThe full supported structure is\n\nif(boolean, field | modification | comparison, field | modification | comparison)\n\n\n\nFor example,\n\nif(boolean(...), fieldA, fieldB)\n  ex: if(gt(a,b), a, b) // if a > b then a else b\n \nif(boolean(...), modification(...), modification)\n  ex: if(gt(a,b), sub(a,b), sub(b,a)) // if a > b then a - b else b - a\n\nif(boolean(...), comparison(...), comparison(...))\n  ex: if(gt(a,b), if(or(c,d), a, b), if(and(c,d), a, b)) // if a > b then (if c or d then a else b) else (if c and d then a else b)\n\n\n\nModificationOperations with Embedded Operations\n\nSecond, enhance ModificationOperations to support embedded operations, either Modification or Comparison.\n\nThe full supported structure is\n\nmodification(field | modification | comparison [, field | modification | comparison])\n\n\n\nFor example,\n\nmodification(fieldA [,fieldB])\n  ex: add(a,b) // a + b\n\nmodification(fieldA [,modification(...)]) // order doesn't matter\n  ex: add(a, div(b,c)) // a + (b/c)\n      add(div(b,c), a) // (b/c) + a\n\nmodification(fieldA [,comparison(...)]) // order doesn't matter\n  ex: add(a, if(gt(b,c),b,c)) // if b > c then a + b else a + c\n      add(if(gt(b,c),b,c), a)  // if b > c then a + b else a + c\n\n\n\nBooleanOperations with Embedded Operations\n\nThird, enhance BooleanOperations to support embedded operations, either Modification or Comparison. Each would support the following constructs\n\nThe full supported structure is\n\nboolean(field | modification | comparison [, field | modification | comparison])\n\n\n\n\nboolean(fieldA [,fieldB])\n  ex: gt(a,b)\n\nboolean(fieldA [,modification(...)]) // order doesn't matter\n  ex: gt(a, add(b,c)) // is a > (b + c)\n      gt(add(b,c), a) // is (b + c) > a\n\nboolean(fieldA [,comparison(...)]) // order doesn't matter\n  ex: gt(a, if(gt(b,c),b,c)) // if b > c then is a > b else is a > c\n      gt(if(gt(b,c),b,c), a) // if b > c then is b > a else is c > a\n\n\n\n\n\nJoel Bernstein, I'm interested in your thoughts on this. ",
            "id": "comment-15803113"
        },
        {
            "date": "2017-01-06T01:29:43+0000",
            "author": "Joel Bernstein",
            "content": "Looks really good to me. Having the ability to nest the different types of operations with conditional logic in the select stream is really powerful.\n\nI'm just about to commit a small change so that LeafOperations can accept a metric identifier without single quotes. Currently you have to do the following or the parser will parse the metric and not know how to use it as a value operand.\n\n\nhaving(expr, eq('sum(a_i)', 9))\n\n\n\nAfter this small commit it will support:\n\n\nhaving(expr, eq(sum(a_i), 9))\n\n\n\nThis will just be relevant for Solr 6.4 which is coming in a few days.\n\nThe work you're doing on this ticket will supersede this change but it's nice to have for 6.4.\n\n ",
            "id": "comment-15803133"
        },
        {
            "date": "2017-01-06T01:33:53+0000",
            "author": "Dennis Gove",
            "content": "Sounds good.\n\nWhat is \n\nsum(a_i)\n\n? Is that calculating the sum over a multivalued field? (if so...didn't know we were supporting multivalued fields, really cool) ",
            "id": "comment-15803159"
        },
        {
            "date": "2017-01-06T01:42:34+0000",
            "author": "Joel Bernstein",
            "content": "Here is the full expression:\n\n\nhaving(rollup(over=a_f, \n              sum(a_i), \n              search(collection1 q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc\")), \n       eq(sum(a_i), 9)))\n\n\n\n\nSo the \"sum(a_i)\" is the field in the tuples produced by the rollup. ",
            "id": "comment-15803181"
        },
        {
            "date": "2017-01-06T01:44:03+0000",
            "author": "Dennis Gove",
            "content": "Of course. sum is a metric. ",
            "id": "comment-15803185"
        },
        {
            "date": "2017-02-07T12:22:16+0000",
            "author": "Dennis Gove",
            "content": "I've decided to go in a slightly different direction with this. After refamilarizing myself with StreamOperations, it became clear that operations are meant to modify tuples. For example, the ReplaceOperation replaces some field value with some other value via the \n\n void operate(Tuple)\n\n function. Newer operations like the BooleanOperation extends that with an evaluate() function, but I find it's not quite as clear as it could be. \n\nBringing this back to the problem we want to solve: we want to evaluate some value based on a tuple. This isn't meant to modify a tuple but instead to calculate new values from other values that exist within tuple. This is true whether we are adding, multiplying, determining equality, greater than, or choosing with an if/else. We are evaluating, but not modifying, the tuple.\n\nTo solve this problem, I'm introducing a new set of classes called StreamEvaluators. StreamEvaluators follow the same functional expression structure as everything else within the streaming sphere and define the function \n\npublic Object evaluate(Tuple)\n\n. The object returned from this function is the result of the evaluation against the tuple. For example, the result returned for the expresssion \n\nadd(a,b)\n\n is the result of field a added to field b. The datatype of the returned result is determined by the evaluator and the source field types. For example, \n\nadd(a,b)\n\n could reasonably return a Number, either Long or Double, while \n\neq(a,b)\n\n could reasonably return a Boolean, while \n\nif(eq(a,b),c,d)\n\n could reasonably return any type.\n\nStreamEvaluators come in two basic flavors - those that can contain other evaluators and those that can't.\n\nadd(a,b) // field a + field b\nsub(add(a,b),c) // (a + b) - c\nmult(if(gt(\"a\",b),a,b),c) // if field a > field b then a * c else b * c\nif(eq(a,b),val(34),c) // if a == b then value 34 else c\nif(eq(a,b),val(foo),c) // if a == b then value \"foo\" else c\nif(eq(a,null),b,c) // if a is null then b else c\n\n\n\nThere are a couple pieces of note in here.\n\n\n\tnull is a special case and will be treated as a standard null value\n\tA ValueEvaluator \n\nval(<string>), val(<number>), val(<boolean>)\n\n will evaluate to the raw value contained within\n\t\n\t\tThis allows us to easily distinguish between field names and raw string values.\n\t\n\t\n\tWithin any other evaluator, a string, quoted or not, will be considered a field name\n\n\n\nAs a result of this, the class structure is turning into this.\n\n\nStreamEvaluator\n  ComplexEvaluator // evaluators allowing other StreamEvaluators as parameters (looking for better class name)\n    NumberEvaluator // evaluators resulting in a Number return value\n      AbsoluteValueEvaluator // abs(a)\n      AddEvaluator // add(a,b,...,z)\n      DivideEvaluator // div(a,b)\n      MultiplyEvaluator // mult(a,b,...,z)\n      SubtractEvaluator // sub(a,b)\n    BooleanEvaluator // evaluators resulting in a Boolean return value\n      AndEvaluator // and(a,b,...,z) == true iff all all true\n      EqualsEvaluator // eq(a,b,...,z) == true iff all are equal\n      GreaterThanEqualToEvaluator\n      GreaterThanEvaluator\n      LessThanEqualToEvaluator\n      LessThanEvaluator\n      OrEvaluator\n    ConditionalEvaluator // evaluators performing a conditional and returning an Object based on the result\n      IfThenElseEvaluator\n  SimpleEvaluator // evaluators not allowing other StreamEvaluators as parameters (looking for a better class name)\n    ValueEvaluator // return the raw value as-is\n    FieldEvaluator // return the value of the field - not something that needs to be expressed in the expression\n\n\n\nStreamEvaluators will become a type of parameter supported by the SelectStream and executed after the execution of operations in that select clause. The result of the evaluation will be put into the tuple under the 'as' field name.\n\n\nselect(...,add(a,b) as aPlusb)\n ",
            "id": "comment-15855876"
        },
        {
            "date": "2017-02-07T12:25:11+0000",
            "author": "Dennis Gove",
            "content": "Includes the following evaluators\n\n\nStreamEvaluator\n  ComplexEvaluator // evaluators allowing other StreamEvaluators as parameters (looking for better class name)\n    NumberEvaluator // evaluators resulting in a Number return value\n      AbsoluteValueEvaluator // abs(a)\n      AddEvaluator // add(a,b,...,z)\n      DivideEvaluator // div(a,b)\n      MultiplyEvaluator // mult(a,b,...,z)\n      SubtractEvaluator // sub(a,b)\n    BooleanEvaluator // evaluators resulting in a Boolean return value\n      AndEvaluator // and(a,b,...,z) == true iff all all true\n      EqualsEvaluator // eq(a,b,...,z) == true iff all are equal\n      GreaterThanEqualToEvaluator\n      GreaterThanEvaluator\n      LessThanEqualToEvaluator\n      LessThanEvaluator\n      OrEvaluator\n    ConditionalEvaluator // evaluators performing a conditional and returning an Object based on the result\n      IfThenElseEvaluator\n  SimpleEvaluator // evaluators not allowing other StreamEvaluators as parameters (looking for a better class name)\n    FieldEvaluator // return the value of the field - not something that needs to be expressed in the expression\n\n\n\nStill needed:\n\n\tValueEvaluator\n\tAddition Testing\n\tHandling of null raw value\n\tAdditional evaluators\n\n ",
            "id": "comment-15855879"
        },
        {
            "date": "2017-02-07T12:26:02+0000",
            "author": "Dennis Gove",
            "content": "Future work for another ticket will be to remove the use of BooleanOperation over to use evaluators. ",
            "id": "comment-15855882"
        },
        {
            "date": "2017-02-09T20:08:13+0000",
            "author": "Dennis Gove",
            "content": "This is complete. All tests pass.\n\nI have deleted and replaced all existing BooleanOperations with their requisite BooleanEvaluators and added additional evaluators.\n\nThe registration of default evaluators looks like this\n\n// Stream Evaluators\n.withFunctionName(\"val\", RawValueEvaluator.class)\n\n// Boolean Stream Evaluators\n.withFunctionName(\"and\", AndEvaluator.class)\n.withFunctionName(\"eor\", ExclusiveOrEvaluator.class)\n.withFunctionName(\"eq\", EqualsEvaluator.class)\n.withFunctionName(\"gt\", GreaterThanEvaluator.class)\n.withFunctionName(\"gteq\", GreaterThanEqualToEvaluator.class)\n.withFunctionName(\"lt\", LessThanEvaluator.class)\n.withFunctionName(\"lteq\", LessThanEqualToEvaluator.class)\n.withFunctionName(\"not\", NotEvaluator.class)\n.withFunctionName(\"or\", OrEvaluator.class)\n\n// Number Stream Evaluators\n.withFunctionName(\"abs\", AbsoluteValueEvaluator.class)\n.withFunctionName(\"add\", AddEvaluator.class)\n.withFunctionName(\"div\", DivideEvaluator.class)\n.withFunctionName(\"mult\", MultiplyEvaluator.class)\n.withFunctionName(\"sub\", SubtractEvaluator.class)\n\n// Conditional Stream Evaluators\n.withFunctionName(\"if\", IfThenElseEvaluator.class)\n\n\n\nAll evaluators accept the following parameter formats\n\nadd(abc,def) // field abc + field def\nadd(sub(abc,def),ghi) // (field abc - field def) + field ghi\nadd(abc,9) // field abc + 9\nadd(sum(abc), def) // field sum(abc) + field def\n\n\n\nBasically, when an evaluator is parsing its parameters it will first determine if the parameter is another evaluator. If not, then it will determine if the parameter is a Double, Long, or Boolean raw value. If not, it will treat the parameter as a field name. This allows us to use field names like \"sum(abc)\" which are the result of rollups and use raw values and use embedded evaluators. ",
            "id": "comment-15860109"
        },
        {
            "date": "2017-02-09T20:13:47+0000",
            "author": "Dennis Gove",
            "content": "Joel Bernstein, just wondering on your thoughts on this? I completely removed the Operations that were added last summer and replaced them with these Evaluators. ",
            "id": "comment-15860117"
        },
        {
            "date": "2017-02-09T22:57:33+0000",
            "author": "Joel Bernstein",
            "content": "I haven't had a chance to review the patch but what you're describing sounds good to me. I've put the HavingStream to use in SOLR-8593 so I'll likely have to make some adjustments when that work gets merged into master. If you're feeling comfortable feel free to move forward and commit, these are big improvements. ",
            "id": "comment-15860351"
        },
        {
            "date": "2017-02-10T05:35:14+0000",
            "author": "Dennis Gove",
            "content": "Final patch. All tests pass. Applies to both branch_6x and master. ",
            "id": "comment-15860758"
        },
        {
            "date": "2017-02-10T05:37:33+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 7372df9957b75c08283af6db47234df1787f1490 in lucene-solr's branch refs/heads/branch_6x from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7372df9 ]\n\nSOLR-9916: Adds Stream Evaluators to support evaluating values from tuples ",
            "id": "comment-15860761"
        },
        {
            "date": "2017-02-10T05:40:14+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 62489678d074edb2ee962e1c4ee38026ff504b2a in lucene-solr's branch refs/heads/master from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6248967 ]\n\nSOLR-9916: Adds Stream Evaluators to support evaluating values from tuples ",
            "id": "comment-15860765"
        },
        {
            "date": "2017-02-10T05:41:37+0000",
            "author": "Dennis Gove",
            "content": "Mistake closing this. I intend to keep it open until I update the wiki docs. ",
            "id": "comment-15860766"
        },
        {
            "date": "2017-02-11T21:53:46+0000",
            "author": "Dennis Gove",
            "content": "I've added descriptions of each evaluator to Trunk Changes at https://cwiki.apache.org/confluence/display/solr/Internal+-+Trunk+Changes+to+Document. I'll move these to the true location after 6.4 has been cut. ",
            "id": "comment-15862546"
        },
        {
            "date": "2017-02-12T10:24:14+0000",
            "author": "Michael McCandless",
            "content": "I think this change broke ant precommit?\n\n\nBuild Log:\n[...truncated 75472 lines...]\n-documentation-lint:\n    [jtidy] Checking for broken html (such as invalid tags)...\n   [delete] Deleting directory C:\\Users\\jenkins\\workspace\\Lucene-Solr-6.x-Windows\\lucene\\build\\jtidy_tmp\n     [echo] Checking for broken links...\n     [exec]\n     [exec] Crawl/parse...\n     [exec]\n     [exec] Verify...\n     [echo] Checking for malformed docs...\n     [exec]\n     [exec] C:\\Users\\jenkins\\workspace\\Lucene-Solr-6.x-Windows\\solr\\build\\docs\\solr-solrj/overview-summary.html\n     [exec]   missing: org.apache.solr.client.solrj.io.eval\n     [exec]\n     [exec] Missing javadocs were found!\n\n\n\nDennis Gove could you please have a look?  Thanks. ",
            "id": "comment-15862725"
        },
        {
            "date": "2017-02-12T15:55:31+0000",
            "author": "Dennis Gove",
            "content": "Looks like I forgot to add the package-info.java file to the new package. Will add. ",
            "id": "comment-15862846"
        },
        {
            "date": "2017-02-12T16:26:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1700e860cebfc93a0f3ffc3cafcf77b674c6f79c in lucene-solr's branch refs/heads/master from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1700e86 ]\n\nSOLR-9916: Adds package-info.java to org.apache.solr.client.solrj.io.eval so it passes precommit ",
            "id": "comment-15862863"
        },
        {
            "date": "2017-02-12T16:28:33+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 5c9dace3ca569f6e1be4f1bc39d75c52bd049e6b in lucene-solr's branch refs/heads/branch_6x from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5c9dace ]\n\nSOLR-9916: Adds package-info.java to org.apache.solr.client.solrj.io.eval so it passes precommit ",
            "id": "comment-15862864"
        },
        {
            "date": "2017-02-12T16:29:22+0000",
            "author": "Dennis Gove",
            "content": "This is the patch that fixes the \n\nant precommit\n\n failure. ",
            "id": "comment-15862865"
        },
        {
            "date": "2017-02-16T18:18:31+0000",
            "author": "Kevin Risden",
            "content": "With these operations, we should be able to support literal comparison literal? That should help on the SQL pushdown piece. ",
            "id": "comment-15870438"
        }
    ]
}