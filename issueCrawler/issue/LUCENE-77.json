{
    "id": "LUCENE-77",
    "title": "Return multiple fields in Document",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/other"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Currently there is no quick way to retrieve multiple fields with the same name,\nother than retrieving Enumeration of all fields. A useful shortcut would be to\nprovide a method on Document:\n\npublic Field[] getFields(String name)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2003-01-24T00:17:22+0000",
            "content": "This method exists in the nightly build.\nThis is an excerpt from the CHANGES.txt:\n\n 21. Added getFields(String) and getValues(String) methods.\n     Contributed by Rasik Pandey on 2002-10-09\n     (Rasik Pandey via otis)\n\nPlease reopen if this doesn't work for you. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321179"
        },
        {
            "date": "2003-01-26T00:22:39+0000",
            "content": "Sorry, I missed that in my copy... However, the implementation uses Collections\nframework. Below is the code rewritten using JDK1.1.x Vector:\n\n   public final Field[] getFields(String name) {\n     Vector tempFieldList = new Vector();\n     for (DocumentFieldList list = fieldList; list != null; list = list.next) {\n       if (list.field.name().equals(name)) \n{\n         tempFieldList.add(list.field);\n       }\n     }\n     int fieldCount = tempFieldList.size();\n     if (fieldCount == 0)\n       return null;\n     else \n{\n       Field[] fields = new Field[fieldCount];\n       tempFieldList.copyInto(fields);\n       return fields;\n     }\n   } ",
            "author": "Andrzej Bialecki",
            "id": "comment-12321180"
        },
        {
            "date": "2003-01-26T00:30:40+0000",
            "content": "Thank you for the code, but like I mentioned in the direct email to you a few\ndays ago, I believe Lucene developers reached the consensus that any new code\nthat gets written does not need to support JDK 1.1.x.  On the whole I think we\nagreed that we don't need to make sure to support JDK 1.1.x.\n\nLucene Developers - please reopen, or better yet, modify the code, if this is\nnot true. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321181"
        },
        {
            "date": "2003-01-26T04:38:41+0000",
            "content": "Ok, I can accept that - although it's a pity, since most mobile platforms\nsupport only 1.1. However, please bear with me - the version in CVS uses\ninefficient for() loop, whereas the code above uses copyInto(), which in turn\nuses System.arraycopy(), implemented as native, so it appears to me there is\nstill some benefit in making this change...\n\nBest regards\nAndrzej ",
            "author": "Andrzej Bialecki",
            "id": "comment-12321182"
        }
    ]
}