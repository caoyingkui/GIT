{
    "id": "SOLR-11677",
    "title": "Add ability to \"enforce\" in-place updates",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "update"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "6.6",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "There is currently a problem with in-place updates: Under certain conditions, an in-place update does not work, so Solr internally reindexes the whole document. This is not bad in most cases, unless you have some fields in your documents that are not stored (e.g. large fulltext fields). In that case, the try to do in-place update leads to data loss!\n\nI'd suggest to add a request parameter in the update to \"enforce in-place mode\". If not all conditions are met (e.g. field configuration is incompatible, version field does not have all required settings, or user uses other operations than \"add\" or \"increment\"), the request should simply fail - to prevent data loss!\n\nThere is also a related issue that may lead to data loss because of the same issue: SOLR-11286. In this case it is completely unexpected because everything is correct from the schema settings, but it still does reindex.\n\nSo there should really be a way to enforce in-place docvalues updates and fail otherwise!\n\nAnother thing to maybe think of: Only prevent \"reindexing\" updates if documents have some fields that are unstored!",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-27T11:51:49+0000",
            "content": "+1, this sounds good.  ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16266689"
        },
        {
            "date": "2017-11-27T19:07:48+0000",
            "content": "Just to be clear: in-place updates were always designed (and documented) from the stand point of being a potential performance optimization that may happen when possible on a subset of atomic-updates (that supports it).  If the schema doesn't support Atomic Updates, or a situation occurs where a \"regular\" Atomic Update may lose data (because of re-indexing), then users (today) should certainly not attempt an in-place update \u2013 that was the entire point of not having special syntax! from a user perspective they should treat it just like any other atomic update \u2013 but in the right circumstance, some atomic-updates will be done \"in place\"\n\nSo there should really be a way to enforce in-place docvalues updates and fail otherwise!\n\nI guess I don't see any downside to this? .. perhaps something along the lines of...\n\n\n{\n \"id\":\"mydoc\",\n \"price\":{\"set\":99,\n          \"inplace\":true},\n \"popularity\":{\"inc\":20}\n}\n\n\n...where the value of \"inplace\" can be true, false, or null ...\n\n\tif true: the update will fail unless it can be done in in place\n\tif false: the update will force a reindex regardless of wether or not it would be possible to be done in place\n\tif null (default): the update will be done in place if possible, otherwise reindexing will be done\n\n\n\nthe most common case being that nothing is specified and null is used by default; the most likeley un-common case being a user specifies inplace:true (while inplace:false would probably only ever exist in tests, but might prove useful down the road) ",
            "author": "Hoss Man",
            "id": "comment-16267275"
        }
    ]
}