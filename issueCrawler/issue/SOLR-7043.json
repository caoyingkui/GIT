{
    "id": "SOLR-7043",
    "title": "Refactor SolrCLI, bin\\solr, bin\\solr.cmd to be more unit-testable and less OS specific",
    "details": {
        "components": [
            "scripts and tools"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "With the 5.0 release, we've reached critical mass with the bin/solr script interface, but we've picked up some cruft along the way. Specifically, there's too much OS-specific constructs in the scripts and they are quite complex overall. They also require extensive manual testing. Moreover, SolrCLI (provides support for the scripts) needs to be refactored to use the Collections API support added to SolrJ instead of using low-level JSON / HTTP constructs. SolrCLI is also in desperate need of a unit test. The overall goal of this ticket is to move as much as possible out of the shell scripts and into SolrCLI, thus increasing test coverage.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-27T16:28:25+0000",
            "author": "Timothy Potter",
            "content": "oops! wrong window  this is not resolved ",
            "id": "comment-14293771"
        },
        {
            "date": "2015-02-12T21:11:54+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "+1\n\nAlso, should we deprecate the OS-dependent solr.in.cmd and solr.in.sh in favor of some new solr.yml or something? Then SolrCLI would find and parse the file. ",
            "id": "comment-14318981"
        },
        {
            "date": "2015-02-12T21:15:18+0000",
            "author": "Hoss Man",
            "content": "Also, should we deprecate the OS-dependent solr.in.cmd and solr.in.sh in favor of some new solr.yml or something? Then SolrCLI would find and parse the file.\n\nthe scripts have to parse that file because it contains things that need to be determined before java can be invoked (ie: JAVA_HOME, gc options, misc java command line flags, logging properties, etc...) ",
            "id": "comment-14318985"
        },
        {
            "date": "2015-02-12T21:35:11+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "The bin/solr shell/batch script only needs to locate (any) JAVA to start SolrCLI, and that logic is already in place. The SolrCLI process itself do not need all the JVM flags etc, as its only job would be to parse cmdline opts and config, then assemble the complete solr command line and return it to the script for execution (to avoid another child process). ",
            "id": "comment-14319019"
        },
        {
            "date": "2015-07-27T14:41:44+0000",
            "author": "Shawn Heisey",
            "content": "Also, should we deprecate the OS-dependent solr.in.cmd and solr.in.sh in favor of some new solr.yml or something? Then SolrCLI would find and parse the file.\n\nI do like the idea of having a configuration file for Solr startup, but it should be in one of the two config languages which are predominant in Solr already \u2013 .xml and .properties.  I cannot debate on the technical merits of yml, because I know nothing at all about it.  I can say that I'm not interested in adding another configuration language, both from the standpoint of user education and code to handle it.  If anything, we need to consolidate all configuration to a single format, and I think the strongest contender for that is probably JSON, though that would involve considerably more code change than XML.\n\n+1 on the idea of a little java program so that the jobs being done by script are implemented exactly once and will work on any platform.  One of the ideas from Mark Miller in the \"make Solr a standalone program\" thread that I really liked was turning Solr into two programs \u2013 Solr itself and an agent that can start, stop, and configure Solr.  This could be a first step towards that. ",
            "id": "comment-14642796"
        },
        {
            "date": "2015-07-27T14:53:39+0000",
            "author": "Shawn Heisey",
            "content": "Separately, I've been thinking a little bit about the solr.in.* scripts, if we choose to continue using bash/batch.  Some of the documentation suggests editing those for customization, but I don't think that's a good idea.  I think that user customizations should go in a completely separate file that we don't include with Solr, to be read after the solr.in.* script. The reason I think that's a good idea is that any user who upgrades by replacing all their files with the new archive will lose any customizations to the solr.in.* scripts.  Enough stuff happens in those scripts that an install might be harmed if they continue to use their existing scripts and don't migrate their customizations to the new version.\n\nThinking along the same lines (easing upgrades), the config file for the new Java commandline program should not actually exist in the download ... if it has a name like startup.xml or solr.yml, the file included in the download should be startup.xml.example or solr.yml.example, and in the absence of the real file, all settings should assume reasonable defaults, most likely whatever solr and solr.cmd are doing currently. ",
            "id": "comment-14642817"
        },
        {
            "date": "2015-07-28T23:25:21+0000",
            "author": "Timothy Potter",
            "content": "Separately, I've been thinking a little bit about the solr.in.* scripts, if we choose to continue using bash/batch. Some of the documentation suggests editing those for customization, but I don't think that's a good idea.\n\nShawn Heisey that's a separate issue than this ... please open a JIRA for that so it can be discussed / worked on separately ",
            "id": "comment-14645187"
        },
        {
            "date": "2015-08-04T16:24:59+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I do like the idea of having a configuration file for Solr startup, but it should be in one of the two config languages which are predominant in Solr already \u2013 .xml and .properties. I cannot debate on the technical merits of yml, because I know nothing at all about it.\n\nBoth YML and .properties are nice since they are less verbose than XML/JSON. You can simply start typing key:value pairs one per line, exactly like in the current solr.in.* files. YML has the benefit over .properties in that it supports lists and other data types should that be needed later. If we go for YML it could be solr.yml, but we should not name it solr.properties since that can be confused with $SOLR_HOME/solr.properties. ",
            "id": "comment-14653909"
        },
        {
            "date": "2015-08-04T17:11:27+0000",
            "author": "Shawn Heisey",
            "content": "My concern with yml is not the capabilities of the format, it is keeping Solr as lean as possible.  I don't like the idea of adding an another software dependency and requiring users to learn another syntax just for one config file.  I believe you that it's an awesome format and might make things a lot easier ... but it's more moving parts that could have bugs, and more for the user to think about. ",
            "id": "comment-14653991"
        },
        {
            "date": "2015-08-04T20:07:32+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Please continue discussion about unified solr.in.* config file over at SOLR-7871 ",
            "id": "comment-14654275"
        },
        {
            "date": "2018-08-09T01:01:26+0000",
            "author": "Gavin",
            "content": "Move issue from deprecated 'In  Progress' back to 'Open' ",
            "id": "comment-16574109"
        }
    ]
}