{
    "id": "LUCENE-7810",
    "title": "false positive equality: distinctly diff join queries return equals()==true",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [],
        "fix_versions": [
            "6.6",
            "6.7",
            "7.0"
        ]
    },
    "description": "While working on SOLR-10583 I was getting some odd test failures that seemed to suggest we were getting false cache hits for Join queries that should have been unique.\n\ntracing thorugh the code, the problem seems to be the way TermsQuery implements equals(Object).  This class takes in the fromQuery (used to identify set of documents we \"join from\") and uses it in the equals calculation \u2013 but the information about the join field is never passed directly to TermsQuery and the BytesRefs that are passed in can't be compared efficiently (AFAICT), so 2 completely diff calls to JoinUtils.createJoinQuery(...) can result in Query objects that think they are equal() even when they most certainly are not.\n\nAt a brief glance, it appears that similar bugs exist in TermsIncludingScoreQuery (and possibly GlobalOrdinalsWithScoreQuery, but i didn't look into that class at all)",
    "attachments": {
        "LUCENE-7810.patch": "https://issues.apache.org/jira/secure/attachment/12865656/LUCENE-7810.patch",
        "LUCENE_7810.patch": "https://issues.apache.org/jira/secure/attachment/12868009/LUCENE_7810.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15989693",
            "date": "2017-04-29T02:10:32+0000",
            "content": "\nThe attached patch includes a trivial test case demonstraing the bug I found \u2013 but this only executes one code path of JoinUtils.createJoinQuery(...) \u2013 there are almost certainly other code paths with similar bugs that should also be tested. (see nocommit comments in test)\n\nA few NOTEs:\n\n\n\tAt present, due to some code I don't really understand in how Solr only leverages JoinUtils in rewritten queries, it appears that this bug does not impact current Solr usecases.  The patch also includes a trivial test showing that the \"wrapper\" queries solr creates around JoinUtils don't have this same equality problem\n\ti discovered this bug purely by fluke because in my originally POC code for SOLR-10583 I used JoinUtils.createJoinQuery(...) directly instead of refactoring Solr's JoinQParserPlugin code so i could re-use it \u2013 doing that refactoring is my nextstep for that issue, so I won't personally be pursuing fixing this bug (particularly since i'm not really sure what a good fix should look like)\n\n\n ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-15990027",
            "date": "2017-04-29T19:48:12+0000",
            "content": "updated summary that i realize now was value/missleading about the \"false positive\" situation. ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-15998335",
            "date": "2017-05-05T13:41:50+0000",
            "content": "+1 this is a bug. Actually the join query does not even matter for equality since it does not impact the matching hits. This query should only check the field (through its parent MultiTermQuery) and the list of the terms to match.\n\nI can add it to my TODO list if nobody else has cycles. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15998712",
            "date": "2017-05-05T18:18:40+0000",
            "content": "Thanks for sanity checking me ... i was worried i must have been overlooking something obvious in the intended usage of JoinUtils.\n\n+1 this is a bug. Actually the join query does not even matter for equality ... This query should only check ... list of the terms to match.\n\nyou mean the from query, correct?\n\nFWIW: I gather the reason that was used at all is because there's no easy easy/efficient way to do an equality check directly on the BytesRefHash containing the terms ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-16008212",
            "date": "2017-05-12T14:26:12+0000",
            "content": "Good catch Hoss Man! If nobody is working on this then I can fix this bug. So far only the TermsQuery seems to not take into account the join field.\n\nyou mean the from query, correct?\n\nI think this is what Adrien Grand means, because equality checking the collected terms would be too expensive. \n\nI think the TermsIncludingScoreQuery, TermsQuery, PointInSetIncludingScoreQuery and PointInSetQuery should also take index reader context id into like the GlobalOrdinalsQuery is doing. Otherwise the fromQuery + join field key can still be invalid. (mainly when docs on the from side added)  ",
            "author": "Martijn van Groningen"
        },
        {
            "id": "comment-16010033",
            "date": "2017-05-15T06:44:07+0000",
            "content": "Added patch based on Hoss Man's patch that adds more tests and fixes equals() method in TermsIncludingScoreQuery and TermsQuery. The global ordinal based queries did already implement equals() correctly and the numeric join's equals() method was also working correctly because it is comparing the actual collected points. ",
            "author": "Martijn van Groningen"
        },
        {
            "id": "comment-16012590",
            "date": "2017-05-16T15:32:29+0000",
            "content": "I actually meant the BytesRefHash in my previous comment as comparing only the from query could still lead to false positives on different index readers that have segments in common. However Martijn's idea to take the index reader context identifier into account in equals/hashCode is better I think as it would make comparisons faster.\n\nThese queries should also take the score mode into account for equals/hashCode I think? I read your comment about the fact that it is not needed for query caching, but I think two queries should only be equal if they matche the same docs and give them the same scores. If we want to be able te reuse cache entries that have different score modes, we could rewrite to a TermsQuery in createWeight, similarly to how BooleanQuery rewrites all MUST clauses into FILTER clauses when needsScores is false?\n\n\nScoreMode scoreMode1 = scoreModes.toArray(new ScoreMode[0])[random().nextInt(scoreModes.size())];\n\n\n\nI think you could do RandomPicks.randomFrom(random(), scoreModes).\n\nOtherwise +1 ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16014103",
            "date": "2017-05-17T14:12:06+0000",
            "content": ">  If we want to be able te reuse cache entries that have different score modes, we could rewrite to a TermsQuery in createWeight, similarly to how BooleanQuery rewrites all MUST clauses into FILTER clauses when needsScores is false?\n\nGood idea. I'll make this change. ",
            "author": "Martijn van Groningen"
        },
        {
            "id": "comment-16017501",
            "date": "2017-05-19T15:03:19+0000",
            "content": "Adrien Grand I've updated the patch. Score mode is now taken into account in equals(...) and hashcode(...) methods and in case a scoring query is used when no scores are needed then it the query gets replaced with the non scoring variant. ",
            "author": "Martijn van Groningen"
        },
        {
            "id": "comment-16017557",
            "date": "2017-05-19T15:38:09+0000",
            "content": "+1 maybe just replace query.rewrite(IndexReader) with searcher.rewrite(query) when you rewrite in createWeight since the latter guarantees to rewrite recursively until the query is fully rewritten ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16020821",
            "date": "2017-05-23T08:46:30+0000",
            "content": "Commit 85c1319c7678e9deaccb7b7add50fa3f465bd44f in lucene-solr's branch refs/heads/master from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=85c1319 ]\n\nLUCENE-7810: Fix equals() and hashCode() methods of several join queries. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16021421",
            "date": "2017-05-23T16:31:21+0000",
            "content": "Looks like jira-bot missed the 6x backport commit...\n\nhttp://git-wip-us.apache.org/repos/asf/lucene-solr/commit/e30fbd68 ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-16021435",
            "date": "2017-05-23T16:40:47+0000",
            "content": "Should we backport to branch_6_6 since we are re-spinning? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16021673",
            "date": "2017-05-23T19:05:29+0000",
            "content": "Commit 7f62567609e4ffd3181a9c3e713c9736c6604fa6 in lucene-solr's branch refs/heads/branch_6_6 from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7f62567 ]\n\nLUCENE-7810: Fix equals() and hashCode() methods of several join queries. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16021681",
            "date": "2017-05-23T19:10:14+0000",
            "content": "The change has been backported to 6.6 branch too now. ",
            "author": "Martijn van Groningen"
        },
        {
            "id": "comment-16022472",
            "date": "2017-05-24T07:51:35+0000",
            "content": "Commit 65bfa48770b33242d80dcce946073cc5698da7b1 in lucene-solr's branch refs/heads/master from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=65bfa48 ]\n\nLUCENE-7810: Fix numeric join equals test failure.\n\nNumeric join equals isn't based on the index reader, but rather on the collected join values.\nIn a test failure during the second indexing round no new join values were indexed causing the equals assertion to fail. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16022474",
            "date": "2017-05-24T07:53:14+0000",
            "content": "Commit a4cc08278ca7f707c349c293625b46de2ed94642 in lucene-solr's branch refs/heads/branch_6x from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a4cc082 ]\n\nLUCENE-7810: Fix numeric join equals test failure.\n\nNumeric join equals isn't based on the index reader, but rather on the collected join values.\nIn a test failure during the second indexing round no new join values were indexed causing the equals assertion to fail. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16022475",
            "date": "2017-05-24T07:54:29+0000",
            "content": "Commit 87107084c3a90f7ef253c00423b12cc1790f8c2f in lucene-solr's branch refs/heads/branch_6_6 from Martijn van Groningen\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8710708 ]\n\nLUCENE-7810: Fix numeric join equals test failure.\n\nNumeric join equals isn't based on the index reader, but rather on the collected join values.\nIn a test failure during the second indexing round no new join values were indexed causing the equals assertion to fail. ",
            "author": "ASF subversion and git services"
        }
    ]
}