{
    "id": "SOLR-5172",
    "title": "Start embedded zk servers before CoreContainer loads",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "In SOLR-4718 we allowed solr.xml to be read from Zookeeper in cloud setups.  However, this doesn't work with an embedded ZK server because it doesn't start until CoreContainer.load() is called, by which time solr.xml has already been loaded.  We should move the embedded ZK startup/shutdown logic out of CoreContainer and into SolrDispatchFilter.",
    "attachments": {
        "SOLR-5172.patch": "https://issues.apache.org/jira/secure/attachment/12598666/SOLR-5172.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Alan Woodward",
            "id": "comment-13743001",
            "date": "2013-08-17T19:38:04+0000",
            "content": "One problem here is that embedded ZK currently expects to start on solrport + 1000, but we don't know the solr port until we've parsed solr.xml.  Maybe we should just expect to start on 9983, or allow the zk port to be set as a sysprop?\n\nA couple more ideas:\n\n\tDo we need to support a distributed ZK setup in embedded mode?  It's only supposed to be for use in development, and it adds a lot of complication to the code.\n\tWe also have a separate ZkTestServer, for use in running tests.  We can probably remove this and just re-use SolrZkServer.\n\n "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13743034",
            "date": "2013-08-17T21:26:06+0000",
            "content": "An embedded zkserver is also optionally used in zkCLI.java, but it looks as though the port-handling logic is just plain wrong in here.  You need to pass the Solr port as a command-line option for the embedded server to run (although presumably you don't actually need Solr running, and in a bootstrap scenario actively don't want Solr running), which is then used to start a SolrZkServer.  But this port is then ignored by the next line, which starts a ZkClient connecting to whatever has been passed as the -zkhost parameter. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13743237",
            "date": "2013-08-18T15:23:18+0000",
            "content": "This patch:\n\n\tstarts up an embedded ZK in SolrDispatchFilter\n\tremoves the support for ZK ensembles when running embedded ZK, simplifying the server management code.  If it detects that you're trying to pass an ensemble ZK connection string as the zkRun parameter, it prints a helpful error message.\n\tallows you to pass a ZK port as a parameter to --zkRun; it defaults to 9893 if nothing is passed in.\n\tfixes ZkCLI to correctly talk to an embedded zk server if that's what is being run.\n\n\n\nI'd also like to remove ZkTestServer and replace it with EmbeddedZkServer - will start on that next.\n\nMark Miller does this look like a sensible way of doing things to you? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13743275",
            "date": "2013-08-18T16:59:16+0000",
            "content": "An embedded zkserver is also optionally used in zkCLI.java\n\nThis was for test /dev purposes only - see the help description - useful when scripting stuff when there is only a single local zk instance - it lets you start zk, do some stuff, shut it down, and then start Solr with embedded zk on a single instance. This is how you can load config files in your script before you start embedded zk and without bootstrapping. It's not for users. Also, you pass the Solr port because ZK runs at the Solr port + 1000 by default.\n\nBut this port is then ignored by the next line, which starts a ZkClient connecting to whatever has been passed as the -zkhost parameter.\n\nYou need to simply use matching ports - since its just a script/dev/test feature, it's a simple way to indicate you want to start the server and the code dones't have to parse the port from the zk address - no big deal really, but as a non user feature, the current impl was just simple.\n\nremoves the support for ZK ensembles when running embedded ZK,\n\nI dont know about this - I'd like to hear from Yonik Seeley and/or others. I don't know that we should just remove this feature in a point release. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13743276",
            "date": "2013-08-18T17:01:16+0000",
            "content": "One problem here is that embedded ZK currently expects to start on solrport + 1000\n\nAs far as I remember, that's simply a default and you should already be able to run on whatever port you want with zkRun=. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13743278",
            "date": "2013-08-18T17:02:24+0000",
            "content": "bq:  If it detects that you're trying to pass an ensemble ZK connection string as the zkRun parameter, it prints a helpful error message\n\nCan I still run multiple embedded ZKs as an ensemble by specifying both zkRun and zkHost? We recommend external ZK ensembles, but the current way of doing things doesn't prevent embedded ZK ensembles.... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13743279",
            "date": "2013-08-18T17:02:33+0000",
            "content": "It's only supposed to be for use in development\n\nThat's not totally true - it's fine to use it in production. For various reasons, we simply 'reccomend' using a separate ensemble. Over time, we hope to make embedded much better and more flexible. Some open jiras for ZK should help with this. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13743334",
            "date": "2013-08-18T19:21:50+0000",
            "content": "You need to simply use matching ports\n\nSure, but you need to specify the actual zk port in the zkhost line, and then port - 1000 as the solrport parameter (which isn't used for anything else).  I found it a bit confusing.\n\nRe. embedded ensembles, if the consensus is that we still want to support them, then I'll add them back in - I'd got the impression that we were really trying to discourage using embedded ZK servers in production, but if the plan is to improve embedded mode over time then clearly we need to support ensembles now.\n\nSome open jiras for ZK should help with this\n\nDo you have any pointers to specific JIRA tickets?  I'm still getting my head round the ZK internals, would be interested to see what sort of improvements we could make.  The completely different API for standalone ZK and ensembles is doing my head in a bit, for a start... "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13743341",
            "date": "2013-08-18T19:44:26+0000",
            "content": "Can I still run multiple embedded ZKs as an ensemble by specifying both zkRun and zkHost?\n\nNot with the patch as is - under the hood, ZK uses completely different classes for standalone and ensemble servers, with no common interface. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13788043",
            "date": "2013-10-07T10:14:07+0000",
            "content": "New patch.\n\n\n\tEmbeddedZkServer now has two implementations, Standalone and Ensemble.\n\tEnsemble deals with myid files before calling into ZK, so we don't need to duplicated code from the ZK source.\n\tEmbedded server startup is moved from ZkController (ie after the CoreContainer is started) to SolrDispatchFilter.\n\tbootstrap_confdir logic moved to SolrDispatchFilter\n\tbootstrap_conf logic moved to ZkController.\n\n\n\nIn order to allow an embedded ensemble to be started up and bootstrapped, ZkController now waits for a specific node (/upload-complete) to be created in ZK before it starts up.  This means you can do the following:\n\n\tstart two solr instances (server1 and server2) with --zkRun=server1,server2,server3.  They will start up their embedded ZK servers and then block waiting for a quorum\n\tstart a third instance on server3 with zkRun and bootstrap_confdir.  This will join the quorum\n\tthe two initial instances will now block waiting for the upload-complete node\n\tserver3 loads its config, and creates the upload-complete node\n\tall three servers can now load their corecontainers.\n\n\n\nThis is a backwards-breaking change, ie after this patch, Solr won't start with an old ZK instance because the upload-complete node won't be there.  I'd like to add an -upgrade task to ZkCli to deal with that, which can be run as a one-off process when upgrading. "
        }
    ]
}