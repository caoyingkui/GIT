{
    "id": "SOLR-1477",
    "title": "Search on multi-tier cores",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "3.2"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Search on cores in the container, using distributed search.",
    "attachments": {
        "SOLR-1477.patch": "https://issues.apache.org/jira/secure/attachment/12420862/SOLR-1477.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jason Rutherglen",
            "id": "comment-12760779",
            "date": "2009-09-30T00:05:26+0000",
            "content": "Fairly simple additions to example/multicore.   "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12760790",
            "date": "2009-09-30T00:46:06+0000",
            "content": "Added a new parameter \"cores\" which allows one to define the cores to search on.\n\nOther params:\n\nport - The port in the url\ncontext - The context of the url\ncores - Comma delimited list of cores to search on, the default is all except the one the query comes in on\n "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12760954",
            "date": "2009-09-30T16:51:49+0000",
            "content": "Added Apache license headers "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12761014",
            "date": "2009-09-30T21:41:18+0000",
            "content": "Is there a lurking issue that prevents a chained distributed queries from working?  I setup a \"proxy\" core that queries local cores, which when called by another distributed request, fails with:\n\n\nSEVERE: java.lang.NullPointerException\n\tat org.apache.solr.handler.component.ShardFieldSortedHitQueue$1.compare(ShardDoc.java:210)\n\tat org.apache.solr.handler.component.ShardFieldSortedHitQueue.lessThan(ShardDoc.java:134)\n\tat org.apache.lucene.util.PriorityQueue.upHeap(PriorityQueue.java:255)\n\tat org.apache.lucene.util.PriorityQueue.put(PriorityQueue.java:114)\n\tat org.apache.lucene.util.PriorityQueue.insertWithOverflow(PriorityQueue.java:156)\n\tat org.apache.lucene.util.PriorityQueue.insert(PriorityQueue.java:141)\n\tat org.apache.solr.handler.component.QueryComponent.mergeIds(QueryComponent.java:445)\n\tat org.apache.solr.handler.component.QueryComponent.handleResponses(QueryComponent.java:298)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:290)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:131)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1316)\n\n "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12762479",
            "date": "2009-10-06T01:06:12+0000",
            "content": "Includes a test case showing the proxy -> proxies -> multi cores bug.  I'll work on a fix for the issue.\n\nThe main test case is MultiLocalCoresJettyTest which yields:\n\nSEVERE: java.lang.NullPointerException\n\tat org.apache.solr.handler.component.ShardFieldSortedHitQueue$1.compare(ShardDoc.java:210)\n\tat org.apache.solr.handler.component.ShardFieldSortedHitQueue.lessThan(ShardDoc.java:134)\n\tat org.apache.lucene.util.PriorityQueue.upHeap(PriorityQueue.java:255)\n\tat org.apache.lucene.util.PriorityQueue.put(PriorityQueue.java:114)\n\tat org.apache.lucene.util.PriorityQueue.insertWithOverflow(PriorityQueue.java:156)\n\tat org.apache.lucene.util.PriorityQueue.insert(PriorityQueue.java:141)\n\tat org.apache.solr.handler.component.QueryComponent.mergeIds(QueryComponent.java:445)\n\tat org.apache.solr.handler.component.QueryComponent.handleResponses(QueryComponent.java:298)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:290)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:131)\n\tat org.apache.solr.handler.LocalSearchHandler.handleRequest(LocalSearchHandler.java:67)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1320)\n\n "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12762491",
            "date": "2009-10-06T03:15:23+0000",
            "content": "Added missing MultiLocalCoresJettyTest "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12762844",
            "date": "2009-10-07T02:04:50+0000",
            "content": "I made some headway with getting this working. I pass a tier\nparameter that is incremented when the request is recognized as\nbeing distributed in handleRequestBody. This way if we're on the\n2nd tier, the system can skip retrieving docs on the 1st pass.\n\nThe issue is, QueryComponent.createRetrieveDocs on the 2nd tier\nneeds ShardDocs, however the information for SD isn't available\non the 2nd tier so it needs to be passed in from the 1st tier.\nThe concern is that there's a lot of parameters to pass to\nrecreate a sharddoc when it's only to obtain document data.\n\nI wish the distributed wasn't so bound together where objects\nare modified on the request and response ends. It's not\nintuitive. If we expect people to write or customize distributed\nenabled components maybe we need to think about a cleaner API. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12767297",
            "date": "2009-10-19T11:29:38+0000",
            "content": "May be it is worth adding a use case and an explanation on what is lacking in the trunk. This will help us understand the patch better "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12767594",
            "date": "2009-10-19T22:50:46+0000",
            "content": "The use case is scaling to hundreds of servers where a single distributed search proxy server becomes a bottleneck, or simply querying multiple local cores.  Either way the same muti-tiered distributed search module will be highly effective. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12767600",
            "date": "2009-10-19T22:55:53+0000",
            "content": "The way the process should work for this patch is:\n\n1) Incoming query to shard proxy server\n2) getids passed to N intermediary proxy servers\n3) Intermediary proxy servers forwards the getids call to Y Solr servers\n4) Y Solr servers respond, i-proxy merges the ids, and sends the response to the toplevel proxy server from step 1)\n5) The toplevel proxy merges the results from the i-proxies\n6) getdocs is passed from proxy 1) to the i-proxies\n7) i-proxies call Solr servers to obtain documents (the actual shard the documents exist on needs to be passed to the i-proxy to avoid redundancy)\n8) iproxies send the results of getdocs to the toplevel proxy\n9) The request is completed.\n\nI know that's muddy but it's a start. "
        },
        {
            "author": "Kenny Neal",
            "id": "comment-12863508",
            "date": "2010-05-03T20:51:08+0000",
            "content": "I am having this issue as well.  Here's the stack trace I am getting (replacing \"__\" with '\\n'):\n\nHTTP ERROR: 500\nnull\njavalangNullPointerException\nat_orgapachesolrhandlercomponentShardFieldSortedHitQueue$1compareShardDocjava210\nat_orgapachesolrhandlercomponentShardFieldSortedHitQueuelessThanShardDocjava134\nat_orgapacheluceneutilPriorityQueueupHeapPriorityQueuejava255\nat_orgapacheluceneutilPriorityQueueputPriorityQueuejava114\nat_orgapacheluceneutilPriorityQueueinsertWithOverflowPriorityQueuejava156\nat_orgapacheluceneutilPriorityQueueinsertPriorityQueuejava141\nat_orgapachesolrhandlercomponentQueryComponentmergeIdsQueryComponentjava445\nat_orgapachesolrhandlercomponentQueryComponenthandleResponsesQueryComponentjava298\nat_orgapachesolrhandlercomponentSearchHandlerhandleRequestBodySearchHandlerjava290\nat_orgapachesolrhandlerRequestHandlerBasehandleRequestRequestHandlerBasejava131\nat_orgapachesolrcoreSolrCoreexecuteSolrCorejava1316\nat_orgapachesolrservletSolrDispatchFilterexecuteSolrDispatchFilterjava338\nat_orgapachesolrservletSolrDispatchFilterdoFilterSolrDispatchFilterjava241\nat_orgmortbayjettyservletServletHandler$CachedChaindoFilterServletHandlerjava1089\nat_orgmortbayjettyservletServletHandlerhandleServletHandlerjava365\nat_orgmortbayjettysecuritySecurityHandlerhandleSecurityHandlerjava216\nat_orgmortbayjettyservletSessionHandlerhandleSessionHandlerjava181\nat_orgmortbayjettyhandlerContextHandlerhandleContextHandlerjava712\nat_orgmortbayjettywebappWebAppContexthandleWebAppContextjava405\nat_orgmortbayjettyhandlerContextHandlerCollectionhandleContextHandlerCollectionjava211\nat_orgmortbayjettyhandlerHandlerCollectionhandleHandlerCollectionjava114\nat_orgmortbayjettyhandlerHandlerWrapperhandleHandlerWrapperjava139\nat_orgmortbayjettyServerhandleServerjava285\nat_orgmortbayjettyHttpConnectionhandleRequestHttpConnectionjava502\nat_orgmortbayjettyHttpConnection$RequestHandlercontentHttpConnecti\n\n\nAre there any workarounds for this issue? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872488",
            "date": "2010-05-27T22:06:23+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12986005",
            "date": "2011-01-24T21:12:55+0000",
            "content": "Sorry if this spam's things, however it's unlikely that I'll work on these. "
        }
    ]
}