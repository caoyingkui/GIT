{
    "id": "LUCENE-5721",
    "title": "Monotonic packed could maybe be faster",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": []
    },
    "description": "This compression is used in lucene for monotonically increasing offsets, e.g. stored fields index, dv BINARY/SORTED_SET offsets, OrdinalMap (used for merging and faceting dv) and so on.\n\nToday this stores a +/- deviation from an expected line of y=mx + b, where b is the minValue for the block and m is the average delta from the previous value. Because it can be negative, we have to do some additional work to zigzag-decode.\n\nCan we just instead waste a bit for every value explicitly (lower the minValue by the min delta) so that deltas are always positive and we can have a simpler decode? Maybe If we do this, the new guy should assert that values are actually monotic at write-time. The current one supports \"mostly monotic\" but do we really need that flexibility anywhere? If so it could always be kept...",
    "attachments": {
        "LUCENE-5703.patch": "https://issues.apache.org/jira/secure/attachment/12648173/LUCENE-5703.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14014514",
            "author": "Robert Muir",
            "content": "Also it would be nice to think about how much the floating point stuff saves compression-wise in practice. Maybe an integer average is enough? ",
            "date": "2014-05-31T04:32:51+0000"
        },
        {
            "id": "comment-14014703",
            "author": "Yonik Seeley",
            "content": "This was essentially the approach I took in Heliosearch's off-heap cache, no zigzag, and an integer average.\nI don't see the point of zigzag in this specific context... if you know the range of offsets, then you can get the extra bit back by just using an offset.  For example, -100 to 150 still maps to a single byte: 0-256 with an offset of -100. ",
            "date": "2014-05-31T16:10:20+0000"
        },
        {
            "id": "comment-14014707",
            "author": "Adrien Grand",
            "content": "I'm afraid the integer average could trigger some worst-cases space-wise. For example let's imagine that half your binary doc values have a length of 4 and the other half has a length of 5: the average length is 4.5 and we use a monotonic writer to store offsets.\n\nWith an integer average you need to approximate the length with 4 or 5. This means that your maximum delta will be 0.5 * BLOCK_SIZE = 8192 with the current encoding, that is 14 bits per value (13 + 1 for zig-zag). With a float average there is a worst-case that typically happens if a block stores all 4s first and all 5s afterwards (max delta occurs at BLOCK_SIZE / 2 and is then 0.5 * BLOCK_SIZE / 2 = 4096)  but if your 4s and 5s and more evenly distributed inside a block (which I expect to be quite likely), then you would only need a few bits per value. ",
            "date": "2014-05-31T16:43:39+0000"
        },
        {
            "id": "comment-14016804",
            "author": "Adrien Grand",
            "content": "Here is a patch that adjusts the origin of a block (the B of A * x + B) so that all deltas are positive. This seems to improve performance by about 10% when using PackedInts.FASTEST on MonotonicAppendingLongBuffer, and it also reduces memory usage in certain cases since it might save a bit (eg. if the min delta was -1 and the max 6, we used to require bitsRequired(Math.max(6, 1)) + 1 = 4 bits while it would now require bitsRequired(6 - (-1)) = bitsRequired(7) = 3). ",
            "date": "2014-06-03T15:53:12+0000"
        },
        {
            "id": "comment-14018923",
            "author": "ASF subversion and git services",
            "content": "Commit 1600694 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1600694 ]\n\nLUCENE-5721: Monotonic compression doesn't use zig-zag encoding anymore. ",
            "date": "2014-06-05T16:30:05+0000"
        },
        {
            "id": "comment-14019178",
            "author": "ASF subversion and git services",
            "content": "Commit 1600747 from Adrien Grand in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1600747 ]\n\nLUCENE-5721: Monotonic compression doesn't use zig-zag encoding anymore. ",
            "date": "2014-06-05T20:12:49+0000"
        }
    ]
}