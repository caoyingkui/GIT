{
    "id": "SOLR-2690",
    "title": "Date Math should allow clients to override timezone used for rounding (faceting & queries)",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Timezone needs to be taken into account when doing date math. Currently it isn't. DateMathParser instances created are always being constructed with UTC. This is a huge issue when it comes to faceting. Depending on your timezone day-light-savings changes the length of a month. A facet gap of +1MONTH is different depending on the timezone and the time of the year.\n\nI believe the issue is very simple to fix. There are three places in the code DateMathParser is created. All three are configured with the timezone being UTC. If a user could specify the TimeZone to pass into DateMathParser this faceting issue would be resolved.",
    "attachments": {
        "SOLR-2690.patch": "https://issues.apache.org/jira/secure/attachment/12522174/SOLR-2690.patch",
        "add-tz-parameter.patch": "https://issues.apache.org/jira/secure/attachment/12511316/add-tz-parameter.patch",
        "timezone-facet-component.tgz": "https://issues.apache.org/jira/secure/attachment/12510030/timezone-facet-component.tgz"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13076307",
            "date": "2011-08-02T16:52:51+0000",
            "content": "Although this probably isn't a \"bug\", I agree that handling timezones somehow would be nice.\nWe just need to think very carefully about the API so we can support it long term.\n\nOne immediate thought I had was that it would be a pain to specify the timezone everywhere.  Even a simple range query would need to specify it twice:\nmy_date:[\"(?timeZone=America/Chicago)NOW/YEAR\" TO \"(?timeZone=America/Chicago)+1MONTH\"]\n\nSo one possible alternative that needs more thought is a \"TZ\" request parameter that would apply by default to things that are date related. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13078291",
            "date": "2011-08-02T17:10:51+0000",
            "content": "This issue is similar to SOLR-750 in which I pleaded with Hoss (and lost) to get the \"Z\" out of the DateMath date literal format since, at the end of the day, Solr really doesn't have time zone support \u2013 forcing me to \"lie\" to Solr about the time zone. "
        },
        {
            "author": "David Schlotfeldt",
            "id": "comment-13078292",
            "date": "2011-08-02T17:11:32+0000",
            "content": "Good point.\n\nAlso, this isn't a bug but if we want a complete solution, we really need a way to specify times in other timezones.\n\nIf I want midnight in Central time zone I shouldn't have to write: 2011-01-01T06:00:00Z\n(Note I wrote 6:00 not 0:00)\nI believe only DateField would have to be modified to make it possible to specify timezone.\n\nFor a complete example if I wanted to facet blog posts by the date posted and the month:\n\nfacet.date=blogPostDate\nfacet.date.start=2011-01-01T00:00:00\nfacet.date.end=2012-01-01T00:00:00\nfacet.date.gap=+1MONTH\ntimezone=America/Chicago\n\nCurrently you would need to do the following. (Which actually gives close to correct results but not exact. Again, problem is the gap of +1MONTH doesn't take daylight savings into account so blog posts on the edge of ranges are counted in the wrong range.\n\nfacet.date=blogPostDate\nfacet.date.start=2011-01-01T00:06:00Z\nfacet.date.end=2012-01-01T00:06:00Z\nfacet.date.gap=+1MONTH "
        },
        {
            "author": "David Schlotfeldt",
            "id": "comment-13078352",
            "date": "2011-08-02T18:36:52+0000",
            "content": "By extending FacetComponent (and having to resort to reflection) I added: facet.date.gap.tz\n\nThe new parameter only affects the gap. The math done with processing the gap is the largest issue when it comes it date faceting in my mind.\n\nI would be more then happy to provide a patch to add this feature.\n\nNo this doesn't address all timezone issues but at least it would address the main issue that makes date faceting, in my eyes, completely useless. I bet there are 100s of people out there using date faceting that don't realize it does NOT give correct results \n\n "
        },
        {
            "author": "David Schlotfeldt",
            "id": "comment-13078419",
            "date": "2011-08-02T20:43:39+0000",
            "content": "Okay I've modified my code to now take \"facet.date.tz\" instead. The time zone now affects the facet's start, end and gap values. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13078519",
            "date": "2011-08-02T23:54:41+0000",
            "content": "If I want midnight in Central time zone I shouldn't have to write:  2011-01-01T06:00:00Z (Note I wrote 6:00 not 0:00)\n\n\"Central time zone\" is a vague concept that may mean one thing to you, but may mean something different to someone else.  For any arbitrary moment in the (one dimensional) space of time values, there are an infinite number of ways to represent that time as a string (or as number) depending on where you place your origin for the coordinate system.  Requiring that clients format times in UTC is no different then requiring clients to use Arabic numerals to represent integers \u2013 it's just a matter of making sure there is no ambiguity, and everyone is using the same definition of \"0\".  UTC is a completely unambiguous coordinate system for times, that is guaranteed to work in any JVM that Solr might run on.  Even if we added code to allow dates to be expressed in arbitrary user selected timezones, we couldn't make that garuntee.\n\nBottom line: the issue of parsing/formatting times in other coordinate systems (ie: timezones) should not be convoluted with the issue of what timezone is used by the DateMathParser when rounding \u2013 those are distinct issues.  It's completely conceivable to have a QParser that accepts a variety of data formats and \"guesses\" what TZ is meant and use that QParser in the same request where you want date faceting based on a TZ that is specified distinctly from the query string (ie: user's local TZ is UTC-0700, but they are searching for records dated before \"Dec 15, 2010 4:20PM EST\")\n\nSo one possible alternative that needs more thought is a \"TZ\" request parameter that would apply by default to things that are date related.\n\nRight ... from the beginning DateMathparser was designed with the hope that a TZ/Locale pair could be specified per request (or per field declaration) for driving the rounding/math logic, there was just no sane way to specify an alternative to UTC/US that could be past down into the DateMathParser and used ubiquitously in a request because of the FieldType API.\n\n(Slight digression...\n\nits really only essential that we can affect DateMathParser the SimpleFacets uses when dealing with the gap of the date facets.\n\n...just changing the TZ used by that instance of DateMathParser for rounding/math isn't going to do any good if the user then tries to filter on one of those constraints and the filter query code winds up using the defaults in DateField (ie: NOW/DAY and NOW/DAY+1HOUR are going to be very differnet things in the facet count code path vs the filter query code path))\n\nNow that we have SolrRequestInfo and a request param to specify the meaning of \"NOW\", the same logic could be used to allow a request param to specify the TZ/Locale properties of the DateMathParser as well.\n\nBut like I said: this should really only be used to affect the math in DateMathParser \u2013 it should not be used in DateField.parseDate/formatDate because DateField by definition deals with a single canonical time format, by the time the DateField class is involved in dealing with a Date everything should be un-ambiguisly expressable in UTC.\n\nlogic for parsing date strings that aren't in the canonical date format should be a QParser responsibility at query time, or an UpdateProcessor responsibility at index time.  Logic for formatting dates in non-canonical format should be a ResponseWriter responsibility.  This new request property we're talking about for defining the \"users TZ\" can certainly be used in all of these places to pick/override defaults, but that type of logic really doesn't belong in DateField. "
        },
        {
            "author": "David Schlotfeldt",
            "id": "comment-13078538",
            "date": "2011-08-03T00:46:17+0000",
            "content": "Being able to specify dates in timezones other then GMT+0 isn't a problem. It would just be nice but we can gnore that.\n\nThe time zone the DateMathParser is configured with is the issue (which it sounds like you understand.) My solution that changes the timezone DateMathParser is constructed with in SimpleFacet to parse start, end and gap isn't ideal. I went this route because I don't want to run a custom built Solr \u2013 my solution allowed me to fix the \"bug\" by simply replacing the \"facet\" SearchComponent. Affecting all DateMathParsrs created for length of the request is what is really needed (which is what you said). I like your approach.\n\nIt sounds like we are on the same page.\n\nSo, can we get this added? \n\nWithout time zone affecting DateMathParser the date faceting is useless (at least for 100% the situations I would use it for)\n\nBy the way, I'm gald to see how many responses there have been. I'm happy to see how active this project is.  "
        },
        {
            "author": "David Smiley",
            "id": "comment-13078578",
            "date": "2011-08-03T04:31:43+0000",
            "content": "Hoss, thanks for elaborating on the distinction between the date literal and the DateMath timezone. I was conflating these issues in my mind \u2013 silly me. "
        },
        {
            "author": "Shotaro Kamio",
            "id": "comment-13165058",
            "date": "2011-12-08T07:28:04+0000",
            "content": "David, we also faced the date facet gap (rounding) issue. If you can post your patch here, it's very helpful. "
        },
        {
            "author": "Shotaro Kamio",
            "id": "comment-13183177",
            "date": "2012-01-10T10:16:30+0000",
            "content": "Thanks for David Schlotfeldt's kindness, I'll post his code here on behalf of him. It works with Solr 3.3.\nThough we need to change the code in order to fit well into solr code base, I post as it is for the first step.\n\nThe attached tgz contains two java sources which create a custom facet component.\nThe codes are based on SimpleFacets and FacetComponent classes of solr. The following line should be added to solrconfig.xml to use the custom component.\n\n<searchComponent name=\"facet\" class=\"com.plaudit.core.impl.solr.handler.component.PlauditFacetComponent\"/>\n\nAs an example request, date facet request with monthly gap in Tokyo time (GMT+9:00) can be like this:\n\nhttp://localhost:8983/solr/select?indent=on&version=2.2&q=*%3A*&fq=&start=0&rows=10&fl=*%2Cscore&qt=&wt=&explanOther=&hl.fl=&\nfacet=true&facet.date=manufacturedate_dt&\nfacet.date.start=2005-01-31T15:00:00Z&\nfacet.date.end=2006-05-31T15:00:00Z&\nfacet.date.gap=%2B1MONTH/DAY&\nfacet.date.tz=Asia/Tokyo "
        },
        {
            "author": "Shotaro Kamio",
            "id": "comment-13183178",
            "date": "2012-01-10T10:18:20+0000",
            "content": "Custom facet component code is attached. "
        },
        {
            "author": "David Schlotfeldt",
            "id": "comment-13190087",
            "date": "2012-01-20T20:48:13+0000",
            "content": "Adds 'tz' parameter "
        },
        {
            "author": "David Schlotfeldt",
            "id": "comment-13190089",
            "date": "2012-01-20T20:49:03+0000",
            "content": "Thank you Shotaro for posting that code for me. The code Shotaro posted is a new version of faceting that makes date ranges take time zones into account which is essential for the reasons specified above.\n\nI also just made DateField and TrieDateField also take time zone into account. Why do we need this? For example let's say you have \"events\" in solr. They have a startDate set on them. If we want all events happening today we would want to be able to run the query \"+startDate[NOW/DAY TO NOW/DAY+1]\" This query will not work as expected since when \"/DAY\" rounds to the beginning of the day for GMT+0. To solve this yes I could run \"+startDate[NOW/DAY+6HOUR TO NOW/DAY+1+6HOUR]\" since i am in central timezone. BUT we have daylight savings time so some parts of the year I need it to be +5HOUR instead of +6HOUR. The lack of timezone support makes many date related queries that should be easy hard.\n\nThe comment above is a patch against https://svn.apache.org/repos/asf/lucene/dev/tags/lucene_solr_3_3 (from 8/9/2011 which is what i am running off of) that adds a \"tz\" parameter that causes the DateMathParser  DateField and TrieDateField uses to be configured with the specified timezone.\n\n(Though not posted here I also modified the component Shotaro shared with you to use \"tz\" if \"facet.date.tz\" isn't specified.) "
        },
        {
            "author": "David Schlotfeldt",
            "id": "comment-13196274",
            "date": "2012-01-30T18:26:20+0000",
            "content": "Issue with patch. Fixed attached. (Change on line 197 of the patch file) "
        },
        {
            "author": "Nguyen Kien Trung",
            "id": "comment-13227796",
            "date": "2012-03-12T19:16:53+0000",
            "content": "hi David, I'm one of 100s people having this issue. I applied your patch on 3.3, and modified the SimpleFacetsTest to cover a simple timezone test scenario. However, the tests for DateField and TrieDateField fail. Is there an additional changes need to be made on SimpleFacets?\n\nSimpleFacetsTest#indexDateFacets\n    add_doc(i, \"2012\", f, \"2007-07-30T07:07:07.070Z\");\n    add_doc(i, \"2015\", f, \"2007-07-30T23:07:07.070Z\"); // one more record\n\n\n\nSimpleFacetsTest#helpTestDateFacets\n    ...\n    final String jul4 = rangeMode ? \"[.='1'  ]\" : \"[.='2'  ]\";\n    \n    assertQ(\"check counts for day of facet by day using UTC timezone\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,p, f\n                ,p+\".start\", \"2007-07-30T00:00:00.000Z\"\n                ,p+\".end\",   \"2007-07-31T00:00:00.000Z\"\n                ,p+\".gap\",   \"+1DAY\"\n                ,\"tz\", \"UTC\"\n                )\n            ,\"*[count(\"+pre+\"/int)=\"+(rangeMode ? 1 : 1)+\"]\"\n            ,pre+\"/int[@name='2007-07-30T00:00:00Z'][.='2']\"\n            );\n    \n    assertQ(\"check counts for day of facet by day using Asia/Singapore (UTC+8) timezone\",\n            req( \"q\", \"*:*\"\n                ,\"rows\", \"0\"\n                ,\"facet\", \"true\"\n                ,p, f\n                ,p+\".start\", \"2007-07-30T00:00:00.000Z\"\n                ,p+\".end\",   \"2007-07-31T00:00:00.000Z\"\n                ,p+\".gap\",   \"+1DAY\"\n                ,\"tz\", \"Asia/Singapore\"\n                )\n            ,\"*[count(\"+pre+\"/int)=\"+(rangeMode ? 1 : 1)+\"]\"\n            ,pre+\"/int[@name='2007-07-30T00:00:00Z'][.='1']\"\n            );    // fail here, still returns 2 instead of 1, already set tests.timezone parameter to UTC to make sure data indexed in UTC\n    ...\n\n "
        },
        {
            "author": "David Schlotfeldt",
            "id": "comment-13232329",
            "date": "2012-03-18T18:54:25+0000",
            "content": "Nguyen - Sorry for the slow response. I've been on vacation where I had no Internet. My brain is still on vacation so I might be wrong, but I believe the problem is your aren't rounding the start and end.\n\nI believe this will leave the time part of the ranges as \"00:00:00.00Z\" (GMT). The timezone specified by 'tz' simply affects math done with dates (this includes when the gap is incremented).\nstart = 2007-07-30T00:00:00.000Z\nend = 2007-07-31T00:00:00.000Z\ngap = +1DAY\ntz = Asia/Singapore\n\nOne way to get what you want, which is the way people have been saying to do it, is to adjust the start and end manually. (I believe Singapore is GMT+8)\nstart = 2007-07-30T00:08:00.000Z\nend = 2007-07-31T00:08:00.000Z\ngap = +1DAY\ntz = Asia/Singapore\n\nThe issue with this approach is your \"manual\" adjusting gets tricking when talking about timezones that have day light savings time.  This is one place the patch makes things SOOOO much easier.\n\nSo you want to change your test to simply add '/DAY' to the end of each which will round the times to the beginning of the day. Since they rounding takes tz into account it will come out to 8:00.\nstart = 2007-07-30T00:00:00.000Z/DAY\nend = 2007-07-31T00:00:00.000Z/DAY\ngap = +1DAY\ntz = Asia/Singapore\n\nLet me know if that helps. (Again, brain not in programming mode yet so I may have completely misunderstood the issue.) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13251143",
            "date": "2012-04-10T22:48:03+0000",
            "content": "David: I like the theory of your patch, but the implementation choices you made seem a little heavy handed.  In particular I don't understand the need for your ExecuteWithThreadDateMathParser \u2013 as i mentioned, the DateMathParser class already uses SolrRequestInfo to define the default \"NOW\", we can use similar logic to define a default TZ w/o introducing as much complexity.\n\nI whipped up a quick patch that takes this approach \u2013 please take a look and lemme know what you think.  I did some quick manual testing and everything seems to be working, but obviously we need some good unit tests before we can commit (not sure when i'll have a chance to work on this so feel free to jump in if you want)\n\nThe timezone specified by 'tz' simply affects math done with dates \n\nRight \u2013 this is really the only sane way for this to work \u2013 if the client specifies an absolute time for start/end when faceting, we have to use that absolute time, we can't assume they mean for that to be \"rounded\" in some way relative the client's timezone \u2013 rounded to what precision? Day? Month? Year?).\n\nAnother digression...\n\nOne way to get what you want, which is the way people have been saying to do it, is to adjust the start and end manually. ... The issue with this approach is your \"manual\" adjusting gets tricking when talking about timezones that have day light savings time. \n\nYou should never \"manually adjust\" times before sending them to solr \u2013 If you have an absolute abstract moment in time, then you should format that abstract moment of time as string using then canonical solr date format (which requires the use of UTC in the format).  If you are starting with a string representation of some absolute abstract moment of time that has been formated using some other arbitrary format and/or timezone, you should parse it into an abstract moment in time (using a date parsing library that knows about the rules of your timezone \u2013 any decent one should know about all the timezone data), and then format that abstract moment of time as string using the canonical solr date format.\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13251146",
            "date": "2012-04-10T22:51:45+0000",
            "content": "editing summary & description to clarify this isn't just about faceting, but date math in general. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13253959",
            "date": "2012-04-14T02:59:25+0000",
            "content": "updated patch with tests.\n\nstill a few TODOs and nocommits related to validating the TZ param: TimeZone.getTimeZone happily accepts gibberish and returns GMT instead \u2013 which would be really confusing if Solr is running on a server with an older tzdata file and the client tried to specify some relatively new timezone, silently getting GMT instead.\n\nThere is a TimeZone.getAvailableIDs method that we could use to do a quick check, but that would only cover named TimeZones (ie: \"America/Los_Angeles\") so we have to explicitly validate if it's a legal \"CustomID\" (ie: \"GMT+/-\\d+) ... need another 30 minutes or so at some point to wrap that logic up into a static utility that can be used by both SolrRequestInfo and the test classes "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13260245",
            "date": "2012-04-24T05:50:27+0000",
            "content": "Updated patch, adds TimeZoneUtils (with tests) to do what TimeZone.getTimeZone should have done in the first place.\n\nI think this is ready to go.\n\nany feedback from anyone on the overall approach? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13260687",
            "date": "2012-04-24T16:35:52+0000",
            "content": "Committed revision 1329837. "
        },
        {
            "author": "David Schlotfeldt",
            "id": "comment-13264613",
            "date": "2012-04-29T21:38:42+0000",
            "content": "Sorry I'm not familiar with Solr's SVN layout. What SVN location do I look at? The trunk? A branch?\n\nWhat files were changed? Are all the changes you made in revision 1329837 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13265430",
            "date": "2012-04-30T22:03:46+0000",
            "content": "David: r1329837 was the primary commit yes, but there were some subsequent commits to fix the tests.\n\nyou can see all commits related to this issue (and all files modified by those ccommits) by clicking the \"All\" sub-tab under \"Activity\" (above the list of comments)\n\nhttps://wiki.apache.org/solr/HowToContribute#JIRA_tips_.28our_issue.2BAC8-bug_tracker.29 "
        }
    ]
}