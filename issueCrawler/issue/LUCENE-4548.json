{
    "id": "LUCENE-4548",
    "title": "BooleanFilter should optionally pass down further restricted acceptDocs in the MUST case (and acceptDocs in general)",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "Spin-off from dev@lao:\n\n\nI am about to write a Filter that only operates on a set of documents that have already passed other filter(s).  It's rather expensive, since it has to use DocValues to examine a value and then determine if its a match.  So it scales O where n is the number of documents it must see.  The 2nd arg of getDocIdSet is Bits acceptDocs.  Unfortunately Bits doesn't have an int iterator but I can deal with that seeing if it extends DocIdSet.\n\nI'm looking at BooleanFilter which I want to use and I notice that it passes null to filter.getDocIdSet for acceptDocs, and it justifies this with the following comment:\n// we dont pass acceptDocs, we will filter at the end using an additional filter\n\nthe idea of passing the already build bits for the MUST is a good idea and can be implemented easily.\n\nThe reason why the acceptDocs were not passed down is the new way of filter works in Lucene 4.0 and to optimize caching. Because accept docs are the only thing that changes when deletions are applied and filters are required to handle them separately:  whenever something is able to cache (e.g. CachingWrapperFilter), the acceptDocs are not cached, so the underlying filters get a null acceptDocs to produce the full bitset and the filtering is done when CachingWrapperFilter gets the \u201cuptodate\u201d acceptDocs. But for this case this does not matter if the first filter clause does not get acceptdocs, but later MUST clauses of course can get them (they are not deletion-specific)!\n\nCan you open issue to optimize the MUST case (possibly MUST_NOT, too)?\n\nAnother thing that could help here: You can stop using BooleanFilter if you can apply the filters sequentially (only MUST clauses) by wrapping with multiple FilteredQuery: new FilteredQuery(new FilteredQuery(originalQuery, clause1), clause2). If the DocIdSets enable bits() and the FilteredQuery autodetection decides to use random access filters, the acceptdocs are also passed down from the outside to the inner, removing the documents filtered out.\n\nMaybe BooleanFilter should have 2 modes (Boolean ctor argument): Passing down the acceptDocs to every filter (for the case where Filter calculation is expensive and accept docs help to limit the calculations) or not passing down (if the filter is cheap and the multiple acceptDocs bit checks for every single filter is more expensive \u2013 which is then more effective, e.g. when the Filter is only a cached bitset). The first mode would also optimize the MUST/MUST_NOT case to pass down the further restricted acceptDocs on later filters (just like FilteredQuery does).",
    "attachments": {
        "LUCENE-4548.patch": "https://issues.apache.org/jira/secure/attachment/12553017/LUCENE-4548.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-11-08T10:23:49+0000",
            "content": "I think this dirties up the api: think about cases like if the filter isn't random access.\n\nI think it would be best if this stuff stayed confined to FilteredQuery ",
            "author": "Robert Muir",
            "id": "comment-13493090"
        },
        {
            "date": "2012-11-08T10:48:20+0000",
            "content": "I am talking about the contrib BooleanFilter (which is in my opinion a horrible class), FilteredQuery is not affected at all. ",
            "author": "Uwe Schindler",
            "id": "comment-13493109"
        },
        {
            "date": "2012-11-08T10:51:11+0000",
            "content": "So am I. please re-read my comment.\n\nI think its bad enough this makes FilteredQuery's API complex: but its over-the-top\nfor this stuff to start ALSO making the APIs of concrete filters complex: \nit should stay confined to FilteredQuery. ",
            "author": "Robert Muir",
            "id": "comment-13493112"
        },
        {
            "date": "2012-11-08T11:48:37+0000",
            "content": "I agree with you: In my opinion BooleanFilter with MUST clauses is somehow obsolete alltogether (at least for the MUST case), because you can easily chain FilteredQuery to combine multiple MUST filters. David Smiley can use this and the issue would be a no-op. In all cases he could additionally force FilteredQuery to use the random access mode (using the new 4.1 FilterModes), so acceptDocs are passed down in all cases.\n\nThe question is then (for this issue): Should we pass the acceptDocs down the BooleanFilter \"chain of clauses\" or apply them at the very end of BooleanFilter bitset creation (like we do currently)? ",
            "author": "Uwe Schindler",
            "id": "comment-13493130"
        },
        {
            "date": "2012-11-08T19:58:25+0000",
            "content": "My broad comments on this having looked at a variety of these classes, is that the whole situation is very confusing.  There are a bunch of classes here related to filtering that if you consider the sum total of them, it seems like a bit much to get a handle on: Filter, ChainedFilter, BooleanFilter, FilteredQuery, FilteredDocIdSet, BitsFilteredDocIdSet.  I'm probably missing some.  And then of course Filter != Query but sometimes they need to be adapted to each other.  I bet there are a dozen ways I could skin this cat .  That's a problem.\n\nLooking ahead at Lucene 5, can we think of a smaller set of classes for filters and chaining them (with AND, OR, ...), and annotating which are \"expensive\" and considering random access vs doc id iteration?  The title of this issue seems like it's a band-aid to the API complexity that probably makes it worse. ",
            "author": "David Smiley",
            "id": "comment-13493456"
        },
        {
            "date": "2012-11-11T10:55:11+0000",
            "content": "Here is a patch that demonstrates and for perf testing. The default is unchanged, if you use new BooleanFilter(true), you get an instance that passes the acceptDocs down to every filter clause, and - in the MUST case - also furter restricts the acceptDocs with the current bit set.\n\nIn any case, if you have only MUST clauses, don't use BooleanFilter, as it is much more expensive than chaing the filters with FilteredQuery. ",
            "author": "Uwe Schindler",
            "id": "comment-13494854"
        },
        {
            "date": "2012-11-11T11:04:42+0000",
            "content": "My broad comments on this having looked at a variety of these classes, is that the whole situation is very confusing. There are a bunch of classes here related to filtering that if you consider the sum total of them, it seems like a bit much to get a handle on: Filter, ChainedFilter, BooleanFilter, FilteredQuery, FilteredDocIdSet, BitsFilteredDocIdSet. I'm probably missing some. And then of course Filter != Query but sometimes they need to be adapted to each other. I bet there are a dozen ways I could skin this cat . That's a problem.\n\nYou are mixing user-faced classes and internal @lucene.internal classes!\n\nMy general preference would be to nuke Filters completely from Lucene and make everything a Query (this is how Solr handles the stuff, too). A filter is just a Query with a constant score. Those queries could optionally use a Bitset for matching...\n\nSome comments:\n\n\tBitsFilteredDocIdSet, FilteredDocIdSet: This are just helper classes to not repeat the same stuff everywhere in Lucene. User's are never facing them.\n\tFilteredQuery is the one and only approch to apply filters in recent Lucene versions! Since Lucene 4.0, IndexSearcher.search(Query, Filter) just wraps the Query and Filter with FilteredQuery, there is no more Filter logic in IndexSearcher anymore! IndexSearcher.search(Query, Filter) is just a convenience method and aliases to IndexSearcher.search(new FilteredQuery(Query, Filter))!\n\tChainedFilter should be deprecated, this class is so broken. It also still uses outdated OpenBitSet. At least we should move to sandbox. E.g., to chain and'ed filters just use \"new FilteredQuery(new FilteredQuery(query, filter1), filter2)\" or use BooleanFilter.\n\tBooleanFilter may be useful, but I don't really like it. Once we have Filters and Queries the same class, one could use BooleanQuery to achieve the same with the constant score queries. BooleanFilter is also inconsistent to BooleanQuery with pure negative clauses!\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13494855"
        },
        {
            "date": "2012-11-11T11:16:14+0000",
            "content": "...would be to nuke Filters completely from Lucene ...\n\nUser +1\n\nFilter is conceptually nothing more than no-scoring and a possibility to have an implementation that can be cached. \n\nFrom the user API point of whew, there is really no need to bother users with Filter abstraction. Both of these two are just attributes of the query (do you need to score this clause or would you like to have it cached).  ",
            "author": "Eks Dev",
            "id": "comment-13494858"
        },
        {
            "date": "2012-11-12T06:50:34+0000",
            "content": "Uwe: Thanks tremendously for helping me understand some of these things.\n\nI never looked at FilteredQuery before, but now that I have I like it a whole lot.  I like that I can compose them and pick the \"filter strategy\".  That pretty much addresses one of my concerns on how to compose them given different algorithm, and the solution looks very well designed.\n\nIt's especially interesting to me that Filter logic isn't in IndexSearcher anymore.  Not that I knew before, but what this basically tells me is that Lucene internally just deals with Queries, not Filters.  That's fantastic.  Based on your remarks, it seems there is a lot of cleanup potential.  There is a lot of stuff to confuse people, like me, and that was a big part of my concern.\n\nRE OpenBitSet \u2013 it's not deprecated nor marked as internal.  FastBitSet on the other hand is marked as internal. ",
            "author": "David Smiley",
            "id": "comment-13495118"
        },
        {
            "date": "2012-11-12T07:23:37+0000",
            "content": "RE OpenBitSet \u2013 it's not deprecated nor marked as internal. FastBitSet on the other hand is marked as internal.\n\nWe should fix this! The problem here is, that FixedBitSet is meant as replacement and performs better because of less checks. The problem with ChainedFilter is that it uses some features, not yet in FixedBitSet like XORing the bitsets. The use of OpenBitSet instead of FixedBitSet makes some optimizations inside FixedBitSet harder (e.g. FixedBitSet.or(DocIdSetIterator) checks if the DISI is from a FixedBitSet one and then then directly ors the bits instead of using the iterator (unless the iterator is not before the first document) - fortunately, both OBS and FBS have the same iterator implementation).\n\nHave you looked at my attached patch, it should fix your problems, but I don't want to commit it now - just for testing. Or do you use FilteredQuery now for what you intended to do? ",
            "author": "Uwe Schindler",
            "id": "comment-13495131"
        },
        {
            "date": "2012-11-12T15:49:42+0000",
            "content": "I'm going to use FilteredQuery with the strategy indicators \u2013 perfect.  I was using ChainedFilter but I'll back that out.  I won't need BooleanFilter since I've just got clauses to AND, and FilteredQuery accomplishes that. ",
            "author": "David Smiley",
            "id": "comment-13495353"
        },
        {
            "date": "2018-02-20T13:55:40+0000",
            "content": "This issue is not relevant anymore: live docs are now always applied on top of queries. ",
            "author": "Adrien Grand",
            "id": "comment-16370066"
        }
    ]
}