{
    "id": "LUCENE-3396",
    "title": "Make TokenStream Reuse Mandatory for Analyzers",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In LUCENE-2309 it became clear that we'd benefit a lot from Analyzer having to return reusable TokenStreams.  This is a big chunk of work, but its time to bite the bullet.\n\nI plan to attack this in the following way:\n\n\n\tCollapse the logic of ReusableAnalyzerBase into Analyzer\n\tAdd a ReuseStrategy abstraction to Analyzer which controls whether the TokenStreamComponents are reused globally (as they are today) or per-field.\n\tConvert all Analyzers over to using TokenStreamComponents.  I've already seen that some of the TokenStreams created in tests need some work to be reusable (even if they aren't reused).\n\tRemove Analyzer.reusableTokenStream and convert everything over to using .tokenStream (which will now be returning reusable TokenStreams).",
    "attachments": {
        "LUCENE-3396-rab.patch": "https://issues.apache.org/jira/secure/attachment/12491738/LUCENE-3396-rab.patch",
        "LUCENE-3396-forgotten.patch": "https://issues.apache.org/jira/secure/attachment/12493991/LUCENE-3396-forgotten.patch",
        "LUCENE-3396-remaining-merging.patch": "https://issues.apache.org/jira/secure/attachment/12496063/LUCENE-3396-remaining-merging.patch",
        "LUCENE-3396-remaining-analyzers.patch": "https://issues.apache.org/jira/secure/attachment/12494599/LUCENE-3396-remaining-analyzers.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-08-23T11:17:29+0000",
            "content": "can we create a separate sub-tasks to fix the tests (so we can backport at least a majority of the changes)? ",
            "author": "Robert Muir",
            "id": "comment-13089394"
        },
        {
            "date": "2011-08-23T11:24:16+0000",
            "content": "Do you mean correcting the TokenStreams in tests so they are reusable? ",
            "author": "Chris Male",
            "id": "comment-13089396"
        },
        {
            "date": "2011-08-23T12:16:53+0000",
            "content": "yeah: just thinking it could be a nice cleanup? Some of these are messy  ",
            "author": "Robert Muir",
            "id": "comment-13089414"
        },
        {
            "date": "2011-08-23T12:25:41+0000",
            "content": "Done. LUCENE-3397 ",
            "author": "Chris Male",
            "id": "comment-13089417"
        },
        {
            "date": "2011-08-26T05:42:22+0000",
            "content": "This is the uber patch which converts all but 8 Analyzers over to using ReusableAnalyzerBase.\n\nThis also introduces the ReuseStrategy concept to ReusableAnalyzerBase (will need some documentation before committing).  For simplicity, the ReuseStrategy maintains its own CloseableThreadLocal.\n\nThe remaining Analyzers can be converted when I push the ReuseAnalyzerBase logic into Analyzer.\n\nAfter some small tidy (and a review) I think we should commit this even though we're going to collapse ReusabeAnalyzerBase. ",
            "author": "Chris Male",
            "id": "comment-13091600"
        },
        {
            "date": "2011-08-26T05:59:05+0000",
            "content": "Improved patch which does some cleanup and documentation ReuseAnalyzerBase.ReuseStrategy.\n\nI'm seeing one test fail in TestPayloads, this class does some insanely non-reusable stuff with payloads.  I'll keep digging. ",
            "author": "Chris Male",
            "id": "comment-13091611"
        },
        {
            "date": "2011-08-26T06:10:39+0000",
            "content": "Grrr TestPayloads does some really non-reusable stuff.  The only two options I can see are either using a NoReuseStrategy implementation in the test, or instantiate the Analyzer again every time it does something crazy.\n\nI've chosen the latter since I don't want to start the NoReuseStrategy slippery slope.\n\nWe're in good shape now (minus this stupidity). ",
            "author": "Chris Male",
            "id": "comment-13091618"
        },
        {
            "date": "2011-08-26T15:11:27+0000",
            "content": "just a quick glance: the MockAnalyzer needs to reuse-per-field?\n\nThis way we test the case where payloads are enabled for one field but not for another. ",
            "author": "Robert Muir",
            "id": "comment-13091818"
        },
        {
            "date": "2011-08-26T15:30:04+0000",
            "content": "Absolutely, I missed that fieldname usage.\n\nUpdated patch.  Still all green. ",
            "author": "Chris Male",
            "id": "comment-13091829"
        },
        {
            "date": "2011-09-05T09:05:32+0000",
            "content": "this patch looks good to me! I like the reuse strategy and how you factored out the thread local stuff. \nI think we should commit and let bake this in? ",
            "author": "Simon Willnauer",
            "id": "comment-13097069"
        },
        {
            "date": "2011-09-05T09:30:12+0000",
            "content": "Hi, the ReuseStrategies look fine. I am just confused about the Generics. Why not make the whole abstract ReuseStrategy T-typed? Then also ThreadLocal<T> is used and no casting anywhere. The subclasses for PerField and global then are typed to the correct class (Map<> or TSComponents). ",
            "author": "Uwe Schindler",
            "id": "comment-13097072"
        },
        {
            "date": "2011-09-05T09:43:02+0000",
            "content": "Hi Uwe,\n\nI originally had ReuseStrategy with a generic type but then decided it was overkill since it only benefits implementations, not users of ReuseStrategy.  If we want the extra type safety, I'll happily make the change. ",
            "author": "Chris Male",
            "id": "comment-13097076"
        },
        {
            "date": "2011-09-05T09:53:17+0000",
            "content": "I agree its somehow overkill. But if not on class level I would even remove the T parameter from ther getter method, because it does not really fit, it is only used there, not even on the setter. There is no type enforcement anywhere, so the extra T is just to remove the casting on the caller of the protected method, but adding a SuppressWarnings on the implementor's side. So either make all T or use Object everywhere. ",
            "author": "Uwe Schindler",
            "id": "comment-13097083"
        },
        {
            "date": "2011-09-05T10:41:55+0000",
            "content": "Patch updated to trunk.\n\nGeneric <T> is removed from ReuseStrategy. ",
            "author": "Chris Male",
            "id": "comment-13097119"
        },
        {
            "date": "2011-09-06T14:41:02+0000",
            "content": "I'm going to commit this soon and then work on the remaining Analyzers. ",
            "author": "Chris Male",
            "id": "comment-13098045"
        },
        {
            "date": "2011-09-06T14:56:13+0000",
            "content": "patch looks great: one question, should we keep the 'reset can return false and we do not reuse' ?\n\nthis seems like it might be obselete, though it would introduce an API break, I think maybe we should change it to void? ",
            "author": "Robert Muir",
            "id": "comment-13098057"
        },
        {
            "date": "2011-09-07T04:02:09+0000",
            "content": "Hmmm, I agree that we should change it to void.  If the source cannot be reset, it should throw an Exception.  We need to be able to rely on the fact that we are using reusable components.\n\nI'll update the patch. ",
            "author": "Chris Male",
            "id": "comment-13098580"
        },
        {
            "date": "2011-09-07T04:10:56+0000",
            "content": "Patch updated to reset now returns void.  I'll make sure to note this compat break in the CHANGES.txt. ",
            "author": "Chris Male",
            "id": "comment-13098582"
        },
        {
            "date": "2011-09-10T06:27:06+0000",
            "content": "Patch updated to trunk.\n\nWe're good to go now. ",
            "author": "Chris Male",
            "id": "comment-13101994"
        },
        {
            "date": "2011-09-12T05:51:00+0000",
            "content": "Committed revision 1169607.\n\nNow attacking the remaining Analyzers. ",
            "author": "Chris Male",
            "id": "comment-13102443"
        },
        {
            "date": "2011-09-12T06:36:22+0000",
            "content": "During the merging of changes I lost some conversions of some test Analyzers.\n\nPatch addresses them (including the unholy TestPayloads). ",
            "author": "Chris Male",
            "id": "comment-13102459"
        },
        {
            "date": "2011-09-12T09:01:07+0000",
            "content": "Committed revision 1169654. ",
            "author": "Chris Male",
            "id": "comment-13102508"
        },
        {
            "date": "2011-09-15T10:18:27+0000",
            "content": "Patch which converts the last of the Analyzers over to using ReusableAnalyzerBase.  At this stage, RAB is now the only extension of Analyzer.\n\nPatch includes a few unique changes:\n\n\n\tAdds AnalyzerWrapper which is used by Analyzers which wrap other Analyzers.  This is necessary to allow access the TokenStreamComponents of the wrapped Analyzers, without making TSC public.\n\n\n\n\n\tIndexSchemaRuntimeFieldTest is made out of IndexSchemaTest due to testRuntimeFieldCreation doing some thread-unsafe changes to the Analyzers stored in  IndexSchema.  When run in IndexSchemaTest, depending on the execution order, the test fails.  When run by itself, there is no problems.  I think this is okay because the actual code being tested is documented as being thread-unsafe and the test also notes it does some tacky things.\n\n\n\nI'm not going to look to commit this just yet, as I want to collapse Analyzer and RAB into a single class. ",
            "author": "Chris Male",
            "id": "comment-13105254"
        },
        {
            "date": "2011-09-22T03:47:22+0000",
            "content": "Patch which finalizes the remaining Analyzer changes and merges ReusableAnalyzerBase and Analyzer together.  \n\nCommand for the patch:\n\n\n# Keep old Analyzer.java temporarily for comparison\nsvn rename lucene/src/java/org/apache/lucene/analysis/Analyzer.java lucene/src/java/org/apache/lucene/analysis/Analyzer.java.old\nsvn rename lucene/src/java/org/apache/lucene/analysis/ReusableAnalyzerBase.java lucene/src/java/org/apache/lucene/analysis/Analyzer.java\n\n\n\nI have updated the javadocs to reflect the merging and have removed the assertFinal() assertion since tokenStream() and reusableTokenStream() are always final now.\n\nAll tests pass and javadocs build.  I am looking to commit this soon (with a MIGRATE.txt entry). ",
            "author": "Chris Male",
            "id": "comment-13112302"
        },
        {
            "date": "2011-09-23T03:07:34+0000",
            "content": "Plan to commit this tomorrow. ",
            "author": "Chris Male",
            "id": "comment-13113124"
        },
        {
            "date": "2011-09-25T04:30:51+0000",
            "content": "I think this one can be marked resolved?\n\nby the way, I reviewed the patches here: thanks for putting in all this effort!\nthis fixes my biggest pet peeve about lucene....awesome. ",
            "author": "Robert Muir",
            "id": "comment-13114131"
        },
        {
            "date": "2011-09-25T04:36:39+0000",
            "content": "I haven't actually committed yet.  I was hoping you'd have a chance to review before I did.  I'll now commit. ",
            "author": "Chris Male",
            "id": "comment-13114136"
        },
        {
            "date": "2011-09-25T05:06:32+0000",
            "content": "+1! ",
            "author": "Robert Muir",
            "id": "comment-13114149"
        },
        {
            "date": "2011-09-25T05:12:33+0000",
            "content": "Committed revision 1175297.\n\nI don't want to mark this as resolved just yet.  I want to spin off another sub-task to move all consumers over to reusableTokenStream (and then rename it back to tokenStream). ",
            "author": "Chris Male",
            "id": "comment-13114151"
        },
        {
            "date": "2011-11-14T10:30:55+0000",
            "content": "chris, this seems to be done no? can you close it? ",
            "author": "Simon Willnauer",
            "id": "comment-13149541"
        },
        {
            "date": "2011-11-14T11:04:57+0000",
            "content": "TokenStream reuse is now mandatory ",
            "author": "Chris Male",
            "id": "comment-13149569"
        }
    ]
}