{
    "id": "LUCENE-6427",
    "title": "BitSet fixes - assert on presence of 'ghost bits' and others",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "core/other"
        ],
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Fixes after reviewing org.apache.lucene.util.FixedBitSet, LongBitSet and corresponding tests:\n\n\tSome methods rely on the fact that no bits are set after numBits (what I call 'ghost' bits here).\n\t\n\t\tcardinality, nextSetBit, intersects and others may yield wrong results\n\t\tIf ghost bits are present, they may become visible after ensureCapacity is called.\n\t\tThe tests deliberately create bitsets with ghost bits, but then do not detect these failures\n\t\n\t\n\tFixedBitSet.cardinality scans the complete backing array, even if only numWords are in use",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14496224",
            "author": "ASF GitHub Bot",
            "date": "2015-04-15T14:17:30+0000",
            "content": "GitHub user LucVL opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/142\n\n    Lucene 6427 bit set fixes\n\n    Pull request for LUCENE-6427\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/LucVL/lucene-solr lucene-6427-BitSetFixes\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/142.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #142\n\n\ncommit 957e52debe29ef25cbcd5d260a794d3965e7b717\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-13T17:22:12Z\n\n    TestFixedBitSet: Added testBits2Words with various values, concentrating on boundary cases (like for TestLongBitSet)\n\ncommit 0ad2f508dfefb74c79ed2bf8ea8a8882503bcb1b\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-14T09:52:58Z\n\n    TestLongBitSet.testBits2Words: Show Integer.MAX_VALUE boundary more clearly\n\ncommit 8e569310862bd9512bb5320ff6a2c7e19eeb348b\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-14T10:07:39Z\n\n    Aligned TestFixedBitSet.java and TestLongBitSet.java source files for easier comparison, no real changes.\n    Only real change is in TestLongBitSet.testSmall to have the same range as in TestFixedBitSet.testSmall\n\ncommit 4ac986ca0f505984cdae88a248c057f94d0fb9cd\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-14T14:39:24Z\n\n    Removed obsolete mod 64 from FixedBitSet.flip(int)\n    Added LongBitSet.flip(long)\n    Updated TestLongBitSet accordingly\n\ncommit e67844ddf9a20394ed57209c7d0c333ccd6af9a4\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-14T07:01:41Z\n\n    TestFixedBitSet.prove that tests create illegal bitsets\n\ncommit 06af400f51bf9ccd603d9edc976ae552478f5773\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-14T14:47:30Z\n\n    Add same proofs to TestLongBitSet\n\ncommit e606cd6e73eac7bb7111f44402d87c852141d200\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-10T16:26:53Z\n\n    Added verifyGhostBitsClear method that is called in an assert in ensureCapacity to avoid errors in later calls.\n    Marked methods that are prone to such errors in comments\n    Aligned source code of FixedBitSet and LongBitSet for easier side-by-side comparison\n    Test now fail on this verifyGhostBitsClear assert\n\ncommit 1ed5f16bb892bc19d588d995e759f123d9d267c7\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-15T08:12:32Z\n\n    TestFixedBitSet: added more tests to demonstrate spurious failures when ghost bits are present\n    Temporarily disabled assert in FixedBitSet constructor\n\ncommit 7ca7c6566fbcc9c841339fd1ec2209ceead6aa9f\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-14T15:39:00Z\n\n    makeFixedBitSet and makeLongBitSet should not create ghost bits\n    Tests pass\n\ncommit d696ebc11c7db43fac0d2a93db10fc50d69e32e9\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-15T10:04:31Z\n\n    Merge branch 'trunk' into BitSetFixes-GhostBits\n\ncommit e7bab7c6890928227fe18e783ec07489ba272623\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-15T13:36:58Z\n\n    Performance: use numWords instead of bits.length in e.g. cardinality()\n    Consistency: Use numBits instead of length()\n\ncommit 8d0753cb1ba07e67d518d0037f27fba0bfc8dfb4\nAuthor: Luc Vanlerberghe <luc.vanlerberghe@bvdinfo.com>\nDate:   2015-04-15T13:50:38Z\n\n    Provide a 'slow' isEmpty() implementation that is still faster than any external one could be (e.g.: nextSetBit(0) != -1 for LongBitSet)\n    Called it checkIfEmpty() to emphasize the cost of calling it.\n\n "
        },
        {
            "id": "comment-14496276",
            "author": "Luc Vanlerberghe",
            "date": "2015-04-15T14:48:32+0000",
            "content": "I still have some issues with the ensureCapacity methods:\nThe doc comment states:\n\n   * If the given {@link FixedBitSet} is large enough to hold {@code numBits},\n   * returns the given bits, otherwise returns a new {@link FixedBitSet} which\n   * can hold the requested number of bits.\n\n\nwhile actually it checks if it is large enough to hold (numBits+1) bits (I already changed the doc comment in one of the commits of my pull request to reflect this).\nIn lucene/solr the typical usage is:\n\n\t\n    docsWithField = FixedBitSet.ensureCapacity(docsWithField, docID);\n    docsWithField.set(docID);\n\n\nbut also:\n\t\n      newbits = FixedBitSet.ensureCapacity(newbits, otherDocSet.bits.length());\n      newbits.or(otherDocSet.bits);\n\n\n\n\n\n(1) only works because the doc comment doesn't correspond to the implementation.  Correct usage would be ... ensureCapacity(docsWithField, docID + 1)\n(2) will unexpectly grow newBits even when it is exactly the same size.\n\nThe implementation is written as if the numBits argument is a \"number of bits\" value, but then proceeds to allocate at least an extra long in the backing array...\n\nThere are several options here:\n\n\tOnly update the doc comment (like I did) so unsuspecting users don't get an unexpected performance hit when manipulating equal sized bitsets, but then the name stays awkward.\n\tFix the implementation and update all locations in lucene/solr where it is used (but this may/will affect custom modules without warning)\n\tRename the methods and \"numBits\" argument (ensureIndexAvailable anyone?).  This will break the compilation of custom modules, but it's @lucene.internal anyway, not a public api.\n\n "
        },
        {
            "id": "comment-14496287",
            "author": "Adrien Grand",
            "date": "2015-04-15T15:00:37+0000",
            "content": "Thanks Luc. I have some questions/comments:\n\n\tLots of javadocs mention \"Depends on the ghost bits being clear!\" (eg. cardinality()) but since your PR checks that there are no ghost bits when creating or growing the bit set, this is not something that consumers of these APIs should worry about?\n\tDo we actually need the new \"checkIfEmpty\" method? I suspect checking the return values of nextSetBit(0) value would be almost as fast?\n\tIn unit tests, you should use the random() object instead of creating new Random objects so that tests remain reproducible (when there is a test failure, we know the seed that triggered this failure and running the tests with the same seed reproduces the same sequence of random numbers)\n\n\n\nAt first I did not understand your changes on FixedBitSet.ensureCapacity but looking at the impl it has weird semantics indeed. Thanks for fixing the docs for now but in the longer term I think we should fix it to work more like ArrayUtil.grow.\n\nAlso thank you for adding javadocs to undocumented methods! "
        },
        {
            "id": "comment-14496291",
            "author": "Adrien Grand",
            "date": "2015-04-15T15:02:27+0000",
            "content": "At first I did not understand your changes on FixedBitSet.ensureCapacity but looking at the impl it has weird semantics indeed.\n\nOops I commented before seeing your last comment. I think we should do option 1 for now (ie. in this patch) but then open another issue and implement option 2 if that works for you. "
        },
        {
            "id": "comment-14496329",
            "author": "Luc Vanlerberghe",
            "date": "2015-04-15T15:18:19+0000",
            "content": "\n\tI wasn't sure whether to include the comment or not, but decided to do so anyway since the check is in an assert (and hence will only be triggered when asserts are enabled).  I used an assert to avoid affecting performance on proper use. I think the user should be warned not to recycle any 'old' FixedBitSet that happens not to have any bits set in the numbits range without clearing it properly.  Perhaps the doc comment should only be left on the constructor and moved to a 'normal' comment for other methods.\n\tI needed the checkEmpty method  I do use nextSetBit(0) for now, but that will throw an exception if the BitSet has 0 size...\n\tI did use the random() object, I just stored it in a local variable because I needed it several times in a row (should be ok from reading the doc comment on LuceneTestCase.random())\n\n\n\nOn ensureCapacity: ok for opening an new issue after this one is closed... "
        },
        {
            "id": "comment-14496364",
            "author": "Adrien Grand",
            "date": "2015-04-15T15:29:18+0000",
            "content": "Perhaps the doc comment should only be left on the constructor and moved to a 'normal' comment for other methods.\n\n+1\n\nI needed the checkEmpty method I do use nextSetBit(0) for now, but that will throw an exception if the BitSet has 0 size...\n\nOK I see. Then can you rename to isEmpty() for consistency with java collections?\n\nI did use the random() object\n\nSorry I somehow misread your code! "
        },
        {
            "id": "comment-14496395",
            "author": "Luc Vanlerberghe",
            "date": "2015-04-15T15:39:46+0000",
            "content": "OK I see. Then can you rename to isEmpty() for consistency with java collections?\nI would, but there's this comment in the code:\n\n  // NOTE: no .isEmpty() here because that's trappy (ie,\n  // typically isEmpty is low cost, but this one wouldn't\n  // be)\n\n\n\nI'm open to suggestions for the name though (Perhaps I should revert to scanIsEmpty like I had before?) "
        },
        {
            "id": "comment-14496450",
            "author": "Adrien Grand",
            "date": "2015-04-15T16:12:31+0000",
            "content": "Hmm I agree it is a valid concern... Then maybe we should not add this method and let callers do boolean empty = bitSet.length() == 0 || bitSet.nextSetBit(0) == DocIdSetIterator.NO_MORE_DOCS; themselves? "
        },
        {
            "id": "comment-14497795",
            "author": "Luc Vanlerberghe",
            "date": "2015-04-16T09:02:12+0000",
            "content": "\n\tI moved the \"Depends on the ghost bits being clear!\" line from the doc comments to a regular comment, except for the constructor (where the fact is verified if assertions are enabled)\n\tI renamed checkIfEmpty to scanIsEmpty and updated comments.\n\n\n\nI don't see the problem with having a scanIsEmpty method available for those willing to look for it.  It probably will make a performance difference for small bitsets because it avoids the overhead of two method calls and the numberOfTrailingZeros call in nextSetBit on the first non-zero long.\n\nLUCENE-5856 shows that even removing a useless & 0x3f from *BitSet.get and company can have a noticeable effect (albeit probably in tight inner loops)\nBy the way, I did remove a useless & 0x3f from FixedBitSet.flip in this patch as well "
        },
        {
            "id": "comment-14498133",
            "author": "Adrien Grand",
            "date": "2015-04-16T15:10:18+0000",
            "content": "I don't see the problem with having a scanIsEmpty method available for those willing to look for it.\n\nBut it doesn't bring anything either since this method is not used anywhere for now?\n\nI moved the \"Depends on the ghost bits being clear!\" line from the doc comments to a regular comment, except for the constructor (where the fact is verified if assertions are enabled)\n\nThanks. Can you just remove the duplicated javadocs from oal.util.BitSet, the javadoc tool should already inherit javadocs from overridden methods?\n\nI did remove a useless & 0x3f from FixedBitSet.flip in this patch as well\n\nGood catch! "
        },
        {
            "id": "comment-14499509",
            "author": "Luc Vanlerberghe",
            "date": "2015-04-17T09:07:14+0000",
            "content": "I updated my pull request:\n\n\tDeleted obsolete doc comments on @Override methods\n\tTestFixedBitSet: Made an accidentally public method private again\n\torg.apache.solr.search.TestFiltering: Corrected possible generation of 'ghost' bits for FixedBitSet\n\n\n\nAbout scanIsEmpty():\nBut it doesn't bring anything either since this method is not used anywhere for now?\nI did find a case where it would be useful: In oals.SloppyPhraseScorer there's this code:\n\n    // collisions resolved, now re-queue\n    // empty (partially) the queue until seeing all pps advanced for resolving collisions\n    int n = 0;\n    // TODO would be good if we can avoid calling cardinality() in each iteration!\n    int numBits = bits.length(); // larges bit we set\n    while (bits.cardinality() > 0) {\n      PhrasePositions pp2 = pq.pop();\n      rptStack[n++] = pp2;\n      if (pp2.rptGroup >= 0 \n          && pp2.rptInd < numBits  // this bit may not have been set\n          && bits.get(pp2.rptInd)) {\n        bits.clear(pp2.rptInd);\n      }\n    }\n\n\nand some places that assert that .cardinality() == 0. "
        },
        {
            "id": "comment-14499958",
            "author": "Adrien Grand",
            "date": "2015-04-17T14:58:38+0000",
            "content": "To be honest this doesn't look like a valid use-case of scanIfEmpty to me. As the code comment suggests, we should rewrite this code to not check that the bitset is empty in a loop. In practice we are trying to move away from these linear-time operations of FixedBitSet (nextDoc(), cardinality(), ...) as much as we can. For instance when we use this class for query execution (for multi-term queries mainly), we strive to only use a FixedBitSet if we know that the set of documents that we are going to store is dense enough for FixedBitSet to not be slower than a sparser implementation.\n\nOther than the new unused methods (scanIfEmpty and LongBitset.flip) the PR looks good to me now. "
        },
        {
            "id": "comment-14511100",
            "author": "Luc Vanlerberghe",
            "date": "2015-04-24T13:58:13+0000",
            "content": "I didn't check if these where valid use cases or not, just that they happen to be in the code, probably for lack of an easy alternative to call.\n\nWhile developing custom modules for solr, I took advantage of the existence of FixedBitSet (it was called OpenBitSet back then), but found the lack of an isEmpty() method annoying.  There must be others like me...\n\nI only added LongBitSet.flip(long) to be able to make it easier to compare the TestFixedBitSet and TestLongBitSet files side by side (The main reason why I removed the import java.util.BitSet from TestLongBitSet as well)\nThere are plenty of methods in LongBitSet.java that aren't used yet (even ensureCapacity that was corrected in LUCENE-6409)\nAlthough I agree that oal.util shouldn't become a bag of classes and methods that might be useful one day, aiming to keep LongBitSet and FixedBitSet more or less in sync (even though by definition they'll never share the same interface) shouldn't be too hard. "
        },
        {
            "id": "comment-14516947",
            "author": "Adrien Grand",
            "date": "2015-04-28T12:25:04+0000",
            "content": "Although I agree that oal.util shouldn't become a bag of classes and methods that might be useful one day, aiming to keep LongBitSet and FixedBitSet more or less in sync (even though by definition they'll never share the same interface) shouldn't be too hard.\n\n+1 on that\n\nI only added LongBitSet.flip(long) to be able to make it easier to compare the TestFixedBitSet and TestLongBitSet files side by side (The main reason why I removed the import java.util.BitSet from TestLongBitSet as well)\n\nActually I just noticed that FixedBitSet.flip is unused: it is only used by xor which is not used.\n\nI'm not happy that I'm delaying your good fixes with concerns around unused methods so if it works for you, I'll merge your pull-request as-is and will have a look at removing unused stuff later. "
        },
        {
            "id": "comment-14517993",
            "author": "ASF subversion and git services",
            "date": "2015-04-28T20:37:16+0000",
            "content": "Commit 1676617 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1676617 ]\n\nLUCENE-6427: Added assertion about the presence of ghost bits in (Fixed|Long)BitSet. "
        },
        {
            "id": "comment-14518009",
            "author": "ASF subversion and git services",
            "date": "2015-04-28T20:45:42+0000",
            "content": "Commit 1676624 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1676624 ]\n\nLUCENE-6427: Added assertion about the presence of ghost bits in (Fixed|Long)BitSet. "
        },
        {
            "id": "comment-14518010",
            "author": "Adrien Grand",
            "date": "2015-04-28T20:45:49+0000",
            "content": "Committed. Thanks Luc! "
        },
        {
            "id": "comment-14518013",
            "author": "ASF GitHub Bot",
            "date": "2015-04-28T20:47:15+0000",
            "content": "Github user jpountz commented on the pull request:\n\n    https://github.com/apache/lucene-solr/pull/142#issuecomment-97202666\n\n    Merged, see https://issues.apache.org/jira/browse/LUCENE-6427. (Unfortunately I can't close.) "
        },
        {
            "id": "comment-14518852",
            "author": "Luc Vanlerberghe",
            "date": "2015-04-29T06:52:30+0000",
            "content": "Thanks for committing!\n\nActually, just mentioning \"This closes #142\" in the commit message should be sufficient to trigger an ASF bot to close the pull request:\n(Just like my mentioning LUCENE-6427 in the pull request title triggered an automatic comment in the jira issue)\nSee https://wiki.apache.org/lucene-java/BensonMarguliesGitWorkflow\n\nI'll close it manually, no problem. "
        },
        {
            "id": "comment-14518853",
            "author": "ASF GitHub Bot",
            "date": "2015-04-29T06:52:54+0000",
            "content": "Github user LucVL closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/142 "
        },
        {
            "id": "comment-14586848",
            "author": "Anshum Gupta",
            "date": "2015-06-15T21:43:24+0000",
            "content": "Bulk close for 5.2.0. "
        }
    ]
}