{
    "id": "LUCENE-6584",
    "title": "Docs on StandardTokenizer don't mention the behaviour change in Version.LUCENE_4_7_0",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "4.10.4",
        "components": [
            "modules/analysis"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Bug"
    },
    "description": "The following test shows that the behaviour of StandardTokenizer differs once you start passing Version.LUCENE_4_7_0 or greater:\n\n\nimport java.io.StringReader;\n\nimport org.apache.lucene.analysis.TokenStream;\nimport org.apache.lucene.analysis.standard.StandardTokenizer;\nimport org.apache.lucene.util.Version;\nimport org.junit.Test;\n\nimport static org.hamcrest.Matchers.is;\nimport static org.junit.Assert.assertThat;\n\npublic class TestStandardTokenizerStandalone\n{\n    @Test\n    public void testLucene4_6_1() throws Exception\n    {\n        doTest(Version.LUCENE_4_6_1);\n    }\n\n    @Test\n    public void testLucene4_7_0() throws Exception\n    {\n        doTest(Version.LUCENE_4_7_0);\n    }\n\n    public void doTest(Version version) throws Exception\n    {\n        try (TokenStream stream = new StandardTokenizer(version, new StringReader(makeLongString(2550))))\n        {\n            stream.reset();\n\n            assertThat(stream.incrementToken(), is(false));\n        }\n    }\n\n    private String makeLongString(int length)\n    {\n        StringBuilder builder = new StringBuilder(length);\n        for (int i = 0; i < length; i++)\n        {\n            builder.append('x');\n        }\n        return builder.toString();\n    }\n}\n\n\n\nHowever, the Javadoc only mentions the behaviour changes in versions 3.1 and 3.4.\n\nThe constructor for passing the version is deprecated, presumably under the false impression that no changes occurred during Lucene 4. I know the Version parameter was killed off entirely in version 5, which presumably means that people who tokenised stuff in Lucene 4.6 or earlier have now been trapped and have to copy the tokeniser from Lucene 4 to keep their queries working.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14592827",
            "author": "Ryan Ernst",
            "date": "2015-06-19T01:04:32+0000",
            "content": "StandardTokenizerFactory now handles versioning, like with other analysis components. Pass \"luceneMatchVersion\" to the factory args. You can also construct it directly: org.apache.lucene.analysis.standard.std40.StandardTokenizer40\n\nTo which javadocs are you referring? "
        },
        {
            "id": "comment-14592934",
            "author": "Trejkaz",
            "date": "2015-06-19T03:07:37+0000",
            "content": "http://lucene.apache.org/core/4_10_4/analyzers-common/org/apache/lucene/analysis/standard/StandardTokenizer.html "
        },
        {
            "id": "comment-14593306",
            "author": "Daniel Collins",
            "date": "2015-06-19T10:34:16+0000",
            "content": "I think the point is that in Lucene 4.7, this update was made:\n\n\nLUCENE-5357: Upgrade StandardTokenizer and UAX29URLEmailTokenizer to Unicode 6.3; update UAX29URLEmailTokenizer's recognized top level domains in URLs and Emails from the IANA Root Zone Database. \n\nbut that never made it to the Javadoc page.. "
        }
    ]
}