{
    "id": "LUCENE-3550",
    "title": "Create example code for core",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Trunk has gone under lots of API changes. Some of which are not trivial, and the migration path from 3.x to 4.0 seems hard. I'd like to propose some way to tackle this, by means of live example code.\n\nThe facet module implements this approach. There is live Java code under src/examples that demonstrate some well documented scenarios. The code itself is documented, in addition to javadoc. Also, the code itself is being unit tested regularly.\n\nWe found it very difficult to keep documentation up-to-date \u2013 javadocs always lag behind, Wiki pages get old etc. However, when you have live Java code, you're forced to keep it up-to-date. It doesn't compile if you break the API, it fails to run if you change internal impl behavior. If you keep it simple enough, its documentation stays simple to.\n\nAnd if we are successful at maintaining it (which we must be, otherwise the build should fail), then people should have an easy experience migrating between releases. So say you take the simple scenario \"I'd like to index documents which have the fields ID, date and body\". Then you create an example class/method that accomplishes that. And between releases, this code gets updated, and people can follow the changes required to implement that scenario.\n\nI'm not saying the examples code should always stay optimized. We can aim at that, but I don't try to fool myself thinking that we'll succeed. But at least we can get it compiled and regularly unit tested.\n\nI think that it would be good if we introduce the concept of examples such that if a module (core, contrib, modules) have an src/examples, we package it in a .jar and include it with the binary distribution. That's for a first step. We can also have meta examples, under their own module/contrib, that show how to combine several modules together (this might even uncover API problems), but that's definitely a second phase.\n\nAt first, let's do the \"unit examples\" (ala unit tests) and better start with core. Whatever we succeed at writing for 4.0 will only help users. So let's use this issue to:\n\n\tList example scenarios that we want to demonstrate for core\n\tBuilding the infrastructure in our build system to package and distribute a module's examples.\n\n\n\nPlease feel free to list here example scenarios that come to mind. We can then track what's been done and what's not. The more we do the better.",
    "attachments": {
        "LUCENE-3550.patch": "https://issues.apache.org/jira/secure/attachment/12572817/LUCENE-3550.patch",
        "LUCENE-3550-sort.patch": "https://issues.apache.org/jira/secure/attachment/12600361/LUCENE-3550-sort.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-01T14:54:57+0000",
            "content": "+1\n\nlucene/contrib/demo/ is an existing lucene-core example, and should be folded into this effort.\n\nAbout release jar naming: we could call them lucene-<module>-example, e.g. lucene-core-example-X.Y.jar, lucene-facet-example-X.Y.jar, etc.\n\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13141215"
        },
        {
            "date": "2013-01-26T10:48:12+0000",
            "content": "Hi - \n\nI would like to start my work on this issue. Request for your guidance.\n\nCheers\n-Mandy\n(Linked in - http://www.linkedin.com/pub/manpreet-singh/16/67a/165) ",
            "author": "Manpreet",
            "id": "comment-13563441"
        },
        {
            "date": "2013-01-28T15:06:33+0000",
            "content": "Hi Mandy. The basic idea behind this issue was to create some example code which demonstrates different scenarios of indexing with Lucene. With Lucene 4.0 came many changes to the API and such example code was badly missing (luckily, there was good migration document).\n\nThe facets module has such example code which:\n\n\n\tEnsures that when the API changes, the code is updated \u2013 it's like live documentation of the code, which we must update in order for it to compile\n\tTested regularly, so that it not only compiles, but also works .\n\n\n\nAt the time I thought that it would be good to follow that practice for Lucene core, ensuring that when APIs change / features removed, we update the corresponding example code on one hand, but also have the chance to evaluate the change, against real code.\n\nLucene has a 'demo' module, so we should put the examples code under it. Let's start by defining some use cases that we'd like to demo, e.g.:\n\n\n\tSimpleExample: index few fields into few documents and offer index() and search() methods, that index the content, as well as search some stuff.\n\t\n\t\tA corresponding test should e.g. run some queries against the result index and validate that things were indexed properly.\n\t\n\t\n\tSortExample: same as above, but indexes some fields for sorting purposes, using e.g. DocValues and whatever else we can sort on.\n\t\n\t\tAnd again, a corresponding test.\n\t\n\t\n\tNumericExample: index few numeric fields and demo range queries etc.\n\t\n\t\tPlus a corresponding test.\n\t\n\t\n\n\n\nLet's start with these, and then we can build more. ",
            "author": "Shai Erera",
            "id": "comment-13564326"
        },
        {
            "date": "2013-02-01T18:56:36+0000",
            "content": "Thanks Shai. I have started work on the above examples. \n\nI could see with latest changes even facets examples are moved under 'demo' module.\n\nCheers\n-Mandy ",
            "author": "Manpreet",
            "id": "comment-13568969"
        },
        {
            "date": "2013-02-10T12:49:00+0000",
            "content": "patch for 8550 [includes only SimpleExample testcase] ",
            "author": "Manpreet",
            "id": "comment-13575429"
        },
        {
            "date": "2013-02-10T12:50:43+0000",
            "content": "Hi Shai - I have created the first patch which includes SimpleExample testcase. Request your review.\n\nThanks\n-MS ",
            "author": "Manpreet",
            "id": "comment-13575430"
        },
        {
            "date": "2013-02-10T12:51:57+0000",
            "content": "Ok I will review. But can you please rename the patch to LUCENE-3550 (and not 8550)? ",
            "author": "Shai Erera",
            "id": "comment-13575431"
        },
        {
            "date": "2013-02-10T12:57:59+0000",
            "content": "Renamed to 3550. ",
            "author": "Manpreet",
            "id": "comment-13575432"
        },
        {
            "date": "2013-02-12T18:15:48+0000",
            "content": "Hi Shai - Did you get chance to review. ",
            "author": "Manpreet",
            "id": "comment-13576846"
        },
        {
            "date": "2013-02-12T19:24:18+0000",
            "content": "Hi Mandy. I realize you followed the facets example \"exactly\" . I recently simplified them a lot, and that's what I think you should do with the simple example.\n\n\n\tRather than SimpleIndexer/Searcher/Main, just have a simple class, which runs scenarios in separate methods, even if it reindexes content etc.\n\tMaybe it would be good if instead of ExampleUtils (and now FacetExamples), we should have under demo/ a DemoConstants and declare DEMO_VERSION there?\n\tWould you please add a unit test that corresponds to the simple example? See how e.g. SimpleFacetExample and TestSimpleFacetExample work.\n\tI would nuke ExampleResult.\n\n ",
            "author": "Shai Erera",
            "id": "comment-13576913"
        },
        {
            "date": "2013-02-12T19:33:53+0000",
            "content": "Hi Shai - Thanks. Thats true \n\n\n\tI will change it to more simpler approach as you said.\n\tWill create DemoConstant, that's much better than each module having its own.\n\tI did add 'TestSimpleExample' a Lucene Test Case. Will verify & change accordingly.\n\n\n\nThanks\n-MS ",
            "author": "Manpreet",
            "id": "comment-13576924"
        },
        {
            "date": "2013-02-13T09:15:01+0000",
            "content": "Ok great. Also, if you can, please create the patch on 'trunk' and not 4x. ",
            "author": "Shai Erera",
            "id": "comment-13577427"
        },
        {
            "date": "2013-02-13T09:19:09+0000",
            "content": "Surely I will do that. Thanks. ",
            "author": "Manpreet",
            "id": "comment-13577428"
        },
        {
            "date": "2013-02-24T17:26:10+0000",
            "content": "Patch for Example Code ",
            "author": "Manpreet",
            "id": "comment-13585430"
        },
        {
            "date": "2013-02-24T17:28:05+0000",
            "content": "Hi Shai - created the patch for 3550. Kindly review.\n\nThanks\n-MS ",
            "author": "Manpreet",
            "id": "comment-13585434"
        },
        {
            "date": "2013-03-08T20:07:24+0000",
            "content": "Patch for Lucene-3550 ",
            "author": "Manpreet",
            "id": "comment-13597498"
        },
        {
            "date": "2013-03-10T10:55:04+0000",
            "content": "Few comments:\n\n\n\tPlease remove @author tags. We don't use them as well as the build fails if it finds any.\n\n\n\n\n\tIn general, I think that the code needs to be more documented, since this is an example code. So for instance I would add:\n\t\n\t\tto index() a comment saying \"IndexWriterConfig lets you configure how IndexWriter works as well as how documents are indexed\".\n\t\tto search() a comment saying \"QueryParser is able to parse a query string into a meaningful Query object which is used to match and score documents\".\n\t\tetc...\n\t\n\t\n\n\n\n\n\tIf there's nothing special to say about an exception that is thrown, can you please remove @throws from javadocs?\n\n\n\n\n\taddDocs:\n\t\n\t\tI would rename to addDoc\n\t\tModify the comment \"create index\" to \"add document to the index\"\n\t\n\t\n\n\n\n\n\tCurrently the code prints messages, which we try to avoid (e.g. during tests). So either we add to DemoConstants a VERBOSE property that is initialized to System.getProperty(\"tests.verbose\"), or you just move all the prints to main()?\n\t\n\t\tIn that regard, search() can return a ScoreDoc[] which main() can use to print results as well as tests could use to assert on.\n\t\tI.e. rather than asserting that search() returned 1 or 2 hits, we can assert their order etc. (not saying we have to for this example).\n\t\n\t\n\n\n\n\n\tIn order to better test the example, I would make it take a Directory (e.g. index(Directory), search(Directory) or SimpleCoreExample(Directory)) and pass from tests newDirectory() (note: there's no space intentionally).\n\t\n\t\tThis will detect incomplete code, e.g. you don't close the reader in search().\n\t\n\t\n\n\n\n\n\tAlso, I think that the example should better clarify that we don't e.g. care about casing, so for instance if you index \"Apache\" search for \"apache\".\n\t\n\t\tmain() could also run two searches, to print diverse results\n\t\tand tests (and main()) should test multi-word queries too\n\t\n\t\n\n\n\nAs a start, it looks great. I think though that it would be better if our simple example contained:\n\n\t\n\t\n\t\tDocuments with more than one field, to show different Field types (TextField, StringField, DocValuesField)\n\t\tInstead of a single search(), have different searchXYZ methods, e.g.\n\t\t\n\t\t\tsearchKeyword (using default field), searchFields (execute fielded search)\n\t\t\tsearchBooleanQuery, searchRangeQuery to show QueryParser's syntax\n\t\t\tsearchSort to sort results\n\t\t\n\t\t\n\t\n\t\n\n\n\nI consider these simple/basic examples, since that's really the essence of Lucene \u2013 index documents with few fields and querying for them in different ways. ",
            "author": "Shai Erera",
            "id": "comment-13598204"
        },
        {
            "date": "2013-03-11T16:33:35+0000",
            "content": "Perfect & Noted.\n\nI shall follow the review comments & make the changes accordingly. Thanks again for your help & review.\n\nregards\n-ms ",
            "author": "Manpreet",
            "id": "comment-13598959"
        },
        {
            "date": "2013-08-28T09:35:05+0000",
            "content": "Hi,\n\nrecently I started learning Lucene API and I along the way created a few snippets showing different Lucene features. I found this issue by coincidence and I decided to rework one of them to fit into the examples implementation \u2013 I'm sending a patch with my sort example + a corresponding unit test.\n\nManpreet, I see that you started working on this issue a while ago \u2013 I don't want to interfere with your work. You can incorporate my example in your code or use it in any other way, if you find it useful.\n\nCheers,\nAleksandra ",
            "author": "Aleksandra Wozniak",
            "id": "comment-13752242"
        },
        {
            "date": "2013-08-28T09:46:02+0000",
            "content": "Hi Aleksandra -\n\nI have been away from it for a while. \n\nResuming my work from this week. Sure I will do that. \n\nThanks\n-Manpreet ",
            "author": "Manpreet",
            "id": "comment-13752252"
        }
    ]
}