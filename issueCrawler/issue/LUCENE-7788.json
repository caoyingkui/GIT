{
    "id": "LUCENE-7788",
    "title": "fail precommit on unparameterised log.trace messages",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Task",
        "components": [],
        "fix_versions": []
    },
    "description": "SOLR-10415 would be removing existing unparameterised log.trace messages use and once that is in place then this ticket's one-line change would be for 'ant precommit' to reject any future unparameterised log.trace message use.",
    "attachments": {
        "LUCENE-7788.patch": "https://issues.apache.org/jira/secure/attachment/12863992/LUCENE-7788.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15974473",
            "date": "2017-04-19T11:35:37+0000",
            "content": "Attaching proposed patch. ",
            "author": "Christine Poerschke"
        },
        {
            "id": "comment-15974710",
            "date": "2017-04-19T13:56:09+0000",
            "content": "It looks a bit fragile to me as it only catches cases when the logger is called log while Solr seems to have some loggers called LOG, logger or even requestLog? Also, should we remove the if (trace) from TransactionLog if we do that? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15974739",
            "date": "2017-04-19T14:05:54+0000",
            "content": "Another thing I've noticed is sometimes there are log statements with explicit .toString()s on the parameters, which defeats the point of using the parameterized logging. Something to think about / include potentially?  ",
            "author": "Michael Braun"
        },
        {
            "id": "comment-15974799",
            "date": "2017-04-19T14:38:00+0000",
            "content": "It looks a bit fragile to me as it only catches cases when the logger is called log while Solr seems to have some loggers called LOG, logger or even requestLog? Also, should we remove the if (trace) from TransactionLog if we do that?\n\nCould forbidden-apis be used here instead? ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-15974821",
            "date": "2017-04-19T14:50:20+0000",
            "content": "I don't think the forbidden APIs can detect whether a String that is passed is a constant or constructed dynamically using + operators? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15974887",
            "date": "2017-04-19T15:14:43+0000",
            "content": "... it only catches cases when the logger is called log ...\n\nLooks like the validLoggerPattern at https://github.com/apache/lucene-solr/blob/master/build.xml#L174 is flexible on names but in practice log is the most popular choice:\n\ngit grep \" = LoggerFactory.getLogger\" | sed 's/.* \\(.* = \\)LoggerFactory.*/\\1/g' | sort | uniq -c | sort -nr\n 482 log = \n  57 LOG = \n  23 logger = \n   1 requestLog = \n\n\n\nSo one option might be to change the 57+23+1 loggers that are not called log and to then standardise on log via the validLoggerPattern and to then proceed with some sort of check for log.trace and in due course perhaps also log.debug? ",
            "author": "Christine Poerschke"
        },
        {
            "id": "comment-15974899",
            "date": "2017-04-19T15:20:07+0000",
            "content": "... Also, should we remove the if (trace) from TransactionLog if we do that? ...\n\nYes, attaching revised patch. ",
            "author": "Christine Poerschke"
        },
        {
            "id": "comment-16460006",
            "date": "2018-05-01T18:49:37+0000",
            "content": "Christine Poerschke As you've probably seen, I've been agitating for a thorough review of our usage of logging. I think some of us will be making some active progress along these lines, then be able to fail the precommit.\n\nSo I have several questions:\n\n1> WDYT about failing all logging messages that aren't parameterised? Is there any reason any logging message should not be parameterised?\n\n2> Let's say we fix up one directory (solr/core for example). Can we turn on the precommit check on a per-directory basis?\n\n3> Since we're going through the review in the first place we can regularize the names of the loggers to whatever we want. It looks like \"log\" is the least number of changes so it wins by default. WDYT about adding a precommit check for that too? ",
            "author": "Erick Erickson"
        },
        {
            "id": "comment-16479503",
            "date": "2018-05-17T18:20:58+0000",
            "content": "Hi Erick Erickson - thanks for the questions!\n\n1> WDYT about failing all logging messages that aren't parameterised? Is there any reason any logging message should not be parameterised?\n\nInteresting point, would we need to differentiate log.debug(\"Foo.bar() called\"); as legitimately(?) unparameterised from\n\nlog.debug(\"Foo.bar(param='\"+param+\"') called\");\n\n\nas wrongly unparameterised since it should be\n\nlog.debug(\"Foo.bar(param='{}') called\", param);\n\n\ninstead? Or would the expectation be that the first unparameterised logging is actually discouraged and instead it should include a parameter e.g. to differentiate different Foo object instances?\n\n2> Let's say we fix up one directory (solr/core for example). Can we turn on the precommit check on a per-directory basis?\n\nI like the idea of incrementally changing things and 'locking in' changes made. For javadocs https://github.com/apache/lucene-solr/blob/releases/lucene-solr/7.3.0/lucene/build.xml#L156-L199 is for Lucene and https://github.com/apache/lucene-solr/blob/releases/lucene-solr/7.3.0/solr/build.xml#L678 for Solr have such per-directory differentiation, I don't know what it would take for other precommit checks to do something similar. ",
            "author": "Christine Poerschke"
        },
        {
            "id": "comment-16479557",
            "date": "2018-05-17T18:53:44+0000",
            "content": "... would we need to differentiate log.debug(\"Foo.bar() called\");...\n\nIf (and only if) it would be easy IMO. I don't think it's too onerous that, assuming supporting your example turns into a rat-hole, we'd require re-wording the message. Something like this, say \n\nlog.debug(\"Method Foo.bar called\");\n\n\n\nAnd how far we go down various cases .vs. doing a bit of rewording gets weird pretty quickly.\n\nlog.debug(\"method\\\"Foo.bar()\\\" \");\n\n\n\nis the same as your example, just puts quotes around Foo.bar(). So still would be legal, but any simple check that just looked for method calls outside pairs of double quotes would mistakenly fail it.\n\nPersonally I don't feel the need to support everything anyone wants to put in, what we enforce via precommit just becomes the norm. So we'll make a best effort to accommodate things like this example but if it takes more than a few minutes not bother. If someone feels strongly enough about it to put the work into supporting it, they're perfectly free to do so  ",
            "author": "Erick Erickson"
        },
        {
            "id": "comment-16479563",
            "date": "2018-05-17T18:58:39+0000",
            "content": "3> Since we're going through the review in the first place we can regularize the names of the loggers to whatever we want. It looks like \"log\" is the least number of changes so it wins by default. WDYT about adding a precommit check for that too?\n\n+1 to regularizing logger names. SOLR-12372 gives it a go starting with (part of) solr/contrib and looking at the patch made me wonder/question how conversion to unparameterised logging would best work with (a) long log messages e.g.\n\n         log\n             .warn(\n                 \"Could not instantiate Lucene stemmer for Arabic, clustering quality \"\n                     + \"of Arabic content may be degraded. For best quality clusters, \"\n                     + \"make sure Lucene's Arabic analyzer JAR is in the classpath\",\n                 e);\n\n\nand (b) exceptions e.g.\n\n         log.warn(\"Could not instantiate snowball stemmer\"\n             + \" for language: \" + language.name()\n             + \". Quality of clustering may be degraded.\", e);\n\n\nscenarios? ",
            "author": "Christine Poerschke"
        },
        {
            "id": "comment-16493981",
            "date": "2018-05-29T18:06:24+0000",
            "content": "2> Let's say we fix up one directory (solr/core for example). Can we turn on the precommit check on a per-directory basis?\n3> ... regularize the names of the loggers ... WDYT about adding a precommit check for that too?\n\nSOLR-12419 (and its two small sub-tasks) are piloting per-directory check-source-patterns differentiation. ",
            "author": "Christine Poerschke"
        }
    ]
}