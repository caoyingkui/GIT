{
    "id": "SOLR-2058",
    "title": "Adds optional \"phrase slop\" to edismax \"pf2\", \"pf3\" and \"pf\" parameters with field~slop^boost syntax",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "http://mail-archives.apache.org/mod_mbox/lucene-solr-user/201008.mbox/%3C4C659119.2010007@0ape.com%3E\n\nFrom\tRon Mayer <r...@0ape.com>\n... my results might  be even better if I had a couple different \"pf2\"s with different \"ps\"'s  at the same time.   In particular.   One with ps=0 to put a high boost on ones the have  the right ordering of words.  For example insuring that [the query]:\n  \"red hat black jacket\"\n boosts only documents with \"red hats\" and not \"black hats\".   And another pf2 with a more modest boost with ps=5 or so to handle the query above also boosting docs with \n  \"red baseball hat\".\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-solr-user/201008.mbox/%3CAANLkTimd+V3g6d_MnHP+JYkKd+dej8FVMvF_1LQoiLBU@mail.gmail.com%3E\n\nFrom\tYonik Seeley <yo...@lucidimagination.com>\nPerhaps fold it into the pf/pf2 syntax?\n\npf=text^2    // current syntax... makes phrases with a boost of 2\npf=text~1^2  // proposed syntax... makes phrases with a slop of 1 and\na boost of 2\n\nThat actually seems pretty natural given the lucene query syntax - an\nactual boosted sloppy phrase query already looks like\ntext:\"foo bar\"~1^2\n\n-Yonik\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-solr-user/201008.mbox/%3Calpine.DEB.1.10.1008161300510.6335@radix.cryptio.net%3E\n\nFrom\tChris Hostetter <hossman_luc...@fucit.org>\n\nBig +1 to this idea ... the existing \"ps\" param can stick arround as the \ndefault for any field that doesn't specify it's own slop in the pf/pf2/pf3 \nfields using the \"~\" syntax.\n\n-Hoss",
    "attachments": {
        "edismax_pf_with_slop_v2.patch": "https://issues.apache.org/jira/secure/attachment/12453473/edismax_pf_with_slop_v2.patch",
        "SOLR-2058-and-3351-not-finished.patch": "https://issues.apache.org/jira/secure/attachment/12528598/SOLR-2058-and-3351-not-finished.patch",
        "SOLR-2058.patch": "https://issues.apache.org/jira/secure/attachment/12527901/SOLR-2058.patch",
        "pf2_with_slop.patch": "https://issues.apache.org/jira/secure/attachment/12452509/pf2_with_slop.patch",
        "edismax_pf_with_slop_v2.1.patch": "https://issues.apache.org/jira/secure/attachment/12453479/edismax_pf_with_slop_v2.1.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ron Mayer",
            "id": "comment-12900260",
            "date": "2010-08-19T11:59:47+0000",
            "content": "This patch is my first draft at implementing this feature.\n\nAny feedback would be appreciated.\n\nIt seems to happily turn a query like\nhttp://localhost:8983/solr/select?defType=edismax&fl=id,text,score&q=enterprise+search+foobar&ps=5&qf=text&debugQuery=true&pf2=name~0^5555&pf2=name^12+name~10\n\ninto what I believe is the desired parsed query:\n\n+((text:enterpris) (text:search) (text:foobar)) ((name:\"enterprise search\"~5^12.0) (name:\"search foobar\"~5^12.0)) ((name:\"enterprise search\"^5555.0) (name:\"search foobar\"^5555.0)) ((name:\"enterprise search\"~10) (name:\"search foobar\"~10))\n\nwhich looks like it should give a high boost to docs where both words appear right next to each other, but still substantial boosts to docs where the pairs of words are a few words apart. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12900849",
            "date": "2010-08-20T20:29:03+0000",
            "content": "Map<Integer,Map<String,Float>> is an \"interesting\" way to encode the slop and the boost \nBut perhaps we should make a FieldParams class?\n\nWe could keep the separate pf,pf2,pf3 maps... or encode the number of terms to make phrases out of in the FieldParams class:\n\nclass FIeldParams {\n  int wordGrams;  // make bigrams if 2, trigrams if 3, or all if MAX_INT\n  int slop;\n  float boost;\n}\n\n "
        },
        {
            "author": "Ron Mayer",
            "id": "comment-12904351",
            "date": "2010-08-30T21:34:10+0000",
            "content": "Totally agree that that was a bizarre way I used of encoding the boost.\n\nI did that on my first draft  just to minimize the impact with the rest of the code (where some functions were expecting the \"Map<String,Float>\" pieces).\n\n\nI'll post an updated patch with a more sane class like the one you described.   I'm new enough to the code that I'm not sure where such a class should reside.  Any opinions? "
        },
        {
            "author": "Ron Mayer",
            "id": "comment-12904352",
            "date": "2010-08-30T21:34:29+0000",
            "content": "Also wanted to note - I've been using this on a QA machine with 4 million documents, and it  has been working extremely well for me; with multiple simultaneous phrase slop.\n\nIn particular, if I use:\n\n\ta high boost (500)  on pf with slop of 0\n\ta moderate boost (50) on pf with a slop of 50\n\ta moderate boost (50) on pf2 with a slop of 0\n\ta low boost (10) on pf2 with a slop of 10\n\n\n\nit's doing a great job of getting the most relevant document  in the #1 spot, and a very good job at getting the entire first page of results filled with highly relevant documents.\n "
        },
        {
            "author": "Ron Mayer",
            "id": "comment-12904390",
            "date": "2010-08-30T22:40:21+0000",
            "content": "Submitted an updated patch to use a more sane FieldParams class to pass fields,, boosts, and phrase slops instead of the bizarre Map<Integer,Map<String,Float>> I was using before. "
        },
        {
            "author": "Ron Mayer",
            "id": "comment-12904438",
            "date": "2010-08-31T00:12:27+0000",
            "content": "Removed a couple unnecessary lines compared to the last version "
        },
        {
            "author": "Ron Mayer",
            "id": "comment-12908225",
            "date": "2010-09-10T22:53:26+0000",
            "content": "This one adds to the edismax syntax allowing different phrase slop for each pf, pf2, and pf3  expression; and makes it practical to have 2 different pf parameters with different slops. "
        },
        {
            "author": "Nick Hall",
            "id": "comment-12999576",
            "date": "2011-02-25T21:17:10+0000",
            "content": "Thanks for creating this patch. I tried it out and would love to see this put into the base code. Being able to adjust the slop for pf/pf2/pf3 allows for a dramatic increase in search result relevance. "
        },
        {
            "author": "Ron Mayer",
            "id": "comment-13038437",
            "date": "2011-05-24T08:14:05+0000",
            "content": "Nick, thanks!  Glad you like it.\n\nI'm keeping a version that's kept more up-to-date with trunk on github here:\nhttps://github.com/ramayer/lucene-solr/tree/solr_2058_edismax_pf2_phrase_slop\n\n(though I must admit I've tested that less than an internal fork of trunk we made in Sep 2010 and deployed with only a few additional cherry-picked patches) "
        },
        {
            "author": "James Dyer",
            "id": "comment-13276066",
            "date": "2012-05-15T18:00:19+0000",
            "content": "Does anyone know offhand which issues still need to be resolved on this so that it can be committed? "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13276322",
            "date": "2012-05-15T23:11:59+0000",
            "content": "Just a question: Is it 100% compatible with existing edismax usage, so that ps, ps2, and ps3 are default slops and that the individual field slops are optional in pf, pf2, and pf3 and if not explicitly present will default as they do today from ps, ps2, and ps3? Even so, it would be nice to specify the default slop up front on pf, pf2, and pf3 to apply to all fields without having to revert to using ps, ps2, and ps3.\n\nAnother simple question: can slop and boost be in either order, or must slop be first, before boost? "
        },
        {
            "author": "James Dyer",
            "id": "comment-13278179",
            "date": "2012-05-17T19:58:58+0000",
            "content": "Here is an updated patch based on Ron's August 31, 2010 version.  I've cleaned up the code a little and added a unit test scenario.  To recap what this does:\n\n\n\tFully backwards compatible with the existing pf/pf2/pf3/ps syntax.\n\tAllows an optional slop parameter in the syntax \"FieldName~slop^boost\"\n\t\"ps\" value is the default if the slop is not specified per-field\n\n\n\nThis will give users the flexibility to say something like \"if the words are kinda near each other, boost a little but if they are really near each other, boost a lot, etc\"\n\nUnless someone objects, I will re-assign this issue to myself and commit early next week. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13278202",
            "date": "2012-05-17T20:10:19+0000",
            "content": "It would be nice to have a user-friendly error if the user makes a mistake like a space after ^ or ~ or writing field^2.0~3 "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13280129",
            "date": "2012-05-21T12:56:37+0000",
            "content": "James, you may grab it. I have a half-baked patch, but will rather take a stab later if there is anything to improve after your commit. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13280180",
            "date": "2012-05-21T14:32:30+0000",
            "content": "Jan,  I'm curious:  is the patch you're working on more of a \"clean-up\" of Jack's patch, or does it do something Jack's patch didn't do?  I've been testing this and so far while it issues the dismax queries I'd expect, it doesn't help relevance like I though it would.  so I'm a little less confident about it.  I also was wondering if it should be generalized to allow \"pf[\\d]\" so users can have pf4, pf5 etc if they wanted.  This extra functionality wouldn't be hard to add but would it make sense?\n\nIn any case, I would like to have something to commit here this week if possible.  Your insight is very much appreciated. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13281004",
            "date": "2012-05-22T14:43:39+0000",
            "content": "I did a lot of things in the same patch - including ps2, ps3 support and refactoring of FieldSpec parsing to a separate class, and adding test cases for boosting. But there is wrapping up to do and I don't know if I'm 100% happy with using RegEx for parsing fieldspec. I'll attach what I have, but as I say I think it is better to add some of these improvements incrementally. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13281009",
            "date": "2012-05-22T14:47:24+0000",
            "content": "Attaching a patch doing also some ps2/ps3 stuff, adding more tests etc, but it's not finished. Unfortunately it's big partly due to whitespace differences "
        },
        {
            "author": "James Dyer",
            "id": "comment-13283531",
            "date": "2012-05-25T15:19:23+0000",
            "content": "Committed to Trunk, r1342681.\n\nThis is the May 17, 2012 patch which is a touched-up version of Ron Mayer's work from August 31, 2010 (Thank you!). "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13463009",
            "date": "2012-09-25T17:28:32+0000",
            "content": "It looks like this change also altered the way phrase queries are merged into the main query.\n\nFor the query: 'term1 term2' with pf2:[field1, field2, field3] we now get (omitting the non phrase query section for clarity):\n\n  <main query> DisjunctionMaxQuery((field1:\"term1 term2\"^1.0)~0.1)\nDisjunctionMaxQuery((field2:\"term1 term2\"^1.0)~0.1)\nDisjunctionMaxQuery((field3:\"term1 term2\"^1.0)~0.1)\n\n\n\nPrior to this change, we got:\n\n\n  <main query> DisjunctionMaxQuery((field1:\"term1 term2\"^1.0 | field2:\"term1 term2\"^1.0 | field3:\"term1 term2\"^1.0)~0.1)\n\n\n\nThe upshot being that if the phrase query \"term1 term2\" appears in multiple fields, it will get a significant boost over the previous implementation. The presence of the dismax queries makes me think this behavioral change was not intentional; if that's the case, let me know and I'll get a fix together.\nThanks. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13472796",
            "date": "2012-10-09T22:18:23+0000",
            "content": "Can anyone comment on whether this change was intentional or accidental (and unwanted)? "
        },
        {
            "author": "Ron Mayer",
            "id": "comment-13473765",
            "date": "2012-10-11T01:31:11+0000",
            "content": "I just tried them both (the committed one, and my original patch); and at least they both produce much better relevancy on my test data than I was able to get without the patch.\n\nHowever I agree with you that it looks to me like the change was probably unintentional and  seems different from the way I think normal dismax queries work.\n\nTL/DR:  I'm not sure.   Anyone else care to either test&compare them or just look at the code and see which is more reasonable? "
        },
        {
            "author": "Naomi Dushay",
            "id": "comment-13675456",
            "date": "2013-06-05T00:11:22+0000",
            "content": "Michael - per your comment on Sep 25, 2012 \u2013 that behavioral change is not desirable, in my opinion. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14095438",
            "date": "2014-08-13T12:56:39+0000",
            "content": "Commit 1617719 from Erik Hatcher in branch 'dev/trunk'\n[ https://svn.apache.org/r1617719 ]\n\nSOLR-6062: Fix undesirable edismax query parser effect (introduced in SOLR-2058) in how phrase queries "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14095441",
            "date": "2014-08-13T12:59:46+0000",
            "content": "Commit 1617721 from Erik Hatcher in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1617721 ]\n\nSOLR-6062: Fix undesirable edismax query parser effect (introduced in SOLR-2058) in how phrase queries generated from pf, pf2, and pf3 are merged into the main query. (merged from trunk r1617719) "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14095445",
            "date": "2014-08-13T13:04:49+0000",
            "content": "Naomi Dushay please do let us know (best at SOLR-6062 or a new issue) if you're not satisfied with the latest commit. "
        }
    ]
}