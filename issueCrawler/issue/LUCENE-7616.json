{
    "id": "LUCENE-7616",
    "title": "QueryNode#toQueryString says it produces a string in the syntax understood by \"the query parser\", but cannot possibly know how",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "6.3",
        "status": "Open",
        "type": "Bug",
        "components": [
            "modules/queryparser"
        ],
        "fix_versions": []
    },
    "description": "(Not an implementation \"bug\" so much as a design error, but working within the confines of JIRA here.)\n\nThe \"flexible\" query parser framework allows custom query syntaxes to be implemented on top of the existing query node, processor and builder classes.\n\nNow, QueryNode has a toQueryString method which ostensibly converts the node back into a string appropriate for passing back through the parser. However, in practice, this method is implemented to return a syntax only appropriate for passing back to StandardQueryParser, not the parser you got the node from. The node itself has no idea what parser it came from, so it makes sense that this method could never work as currently designed.\n\nI don't really know what the right way to fix this is.\n\nOption A: Make QueryNode aware of which parser it came from, and add methods into the parser to format queries back into a string, so that this method can be implemented correctly. Sounds fine, except programmatically creating QueryNode objects directly becomes a hassle.\n\nOption B: Deprecate toQueryString and introduce a new SyntaxFormatter interface which converts QueryNode to CharSequence and provide an appropriate implementation for each existing SyntaxParser. Seems sensible and the most flexible option, but requires a lot of tiny classes to be implemented.\n\nAre there any other options?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15793923",
            "date": "2017-01-03T02:19:57+0000",
            "content": "As an additional nasty point, sometimes this method is called from places like BooleanQueryNodeBuilder, where it goes into an error message to show the user. So this error message also shows the wrong syntax, but it also isn't immediately clear how a QueryNodeBuilder would know what syntax was used to create the QueryNode it has been passed... ",
            "author": "Trejkaz"
        }
    ]
}