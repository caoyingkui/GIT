{
    "id": "LUCENE-7870",
    "title": "Use cl.loadClass(...) instead of Class.forName(..., cl) in SPIClassIterator",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Invalid",
        "affect_versions": "5.2.1,                                            6.1",
        "status": "Resolved",
        "type": "Bug",
        "components": [],
        "fix_versions": []
    },
    "description": "This issue is initially described in Eclipse Bug 517935 and prevents multiple versions of Lucene Core coexisting in an Equinox environment (FYI, Equinox is the OSGi container used by the Eclipse IDE).\n\nHere\u2019s how the problem manifests: While Equinox cleanly separates two versions of the same Lucene Core bundle (e.g., org.apache.lucene.core_5.2.1 and  org.apache.lucene.core_6.1.0) using two different bundle class loaders, it uses a single context classloader for all threads: the ContextFinder. When asked to load a class, the ContextFinder initiates a search through all bundle class loaders currently\u00a0\u201con\u201c the call stack; the class to be loaded is then defined by the respective bundle\u2019s class loader.\n\nAnd here is where the use of Class.forName(..., classLoader) rather than classLoader.loadClass(...) causes problems. Consider the following sequence of events:\n\n\n\tThe NamedSPILoader of bundle o.a.l.core_5.2.1 (re)loads some service (e.g., the Lucene50PostingFormat).\n\t\n\t\tIt (through SPIClassIterator) first uses Class.forName with the bundle class loader of o.a.l.core_5.2.1 (as per LUCENE-4713) to successfully load Lucene50PostingFormat from the o.a.l.core_5.2.1 bundle.\n\t\tThen (through another SPIClassIterator) it uses Class.forName with the thread\u2019s context class loader (here: ContextFinder) to load Lucene50PostingFormat. The ContextFinder delegates loading to the o.a.l.core_5.2.1 bundle\u2019s class loader, as that bundle is topmost on the call stack. This bundle class loader (again) successfully loads Lucene50PostingFormat from the o.a.l.core_5.2.1 bundle.\n\t\n\t\n\tLater, the NamedSPILoader of another bundle o.a.l.core_6.1.0 loads the Lucene50PostingFormat service.\n\t\n\t\tIt (through SPIClassIterator) first uses Class.forName with the bundle class loader of o.a.l.core_6.1.0 to successfully load Lucene50PostingFormat from the o.a.l.core_6.1.0 bundle.\n\t\tThen (through another SPIClassIterator) it uses Class.forName with the thread\u2019s context class loader (the same ContextFinder again) to load Lucene50PostingFormat. As Class.forName remembers that the ContextFinder has successfully initiated the loading of Lucene50PostingFormat before, it simply returns the Class instance defined earlier in step 1.2. But that class was defined by a different bundle class loader, namely that of o.a.l.core_5.2.1! This cache look up happens in native code; the ContextFinder\u2018s loadClass method isn\u2019t even called, so there\u2019s no way it can load the class from the o.a.l.core_6.1.0 bundle, even though it now is topmost on the stack.\n\t\tCasting the Lucene50PostingFormat loading from bundle o.a.l.core_5.2.1 to PostingFormat from bundle o.a.l.core_6.1.0 then fails, leaving the o.a.l.core_6.1.0 bundle in a broken state.\n\t\n\t\n\n\n\nIt SPIClassIterator.next() would use classLoader.loadClass(...) rather than Class.forName(..., classLoader), then class loading in step 1.2 wouldn\u2019t lock in the Lucene50PostingFormat class from org.apache.lucene.core_5.2.1; instead, step 2.2 would perform a completely independent look up that retrieves the class from the correct bundle. The cast in step 2.3 would then succeed.\n\nAt Eclipse Orbit, we plan to distribute a patched version of Lucene Core, but obviously we would like to see the (one-line) change included in the upstream project.\n\nBTW, if you fear that bypassing Class.forName \u201ccaching\u201d affects performance, then there\u2019s no need to worry: Most ClassLoader implementations cache as well (findLoadedClass); it\u2019s only ContextFinder that overrides loadClass wholesale, as it dynamically (based on the current call stack) delegates to the (caching) bundle class loaders.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16042598",
            "date": "2017-06-08T12:05:55+0000",
            "content": "GitHub user sewe opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/211\n\n    LUCENE-7870: Use cl.loadClass(...) instead of Class.forName(..., cl)\n\n    Class.forName(..., cl) causes SPIClassIterator to \"lock in\" the initiating class loader, preventing a thread's context class loader from loading different classes at different points in time.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/sewe/lucene-solr lucene-7870\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/211.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #211\n\n\ncommit 4ef5ee42dfe94771c94ddd6429b5afccd7303ea6\nAuthor: Andreas Sewe <andreas.sewe@codetrails.com>\nDate:   2017-06-08T12:00:38Z\n\n    LUCENE-7870: Use cl.loadClass(...) instead of Class.forName(..., cl)\n\n    Class.forName(..., cl) causes SPIClassIterator to \"lock in\" the\n    initiating class loader, preventing a thread's context class loader from\n    loading different classes at different points in time.\n\n ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16042611",
            "date": "2017-06-08T12:16:17+0000",
            "content": "I understand the issue, but somehow don't believe calling loadClass on the classloader directly is the correct fix here. Sure, it'll work (for you), but you're bypassing the \"right\" way of loading Java classes (and who knows what will happen if/when modules are out). It is OSGi's workaround to define a context class loader with context-sensitive, non-deterministic class resolution and I believe the fix should be up where this is causing a problem. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16042622",
            "date": "2017-06-08T12:27:05+0000",
            "content": "Hi Dawid,\n\nI understand the issue, but somehow don't believe calling loadClass on the classloader directly is the correct fix here. Sure, it'll work (for you), but you're bypassing the \"right\" way of loading Java classes (and who knows what will happen if/when modules are out).\n\nI did a lot of digging, but couldn\u2019t find any definitive information as to whether Class.forName(...) is more right than ClassLoader.loadClass(...). Any pointers are thus greatly appreciated.\n\nI do see, however, that java.util.ServiceLoader (which Lucene tries to mimic/replace) uses Class.forName(...), so that may be a sign.\n\nIt is OSGi's workaround to define a context class loader with context-sensitive, non-deterministic class resolution and I believe the fix should be up where this is causing a problem.\n\nFair enough. We (Eclipse Orbit) have to do some tweaks to Lucene\u2019s JARs anyway, as AFAIK Lucene still doesn't publish them with OSGi manifests. ",
            "author": "Andreas Sewe"
        },
        {
            "id": "comment-16042650",
            "date": "2017-06-08T12:58:43+0000",
            "content": "I recall this came as a surprise to me too, actually \u2013 I once discussed this with Jeroen Frijters (author of the .NET-based VM; IKVM) and recall he insisted calling ClassLoader.loadClass directly was a mistake. I can't exactly recall his arguments, but I believe they had to be as explained below.\n\nThe JVM spec declares that a pair (classloader, classname) is essentially loaded once [1], quoting:\n\nFirst, the Java Virtual Machine determines whether L has already been recorded as an initiating loader of a class or interface denoted by N. If so, this class or interface is C, and no class creation is necessary.\n\nClass.forName essentially follows this behavior (in fact, it's a native method call to the JVM). Having a non-deterministic class loader (one that returns a different result from loadClass makes the whole class resolution process non-deterministic... So I think that, even though this isn't stated explicitly (or at least I can't find it), ClassLoader.loadClass should be consistent and deterministic, always returning (and resolving internally) to the same Class instance.\n\nUnfortunately I don't know enough about OSGi's internals to offer you a different workaround; could be that there's none.\n\n[1] https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.3.2 ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16042657",
            "date": "2017-06-08T13:05:02+0000",
            "content": "One quick follow up. Read section 5.3 too: it declares the defining and initiating loader of a class. From this description it's clear that my initial intuition was very likely correct \u2013 the initiating loader may not be the defining one, but if a class name and initiating loader have been resolved, no another attempt will be made. So if it's not a deterministic process for mutliple classloaders with delegation then it's violating the spec (and hence the behavior you observed).\n\nI'd be curious what the OSGi people think about it \u2013 they had to face the same spec issues at some point. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16042705",
            "date": "2017-06-08T13:38:30+0000",
            "content": "Thank you for the explanation. ContentFinder is certainly not a well-behaved class loader as per the spec:\n\nA well-behaved class loader should maintain three properties: Given the same name, a good class loader should always return the same Class object. [...] ",
            "author": "Andreas Sewe"
        },
        {
            "id": "comment-16043000",
            "date": "2017-06-08T16:43:24+0000",
            "content": "Hi,\n\nI do see, however, that java.util.ServiceLoader (which Lucene tries to mimic/replace) uses Class.forName(...), so that may be a sign.\n\nThat is exactly the reason why it is made like this. In general we would likely to get rid of the Context ClassLoader in the SPI lookups of Lucene (you see we fall back to using the JAR's classloader, for looking up). IMHO, we should never touch the context loader, but as Java's service loader does this, too, we kept it for compatibility. The main reason is broken webapp containers that have strange context loaders fishing shit from somewhere.\n\nNevertheless, this is a problem of Eclipse/OSGI, because if Lucene would use the \"original\" ServiceLoader, it would cause the same problems for you. And it that case you would not even be able to \"patch\" Lucene. So fix the problem correctly! (see below) I know SPI and OSGI don't like each other but looking at Java 9's module system, they have a perfect way to handle this. With later Lucene versions we will switch to Java 9's ServiceLoader, so you can declare the services in the module declaration.\n\nI'd separate the context class loader for those 2 apps (and set it equal to the loader that loaded the bundle). ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16043067",
            "date": "2017-06-08T17:19:08+0000",
            "content": "My idea would be (as stated before): Get rid of the Context Classloader in SPI lookups! Lucene never uses it, it is just there for backwards compatibility. The current setup of SPI does not work with modules of Java 9 and it does not work with stuff in completely different classloaders. So OSGI fails in any case, if you have lucene-core.jar and lucene-backwards-codecs.jar as OSGI modules, because both would use different loaders. The context loader won't help.\n\nThe problem is that we may break some apps that rely on the context loader traversal. In my opinion, we may add a system property that is read on setup of NamedSPILoader / SPIClassIterator that can be set to true (e.g. lucene.useContextLoaderForSPI, defaulting to false). This may fix legacy apps and new apps would only traverse the classloader that loaded lucene-core.jar.\n\nFor Java 9 and \"Lucene as Java 9 module\") we have to refactor this anyways, becaue we need to respect module-info,java and look for SPI exports. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16043077",
            "date": "2017-06-08T17:23:44+0000",
            "content": "FYI: Context class loaders were the worst idea ever in Java. I personally hate them and I would do anything - just to make them disappear from the spec! When drinking beers with Mark Reinhold in Brussels, I am always reminding him about this together with the inability to unmap byte buffers...  ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16043159",
            "date": "2017-06-08T18:05:28+0000",
            "content": "I mark this as invalid then; I think we've reached the consensus that it's not a bug, rather a clash of two different unfortunate loopholes. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16044093",
            "date": "2017-06-09T07:38:40+0000",
            "content": "I mark this as invalid then; I think we've reached the consensus that it's not a bug, rather a clash of two different unfortunate loopholes.\n\nFair enough, Dawid Weiss. FYI, Eclipse Orbit will then ship patched versions of Lucene 5.x and 6.x that use contextClassLoader.loadClass(...) and thus work with the Equinox ContextFinder, but those are just for Eclipse-internal consumption.\n\nI'd separate the context class loader for those 2 apps (and set it equal to the loader that loaded the bundle).\n\nUwe Schindler, that solution won\u2019t work in OSGi, as any bundle may create new threads whose call stacks may cross any number of bundle boundaries. The OSGi container thus cannot manage the context class loader for you. And wrapping every call into Lucene with a try-finally that sets and resets the context class loader is not solution either. \n\nThe current setup of SPI does not work with modules of Java 9 and it does not work with stuff in completely different classloaders. So OSGI fails in any case, if you have lucene-core.jar and lucene-backwards-codecs.jar as OSGI modules, because both would use different loaders.\n\nI am not sure whether you are aware of buddy classloading, an OSGi extension in Equinox. This would allow the lucene-backwards-codecs.jar bundle to register itself with the lucene-core.jar bundle so that the former\u2019s classes are visible to the latter\u2019s class loader. Alas, buddy classloading won\u2019t solve the present issue, as NamedSPILoader will currently also use the thread context class loader (in addition to the class loader of lucene-core.jar in steps 1.1 and 2.1). And this leads to interference of steps 1.2 and 2.2, the first step locking in a class for the second.\n\nFor Java 9 and \"Lucene as Java 9 module\") we have to refactor this anyways, becaue we need to respect module-info,java and look for SPI exports.\n\nThat being said, I\u2019d love to see what Lucene will do for Java 9. (From an OSGi perspective, it would also be great if, as part of this refactoring, Lucene could get rid off \u201csplit packages\u201d, i.e., using the same package in multiple bundles. These are always a headache in OSGi. Maybe this is a good opportunity to revisit LUCENE-1511 again.)\n\nIs there a good place to lurk to watch the \u201dLucene as Java 9 module\u201d effort? An issue to watch? A branch to track? If you are already making larger changes, it would be good to have an eye on them from an OSGi perspective as well. ",
            "author": "Andreas Sewe"
        },
        {
            "id": "comment-16044132",
            "date": "2017-06-09T08:21:15+0000",
            "content": "Is there a good place to lurk to watch the \u201dLucene as Java 9 module\u201d effort? An issue to watch? A branch to track? If you are already making larger changes, it would be good to have an eye on them from an OSGi perspective as well.\n\nNot yet. There is no urgency about that. You may have seen the Java 9 developer panel at JAX 2017 (see videos). In general the Java 9 module system is fine for new developments, but porting old applications to be modules is going to be hard, especially because of the split package problem. This is unliekely to change fast in Lucene, sorry. My current recommendation is to make the whole Lucene application a single module and go for it.\n\nI am not sure whether you are aware of buddy classloading, an OSGi extension in Equinox\n\nThis may help with the problem, but its still no standard way. OSGI is \"broken\" in that respect. Java 9 has the default option and shares class loaders by default (which has pros and cons). But I don't want to make this a Java 9 vs. OSGI discussion, I just mention this.\n\nAlas, buddy classloading won\u2019t solve the present issue, as NamedSPILoader will currently also use the thread context class loader (in addition to the class loader of lucene-core.jar in steps 1.1 and 2.1). \n\nOf course. I made a proposal already to skip the stupid context classloader for Lucene's SPI lookups and only allow to enable it for \"broken\" webapp context classloaders (unfortunately this would only be possible via system property, as this must be setup very early during lucene-core startup). Let's discuss this in another issue.\n\nFor your current problems: Even with module systems, I'd always prefer to Maven-Shade different versions of the same lib- I'd also use the same approach like I'd suggest in Java 9: Package everything needed from Lucene's classes into one OSGI bundle.\n\nFinally, the Lucene does not offer OSGI bundles because of the split packages problem. Anybody who want to use Lucene should setup a trivial Maven projects that depends on all required Lucene JARs and after that uses Maven Shade plugin and the OSGI-BND plugin to create a encapsulated singleton out of it. We know, that's not ideal, but running Lucene inside OSGI is a bad idea anyways (huge performance issues). For desktop apps like Eclipse this may be fine, but not for the main Lucene use case: Server side applications using Lucene running in a separate JVM (Lucene does not coexist good with other stuff in the same JVM as it has very special garbage collection requirements and uses heap and off-heap resources in very unconventional ways). See Solr, Neo4J and Elasticsearch as typical examples. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16044143",
            "date": "2017-06-09T08:29:06+0000",
            "content": "See LUCENE-7873 ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16055874",
            "date": "2017-06-20T14:48:45+0000",
            "content": "Hi Andreas,\nthis issue should be solved in Lucene 7.0. We will not backport this as it breaks backwards compatibility: We no longer use the context class loader for looking up services. It takes the class loader that defined the interface. If you require another one (e.g. in OSGI without using buddy classloading) you can call Codec.reloadCodecs(ClassLoader) and similar methods. See the MIGRATE.txt in Lucene 7. ",
            "author": "Uwe Schindler"
        }
    ]
}