{
    "id": "SOLR-1523",
    "title": "Destructive Solr operations accept HTTP GET requests",
    "details": {
        "affect_versions": "1.4,                                            3.6.2,                                            4.6",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "GET v.s. POST/PUT/DELETE\n\nThe multicore implementation allows HTTP GET requests to perform system administration commands. This means that an URL which alters the system can be bookmarked/e-mailed/etc. This is dangerous in a production system.\n\nA clean implementation should give every request handler the ability to accept some HTTP verbs and reject others. It could be just a boolean for whether it accepts a GET, or the interface might actually have a list of verbs it accepts.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12779174",
            "date": "2009-11-17T22:25:45+0000",
            "content": "FWIW: i'm opposed to introducing additional HTTP specific semantics into any of the solr internal APIs (ie: \"give every request handler the ability to accept some HTTP verbs and reject others\")\n\nSince this type of thing ultimately becomes a configuration issue (ie: the people implementing the CSVUpdateRequestHandler can't know in advance which users will want it to allow GET or not, so they have to make a config option for it) i would much rather leave this configuration out of Solr entirely, and let end users specify it using features of their servlet containers, or external proxies \u2013 we can certainly improve the documentation about how/why/when to do this, bug that's a seperate issue from modifying the internal APIs.\n\nIf people really feel like the \"out of the box\" solr experience should do more to protect users then we could write a new Servlet Filter to include in the webapp which will reject requests matching certain critera and then provide an easy way for people to configure this filter with recommended defaults (w/o poluting the existing solr config semantics)\n\n...but i'm opposed to this idea as well.  Any feature that purports to make solr more \"secure\" just leaves us more open to risk that people will assume they are protected because of those features and not take the care they should to check for themselves \u2013 the policy of \"Solr has no security features\" forces people to think about these issues carefully.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12779369",
            "date": "2009-11-18T08:50:23+0000",
            "content": "...but i'm opposed to this idea as well. Any feature that purports to make solr more \"secure\" just leaves us more open to risk \n\nI cannot completely agree with this. There are different levels of security. This one is not necessarily a security thing. This is just avoiding someone inadvertently invoking some request handler and making a write operation. If by configuration we can disallow GET for certain RequestHandlers I guess it should be fine. This can make Solr server move from the \"extremely vulnerable\" to \"moderately vulnerable\". For some users that should be just fine "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13836500",
            "date": "2013-12-02T13:23:25+0000",
            "content": "I'm tempted to close this as Won't fix, as it seems people are in general happy with the APIs.\n\nHowever, since we got the new Schema REST API we actually started doing admin stuff with proper REST. I like that. Question is whether there is anything to gain by re-writing the Cores API and the Collections API to use RestLet as well, getting away with the action=CREATE kind of syntax and instead doing it with POST/PUT. Perhaps for 5.0?\n\nAnother dangerous default is the solrconfig.xml <requestParsers> parameter enableRemoteStreaming=\"true\" which should pershaps default to false from 4.7 or 5.0. It allows anyone to delete everything with a single GET... "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13836506",
            "date": "2013-12-02T13:28:53+0000",
            "content": "I still believe we should just  fix this. It is very easy to screw up stuff over http GET "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13836512",
            "date": "2013-12-02T13:44:16+0000",
            "content": "Agree. But this issue feels a bit too broad talking about request handlers in general. Our admin API technology of choice seems to be Restlet.\n\nPerhaps create new concrete sub JIRAs, one for new Core admin REST API, one for Collections REST API and one for enableRemoteStreaming. Are there other admin APIs to consider? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13836519",
            "date": "2013-12-02T13:53:01+0000",
            "content": "This is my favourite: http://www.thetaphi.de/nukeyoursolrindex.html\n\nAnother dangerous default is the solrconfig.xml <requestParsers> parameter enableRemoteStreaming=\"true\" which should pershaps default to false from 4.7 or 5.0. It allows anyone to delete everything with a single GET...\n\nThis also works without remote streaming, a single stream.body=... parameter can emulate any POST request. See my report about the edit file admin handler from yesterday: SOLR-5287 PoC "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16067377",
            "date": "2017-06-28T22:35:00+0000",
            "content": "Closing this as duplicate of SOLR-8029\n\nAlso, remoteStreaming that Uwe mentions is now false by default since 7.0. But we should open a new JIRA to make stream.body false by default too. "
        }
    ]
}