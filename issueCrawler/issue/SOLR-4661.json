{
    "id": "SOLR-4661",
    "title": "Index Version & Gen look out of sync in replication UI when master searcher uses older commit then what is replicatable",
    "details": {
        "affect_versions": "4.2",
        "status": "Closed",
        "fix_versions": [
            "4.3",
            "6.0"
        ],
        "components": [
            "Admin UI",
            "replication (java)"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "the ReplicationHandler (and the replication admin UI screen) report the index version & gen for the master based on what commit point is currently open for searching \u2013 but this is not necessarily the most recent commit point available for replication.\n\nThus, it can appear that a slave has \"gotten ahead\" of the master, if there are \"empty commits\" (because of reader reopening shotcuts) or commits using openSearcher=false.\n\nWe need to add additional data to help make it clear there is no actual problem in this sitation.\n\nSummary of original bug report..\n\n\nIndex and Gen number on Slave is higher than master. \nIf you apply commit on master with no pending docs then the commit time stamp and gen is incremented. When Slaves polls master for replication it see the index version difference and starts replicating but all files are skipped. \n\nOn Admin UI (on Slaves) the version number displayed for master is old where as for slave is the latest which is higher than master.\nBelow is the response from master (/replication?command=details) where i see two different Version an Gen numbers. This creates confusion of having version out of sync, though its not. \n\n...",
    "attachments": {
        "IndexVersionSyncIssue.jpg": "https://issues.apache.org/jira/secure/attachment/12576399/IndexVersionSyncIssue.jpg",
        "SOLR-4661.patch": "https://issues.apache.org/jira/secure/attachment/12576908/SOLR-4661.patch",
        "hoss_test.zip": "https://issues.apache.org/jira/secure/attachment/12576632/hoss_test.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Aditya",
            "id": "comment-13618926",
            "date": "2013-04-01T17:09:20+0000",
            "content": "Index and Gen version displayed on Admin UI (Slave) "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13619056",
            "date": "2013-04-01T19:03:21+0000",
            "content": "Can you post your replication handler config? "
        },
        {
            "author": "Aditya",
            "id": "comment-13619078",
            "date": "2013-04-01T19:40:35+0000",
            "content": " <requestHandler name=\"/replication\" class=\"solr.ReplicationHandler\" >\n      <lst name=\"master\">\n        <str name=\"enable\">${enable.master:false}</str>\n        <str name=\"replicateAfter\">commit</str>\n        <str name=\"replicateAfter\">startup</str>\n        <str name=\"confFiles\">schema.xml</str>\n      </lst>\n      <lst name=\"slave\">\n        <str name=\"enable\">${enable.slave:false}</str>\n        <str name=\"masterUrl\">http://XX.XX.XX.XX/solr</str>\n        <str name=\"pollInterval\">00:05:00</str>\n      </lst>\n    </requestHandler> "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13619394",
            "date": "2013-04-02T01:05:47+0000",
            "content": "Is there any chance you started up the slave with the wrong environment variable so it thinks it's a master?\n\nWild shot in the dark. "
        },
        {
            "author": "Aditya",
            "id": "comment-13620037",
            "date": "2013-04-02T17:40:38+0000",
            "content": "Double checked .. and everything looks good. Step to reproduce this issue is simple. Just apply commit on master without posting any documents. The next replication you will see the difference of Version and gen on Slave. I remember in Solr3.5 applying commit with no pending document will not increment the version and gen on master. \n\n\nFrom the Slave -----------\nJVM\nRuntime : Oracle Corporation Java HotSpot(TM) 64-Bit Server VM (1.7.0_09 23.5-b02)\nProcessors : 4\nArgs:\n-Dlogging.configuration=file:/opt/jboss/standalone/configuration/logging.properties\n-Dorg.jboss.boot.log.file=/opt/jboss/standalone/log/boot.log\n-XX:+UseG1GC\n-XX:+UnlockExperimentalVMOptions\n-XX:MaxPermSize=256m\n-Xmx3g\n-Xms3g\n-Djboss.server.default.config=standalone.xml\n-Djava.awt.headless=true\n-Djboss.modules.system.pkgs=org.jboss.byteman\n-Dsolr.data.dir=/storage/solrdata/\n-Denable.slave=true\n-Denable.master=false\n-Dsolr.solr.home=/opt/solr\n-Dorg.jboss.resolver.warning=true\n-Djava.net.preferIPv4Stack=true\n-XX:+TieredCompilation\n-XX:+UseCompressedOops\n-D[Standalone] "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13620073",
            "date": "2013-04-02T18:01:51+0000",
            "content": "Aditya: in your thread on the solr-user@lucene list, you posted some other examples of the generation being higher on the slave then on the master, and you also posted some short log files from both your master & slave, but the log files you posted don't seem to directly correspond to the snippets you posted from requesting /replication?command=details in any of your mails or in this issue (the generation numbers logged by SnapPuller on the slave don't match up)\n\nCan you please attach a zip file containing a single cohesive example of:\n\n\ta master solrconfig.xml\n\ta slave solrconfig.xml (if different)\n\tthe log files for both the master and slave from JVM startup to jvm shutdown\n\tany number of files containing the full response of getting the replication details form the master & slave with the timestamp of when these files were generated.\n\n\n\nThe timestamps being crucial to helping us stitch together where in the flow of log messages you are seeing this inconsistency.\n\nIf you are using bash, running two commands like this (one for master and one for slave) while solr is running should be suitable...\n\n\nwhile true; do date --utc && curl -sS \"http://localhost:8983/solr/collection1/replication?command=details&indent=truewt=json\" && echo && echo && sleep 2; done 2>&1 > slave_rep_details.txt\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13620137",
            "date": "2013-04-02T19:02:22+0000",
            "content": "Step to reproduce this issue is simple. Just apply commit on master without posting any documents\n\nAh... ok, wait a minute - this looks promising.  in reviewing the logs you sent to solr-user@lucene i didn't notice that this \"empty commit\" was happening, but in attempting to reproduce i think i see what you're talking about.\n\nSteps i followed...\n\n\n\n1) took the Solr 4.2 example/solr dir and cloned it as \"master-home\"\n\n2) edited the /replication handler to match what you posted in this issue (but adjusted the replicaiton time to 30 seconds for a faster test)\n\n3) cloned \"master-home\" as \"slave-home\"\n\n4) ran two instances of Solr 4.2 using hte following commands...\n\n\njava -Denable.master=true -Dmaster.port=8999 -Djetty.port=8999 -Dsolr.solr.home=/home/hossman/tmp/ave_version_higher/master-home -jar start.jar &> /home/hossman/tmp/slave_version_higher/master.log\njava -Denable.slave=true -Dmaster.port=899-Djetty.port=9999 -Dsolr.solr.home=/home/hossman/tmp/slave_version_higher/slave-home -jar start.jar &> /home/hossman/tmp/slave_version_higher/slave.log\n\n\n\n5) ran two scripts to monitor replication details using the following commands...\n\n\nwhile true; do date --utc && curl -sS \"http://localhost:9999/solr/collection1/replication?command=details&indent=truewt=json\" && echo && echo && sleep 2; done &> slave_rep_details.txt\nwhile true; do date --utc && curl -sS \"http://localhost:8999/solr/collection1/replication?command=details&indent=truewt=json\" && echo && echo && sleep 2; done &> master_rep_details.txt\n\n\n\n6) triggered an indexing of all the example docs on master, and waited for replication.\n\n\njava -Durl=http://localhost:8999/solr/collection1/update -jar post.jar *.xml\n\n\n\n7) triggered an explicit commit on master...\n\n\njava -Durl=http://localhost:8999/solr/collection1/update -jar post.jar -\n\n\n\n8) shutdown both servers and the scripts (Ctrl-C)\n\n\nI've attached the full logs and home dirs at the completion of this test, but as a summmary of the results...\n\n\na) slave & master index files are identical except for segments.gen\n\nb) the master's replication details indicate that the current commit being used is \"indexVersion#1364927050819, generation#2\" but it's list of commits does not include this, it contains a single commit of \"indexVersion#1364927114002, generation#3\"\n\nc) the slave's replication details indicate that the current commit being used is \"indexVersion#1364927050819, generation#2\" and that this is the only commit it has locally.  The slave's information about hte master is consistent with what the master itself reports.\n\n\nI'm not certain, but I believe this is just an optimization where the searcher is not re-opened when the currently opened \"commit\" is identical to the new commit \u2013 this optimization is working on the master, but aparently not on the slave (maybe the slave can't tell that the commits are identical?)  \n\nFWIW: after running this test, i restarted the master and it's replication details were consistent with the list of commit points \u2013 it was using generation #3.   \nYou can also observe the exact same behavior from master's replication details (current generation lower then the generation of any commit point) if you do a hard commit with openSearcher=false.  \n\n\n\nI think most of the behavior here makes sense \u2013 the slave is replicating the commits from the master, even if the master isn't using them yet because it hasn't opened a new searcher.  The key questions i wonder about:\n\n1) why was segments.get different when i ran my experiment? is that normal?\n2) Assuming i'm correct about their being an optimization to not open a new searcher if the commits are identical, can we make this same optimization work on slaves in the case of replication?\n\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13620148",
            "date": "2013-04-02T19:14:30+0000",
            "content": "The slave will actually do a reload if conf files are being replicated - so it's sure to open a new searcher currently. They generally shouldn't change every time though. It's a surprise that the master wouldn't open a new searcher - not sure where that would get short circuited - would have to dig a little. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13620174",
            "date": "2013-04-02T19:40:01+0000",
            "content": "Assuming i'm correct about their being an optimization to not open a new searcher if the commits are identical,\n\nI did some more experimenting and confirmed i was wrong about this \u2013 from Solr's perspective a new searcher is definitely getting opened and warmed.\n\nI'm not sure, but skimming the code I think this discrepancy between the commit point in use and the commit point on disk may just be a result of using  DirectoryReader.openIfChanged in SolrCore.openNewSearcher ... i got lost a bit in the code, but is it possible the reader DirectoryReader is returning null because only the generation changed by the comment, but not any of the actual indexed data? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13620195",
            "date": "2013-04-02T19:53:40+0000",
            "content": "It seems possible:\n\n\n    // If in fact no changes took place, return null:\n    if (reader.getVersion() == segmentInfos.getVersion()) {\n      reader.decRef();\n      return null;\n    }\n\n\n\nversion described as:\n\n\n  /**\n   * Version number when this IndexReader was opened.\n   *\n   * <p>This method\n   * returns the version recorded in the commit that the\n   * reader opened.  This version is advanced every time\n   * a change is made with {@link IndexWriter}.</p>\n   */\n\n\n\nversion is incremented when:\n\n\n  /** Call this before committing if changes have been made to the\n   *  segments. */\n  public void changed() {\n    version++;\n  }\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13620360",
            "date": "2013-04-02T22:33:31+0000",
            "content": "Some more (manual) experimentation (doing empty commits, or commits with openSearcher=false on the master, triggering slave replication to get the slave \"ahead\" and then doing subsequent changes on master & replicating again) seems to confirm that this situation doesn't cause any actual problem in replication \u2013 just confusion when looking at the replication details.  \n\nwe can add automated tests for this type of situation to future proof ourselves against the risk that something like this causes problems w/replication in the future, but let's do that in SOLR-4629 ... i think the crux of this issue is really one of mitigating user confusion.\n\nI suggest we update the admin UI to de-emphasize the comparison of the slave(version+generation) to master(version+generation), and instead emphasize a comparison of the slave(version+generation) with the master(replicateableVersion+replicatableGeneration).\n\nreplicatableGeneration is already available in the details, we should be able to add replicatableVersion easy enough. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13621659",
            "date": "2013-04-04T02:08:23+0000",
            "content": "Here's a patch that updates the Admin UI Replication screen to distinguish the difference between what is currently searchable on the master, and what is currently replicatable.\n\ndifferences are highlighted on the slave only if it differs from what is replicatable on the master (not what is searchable) so this should hopefully help reduce confusion.\n\nConcerns i still have with this patch...\n\n1) Stefan Matheis (steffkes): please ensure i didn't butcher the admin UI js too badly ... i think i've covered all the edge cases.\n2) \"Replicatable\" is not a word, but using \"Replicable\" doesn't have the right definition ... is there a different word we should use here, or should we just do our part to make Replicatable a word? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13621661",
            "date": "2013-04-04T02:13:20+0000",
            "content": "update summary & description based on investigation "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13632958",
            "date": "2013-04-16T16:17:11+0000",
            "content": "updated patch to trunk and switched terminology to \"replicable\" (the more i thought about it, the less i thought that the definition wasn't applicable) "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13633206",
            "date": "2013-04-16T19:06:51+0000",
            "content": "Updated Patch, includes changes from the replication page for the dashboard (were the same information also appear).\n\nMissing Information/Empty Versions are shown as '-' so it should be clear for everyone "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13634041",
            "date": "2013-04-17T13:57:40+0000",
            "content": "I'm concerned about the empty commits opening a new index searcher on the slave. In my testing I found that empty commits do not cause a new searcher to open on master, but do open a new searcher on the slave. This feels like a bug. I'll investigate further. Wondering what peoples thoughts are on this? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13634372",
            "date": "2013-04-17T20:15:34+0000",
            "content": "Joel: please note my earlier comments...\n\nI did some more experimenting and confirmed i was wrong about this \u2013 from Solr's perspective a new searcher is definitely getting opened and warmed.\n\n...you can clearly see in the logs that an \"empty\" commit causes a new Searcher to be opened in any situation \u2013 but when it happens on the master the underlying call to \"DirectoryReader.openIfChanged\" recognizes that the commit point in the directory is identical.  On the slave side it may not recognize this because the physical directory itself can change (ie: index vs index.XXXXXXXX)\n\nEven if there is a bug here (or room for optimization on the slave side) we should track it separately since the crux of thies issue (the UI is comparing apples and oranges) would still be true \u2013 notably in the case where someone may do an openSearcher=false commit on the master, creating a new replicable version for slaves w/o opening a new searcher on the master.\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13634393",
            "date": "2013-04-17T20:35:30+0000",
            "content": "That assignment was done accidentally with keyboard shortcuts.  I tried to load a new URL in the Firefox tab by pressing Ctrl-L and typing the domain name, but apparently Jira's keyboard shortcuts take precedence over the browser. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13634454",
            "date": "2013-04-17T21:22:09+0000",
            "content": "Committed revision 1469073.\nCommitted revision 1469074.\nCommitted revision 1469076. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654211",
            "date": "2013-05-10T10:34:24+0000",
            "content": "Closed after release. "
        }
    ]
}