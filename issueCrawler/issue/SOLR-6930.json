{
    "id": "SOLR-6930",
    "title": "Provide \"Circuit Breakers\" For Expensive Solr Queries",
    "details": {
        "components": [
            "search"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Ref: http://www.elasticsearch.org/guide/en/elasticsearch/guide/current/_limiting_memory_usage.html\n\nES currently allows operators to configure \"circuit breakers\" to preemptively fail queries that are estimated too large rather than allowing an OOM Exception to happen. We might be able to do the same thing.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-08T17:22:06+0000",
            "author": "Mike Drob",
            "content": "The tricky part here is, of course, in estimating how much memory a query will require to complete before actually executing it. The ES page hints that introspecting the query to get information about the field data and then computing size from there is one approach.\n\nI wonder if we can reuse some existing parsing logic to make that process much easier...\n\nGetting the total heap size and the amount currently used by the field cache should be fairly straightforward, but ES warns that it may be innacurate by stale references.\n\nAny ideas? ",
            "id": "comment-14269695"
        },
        {
            "date": "2015-01-08T18:03:47+0000",
            "author": "Hoss Man",
            "content": "isn't this a dup of SOLR-5986? ",
            "id": "comment-14269772"
        },
        {
            "date": "2015-01-08T19:43:59+0000",
            "author": "Anshum Gupta",
            "content": "SOLR-5986 terminates a query after a certain pre-specified time (timeAllowed). This one seems to be about preemptive termination based on resource utilization and not just time (from how I see it).\n\nI'm not a big fan of estimation and pre-emptive termination based on estimates. ",
            "id": "comment-14269937"
        },
        {
            "date": "2015-01-08T20:00:36+0000",
            "author": "Mike Drob",
            "content": "Hoss Man - I think they started out the same, but that issue ended up going in a different direction for implementation.\n\nAnshum Gupta - This would certainly be something of an \"expert\" level feature, and probably will be disabled by default. It might not ever be enable out of the box, but remain reserved for the 1% power users that really value cluster stability over individual queries.\n\nThe ES approach outlines several metrics on which they estimate and terminate - field size, non-field size, and total size. There's more knobs to tune than just those three - result size, result count, term cardinality, etc... One goal would be to make the circuit breakers extensible enough that they can be added to later, once we have experience with them and see which ones are useful.\n\nIt would also be reasonable to include a per-query \"yes, I know what I'm doing, I really want to run this\" flag. Sometimes users run a query and don't realize how many results they are about to get back. Sometimes users run a query and know they are going to get a ton of results back. Both are valid support cases that an operator needs to be aware of and prepared for. ",
            "id": "comment-14269963"
        },
        {
            "date": "2015-01-08T20:04:09+0000",
            "author": "Mike Drob",
            "content": "I'm not a big fan of estimation and pre-emptive termination based on estimates.\nI agree with the implied position about this being hard to get right. It's very easy to set limits that are too high so as to be useless or too low as to be suffocating. ",
            "id": "comment-14269968"
        },
        {
            "date": "2015-01-08T22:13:53+0000",
            "author": "Mark Miller",
            "content": "Does SOLR-5986 actually use fieldcache sizing estimates to prevent OOM's or asking for too many rows back? I thought it was more about timing out bad queries...overlap, but large differences. ",
            "id": "comment-14270122"
        },
        {
            "date": "2015-01-08T22:16:04+0000",
            "author": "Mark Miller",
            "content": "I'm not a big fan of estimation and pre-emptive termination based on estimates.\n\nYou would be if you operated a SolrCloud cluster with various clients doing different things. You need to be able to lock things down to prevent OOM's (which dictate restarts). For someone like you, you can turn off the circuit breakers or not enable them, but no doubt they are of great value for anyone running SolrCloud as a service (a common use case). ",
            "id": "comment-14270130"
        },
        {
            "date": "2015-01-09T01:23:56+0000",
            "author": "Anshum Gupta",
            "content": "Sure, nothing against having this at all. My main point was that this issue is different from the other one. They are related and overlapping but trying to solve different issues. ",
            "id": "comment-14270351"
        },
        {
            "date": "2018-09-19T14:08:16+0000",
            "author": "Randy Fradin",
            "content": "I would love to see this feature get implemented. Understandable that it would be disabled by default, but I'm operating exactly the type of large SolrCloud cluster with many clients that Mark Miller describes and having a circuit breaker would help everyone sleep better at night knowing one mistaken query can't take out a node by causing too much memory allocation.\n\nI would think there should be a configurable \"soft limit\" and \"hard limit\" so you get a WARN in the logs if the soft limit is breached and the query is failed preemptively only if the hard limit is reached. That way if the memory cost of a query is creeping up due to growth in the data set, you can get an early warning that things are headed in a bad direction before queries start failing. In fact the INFO line that's logged with every query completion could include estimated memory required to complete the query.\n\nOf course this sounds complex to implement and I'm not at all a Solr expert so I don't really know where to begin - any of the experts know in broad strokes what the memory estimation equation would look like ?\n\n\u00a0 ",
            "id": "comment-16620639"
        },
        {
            "date": "2018-09-19T14:40:19+0000",
            "author": "Erick Erickson",
            "content": "You do already have a kind of \"warn\" here, you can configure the \"slow query logging\". It's not quite what you're looking for, but may be useful in the interim. ",
            "id": "comment-16620689"
        },
        {
            "date": "2018-09-19T16:31:51+0000",
            "author": "Randy Fradin",
            "content": "Thanks Erick Erickson we do use that and it is useful, but time spent processing a query is only a rough proxy for the memory expense of a query, plus of course we're missing the blocking feature (which timeAllowed sort of gives you on the time dimension, except that it's opt-in from the client not enforceable on all queries by the server, and can't be used with cursorMark, and can't be relied on to kill a query when the time expires regardless of where it is in its execution process).\n\nWe have problems both with poorly thought out queries leading to OOM and with queries that don't quite lead to an OOM but do cause memory allocation to\u00a0happen fast enough that the garbage collector can't keep up, leading to full GC pauses for up to 10s of seconds, sometimes long enough to cause the ZooKeeper session to expire and put all cores into the down status and subsequent recovery process.\n\nLong way of saying, a memory circuit breaker would be very useful  ",
            "id": "comment-16620818"
        },
        {
            "date": "2018-09-19T18:20:25+0000",
            "author": "Susheel Kumar",
            "content": "I agree as well.\u00a0 We\u00a0have been using timeAllowed but\u00a0i'll vote for\u00a0something more sophisticated which can\u00a0prevent\u00a0OOM\u00a0more predictably.\u00a0 ",
            "id": "comment-16620993"
        }
    ]
}