{
    "id": "SOLR-4328",
    "title": "Simultaneous multiple connections to Solr example often fail with various IOExceptions",
    "details": {
        "affect_versions": "3.6.2,                                            4.0",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Cannot Reproduce"
    },
    "description": "In ManifoldCF, we've been seeing problems with SolrJ connections throwing java.net.SocketException's.  See CONNECTORS-616 for details as to exactly what varieties of this exception are thrown, but \"broken pipe\" is the most common.  This occurs on multiple Unix variants as stated.  (We also occasionally see exceptions on Windows, but they are much less frequent and are different variants than on Unix.)\n\nThe exceptions seem to occur during the time an initial connection is getting established, and seems to occur randomly when multiple connections are getting established all at the same time.  Wire logging shows that only the first few headers are sent before the connection is broken.  Solr itself does not log any error.  A retry is usually sufficient to have the transaction succeed.\n\nThe Solr Connector in ManifoldCF has recently been upgraded to rely on SolrJ, which could be a complicating factor.  However, I have repeatedly audited both the Solr Connection code and the SolrJ code for best practices, and while I found a couple of problems, nothing seems to be of the sort that could cause a broken pipe.  For that to happen, the socket must be closed either on the client end or on the server end, and there appears to be no mechanism for that happening on the client end, since multiple threads would have to be working with the same socket for that to be a possibility.\n\nIt is also true that in ManifoldCF we disable the automatic retries that are normally enabled for HttpComponents HttpClient.  These automatic retries likely mask this problem should it be occurring in other situations.\n\nPlaces where there could potentially be a bug, in order of likelihood:\n\n(1) Jetty.  Nobody I am aware of has seen this on Tomcat yet.  But I also don't know if anyone has tried it.\n(2) Solr servlet.  If it is possible for a servlet implementation to cause the connection to drop without any exception being generated, this would be something that should be researched.\n(3) HttpComponents/HttpClient.  If there is a client-side issue, it would have to be because an httpclient instance was closing sockets from other instances.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Karl Wright",
            "id": "comment-13559616",
            "date": "2013-01-22T13:16:24+0000",
            "content": "The problem also shows up when Solr is run on Tomcat6.  This rules out Jetty as the source of the issue. "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13561112",
            "date": "2013-01-23T21:37:47+0000",
            "content": "I created a ManifoldCF test that creates a mock Solr web application, and then indexes 100 documents.  We do not see any IOException's from this test, on either Windows or Ubuntu.\n\nI think this proves conclusively that Solr itself is causing the problem.\n\nFurthermore, when we change the client code so that connections are never reused (at the expense, of course, of creating a new connection on every operation), the problem goes away.  It therefore seems clear that Solr is closing the socket out from under the application server, so that client-side connection pooling and re-use cannot be done properly. "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13562743",
            "date": "2013-01-25T14:54:30+0000",
            "content": "The Solr connector in the ManifoldCF project worked around this problem for the moment by doing two things:\n\n(1) Detecting the broken pipe error and interpreting that as meaning that a fixed number of retries are required;\n(2) Turning on stale connection checks in HttpClient.\n\nThis is workable but not ideal.  The fact that Solr forcibly closes connections means that connection pooling on the client side is essentially a futile effort, and thus there are significant performance losses going to be associated with this behavior.  It is therefore in everyone's interest, I believe, to get Solr to stop doing what it is doing.\n\nIf I get any time this weekend I will try and propose a patch. "
        },
        {
            "author": "buthing",
            "id": "comment-13789323",
            "date": "2013-10-08T15:58:26+0000",
            "content": "We are having essentially the same problem. Is there any intent to try and fix this? "
        },
        {
            "author": "Markus Schuch",
            "id": "comment-13789475",
            "date": "2013-10-08T18:22:28+0000",
            "content": "We had also \"broken pipe\" IOException with MCF and Solr 4 using Tomcat.\nOur problem was that several update requests issued by mcf hit the request header size limit of the servlet container.\nIncreasing the limit solved it. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14222464",
            "date": "2014-11-23T19:10:35+0000",
            "content": "SOLR-4509 may address this issue. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14272646",
            "date": "2015-01-10T18:45:25+0000",
            "content": "Now the relevant fix has likely spun off into SOLR-6931. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-15222653",
            "date": "2016-04-02T02:10:44+0000",
            "content": "I'm going to resolve this. I think related issues should now have resolved this type of thing. Feel free to reopen if it's still reproducible.  "
        }
    ]
}