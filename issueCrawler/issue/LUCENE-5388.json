{
    "id": "LUCENE-5388",
    "title": "Eliminate construction over readers for Tokenizer",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/other"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "In the modern world, Tokenizers are intended to be reusable, with input supplied via #setReader. The constructors that take Reader are a vestige. Worse yet, they invite people to make mistakes in handling the reader that tangle them up with the state machine in Tokenizer. The sensible thing is to eliminate these ctors, and force setReader usage.",
    "attachments": {
        "LUCENE-5388.patch": "https://issues.apache.org/jira/secure/attachment/12622106/LUCENE-5388.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13864742",
            "author": "Robert Muir",
            "content": "+1, its really silly its this way. I guess its the right thing to do this for 5.0 only: i wish we had done it for 4.0, but it is what it is.\n\nShould be a rather large and noisy change unfortunately. I can help, let me know. ",
            "date": "2014-01-07T22:01:00+0000"
        },
        {
            "id": "comment-13865217",
            "author": "Michael McCandless",
            "content": "+1, it's weird that the ctor takes a Reader and we also have a setReader.  This is a relic from the pre-reuse days... ",
            "date": "2014-01-08T09:08:28+0000"
        },
        {
            "id": "comment-13865222",
            "author": "Uwe Schindler",
            "content": "+1, but delay this until 5.0. Because there are many Tokenizers outside we should keep backwards compatibility. ",
            "date": "2014-01-08T09:13:19+0000"
        },
        {
            "id": "comment-13865385",
            "author": "Benson Margulies",
            "content": "Uwe, what's that mean practically? No PR yet? A PR just in trunk? Merging my recent doc to a 4.x branch? A feature branch where this goes to be merged in when the time is ripe? ",
            "date": "2014-01-08T12:53:53+0000"
        },
        {
            "id": "comment-13865399",
            "author": "Uwe Schindler",
            "content": "Commit to trunk only, not backport to branch_4x. ",
            "date": "2014-01-08T13:13:11+0000"
        },
        {
            "id": "comment-13865401",
            "author": "Robert Muir",
            "content": "Benson, he just means the patch would only be committed to trunk. I agree with this... ",
            "date": "2014-01-08T13:13:49+0000"
        },
        {
            "id": "comment-13865573",
            "author": "Benson Margulies",
            "content": "How about we start by adding ctors that don't require a reader, and do treat them as 4.x fodder? ",
            "date": "2014-01-08T15:53:52+0000"
        },
        {
            "id": "comment-13865580",
            "author": "Benson Margulies",
            "content": "setReader throws IOException, but the existing constructors don't. Analyzer 'createComponents' doesn't. How to sort this out? ",
            "date": "2014-01-08T16:05:31+0000"
        },
        {
            "id": "comment-13865620",
            "author": "Robert Muir",
            "content": "\nHow about we start by adding ctors that don't require a reader, and do treat them as 4.x fodder?\n\nI'd prefer not, because then there needs to be very sophisticated backwards compat to know which one to call. and subclassing gets complicated.\n\nI would really prefer we just choose to fix the API, either 1) 5.0-only or 2) break it in a 4.x release\n\nFrom my perspective, Benson would be probably be the one most impacted by such a 4.x break. So if he really wants to do this, I have no problem.\n\n\nsetReader throws IOException, but the existing constructors don't. Analyzer 'createComponents' doesn't. How to sort this out?\n\nI dont see the problem. I think createComponents doesnt need to throw exception: instead the logic of Analyzer.tokenStream changes slightly, to call components.setReader(r) in both cases of the if-then-else. Make sense?\n\n ",
            "date": "2014-01-08T16:44:02+0000"
        },
        {
            "id": "comment-13865626",
            "author": "Benson Margulies",
            "content": "OK, I see. If we don't do compatibility, then no one calls setReader in createComponents, and all is well. OK, I'm proceeding. ",
            "date": "2014-01-08T16:48:39+0000"
        },
        {
            "id": "comment-13865634",
            "author": "Benson Margulies",
            "content": "Why does the reader get passed to createComponents in this model? Should that param go away? ",
            "date": "2014-01-08T16:53:49+0000"
        },
        {
            "id": "comment-13865661",
            "author": "Benson Margulies",
            "content": "https://github.com/apache/lucene-solr/pull/16 is available for your read pleasure to see what these changes look like. ",
            "date": "2014-01-08T17:26:13+0000"
        },
        {
            "id": "comment-13865667",
            "author": "Benson Margulies",
            "content": "Robert Muir Next frontier is TokenizerFactory.\n\nDo we change #create to not take a reader, or do we add 'throws IOException'? Based on comments above, I'd think we take out the reader.\n\nMichael McCandless I would love help. If you tell me your github id, I'll add you to my repo, and you can take up some of the ton of editing. ",
            "date": "2014-01-08T17:37:09+0000"
        },
        {
            "id": "comment-13865675",
            "author": "Robert Muir",
            "content": "\nWhy does the reader get passed to createComponents in this model? Should that param go away?\n\nYes: please nuke it! ",
            "date": "2014-01-08T17:52:14+0000"
        },
        {
            "id": "comment-13865677",
            "author": "Robert Muir",
            "content": "\nDo we change #create to not take a reader, or do we add 'throws IOException'? Based on comments above, I'd think we take out the reader.\n\nYes, please. its not like a factory can do anything fancy with it anyway: its only called the first time, subsequent readers are invoked with setReader. so this is just more of the same, please nuke it! ",
            "date": "2014-01-08T17:53:46+0000"
        },
        {
            "id": "comment-13865678",
            "author": "Uwe Schindler",
            "content": "Yes, createComponents should no longer get a Reader, too! Same for factories. The factory just creates the instance, setting the reading is up to the consumer. ",
            "date": "2014-01-08T17:57:40+0000"
        },
        {
            "id": "comment-13865681",
            "author": "Uwe Schindler",
            "content": "The cool thing is: In Analyzer we may simplify things like the initReader() protected method. We should also look at those APIs. Most of the code in Analyzer is to work around the ctor / setReader stuff. ",
            "date": "2014-01-08T17:59:19+0000"
        },
        {
            "id": "comment-13865907",
            "author": "Benson Margulies",
            "content": "Robert Muir or Michael McCandless I could really use some help here with TestRandomChains. ",
            "date": "2014-01-08T21:25:45+0000"
        },
        {
            "id": "comment-13865913",
            "author": "Robert Muir",
            "content": "its a monster... ",
            "date": "2014-01-08T21:28:30+0000"
        },
        {
            "id": "comment-13865925",
            "author": "Benson Margulies",
            "content": "It does something complex with the input reader in a createComponents. the challenge is to move all that to initReader so that it works. I think I'm too fried from 1000 other edits, I'll look in after dinner but anyone who wants to grab my branch from github and pitch in is more than welcome. ",
            "date": "2014-01-08T21:34:52+0000"
        },
        {
            "id": "comment-13865930",
            "author": "Robert Muir",
            "content": "Yes: well the CheckThatYouDidntReadAnythingReaderWrapper can likely be removed. you are removing that possibility entirely. so it should get simpler... ill have a look at your branch tonight and try to help with some of this stuff, its hairy. ",
            "date": "2014-01-08T21:40:48+0000"
        },
        {
            "id": "comment-13866077",
            "author": "Benson Margulies",
            "content": "You got me off the dot on RandomChains. ",
            "date": "2014-01-08T23:53:58+0000"
        },
        {
            "id": "comment-13866131",
            "author": "Benson Margulies",
            "content": "I've got all of lucene to compile, and a bunch of tests running. ",
            "date": "2014-01-09T00:47:44+0000"
        },
        {
            "id": "comment-13866227",
            "author": "Benson Margulies",
            "content": "I have Solr test failures in PreAnalyzedField, which has some stubborn fondness for the idea of a reader passed to a constructor. But that seems to be all that's broken; a few Solr failures (based on 'ant test'). ",
            "date": "2014-01-09T02:41:11+0000"
        },
        {
            "id": "comment-13866229",
            "author": "Robert Muir",
            "content": "The changes look great overall. This particular one is tricky. Lemme take a look... ",
            "date": "2014-01-09T02:43:45+0000"
        },
        {
            "id": "comment-13866235",
            "author": "Robert Muir",
            "content": "\ndiff --git a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java\nindex 6ac073a..534c166 100644\n--- a/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java\n+++ b/lucene/analysis/common/src/java/org/apache/lucene/analysis/util/AbstractAnalysisFactory.java\n@@ -75,7 +75,7 @@ public abstract class AbstractAnalysisFactory {\n     return originalArgs;\n   }\n \n-   /** this method can be called in the {@link org.apache.lucene.analysis.util.TokenizerFactory#create(java.io.Reader)}\n+   /** this method can be called in the {@link org.apache.lucene.analysis.util.TokenizerFactory#create()}\n    * or {@link org.apache.lucene.analysis.util.TokenFilterFactory#create(org.apache.lucene.analysis.TokenStream)} methods,\n    * to inform user, that for this factory a {@link #luceneMatchVersion} is required */\n   protected final void assureMatchVersion() {\ndiff --git a/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java b/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java\nindex fb741a5..3d3e8e2 100644\n--- a/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java\n+++ b/solr/core/src/java/org/apache/solr/schema/PreAnalyzedField.java\n@@ -290,6 +290,7 @@ public class PreAnalyzedField extends FieldType {\n   \n     @Override\n     public final void reset() throws IOException {\n+      super.reset();\n       /* This is called after setReader, so here's how we can get the input we care about ... */\n       this.input = super.input;\n       // NOTE: this acts like rewind if you call it again\n\n ",
            "date": "2014-01-09T02:56:45+0000"
        },
        {
            "id": "comment-13866292",
            "author": "Robert Muir",
            "content": "Benson's changes, merged up to latest trunk as a patch for review.\n\nI further simplified the PreAnalyzed stuff (only possible due to this change), because it still had problems, and fixed the test for uppercasefilter.\n\nI think this is good to go. ",
            "date": "2014-01-09T04:02:54+0000"
        },
        {
            "id": "comment-13866561",
            "author": "Benson Margulies",
            "content": "Should I try to get the branch in git to match the .patch, or should I just let you proceed from here? I guess that might depend on reactions of others. ",
            "date": "2014-01-09T11:19:40+0000"
        },
        {
            "id": "comment-13866617",
            "author": "Robert Muir",
            "content": "Benson, dont worry about it, I think its good. I just put up the patch so that Uwe might look at it. ",
            "date": "2014-01-09T12:56:53+0000"
        },
        {
            "id": "comment-13866627",
            "author": "Uwe Schindler",
            "content": "I am fine with this patch in trunk only. We can decide later if we backport. ",
            "date": "2014-01-09T13:11:05+0000"
        },
        {
            "id": "comment-13866640",
            "author": "ASF subversion and git services",
            "content": "Commit 1556801 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1556801 ]\n\nLUCENE-5388: remove Reader from Tokenizer ctor (closes #16) ",
            "date": "2014-01-09T13:27:48+0000"
        },
        {
            "id": "comment-13866641",
            "author": "Uwe Schindler",
            "content": "Juhu! ",
            "date": "2014-01-09T13:31:18+0000"
        },
        {
            "id": "comment-13866643",
            "author": "Robert Muir",
            "content": "Marking fixed for 5.0.\nThanks a lot Benson for doing all the grunt work here.\n\nNote: If you really want a backport please just open an issue and hash it out. ",
            "date": "2014-01-09T13:32:39+0000"
        },
        {
            "id": "comment-14332960",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:02:49+0000"
        }
    ]
}