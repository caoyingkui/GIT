{
    "id": "SOLR-10475",
    "title": "DIH JdbcDataSource SqlEntityProcessor - Support Child-free parents after all children has been consumed",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "5.5.1",
        "resolution": "Cannot Reproduce",
        "status": "Closed"
    },
    "description": "Assume DIH's feature of zipping parents and children is used. Here is sample dih-config.xml:\n\n\n    <dataConfig>\n\t<document>\n\t\t<entity name=\"parent\" processor=\"SqlEntityProcessor\" query=\"SELECT * FROM PARENT ORDER BY id\">\t\t\n\t\t\t<entity name=\"child_1\" processor=\"SqlEntityProcessor\"\n\t\t\t\twhere=\"parent_id=parent.id\" query=\"SELECT * FROM CHILD_1 ORDER BY parent_id\" join=\"zipper\" >\n\t\t\t</entity>\t\t\t\n\t\t</entity>\n\t</document>\n    </dataConfig>\n\n\n\nOne might come up with the issue when:\n\n\n\tOracle Database is used;\n\tat some point of joining there are no more children documents; thus the child's ResultSet is closed;\n\tparent documents are not finished; thus ResultSet is still in process;\n\tattempting to find child for the next parent is failing due to closed ResultSet\n\n\n\nHere is stacktrace:\n\n\norg.apache.solr.handler.dataimport.DataImportHandlerException: java.sql.SQLRecoverableException: Closed Resultset: next\nat org.apache.solr.handler.dataimport.DataImportHandlerException.wrapAndThrow(DataImportHandlerException.java:61)\nat org.apache.solr.handler.dataimport.JdbcDataSource$ResultSetIterator.hasnext(JdbcDataSource.java:434)\nat org.apache.solr.handler.dataimport.JdbcDataSource$ResultSetIterator$1.hasNext(JdbcDataSource.java:350)\nat com.google.common.collect.Iterators$PeekingImpl.hasNext(Iterators.java:1216)\nat org.apache.solr.handler.dataimport.Zipper.supplyNextChild(Zipper.java:65)\nat org.apache.solr.handler.dataimport.EntityProcessorBase.getNext(EntityProcessorBase.java:127)\nat org.apache.solr.handler.dataimport.SqlEntityProcessor.nextRow(SqlEntityProcessor.java:75)\nat org.apache.solr.handler.dataimport.EntityProcessorWrapper.nextRow(EntityProcessorWrapper.java:244)\nat org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:475)\nat org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:514)\nat org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:414)\nat org.apache.solr.handler.dataimport.DocBuilder.doFullDump(DocBuilder.java:329)\nat org.apache.solr.handler.dataimport.DocBuilder.execute(DocBuilder.java:232)\nat org.apache.solr.handler.dataimport.DataImporter.doFullImport(DataImporter.java:416)\nat org.apache.solr.handler.dataimport.DataImporter.runCmd(DataImporter.java:480)\nat org.apache.solr.handler.dataimport.DataImporter$1.run(DataImporter.java:461)\nCaused by: java.sql.SQLRecoverableException: Closed Resultset: next\nat oracle.jdbc.driver.OracleResultSetImpl.next(OracleResultSetImpl.java:238)\nat org.apache.solr.handler.dataimport.JdbcDataSource$ResultSetIterator.hasnext(JdbcDataSource.java:426)\n... 14 more",
    "attachments": {
        "SOLR-10475.patch": "https://issues.apache.org/jira/secure/attachment/12862924/SOLR-10475.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-11T21:34:27+0000",
            "content": "Hey, Pavel\n\nIt seems like the issue you're talking about was fixed somewhere in SOLR-2199 / SOLR-8612: the thing was in JdbcDataSource#ResultSetIterator implementation (the very idea to throw exceptions on hasNext()...)\n\nI checked a small test - SOLR-10475.patch. In TestSqlEntityProcessor DIH config like\n\n\n<dataConfig> \n...\n<document name=\"TestSqlEntityProcessor\"> \n<entity name=\"People\" ... query=\"SELECT ID, NAME, COUNTRY_CODE FROM PEOPLE WHERE DELETED != 'Y' ORDER BY ID\" > \n...\n<entity name=\"Countries\" ... where=\"ID=People.ID\" join=\"zipper\" query=\"SELECT PEOPLE.ID, CODE, COUNTRY_NAME FROM COUNTRIES LEFT JOIN PEOPLE ON COUNTRIES.CODE=PEOPLE.COUNTRY_CODE WHERE PEOPLE.DELETED != 'Y' ORDER BY PEOPLE.ID \" > \n...\n</entity> \n</entity> \n</document> \n</dataConfig> \n\n\n\nis in use. Let's try a men with biggest ID and without appropriate countries's code. I had one and it works. So maybe latest SOLR release will help you (or patches from appropriate Jiras).\n\nAnyway, my personal experience with DIH is this: best way to deal with DIH is to avoid DIH.\n\n ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-15964991"
        },
        {
            "date": "2017-04-14T15:49:30+0000",
            "content": "Andrey, thank you for your valuable input.\n\nLooks like the issue was related to Oracle jdbc in particular. Nevertheless, the issue is not reproducible on Solr 6.4.2.\nIMO we can close the issue as Non Reproducible (at least on latest builds).\n\nThank you, ",
            "author": "Pavel Vasilyev",
            "id": "comment-15969184"
        },
        {
            "date": "2017-04-14T15:52:35+0000",
            "content": "With Solr 6.4.2 the DIH is working as expected without any side effects. Additional case with &maxRows limit is also working fine. ",
            "author": "Pavel Vasilyev",
            "id": "comment-15969190"
        },
        {
            "date": "2017-04-24T07:27:31+0000",
            "content": "I tried to use SOLR-10475.patch as a reproducer at 6.0 (pre SOLR-2199, SOLR-8612)\nSo far this test neither impacts 6.0 nor master. Testcases are welcome.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-15980806"
        }
    ]
}