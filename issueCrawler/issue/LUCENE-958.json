{
    "id": "LUCENE-958",
    "title": "MultiSearcher Filtering with more than one index is broken",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.2",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "Using filtering on MultiSarcher with more than one index is not working right.\n\nProbable the best way to describe the problem is to give a small example:\nSuppose we have 2 Indexes with two documents each:\n\nIndex1 \n{Doc(id:\"A\", content:\"..\"), Doc(id:\"B\", content:\"..\")}\nIndex2 \n{Doc(id:\"C\", content:\"..\"), Doc(id:\"D\", content:\"..\")}\n\nWhen executing a query that returns all the documents and applying a QueryFilter that generated the following BitSet (1, 0, 0, 0), it should filter all the documents but first; the real results are: Doc(id:\"A\") and Doc(id:\"B\"), this because the MultiSearcher applies the BitSet filter from the bitset's position 0 for each Index.\n\nThe right way is to split the bitset in peaces: Index1 to get the bites form 0-1 and Index2 bites from 2-3.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-07-13T20:35:36+0000",
            "content": "Actually, I retract that I think it's broken.\nFilter.getBits() will be called for each sub-index, so a new BitSet should be returned specific to each sub-index.   Having a Filter implementation that returns the same BitSet for each sub index is incorrect. ",
            "author": "Yonik Seeley",
            "id": "comment-12512610"
        },
        {
            "date": "2007-07-14T11:35:03+0000",
            "content": "I don't understand the invalid status of this issue. If the filter provided to the multisearcher have to implement itself the document offset handling, then there an API issue : MultiSearcher implements Searchable. ",
            "author": "Nicolas Lalev\u00e9e",
            "id": "comment-12512706"
        },
        {
            "date": "2007-07-14T13:36:16+0000",
            "content": "Think of a Filter as symbolic rather than concrete (e.g. the set of documents matching the query \"inStock:true\")\nFilter.getBits is passed an IndexReader as an argument, and returns the actual ids (via a BitSet) for that reader only.\nThus, an implementation that returns the same BitSet regardless of what IndexReader it is passed is not going to work correctly. ",
            "author": "Yonik Seeley",
            "id": "comment-12512714"
        },
        {
            "date": "2007-07-16T09:58:19+0000",
            "content": "I had the same feeling as you Ion because we both generate the filter's bitset outside of the filter itself, assuming that the filter will always be used with the correct IndexReader.\n\nBut as pointed by Yonik, the Filter API expect the filter to give a bitset corresponding to provided reader. So the API actually is consistent. ",
            "author": "Nicolas Lalev\u00e9e",
            "id": "comment-12512902"
        }
    ]
}