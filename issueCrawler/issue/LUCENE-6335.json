{
    "id": "LUCENE-6335",
    "title": "fail tests on threadlocal leaks",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Test"
    },
    "description": "I know this requires us to do things like close our Analyzers in tests, but I think we should do it. just experimenting i found other leaks, e.g. in LineFileDocs.\n\n\n   [junit4] ERROR   0.00s J0 | TestForceMergeForever (suite) <<<\n   [junit4]    > Throwable #1: java.lang.IllegalStateException: ThreadLocal leaks were found: \n   [junit4]    > 1. thread=SUITE-TestForceMergeForever-seed#[AF7141C55A57350E]-worker value=WeakReference<HashMap<?,Analyzer$TokenStreamComponents>>\n   [junit4]    > 2. thread=SUITE-TestForceMergeForever-seed#[AF7141C55A57350E]-worker value=LineFileDocs$DocState",
    "attachments": {
        "LUCENE-6335.patch": "https://issues.apache.org/jira/secure/attachment/12702384/LUCENE-6335.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14346460",
            "author": "Robert Muir",
            "date": "2015-03-04T06:12:25+0000",
            "content": "here is a REALLY hacky patch. I based it on tomcat's threadlocal leak detector, but with some simpler/imperfect logic as a start, since e.g. we aren't wrapping tests in custom classloader or any of that stuff.\n\nI only fixed TestDemo and LineFileDocs so far and didnt look much more at failures. "
        },
        {
            "id": "comment-14346470",
            "author": "Robert Muir",
            "date": "2015-03-04T06:21:35+0000",
            "content": "A lot of the hacky stuff was to get something useful enough to track down the leak. It makes the code ugly to print \"WeakReference<HashMap<?,Analyzer$TokenStreamComponents>>\" but this is much more useful than just \"java.lang.ref.WeakReference\" "
        },
        {
            "id": "comment-14346514",
            "author": "Robert Muir",
            "date": "2015-03-04T07:11:44+0000",
            "content": "updated patch: I started fixing some of the analyzers tests. "
        },
        {
            "id": "comment-14347961",
            "author": "Robert Muir",
            "date": "2015-03-05T02:02:51+0000",
            "content": "Updated patch. I fixed a few tests. There are still lots of leaks and systematic problems.\n\nOnly one real bugfix, SynonymFilterFactory leaked an analyzer it created internally. Otherwise it is just test fixes... I plan to commit these test fixes soon and just update patch with the test-framework stuff. "
        },
        {
            "id": "comment-14348356",
            "author": "Dawid Weiss",
            "date": "2015-03-05T08:10:46+0000",
            "content": "I reviewed the test rule. It looks crazily bound to the default JDK implementation (all that reflection) but there seems to be no other way to get hold of the thread locals map, so be it.\n\nOverall it looks good. I'm slightly concerned with this:\n\n+    ClassLoader cl = clazz.getClassLoader();\n+    // our crazy heuristic: threadlocal contains something from non-bootstrap loader.\n+    if (cl != null) {\n+      throw new ThreadLocalLeakException(getPrettyClassName(clazz));\n+    }\n\n\nbecause I planned to isolate the test runner's classes from the test classes at some point by forking a separate classloader... But there are workarounds for this and these can be applied and explored when the actual problem shows up.\n\n+1 "
        },
        {
            "id": "comment-14348402",
            "author": "Adrien Grand",
            "date": "2015-03-05T08:37:36+0000",
            "content": "I plan to commit these test fixes soon and just update patch with the test-framework stuff.\n\n+1 "
        },
        {
            "id": "comment-14348680",
            "author": "Robert Muir",
            "date": "2015-03-05T12:20:14+0000",
            "content": "\nbecause I planned to isolate the test runner's classes from the test classes at some point by forking a separate classloader... But there are workarounds for this and these can be applied and explored when the actual problem shows up.\n\nTomcat code is actually doing all this in a custom classloader.\n\nBut yeah, there are thousands more tests (and some real bugs) to fix before we can add the test rule. I have concerns about this craziness too, but it does seem to work at least for our purposes in lucene. "
        },
        {
            "id": "comment-14349076",
            "author": "ASF subversion and git services",
            "date": "2015-03-05T16:56:12+0000",
            "content": "Commit 1664404 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1664404 ]\n\nLUCENE-6335: test fixes, and one real fix to synonymfilterfactory (missing analyzer.close) "
        },
        {
            "id": "comment-14349110",
            "author": "ASF subversion and git services",
            "date": "2015-03-05T17:15:40+0000",
            "content": "Commit 1664421 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1664421 ]\n\nLUCENE-6335: test fixes, and one real fix to synonymfilterfactory (missing analyzer.close) "
        }
    ]
}