{
    "id": "SOLR-12321",
    "title": "Use of builtin java serialization for admin response breaks 7.3 compatibility",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.3,                                            7.3.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Premise: During an upgrade I should be able to run a 7.3 pull replica against a 7.2 tlog leader. Or vice versa.\n\u00a0\nAdding a new method[1] to SolrResponse has broken binary compatibility. When I try to register a new pull replica using the admin api[2]\u00a0I get an HTTP 500 responseI see this error logged: java.io.InvalidClassException: org.apache.solr.client.solrj.SolrResponse; local class incompatible: stream classdesc serialVersionUID = 3945300637328478755, local class serialVersionUID = -793110010336024264\n\u00a0\nThe replica actually seems to register ok it just can't read the response because the bytes from the 7.2 leader include a different serialVersionUID.\u00a0\n\u00a0\nShould SolrResponse include a serialVersionIUID? All subclasses too.\nMark Miller's advice is that the project should never use builtin java serialization.\n\u00a0\nIt looks like stock java serialization is only used for these admin responses. Query responses use\u00a0JavaBinCodec instead..\n\u00a0\nFull(ish) stack trace:\n\nERROR HttpSolrCall null:org.apache.solr.common.SolrException: java.io.InvalidClassException: org.apache.solr.client.solrj.SolrResponse; local class incompatible: st\nream classdesc serialVersionUID = 3945300637328478755, local class serialVersionUID = -7931100103360242645\n\u00a0 \u00a0 at org.apache.solr.client.solrj.SolrResponse.deserialize(SolrResponse.java:73)\n\u00a0 \u00a0 at org.apache.solr.handler.admin.CollectionsHandler.sendToOCPQueue(CollectionsHandler.java:348)\n\u00a0 \u00a0 at org.apache.solr.handler.admin.CollectionsHandler.invokeAction(CollectionsHandler.java:256)\n\u00a0 \u00a0 at org.apache.solr.handler.admin.CollectionsHandler.handleRequestBody(CollectionsHandler.java:230)\n\u00a0 \u00a0 at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:195)\n\u00a0 \u00a0 at org.apache.solr.servlet.HttpSolrCall.handleAdmin(HttpSolrCall.java:736)\n\u00a0 \u00a0 at org.apache.solr.servlet.HttpSolrCall.handleAdminRequest(HttpSolrCall.java:717)\n\u00a0 \u00a0 at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:498)\n\u00a0 \u00a0 at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:384)\n\u00a0 \u00a0 at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:330)\n\u00a0\n\n\u00a0\n[1]\u00a0https://github.com/apache/lucene-solr/commit/5ce83237e804ac1130eaf5cf793955667793fee0#diff-b809fa594f93aa6805381029a188e4e2R46\n[2]\u00a0http://localhost:8983/solr/admin/collections?action=ADDREPLICA&collection=blah&shard=shard1&node=blah&type=pull",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-08T05:05:33+0000",
            "content": "Yeah, this should have been done by serializing the response map itself with JavaBin or something. There is always a better option than built in Java serialization. I actually reviewed this and put it in way back, so it's my fault. We should have pulled the map from the object and serialized that with JavaBin or stored it as JSON or or or. ",
            "author": "Mark Miller",
            "id": "comment-16466871"
        },
        {
            "date": "2018-05-08T12:56:55+0000",
            "content": "Something to add to invalid API checks?\n\nHmm, this is what we have version request parameter for, isn't it?\n\n(org.apache.solr.common.params.CommonParams)\n/** version parameter to check request-response compatibility */\nString VERSION =\"version\";\n\nWhat if we bump request version from 2.2 to 2.3 in a bugfix 7.3.2 release which also switches to JavaBin serialization. Then we have a mechanism for server to serve different response to a 2.3 client than a 2.2 client.\n\nAfter that we could release a 7.2.2 release with ability to serve either Java or Javabin serialised SolrResponse depending on version param. In case of serialised object stored in Blob/ZK, the version may be lost so a fallback parsing may be necessary? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16467382"
        },
        {
            "date": "2018-05-08T20:00:49+0000",
            "content": "This has been reported before \u2013 SOLR-7055  and comes up again when SolrResponse changes. ",
            "author": "David Smiley",
            "id": "comment-16467893"
        }
    ]
}