{
    "id": "SOLR-12925",
    "title": "Configsets API should allow update of existing configset",
    "details": {
        "type": "Improvement",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [
            "configset-api"
        ],
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "6.6.5,                                            master (8.0)"
    },
    "description": "With the Configsets API it is not possible to update a configset once it has been created: the UPLOAD action\u00a0will throw an exception \"The configuration X already exists in zookeeper\".\u00a0 This is different behavior than the\u00a0other mechanisms that allow uploading either a new or updated\u00a0configuration to Zookeeper.\n\nFor someone trying to update a configuration, the only path given through the APIs is to delete the associated collection and configuration and start over from scratch. That, or a one-off invocation of the zk local scripts when these APIs are far superior for remote management .\n\n\u00a0\n\nThanks,\n Alex",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16663845",
            "content": "I have run into the same awkwardness...  I have a script that uploads my security.json, and then packages up the configset and uploads it to Solr.   \n\nHowever, if I make changes to the schema through the Admin app, how do I preserve those locally?   It's awkward to download the managed-schema.xml....    \n\nI've been experiementing with having \"migrations\" (inspired by Rails ActiveRecord) in my /configsets/my_config/migrations directory.   It's a series of shell scripts in a numbered order, and I run them after uploading the configset to change things through the Schema API.   At this point, I'm not sure if it helps or not!  ",
            "author": "Eric Pugh",
            "date": "2018-10-25T14:55:48+0000"
        },
        {
            "id": "comment-16665370",
            "content": "If a method other than config sets api is possible and you have gradle then you can version control the configset and quickly up/down it for diffing/updating with the gradle plugin I wrote. Obviously a workaround, but hopefully helpful. https://plugins.gradle.org/plugin/com.needhamsoftware.solr-gradle ",
            "author": "Gus Heck",
            "date": "2018-10-26T16:19:09+0000"
        },
        {
            "id": "comment-16675318",
            "content": "Thank you for the suggestions: I have been version controlling my configsets like this, but my big difficulty was that I was in a remote deployment environment (Windows PowerShell) where forcing in Java and a significant fraction of the Solr install/ZooKeeper configuration would have been very awkward.\n\nI have now found one REST-only approach to get around this limitation that seems to be working for me:\n\n\tUse the CREATE action in the ConfigSets API to\u00a0copy the existing configset to a temporary name.\n\tUse the MODIFYCOLLECTION action in the Collections API to\u00a0alter\u00a0collection.configName to this temporary name.\n\tReload the collection.\n\tDelete the original (now unused) configset.\n\tUpload the updated configset under the original name.\n\tModify the collection back to the original configset name.\n\tReload the collection.\n\tDelete the temporary configset.\n\n\n\nSo this isn't entirely impossible, but it is still cumbersome with 4x as many steps as the command line. ",
            "author": "Alex Halovanic",
            "date": "2018-11-05T15:37:59+0000"
        }
    ]
}