{
    "id": "LUCENE-7312",
    "title": "Geo3dPoint test failure",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "7.0",
        "components": [
            "modules/spatial3d"
        ],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Here's the failure:\n\n\nant test  -Dtestcase=TestGeo3DPoint -Dtests.method=testEncodeDecodeRoundsDown -Dtests.seed=7046405B94C1716E -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=da-DK -Dtests.timezone=America/Detroit -Dtests.asserts=true -Dtests.file.encoding=UTF-8",
    "attachments": {
        "LUCENE-7312.patch": "https://issues.apache.org/jira/secure/attachment/12807825/LUCENE-7312.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15312139",
            "author": "Karl Wright",
            "date": "2016-06-02T11:00:26+0000",
            "content": "Michael McCandless: This is reproducible, and it's your test.  Any comments? "
        },
        {
            "id": "comment-15312349",
            "author": "Michael McCandless",
            "date": "2016-06-02T14:00:56+0000",
            "content": "Hmm I'll dig ... "
        },
        {
            "id": "comment-15312364",
            "author": "Michael McCandless",
            "date": "2016-06-02T14:12:38+0000",
            "content": "The test just encodes and then decodes and checks that the decoded version indeed rounded down, yet for this particular value, for some reason, the Y dimension failed to round down:\n\n\n   [junit4]   1> iter=2881 i=243 lat=-61.000000000001734 lon=-139.2156822602591\n   [junit4]   1>   point=[lat=-1.0646508437165714, lon=-2.4297720258517823([X=-0.36655223771437473, Y=-0.31622436580292346, Z=-0.8733499201429061])]\n   [junit4]   1>   pointEnc=[X=-0.3665522380425261, Y=-0.3162243658029234, Z=-0.8733499202383181]\n\n "
        },
        {
            "id": "comment-15312388",
            "author": "Karl Wright",
            "date": "2016-06-02T14:23:10+0000",
            "content": "How odd... I don't know why this would be, but it seems like maybe we have to dump the numbers in question as hex values in order to see what is in fact happening? "
        },
        {
            "id": "comment-15312577",
            "author": "Michael McCandless",
            "date": "2016-06-02T16:21:33+0000",
            "content": "OK indeed this is a double precision issue ... I boiled it down to this small test:\n\n\n  public void testOneValue() throws Exception {\n    double DECODE = 4.661822942981865E-10;\n    double x = -0.31622436580292346;\n    int xEnc = (int) Math.floor(x / DECODE);  // -678327705\n    double xDec = xEnc * DECODE;\n    // because we floor'd on encoding to xEnc, this should be true:\n    assertTrue(\"x=\" + x + \" xDec=\" + xDec, xDec <= x);\n  }\n\n\n\nwhich fails with this:\n\n\n  java.lang.AssertionError: x=-0.31622436580292346 xDec=-0.3162243658029234\n\n\n\nThe reason is that the value x / DECODE is very, very close to an\ninteger value, just a hair below it, such that when quantized, it\njumps just a bit above that int value, causing the floor to return the\n\"wrong\" value.\n\nYou can also see it with Python's rational number module (fractions) too:\n\n\n>>> DECODE = fractions.Fraction(4.661822942981865E-10)\n>>> x = fractions.Fraction(-0.31622436580292346)\n>>> math.floor(x / DECODE)\n-678327706\n>>> math.floor(float(x / DECODE))\n-678327705\n\n\n\nI.e. the true floor in this case is -678327706, but if you first\nquantize to 64 bits and take the floor, you get one higher.\n\nI think we should go back to the \"safe\" doubles solution we used to\nhave, where DECODE is the next higher double that doesn't use any of\nits lower 32 bits.\n\nI'll also port over a nice 2D test Rob pointed me to, which should be\nmore efficient for finding quantization issues. "
        },
        {
            "id": "comment-15313045",
            "author": "Michael McCandless",
            "date": "2016-06-02T20:59:01+0000",
            "content": "Patch, going back to \"safe\" doubles, and adding a better quantization test ... tests seem to survive some beasting. "
        },
        {
            "id": "comment-15313191",
            "author": "Karl Wright",
            "date": "2016-06-02T22:18:09+0000",
            "content": "This looks reasonable, except for some debugging code:\n\n\n@@ -1172,6 +1173,11 @@ public class TestGeo3DPoint extends LuceneTestCase {\n         GeoPoint pointEnc = new GeoPoint(Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.x)),\n                                          Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.y)),\n                                          Geo3DUtil.decodeValueFloor(Geo3DUtil.encodeValue(point.z)));\n+        if (iter >= 2881) {\n+          System.out.println(\"iter=\" + iter + \" i=\" + i + \" lat=\" + lat + \" lon=\" + lon);\n+          System.out.println(\"  point=\" + point);\n+          System.out.println(\"  pointEnc=\" + pointEnc);\n+        }\n         assertTrue(pointEnc.x <= point.x);\n         assertTrue(pointEnc.y <= point.y);\n         assertTrue(pointEnc.z <= point.z);\n\n\n\nI don't actually understand what getNextSafeDouble() is intended to do, though? "
        },
        {
            "id": "comment-15313554",
            "author": "Karl Wright",
            "date": "2016-06-03T04:30:01+0000",
            "content": "Ok, NVM, in the context of your comment above I see what it's trying to do, and it looks like it does that.  So I think this solution is fine. "
        },
        {
            "id": "comment-15313579",
            "author": "Karl Wright",
            "date": "2016-06-03T04:54:54+0000",
            "content": "Hmm, looking at what I did for Geo3DDocValuesField, and trying to see whether it would suffer from the same issue, it looks like I did something somewhat different:\n\n\n  private static int encodeX(final double x) {\n    if (x > PlanetModel.WGS84.getMaximumXValue()) {\n      throw new IllegalArgumentException(\"x value exceeds WGS84 maximum\");\n    } else if (x < PlanetModel.WGS84.getMinimumXValue()) {\n      throw new IllegalArgumentException(\"x value less than WGS84 minimum\");\n    }\n    return (int)Math.floor((x - PlanetModel.WGS84.getMinimumXValue()) * xFactor + 0.5);\n  }\n  \n  private static double decodeX(final int x) {\n    return x * inverseXFactor + PlanetModel.WGS84.getMinimumXValue();\n  }\n\n\n\n... where xFactor and inverseXFactor are related such that inverseXFactor = 1.0/xFactor.  Basically, by adding the 0.5 right before floor time I made sure no such effects could happen?  I think??  This stuff makes my head hurt... "
        },
        {
            "id": "comment-15314080",
            "author": "Michael McCandless",
            "date": "2016-06-03T13:14:32+0000",
            "content": "except for some debugging code\n\nWoops, I'll remove.\n\nBasically, by adding the 0.5 right before floor time I made sure no such effects could happen?\n\nHmm, I think you can still see these effects with this math, unfortunately.  Probably if you ported this new test case over the this Geo3DDVField's encoding it would fail?\n\nFloating point precision issues are a nightmare when you want tests to be precise  "
        },
        {
            "id": "comment-15314152",
            "author": "Karl Wright",
            "date": "2016-06-03T14:08:26+0000",
            "content": "Ok, when I have some time, I'll try to port the test. "
        },
        {
            "id": "comment-15315663",
            "author": "ASF subversion and git services",
            "date": "2016-06-04T22:16:46+0000",
            "content": "Commit dee57ce23fbed7bc1950b50eb71f6b0a3b0baf65 in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dee57ce ]\n\nLUCENE-7312: fix geo3d's encoding to always round down "
        },
        {
            "id": "comment-15315664",
            "author": "ASF subversion and git services",
            "date": "2016-06-04T22:17:52+0000",
            "content": "Commit 724f7424eaf19b59acce28edc61a40d6086a3d70 in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=724f742 ]\n\nLUCENE-7312: fix geo3d's encoding to always round down "
        }
    ]
}