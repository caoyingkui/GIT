{
    "id": "SOLR-8152",
    "title": "Overseer Task Processor/Queue can miss responses, leading to timeouts",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "I noticed some jenkins reports of timeouts in the TestConfigSetsAPIExclusivityTest, which seemed strange given the amount of work to be done is small and the timeout generous at 300 seconds.\n\nI added some statistics gathering and started beasting the test and sure enough, some tests reported tasks taking slightly more than 300 seconds, while most tests ran with a maximum task run of less than a second.  This suggested something was hanging until the timeout.\n\nSome investigation lead to this code:\nhttps://github.com/apache/lucene-solr/blob/80a73535b20debb1717c6f7f11e08fc311833c88/solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.java#L179-L194\n\nThere appears to be a few issues here:\n\n String path = createData(dir + \"/\" + PREFIX, data,\n          CreateMode.PERSISTENT_SEQUENTIAL);\n      String watchID = createData(\n          dir + \"/\" + response_prefix + path.substring(path.lastIndexOf(\"-\") + 1),\n          null, CreateMode.EPHEMERAL);\n\n      Object lock = new Object();\n      LatchWatcher watcher = new LatchWatcher(lock);\n      synchronized (lock) {\n        if (zookeeper.exists(watchID, watcher, true) != null) {\n          watcher.await(timeout);\n        }\n      }\n\n\n\nFor one, the request object is created before the response object.  If the request is quickly picked up and processed, two things can happen:\n1) The response is written before the watch is set, which means we wait until the timeout even though the response is ready.  This will still pass the test because the response is available, the client will just wait needlessly.\n2) The response is attempted to be written before the response node is even created.  The fact that the response node doesn't exist is ignored:\nhttps://github.com/apache/lucene-solr/blob/80a73535b20debb1717c6f7f11e08fc311833c88/solr/core/src/java/org/apache/solr/cloud/OverseerTaskQueue.java#L92-L94\nIn this case, the task is processed but the client will actually see a failure because there is no response.",
    "attachments": {
        "SOLR-8152.patch": "https://issues.apache.org/jira/secure/attachment/12765947/SOLR-8152.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-10T00:37:11+0000",
            "author": "Gregory Chanan",
            "content": "There are a few ways to solve this, the most straightforward of which appears to be:\n1) Create the response node first using SEQUENTIAL (to generate the path to the request node)\n2) Watch the response node, so we can't possible miss the response (because the request node isn't even created yet)\n3) Create the request mode\n\nAt this point, before we wait, we check that the watch didn't already fire (otherwise we will wait unnecessarily). ",
            "id": "comment-14951446"
        },
        {
            "date": "2015-10-10T00:44:14+0000",
            "author": "Gregory Chanan",
            "content": "Here's a patch implementing the above.  I haven't beasted it for too long, but it's gotten further than I ever got without the changes. ",
            "id": "comment-14951452"
        },
        {
            "date": "2015-10-10T05:18:48+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Gregory, good catch! Your patch changes the response node from EPHEMERAL to EPHEMERAL_SEQUENTIAL. Was that intentional?\n\nAnother option could be to create both nodes together in a 'multi' operation but this approach also looks fine. ",
            "id": "comment-14951608"
        },
        {
            "date": "2015-10-11T01:34:38+0000",
            "author": "Gregory Chanan",
            "content": "Thanks for taking a look, Shalin.\n\nYour patch changes the response node from EPHEMERAL to EPHEMERAL_SEQUENTIAL. Was that intentional?\n\nYes, see below.\n\nAnother option could be to create both nodes together in a 'multi' operation but this approach also looks fine.\n\nI considered using the 'multi' operation, but it doesn't appear trivial.  The issue is that the request and response node share a suffix as determined by ZooKeeper's SEQUENTIAL, but you don't know that until you actually create the node.  So, to use multi to create the request and response znodes together, you'd have to do something like first create a SEQUENTIAL node, note the suffix, then use multi to create the request and response nodes together.  This seemed to lead to more of a tracking / cleanup issue than not using multi.  The fact that the response is EPHEMERAL_SEQUENTIAL rather than EPHEMERAL is because it is now created first (so we don't miss the response). ",
            "id": "comment-14952126"
        },
        {
            "date": "2015-10-11T04:45:06+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Okay I understand now. So we first create the response node as an EPHEMERAL_SEQUENTIAL and then use its sequence ID to create the persistent request node. Sounds good to me. Thanks for explaining. ",
            "id": "comment-14952153"
        },
        {
            "date": "2015-10-13T23:21:14+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1708538 from gchanan@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1708538 ]\n\nSOLR-8152: Overseer Task Processor/Queue can miss responses, leading to timeouts ",
            "id": "comment-14955908"
        },
        {
            "date": "2015-10-13T23:22:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1708539 from gchanan@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1708539 ]\n\nSOLR-8152: Overseer Task Processor/Queue can miss responses, leading to timeouts ",
            "id": "comment-14955911"
        }
    ]
}