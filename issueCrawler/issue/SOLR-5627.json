{
    "id": "SOLR-5627",
    "title": "Config should contains an \"Invariants\"-like section, that lets the user the choise between a list of options, for a specific param",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "We want to limit our clients, so they can specify a parameter to request handler, but it must be one of some known values.\n\nWhen multiple values of a same parameter are defined in invariants section, all of these values are added to the query. This behavior is usefull for multivalue params (like facet.field) but does nothing for params like rows.\n\nWe suggest to add another section, let's call it locked-list-values (bad name...)\n\n\n<locked-list-values>\n    <int name=\"rows\">10</int>\n    <int name=\"rows\">50</int>\n    <int name=\"rows\">100</int>\n    <int name=\"rows\">200</int>\n</locked-list-values>",
    "attachments": {
        "SOLR-5627.patch": "https://issues.apache.org/jira/secure/attachment/12622704/SOLR-5627.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Isaac Hebsh",
            "id": "comment-13869978",
            "date": "2014-01-13T21:00:07+0000",
            "content": "Patch (with tests!) attached.\nTests passed.\n\nReviews are welcome. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13870009",
            "date": "2014-01-13T21:28:32+0000",
            "content": "My initial thought is that this might be best done as a (custom?) SearchComponent rather adding this additional complexity to defaults/invariants/appends.  Thoughts?   I guess it really depends on how many others desire this capability? "
        },
        {
            "author": "Isaac Hebsh",
            "id": "comment-13870026",
            "date": "2014-01-13T21:46:32+0000",
            "content": "You're right, when taking about SearchHandler, But what about other requestHandlers? for example, update.chain parameter of UpdateHandler. There is no search component here... "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13870500",
            "date": "2014-01-14T07:56:55+0000",
            "content": "This use case sounds to me exactly like that served by the SwitchQParserPlugin - see also SOLR-4481 and Chris Hostetter (Unused)'s blog: http://searchhub.org/2013/02/20/custom-solr-request-params/. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13870958",
            "date": "2014-01-14T17:45:18+0000",
            "content": "This use case sounds to me exactly like that served by the SwitchQParserPlugin\n\nSwitchQParserPlugin can only be used in query parser constructs, so it wouldn't really help in the \"rows\" type situation mentioned as an example.\n\nMy initial thought is that this might be best done as a (custom?) SearchComponent\n\nI would agree with that ... had SearchComponents existed when i created the existing defaults/invariants/appends logic i would have done it that way.\n\nYou're right, when taking about SearchHandler, But what about other requestHandlers? for example, update.chain parameter of UpdateHandler.\n\nIt's a fair point ... but i'm not sure how I feel about it ... when you start talking about wanting to enforce rules about requests to Update RequestHandlers just worrying about the request params that come in s a narrow view \u2013 you typically need to consider the context of the request (ie: is it a delete? an add/update? what field=values are in the docs? etc...) A lot of that makes more sense in custom UpdateProcessors (or using the Scripting UpdateProcessor) ... your point about the update.chain parameter (which would need to be constrained/selected before any processors could check the params) seems weird to me \u2013 the list of update.chains is finite and explicitly configured (not like rows or start where it's an unbounded number) so i'm not sure i see the justification of worring about that one specificly \u2013 and as i mentioned, once a chain is picked, then a processor can be used to constrain the request params. \n\nor at least ... that's my current thinking, but if you have other examples i'm open to being persuaded.\n\nAs far as the API of something like this (regardless of whether it should live in a new SerachComponent or not): it seems narrow minded to just say that you configure a list of explicit values and the client must already know what those values are and specify them \u2013 it seems like it would make more sense to support sets of rules for a mapping between some virtualKey=virtualVal param the clients can send, and what realKey=realValue params will be used as a result.  if you want to confiure virtualKey==realKey and virtualValue=realValue that's your choice, but i meanwhile might congfigure it so that if the client specifies \"num_results=small\" that uses \"rows=20\"\n\nI also don't think it makes sense to just ignore any params that don't match up with the constrained list of legal values \u2013 at a minimum there should be an option to fail with a 400 error.\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13970936",
            "date": "2014-04-16T12:56:40+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}