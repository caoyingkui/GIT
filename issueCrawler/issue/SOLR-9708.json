{
    "id": "SOLR-9708",
    "title": "Expose UnifiedHighlighter in Solr",
    "details": {
        "components": [
            "highlighter"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.4"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "This ticket is for creating a Solr plugin that can utilize the new UnifiedHighlighter which was initially committed in https://issues.apache.org/jira/browse/LUCENE-7438",
    "attachments": {
        "SOLR-9708.patch": "https://issues.apache.org/jira/secure/attachment/12840365/SOLR-9708.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-31T21:14:09+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user Timothy055 opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/107\n\n    SOLR-9708 UnifiedHighlighter Solr Plugin\n\n    An initial implementation of a solr plugin for the unified highlighter.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/Timothy055/lucene-solr features/SOLR-9708\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/107.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #107\n\n\ncommit 669f94f27c73b9fd5190a980a089cff9d4df3015\nAuthor: Timothy Rodriguez <trodriguez25@bloomberg.net>\nDate:   2016-10-31T21:05:47Z\n\n    initial commit of UnifiedSolrHighlighter adapter\n\ncommit 2cf4b2d35f1f535e8b8126b5dd685dc3bb663391\nAuthor: Timothy Rodriguez <trodriguez25@bloomberg.net>\nDate:   2016-10-31T21:12:19Z\n\n    add license header\n\n ",
            "id": "comment-15623438"
        },
        {
            "date": "2016-10-31T21:27:42+0000",
            "author": "David Smiley",
            "content": "To anyone following along: The code is the PostingsHighlighter's Solr adapter, with just a few changes to work with the UH instead. ",
            "id": "comment-15623477"
        },
        {
            "date": "2016-11-13T21:00:52+0000",
            "author": "Timothy M. Rodriguez",
            "content": "I've pushed tests for the configurable items in the UH as well as for support of multiple snippets.  In addition a change was done to push highlighter specific logic down into the DefaultSolrHighlighter that was in the HighlightComponent (thanks David Smiley for pointing that out). ",
            "id": "comment-15662086"
        },
        {
            "date": "2016-11-13T21:01:15+0000",
            "author": "Timothy M. Rodriguez",
            "content": "Let me know what you think.  If it looks good, I think we can commit it. ",
            "id": "comment-15662087"
        },
        {
            "date": "2016-11-14T06:31:08+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/107#discussion_r87740749\n\n    \u2014 Diff: solr/core/src/test-files/solr/collection1/conf/solrconfig-unifiedhighlight.xml \u2014\n    @@ -0,0 +1,35 @@\n    +<?xml version=\"1.0\" ?>\n    +\n    +<!--\n    + Licensed to the Apache Software Foundation (ASF) under one or more\n    + contributor license agreements.  See the NOTICE file distributed with\n    + this work for additional information regarding copyright ownership.\n    + The ASF licenses this file to You under the Apache License, Version 2.0\n    + (the \"License\"); you may not use this file except in compliance with\n    + the License.  You may obtain a copy of the License at\n    +\n    +     http://www.apache.org/licenses/LICENSE-2.0\n    +\n    + Unless required by applicable law or agreed to in writing, software\n    + distributed under the License is distributed on an \"AS IS\" BASIS,\n    + WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + See the License for the specific language governing permissions and\n    + limitations under the License.\n    +-->\n    +\n    +<!-- a basic solrconfig for postings highlighter -->\n    \u2014 End diff \u2013\n\n    obsolete postings highlighter reference ",
            "id": "comment-15662925"
        },
        {
            "date": "2016-11-14T06:31:08+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/107#discussion_r87743142\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/highlight/DefaultSolrHighlighter.java \u2014\n    @@ -373,6 +373,11 @@ protected BoundaryScanner getBoundaryScanner(String fieldName, SolrParams params\n         if (!isHighlightingEnabled(params)) // also returns early if no unique key field\n           return null;\n\n    +    boolean rewrite = query != null && !(Boolean.valueOf(params.get(HighlightParams.USE_PHRASE_HIGHLIGHTER, \"true\")) &&\n    \u2014 End diff \u2013\n\n    no biggie but I think a simple if(...) condition would be simpler; no variable. ",
            "id": "comment-15662926"
        },
        {
            "date": "2016-11-14T06:31:08+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/107#discussion_r87741032\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java \u2014\n    @@ -0,0 +1,366 @@\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.solr.highlight;\n    +\n    +import java.io.IOException;\n    +import java.text.BreakIterator;\n    +import java.util.Collections;\n    +import java.util.List;\n    +import java.util.Locale;\n    +import java.util.Map;\n    +import java.util.Set;\n    +\n    +import org.apache.lucene.document.Document;\n    +import org.apache.lucene.search.DocIdSetIterator;\n    +import org.apache.lucene.search.Query;\n    +import org.apache.lucene.search.postingshighlight.WholeBreakIterator;\n    +import org.apache.lucene.search.uhighlight.DefaultPassageFormatter;\n    +import org.apache.lucene.search.uhighlight.PassageFormatter;\n    +import org.apache.lucene.search.uhighlight.PassageScorer;\n    +import org.apache.lucene.search.uhighlight.UnifiedHighlighter;\n    +import org.apache.solr.common.params.HighlightParams;\n    +import org.apache.solr.common.params.SolrParams;\n    +import org.apache.solr.common.util.NamedList;\n    +import org.apache.solr.common.util.SimpleOrderedMap;\n    +import org.apache.solr.core.PluginInfo;\n    +import org.apache.solr.request.SolrQueryRequest;\n    +import org.apache.solr.request.SolrRequestInfo;\n    +import org.apache.solr.schema.IndexSchema;\n    +import org.apache.solr.schema.SchemaField;\n    +import org.apache.solr.search.DocIterator;\n    +import org.apache.solr.search.DocList;\n    +import org.apache.solr.search.SolrIndexSearcher;\n    +import org.apache.solr.util.RTimerTree;\n    +import org.apache.solr.util.plugin.PluginInfoInitialized;\n    +\n    +/*\n    + * TODO: The HighlightComponent should not call rewrite on the query; it should be up to the\n    + * SolrHighlighter to do if needed.  Furthermore this arrangement is odd \u2013 why are these abstractions separate?\n    + */\n    +\n    +/**\n    + * Highlighter impl that uses \n{@link UnifiedHighlighter}\n    + * <p>\n    + * Example configuration with default values:\n    + * <pre class=\"prettyprint\">\n    + * <requestHandler name=\"standard\" class=\"solr.StandardRequestHandler\">\n    + * <lst name=\"defaults\">\n    + * <int name=\"hl.snippets\">1</int>\n    + * <str name=\"hl.tag.pre\">&lt;em&gt;</str>\n    + * <str name=\"hl.tag.post\">&lt;/em&gt;</str>\n    + * <str name=\"hl.tag.ellipsis\">... </str>\n    + * <bool name=\"hl.defaultSummary\">true</bool>\n    + * <str name=\"hl.encoder\">simple</str>\n    + * <float name=\"hl.score.k1\">1.2</float>\n    + * <float name=\"hl.score.b\">0.75</float>\n    + * <float name=\"hl.score.pivot\">87</float>\n    + * <str name=\"hl.bs.language\"></str>\n    + * <str name=\"hl.bs.country\"></str>\n    + * <str name=\"hl.bs.variant\"></str>\n    + * <str name=\"hl.bs.type\">SENTENCE</str>\n    + * <int name=\"hl.maxAnalyzedChars\">10000</int>\n    + * <bool name=\"hl.highlightMultiTerm\">true</bool>\n    + * </lst>\n    + * </requestHandler>\n    + * </pre>\n    + * ...\n    + * <pre class=\"prettyprint\">\n    + * <searchComponent class=\"solr.HighlightComponent\" name=\"highlight\">\n    + * <highlighting class=\"org.apache.solr.highlight.UnifiedSolrHighlighter\"/>\n    + * </searchComponent>\n    + * </pre>\n    + * <p>\n    + * Notes:\n    + * <ul>\n    + * <li>hl.q (string) can specify the query\n    + * <li>hl.fl (string) specifies the field list.\n    + * <li>hl.snippets (int) specifies how many snippets to return.\n    + * <li>hl.tag.pre (string) specifies text which appears before a highlighted term.\n    + * <li>hl.tag.post (string) specifies text which appears after a highlighted term.\n    + * <li>hl.tag.ellipsis (string) specifies text which joins non-adjacent passages. The default is to retain each\n    + * value in a list without joining them.\n    + * <li>hl.defaultSummary (bool) specifies if a field should have a default summary of the leading text.\n    + * <li>hl.encoder (string) can be 'html' (html escapes content) or 'simple' (no escaping).\n    + * <li>hl.score.k1 (float) specifies bm25 scoring parameter 'k1'\n    + * <li>hl.score.b (float) specifies bm25 scoring parameter 'b'\n    + * <li>hl.score.pivot (float) specifies bm25 scoring parameter 'avgdl'\n    + * <li>hl.bs.type (string) specifies how to divide text into passages: [SENTENCE, LINE, WORD, CHAR, WHOLE]\n    + * <li>hl.bs.language (string) specifies language code for BreakIterator. default is empty string (root locale)\n    + * <li>hl.bs.country (string) specifies country code for BreakIterator. default is empty string (root locale)\n    + * <li>hl.bs.variant (string) specifies country code for BreakIterator. default is empty string (root locale)\n    + * <li>hl.maxAnalyzedChars specifies how many characters at most will be processed in a document for any one field.\n    + * <li>hl.highlightMultiTerm enables highlighting for range/wildcard/fuzzy/prefix queries at some cost.\n    + * <li>hl.usePhraseHighlighter (bool) enables highlighting phrases and some other queries strictly at some cost.</li>\n    \u2014 End diff \u2013\n\n    We know this is actually faster.  So I think we can remove the reference here.  But I think we forgot it in the list above to indicate it's true by default. ",
            "id": "comment-15662927"
        },
        {
            "date": "2016-11-14T06:31:08+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/107#discussion_r87740550\n\n    \u2014 Diff: solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter.java \u2014\n    @@ -0,0 +1,222 @@\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.solr.highlight;\n    +\n    +import org.apache.solr.SolrTestCaseJ4;\n    +import org.apache.solr.handler.component.HighlightComponent;\n    +import org.apache.solr.schema.IndexSchema;\n    +import org.junit.BeforeClass;\n    +import org.junit.Ignore;\n    +\n    +/** simple tests for PostingsSolrHighlighter */\n    +public class TestUnifiedSolrHighlighter extends SolrTestCaseJ4 {\n    +  \n    +  @BeforeClass\n    +  public static void beforeClass() throws Exception \n{\n    +    initCore(\"solrconfig-unifiedhighlight.xml\", \"schema-unifiedhighlight.xml\");\n    +    \n    +    // test our config is sane, just to be sure:\n    +    \n    +    // postingshighlighter should be used\n    +    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    +    assertTrue(\"wrong highlighter: \" + highlighter.getClass(), highlighter instanceof UnifiedSolrHighlighter);\n    +    \n    +    // 'text' and 'text3' should have offsets, 'text2' should not\n    +    IndexSchema schema = h.getCore().getLatestSchema();\n    +    assertTrue(schema.getField(\"text\").storeOffsetsWithPositions());\n    +    assertTrue(schema.getField(\"text3\").storeOffsetsWithPositions());\n    +    assertFalse(schema.getField(\"text2\").storeOffsetsWithPositions());\n    +  }\n    +  \n    +  @Override\n    +  public void setUp() throws Exception \n{\n    +    super.setUp();\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"document one\", \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(adoc(\"text\", \"second document\", \"text2\", \"second document\", \"text3\", \"crappier document\", \"id\", \"102\"));\n    +    assertU(commit());\n    +  }\n    +  \n    +  public void testSimple() \n{\n    +    assertQ(\"simplest test\", \n    +        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/str='<em>document</em> one'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/str='second <em>document</em>'\");\n    +  }\n    +\n    +  public void testMultipleSnippetsReturned() \n{\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"Document snippet one. Intermediate sentence. Document snippet two.\",\n    +        \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(commit());\n    +    assertQ(\"multiple snippets test\",\n    +        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.snippets\", \"2\", \"hl.bs.type\", \"SENTENCE\"),\n    +        \"count(//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr/str[1]='<em>Document</em> snippet one. '\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr/str[2]='<em>Document</em> snippet two.'\");\n    +  }\n    +\n    +  public void testStrictPhrasesEnabledByDefault() \n{\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"Strict phrases should be enabled for phrases\",\n    +        \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(commit());\n    +    assertQ(\"strict phrase handling\",\n    +        req(\"q\", \"text:\\\"strict phrases\\\"\", \"sort\", \"id asc\", \"hl\", \"true\"),\n    +        \"count(//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/*)=1\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr/str[1]='<em>Strict</em> <em>phrases</em> should be enabled for phrases'\");\n    +  }\n    +\n    +  public void testStrictPhrasesCanBeDisabled() \n{\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"Strict phrases should be disabled for phrases\",\n    +        \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(commit());\n    +    assertQ(\"strict phrase handling\",\n    +        req(\"q\", \"text:\\\"strict phrases\\\"\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.usePhraseHighlighter\", \"false\"),\n    +        \"count(//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/*)=1\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr/str[1]='<em>Strict</em> <em>phrases</em> should be disabled for <em>phrases</em>'\");\n    +  }\n    +\n    +  public void testMultiTermQueryEnabledByDefault() \n{\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"Aviary Avenue document\",\n    +        \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(commit());\n    +    assertQ(\"multi term query handling\",\n    +        req(\"q\", \"text:av*\", \"sort\", \"id asc\", \"hl\", \"true\"),\n    +        \"count(//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/*)=1\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr/str[1]='<em>Aviary</em> <em>Avenue</em> document'\");\n    +  }\n    +\n    +  public void testMultiTermQueryCanBeDisabled() \n{\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"Aviary Avenue document\",\n    +        \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(commit());\n    +    assertQ(\"multi term query handling\",\n    +        req(\"q\", \"text:av*\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.highlightMultiTerm\", \"false\"),\n    +        \"count(//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/*)=0\");\n    +  }\n    +\n    +  public void testPagination() \n{\n    +    assertQ(\"pagination test\", \n    +        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"rows\", \"1\", \"start\", \"1\"),\n    +        \"count(//lst[@name='highlighting']/*)=1\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/str='second <em>document</em>'\");\n    +  }\n    +  \n    +  public void testEmptySnippet() \n{\n    +    assertQ(\"null snippet test\", \n    +      req(\"q\", \"text:one OR *:*\", \"sort\", \"id asc\", \"hl\", \"true\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/str='document <em>one</em>'\",\n    +        \"count(//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/*)=0\");\n    +  }\n    +  \n    +  public void testDefaultSummary() \n{\n    +    assertQ(\"null snippet test\", \n    +      req(\"q\", \"text:one OR *:*\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.defaultSummary\", \"true\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/str='document <em>one</em>'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/str='second document'\");\n    +  }\n    +  \n    +  public void testDifferentField() \n{\n    +    assertQ(\"highlighting text3\", \n    +        req(\"q\", \"text3:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.fl\", \"text3\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text3']/str='crappy <em>document</em>'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text3']/str='crappier <em>document</em>'\");\n    +  }\n    +  \n    +  public void testTwoFields() \n{\n    +    assertQ(\"highlighting text and text3\", \n    +        req(\"q\", \"text:document text3:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.fl\", \"text,text3\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/str='<em>document</em> one'\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text3']/str='crappy <em>document</em>'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/str='second <em>document</em>'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text3']/str='crappier <em>document</em>'\");\n    +  }\n    +\n    +  //todo: need to configure field that is not at least stored, hence no analysis\n    +  //otherwise, this highlighter is resilient\n    +  @Ignore\n    +  public void testMisconfiguredField() {\n    +    ignoreException(\"was indexed without offsets\");\n    +    try \n{\n    +      assertQ(\"should fail, has no offsets\",\n    +        req(\"q\", \"text2:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.fl\", \"text2\"));\n    +      fail();\n    +    }\n catch (Exception expected) \n{\n    +      // expected\n    +    }\n    +    resetExceptionIgnores();\n    +  }\n    +  \n    +  public void testTags() \n{\n    +    assertQ(\"different pre/post tags\", \n    +        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.tag.pre\", \"[\", \"hl.tag.post\", \"]\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/str='[document] one'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/str='second [document]'\");\n    +  }\n    +  \n    +  public void testTagsPerField() \n{\n    +    assertQ(\"highlighting text and text3\", \n    +        req(\"q\", \"text:document text3:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.fl\", \"text,text3\", \"f.text3.hl.tag.pre\", \"[\", \"f.text3.hl.tag.post\", \"]\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/str='<em>document</em> one'\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text3']/str='crappy [document]'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/str='second <em>document</em>'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text3']/str='crappier [document]'\");\n    +  }\n    +  \n    +  public void testBreakIterator() \n{\n    +    assertQ(\"different breakiterator\", \n    +        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"WORD\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/str='<em>document</em>'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/str='<em>document</em>'\");\n    +  }\n    +  \n    +  public void testBreakIterator2() \n{\n    +    assertU(adoc(\"text\", \"Document one has a first sentence. Document two has a second sentence.\", \"id\", \"103\"));\n    +    assertU(commit());\n    +    assertQ(\"different breakiterator\", \n    +        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.bs.type\", \"WHOLE\"),\n    +        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='<em>Document</em> one has a first sentence. <em>Document</em> two has a second sentence.'\");\n    +  }\n    +  \n    +  public void testEncoder() \n{\n    +    assertU(adoc(\"text\", \"Document one has a first <i>sentence</i>.\", \"id\", \"103\"));\n    +    assertU(commit());\n    +    assertQ(\"html escaped\", \n    +        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.encoder\", \"html\"),\n    +        \"//lst[@name='highlighting']/lst[@name='103']/arr[@name='text']/str='<em>Document</em> one has a first <i>sentence</i>.'\");\n    +  }\n    +  \n    +  public void testWildcard() {\n    \u2014 End diff \u2013\n\n    This test is obsoleted by ones you added above. ",
            "id": "comment-15662928"
        },
        {
            "date": "2016-11-14T06:31:08+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/107#discussion_r87740728\n\n    \u2014 Diff: solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter.java \u2014\n    @@ -0,0 +1,222 @@\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.solr.highlight;\n    +\n    +import org.apache.solr.SolrTestCaseJ4;\n    +import org.apache.solr.handler.component.HighlightComponent;\n    +import org.apache.solr.schema.IndexSchema;\n    +import org.junit.BeforeClass;\n    +import org.junit.Ignore;\n    +\n    +/** simple tests for PostingsSolrHighlighter */\n    \u2014 End diff \u2013\n\n    obsolete reference to PostingsSolrHighlighter ",
            "id": "comment-15662929"
        },
        {
            "date": "2016-11-14T06:31:08+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/107#discussion_r87738726\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/highlight/UnifiedSolrHighlighter.java \u2014\n    @@ -0,0 +1,366 @@\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.solr.highlight;\n    +\n    +import java.io.IOException;\n    +import java.text.BreakIterator;\n    +import java.util.Collections;\n    +import java.util.List;\n    +import java.util.Locale;\n    +import java.util.Map;\n    +import java.util.Set;\n    +\n    +import org.apache.lucene.document.Document;\n    +import org.apache.lucene.search.DocIdSetIterator;\n    +import org.apache.lucene.search.Query;\n    +import org.apache.lucene.search.postingshighlight.WholeBreakIterator;\n    +import org.apache.lucene.search.uhighlight.DefaultPassageFormatter;\n    +import org.apache.lucene.search.uhighlight.PassageFormatter;\n    +import org.apache.lucene.search.uhighlight.PassageScorer;\n    +import org.apache.lucene.search.uhighlight.UnifiedHighlighter;\n    +import org.apache.solr.common.params.HighlightParams;\n    +import org.apache.solr.common.params.SolrParams;\n    +import org.apache.solr.common.util.NamedList;\n    +import org.apache.solr.common.util.SimpleOrderedMap;\n    +import org.apache.solr.core.PluginInfo;\n    +import org.apache.solr.request.SolrQueryRequest;\n    +import org.apache.solr.request.SolrRequestInfo;\n    +import org.apache.solr.schema.IndexSchema;\n    +import org.apache.solr.schema.SchemaField;\n    +import org.apache.solr.search.DocIterator;\n    +import org.apache.solr.search.DocList;\n    +import org.apache.solr.search.SolrIndexSearcher;\n    +import org.apache.solr.util.RTimerTree;\n    +import org.apache.solr.util.plugin.PluginInfoInitialized;\n    +\n    +/*\n    + * TODO: The HighlightComponent should not call rewrite on the query; it should be up to the\n    + * SolrHighlighter to do if needed.  Furthermore this arrangement is odd \u2013 why are these abstractions separate?\n    + */\n    +\n    +/**\n    + * Highlighter impl that uses \n{@link UnifiedHighlighter}\n    + * <p>\n    + * Example configuration with default values:\n    + * <pre class=\"prettyprint\">\n    + * <requestHandler name=\"standard\" class=\"solr.StandardRequestHandler\">\n    + * <lst name=\"defaults\">\n    + * <int name=\"hl.snippets\">1</int>\n    + * <str name=\"hl.tag.pre\">&lt;em&gt;</str>\n    + * <str name=\"hl.tag.post\">&lt;/em&gt;</str>\n    + * <str name=\"hl.tag.ellipsis\">... </str>\n    + * <bool name=\"hl.defaultSummary\">true</bool>\n    + * <str name=\"hl.encoder\">simple</str>\n    + * <float name=\"hl.score.k1\">1.2</float>\n    + * <float name=\"hl.score.b\">0.75</float>\n    + * <float name=\"hl.score.pivot\">87</float>\n    + * <str name=\"hl.bs.language\"></str>\n    + * <str name=\"hl.bs.country\"></str>\n    + * <str name=\"hl.bs.variant\"></str>\n    + * <str name=\"hl.bs.type\">SENTENCE</str>\n    + * <int name=\"hl.maxAnalyzedChars\">10000</int>\n    + * <bool name=\"hl.highlightMultiTerm\">true</bool>\n    + * </lst>\n    + * </requestHandler>\n    + * </pre>\n    + * ...\n    + * <pre class=\"prettyprint\">\n    + * <searchComponent class=\"solr.HighlightComponent\" name=\"highlight\">\n    + * <highlighting class=\"org.apache.solr.highlight.UnifiedSolrHighlighter\"/>\n    + * </searchComponent>\n    + * </pre>\n    + * <p>\n    + * Notes:\n    + * <ul>\n    + * <li>hl.q (string) can specify the query\n    + * <li>hl.fl (string) specifies the field list.\n    + * <li>hl.snippets (int) specifies how many snippets to return.\n    + * <li>hl.tag.pre (string) specifies text which appears before a highlighted term.\n    + * <li>hl.tag.post (string) specifies text which appears after a highlighted term.\n    + * <li>hl.tag.ellipsis (string) specifies text which joins non-adjacent passages. The default is to retain each\n    + * value in a list without joining them.\n    + * <li>hl.defaultSummary (bool) specifies if a field should have a default summary of the leading text.\n    + * <li>hl.encoder (string) can be 'html' (html escapes content) or 'simple' (no escaping).\n    + * <li>hl.score.k1 (float) specifies bm25 scoring parameter 'k1'\n    + * <li>hl.score.b (float) specifies bm25 scoring parameter 'b'\n    + * <li>hl.score.pivot (float) specifies bm25 scoring parameter 'avgdl'\n    + * <li>hl.bs.type (string) specifies how to divide text into passages: [SENTENCE, LINE, WORD, CHAR, WHOLE]\n    + * <li>hl.bs.language (string) specifies language code for BreakIterator. default is empty string (root locale)\n    + * <li>hl.bs.country (string) specifies country code for BreakIterator. default is empty string (root locale)\n    + * <li>hl.bs.variant (string) specifies country code for BreakIterator. default is empty string (root locale)\n    + * <li>hl.maxAnalyzedChars specifies how many characters at most will be processed in a document for any one field.\n    + * <li>hl.highlightMultiTerm enables highlighting for range/wildcard/fuzzy/prefix queries at some cost.\n    + * <li>hl.usePhraseHighlighter (bool) enables highlighting phrases and some other queries strictly at some cost.</li>\n    + * </ul>\n    + * TODO add hl.method, hl.cacheFieldValCharsThreshold\n    + *\n    + * @lucene.experimental\n    + */\n    +public class UnifiedSolrHighlighter extends SolrHighlighter implements PluginInfoInitialized {\n    +\n    +    protected static final String SNIPPET_SEPARATOR = \"\\u0000\";\n    +    private static final String[] ZERO_LEN_STR_ARRAY = new String[0];\n    +\n    +    //TODO move to Solr HighlightParams\n    \u2014 End diff \u2013\n\n    These TODOs should be addressed (and note corresponding docs TODO on line 109). ",
            "id": "comment-15662930"
        },
        {
            "date": "2016-11-14T06:31:08+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/107#discussion_r87740491\n\n    \u2014 Diff: solr/core/src/test/org/apache/solr/highlight/TestUnifiedSolrHighlighter.java \u2014\n    @@ -0,0 +1,222 @@\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.solr.highlight;\n    +\n    +import org.apache.solr.SolrTestCaseJ4;\n    +import org.apache.solr.handler.component.HighlightComponent;\n    +import org.apache.solr.schema.IndexSchema;\n    +import org.junit.BeforeClass;\n    +import org.junit.Ignore;\n    +\n    +/** simple tests for PostingsSolrHighlighter */\n    +public class TestUnifiedSolrHighlighter extends SolrTestCaseJ4 {\n    +  \n    +  @BeforeClass\n    +  public static void beforeClass() throws Exception \n{\n    +    initCore(\"solrconfig-unifiedhighlight.xml\", \"schema-unifiedhighlight.xml\");\n    +    \n    +    // test our config is sane, just to be sure:\n    +    \n    +    // postingshighlighter should be used\n    +    SolrHighlighter highlighter = HighlightComponent.getHighlighter(h.getCore());\n    +    assertTrue(\"wrong highlighter: \" + highlighter.getClass(), highlighter instanceof UnifiedSolrHighlighter);\n    +    \n    +    // 'text' and 'text3' should have offsets, 'text2' should not\n    +    IndexSchema schema = h.getCore().getLatestSchema();\n    +    assertTrue(schema.getField(\"text\").storeOffsetsWithPositions());\n    +    assertTrue(schema.getField(\"text3\").storeOffsetsWithPositions());\n    +    assertFalse(schema.getField(\"text2\").storeOffsetsWithPositions());\n    +  }\n    +  \n    +  @Override\n    +  public void setUp() throws Exception \n{\n    +    super.setUp();\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"document one\", \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(adoc(\"text\", \"second document\", \"text2\", \"second document\", \"text3\", \"crappier document\", \"id\", \"102\"));\n    +    assertU(commit());\n    +  }\n    +  \n    +  public void testSimple() \n{\n    +    assertQ(\"simplest test\", \n    +        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/str='<em>document</em> one'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/str='second <em>document</em>'\");\n    +  }\n    +\n    +  public void testMultipleSnippetsReturned() \n{\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"Document snippet one. Intermediate sentence. Document snippet two.\",\n    +        \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(commit());\n    +    assertQ(\"multiple snippets test\",\n    +        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.snippets\", \"2\", \"hl.bs.type\", \"SENTENCE\"),\n    +        \"count(//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr/str[1]='<em>Document</em> snippet one. '\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr/str[2]='<em>Document</em> snippet two.'\");\n    +  }\n    +\n    +  public void testStrictPhrasesEnabledByDefault() \n{\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"Strict phrases should be enabled for phrases\",\n    +        \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(commit());\n    +    assertQ(\"strict phrase handling\",\n    +        req(\"q\", \"text:\\\"strict phrases\\\"\", \"sort\", \"id asc\", \"hl\", \"true\"),\n    +        \"count(//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/*)=1\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr/str[1]='<em>Strict</em> <em>phrases</em> should be enabled for phrases'\");\n    +  }\n    +\n    +  public void testStrictPhrasesCanBeDisabled() \n{\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"Strict phrases should be disabled for phrases\",\n    +        \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(commit());\n    +    assertQ(\"strict phrase handling\",\n    +        req(\"q\", \"text:\\\"strict phrases\\\"\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.usePhraseHighlighter\", \"false\"),\n    +        \"count(//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/*)=1\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr/str[1]='<em>Strict</em> <em>phrases</em> should be disabled for <em>phrases</em>'\");\n    +  }\n    +\n    +  public void testMultiTermQueryEnabledByDefault() \n{\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"Aviary Avenue document\",\n    +        \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(commit());\n    +    assertQ(\"multi term query handling\",\n    +        req(\"q\", \"text:av*\", \"sort\", \"id asc\", \"hl\", \"true\"),\n    +        \"count(//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/*)=1\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr/str[1]='<em>Aviary</em> <em>Avenue</em> document'\");\n    +  }\n    +\n    +  public void testMultiTermQueryCanBeDisabled() \n{\n    +    clearIndex();\n    +    assertU(adoc(\"text\", \"Aviary Avenue document\",\n    +        \"text2\", \"document one\", \"text3\", \"crappy document\", \"id\", \"101\"));\n    +    assertU(commit());\n    +    assertQ(\"multi term query handling\",\n    +        req(\"q\", \"text:av*\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.highlightMultiTerm\", \"false\"),\n    +        \"count(//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/*)=0\");\n    +  }\n    +\n    +  public void testPagination() \n{\n    +    assertQ(\"pagination test\", \n    +        req(\"q\", \"text:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"rows\", \"1\", \"start\", \"1\"),\n    +        \"count(//lst[@name='highlighting']/*)=1\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/str='second <em>document</em>'\");\n    +  }\n    +  \n    +  public void testEmptySnippet() \n{\n    +    assertQ(\"null snippet test\", \n    +      req(\"q\", \"text:one OR *:*\", \"sort\", \"id asc\", \"hl\", \"true\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/str='document <em>one</em>'\",\n    +        \"count(//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/*)=0\");\n    +  }\n    +  \n    +  public void testDefaultSummary() \n{\n    +    assertQ(\"null snippet test\", \n    +      req(\"q\", \"text:one OR *:*\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.defaultSummary\", \"true\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/str='document <em>one</em>'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/str='second document'\");\n    +  }\n    +  \n    +  public void testDifferentField() \n{\n    +    assertQ(\"highlighting text3\", \n    +        req(\"q\", \"text3:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.fl\", \"text3\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text3']/str='crappy <em>document</em>'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text3']/str='crappier <em>document</em>'\");\n    +  }\n    +  \n    +  public void testTwoFields() \n{\n    +    assertQ(\"highlighting text and text3\", \n    +        req(\"q\", \"text:document text3:document\", \"sort\", \"id asc\", \"hl\", \"true\", \"hl.fl\", \"text,text3\"),\n    +        \"count(//lst[@name='highlighting']/*)=2\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text']/str='<em>document</em> one'\",\n    +        \"//lst[@name='highlighting']/lst[@name='101']/arr[@name='text3']/str='crappy <em>document</em>'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/str='second <em>document</em>'\",\n    +        \"//lst[@name='highlighting']/lst[@name='102']/arr[@name='text3']/str='crappier <em>document</em>'\");\n    +  }\n    +\n    +  //todo: need to configure field that is not at least stored, hence no analysis\n    +  //otherwise, this highlighter is resilient\n    +  @Ignore\n    \u2014 End diff \u2013\n\n    It seems this test should be dropped.  Indeed, this highlighter is resilient; it just needs to be stored. ",
            "id": "comment-15662931"
        },
        {
            "date": "2016-11-14T06:34:20+0000",
            "author": "David Smiley",
            "content": "(see github comments)\nLooking good Tim; just some super minor stuff.\n\nIt's unfortunate that users need to go into their solrconfig to enable this highlighter.  What if there was a boolean param hl.useUnifiedHighlighter that was evaluated at the very beginning of DefaultSolrHighlighter.doHighlighting that delegated to it?  I know from a code perspective it's very hacky but consider the user experience.  In Solr we're trying to push towards avoiding the need to touch configs.  Fortunately, this highlighter is completely configured from params (not so for SH & FVH)... except for enabling it in the first place (which we can change here). The DSH after all already handles FVH.  In a future issue for 7.0 I'd like to propose some re-arrangement to the Solr highlighting code to simplify & clean up things. ",
            "id": "comment-15662936"
        },
        {
            "date": "2016-11-14T22:49:40+0000",
            "author": "Timothy M. Rodriguez",
            "content": "Thanks for catching those things. I've fixed them and pushed to the pr.\n\nRegarding the hl.useUnifiedHighlighter I'm actually very in favor of that idea, but perhaps that logic would be better in the highlight component?  In that way the actual highlighters would be more like the facet params that help tweak with algorithm gets used.  I agree that we really shouldn't have to \"configure\" the highlighters.  Perhaps that should be a separate issue though more in line with the the other changes mentioned? ",
            "id": "comment-15665291"
        },
        {
            "date": "2016-11-14T23:49:31+0000",
            "author": "David Smiley",
            "content": "Sure, put the proposed logic into the HighlightComponent. \n\nIt's definitely a separate issue for the Standard & FVH to be fully configurable via params.  ",
            "id": "comment-15665417"
        },
        {
            "date": "2016-11-15T20:57:20+0000",
            "author": "David Smiley",
            "content": "After you add hl.useUnifiedHighlighter, I think the tests should be updated to go about it his way instead of custom search component because people probably won't bother to explicitly change the search component given this approach works without fuss.\n\nMaybe hl.method should be hl.offsetSource so as to not suggest you're picking the highlighter implementation overall? ",
            "id": "comment-15668291"
        },
        {
            "date": "2016-11-15T21:09:11+0000",
            "author": "David Smiley",
            "content": "Also I'm on the fence if we should support hl.simple.pre (HighlightParams.SIMPLE_PRE) and corresponding -post.  We probably should for a better user experience.  But support those as fallbacks, as I think the hl.tag.pre is a better name. ",
            "id": "comment-15668334"
        },
        {
            "date": "2016-11-15T23:21:44+0000",
            "author": "Timothy M. Rodriguez",
            "content": "I'm okay with hl.tag.pre/post, but it may not always be a tag.  Perhaps something like hl.pre.marker? or hl.pre.sigil? ",
            "id": "comment-15668715"
        },
        {
            "date": "2016-11-15T23:39:23+0000",
            "author": "David Smiley",
            "content": "-1 I would hate to see new parameters when there are semantically equivalent ones already.  ",
            "id": "comment-15668761"
        },
        {
            "date": "2016-11-15T23:40:49+0000",
            "author": "Timothy M. Rodriguez",
            "content": "I thought the suggestion was to use hl.tag.pre instead of hl.simple.pre? ",
            "id": "comment-15668766"
        },
        {
            "date": "2016-11-15T23:45:19+0000",
            "author": "David Smiley",
            "content": "I suggested to support both.  ",
            "id": "comment-15668771"
        },
        {
            "date": "2016-11-16T00:12:22+0000",
            "author": "Timothy M. Rodriguez",
            "content": "I was suggesting instead of hl.tag.pre, but realized that's used too. No sense adding a third. Even though both names are not so ideal IMO ",
            "id": "comment-15668824"
        },
        {
            "date": "2016-11-21T14:28:31+0000",
            "author": "Timothy M. Rodriguez",
            "content": "I've posted an initial commit that allows the user to override the configured highlighter based on the \"hl.method\" parameter.\n\nTwo things I want to highlight:\n\n\n\tThe highlighter can no longer safely be statically determined using HighlightComponent.getHiglighter since a request parameter can override the pre-configured one.  I've marked this usage deprecated as it affects quite a few places outside of this change.  Is that okay?\n\n\n\n\n\tUse of an enum for collecting all the highlight methods and giving a bit extra type safety when switching over the values in the override.  I'm not sure if this is out of style and several static String fields is preferred (although I personally prefer the former).\n\n ",
            "id": "comment-15683698"
        },
        {
            "date": "2016-11-21T14:39:09+0000",
            "author": "Timothy M. Rodriguez",
            "content": "Added a normalizeParameters method that will set tag.pre or post if simple.pre or post are set. ",
            "id": "comment-15683730"
        },
        {
            "date": "2016-11-21T23:12:51+0000",
            "author": "Timothy M. Rodriguez",
            "content": "I've pushed changes to the review feedback.  For some reason the build bot seems to have stopped tracking the changes, but I've confirmed they are on the GitHub PR.  The unified highlighter is now configurable on a per request basis without even being configured as the highlight component! ",
            "id": "comment-15685051"
        },
        {
            "date": "2016-11-22T03:46:31+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/107#discussion_r89039004\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java \u2014\n    @@ -184,6 +185,20 @@ public void process(ResponseBuilder rb) throws IOException {\n         }\n       }\n\n    +  /**\n    +   * Normalizes parameters between highlighters\n    +   */\n    +  private SolrParams normalizeParameters(SolrParams params) {\n    \u2014 End diff \u2013\n\n    You've coded this such that SIMPLE_PRE overrides TAG_PRE which is not what we want I think?  Furthermore, this is coded such that it only overrides at the global level which won't work for field-specific settings like `f.myfieldname.hl.tag.pre` which we'd want to examine `f.myfieldname.hl.simple.pre`.  I appreciate where you were going with this, but in light of the latter point, I think you should simply modify the Solr UH adapter to lookup say \"pre\" like so:\n\n        String preTag = params.getFieldParam(fieldName, HighlightParams.TAG_PRE, \n               params.getFieldParam(fieldName, HighlightParams.SIMPLE_PRE, \"<em>\");\n         );\n ",
            "id": "comment-15685594"
        },
        {
            "date": "2016-11-22T22:47:56+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user Timothy055 commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/107#discussion_r89227253\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/handler/component/HighlightComponent.java \u2014\n    @@ -184,6 +185,20 @@ public void process(ResponseBuilder rb) throws IOException {\n         }\n       }\n\n    +  /**\n    +   * Normalizes parameters between highlighters\n    +   */\n    +  private SolrParams normalizeParameters(SolrParams params) {\n    \u2014 End diff \u2013\n\n    Fixed ",
            "id": "comment-15688177"
        },
        {
            "date": "2016-11-22T23:08:30+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user Timothy055 commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/107\n\n    I've made some more updates to the documentation for the pre and post parameters as well as fixed the defaulting logic. ",
            "id": "comment-15688233"
        },
        {
            "date": "2016-11-23T05:49:45+0000",
            "author": "David Smiley",
            "content": "I iterated further from your work: https://github.com/dsmiley/lucene-solr/commit/a29dae9dde1dc018bd704cefb4fd7560d4eeb9fc\nI expanded the support of hl.method to all of: original|fastVector|postings|unified.  I also organized/documented HighlightParams with notes on which highlighters use which.  I figure \"original\" is a nice name for the Highlighter.java implementation instead of \"standard\", as \"original\" will remain a good name, even if it's not necessarily the default in the future.  \"standard\" kinda means \"default\".\n\nWhat do you think?  Feel free to either comment here or on my commit in GitHub; whatever suits you.  Once there's no further changes, I'll promptly post a final .patch file here then commit.\n\nLater in December I'll update the Solr Ref Guide.  I might convert the PostingsHighlighter page to be about the UnifiedHighlighter, and then on this page address how the PostingsHighlighter varies and how it's invoked instead (very easy now thanks to hl.method=postings).  Since the UH is a derivative of the PH, completely compatible; we might very well remove the PH in 7.0. ",
            "id": "comment-15689027"
        },
        {
            "date": "2016-11-24T00:46:08+0000",
            "author": "Timothy M. Rodriguez",
            "content": "Looks great!  Adding the other highlighters to method really fleshed it out.  Also in favor of the change from \"default\" to \"original\".  No further suggested changes other than a rename on the FASTVECTOR enum to FAST_VECTOR. Let me know if you need any help with the wiki in December.  Would be glad to contribute there as well. ",
            "id": "comment-15691807"
        },
        {
            "date": "2016-11-24T02:48:44+0000",
            "author": "David Smiley",
            "content": "Here's the patch, with FASTVECTOR -> FAST_VECTOR.  Proposed CHANGES.txt will be:\n\nNew Feature:\n\nSOLR-9708: Added UnifiedSolrHighlighter, a highlighter adapter for Lucene's UnifiedHighlighter.  The adapter is a derivative of the PostingsSolrHighlighter, supporting mostly the same parameters with some differences.\nIntroduced \"hl.method\" parameter which can be set to original|fastVector|postings|unified to pick the highlighter at runtime without the need to modify solrconfig from the default configuration.  hl.useFastVectorHighlighter is now considered deprecated in lieu of hl.method=fastVector.\n\nUpgrading:\n\nYou are encouraged to try out the UnifiedHighlighter by setting hl.method=unified and report feedback.  It might become the default in 7.0.  It's more efficient/faster than the other highlighters, especially compared to the original Highlighter.  That said, some options aren't supported yet, notably hl.fragsize and hl.requireFieldMatch=false.  It will get more features in time, especially with your input.  See HighlightParams.java for a listing of highlight parameters annotated with which highlighters use them.\n\n\nI don't recall seeing this kind of note before in the upgrading section but I think it's appropriate.  Nobody actually has to do anything, but it's in everyone's interest to try it out.\n\nBTW thanks Tim for entertaining my request to incorporate hl.method.  In hindsight it deserved a separate issue.\n\nI'll commit tomorrow night. ",
            "id": "comment-15692003"
        },
        {
            "date": "2016-11-24T16:39:50+0000",
            "author": "Timothy M. Rodriguez",
            "content": "Haha, no problem.  It'll improve usability quite a bit to be able to dynamically invoke it per request (and the other highlighters).  I'm glad it landed with the initial Solr release of the unified highlighter. ",
            "id": "comment-15693717"
        },
        {
            "date": "2016-11-25T00:36:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 4314c51c66de1eed0dbc4897684e79935ebfd55e in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4314c51 ]\n\nSOLR-9708: Added UnifiedSolrHighlighter.  Added hl.method=original|fastVector|postings|unified ",
            "id": "comment-15694494"
        },
        {
            "date": "2016-11-25T00:38:04+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a089bf2827e536b8894c4181844bcf07cb6f9c79 in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a089bf2 ]\n\nSOLR-9708: Added UnifiedSolrHighlighter.  Added hl.method=original|fastVector|postings|unified\n\n(cherry picked from commit 4314c51) ",
            "id": "comment-15694497"
        },
        {
            "date": "2017-01-17T05:57:14+0000",
            "author": "David Smiley",
            "content": "As I was working on highlighter documentation... I think the default we use for hl.maxAnalyzedChars should be equal to that of the Original Highlighter, which is 51200 \u2013 certainly not less.  After all, it certainly does a faster job, and this parameter is a performance oriented threshold.  I see we're currently using the default in the UnifiedHighlighter which is 10000. This fits within the overarching goal of making transitioning to this highlighter straight-forward minimizing gotchas.\n\nJim Ferenczi can I simply commit a 1-liner change to set this default in 6.4 or shall I file a new issue? ",
            "id": "comment-15825503"
        }
    ]
}