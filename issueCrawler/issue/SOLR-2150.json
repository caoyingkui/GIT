{
    "id": "SOLR-2150",
    "title": "Anti-phrasing feature",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SearchComponents - other"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Add an anti-phrasing feature to Solr.\n\nDefinition: Identifying word sequences in queries that do not contribute essentially to the query's meaning, such as \"Where can I find\" or \"Where is.\"\n(Source: http://www.google.com/search?q=define%3Aanti+phrasing)\n\nFor general purpose search services, such as web, intranet, shopping search, some users will try to write a question to the search engine, such as \"how much is an ipod nano\". One straight-forward way of limiting the number of 0-hits in such environments is to apply anti-phrasing, which uses a dictionary of common sentence prefixes which should be stripped from the incoming query before it is sent further to search.\n\nThis can be implemented as a Search Component in Solr. The dictionary can be language independent. We can encourage users to submit their tested anti-phrasing dictionaries for various languages, and include those. The dictionary can be a set of simple .txt files, loaded in memory at startup in an efficient data structure such as b-tree or finite state automaton to avoid redundancy and ensure quick matching. The procedure for detecting an anti-phrase from the incoming query is to first lookup the full query phrase, if no match, remove a word from the end, and do another lookup until either a match or end of string. Example for query: \"Who is Einstein?\", where \"Who is\" is defined as an anti phrase.\n1. Lookup \"Who is Einstein\"\n2. Lookup \"Who is\" (match), remove this prefix\n3. Issue the query \"Einstein\" to search",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12919934",
            "date": "2010-10-11T18:23:07+0000",
            "content": "One approach that might be worth considering is to generalize the problem beyond just anti-phrasing, and allow the dictionaries to contain optional mappings between the patterns and filter queries that should be applied to the query in place of the full phrase.\n\nIn the product space this could let people setup mappings like...\n\n\n* Printers => {!field f=category}printers\n\n \nso a request like...\n\nq=HP+Printers\n\n\n would become equivalent to\n\nq=HP&fq={!field f=category}printers\n\n\n\n...following in the \"Who is\" example, if the data set is a collection of people, then \"Who is\" could be mapped to nothing (so it's just striped away, w/o a filter query being added) but if the data set is a general collection of information (ie: wikipedia) then \"Who Is\" could be mapped to something like \"doc_type:person\" "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-12919942",
            "date": "2010-10-11T18:53:59+0000",
            "content": "What you describe is also a useful feature. I think of it even more generic, as a place to configure detection of various patterns, and apply some action on the query based on he match, whether that is fetching a weather forecast from an API, performing a calculation or rewriting the query to apply a filter. I think it deserves its own feature request, and then one could decide whether the same code base could power parts of both later in the design phase. "
        }
    ]
}