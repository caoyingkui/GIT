{
    "id": "SOLR-4735",
    "title": "Improve Solr metrics reporting",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "components": [
            "metrics"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Following on from a discussion on the mailing list:\nhttp://search-lucene.com/m/IO0EI1qdyJF1/codahale&subj=Solr+metrics+in+Codahale+metrics+and+Graphite+\n\nIt would be good to make Solr play more nicely with existing devops monitoring systems, such as Graphite or Ganglia.  Stats monitoring at the moment is poll-only, either via JMX or through the admin stats page.  I'd like to refactor things a bit to make this more pluggable.\n\nThis patch is a start.  It adds a new interface, InstrumentedBean, which extends SolrInfoMBean to return a [Metrics] MetricRegistry, and a couple of MetricReporters (which basically just duplicate the JMX and admin page reporting that's there at the moment, but which should be more extensible).  The patch includes a change to RequestHandlerBase showing how this could work.  The idea would be to eventually replace the getStatistics() call on SolrInfoMBean with this instead.\n\nThe next step would be to allow more MetricReporters to be defined in solrconfig.xml.  The Metrics library comes with ganglia and graphite reporting modules, and we can add contrib plugins for both of those.\n\nThere's some more general cleanup that could be done around SolrInfoMBean (we've got two plugin handlers at /mbeans and /plugins that basically do the same thing, and the beans themselves have some weirdly inconsistent data on them - getVersion() returns different things for different impls, and getSource() seems pretty useless), but maybe that's for another issue.",
    "attachments": {
        "screenshot-2.png": "https://issues.apache.org/jira/secure/attachment/12842994/screenshot-2.png",
        "SOLR-4735.patch": "https://issues.apache.org/jira/secure/attachment/12579307/SOLR-4735.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Alan Woodward",
            "id": "comment-13635097",
            "date": "2013-04-18T11:24:40+0000",
            "content": "Here's the patch.\n\nNB: this uses the same metrics library that I tried to use in my ill-starred attempts at SOLR-1972.  However, the various leaky thread abstractions that were causing problems there have all been removed from this version.\n\nThe JMX reporting doesn't quite work yet either, as it's dependent on being able to set the domains per-bean, and that functionality hasn't been released yet. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13641581",
            "date": "2013-04-25T08:59:43+0000",
            "content": "New patch, moving everything to a single registry per-core, and adding a graphite reporter in contrib/.\n\nJMX naming still isn't working right, and it needs some tests, but I think this is a decent way forward.  More eyes welcome... "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13642139",
            "date": "2013-04-25T20:04:43+0000",
            "content": "This looks like it creates a new registry for every core (am I reading that wrong?)  If so, I think sharing one registry would be best.\n\nCan the registry be in the CoreContainer rather then the core?\n\nI guess that would involve some cleanup when a core is unloaded, but it would let us share a single registry across cores and other apps (the case I am actually concerned with) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13642148",
            "date": "2013-04-25T20:08:34+0000",
            "content": "ideally CoreContainer could have a function like:\n\n \n  MetricsRegistry createMetricsRegistry( ?? config ) {\n    return new MetricsRegistry();\n  }\n\n\n\nThis would let other applications slip in their own registry \u2013 that already has reporting hooked up! "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13642969",
            "date": "2013-04-26T15:49:56+0000",
            "content": "That's a nice idea.  The MetricsReporters would have to be able to build a filter that meant they only reported on Metrics set up for their core, but that should be doable.  Will work on a patch over the weekend. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13666671",
            "date": "2013-05-24T21:02:36+0000",
            "content": "New patch.  This upgrades to Metrics-3.0.0-BETA3, which adds the JMX domain-setting code, so JMX reporting now works correctly.  It also implements Ryan's idea of moving the MetricRegistry to the CoreContainer. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-13959230",
            "date": "2014-04-03T21:15:34+0000",
            "content": "I have some interest in working on this idea and wanted to get a sense where things sit / current thinking on this topic. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13959253",
            "date": "2014-04-03T21:31:19+0000",
            "content": "The patch that's here is pretty out-of-date, and seriously incomplete, but I still think it's a workable idea.  I just don't have time to work on it...  feel free to assign this one to yourself and have a go. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13959290",
            "date": "2014-04-03T21:51:02+0000",
            "content": "Tim: see also SOLR-5095 which points out some anoying problems we have with the lack of namespacing of plugins/mbeans right now that make it confusing/impossible to get stats from certain things.\n\nI think Alan's earlier point about how SolrInfoMBean cleanup is needed in general is spot on.  We should keep an open mind to what the ideal APIs look like for monitoring/metrics and feel free to gut what we have in Solr5 to move towards those APIs "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14216504",
            "date": "2014-11-18T17:51:20+0000",
            "content": "feel free to gut what we have in Solr5 \n\nWe don't have a lot of time, but it would be great to solve SOLR-6586 - it really requires a different stats API to be sensible I think. It's a little tricky to make nice, but really the API calls for each individual attribute should be able to be calculated independently. Otherwise, there is just so much recalculation that it's hard to have everything be live and fast and even if you only want to fetch a single fast attribute, you will be penalized by the slowest.\n\nIf you currently use a tool to enumerate and look at each attribute for monitoring, because of the duplicate bean issue and SOLR-6586, you can check the size of a directory like 40 times or something crazy when it really only had to be checked once. There is an API mismatch. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14222807",
            "date": "2014-11-24T09:07:23+0000",
            "content": "I did some thinking on this over the weekend.  Here's what I think the API should look like:\n\n\twe use dropwizard metrics: https://dropwizard.github.io/metrics/3.1.0/.  This is the same library I used in the initial patch, moved on a bit.\n\teach core has its own MetricRegistry\n\tSolrInfoMBean is replaced by an interface called SolrMetricsProducer, which has just three methods:\n\t\n\t\tString getName()\n\t\tCategory getCategory()\n\t\tvoid registerMetrics(MetricsCollector registry)\n\t\n\t\n\twhen core.inform() is called with the SolrMetricsProducer, it creates a MetricsCollector using the name and category, and then passes it to registerMetrics().  The producer can then add its own metrics as individual Counter, Gauge, Histogram, etc, instances to the collector.  The Core then adds all these to its MetricRegistry, with appropriate names.\n\tgetStatistics() calls are replaced by a NamedListMetricReporter, as in the initial patch\n\tthe metrics JmxReporter will have to be extended slightly so that it knows about corehash values, to make sure that we deal with core reloads correctly.\n\tCoreContainer could have its own MetricRegistry for any node-wide stats (things like System/Memory/JVM info - there's a metrics/jvm subproject which has a bunch of useful stats that we could add here).\n\n\n\nThis way, all the individual stats are independent, and reporting and collection are nicely isolated.\n\nI also suggest we bin getSource(), getVersion() and getDocs() as they're generally left unimplemented, and probably getDescription() as well.  And the Category enum could be replaced with a plain String, to allow plugins to add their own types. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14222847",
            "date": "2014-11-24T10:09:49+0000",
            "content": "That sounds like a reasonable start, Alan. Do you have any ideas on how we can introspect/discover metrics supported by a plugin? Also, does the metrics API have any support for merging stats from different servers? The last two questions are important to build aggregate stats API for SolrCloud (see SOLR-6325) and to easily build the next generation of Solr's Admin UI.\n\nWe should also add stats support to the SearchComponents (maybe as a separate issue). "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14223572",
            "date": "2014-11-24T21:44:01+0000",
            "content": "re introspection and discovery, each MetricProvider class will register metrics with a common prefix, and it should be easy to write a handler that returns all metrics with a given prefix.\n\nMerging stats isn't directly supported by the Metrics library, as far as I know.\n\nI'm halfway through a patch on this - LazyRequestHandlers are causing me a headache at the moment, but I think I can see a way through. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14593333",
            "date": "2015-06-19T11:18:10+0000",
            "content": "Alan Woodward, still quite interested in this, would you happen to have the current state in a patch and an idea of things which are still left? "
        },
        {
            "author": "Walter Underwood",
            "id": "comment-15626331",
            "date": "2016-11-01T18:56:36+0000",
            "content": "Anybody using the CodaHale metrics.jetty9.InstrumentedHandler? It looks a lot like something we built for our own use with Solr 4.\n\nhttp://metrics.dropwizard.io/3.1.0/manual/jetty/\nhttp://metrics.dropwizard.io/3.1.0/apidocs/com/codahale/metrics/jetty9/InstrumentedHandler.html\n\nwunder "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15626442",
            "date": "2016-11-01T19:33:19+0000",
            "content": "I have, and am, by instantiating a SharedMetricRegistry and GraphiteReporter directly in the jetty.xml. (Which is hacky, but in lieu of SOLR-8785, does work fine) \nI'm also using the logging and JVM metrics plugins quite happily.\n "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-15687087",
            "date": "2016-11-22T15:51:37+0000",
            "content": "As I mentioned yesterday in SOLR-8785, in our team my colleague Kelvin Wong is currently also working on metrics stuff.\n\nThe attached patch is Kelvin's work. (I only rebased it on top of the now committed SOLR-8785 changes and made minor adjustments in a couple of places.)\n\nComments, questions, reviews, etc. welcome as usual. Thank you.\n\n\n\nSOLR-4735: pluggable SolrMetricReporter support e.g. SolrJmxReporter\n\n\n\tSolrMetric(Info|Producer|Manager|Reporter) classes with tests\n\tSolrJmxReporter class with test\n\tSolrCore changes:\n\t\n\t\tinstantiates a SolrMetricManager\n\t\tloads any configured SolrMetricReporters into the SolrMetricManager\n\t\tregisterInfoBean includes registering with the SolrMetricManager (for beans that implement the SolrMetricProducer interface)\n\t\n\t\n\tRequestHandlerBase changes:\n\t\n\t\tcodahale metrics.Meter used instead of java atomic.LongAdder to count errors and timeouts\n\t\tgetMetrics() method (implementing SolrMetricProducer interface) added\n\t\n\t\n\n\n\nnext planned steps:\n\n\tcouple of minor TODO's in the code\n\tadd test which uses a solrconfig.xml that configures (test) SolrMetricReporter(s)\n\t'ant beast' the new tests\n\n "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15690992",
            "date": "2016-11-23T18:38:51+0000",
            "content": "For what it's worth, this looks like really great stuff to me. \nI'm still unconvinced that metrics should always get reset on core reload, which is a source of some complexity, but doing so is certainly consistent with the prior behavior, so I can hardly complain. \nI think I can see a path to providing reportable metrics outside of the RequestHandler. I'd be interested in Kelvin's thoughts on that subject though, since he chose not to use SharedMetricsRegistries. "
        },
        {
            "author": "Kelvin Wong",
            "id": "comment-15693036",
            "date": "2016-11-24T11:33:34+0000",
            "content": "Thanks Jeff. \n\nThe attached patch really just piggybacks off of Alan's work and tries to flesh out the design. For now, only RequestHandlerBase exposes metrics through this framework. The idea is to eventually convert other SolrInfoMBeans into SolrMetricProducers so they can start providing reportable metrics too. This seems to be fairly doable.\n\nRe SharedMetricsRegistries: that's something we can definitely do. My rationale for not using it is so that logical groups of metrics can be nicely isolated at a per-core level. This ensures that any metric in a MetricManager's registry must have been registered through MetricManager::registerMetrics. A nice side-effect is that we can also store meta-information about each metric and pass that on to the reporters.\n\nI realize that using SharedMetricsRegistries provides a level of flexibility that this patch's approach does not. For example, if we wanted to share the registry on a CoreContainer level. I think there are ways around this and my personal preference is still for this logical grouping of metrics. But perhaps there may be use cases I'm neglecting to consider?\n\nWould be interested to hear your thoughts on this. Thanks! "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15693048",
            "date": "2016-11-24T11:41:37+0000",
            "content": "I'm interested in getting this issue resolved, so I'd be happy to work on committing this (I asked Alan and he doesn't mind  ).\n\nChristine Poerschke & Kelvin: great stuff, I really like the abstractions. I share Jeff's concern though that we need to consider how to maintain metrics that outlive any particular core instance (even core reload events  ). Core reloads may be caused by several reasons (explicit action, config change, replication). I'm not sure under which scenario I'd prefer to reset metrics from a previous version of the core...\n\nEventually we will want to instrument also other aspects of Solr, things that happen outside SolrCore (eg. SolrCloud operations, replication, leader metrics per replica, replica recovery stats, Jetty connections, heap, etc). For these using SharedMetricsRegistries would make more sense, so the question is whether we should use two different mechanisms for managing MetricRegistry instances, the other one being SolrMetricManager. Perhaps SolrMetricManager should use long-lived MetricRegistry instances that are managed in SharedMetricsRegistries?\n\nAlso, from the point of view of monitoring the overall \"load\" of a particular node it would make sense to also track some really low-level Lucene stuff, such as major merges and read/write IO, but this can come later - let's first get the design right. "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-15693560",
            "date": "2016-11-24T15:38:08+0000",
            "content": "GitHub user sigram opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/119\n\n    SOLR-4735 Improve Solr metrics\n\n    Branch created from the patch in Jira by Kelvin Wong.\n\n    Changes include:\n\n\tusing shared instances of `MetricRegistry` per core.\n\tunit test modifications.\n\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/sigram/lucene-solr jira/solr-4735\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/119.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #119\n\n\ncommit dba0663c79f7b27d4626152d36f8d6d4c62a878d\nAuthor: Andrzej Bialecki <andrzej.bialecki@lucidworks.com>\nDate:   2016-11-23T12:48:26Z\n\n    Initial patch from Jira.\n\ncommit 1ade9c443dbd5b9eae2ec5208b233d28fb20a8cb\nAuthor: Andrzej Bialecki <andrzej.bialecki@lucidworks.com>\nDate:   2016-11-24T10:45:20Z\n\n    Merge branch 'master' into jira/solr-4735\n\ncommit ba2a94fb52d21ed05053a098c8fb9919a469e5b3\nAuthor: Andrzej Bialecki <andrzej.bialecki@lucidworks.com>\nDate:   2016-11-24T15:32:04Z\n\n    Use SharedMetricRegistries for managing per-core metrics.\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15693809",
            "date": "2016-11-24T17:17:34+0000",
            "content": "I share Jeff's concern though that we need to consider how to maintain metrics that outlive any particular core instance (even core reload events  )\n\nHaving a reload reset stats is a bad idea. We can provide an explicit API to reset stats for a node or a core if required.\n\nPerhaps SolrMetricManager should use long-lived MetricRegistry instances that are managed in SharedMetricsRegistries?\n\n+1\n\nAlso see the patch on SOLR-9788 which adds instrumented classes to Jetty that are managed by SharedMetricsRegistries. The JVM metrics can also be exposed in a similar way. It currently adds all jetty statistics to a metric registry named \"solr\" but we can split them out into multiple ones if needed. I'll rebase my patch over this pull request.\n\nAs far as the pull request is concerned I'd suggest that we rename SolrMetricManager to SolrCoreMetricManager because it is tied to a single core. "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15693874",
            "date": "2016-11-24T17:36:52+0000",
            "content": "From what I see, SolrMetricManager only needs the SolrCore for the config-based reporter instantiation, but that's a pretty nice thing to have.\n\nHow about SolrMetricManager takes, as an optional second parameter to the constructor, the name of a SharedMetricRegistry. If absent, then it creates a new, isolated registry. With a name though, that means the config-based reporters you attach are actually being attached to the shared registry, pulling whatever happens to be in there too. \nOf course, then the core unregister action needs to be careful to only replace/reset those metrics that it'd added to the registry, instead of all of them as currently written. It could remove/replace the reporters with no real issue on every core reload (aside from possibly a blip in the reporting interval) though. "
        },
        {
            "author": "Kelvin Wong",
            "id": "comment-15695483",
            "date": "2016-11-25T10:18:30+0000",
            "content": "\nHaving a reload reset stats is a bad idea. We can provide an explicit API to reset stats for a node or a core if required.\nRight now, each producer creates/manages its own set of metrics. It might make sense to have some global object creating/managing all our metrics instead. Each producer can then call getOrCreate so that the same set of metrics are used across core reloads. My only concern here is how to namespace the metrics so that different producers clash on metric names. Perhaps give each producer access to the core name?\n\n\nPerhaps SolrMetricManager should use long-lived MetricRegistry instances that are managed in SharedMetricsRegistries?\nSounds good. One suggestion I have is to namespace the registries. For example, we can have each SolrCore report on a registry, Jetty report on another, JVM on another, etc... Then we can configure reporters for each such registry by just specifying its name. This keeps the different sets of metrics nicely isolated and gives us flexibility as to how to report each set of metrics? "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15695829",
            "date": "2016-11-25T13:04:51+0000",
            "content": "Right now, each producer creates/manages its own set of metrics. \nCorrect, but if the producer's life-cycle is tied to that of SolrCore then the lifecycle of that metric will be the same, ie it will vanish when that instance of core is closed.\n\nMy only concern here is how to namespace the metrics so that different producers clash on metric names. Perhaps give each producer access to the core name?\nI think that the registration mechanism where SolrCore registers these metrics for each plugin is ok - it would be similar to how it works in your patch, except we would getOrCreate these metric instances instead of creating new ones for each registration.\n\nSounds good. One suggestion I have is to namespace the registries. \n+1. In the pull request I used a core name, but that would be insufficient - it needs to be made into a hierarchy, eg. \"/core/<coreName>\" for SolrCore metrics, \"/jetty/...\" for Jetty metrics, etc. "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15696479",
            "date": "2016-11-25T18:53:09+0000",
            "content": "I had a scheme for collapsable namespaced registries in my original PR for SOLR-8785. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15701901",
            "date": "2016-11-28T12:56:50+0000",
            "content": "I have created a new branch called \"feature/metrics\" for SOLR-9788, this and other future metrics enhancements \u2013 http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/497212e0\n\nLet's use this for integration between different patches. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15702044",
            "date": "2016-11-28T14:12:41+0000",
            "content": "Jeff Wartes thanks for the pointer to your PR, I borrowed parts of your code and updated my PR:\n\n\n\tsimplified and renamed SolrMetricManager to SolrCoreMetricManager as it really is specific to managing metrics related to SolrCore.\n\tadded a global component for registry management SolrMetricManager, which mostly offers useful syntactic sugar for working with SharedMetricRegistries\n\n\n\nNext step: I'm going to merge my work into Shalin Shekhar Mangar's branch. "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-15705357",
            "date": "2016-11-29T13:53:03+0000",
            "content": "Github user sigram closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/119 "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-15705358",
            "date": "2016-11-29T13:53:03+0000",
            "content": "Github user sigram commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/119\n\n    This work will be merged and continued in the `features/metrics` branch at ASF. "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-15705370",
            "date": "2016-11-29T13:59:31+0000",
            "content": "GitHub user sigram opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/120\n\n    SOLR-4735 Improve Solr metrics reporting\n\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/sigram/lucene-solr jira/solr-4735\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/120.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #120\n\n\ncommit dba0663c79f7b27d4626152d36f8d6d4c62a878d\nAuthor: Andrzej Bialecki <andrzej.bialecki@lucidworks.com>\nDate:   2016-11-23T12:48:26Z\n\n    Initial patch from Jira.\n\ncommit 1ade9c443dbd5b9eae2ec5208b233d28fb20a8cb\nAuthor: Andrzej Bialecki <andrzej.bialecki@lucidworks.com>\nDate:   2016-11-24T10:45:20Z\n\n    Merge branch 'master' into jira/solr-4735\n\ncommit ba2a94fb52d21ed05053a098c8fb9919a469e5b3\nAuthor: Andrzej Bialecki <andrzej.bialecki@lucidworks.com>\nDate:   2016-11-24T15:32:04Z\n\n    Use SharedMetricRegistries for managing per-core metrics.\n\ncommit 7199e818da503bc0e8a40fed7d6a1f742ecbae55\nAuthor: Andrzej Bialecki <andrzej.bialecki@lucidworks.com>\nDate:   2016-11-24T15:44:55Z\n\n    Revert accidental changes to this file.\n\ncommit a4514638df8a2528f339107869b03fe568856fd9\nAuthor: Andrzej Bialecki <andrzej.bialecki@lucidworks.com>\nDate:   2016-11-28T14:01:42Z\n\n    SOLR-4735 Use separate registries for core and other stuff. Use collapsible and\n    configurable namespace.\n\ncommit bf424d1ec1602dffeb33ab0acc8f470e351a6959\nAuthor: Kevin Risden <krisden@apache.org>\nDate:   2016-11-22T19:22:16Z\n\n    SOLR-9728: Ability to specify Key Store type in solr.in file for SSL\n\ncommit 5b2594350df11ef54d52f417b34c6d082ad85e89\nAuthor: Noble Paul <noble@apache.org>\nDate:   2016-11-29T02:35:47Z\n\n    SOLR-9784: added deprecation javadocs\n\ncommit 32c4bd7cc0ac2e93e833f5fe84be4ff69f0b7aeb\nAuthor: Noble Paul <noble@apache.org>\nDate:   2016-11-29T02:36:26Z\n\n    Merge remote-tracking branch 'origin/master'\n\ncommit 9b4f99c1b351b1401e2dd5922a06d79a809332fb\nAuthor: Andrzej Bialecki <andrzej.bialecki@lucidworks.com>\nDate:   2016-11-29T10:37:14Z\n\n    SOLR-4735 Reorder args from top level to bottom.\n\ncommit 70b358960dfe8a6da35991b2a84c93cc9370c3d8\nAuthor: Noble Paul <noble@apache.org>\nDate:   2016-11-29T12:32:59Z\n\n    SOLR-9546: remove unnecessary boxing\n\ncommit 2af8ec2689610f4dfb1f5d87b069b0eb54f72155\nAuthor: Andrzej Bialecki <andrzej.bialecki@lucidworks.com>\nDate:   2016-11-29T13:48:44Z\n\n    SOLR-4735 More cleanup and generalization of JMX reporter.\n\ncommit 4b7002eae75839d2f56a17a65d7e789cb71a9b26\nAuthor: Andrzej Bialecki <andrzej.bialecki@lucidworks.com>\nDate:   2016-11-29T13:56:24Z\n\n    Merge branch 'master' into jira/solr-4735\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15705871",
            "date": "2016-11-29T17:06:21+0000",
            "content": "Commit db1339ff622cc73871897f8b345a9be19134a95e in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=db1339f ]\n\nSOLR-4735 Improve Solr metric reporting (Alan Woodward, Kelvin Wong,\nChristine Poerschke, Jeff Wartes, ab) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15705963",
            "date": "2016-11-29T17:39:57+0000",
            "content": "Commit f027098b4c0a27c70c7cb33dc80492a199bc44cf in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f027098 ]\n\nSOLR-4735 Cleanup and fix lint errors. "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-15706995",
            "date": "2016-11-30T00:08:33+0000",
            "content": "Github user randomstatistic commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/120#discussion_r90144072\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/metrics/SolrMetricManager.java \u2014\n    @@ -0,0 +1,216 @@\n    +/*\n    + * Licensed to the Apache Software Foundation (ASF) under one or more\n    + * contributor license agreements.  See the NOTICE file distributed with\n    + * this work for additional information regarding copyright ownership.\n    + * The ASF licenses this file to You under the Apache License, Version 2.0\n    + * (the \"License\"); you may not use this file except in compliance with\n    + * the License.  You may obtain a copy of the License at\n    + *\n    + *     http://www.apache.org/licenses/LICENSE-2.0\n    + *\n    + * Unless required by applicable law or agreed to in writing, software\n    + * distributed under the License is distributed on an \"AS IS\" BASIS,\n    + * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    + * See the License for the specific language governing permissions and\n    + * limitations under the License.\n    + */\n    +package org.apache.solr.metrics;\n    +\n    +import java.util.Set;\n    +\n    +import com.codahale.metrics.Counter;\n    +import com.codahale.metrics.Histogram;\n    +import com.codahale.metrics.Meter;\n    +import com.codahale.metrics.MetricFilter;\n    +import com.codahale.metrics.MetricRegistry;\n    +import com.codahale.metrics.SharedMetricRegistries;\n    +import com.codahale.metrics.Snapshot;\n    +import com.codahale.metrics.Timer;\n    +import org.apache.solr.common.util.NamedList;\n    +\n    +/**\n    + *\n    + */\n    +public class SolrMetricManager {\n    +\n    +  public static final String REGISTRY_NAME_PREFIX = \"solr\";\n    +  public static final String DEFAULT_REGISTRY = MetricRegistry.name(REGISTRY_NAME_PREFIX, \"default\");\n    +\n    +  // don't create instances of this class\n    +  private SolrMetricManager() { }\n    +\n    +\n    +  /**\n    +   * Return a set of existing registry names.\n    +   */\n    +  public static Set<String> registryNames() \n{\n    +    return SharedMetricRegistries.names();\n    +  }\n    +\n    +  /**\n    +   * Get (or create if not present) a named registry\n    +   * @param registry name of the registry\n    +   * @return existing or newly created registry\n    +   */\n    +  public static MetricRegistry registryFor(String registry) \n{\n    +    return SharedMetricRegistries.getOrCreate(overridableRegistryName(registry));\n    +  }\n    +\n    +  /**\n    +   * Remove all metrics from a specified registry.\n    +   * @param registry registry name\n    +   */\n    +  public static void clearRegistryFor(String registry) {\n    +    SharedMetricRegistries.getOrCreate(overridableRegistryName(registry)).removeMatching(MetricFilter.ALL);\n    \u2014 End diff \u2013\n\n    This, and several other places below could delegate to `registryFor(registry)` "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15707000",
            "date": "2016-11-30T00:10:49+0000",
            "content": "Heh, I wondered whether something like that would happen if I commented on github. Should I constrain myself to talking in Jira? "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15707955",
            "date": "2016-11-30T08:36:34+0000",
            "content": "Ouch! Yeah, let's keep the discussion here. Unfortunately, the way Github integration is set up now it makes pull requests painful to work with.\n\nSo... originally I wasn't sure how often that method would be called and I wanted to save the cost of an additional method call - but it's called so infrequently that elegance indeed seems more important.\n\nAlso, I merged the latest code from the PR into branch feature/metrics because we need to coordinate this work with Shalin Shekhar Mangar, so I'll continue working there. I'll update the PR anyway for completeness. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15708101",
            "date": "2016-11-30T09:53:53+0000",
            "content": "Commit 7cedc4acb26c23d11218037bfcad0737c3c566b6 in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7cedc4a ]\n\nSOLR-4735 Simplify the code by using registryFor(String). "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15708347",
            "date": "2016-11-30T11:44:30+0000",
            "content": "Commit 14ff79175f524b38ec85f0542753e28dc8b1b2c6 in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=14ff791 ]\n\nSOLR-4735 Simplify method names. Allow removing multiple metrics with a prefix. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15708517",
            "date": "2016-11-30T12:56:41+0000",
            "content": "Commit 38887c4a446990b8c37195c08d9bb63108dad31e in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=38887c4 ]\n\nSOLR-4735 Clean up the API. Remove metrics on core unload. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15708742",
            "date": "2016-11-30T14:31:37+0000",
            "content": "I built Solr from the feature/metric branch and tried it out. I have a few questions/comments:\n\n\tI expected that the SolrJmxReporter would be enabled by default but it is not. Should it be? Eventually we should get rid of our current JMX integration (maybe in 7.0?) so it makes sense to have the alternative enabled by default.\n\tIf or how does the SolrJmxReporter work with the <jmx> tag in solrconfig.xml? Does that get deprecated eventually?\n\tThere is no test solrconfig.xml which has a reporter section in it. There should be at least one with the jmx reporter configured that we test instead of just relying on code to create a new metric manager and add a reporter to it.\n\tThe example solrconfig.xml should have a sample reporter section even if it is commented out if the default jmx reporter is not enabled by default.\n\tThe metric reporter should be configurable via the Config API\n\tDo we want to support Graphite or Ganglia reporters as well?\n\n\n\nThe last two can be worked upon in separate issues. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15709123",
            "date": "2016-11-30T17:04:49+0000",
            "content": "Ad 1. Indeed, there is some inconsistency here. I think we should deprecate the <jmx>, and turn on SolrJmxReporter by default in cloud mode (in the example non-cloud config <jmx> is turned off).\nAd 2. currently it's independent. Yes, I think we should eventually remove the <jmx> section.\nAd 3. Good point, I'll create one.\nAd 4. Right, I'll add this.\nAd 5. Not sure how to do that, let's discuss this offline.\nAd 6. This would be easy to add but it brings several additional dependencies from metrics-graphite and metrics-ganglia artifacts. Are we ok with that? "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15709129",
            "date": "2016-11-30T17:06:45+0000",
            "content": "Commit fea0e200a8083ebd86d8e522939e4977d072bbe7 in lucene-solr's branch refs/heads/feature/metrics from Kelvin Wong\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fea0e20 ]\n\nSOLR-4735: SolrMetricsIntegrationTest (Kelvin Wong via Christine Poerschke)\n\nAdds SolrMetricsIntegrationTest which uses solrconfig-metricreporter.xml which configures MockMetricReporter instances.\n\nalso:\n\n\tJmxUtil and SolrJmxReporter tweaks\n\tSolrMetricReporterTest.MockReporter turned into MockMetricReporter\n\tchanges in SolrCoreMetricManagerTest and SolrJmxReporterTest:\n\t\n\t\tmoved initCore from BeforeClass to Before(Test) so that After(Test) can do deleteCore\n\t\tTODO: verify interaction between tests (SolrCoreMetricManagerTest and SolrMetricsIntegrationTest and SolrJmxReporterTest)\n\t\n\t\n\tSolrCoreMetricManagerTest instead of SolrJmxReporter use MockMetricReporter\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15709559",
            "date": "2016-11-30T19:44:32+0000",
            "content": "Commit f489bb8566985174111d4e91df2d6ec03ffcb01e in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f489bb8 ]\n\nSOLR-4735 This method may actually remove several metrics. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15711969",
            "date": "2016-12-01T13:26:15+0000",
            "content": "Commit 1bc01d25ef2fa8fa015ba2fdb5b2ffc8ae3cec0a in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1bc01d2 ]\n\nSOLR-4735 Introduce a concept of top-level group of metrics for things\nthat happen outside SolrCore. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15712011",
            "date": "2016-12-01T13:49:40+0000",
            "content": "Thanks Kelvin for creating the new tests! You beat me to it... \n\nAfter some discussion with Shalin it looks like we need to be able to manage SolrMetricReporter-s outside the SolrCore context - after all they need to also report metrics that are not related to SolrCore:\n\n\tI added a notion of \"group\" of metrics, which corresponds to a top-level subsystem in a Solr node (I'm not attached to the name, naming is hard, so if you have a better suggestion please speak up):\n\n  enum Group { jvm, jetty, http, node, core }\n\n\nThese correspond to JVM, Jetty, HttpClient, SolrCore, and node-level metrics such as Zookeeper stats, Overseer queues etc. The idea is that if you fire JConsole you should see something like this:\n\n* solr\n  - jvm\n  - jetty\n  - http\n  - node\n    - zookeeper\n    - overseer\n    ...\n  - core\n    - collection1\n      - CORE\n      - QUERYHANDLER\n      \u2026\n\n\n\tSince we need reporters for these top-level groups we need to be able to configure them outside SolrCore config. On the other hand we probably don't want to always specify the same reporters in each collection config, too. I'll try to refactor the code so that we can specify the base reporter configs in CoreContainer configuration, and then override them per collection if needed.\n\tCurrent implementation instantiates separate reporters for each collection. I'll look into reusing single global-level reporters when possible, and creating new instances only if there are per-collection overrides.\n\tCurrently we use separate instances of MetricRegistry per core. This may seem wasteful but if you consider deployments with thousands of cores, and multiply this by hundreds of metrics per core then any lookups in a HashMap with 100k keys, or filtering by prefix, will cause performance issues. So I think the current design is more scalable than using a single registry for all cores.\n\n "
        },
        {
            "author": "Kelvin Wong",
            "id": "comment-15715107",
            "date": "2016-12-02T13:19:29+0000",
            "content": "Hi Andrzej, \n\n\nI added a notion of \"group\" of metrics, which corresponds to a top-level subsystem in a Solr node\n\n\tNice! I really like this concept. Will we be instantiating separate reporters for each `Group` then? That way, reporting can be more flexibly configured. (ex. Jetty goes to JMX and Graphite, JVM goes to only JMX, etc...)\n\n\n\n\nI'll look into reusing single global-level reporters when possible, and creating new instances only if there are per-collection overrides.\n\n\n\tIt looks like JmxReporter takes only one `MetricRegistry` at a time (and GraphiteReporter, etc. for that matter). Will we need to build some sort of `AggregateMetricRegistry` to join each core's registries? Or do you have something else in mind?\n\tOn a separate note, it would be nice if we could just specify which registry we'd like a reporter to attach to. So for example, we can attach one reporter to `collection1`, another to `zookeeper`, and one more to `jvm`. These are at different levels in the metrics hierarchy but perhaps we can just pass in the registry's name as part of the config for a reporter?\n\n "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15715880",
            "date": "2016-12-02T18:28:00+0000",
            "content": "`MetricRegistry` is really just a bunch of convenience methods and thread-safety around a `MetricSet`. There isn't much overhead difference between the two. But really, when I think of a MetricRegistry, I think of it as \"a set of metrics I want to attach a reporter to\", nothing more. \nIt's a bit disappointing that reporters take a Registry instead of a MetricSet, since a Registry isa MetricSet.\n\nWith that in mind, one strategy would be have every logical grouping of metrics use its own dedicated (probably shared) registry, and then bind the reporter-registry concept together at reporter definition time. \n\nThat is, create a non-shared registry explicitly for the purpose of attaching a reporter to it, and only when asked to define a reporter. The reporter definition would then include the names of the registries to be reported. Under the hood, a new registry would be created as the union of the requested registries, and the reporter instantiated and attached to that. We'd have to make sure the namespace of all the metrics in the metric groups is unique, so that arbitrary groups can be combined without conflict, but that sounds desirable regardless. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15715931",
            "date": "2016-12-02T18:51:09+0000",
            "content": "Will we be instantiating separate reporters for each `Group` then?\nPart of the refactoring I'm working on is moving reporter configs to solr.xml under <solr><metricReporters><reporter name=\"graphite\" group=\"jvm\" class=\"...\"/> ... . Then appropriate reporters would be created for each group at the time when the component that manages this group of metrics is initialized (eg. \"core\" on SolrCore creation, \"node\" when CoreContainer is loaded etc).\n\nRegarding reporters that could take multiple registries ... yeah, it seems a waste to create separate reporters for each core if they have identical configs. I'm not sure yet how to solve this - eg. for JMX reporting any sort of aggregate reporter would have to create multiple JMXReporter-s anyway, one per registry, because that's how the API is implemented.\n\nit would be nice if we could just specify which registry we'd like a reporter to attach to\nHmm, we could perhaps use either group or registry attribute in the reporter config.\n(edit: ugh, Markdown vs Jira markup) "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15715972",
            "date": "2016-12-02T19:07:42+0000",
            "content": "`MetricRegistry` is really just a bunch of convenience methods and thread-safety around a `MetricSet`\nWell, my comment referred to the fact that MetricRegistry actually uses ConcurrentHashMap for keeping metrics, and having a map with 100k+ keys is never good. But I agree the API could have been more flexible - if reporters were taking MetricSet we could fake one either from multiple registries or from a subset of metrics from one registry, or a combination thereof.\n\nWe can implement an aggregating franken-registry by overriding all methods in MetricRegistry to always delegate operations to sub-registries. It's a little bit hackish but doable. We could create these as non-shared registries only for the purpose of reporting. "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15716247",
            "date": "2016-12-02T20:55:15+0000",
            "content": "Yeah, I get that. I like this line of thought because it means we can create as many registries as make sense, (cores, collections, logical code sections, etc) without worrying about how to get everything reported. We only have to pick some names.\n\nWhat about a class that extends MetricRegistry and also implements MetricRegistryListener? Call that a ListeningMetricRegistry or something. When the configuration asks for a reporter on some set of (registry) names, we create a new, perhaps non-shared ListeningMetricRegistry, use registerAll to scoop the metrics in the desired registries into it, and then call addListener on all the desired registries with the ListeningMetricRegistry so everything stays in sync?\n\nSo that could still mean a single registry with a ton of metrics, but only in cases where there's been an explicit request for a reporter on a ton of metrics.  "
        },
        {
            "author": "Kelvin Wong",
            "id": "comment-15716698",
            "date": "2016-12-02T22:16:41+0000",
            "content": "Hmm wouldn't these aggregate registries defeat the point of keeping them separate in the first place (from a performance perspective)? For example, if a user configures a JMXReporter and a GraphiteReporter on all registries, Solr would have to basically make two copies of all of its registries.\n\nPerhaps we can just \"fake\" an aggregate reporter? There can be configuration logic so that one reporter is instantiated for each registry that the user configured. This might be a bit wasteful but we won't have to deal with maintaining an aggregate registry or writing reporters that do the aggregation. And to the user, it seems as though they only needed to configure one reporter. "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15716772",
            "date": "2016-12-02T22:44:46+0000",
            "content": "That seems pretty viable too. As I mentioned, the memory overhead of a registry is pretty low, just a concurrent map and a list. Plus, the actual metric objects in the map would be shared by both registries, so I'd be more concerned about the work involved keeping them synchronized then with just having multiple registries.\n\nI confess though, I don't have a clear idea whether that's more or less overhead than multiple identically-configured reporters. It feels like most of the possible performance issues here are linear, so it may not matter. Two reporters iterating through 10 metrics each sounds pretty much the same as one reporter iterating over 20 to me, all else being equal.  "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15722085",
            "date": "2016-12-05T12:03:00+0000",
            "content": "Commit 46c662fcab56906f3fa6fde09d3789d1d2fc6aed in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=46c662f ]\n\nSOLR-4735 WIP: move metric reporter config to CoreContainer level. Manage\nreporters in SolrMetricManager. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15728672",
            "date": "2016-12-07T12:39:57+0000",
            "content": "Commit 6f14f41044f6ec5b58c3328fd7186e3f8e1a9d33 in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6f14f41 ]\n\nSOLR-4735 Move metric reporter configuration to solr.xml:\n\n\tadd metric reporting at \"node\" level,\n\tintroduce reporters applicable to multiple groups, multiple registries or all groups,\nbased on the value of \"group\" and \"registry\" attributes,\n\thandle core rename and swap operations so that metrics are preserved but renamed.\n\tmodify SolrJmxReporter to split the hierarchy based also on the reporter's name.\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15729588",
            "date": "2016-12-07T18:56:20+0000",
            "content": "Commit cff7097f40488bb97fb8c38a76ad28d2e1ae50d2 in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cff7097 ]\n\nSOLR-4735 Fix SolrMetricsIntegrationTest. Fix registration of \"solr.jvm\" metrics.\nAdd a few helper methods to SolrMetricManager. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15729770",
            "date": "2016-12-07T20:03:39+0000",
            "content": "Brief summary of the current state on the branch:\n\n\tSolrMetricManager is now the single central location responsible for managing instances of MetricRegistry and SolrMetricReporter-s.\n\tplugin configurations are declared in solr.xml:\n\n<solr>\n  <metrics>\n    <reporter name=\"foo\" group=\"node, core\" class=\"org.apache.solr.metrics.reporters.SolrJmxReporter\"/>\n  ...\n  </metrics>\n...\n</solr>\n\n\n\teach reporter plugin can be configured so that it's automatically instantiated:\n\t\n\t\tfor a specific \"group\" or \"registry\". These attributes may contain multiple comma- or space-separated values, in which case the reporter will be instantiated for each matching group / registry.\n\t\tfor every registry, when neither \"group\" or \"registry\" attribute is specified.\n\t\n\t\n\treporters are instantiated on component initialization and closed when a component is closed / shut down. Currently this happens in: CoreContainer for node group, SolrCore for core group and in SolrDispatchFilter for jvm group.\n\tinstances of metrics are maintained across core reloads and renames (or swaps). They are only permanently deleted on core delete.\n\tSolrJmxReporter now maintains a hierarchy of ObjectName-s that consists of the following:\n\t\n\t\tregistry name (split on dots into sub-paths)\n\t\treporter name\n\t\tcategory\n\t\tscope\n\t\tmetric type\n\t\tmetric name\n\t\n\t\n\n\n\nSee the attached JConsole screenshot.\n\nTo do, possibly in another issues:\n\n\tadd metrics for \"jetty\" and \"http\" groups.\n\tadd a handler to report all this wealth of information \n\tadd other reporter implementations - SLF4J reporter is a low-hanging fruit, and it doesn't bring any additional dependencies.\n\n\n\nComments, suggestions, review and patches are welcome! "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-15731809",
            "date": "2016-12-08T10:38:55+0000",
            "content": "Didn't Shalin already add a /admin/metrics endpoint for reporting metrics?  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15731828",
            "date": "2016-12-08T10:49:27+0000",
            "content": "Didn't Shalin already add a /admin/metrics endpoint for reporting metrics?\n\nIn SOLR-9812, I've added the metrics servlet supplied by the library but it is not longer useful for the flexible registry scheme implemented here. I'm writing a custom handler for it now. I will upload a patch soon. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15733233",
            "date": "2016-12-08T19:51:46+0000",
            "content": "Commit ab52041c9bfea8285446b79f39ddfbf02eebc845 in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ab52041 ]\n\nSOLR-4735 Test also core rename. Fix expectations when registries are reused across tests in\nthe same JVM. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15737567",
            "date": "2016-12-10T09:26:02+0000",
            "content": "There is one important issue that is still unsolved in the current patch - collecting per-collection metrics at the same time as we collect per-core metrics. A single instance of Solr can hold multiple shards and / or replicas that belong to the same logical collection and it would be useful to get combined metrics at a collection level.\n\nIf they weren't needed at the same time, we could probably set up per-core aliases (using overridableRegistryName or a similar mechanism) so that a single per-collection registry would be used for all shards/replicas. However, since all shards would then modify the same underlying Metric objects it would not be possible anymore to separate per-shard metrics from these aggregates. This is however the simple fallback solution of the problem - allow either per-core or per-collection metrics and never both.\n\nCodahale API doesn't support aggregation of child metrics - if it were possible then we could fake the aggregated metrics on the fly when they are needed.\n\nSo far the only solution that comes to my mind that allows us to keep both levels of reporting is to extend Metric subclasses so that they delegate their updates to the parent instance(s), something like the following:\n\npublic class ChildCounter extends Counter {\n public ChildCounter(Counter... parents) { ... }\n\n public void inc(long n) {\n   super.inc(n);\n   for (Counter c : parents) {\n     c.inc(n);\n   }\n }\n}\n\n\nI.e. all updates to the child instances would be applied at (nearly) the same time to parent instances - and parent instances will be referenced by several child instances from different shards. For example, the ChildCounter instance would be registered in \"solr.core.collection1_shard1\" registry, and the aggregate counter would be registered in \"solr.core.collection1\" registry, and the same aggregate counter would be used by ChildCounter from \"solr.core.collection1_shard2\".\n\nIn order to maintain this delegation Solr components would have to always use SolrMetricRegsitry.counter(...), .timer(...), .meter(...), .histogram(...) methods that would set up this delegation, by obtaining metric instances from the parent registries and returning eg. ChildCounter instead of a regular Counter, ChildTimer instead of regular Timer etc.\n\nIt's not clear however how to handle in this design shard / replica updates, eg. split or merge shards, add / remove replica, etc. For performance reasons the Child* metric implementations would use direct references to parent metrics, without having to do a lookup each time the list of parents is modified - which of course means that the list of parents will get out of sync pretty quickly in presence of cluster changes...\n\nAny other suggestions? "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15741835",
            "date": "2016-12-12T13:01:16+0000",
            "content": "Commit c2291001356e6fa1bb72e0543c3e035b5f320862 in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c229100 ]\n\nSOLR-4735 WIP. Initial design for propagating updates to linked registries. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15742673",
            "date": "2016-12-12T18:19:18+0000",
            "content": "After discussing this with Shalin I came to conclusion that core-level metrics should be sufficient, and the cost of this added complexity is too high, so I'm going to revert that last commit.\n\nCollection-level metrics wouldn't be complete anyway in general case - shards and their replicas would live on different nodes anyway, so the collection-level metrics from a single node would never represent the whole picture for a collection, just a partial one for the parts of a collection that live on a single node. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15742676",
            "date": "2016-12-12T18:20:19+0000",
            "content": "Commit 99799cafe57cc32fa2a6bf6c25de3acd18cea248 in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=99799ca ]\n\nRevert \"SOLR-4735 WIP. Initial design for propagating updates to linked registries.\"\n\nThis reverts commit c2291001356e6fa1bb72e0543c3e035b5f320862. "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15742740",
            "date": "2016-12-12T18:38:09+0000",
            "content": "I've fallen behind keeping up with your changes, but for what it's worth, I agree with this. Collection-level metrics are at the cluster level, in aggregate. It's up to the thing you're reporting the metrics into to do the aggregation. For example, what I really want on my dashboard in grafana is a line, something like:\n\nAVG(solr.[all nodes].[all cores belonging to a particular collection].latency.p95)\n\nThen I can drill into a particular node, or core, in my reporting tool if I want. There's a requirement that the metrics namespaces being reported allows for aggregation like this, which might mean a core needs to know the collection to which it belongs, but I don't think the node itself should needs to report collection metrics. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15743174",
            "date": "2016-12-12T21:19:37+0000",
            "content": "Commit d1227af722ef95494efc6c977a1c29f94108b4bf in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d1227af ]\n\nSOLR-4735 Javadoc plus test improvements. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15743199",
            "date": "2016-12-12T21:28:37+0000",
            "content": "Metric names already contain collection name in their namespace - eg. in SolrCloud a core name would be collection1_shard1_replica1. The full metrics name would be then something like solr.core.collection1_shard1_replica1.myReporter.QUERYHANDLER./admin/ping.counters.requests.Count, which seems awfully long to a human but is well-structured and easy to process in code. "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15743201",
            "date": "2016-12-12T21:28:44+0000",
            "content": "Oh, one thing just occurred to me though. There are essentially two classes of request to a collection - the top-level request, and the per-shard fan-out requests. I guess you can sort of derive the metrics of the top-level request from the per-core metrics, but it requires you know the number of shards, and still only works if the two classes of request are not mixed together.  "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15743207",
            "date": "2016-12-12T21:31:32+0000",
            "content": "That's almost perfect. Can we replace those underscores with dots? That would mean the dashboard doesn't need to regex the \"name\" in order to group similar metrics. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15743223",
            "date": "2016-12-12T21:36:19+0000",
            "content": "Hmm, not blindly, you could have a collection named my_collection - but we could make check the collection name and split replica names into proper hierarchy, eg. my_collection_shard1_replica1 -> my_collection.shard1.replica1 "
        },
        {
            "author": "Jeff Wartes",
            "id": "comment-15743325",
            "date": "2016-12-12T22:16:35+0000",
            "content": "Understood, and not all cores are part of a collection. But if it matches the solrcloud convention, it would be pretty nice to use it. (and the node name if it doesn't) I could've sworn I saw an existing function for picking a node name apart somewhere, but I can't seem to find it now - maybe it was in a patch I read or something. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15745981",
            "date": "2016-12-13T19:14:20+0000",
            "content": "Commit 98a04b6cca32d7b2a3da8b30291e1df1edd885cd in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=98a04b6 ]\n\nSOLR-4735 Add unit test for SolrMetricManager. Other changes:\n\n\tadd metrics to SolrCore related to newSearcher events.\n\tbuild a dot-separated hierarchical registry name for cores that are a part of\n  SolrCloud collection.\n\tdon't split metrics by class in SolrJmxReporter - this only obscured the hierarchy.\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15745982",
            "date": "2016-12-13T19:14:24+0000",
            "content": "Commit 3ba5d7db0971eb638a5e1dae17fb3c9ea36440d4 in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3ba5d7d ]\n\nSOLR-4735 Fix javadoc errors. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15754834",
            "date": "2016-12-16T16:12:32+0000",
            "content": "Commit 5f0637cc8569768ac9ce2a38cef5405163a974c0 in lucene-solr's branch refs/heads/feature/metrics from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5f0637c ]\n\nSOLR-4735: Use method in java.util.Objects instead of the forbidden methods in Guava's Preconditions class "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15761049",
            "date": "2016-12-19T12:34:58+0000",
            "content": "Commit 92ef10dbdea6d8764d2a1ecba3d53abee542542d in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=92ef10d ]\n\nSOLR-4735 Add gauges that report the current number of cores. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15761083",
            "date": "2016-12-19T12:52:02+0000",
            "content": "Commit f56da1df6e92da5f1ab524caf62d30ea3a3ceede in lucene-solr's branch refs/heads/feature/metrics from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f56da1d ]\n\nSOLR-4735 Update CHANGES.txt "
        },
        {
            "author": "David Smiley",
            "id": "comment-15761126",
            "date": "2016-12-19T13:13:49+0000",
            "content": "In the future, please create branches named SOLR-XXXX (or LUCENE-XXXX) which is the pattern expected by ASF's git JIRA notifier.  Since this \"metrics\" feature-branch does not follow this convention, merge commits here trigger a bunch of notifications to other issues that were merged in.\n\nAlternatively if this is going to keep occurring... then maybe we can ask ASF Infra to modify the regexp that has this rule. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15761133",
            "date": "2016-12-19T13:17:12+0000",
            "content": "Wilco. Sorry about that, I was wondering why this is so chatty... "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15761261",
            "date": "2016-12-19T14:15:28+0000",
            "content": "David Smiley - I didn't know that commits to jira/ branches are skipped by the commit bot before I created that branch. I figured that since multiple jira issues will be committed to this branch before we merge it to master, I should use a more descriptive name such as \"feature/metrics\". I have opened a ticket with ASF INFRA to skip notifications for commits on all branches beginning with feature/ for Lucene/Solr project. See https://issues.apache.org/jira/servicedesk/customer/portal/1/INFRA-13133  "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15763710",
            "date": "2016-12-20T09:12:39+0000",
            "content": "Commit 8bbdb6248c5de3f3bd61501ba42a50aeec29c78b in lucene-solr's branch refs/heads/master from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8bbdb62 ]\n\nSquashed commit of branch 'feature/metrics', containing:\n    SOLR-4735: Improve Solr metrics reporting\n    SOLR-9812: Implement /admin/metrics API\n    SOLR-9805: Use metrics-jvm library to instrument jvm internals\n    SOLR-9788: Use instrumented jetty classes "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-15764028",
            "date": "2016-12-20T11:54:03+0000",
            "content": "Uploaded final diff between the branch and master, for completeness. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15764246",
            "date": "2016-12-20T13:47:47+0000",
            "content": "Commit b37a72d941dba705b43c8868584bd9df775a1537 in lucene-solr's branch refs/heads/master from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b37a72d ]\n\nSOLR-4735 Use overridableRegistryName also for predefined shared registries.\nCleanup + javadocs. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15780615",
            "date": "2016-12-27T15:30:12+0000",
            "content": "Commit 9dde8a30303de4bce5da45189219dd6150252b29 in lucene-solr's branch refs/heads/branch_6x from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9dde8a3 ]\n\nCumulative patch from master, originally developed on branch\n'feature/metrics', which brings the following issues:\n\n\tSOLR-4735: Improve Solr metrics reporting\n\tSOLR-9812: Implement /admin/metrics API\n\tSOLR-9805: Use metrics-jvm library to instrument jvm internals\n\tSOLR-9788: Use instrumented jetty classes\n\n "
        }
    ]
}