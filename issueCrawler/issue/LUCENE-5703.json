{
    "id": "LUCENE-5703",
    "title": "Don't allocate/copy bytes all the time in binary DV producers",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.9",
            "6.0"
        ]
    },
    "description": "Our binary doc values producers keep on creating new byte[] arrays and copying bytes when a value is requested, which likely doesn't help performance. This has been done because of the way fieldcache consumers used the API, but we should try to fix it in 5.0.",
    "attachments": {
        "LUCENE-5703.patch": "https://issues.apache.org/jira/secure/attachment/12647928/LUCENE-5703.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14007749",
            "author": "Adrien Grand",
            "content": "On a side note, I think that the fact that the buffer needs to be supplied by the consumer void get(int docId, BytesRef result) is a bit error-prone since the BytesRef is created by the consumer while its content is owned by the BinaryDocValues. Maybe we should make BinaryDocValues responsible for managing the BytesRef entirely by changing the method signature to BytesRef get(int docId) similarly to BytesRef next() in TermsEnum? ",
            "date": "2014-05-23T21:43:54+0000"
        },
        {
            "id": "comment-14014932",
            "author": "Michael McCandless",
            "content": "Maybe we should make BinaryDocValues responsible for managing the BytesRef entirely by changing the method signature to BytesRef get(int docId) similarly to BytesRef next() in TermsEnum?\n\n+1, also like DocsAndPositionsEnum.getPayload().\n\nThen it's the caller's job to make a deep copy of the BytesRef if they need to retain it. ",
            "date": "2014-06-01T08:06:58+0000"
        },
        {
            "id": "comment-14015550",
            "author": "Adrien Grand",
            "content": "Here is a patch that switches BinaryDocValues to the discussed API, as well as Sorted(Set)DocValues.lookupOrd for consistency.\n\n\n\tthe default codec as well as memory, direct and disk don't allocate the byte[] anymore in BinaryDocValues.get.\n\tthe default codec takes advantage of the maximum length of binary terms, which is exposed in the metadata to never have to resize the BytesRef that stores the term.\n\told codecs (lucene40, lucene42) have moved to the new API but still allocate the byte[] on the fly\n\tfixed grouping and comparators to not assume they own the bytes\n\tremoved the two tests from BaseDocValuesFormatTestCase that ensured that each return value had its own bytes\n\n\n\nTests pass (I ran the whole suite 6 times already) and I'll run benchmarks soon to make sure that doesn't introduce a performance regression. ",
            "date": "2014-06-02T16:55:21+0000"
        },
        {
            "id": "comment-14015559",
            "author": "Robert Muir",
            "content": "Thanks for tackling this! I will help with the reviews, its a tricky one.\n\nI didn't yet look, do SORTED/SORTED_SET TermsEnums also have the new behavior? This was another source of stupid stuff, I think they should be consistent with other termsenums (and now lookupOrd). ",
            "date": "2014-06-02T16:59:03+0000"
        },
        {
            "id": "comment-14015569",
            "author": "Adrien Grand",
            "content": "The term returned by TermsEnum.next() or TermsEnum.term() always comes from Sorted(Set)DocValues.lookupOrd. It doesn't allocate its own terms. ",
            "date": "2014-06-02T17:05:47+0000"
        },
        {
            "id": "comment-14015582",
            "author": "Robert Muir",
            "content": "\nThe term returned by TermsEnum.next() or TermsEnum.term() always comes from Sorted(Set)DocValues.lookupOrd. It doesn't allocate its own terms.\n\nWell only in the base (simplistic) implementation. At least for the default codec, the codec overrides TermsEnum and implements it special for performance reasons. and lookupOrd in this case actually uses the termsenum (i think) ",
            "date": "2014-06-02T17:10:33+0000"
        },
        {
            "id": "comment-14015622",
            "author": "Adrien Grand",
            "content": "I missed that one. Here is an updated patch that removes the setTerm paranoia from the terms enum of Lucene45DocValuesFormat. ",
            "date": "2014-06-02T17:38:53+0000"
        },
        {
            "id": "comment-14016453",
            "author": "Robert Muir",
            "content": "This looks pretty good. Can we improve the Sorted/SortedSetTermsEnum.seek* ? I don't think its the right tradeoff at all to call lookupOrd() (which may incur I/O) to save copying bytes! ",
            "date": "2014-06-03T12:37:10+0000"
        },
        {
            "id": "comment-14017419",
            "author": "Adrien Grand",
            "content": "Here is an updated patch. Sorted(Set)TermsEnum copies the supplied BytesRef when a match is found instead of looking up the ord. ",
            "date": "2014-06-04T06:27:28+0000"
        },
        {
            "id": "comment-14017668",
            "author": "Robert Muir",
            "content": "+1 to commit, thank you for taking care of this! ",
            "date": "2014-06-04T12:52:53+0000"
        },
        {
            "id": "comment-14017737",
            "author": "Robert Muir",
            "content": "I kicked this around all i could with nightly tests, running tests over and over, etc. I'm seeing this reproducible fail:\n\nant test  -Dtestcase=TestDistributedMissingSort -Dtests.method=testDistribSearch -Dtests.seed=6B475C36C0EF9CD5 -Dtests.nightly=true -Dtests.slow=true -Dtests.locale=ar -Dtests.timezone=Africa/Windhoek -Dtests.file.encoding=UTF-8\n\n ",
            "date": "2014-06-04T14:53:42+0000"
        },
        {
            "id": "comment-14018004",
            "author": "Robert Muir",
            "content": "I have a fix, I will update the patch in a bit (also with a test). ",
            "date": "2014-06-04T18:52:59+0000"
        },
        {
            "id": "comment-14018372",
            "author": "Robert Muir",
            "content": "Updated to trunk. Added TestFieldCacheSortRandom. Fixed bug in the original patch with FC (it cannot share here), so instead getTermsIndex returns a light iterator over the \"real thing\" just like docTermsOrds. Because of this, I had to also fix any bad test assumptions around 'same'. Also cleaned up the termsenum in the default codec a bit: the methods like doSeek/doNext are stupid and I removed them.\n\nIll beast and review some more, but this is all looking good. ",
            "date": "2014-06-05T00:45:13+0000"
        },
        {
            "id": "comment-14018411",
            "author": "Robert Muir",
            "content": "Updated patch: folds in an unrelated test bug fix from beasting slow+nightly...  ",
            "date": "2014-06-05T01:50:07+0000"
        },
        {
            "id": "comment-14018461",
            "author": "Robert Muir",
            "content": "Upon final review: I am unhappy about a few things with the latest patch, mostly doing with safety:\n\n\tDocValues.EMPTY_XXX is now unsafe, it uses a static mutable thing (BytesRef). We should make these methods instead of constants. This won't ever be performance critical so its ok to me.\n\tMemory and so on should do an array copy instead of returning singleton stuff. If there is a bug in someone's code, it could corrupt the data and get merged into index corruption.\n\n\n\nI'm ok with someone's bug in their code corrupting their threadlocal code-private byte[], but not the index. We have to draw the line there. ",
            "date": "2014-06-05T04:23:31+0000"
        },
        {
            "id": "comment-14018463",
            "author": "Robert Muir",
            "content": "Ill start tackling the EMPTY issue. it shouldn't be controversial at all, but the safety here is mandatory because this constant is used by SegmentMerger.\n\nAs far as the all-in-ram ones exposing the ability to corrupt the same stuff thats merged, we can think of a number of compromises / solutions, but something must be done:\n\n\tSystem.arraycopy\n\tbig fat warnings on these that they are \"unsafe\" (they are not part of the official index format, so maybe thats ok).\n\tthey could keep ahold of their file descriptors and override merge() to stream the data from the file.\n\n ",
            "date": "2014-06-05T04:32:45+0000"
        },
        {
            "id": "comment-14018489",
            "author": "Robert Muir",
            "content": "Updated patch fixing most EMPTY stuff.\n\nTermOrdValComparator.MISSING_BYTESREF and other unsafe stuff like that still needs to be fixed.\n\nAnd I did nothing with the in-RAM dv providers. ",
            "date": "2014-06-05T05:27:41+0000"
        },
        {
            "id": "comment-14018541",
            "author": "Robert Muir",
            "content": "I tried to just make TermOrdValComparator.MISSING_BYTESREF an instance variable instead of static as an easy-fix, but this uncovered a real bug: it break searchAfter. We have to assume users will want to deserialize results there... we can't rely upon them providing back that exact same bytesref as the missing value. Having it as a static only hid that in tests. ",
            "date": "2014-06-05T06:54:49+0000"
        },
        {
            "id": "comment-14018554",
            "author": "Robert Muir",
            "content": "patch fixing the comparator (well, to be no worse than today). It uses MISSING_BYTES instead. ",
            "date": "2014-06-05T07:16:13+0000"
        },
        {
            "id": "comment-14018656",
            "author": "Adrien Grand",
            "content": "\n\n\tSystem.arraycopy\n\tbig fat warnings on these that they are \"unsafe\" (they are not part of the official index format, so maybe thats ok).\n\tthey could keep ahold of their file descriptors and override merge() to stream the data from the file.\n\n\n\nI'm hesitating between the 1st and 2nd idea. I'm not a fan of the 3rd idea as it would make merging a bit more complex although I really like how simple it is today.\n\nSince the default codec doesn't have the issue and since this issue already exists in other index formats (eg. the payload of DirectPostingsFormat), I think it would be fine to just have a warning? ",
            "date": "2014-06-05T10:34:44+0000"
        },
        {
            "id": "comment-14018893",
            "author": "ASF subversion and git services",
            "content": "Commit 1600688 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1600688 ]\n\nLUCENE-5703: BinaryDocValues producers don't allocate or copy bytes on each access anymore ",
            "date": "2014-06-05T15:54:51+0000"
        },
        {
            "id": "comment-14019045",
            "author": "ASF subversion and git services",
            "content": "Commit 1600716 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1600716 ]\n\nLUCENE-5703: fix safety bug for FC's BINARY too ",
            "date": "2014-06-05T18:07:17+0000"
        },
        {
            "id": "comment-14019137",
            "author": "ASF subversion and git services",
            "content": "Commit 1600741 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1600741 ]\n\nLUCENE-5703: BinaryDocValues producers don't allocate or copy bytes on each access anymore ",
            "date": "2014-06-05T19:34:23+0000"
        },
        {
            "id": "comment-14019138",
            "author": "Robert Muir",
            "content": "Thanks Adrien! ",
            "date": "2014-06-05T19:34:33+0000"
        }
    ]
}