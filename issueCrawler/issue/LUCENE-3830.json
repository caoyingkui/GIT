{
    "id": "LUCENE-3830",
    "title": "MappingCharFilter could be improved by switching to an FST.",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "MappingCharFilter stores an overly complex tree-like structure for matching input patterns. The input is a union of fixed strings mapped to a set of fixed strings; an fst matcher would be ideal here and provide both memory and speed improvement I bet.",
    "attachments": {
        "LUCENE-3830.patch": "https://issues.apache.org/jira/secure/attachment/12525079/LUCENE-3830.patch",
        "PerfTestMappingCharFilter.java": "https://issues.apache.org/jira/secure/attachment/12525525/PerfTestMappingCharFilter.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-11T14:08:41+0000",
            "content": "I think these are related \u2013 the logic in MappingCharFilter was vague to me when I looked at it last time, I'm sure it could be cleaned up if an fst was used for matching input. ",
            "author": "Dawid Weiss",
            "id": "comment-13251587"
        },
        {
            "date": "2012-04-30T17:03:08+0000",
            "content": "Patch; I think it's basically working.\n\nI disallow empty string match to be added (this was accepted, but I think ignored, before), so I had to fix a couple places that were doing that.\n\nI also added another random test that separately (slowly) computes the output & corrected offsets and then compares ... it's passing.\n\nI still need to do a perf test.. does anyone have a \"typical\" set of mappings + content I could use?  Else I'll try to come up with something... ",
            "author": "Michael McCandless",
            "id": "comment-13265033"
        },
        {
            "date": "2012-04-30T19:28:46+0000",
            "content": "just laughing a little bit to stumble on this:\n\nhttp://www.cis.uni-muenchen.de/people/Schulz/Pub/dictle5.ps ",
            "author": "Robert Muir",
            "id": "comment-13265137"
        },
        {
            "date": "2012-04-30T19:44:52+0000",
            "content": "Stoyan Mihov is everywhere, he's done everything  ",
            "author": "Dawid Weiss",
            "id": "comment-13265145"
        },
        {
            "date": "2012-04-30T19:52:32+0000",
            "content": "I briefly looked at the patch. Looks good (didn't check indexes and most of the logic, just went through the general idea)\n\n+ * An FST {@link Outputs} implementation where each output\n+ * is a sequence of bytes.\n+ *\n+ * @lucene.experimental\n+ */\n+\n+public final class CharSequenceOutputs extends Outputs<CharsRef> { \n\n\nJavadoc is probably wrong (sequence of bytes?).\n\nOther than that I think it's all right. I'd probably implement it based on the stack of currently \"active\" tokens moving through the fst \u2013 this way you know when you have a greedy first longest match simply by looking at the set of active tokens when a match fires instead of restarting from each position.\n\nBut then \u2013 Mihov's algorithm claims to reduce this to O(1) basically so it'd be very nice to implement that instead  ",
            "author": "Dawid Weiss",
            "id": "comment-13265154"
        },
        {
            "date": "2012-05-01T16:25:25+0000",
            "content": "I only glanced at the Schulz/Mihov paper, but it seemed like in order for it to work you have\nto add extra transitions (loops) which would make the FST infinite? (could be totally wrong here)\n\nMaybe there is some creative way we could do this, but thats just in addition to the fact the\npaper is ... like their other papers and would take some work to decode anyway  ",
            "author": "Robert Muir",
            "id": "comment-13265888"
        },
        {
            "date": "2012-05-01T18:52:35+0000",
            "content": "Just laughing a little bit to stumble on this:\n\nOnly 23 pages!\n\nJavadoc is probably wrong (sequence of bytes?).\n\nThanks Dawid, I'll fix.\n\nI'd probably implement it based on the stack of currently \"active\" tokens moving through the fst \u2013 this way you know when you have a greedy first longest match simply by looking at the set of active tokens when a match fires instead of restarting from each position.\n\nHmm I don't quite understand ... can you describe more?\n\nIf there's something simple in between what MappingCharFilter (and my patch) does today (\"restart on each position\"), and the 23 page paper, that would be nice  ",
            "author": "Michael McCandless",
            "id": "comment-13265964"
        },
        {
            "date": "2012-05-02T08:51:08+0000",
            "content": "Hmm I don't quite understand ... can you describe more?\n\nI'm on vacation this week, so short: from the brief code inspection I concluded you're using a search from each position to get the maximum match, is this right? If so, the pessimistic time is quite bad for patterns like \"aaa*b\" and input strings \"aaaa*c\" (replace * with a large number of repeated sequences). The way I would try to implement it is to do a state-tracking much like in non-deterministic automata, where you have a stack of \"active\" states which you follow in the automaton and you move them from state to state on each input symbol. If there a given state fires as a match then you have some conditions to check \u2013 are there any states that may be potentially longer but haven't fired yet (if so, you need to delay this firing state because it can be subsumed by others), otherwise when the no other active state blocks that one you can do the replacement.\n\nI haven't really thought about how twisted the logic above can become but I suspect it's not going to be really that bad. The gain is that each input symbol advances your state (at most linearly with the number of active states). It helps with degenerate cases like the one above. I suppose what Mihov et al. do is to statically (on the fst) determine which states can lead to this \"deferred match queue\" and simply eliminate them, but haven't really looked into it.\n\nIt's an improvement, doesn't need to be implemented right away. Sorry for being brief \u2013 the network is flaky here, I'm in the middle of nowhere. ",
            "author": "Dawid Weiss",
            "id": "comment-13266442"
        },
        {
            "date": "2012-05-03T22:47:55+0000",
            "content": "from the brief code inspection I concluded you're using a search from each position to get the maximum match, is this right?\n\nRight.  I mean, that's how the code currently works ... I'm just\nreplacing the recursive Map w/ an FST.\n\nIf so, the pessimistic time is quite bad for patterns like \"aaa*b\" and input strings \"aaaa*c\" (replace * with a large number of repeated sequences). \n\nYes... though I suspect in practice the impact is minimal for Lucene's\ntypical use cases.  Still it would be nice to fix \n\nThe way I would try to implement it is to do a state-tracking much like in non-deterministic automata, where you have a stack of \"active\" states which you follow in the automaton and you move them from state to state on each input symbol.\n\nOK!  I think I understand... I think this amounts to putting a .*\ncycle on the FST's start node, and then doing subset construction to\n\"determinize\" as you traverse?  Ie track all states that the input\ncharacters could be in... so that you only traverse the input once.\n\nI suppose what Mihov et al. do is to statically (on the fst) determine which states can lead to this \"deferred match queue\" and simply eliminate them, but haven't really looked into it.\n\nYeah I think I think the paper (and Aho/Corasick) essentially do that\ndeterminization \"up front\".\n\nSynonymFilter also has the same limitation.... ",
            "author": "Michael McCandless",
            "id": "comment-13267908"
        },
        {
            "date": "2012-05-03T22:52:40+0000",
            "content": "New patch: I made a simple perf test (attached:\nPerfTestMappingCharFilter.java), and found the FST was slower... I\nfixed RollingCharBuffer to bulk read, and also pre-cache the FST arcs\nin a HashMap (FST pre-caches only latin bytes), and now perf is a bit\nfaster.  I also switched to builder API (like SynFilter) so\nthe NormalizeCharMap instance is immutable.\n\nI think it's ready!\n\nWe can separately improve the matching algo based on the 23 page\npaper... ",
            "author": "Michael McCandless",
            "id": "comment-13267912"
        },
        {
            "date": "2012-05-04T15:23:00+0000",
            "content": "Why does mappingcharfilter itself cache FST arcs?\n\nThis seems like a slow thing to do per-reader. Shouldnt this be done\nwhen you build the NormalizeCharMap instead? ",
            "author": "Robert Muir",
            "id": "comment-13268444"
        },
        {
            "date": "2012-05-04T15:50:29+0000",
            "content": "Shouldnt this be done when you build the NormalizeCharMap instead?\n\nDuh, yes!  I'll fix. ",
            "author": "Michael McCandless",
            "id": "comment-13268469"
        },
        {
            "date": "2012-05-04T16:22:07+0000",
            "content": "Patch moving the root arc cache creation to NormalizeCharMap... ",
            "author": "Michael McCandless",
            "id": "comment-13268499"
        },
        {
            "date": "2012-05-06T13:07:12+0000",
            "content": "patch looks good: I guess the bulk read in RollingCharBuffer should help\nother things like Kuromoji that use it too?! ",
            "author": "Robert Muir",
            "id": "comment-13269210"
        },
        {
            "date": "2012-05-06T13:08:31+0000",
            "content": "I guess the bulk read in RollingCharBuffer should help other things like Kuromoji that use it too?!\n\nI haven't tested but I think it should help! ",
            "author": "Michael McCandless",
            "id": "comment-13269211"
        }
    ]
}