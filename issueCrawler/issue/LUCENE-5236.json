{
    "id": "LUCENE-5236",
    "title": "Use broadword bit selection in EliasFanoDecoder",
    "details": {
        "components": [],
        "fix_versions": [
            "4.6"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Try and speed up decoding",
    "attachments": {
        "TestDocIdSetBenchmark.java": "https://issues.apache.org/jira/secure/attachment/12607456/TestDocIdSetBenchmark.java",
        "LUCENE-5236.patch": "https://issues.apache.org/jira/secure/attachment/12607002/LUCENE-5236.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-09-22T12:41:27+0000",
            "content": "This consists of using BroadWord.select9 instead of the linear search within the upper bits long that represents highTarget in EliasFanoDecoder.advanceToHighValue .\n\nOne way to do that is to inline methods nextHighValue, toAfterCurrentHighBit, toNextHighLong and getCurrentRightShift until only basic java operations are in the code.\nThen the linear search on curHighLong becomes visible.\nThen hopefully some simplifications can be done, best by using assert's and testing.\nFinally BroadWord.select9 can be introduced.\n\nWhen I tried this, some tests failed when I tried to simplify: TestEliasFanoSequence and also TestEliasFanoDocIdSet .\nSo I'll simply restart from scratch (trunk), but I have no idea when I have the time to do this. ",
            "author": "Paul Elschot",
            "id": "comment-13774006"
        },
        {
            "date": "2013-10-05T15:55:31+0000",
            "content": "LUCENE-5109 also modifies the EliasFanoDecoder.advanceToValue method. ",
            "author": "Paul Elschot",
            "id": "comment-13787245"
        },
        {
            "date": "2013-10-05T17:37:45+0000",
            "content": "The patch of 5 Oct 2013 includes my modifications for LUCENE-5109.\nThe patch also adds some tests.\n\nThis passes TestEliasFanoSequence and TestEliasFanoDocIdSet.\n\nI did not do any performance tests for broadword bit selection yet.\nThe times taken by some of the longer tests are encouraging, but that does not mean much. ",
            "author": "Paul Elschot",
            "id": "comment-13787279"
        },
        {
            "date": "2013-10-05T21:34:45+0000",
            "content": "See http://people.apache.org/~jpountz/doc_id_sets.html for the EliasFanoDocIdSet without index and without broadword bit selection.\n\nWith index and broadword bit selection on my 32 bit machine, worst case performance for load factor -1 (1/10) for any advance(), relative to FixedBitSet, is  -3.42 (2 log scale)  for  advance(3571).\nThe other advance() cases have better worst cases, so broadword bit selection really helps there, too. ",
            "author": "Paul Elschot",
            "id": "comment-13787360"
        },
        {
            "date": "2013-10-07T20:55:03+0000",
            "content": "Mostly the same patch as the one of 5 October, but with improved javadocs, mostly to mention where in the decoder the new index is used and not used.\n\nAlso a minor API change (everything is still marked experimental): renamed EliasFanoDecoder.index() to currentIndex() to avoid the impression of setting the index.\n\nAdded EliasFanoDecoder.currentValue() for use in combination with advanceToIndex(). ",
            "author": "Paul Elschot",
            "id": "comment-13788558"
        },
        {
            "date": "2013-10-08T22:26:47+0000",
            "content": "The version of DocIdSetBenchmark from LUCENE-5101 that I am currently using.\n\nMain changes:\n\n\tchanged it into a test case to make it easier to use, the main() in still in there.\n\tadded a few load factors.\n\tran into a score value problem when exhausting an iterator could only be done once (for larger sets), so I changed the score value into float and divided it by the \"actual\" run time.\n\n\n ",
            "author": "Paul Elschot",
            "id": "comment-13789789"
        },
        {
            "date": "2013-10-13T12:42:58+0000",
            "content": "The patch of 13 Oct 2013 also includes a method name correction in the BroadWord class (see at LUCENE-5098), and it removes some unused code and one or two commented code lines. ",
            "author": "Paul Elschot",
            "id": "comment-13793636"
        },
        {
            "date": "2013-10-13T20:16:49+0000",
            "content": "/** @return See {@link EliasFanoEncoder#sufficientlySmallerThanBitSet(long, long)} */\n\nWe try to put text rather than just javadoc tags in javadocs (ie. \"Return X\" rather than \"@return X\") so that the method summary doesn't appear empty on the class-level javadocs.\n\nprivate static long numLongsForBits(long numBits) { // Note: int version in FixedBitSet.bits2words()\n\nI think you can directly use OpenBitSet.bits2words here? It already works with longs.\n\nThere are some tabs mixed up with spaces and a broken javadoc link (see ant precommit) but the patch otherwise looks really good!\n\n\nWith index and broadword bit selection on my 32 bit machine, worst case performance for load factor -1 (1/10) for any advance(), relative to FixedBitSet, is -3.42 (2 log scale) for advance(3571).\nThe other advance() cases have better worst cases, so broadword bit selection really helps there, too.\n\nWow! This looks excellent! I will run the benchmark on my 64-bits machine tomorrow to see if I get similar results. ",
            "author": "Adrien Grand",
            "id": "comment-13793772"
        },
        {
            "date": "2013-10-13T22:25:31+0000",
            "content": "The second patch of 13 Oct 2013 improves the javadocs of EliasFanoDocIdSet, and adds the condition to sufficientlySmallerThanBitSet to always prefer a bit set when it uses no more than 4 longs.\n\nant validate\ndoes not complain about tabs anymore here.\n\nI could not find a broken link in the javadocs, maybe because I'm using java 1.7:\nant documentation-lint\nfails with the error message \"Linting documentation HTML is not supported on this Java version (1.7)\".\nThere is an http:// reference to archiv.org in the javadoc as plain text (it is not marked up as a link), and just now it worked fine as a link.\n\nOpenBitSet.bits2words will fail when the number of bits gets just over the maximum int value, so I prefer not to use it for now.\n\nI am looking forward to the benchmark results on a 64 bits machine.\n\nIn the decoder there is a test to use naive bit selection when the needed rank is less then or equal to 8, and otherwise use broadword bit selection.\nI expect this constant 8 to be close to the optimal value on a current 64 bit machine, but some tuning may be needed.\nSee also my first comment of 11 July 2013 at LUCENE-5098. ",
            "author": "Paul Elschot",
            "id": "comment-13793814"
        },
        {
            "date": "2013-10-14T09:43:05+0000",
            "content": "Thanks, ant precommit and tests ran successfully.\n\nfails with the error message \"Linting documentation HTML is not supported on this Java version (1.7)\". \n\nI don't clearly understand what triggers this message but it works for me although I have 1.7 as well.\n\nOpenBitSet.bits2words will fail when the number of bits gets just over the maximum int value, so I prefer not to use it for now.\n\nYou mean you don't like the fact that the cast is unchecked, right? I guess we should fix it and use it?\n\nI am looking forward to the benchmark results on a 64 bits machine.\n\nHere it is, and it is excellent! http://people.apache.org/~jpountz/doc_id_sets.html\n\nI'll commit your latest patch soon if you have no objection. ",
            "author": "Adrien Grand",
            "id": "comment-13794015"
        },
        {
            "date": "2013-10-14T21:35:36+0000",
            "content": "I have no objection at all to committing. Needless to say that I am pleasantly surprised with these benchmark results.\n\nOn my 32 bit machine FixedBitSet does better in general, i.e. the others do worse in the results.\nBut the trends between the others are quite similar.\n\nSo it's really time to upgrade to 64-bit. Mostly talking to myself, but in case there still are older production machines out there...\n\nFixing FixedBitSet.bits2words involves changing the int numBits arguments in the FixedBitSet constructors to long,\nand testing whether the result of bits2words is smaller than max int.\nI don't see Lucene segments growing above 2G docs real soon now, so this is not urgent for FixedBitSet. ",
            "author": "Paul Elschot",
            "id": "comment-13794512"
        },
        {
            "date": "2013-10-15T15:30:53+0000",
            "content": "Commit 1532388 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1532388 ]\n\nLUCENE-5236: EliasFanoDocIdSet now has an index and uses broadword bit selection to speed-up advance() ",
            "author": "ASF subversion and git services",
            "id": "comment-13795300"
        },
        {
            "date": "2013-10-15T15:35:17+0000",
            "content": "Commit 1532390 from Adrien Grand in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1532390 ]\n\nLUCENE-5236: EliasFanoDocIdSet now has an index and uses broadword bit selection to speed-up advance() ",
            "author": "ASF subversion and git services",
            "id": "comment-13795309"
        },
        {
            "date": "2013-10-15T15:36:28+0000",
            "content": "Committed. Thanks Paul! ",
            "author": "Adrien Grand",
            "id": "comment-13795310"
        },
        {
            "date": "2014-03-11T11:08:16+0000",
            "content": "Sorry guys\u2014just happened to read at this thread. My 2\u20ac\u00a2:\n\n\n\tRank9/Select9 and full ranking structures, not rank/select-in-a-word algorithms.\n\tI'm using Long.bitCount(), Long.numberOfTralilingZeros() etc. everywhere since Jan 2013. Intrinsification is a bet, but it pays, and using them will convince them IBM and others to intrinsify. If only Oracle would add Long.clearLowestBitSet() ...\n\tThe alternative algorithm for sideways addition (a.k.a. popcount) should be called \"broadword\" or Wilkes\u2013Wheeler\u2013Gill.\n\tSelection gets better and better every day. http://vigna.di.unimi.it/select.php tries to keep track of the improvement. The current code in it.unimi.dsi.bits.Fast is the best I'm aware of.\n\n\n\nCiao! ",
            "author": "Sebastiano Vigna",
            "id": "comment-13930217"
        },
        {
            "date": "2014-03-13T08:42:27+0000",
            "content": "The name select9 was meanwhile replaced by select in the code here.\n\nDoes using Long.*  everywhere include using them for selection of a bit from a 64 word (in a loop)?\n\nI tried the link for select.php a few times, but I got a 404 Not Found. ",
            "author": "Paul Elschot",
            "id": "comment-13933006"
        },
        {
            "date": "2014-03-13T09:13:37+0000",
            "content": "Sorry.\n\nhttp://vigna.di.unimi.it/Sux/select.php\n\nNo, as I wrote the select-in-a-word code is the one in it.unimi.dsi.bits.Fast (DSI utilities). Looping to select works only on very sparse words, and Elias-Fano upper bits are about half zeroes and half ones (or about two thirds zeroes and one third ones, for unshifted strictly monotone sequences).\n\nThat might change if Oracle give us intrinsified Long.clearLowestBit(). Some tests on Philip Prunin Facebook's code show that his simple strategy (use popcount to decide whether to select in the upper or lower half, and then loop) can be competitive if you have one-clock deletion of the lowest bit.\n\nIn any case, we're talking about shaving 0.5 ns from the final phase of a search. Maybe that's overengineering LOL.\n\nBTW, in principle it could be possible to fix the problem with non-intrinsifying JVMs by using some replacement tricks like those used for running Java 6 code on Java 5 (e.g., retroweaver). It should be possible to have bitCount() running the broadword algorithm at no cost. ",
            "author": "Sebastiano Vigna",
            "id": "comment-13933030"
        },
        {
            "date": "2014-10-31T18:02:51+0000",
            "content": "I opened LUCENE-6040 for speedup of broadword select by table lookups. ",
            "author": "Paul Elschot",
            "id": "comment-14192170"
        }
    ]
}