{
    "id": "SOLR-12812",
    "title": "Add support for arbitrary field:text pairs to streaming similarity calculation in MoreLikeThisHandler",
    "details": {
        "type": "New Feature",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [],
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "In this issue I would like to add support for streaming MLT case where the content of the request specifies explicitly the field:text pairs to be used for MLT lookup.\n\nA longer explanation why the current solutions are not working based on a real use case. \n\nLet's say a solr instance has multiple cores (collections of documents). We'd like to search for similar documents between these cores. Let's assume each collection of documents has three fields: title, summary and abstract.\n\nAt the moment Solr has two MLT handler options: the query-based (similarity to an indexed document) and the free-text based (similarity to an arbitrary text).\n\n1) The first MLT pipeline in Solr looks for documents similar to the given one \n(I'll assume a single document as input, to keep things simple). This\npipeline reads the content of the document from the existing index and creates\na mapping between fields and actual values stored in that document.\nLet's say the document looks like this:\n\ntitle: foo bar\nsummary: baz bar\nabstract: ping ping\n\nThe \"interesting term\" extraction routine in MoreLikeThisHelper will extract those terms and\nscore them against each field's statistics, then take top-N best scoring terms (and fields they're assigned to) and create a Boolean query from it. It could go something like this:\n\ntitle:foo^1.5 summary:bar^0.5\n\nWhen this query is applied against the collection it would not match \"bar\" in the title or abstract (because the weighted \"important\" term wasn't selected in that field). That's the way it should be.\n\n2) In the second pipeline, we give the full \"text\" for which we wish to obtain similar documents. If we were to emulate scenario (1), we'd have to cram the content of each field into a single blob of text, so it'd become something like:\n\nfoo bar, baz bar, ping ping\n\nSolr takes this text and creates a pseudo-document that maps the\nprovided set of fields (mlt.fl) to this value. So effectively it\ncreates a pseudo-document like this:\n\ntitle: foo bar, baz bar, ping ping\nsummary: foo bar, baz bar, ping ping\nabstract: foo bar, baz bar, ping ping\n\nWhat follows is identical to scenario (1), but note that this time the\nset of terms for each field (and their scores) are much broader. This\nmeans that the final query can look like this:\n\ntitle:foo^1.5 summary:foo^0.5 title:bar^1 summary:bar^0.5\n\nThis results in severely skewed MLT results (for example shorter fields will have drastically different term statistics).",
    "attachments": {},
    "issue_links": {},
    "comments": []
}