{
    "id": "SOLR-8756",
    "title": "Need 4 config \"zkDigestUsername\"/\"zkDigestPassword\"/\"zkDigestReadonlyUsername\"/\"zkDigestReadonlyUsername\" in solr.xml",
    "details": {
        "components": [
            "security",
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.3.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Need 4 config in <solrhome>/solr.xml instead of -D parameter in solr.in.sh.\n\nlike below:\n<solr>\n  <solrcloud>\n    <str name=\"zkDigestUsername\">zkusername</str>\n    <str name=\"zkDigestPassword\">zkpassword</str\"zkDigestUsername\">\n    <str name=\"zkDigestReadonlyUsername\">zkreadonlyusername</str>\n    <str name=\"zkDigestReadonlyUsername\">readonlypassword</str\"zkDigestUsername\">\n...\n\nOtherwise, any user can use the linux \"ps\" command showing the full command line including the plain text zookeeper username and password. If we use file store them, we can control the access of the file not to leak the username/password.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-03T07:30:39+0000",
            "author": "Marius Grama",
            "content": "Forest Soup the functionality that you are suggesting would need some structural changes in the ZkACLProvider and ZkCredentialsProvider concrete classes.\nIf you look in \n\nZkController.java\npublic ZkController(final CoreContainer cc, String zkServerAddress, int zkClientConnectTimeout, CloudConfig cloudConfig, final CurrentCoreDescriptorProvider registerOnReconnect){\n    // ...\n\n    String zkACLProviderClass = cloudConfig.getZkACLProviderClass();\n    ZkACLProvider zkACLProvider = null;\n    if (zkACLProviderClass != null && zkACLProviderClass.trim().length() > 0) {\n      zkACLProvider = cc.getResourceLoader().newInstance(zkACLProviderClass, ZkACLProvider.class);\n    } else {\n      zkACLProvider = new DefaultZkACLProvider();\n    }\n\n    String zkCredentialsProviderClass = cloudConfig.getZkCredentialsProviderClass();\n    if (zkCredentialsProviderClass != null && zkCredentialsProviderClass.trim().length() > 0) {\n      strat.setZkCredentialsToAddAutomatically(cc.getResourceLoader().newInstance(zkCredentialsProviderClass, ZkCredentialsProvider.class));\n    } else {\n      strat.setZkCredentialsToAddAutomatically(new DefaultZkCredentialsProvider());\n    }\n\n   // ....\n}\n\n\n\nyou can see that the cloudConfig parameter is not passed to the constructors  of ZkCredentialsProvider and ZkACLProvider concrete classes.\nThe current implementations of these classes are fully unaware of the CloudConfig.\n\nI think that the functionality that you are suggesting makes sense.\nDoes anybody see anything against introducing CloudConfig as constructor parameter for the constructors of ZkACLProvider and ZkCredentialsProvider concrete classes ? ",
            "id": "comment-15177420"
        },
        {
            "date": "2016-08-31T12:25:46+0000",
            "author": "Ga\u00ebtan Smet",
            "content": "Same issue in solr (solrcloud) 6.1.0.\nWe had a security audit and providing the username password in clear text as system property was not accepted.\nProviding the username password via solr.xml would be very helpful. ",
            "id": "comment-15452095"
        }
    ]
}