{
    "id": "SOLR-4999",
    "title": "Make the collections API consistent by using 'collection' instead of 'name'",
    "details": {
        "affect_versions": "4.3.1",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The collections API as of now are split between using 'name' and 'collection' parameter.\nWe should add support to all APIs to work with 'collection', while maintaining 'name' (where it already exists) until 5.0.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Vamsee Yarlagadda",
            "id": "comment-14066543",
            "date": "2014-07-18T17:14:01+0000",
            "content": "Good suggestion. But, this change might impact all the users who are using CollectionsAPI, which i assume is most of them. And moreover this might break their existing automation if any.\n\nTo enable ease of move, we can certainly provide support to both \"name\", \"collection\" starting from 5.0 and we can document that the users can use either of the property names to pass on the value(collectionName).\n\nLooking at the CREATEALIAS, DELETEALIAS params, we are currently using \"name\" and with this proposal, i feel it would be good to use either \"name\" or \"alias\" for just the above operations.\n\nThoughts? "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14067621",
            "date": "2014-07-19T18:28:57+0000",
            "content": "Thinking about all the APIs, the name/collection split already mostly makes sense (logically). This would just help standardize the APIs.\nIf we decide to do this (which I'm already having split thoughts about), it would make more sense to break the back-compat with 5.0 and give users an option to use either for all the 4.x releases. Having both of them work in 5.x would only make things more confusing and also lead to messy code. "
        }
    ]
}