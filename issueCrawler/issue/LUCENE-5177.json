{
    "id": "LUCENE-5177",
    "title": "remove fieldcache weakmap or at least see what relies on GC for purging today",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Test",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "If we are registering close listeners why does this need to be weak?\n\nBut really i dont care about that, here is what i said to Hoss on the solr mailing list:\n\n> (In any case: it looks like a WeakHashMap is still used in case the\n> listeners never get called, correct?)\n>\n\nI think it might be the other way around: i think it was weakmap\nbefore always, the close listeners were then added sometime in 3.x\nseries, so we registered purge events \"as an optimization\".\n\nBut one way to look at it is: readers should really get closed, so why\nhave the weak map and not just a regular hashmap.\n\nEven if we want to keep the weak map (seriously i dont care, and i\ndont want to be the guy fielding complaints on this), I'm going to\nopen with an issue with a patch that removes it and fails tests in\n@afterclass if there is any entries. This way its totally clear\nif/when/where anything is \"relying on GC\" today here and we can at\nleast look at that.",
    "attachments": {
        "LUCENE-5177.patch": "https://issues.apache.org/jira/secure/attachment/12598080/LUCENE-5177.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-08-14T23:04:38+0000",
            "content": "patch that \n\n\tchanges WeakMap to HashMap\n\tremoves the completely bogus purging that happens in tearDown() today (instead only doing this in beforeClass() so failed tests dont interfere with others)\n\tfails if there are any fieldCache entries in afterClass()\n\tadds test-the-tester class.\n\n\n\nsome tests fail. we should see what they are doing (I suspect test-utility classes making crazy readers with their own cache keys that never get closed, but maybe something else interesting) ",
            "author": "Robert Muir",
            "id": "comment-13740375"
        },
        {
            "date": "2013-08-15T19:21:27+0000",
            "content": "+1 to cutover to non-weak HashMap. ",
            "author": "Michael McCandless",
            "id": "comment-13741379"
        },
        {
            "date": "2013-08-15T21:04:05+0000",
            "content": "I understand the value of the improved testing \u2013 but is there any tangible benefit to users to converting the WeakHashMap -> HashMap?\n ",
            "author": "Hoss Man",
            "id": "comment-13741469"
        },
        {
            "date": "2013-08-15T21:16:29+0000",
            "content": "there need not be tangible benefits to users for us to make a change.\n\nwe can make a change because its refactoring our codebase and making it cleaner or many other reasons. ",
            "author": "Robert Muir",
            "id": "comment-13741491"
        },
        {
            "date": "2013-08-15T21:25:44+0000",
            "content": "its refactoring our codebase and making it cleaner or many other reasons.\n\nHow does this do that?\n\nI'm not trying to be confrontational, i'm genuinely not understanding what is improved by switching away from a WeakHashMap and i just want to make sure i'm not missunderstanding something about the big picture.\n\n(If you proposed to get rid of the Map completely and have the Caches hang directly off the readers (something i remember discussing a LOOOONG time ago that people seemed to think was a good idea but no one seemd to have bandwidth for) then i could totally understand arguments that doing so would be making the codebase cleaner \u2013 but i'm not understanding what's clearner/better about using a global static HashMap instead of a WeakHashMap.)\n ",
            "author": "Hoss Man",
            "id": "comment-13741500"
        },
        {
            "date": "2013-08-15T21:33:57+0000",
            "content": "I don't think we should hang \"fieldcaches\" directly off readers.\n\nFieldcache is a broken design: users who want to sort/facet on a field should index their content correctly with docvalues instead.\n\nIts fine for it to be wrapped underneath an UninvertingFilterReader, that also takes a Map<String,DocValuesType> up front though, but by no means should we have this broken shit tightly coupled with stuff in lucene/core ",
            "author": "Robert Muir",
            "id": "comment-13741514"
        },
        {
            "date": "2013-08-15T21:59:54+0000",
            "content": "by no means should we have this broken shit tightly coupled with stuff in lucene/core\n\nok fine, fieldcaches as a concept is fundementally broken, and the suggestion of hanging the caches of index readers is stupid in this day and age of docvalues \u2013 forget it, then.  It was simply an aside comment.\n\nCan you (or anyone else) please help me understand why keeping these \"broken\" caches in global static HashMaps is cleaner/better then keeping them in global static WeakHashMaps?\n ",
            "author": "Hoss Man",
            "id": "comment-13741547"
        },
        {
            "date": "2013-08-15T22:07:00+0000",
            "content": "ok fine, fieldcaches as a concept is fundementally broken, and the suggestion of hanging the caches of index readers is stupid in this day and age of docvalues \n\nMeh... I happen to disagree with both of those assertions. ",
            "author": "Yonik Seeley",
            "id": "comment-13741555"
        },
        {
            "date": "2013-08-15T22:11:12+0000",
            "content": "Thats fine, users who want to have slow reopen times and inefficient use of memory can use an FilterReader that uninverts and exposes stuff via the AtomicReader docValues APIs.\n\nSuch a FilterReader is useful as a transition mechanism anyway: users could pass it to addIndexes to 'upgrade' to docvalues. ",
            "author": "Robert Muir",
            "id": "comment-13741560"
        },
        {
            "date": "2013-08-15T22:21:55+0000",
            "content": "users who want to have slow reopen times and inefficient use of memory can use an FilterReader that uninverts and exposes stuff via the AtomicReader docValues APIs\n\nAs long as it's not slower / more inefficient than the field cache stuff we have today, that's fine.  Just a different API to access it.  ",
            "author": "Yonik Seeley",
            "id": "comment-13741580"
        },
        {
            "date": "2013-08-15T22:25:40+0000",
            "content": "Hoss - wrt WeakHashMap, I guess if it's not needed, lookups could be very slightly faster, debugging maybe slightly easier (if you're looking at weak references on the heap for example), and the code easier to understand (since we are not in fact relying on a weak reference to clean anything up anymore). ",
            "author": "Yonik Seeley",
            "id": "comment-13741583"
        },
        {
            "date": "2013-08-15T22:28:54+0000",
            "content": "Yes, i dont think we should make it slower. but with such a filterreader, it could be implemented cleaner/differently more easily, because people can access it thru DV apis rather than thru FieldCache.DEFAULT.xxx ",
            "author": "Robert Muir",
            "id": "comment-13741586"
        },
        {
            "date": "2013-08-15T22:47:36+0000",
            "content": "How is Solr affected by the idea of not using fieldcache?  From what I understand, docValues have the same data that would go into a stored field, not the indexed field ... so they might not behave exactly the same when it comes to sorting.  Although it doesn't make any sense to sort on a fully tokenized field, it can make sense to sort (or facet) on a field that uses the keyword tokenizer, the lowercase filter, and the trim filter.  I don't think that's possible with docValues.   ",
            "author": "Shawn Heisey",
            "id": "comment-13741611"
        },
        {
            "date": "2013-08-15T22:51:27+0000",
            "content": "Thats all solr issues, its not related here.\n\nDocValues fields take a byte[]. you can put whatever you want in there, it doesnt have to be the same as what goes in a stored field, you can run it thru an analysis chain yourself in some solr document processor or something like that if you really want to do that... you don't need indexwriter's help. ",
            "author": "Robert Muir",
            "id": "comment-13741613"
        },
        {
            "date": "2013-08-15T22:58:32+0000",
            "content": "How is Solr affected by the idea of not using fieldcache?\n\nAFAIK, fieldcache-type functionality isn't going away, and any Lucene API changes (like FieldCache.DEFAULT, etc) will be hidden by Solr.\nDocValues adds additional functionality, and does not take away from anything we already have.\n\nThere are currently one or two disadvantages to using docvalues in solr currently.  The major disadvantage is being forced to specify a default value in Solr, thus making them impossible to use from dynamic fields.   Ideally we'd be able to specify a \"missing\" value (i.e. the value used when there is no value for that document... or rather the \"default\" at the DocValues layer), and that would allow us to remove the currently mandated default value at the Solr layer. ",
            "author": "Yonik Seeley",
            "id": "comment-13741622"
        },
        {
            "date": "2013-08-15T23:04:48+0000",
            "content": "But really this should just be an option on the solr fieldtype, you know when the value is missing, solr just puts that missing value in the dv field for that document (nowhere else like stored fields or anything like that).\n\nsame with if you want the fieldtype to run stuff thru an analyzer or anything like that. I dont think this stuff really has to do with lucene, it can just be options in solrs update process/fieldtypes. ",
            "author": "Robert Muir",
            "id": "comment-13741631"
        },
        {
            "date": "2013-08-16T00:04:01+0000",
            "content": "But really this should just be an option on the solr fieldtype, you know when the value is missing, solr just puts that missing value in the dv field for that document.\n\nBut doing it at the solr level means that you can't define a field without using it.\nDefining a non-docvalues field in solr and not using it currently incurs no overhead.  This isn't the case with docvalues, and I don't believe docvalues allows one to currently specify a default (it always defaults to 0 for missing values?) ",
            "author": "Yonik Seeley",
            "id": "comment-13741703"
        },
        {
            "date": "2013-08-16T00:10:11+0000",
            "content": "why would have fields defined you arent using? I dont understnad the use case here.\n\nand to say there is no overhead with fieldcache is wrong: it makes huge arrays even if one document has the field. so I'm really missing something: in both cases its a column-stride field, just one is built at index-time.\n\nI dont understand why docvalues needs to allow you to specify a default, when you can just specify your own for the document with missing value (if you specify 0, its no different than if it fills that for you). ",
            "author": "Robert Muir",
            "id": "comment-13741707"
        },
        {
            "date": "2013-08-16T00:25:56+0000",
            "content": "why would have fields defined you arent using?\n\nWhy not? Other fields take no resources if you don't use them, but docvalues do.\nDynamic fields represent an almost infinite number of fields you aren't using until you do.\nBTW, this is why the only uses of docvalues in the example schema are commented out.  Who want's to incur index overhead for fields you aren't even using?\n\nIf we want anything other than 0 for a value for \"missing\", we must do it in DocValues. ",
            "author": "Yonik Seeley",
            "id": "comment-13741714"
        },
        {
            "date": "2013-08-16T00:29:13+0000",
            "content": "Thats so wrong: if you want a value other than 0 (say 20) you just set the missing value yourself by setting it in the o.a.l.Document you add to indexwriter.\n\nThere is absolutely no reason for indexwriter to do things for you that you can do yourself. ",
            "author": "Robert Muir",
            "id": "comment-13741715"
        },
        {
            "date": "2013-08-16T00:37:53+0000",
            "content": "By the way: just to explain how it works in FieldCache when you supply these \"sort missing/first/last stuff\". \nThe way that works is with a separate fieldcache \"field\" (a bitset) which marks documents that have a value.\nSo its really a separate fieldcache'd boolean[maxdoc] telling you if there is anything there or not for the original field.\n\nYou can easily do the exact same parallel with docvalues yourself (e.g. in a solr fieldtype) if you want to support those options (a numericdvfield only 1 or 0, takes 1 bit per document, same situation). ",
            "author": "Robert Muir",
            "id": "comment-13741728"
        },
        {
            "date": "2013-08-16T00:43:56+0000",
            "content": "Thats so wrong: if you want a value other than 0 (say 20) you just set the missing value yourself by setting it in the o.a.l.Document you add to indexwriter.\n\nAnd how exactly could we do that with dynamic fields?\nFace it - if we want any other defaults than 0 (for numerics) it needs to somehow be configurable. ",
            "author": "Yonik Seeley",
            "id": "comment-13741738"
        },
        {
            "date": "2013-08-16T00:50:58+0000",
            "content": "It doesnt need to be configurable. its not configurable in fieldcache today!\nIt has a separate bitset cached on fieldcache indicating 1 or 0.\n\nso you just do the same thing with docvalues, as I explained earlier. ",
            "author": "Robert Muir",
            "id": "comment-13741747"
        },
        {
            "date": "2013-08-16T01:04:27+0000",
            "content": "I've opened LUCENE-5178 for this.  It's not strictly related to the FieldCache. ",
            "author": "Yonik Seeley",
            "id": "comment-13741770"
        }
    ]
}