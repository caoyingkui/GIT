{
    "id": "SOLR-4998",
    "title": "Make the use of Slice and Shard consistent across the code and document base",
    "details": {
        "affect_versions": "4.3,                                            4.3.1",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The interchangeable use of Slice and Shard is pretty confusing at times. We should define each separately and use the apt term whenever we do so.",
    "attachments": {
        "SOLR-4998.patch": "https://issues.apache.org/jira/secure/attachment/12593762/SOLR-4998.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Anshum Gupta",
            "id": "comment-13699089",
            "date": "2013-07-03T15:34:40+0000",
            "content": "Here's my take on what I think these terms should refer to. Any feedback suggestions would be great:\nSlice: The higher level, logical representation.\nShard: The entity representing any physical index belonging to a Slice.\n\nCollection has Slices\nSlices have Shards\n\nI'll take this up. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13699094",
            "date": "2013-07-03T15:43:03+0000",
            "content": "Good luck  "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13699583",
            "date": "2013-07-03T23:17:36+0000",
            "content": "Slice: The higher level, logical representation.\n\nBut of what? \nA Slice represents a set of shards: the leader shard + all its replicas in a Collection.\n\n\nCollection has Slices\nSlices have Shards\n\nAnd I thought it's:\n\n\tCluster has Collections\n\tCollections are Logical Indices\n\tCollection has Shards\n\tShards are Physical Indices\n\tA Shard can be a Leader or a Replica\n\tLeader/Replica are just Roles a Shard can have\n\tA Replica can become a Leader through election if previous Leader goes away\n\tCollection has Slices\n\tA Slice is a Logical Set of Shards containing the Leader + all its Replicas\n\tA Slice has as many Shards as the Collection's \"numShards\"\n\n\n\nIf this is right, it deserves a Wiki page.\nIf this is wrong, it needs a fix and then a Wiki page. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13699628",
            "date": "2013-07-04T00:21:54+0000",
            "content": "\nCollection has Slices\nSlices have Shards\n\nCurrently in the code, Slices have Replicas:\nCollection==List<Slice> Slice==List<Replica>\n\nCurrently in the external interfaces and documentation, a Slice is a \"shard\":\ncollection==List<shard> Shard==List<replica>\n\nSo it seems your proposal is to pick neither \n\nShard is a term that has been around too long and has too many meanings (which is normally fine in English since the ambiguity is normally resolved by context - and there are always tons of ambiguities in both spoken and written English).  In code though, context can be harder to establish and I've been trying to stay away from \"shard\" as it has always been ambiguous (meaning either/both logical and physical).\n\nIf we wanted to unify the code and external interfaces + documentation, then the most reasonable thing would seem to be to standardize on the latter - that way there are no back compat issues (at least at the non-code level).\n\nWhat does make sense at least is making the code consistent (existing uses of Shard changed to Slice or Replica depending on it's actual meaning).  This disambiguation would need to be done anyway, even if we decided we wanted to change either Slice or Replica to Shard in the code. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13699693",
            "date": "2013-07-04T01:39:59+0000",
            "content": "We should fit \"core\" in this dictionary as well. In Admin UI all you see is \"core\". Core is the lowest level, the physical index of a shard is represented as a core, however I guess we can simplify and say shard==core?\n\nI'm all for cleaning up this terminology. When I teach courses, people are always confused by shard, replica, slice, replication factor, leader, master, slave....\n\nSo perhaps we should formally say \"Shard replica\" when we talk about replicas/slaves. And kill the term \"slice\" if it does not give extra value over \"shard\". "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13699727",
            "date": "2013-07-04T02:46:41+0000",
            "content": "We should fit \"core\" in this dictionary as well. In Admin UI all you see is \"core\".\n\nIt would be nice if we could reduce the use of core in general since it normally is a lower level implementation detail in cloud. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13699745",
            "date": "2013-07-04T03:54:32+0000",
            "content": "Otis Gospodnetic That's correct. Thanks for adding all of the context into it.\nI just wanted to get the discussion started so that we could converge and then move to the terminology.\n\nI'll create a wiki page as soon as we have a consensus on what's the best possible terminology. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13699748",
            "date": "2013-07-04T04:01:09+0000",
            "content": "What does make sense at least is making the code consistent (existing uses of Shard changed to Slice or Replica depending on it's actual meaning). \nRight, I'll be happy to move to Slice and Replica, just that it may translate to a lot of external changes. We certainly would want to be consistent between\nthe code and the external docs/calls. That was one of my motivations to use 'Shard'.\n\nI am stil all for suggestions. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13699752",
            "date": "2013-07-04T04:11:11+0000",
            "content": "A Slice has as many Shards as the Collection's \"numShards\"\n\nOtis: not quite - a shard in the API is logical.\nhttp://wiki.apache.org/solr/SolrCloud#Managing_collections_via_the_Collections_API\n\"numShards: The number of logical shards (sometimes called slices) to be created as part of the collection.\"\n "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13699758",
            "date": "2013-07-04T04:30:29+0000",
            "content": "But would we want it to mean what Otis mentioned/understood? i.e. Replicas to be replaced by Shards?\nIt's just all mixed up right now.\n\nAlso, I'm not sure where but I guess I have seen 'shards' used that way in the code somewhere. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13700049",
            "date": "2013-07-04T13:02:22+0000",
            "content": "But would we want it to mean what Otis mentioned/understood?\n\nI don't think so.  But at this point, since we've never, ever, gotten everyone to agree on all the terminology, \nperhaps I'll just wait for someone to put up a patch.\n\nAs Mark says, good luck  "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13700173",
            "date": "2013-07-04T16:03:47+0000",
            "content": "As Mark says, good luck\n\n+1\n\nShard is the proper term for Solr users to be using. If you hear somebody say \"slice\", simply remind them that they should be saying \"shard\" and otherwise presume that they do mean \"shard\".\n\nThe SolrCloud wiki glossary is the current bible on the topic, coupled with Yonik's more concise summary as \"collection==List<shard> Shard==List<replica>\".\n\nWe went through a previous round of terminology debates a year ago (or whenever it was) and Yonik updated the wiki back in January. I think it is fairly stable now.\n\nThe real challenge is simply to educate and otherwise cajole people to use the proper terminology. I'll do my part - I'll be starting to write the concepts and glossary sections of my coverage of SolrCloud for my book in the coming weeks.\n\nI think we should follow accepted principles of interface design, and be careful not to blur or cross the line between \"interface\" - what the outside world sees - and \"implementation\" - how the interface is implemented internally.\n\nSo, at this point, I don't see any urgency to change the external definition of the SolrCloud interface - shard - yes, slice - no.\n\nBut if the main concern is to recast the implementation of SolrCloud as Shard rather than Slice, at least make it clear that that is the actual purpose of this Jira.\n\nIt might be useful to check any logging messages to verify that they refer to \"shard\" rather than \"slice\". "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13700329",
            "date": "2013-07-04T20:26:39+0000",
            "content": "I am not sure what naming \"conventionS\" Solr code is using.  I know most people are inconsistent and so code (in general, not referring specifically to Solr here) is also often inconsistent.  Here we see this inconsistency leads to a lot of confusion.  I think it's great Anshum initiated this. My personal preference would be to:\n\n\tpick the terminology that makes sense and is easy to explain and understand\n\tadjust BOTH code and documentation to match that, even if it means renaming classes and variables, because it's only going to get harder to do that if it's not done now.\n\n\n\nOK, here is another attempt:\n\n\n\tA Cluster has Collections\n\tA Collection is a logical index\n\tA Collection has as many Shards as \"numShards\"\n\tA Shard is a logical index subset\n\tThere are as many physical instances of a given Shard as the Collection's \"replicationFactor\"\n\tThese physical instances are called Replicas\n\tThe number of Replicas in a Collection equals \"numShards * replicationFactor\"\n\tEach Replica contains a Core\n\tA Core is a single physical Lucene index\n\tOne Replica in each Shard is labeled a Leader\n\tAny Replica can become a Leader through election if previous Leader goes away\n\tEach Shard has 1 or more Replicas with exactly 1 of those Replicas acting as the Leader\n\n\n\nI think this is it, no?\n\nVisually, by logical role:\n\n\n\nshard 1\nshard 2\nshard 3\n\n\nleader 1.1\nleader 2.1\nleader 3.1\n\n\nreplica 1.2\nreplica 2.2\nreplica 3.2\n\n\nreplica 1.3\nreplica 2.3\nreplica 3.3\n\n\nreplica 1.4\nreplica 2.4\nreplica 3.4\n\n\nreplica 1.5\nreplica 2.5\nreplica 3.5\n\n\n\n\n\nSo we would say that the above Collection has:\n\n\t3 Shards\n\t5 Replicas\n\tin each Shard 1 Replica acts as a Leader\n\n\n\nIf we ignore roles then this same Collection has the following physical structure:\n\n\n\n\nreplica 1.1\nreplica 2.1\nreplica 3.1\n\n\nreplica 1.2\nreplica 2.2\nreplica 3.2\n\n\nreplica 1.3\nreplica 2.3\nreplica 3.3\n\n\nreplica 1.4\nreplica 2.4\nreplica 3.4\n\n\nreplica 1.5\nreplica 2.5\nreplica 3.5\n\n\n\n\n\nYes/no?\n\nSo I agree, there is really no need for \"Slice\" here. I already forgot about that term.\nProblems we'll have:\n\n\tPeople will refer to physical copies, those Replicas, as Shards.  When they say \"Shard\" they'll often refer to a specific Replica.  I know I always think of each cell in the above table as \"Shard\", but that's not how we (should) use that term. Shards are just logical. Those cells are Replicas.\n\tWe use \"Replica\" to a physical index, but also use it to describe a non-Leader role.  Confusing.  If there is a Leader, where are Followers?  Would introducing the term \"Follower\" help?  Then we could say/teach people the following:\n\t\n\t\tWhen you say \"Shard\" it just means the logical Collection subset. It's not physical at all.\n\t\tIf you want to talk about physical indices in a Collection use the term \"Replica\". They are all Replicas.\n\t\tIf you want to refer to a Replica by its role, then you've got to say either Leader or Follower.  Because if you say \"Replica\" we won't know whether you are referring to the special Replica that acts as a Leader or all the other ones.\n\t\n\t\n\n\n\nI think we'll need to correct this in any docs and will need to correct people on the ML until we get everyone in sync.  Any books or articles that have been written with different terminology will be wrong/out of date and will confuse people.\n\nYes/no? "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13700351",
            "date": "2013-07-04T21:22:54+0000",
            "content": "For amusement, consider the ElasticSearch terminology:\n\nhttp://www.elasticsearch.org/guide/reference/glossary/\n\n(Hmmm... just to create trouble in the spirit of \"independence day\", maybe I'll consider an appendix in my book which gives a terminology mapping for developers looking to \"upgrade\" from ElasticSearch to SolrCloud!) "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13700386",
            "date": "2013-07-05T00:07:01+0000",
            "content": "Personally, I'm happy with the current slice/replica terminology in the code and I don't much care if it matches the external doc terminology.\n\nWe have agreed and disagreed on all these points in the past, and I'm sure we will again in the future - looking forward to the next dust up - but I certainly don't think its worth breaking all those api's to change the names in the code now - unless it's a couple minor consistency issues. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13700443",
            "date": "2013-07-05T03:52:37+0000",
            "content": "http://www.elasticsearch.org/guide/reference/glossary/\n\nMuch simpler and cleaner, IMHO:\n\n\tprimary shard\n\treplica shard\n\n\n\nSo in ES a primary shard is a real physical thing and a replica is a real physical thing as well.\nI think that's easier than saying a shard is a logical concept and that inside a shard there are replicas, but some are called leaders and others are called....well, replicas.  So there is no logical vs. physical in ES (see my tables above), it's all just physical:\n\n\n\n\nprimary shard 1\nprimary shard 2\nprimary shard 3\n\n\nreplica shard 1.1\nreplica shard 2.1\nreplica shard 3.1\n\n\nreplica shard 1.2\nreplica shard 2.2\nreplica shard 3.2\n\n\n\n\n\nThat's what you'd get with number_of_shards=3, number_of_replicas=2\n\nSo Collection (Index in ES terminology) creation API takes number_of_shards and number_of_replicas parameters and they are used as shown above, which is less confusing than agreeing what replicationFactor means - is it the total number of replicas in a shard or the number of non-leader replicas.\n\nIt may be too late to change this in SolrCloud now even if everyone agreed... "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13700450",
            "date": "2013-07-05T04:27:06+0000",
            "content": "So I agree, there is really no need for \"Slice\" here. I already forgot about that term.\nIt's just a term that we used for (what we're now calling) Shards. It's deep in the code. At the same time considering that this has the least exposure to the outside world, it's our best bet at being changed.\n\nPeople will refer to physical copies, those Replicas, as Shards. \nExactly what yonik said. There's confusion in the use of the term Shard but I believe it's just a matter of clean documentation.\n\nWould introducing the term \"Follower\" help?\nI wouldn't want that extra element introduced. A 'leader' is just a specific non-default role for a Replica wherein it does some extra bit. Again, we could just fix our documentation on that.\n\n\nPersonally, I'm happy with the current slice/replica terminology in the code and I don't much care if it matches the external doc terminology.\n+1, but people outside of here rarely use/see 'Slice' and so as Yonik suggested, it seems better to converge towards 'Shard' and 'Replicas'. That is what I'm working on, doing away with 'Slice'.\n\nbut I certainly don't think its worth breaking all those api's to change the names in the code now - unless it's a couple minor consistency issues.\nThis certainly would mean breaking back-compat with a few things at least. May be more. I am almost half way through and already have a good 250k patch with instances where Slice and Shard are used interchangeably. There are other places where a Replica is referred to as a Shard. So it's just all mixed up.\n\nIt may be too late to change this in SolrCloud now even if everyone agreed...\nI don't think we can/should make a change that drastic. As long as it's a little consistent and documented, Shard and Replicas should work fine for us.\n\n\nTo get an opinion, do you guys think we shouldn't be 'renaming' public APIs? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13700451",
            "date": "2013-07-05T04:36:15+0000",
            "content": "To get an opinion, do you guys think we shouldn't be 'renaming' public APIs?\n\nWhich public APIs? All public APIs already use \"shard\" instead of \"slice\", don't they? "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13700454",
            "date": "2013-07-05T04:48:02+0000",
            "content": "Which public APIs? All public APIs already use \"shard\" instead of \"slice\", don't they?\nTo be clear, I'm talking about the Java APIs and not the HTTP calls. Calls like getSlice(), getSliceMap() etc. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13700458",
            "date": "2013-07-05T05:04:57+0000",
            "content": "Ahhhh... now we're getting somewhere. The crux of the real problem is the fact that the internal cluster state, which does of course include \"slice\" and contextual references to shards and replicas is completely exposed to the external world via CloudSolrServer.getZkStateReader().getClusterState().\n\nUhhh...\n\nI was thinking completely in terms of what a user needs to know in terms of query and update and overall operations, but ClusterState is a whole level deeper down in the guts of SolrCloud.\n\nYonik, now what do you have to say?!\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13702306",
            "date": "2013-07-08T19:21:25+0000",
            "content": "FWIW...\n\nMy opinions on the broader concerns about fixing/changing terminology...\n\n\n\tkeeping the HTTP/user/solrj based client APIs consistent should be more important then worrying about the java/internals based APIs only used inside the war\n\tkeeping the code understandable should be more important then worrying about backcompat of the java/internal based APIs only used inside the war (https://twitter.com/jeremyckahn/status/351814031054602240)\n\n\n\nMy way of thinking about solrcloud (as a relative novice in this area) is...\n\n\n\tcollections are made up of distinct (logical) shards\n\tshards are made of of redundant (concrete) replicas\n\treplicas are implemented as (physical) SolrCores\n\n\n\n...if i'm wrong i'm wrong \u2013 but that seems fairly straight forward and easy to understand. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13702395",
            "date": "2013-07-08T20:41:26+0000",
            "content": "but people outside of here rarely use/see 'Slice' and so as Yonik suggested\n\nI don't think that's a problem in code - the javadoc defines this term and it's very simple to understand - it's very unambiguous what it means in the code. I think there are people that use it too - this is not some internal API - this java code is what you use to explore zookeeper and look at the cluster state - I know of lots of code outside the project that uses it and I'm against simply changing these APIs that have now been in use for years just so we can have getShard rather than the much less ambiguous getSlice. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13702428",
            "date": "2013-07-08T21:08:57+0000",
            "content": "it's very unambiguous what it means in the code\nThe problem from how much I've explored is with the use of the term shard. It(Shard) switches back and forth between meaning what I understand as a Replica and a Slice.\nHaving said that, all the documentation uses Shard and so the least we need to do is:\n1. At least vote in and have 'shard' mean the same thing everywhere. (Slice is pretty unambiguous)\n2. Document the terms Slice, Shard and Replica after we decide on how do we define a shard.\n\nI had already started to change stuff and replace 'Slice' with 'Shard'. Also, change Shard to replica wherever that's the intended use.\nNow I guess, I'd want to have a consensus before putting up the patch as it'd be a very high maintenance patch (for as long as stays un-committed). "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13702501",
            "date": "2013-07-08T21:56:59+0000",
            "content": "I was going to propose that we discourage the use of the term \"slice\" outside of the core Solr code, but... that's where we run into ClusterState being exposed to the whole world in SolrJ, with \"slice\" being the preferred term there instead of \"shard\".\n\nIt is interesting that the clusterstate.json JSON itself doesn't have the terminology problem since it consists primarily of values, like shard IDs, and does in fact use \"shards\" as the map name for... slices. So, clusterstate.json and the Zookeeper browser in the Solr Admin UI seem fine, as is.\n\nBack to the ClusterState class exposed in SolrJ... it really is heavily \"slice\" oriented, but... the good news is that it's only references to \"shard\" are for \"shardId\", with an explicit equivalence of slice and shard as in \"getShardId... Get the slice/shardId for a core.\" Replica is the main object below slice, so we don't see the logical/physical \"shard\" distinction here in ClusterState.\n\nSo, I think we can finesse the problem by adding a ClusterState Javadoc caveat of \"Slice and shard are the same in ClusterState; slice name is the same as shard ID.\"\n\nDo we have any explicit doc for clusterstate.json? Not that I know of (my book will have it though in a few weeks!). The point is that the map keys below the \"shards\" map key are \"shard IDs\". And we can note that shard ID is sometimes referred to as a slice name. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13702878",
            "date": "2013-07-09T04:21:20+0000",
            "content": "So is CloudState really the only public exposure of \"slice\"?  Why not rename it just there then, at least? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13702892",
            "date": "2013-07-09T04:34:31+0000",
            "content": "Being a coder and a user is two different things in my opinion.\n\nAs it is we would have to define shard in the code - it's ambiguous - and you are already fighting with preconceived notions of it's definition. In the code, slice is not ambiguous and calls for reading the definition of it in javadoc. It's been around for some time now, and there has been no large outcry. \n\nI'm fine with changing these API's for real gains, but I don't find this a gain given the current discussion, so I don't think the disruption in the rename is worth it at all. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13702923",
            "date": "2013-07-09T05:01:58+0000",
            "content": "I stumbled across this logging message as well, in OverseerCollectionProcessor.createCollection:\n\n\n     for (int i = 1; i <= numSlices; i++) {\n        for (int j = 1; j <= repFactor; j++) {\n          String nodeName = nodeList.get((repFactor * (i - 1) + (j - 1)) % nodeList.size());\n          String sliceName = \"shard\" + i;\n          String shardName = collectionName + \"_\" + sliceName + \"_replica\" + j;\n          log.info(\"Creating shard \" + shardName + \" as part of slice \"\n              + sliceName + \" of collection \" + collectionName + \" on \"\n              + nodeName);\n\n\n\nI think that could just become:\n\n\n          log.info(\"Creating replica \" + shardName + \" as part of shard \"\n              + sliceName + \" of collection \" + collectionName + \" on \"\n              + nodeName);\n\n\n\nAnd in OverseerCollectionProcessor.splitShard:\n\n\n        log.info(\"Creating shard \" + subShardName + \" as part of slice \"\n            + subSlice + \" of collection \" + collectionName + \" on \"\n            + nodeName);\n\n\n\nCould become:\n\n\n        log.info(\"Creating replica \" + subShardName + \" as part of shard \"\n            + subSlice + \" of collection \" + collectionName + \" on \"\n            + nodeName);\n\n "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13702926",
            "date": "2013-07-09T05:16:17+0000",
            "content": "is CloudState really the only public exposure of \"slice\"?\n\nClusterState has references to \"Slices\" and \"Slice\". It also refers to \"DocCollection\" which refers to Slices/Slice. So, there are three publically exposed classes in SolrJ referring to Slices/Slice.\n\nAnd, for reference, CloudSolrServer#getZkStateReader().getClusterState() is how the app developer gets to ClusterState. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13702934",
            "date": "2013-07-09T05:26:19+0000",
            "content": "I'm fine with changing these API's for real gains, but I don't find this a gain given the current discussion, so I don't think the disruption in the rename is worth it at all.\nIt's just an attempt to ensure that we 1. converge on a convention (Slice vs Shard) going forward. 2. Fix as much as we can in the current code, perhaps in the least invasive manner, if you suggest not changing everything.\n\nI stumbled across this logging message as well, in OverseerCollectionProcessor.createCollection:\nThat is exactly what I mean by 'shard' being used ambiguously all over.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13703604",
            "date": "2013-07-09T18:32:26+0000",
            "content": "The \"maxShardsPerNode\" parameter uses \"shard\" in the incorrect sense I believe?\nIt's kind of a questionable parameter anyway since it doesn't make sense in the context of nodes that may have different capacities. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13703917",
            "date": "2013-07-09T22:42:10+0000",
            "content": "The \"maxShardsPerNode\" parameter uses \"shard\" in the incorrect sense I believe?\n\nUhhh... and I was under the impression that it was using it the \"right\" way! Sigh.\n\nI wasn't following SOLR-4114 closely enough, but I do recall that when I read \"it is much easier to move an entire existing shards from one Solr server to another one that just joined the cluter than it is to split an exsiting shard among the Solr that used to run it and the new Solr\", I [mis]interpreted that as meaning that shard meant slice or logical shard and that I could have multiple logical shard/slice key ranges on a single node, so that as shards/slices got too big for that single node, they could be trivially moved to new nodes. In other words, that each node could support multiple key hash ranges. For example, start with 64 logical shards on 4 machines at 16 logical shards per node, and then be able to incrementally grow up to 64 logical shards on 64 nodes without any shard splitting needed. Boy, was I wrong! Wow.\n\nHonestly, from my recollections of the email discussions at the time, I would have sworn on a stack of bibles that Per, et al were talking about (logical) shards, NOT what we now refer to as replicas or physical shards.\n\nSee:\nhttps://issues.apache.org/jira/browse/SOLR-4114\nSOLR-4114 - Collection API: Allow multiple shards from one collection on the same Solr server\n\nShame on me for not reading the patch carefully to see what I see now in the code:\n\n\n      int maxShardsAllowedToCreate = maxShardsPerNode * nodeList.size();\n      int requestedShardsToCreate = numSlices * repFactor;\n\n\n\nWhen what I expected was something like:\n\n\n      int requestedLogicalShardsPerNode = (numSlices + maxShardsPerNode - 1) / maxShardsPerNode;\n\n\n\nI mean, it was already easy enough to add replica nodes for SolrCloud anyway, so the ultimate implementation did not add a great value to SolrCloud, compared to the value it would have added if multiple logical shards could have been supported per node.\n\nOTOH, maybe the overhead for \"SplitShard\" is modest enough that it delivers the same final value - scaling document capacity, as opposed to scaling query capacity which SOLR 4114 now seems more focused on.\n\nOh well... "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13717473",
            "date": "2013-07-23T18:49:15+0000",
            "content": "A very basic and non-invasive patch.\nAnything invasive would require a lot of changes to the Java public APIs and I guess would lead to a lot of stuff breaking outside of Solr.\n\nRetaining Slice/Shard and Replica.\nHave changed shard to replica wherever it should have been. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13717517",
            "date": "2013-07-23T19:35:47+0000",
            "content": "I think for things like:\n\n\n-  public static final String MAX_SHARDS_PER_NODE = \"maxShardsPerNode\";\n+  public static final String MAX_REPLICAS_PER_NODE = \"maxReplicasPerNode\";\n\n\n\nWe have to be really careful. Solr does not error/warn on unknown params - existing users might keeping using the existing param for a long time, and not even notice it no longer has an affect. I think if we make any type of change like that, we should be sure to support them as an alias or perhaps explicitly look for the old key and fail if it's found. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13717532",
            "date": "2013-07-23T19:49:28+0000",
            "content": "Sure, will add an alias for the same perhaps with a WARN log saying it's to be deprecated? "
        }
    ]
}