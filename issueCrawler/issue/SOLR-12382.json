{
    "id": "SOLR-12382",
    "title": "new data not seen immediately after commit() on SolrCloud collection with only TLOG and PULL replicas",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.3",
        "resolution": "Invalid",
        "status": "Reopened"
    },
    "description": "On collection with TLOG/PULL replicas, queries that follow right after commit(waitSearch:true) would NOT return newly added data until several seconds later.\n\nTested same scenario on another\u00a0collection with only NRT replicas and found that it behaved as expected (query returned newly added data right after commit(waitSearch:true)\u00a0was called.\n\n\n7.3 SolrCloud with 3 shards, each shard has 2 TLOG replicas + 1 PULL replica\n\nCommit settings\n\n<autoCommit>\u00a0\n\u00a0 <maxTime>15000</maxTime>\u00a0\n\u00a0 <openSearcher>false</openSearcher>\u00a0\n</autoCommit>\n<autoSoftCommit>\u00a0\n\u00a0 <maxTime>-1</maxTime>\u00a0\n</autoSoftCommit>",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-21T21:44:29+0000",
            "content": "Problems like this are rarely bugs.  More likely that there is a reason commits are taking a long time, such as a configuration problem or insufficient system resources.\n\nThis issue tracker is not a support portal.  We have mailing lists and an IRC channel which should be used to discuss all problems before opening an issue.\n\nhttp://lucene.apache.org/solr/community.html#mailing-lists-irc\n\nInfo we're going to want when you do get to the mailing list or the IRC channel: A solr.log file that includes a commit and the subsequent queries, with information about what documents were sent to the update handler, and the query details.  The full solrconfig.xml file would also be useful.\n\nIf it turns out there actually is a bug, we can re-open this issue. ",
            "author": "Shawn Heisey",
            "id": "comment-16483103"
        },
        {
            "date": "2018-05-21T21:52:06+0000",
            "content": "I do recall a discussion on the IRC channel quite some time ago that is reminiscent of this.  If that's you, it's been quite a while since we had that discussion, and I apologize for jumping the gun. ",
            "author": "Shawn Heisey",
            "id": "comment-16483108"
        },
        {
            "date": "2018-05-21T21:59:30+0000",
            "content": "Yup. That was me in IRC.  You told me to create a JIRA ticket instead of sending to the mailing list.  Please let me know how to get this issue back active again. ",
            "author": "Nguyen Nguyen",
            "id": "comment-16483113"
        },
        {
            "date": "2018-05-21T22:25:35+0000",
            "content": "I've re-opened the issue.  Let's gather some evidence.  The logfiles from all the replicas while you replicate the problem would be useful.  If you can restart the Solr instances before re-creating, so the logfile is fresh, that's best, but if that's difficult, don't worry about it. ",
            "author": "Shawn Heisey",
            "id": "comment-16483148"
        },
        {
            "date": "2018-05-21T22:45:24+0000",
            "content": "Checking my IRC log, looks like the IRC discussion was on the 17th.\n\nLooking at the IRC log, I see that there wasn't a lot of info, but when you recreated the collection on the same systems with the same config using NRT replicas, and the problem went away, that was a pretty clear indication to me that Solr might be misbehaving.\n\nThe one thing that I can think of which might cause problems, don't know why I didn't mention it on IRC, would be caused by the commit call being a soft commit.  I see that you mentioned \"commit()\" in your problem description on IRC.  Is that literally what the SolrJ code says, or are there parameters in the commit call? ",
            "author": "Shawn Heisey",
            "id": "comment-16483165"
        },
        {
            "date": "2018-05-21T23:03:57+0000",
            "content": "I wonder if tlog replica types even try to support this - we have test code to make it work in tests that is based on an assert to make sure this works in tests (that we don't return from the commit until the replicas are up to date with the leader) - but from what I've seen, it's not full proof and it wouldn't be used outside of tests. ",
            "author": "Mark Miller",
            "id": "comment-16483183"
        },
        {
            "date": "2018-05-21T23:07:07+0000",
            "content": "We do have documentation that says NRT replica types are the only kind that support soft commits.\n\nhttps://lucene.apache.org/solr/guide/7_3/shards-and-indexing-data-in-solrcloud.html#all-nrt-replicas\n\nIf your code is doing a soft commit, then this is what's happening:\n\n\n\tChanges are indexed.\n\tA soft commit is called.\n\tThe leader does the commit, but only into memory.  That change is NOT replicated to the other replicas, because TLOG and PULL replicas copy the on-disk index.\n\tYour first query is made.  It gets load balanced by the cluster to a replica other than the leader.\n\tWithin 15 seconds (your autoCommit interval), a hard commit is fired, flushing all segments to disk.  At this point, the changes to the index will be on disk, so they are replicated.  When a TLOG or PULL replica has its index change, it will open a new searcher.\n\tA query made after the other replicas successfully open a new searcher will see the change, no matter which replica it is sent to.\n\n\n\nThe solution to this is to use only hard commits, or stick with NRT replicas. ",
            "author": "Shawn Heisey",
            "id": "comment-16483184"
        },
        {
            "date": "2018-05-21T23:15:26+0000",
            "content": "Whoever added the feature will be able to comment better, but from what I have seen, non leader replicas skip any commit with tlog mode - and only in tests, rather then just returning on commit, there is an assert that tries to wait until the replica appears to be in sync with the leader.\n\nPull replicas also seem to just skip any commit on replicas and log a warning - they don't have the test wait code. In both cases, I don't see how waitSearcher=true would affect anything on the replica side unless somehow it's handled in some strange other place. AFAICT it would only wait for the leader to open the new searcher. ",
            "author": "Mark Miller",
            "id": "comment-16483188"
        },
        {
            "date": "2018-05-21T23:18:25+0000",
            "content": "There is another possibility.  If this is how TLOG/PULL work, then it would happen even if your commits are hard commits.  Perhaps somebody who's familiar with the implementation can say whether this is possible.\n\nIf replication to TLOG and PULL replicas happens on a polling interval (like master/slave for non-cloud setups) rather than being triggered on every index change, then the other replicas would not see changes immediately. ",
            "author": "Shawn Heisey",
            "id": "comment-16483190"
        },
        {
            "date": "2018-05-21T23:30:59+0000",
            "content": "Right, I believe that is the idea - they catch up when they end up polling. So I assume this is all by design. Would be nice to at least optionally get the behavior of waiting until replicas are up to date before return from a commit w/ waitSearcher=true. ",
            "author": "Mark Miller",
            "id": "comment-16483203"
        },
        {
            "date": "2018-05-22T02:25:03+0000",
            "content": "Right, I believe that is the idea - they catch up when they end up polling. So I assume this is all by design. Would be nice to at least optionally get the behavior of waiting until replicas are up to date before return from a commit w/ waitSearcher=true.\n Totally correct, nothing more need to be explained here. ",
            "author": "Cao Manh Dat",
            "id": "comment-16483416"
        },
        {
            "date": "2018-05-22T03:13:43+0000",
            "content": "Thanks everyone!! ",
            "author": "Nguyen Nguyen",
            "id": "comment-16483433"
        },
        {
            "date": "2018-05-22T12:35:52+0000",
            "content": "Can this be closed then? ",
            "author": "Erick Erickson",
            "id": "comment-16483875"
        },
        {
            "date": "2018-05-22T14:45:39+0000",
            "content": "Can this be closed then?\n\nI think so, unless we want to pursue waiting for searchers on all replicas for types other than NRT.  This is the only issue that comes up when I attempt a Jira search for that. ",
            "author": "Shawn Heisey",
            "id": "comment-16484073"
        }
    ]
}