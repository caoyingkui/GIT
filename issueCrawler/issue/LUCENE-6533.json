{
    "id": "LUCENE-6533",
    "title": "SlowCompositeReaderWrapper is caching an AssertingBits instance",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "I hit this curious failure in the new TestGeoPointQuery:\n\n\n   [junit4]   2> \u0e21\u0e34.\u0e22. 09, 2015 12:49:55 \u0e01\u0e48\u0e2d\u0e19\u0e40\u0e17\u0e35\u0e48\u0e22\u0e07 com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\n   [junit4]   2> WARNING: Uncaught exception in thread: Thread[T1,5,TGRP-TestGeoPointQuery]\n   [junit4]   2> java.lang.AssertionError: Bits are only supposed to be consumed in the thread in which they have been acquired. But was acquired in Thread[TEST-TestGeoPointQuery.testRandom-seed#[173A293B58C5F8A1],5,TGRP-TestGeoPointQuery] and consumed in Thread[T1,5,TGRP-TestGeoPointQuery].\n   [junit4]   2> \tat __randomizedtesting.SeedInfo.seed([173A293B58C5F8A1]:0)\n   [junit4]   2> \tat org.apache.lucene.index.AssertingLeafReader.assertThread(AssertingLeafReader.java:39)\n   [junit4]   2> \tat org.apache.lucene.index.AssertingLeafReader.access$000(AssertingLeafReader.java:33)\n   [junit4]   2> \tat org.apache.lucene.index.AssertingLeafReader$AssertingBits.get(AssertingLeafReader.java:769)\n   [junit4]   2> \tat org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight$1.matches(LRUQueryCache.java:606)\n   [junit4]   2> \tat org.apache.lucene.search.TwoPhaseIterator$1.doNext(TwoPhaseIterator.java:69)\n   [junit4]   2> \tat org.apache.lucene.search.TwoPhaseIterator$1.nextDoc(TwoPhaseIterator.java:57)\n   [junit4]   2> \tat org.apache.lucene.search.ConstantScoreScorer.nextDoc(ConstantScoreScorer.java:78)\n   [junit4]   2> \tat org.apache.lucene.search.Weight$DefaultBulkScorer.scoreAll(Weight.java:204)\n   [junit4]   2> \tat org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:176)\n   [junit4]   2> \tat org.apache.lucene.search.AssertingBulkScorer.score(AssertingBulkScorer.java:79)\n   [junit4]   2> \tat org.apache.lucene.search.AssertingBulkScorer.score(AssertingBulkScorer.java:63)\n   [junit4]   2> \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:563)\n   [junit4]   2> \tat org.apache.lucene.search.AssertingIndexSearcher.search(AssertingIndexSearcher.java:92)\n   [junit4]   2> \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:367)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1._run(TestGeoPointQuery.java:382)\n   [junit4]   2> \tat org.apache.lucene.search.TestGeoPointQuery$1.run(TestGeoPointQuery.java:309)\n   [junit4]   2> \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testRandom -Dtests.seed=173A293B58C5F8A1 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=th -Dtests.timezone=Africa/Djibouti -Dtests.asserts=true -Dtests.file.encoding=UTF-8",
    "attachments": {
        "LUCENE-6533.patch": "https://issues.apache.org/jira/secure/attachment/12738543/LUCENE-6533.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14577920",
            "author": "Michael McCandless",
            "date": "2015-06-08T21:57:27+0000",
            "content": "I think what's happening is newSearcher is using an ExecutorService, so I have multiple threads calling acceptedDocs.get, and AssertingLeafReader wrapped acceptedDocs as an AssertingBits.\n\nBut I'm confused ... isn't it OK if more than one thread calls .get on the acceptedDocs?\n\nYet why are no other tests failing ... seems more likely to be a test bug in this new test! "
        },
        {
            "id": "comment-14577924",
            "author": "Michael McCandless",
            "date": "2015-06-08T21:59:07+0000",
            "content": "Oh I see, we wrap as AssertingDocs private to that thread ... so there is somehow something wrong w/ the test.  I'll dig. "
        },
        {
            "id": "comment-14578611",
            "author": "Michael McCandless",
            "date": "2015-06-09T09:08:03+0000",
            "content": "OK this is not a GeoPoint issue ... it's a problem with how the readers are wrapped in LuceneTestCase.wrapReader.\n\nI isolated to the attached test case.\n\nIt happens when we first wrap the reader in AssertLeafReader, and then in SlowCompositeReaderWrapper.\n\nThe issue is that SlowCompositeReaderWrapper calls MultiFields.getBits to get the live docs up front in the ctor, which returns an AssertingBits, and then this AssertingBits is easily shared across threads.\n\nI'm not sure how to fix it ... I suppose we could \"fix\" SlowCompositeReaderWrapper to not cache its Bits like that, but that seems overly cruel: it seems like AssertingBits is overstepping its purpose somehow.  It should only be used to wrap a getLiveDocs returned e.g. to a search thread ... "
        },
        {
            "id": "comment-14580262",
            "author": "Adrien Grand",
            "date": "2015-06-10T09:04:40+0000",
            "content": "Thanks Mike for creating an isolated test case.\n\nThe reason why I added this assertion in the first place was to make live docs consistent with terms enums and dvs, which are cached per thread and should not leak. While it's not really needed today given how live docs are implemented, it could be if we ever want to have disk-based live docs.\n\nWe could fix the issue by not caching live docs anymore in SlowCompositeReaderWrapper and moving the MultiFields.getLiveDocs(in) call from SlowCompositeReaderWrapper constructor to SlowCompositeReaderWrapper.getLiveDocs (just like we arleady do for our other random-access data-structures like norms or doc values). "
        },
        {
            "id": "comment-14580271",
            "author": "Adrien Grand",
            "date": "2015-06-10T09:14:05+0000",
            "content": "I said \"could\" because another option would be to consider that this assertion is abusive and that we will never need per-thread state for live docs. But I personally think it is sane, especially given that we tend to think about live docs and doc values as the same thing: random-access, updateable, ... "
        },
        {
            "id": "comment-14580286",
            "author": "Michael McCandless",
            "date": "2015-06-10T09:22:34+0000",
            "content": "Thanks Adrien Grand, that makes sense ... here's a new patch that removes the live docs caching in SCRW ... test now passes, and the original seed in the geo test also passes!  I'll commit soon. "
        },
        {
            "id": "comment-14580288",
            "author": "Adrien Grand",
            "date": "2015-06-10T09:24:09+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14580300",
            "author": "ASF subversion and git services",
            "date": "2015-06-10T09:29:11+0000",
            "content": "Commit 1684615 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1684615 ]\n\nLUCENE-6533: don't cache live docs in SlowCompositeReaderWrapper "
        },
        {
            "id": "comment-14580325",
            "author": "ASF subversion and git services",
            "date": "2015-06-10T09:54:24+0000",
            "content": "Commit 1684625 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1684625 ]\n\nLUCENE-6533: don't cache live docs in SlowCompositeReaderWrapper "
        },
        {
            "id": "comment-14580326",
            "author": "Michael McCandless",
            "date": "2015-06-10T09:54:41+0000",
            "content": "Thanks Adrien Grand! "
        },
        {
            "id": "comment-14713087",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:43+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}